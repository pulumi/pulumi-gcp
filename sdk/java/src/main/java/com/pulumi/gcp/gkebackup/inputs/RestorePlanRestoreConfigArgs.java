// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigExcludedNamespacesArgs;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigSelectedApplicationsArgs;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigSelectedNamespacesArgs;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigTransformationRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RestorePlanRestoreConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestorePlanRestoreConfigArgs Empty = new RestorePlanRestoreConfigArgs();

    /**
     * If True, restore all namespaced resources in the Backup.
     * Setting this field to False will result in an error.
     * 
     */
    @Import(name="allNamespaces")
    private @Nullable Output<Boolean> allNamespaces;

    /**
     * @return If True, restore all namespaced resources in the Backup.
     * Setting this field to False will result in an error.
     * 
     */
    public Optional<Output<Boolean>> allNamespaces() {
        return Optional.ofNullable(this.allNamespaces);
    }

    /**
     * Defines the behavior for handling the situation where cluster-scoped resources
     * being restored already exist in the target cluster.
     * This MUST be set to a value other than `CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED`
     * if `clusterResourceRestoreScope` is anyting other than `noGroupKinds`.
     * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#clusterresourceconflictpolicy
     * for more information on each policy option.
     * Possible values are: `USE_EXISTING_VERSION`, `USE_BACKUP_VERSION`.
     * 
     */
    @Import(name="clusterResourceConflictPolicy")
    private @Nullable Output<String> clusterResourceConflictPolicy;

    /**
     * @return Defines the behavior for handling the situation where cluster-scoped resources
     * being restored already exist in the target cluster.
     * This MUST be set to a value other than `CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED`
     * if `clusterResourceRestoreScope` is anyting other than `noGroupKinds`.
     * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#clusterresourceconflictpolicy
     * for more information on each policy option.
     * Possible values are: `USE_EXISTING_VERSION`, `USE_BACKUP_VERSION`.
     * 
     */
    public Optional<Output<String>> clusterResourceConflictPolicy() {
        return Optional.ofNullable(this.clusterResourceConflictPolicy);
    }

    /**
     * Identifies the cluster-scoped resources to restore from the Backup.
     * Structure is documented below.
     * 
     */
    @Import(name="clusterResourceRestoreScope")
    private @Nullable Output<RestorePlanRestoreConfigClusterResourceRestoreScopeArgs> clusterResourceRestoreScope;

    /**
     * @return Identifies the cluster-scoped resources to restore from the Backup.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RestorePlanRestoreConfigClusterResourceRestoreScopeArgs>> clusterResourceRestoreScope() {
        return Optional.ofNullable(this.clusterResourceRestoreScope);
    }

    /**
     * A list of selected namespaces excluded from restoration.
     * All namespaces except those in this list will be restored.
     * Structure is documented below.
     * 
     */
    @Import(name="excludedNamespaces")
    private @Nullable Output<RestorePlanRestoreConfigExcludedNamespacesArgs> excludedNamespaces;

    /**
     * @return A list of selected namespaces excluded from restoration.
     * All namespaces except those in this list will be restored.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RestorePlanRestoreConfigExcludedNamespacesArgs>> excludedNamespaces() {
        return Optional.ofNullable(this.excludedNamespaces);
    }

    /**
     * Defines the behavior for handling the situation where sets of namespaced resources
     * being restored already exist in the target cluster.
     * This MUST be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
     * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
     * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#namespacedresourcerestoremode
     * for more information on each mode.
     * Possible values are: `DELETE_AND_RESTORE`, `FAIL_ON_CONFLICT`.
     * 
     */
    @Import(name="namespacedResourceRestoreMode")
    private @Nullable Output<String> namespacedResourceRestoreMode;

    /**
     * @return Defines the behavior for handling the situation where sets of namespaced resources
     * being restored already exist in the target cluster.
     * This MUST be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
     * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
     * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#namespacedresourcerestoremode
     * for more information on each mode.
     * Possible values are: `DELETE_AND_RESTORE`, `FAIL_ON_CONFLICT`.
     * 
     */
    public Optional<Output<String>> namespacedResourceRestoreMode() {
        return Optional.ofNullable(this.namespacedResourceRestoreMode);
    }

    /**
     * Do not restore any namespaced resources if set to &#34;True&#34;.
     * Specifying this field to &#34;False&#34; is not allowed.
     * 
     */
    @Import(name="noNamespaces")
    private @Nullable Output<Boolean> noNamespaces;

    /**
     * @return Do not restore any namespaced resources if set to &#34;True&#34;.
     * Specifying this field to &#34;False&#34; is not allowed.
     * 
     */
    public Optional<Output<Boolean>> noNamespaces() {
        return Optional.ofNullable(this.noNamespaces);
    }

    /**
     * A list of selected ProtectedApplications to restore.
     * The listed ProtectedApplications and all the resources
     * to which they refer will be restored.
     * Structure is documented below.
     * 
     */
    @Import(name="selectedApplications")
    private @Nullable Output<RestorePlanRestoreConfigSelectedApplicationsArgs> selectedApplications;

    /**
     * @return A list of selected ProtectedApplications to restore.
     * The listed ProtectedApplications and all the resources
     * to which they refer will be restored.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RestorePlanRestoreConfigSelectedApplicationsArgs>> selectedApplications() {
        return Optional.ofNullable(this.selectedApplications);
    }

    /**
     * A list of selected namespaces to restore from the Backup.
     * The listed Namespaces and all resources contained in them will be restored.
     * Structure is documented below.
     * 
     */
    @Import(name="selectedNamespaces")
    private @Nullable Output<RestorePlanRestoreConfigSelectedNamespacesArgs> selectedNamespaces;

    /**
     * @return A list of selected namespaces to restore from the Backup.
     * The listed Namespaces and all resources contained in them will be restored.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RestorePlanRestoreConfigSelectedNamespacesArgs>> selectedNamespaces() {
        return Optional.ofNullable(this.selectedNamespaces);
    }

    /**
     * A list of transformation rules to be applied against Kubernetes
     * resources as they are selected for restoration from a Backup.
     * Rules are executed in order defined - this order matters,
     * as changes made by a rule may impact the filtering logic of subsequent
     * rules. An empty list means no transformation will occur.
     * Structure is documented below.
     * 
     */
    @Import(name="transformationRules")
    private @Nullable Output<List<RestorePlanRestoreConfigTransformationRuleArgs>> transformationRules;

    /**
     * @return A list of transformation rules to be applied against Kubernetes
     * resources as they are selected for restoration from a Backup.
     * Rules are executed in order defined - this order matters,
     * as changes made by a rule may impact the filtering logic of subsequent
     * rules. An empty list means no transformation will occur.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RestorePlanRestoreConfigTransformationRuleArgs>>> transformationRules() {
        return Optional.ofNullable(this.transformationRules);
    }

    /**
     * Specifies the mechanism to be used to restore volume data.
     * This should be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
     * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
     * If not specified, it will be treated as `NO_VOLUME_DATA_RESTORATION`.
     * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#VolumeDataRestorePolicy
     * for more information on each policy option.
     * Possible values are: `RESTORE_VOLUME_DATA_FROM_BACKUP`, `REUSE_VOLUME_HANDLE_FROM_BACKUP`, `NO_VOLUME_DATA_RESTORATION`.
     * 
     */
    @Import(name="volumeDataRestorePolicy")
    private @Nullable Output<String> volumeDataRestorePolicy;

    /**
     * @return Specifies the mechanism to be used to restore volume data.
     * This should be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
     * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
     * If not specified, it will be treated as `NO_VOLUME_DATA_RESTORATION`.
     * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#VolumeDataRestorePolicy
     * for more information on each policy option.
     * Possible values are: `RESTORE_VOLUME_DATA_FROM_BACKUP`, `REUSE_VOLUME_HANDLE_FROM_BACKUP`, `NO_VOLUME_DATA_RESTORATION`.
     * 
     */
    public Optional<Output<String>> volumeDataRestorePolicy() {
        return Optional.ofNullable(this.volumeDataRestorePolicy);
    }

    private RestorePlanRestoreConfigArgs() {}

    private RestorePlanRestoreConfigArgs(RestorePlanRestoreConfigArgs $) {
        this.allNamespaces = $.allNamespaces;
        this.clusterResourceConflictPolicy = $.clusterResourceConflictPolicy;
        this.clusterResourceRestoreScope = $.clusterResourceRestoreScope;
        this.excludedNamespaces = $.excludedNamespaces;
        this.namespacedResourceRestoreMode = $.namespacedResourceRestoreMode;
        this.noNamespaces = $.noNamespaces;
        this.selectedApplications = $.selectedApplications;
        this.selectedNamespaces = $.selectedNamespaces;
        this.transformationRules = $.transformationRules;
        this.volumeDataRestorePolicy = $.volumeDataRestorePolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestorePlanRestoreConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestorePlanRestoreConfigArgs $;

        public Builder() {
            $ = new RestorePlanRestoreConfigArgs();
        }

        public Builder(RestorePlanRestoreConfigArgs defaults) {
            $ = new RestorePlanRestoreConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allNamespaces If True, restore all namespaced resources in the Backup.
         * Setting this field to False will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder allNamespaces(@Nullable Output<Boolean> allNamespaces) {
            $.allNamespaces = allNamespaces;
            return this;
        }

        /**
         * @param allNamespaces If True, restore all namespaced resources in the Backup.
         * Setting this field to False will result in an error.
         * 
         * @return builder
         * 
         */
        public Builder allNamespaces(Boolean allNamespaces) {
            return allNamespaces(Output.of(allNamespaces));
        }

        /**
         * @param clusterResourceConflictPolicy Defines the behavior for handling the situation where cluster-scoped resources
         * being restored already exist in the target cluster.
         * This MUST be set to a value other than `CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED`
         * if `clusterResourceRestoreScope` is anyting other than `noGroupKinds`.
         * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#clusterresourceconflictpolicy
         * for more information on each policy option.
         * Possible values are: `USE_EXISTING_VERSION`, `USE_BACKUP_VERSION`.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceConflictPolicy(@Nullable Output<String> clusterResourceConflictPolicy) {
            $.clusterResourceConflictPolicy = clusterResourceConflictPolicy;
            return this;
        }

        /**
         * @param clusterResourceConflictPolicy Defines the behavior for handling the situation where cluster-scoped resources
         * being restored already exist in the target cluster.
         * This MUST be set to a value other than `CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED`
         * if `clusterResourceRestoreScope` is anyting other than `noGroupKinds`.
         * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#clusterresourceconflictpolicy
         * for more information on each policy option.
         * Possible values are: `USE_EXISTING_VERSION`, `USE_BACKUP_VERSION`.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceConflictPolicy(String clusterResourceConflictPolicy) {
            return clusterResourceConflictPolicy(Output.of(clusterResourceConflictPolicy));
        }

        /**
         * @param clusterResourceRestoreScope Identifies the cluster-scoped resources to restore from the Backup.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceRestoreScope(@Nullable Output<RestorePlanRestoreConfigClusterResourceRestoreScopeArgs> clusterResourceRestoreScope) {
            $.clusterResourceRestoreScope = clusterResourceRestoreScope;
            return this;
        }

        /**
         * @param clusterResourceRestoreScope Identifies the cluster-scoped resources to restore from the Backup.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceRestoreScope(RestorePlanRestoreConfigClusterResourceRestoreScopeArgs clusterResourceRestoreScope) {
            return clusterResourceRestoreScope(Output.of(clusterResourceRestoreScope));
        }

        /**
         * @param excludedNamespaces A list of selected namespaces excluded from restoration.
         * All namespaces except those in this list will be restored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder excludedNamespaces(@Nullable Output<RestorePlanRestoreConfigExcludedNamespacesArgs> excludedNamespaces) {
            $.excludedNamespaces = excludedNamespaces;
            return this;
        }

        /**
         * @param excludedNamespaces A list of selected namespaces excluded from restoration.
         * All namespaces except those in this list will be restored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder excludedNamespaces(RestorePlanRestoreConfigExcludedNamespacesArgs excludedNamespaces) {
            return excludedNamespaces(Output.of(excludedNamespaces));
        }

        /**
         * @param namespacedResourceRestoreMode Defines the behavior for handling the situation where sets of namespaced resources
         * being restored already exist in the target cluster.
         * This MUST be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
         * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
         * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#namespacedresourcerestoremode
         * for more information on each mode.
         * Possible values are: `DELETE_AND_RESTORE`, `FAIL_ON_CONFLICT`.
         * 
         * @return builder
         * 
         */
        public Builder namespacedResourceRestoreMode(@Nullable Output<String> namespacedResourceRestoreMode) {
            $.namespacedResourceRestoreMode = namespacedResourceRestoreMode;
            return this;
        }

        /**
         * @param namespacedResourceRestoreMode Defines the behavior for handling the situation where sets of namespaced resources
         * being restored already exist in the target cluster.
         * This MUST be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
         * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
         * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#namespacedresourcerestoremode
         * for more information on each mode.
         * Possible values are: `DELETE_AND_RESTORE`, `FAIL_ON_CONFLICT`.
         * 
         * @return builder
         * 
         */
        public Builder namespacedResourceRestoreMode(String namespacedResourceRestoreMode) {
            return namespacedResourceRestoreMode(Output.of(namespacedResourceRestoreMode));
        }

        /**
         * @param noNamespaces Do not restore any namespaced resources if set to &#34;True&#34;.
         * Specifying this field to &#34;False&#34; is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder noNamespaces(@Nullable Output<Boolean> noNamespaces) {
            $.noNamespaces = noNamespaces;
            return this;
        }

        /**
         * @param noNamespaces Do not restore any namespaced resources if set to &#34;True&#34;.
         * Specifying this field to &#34;False&#34; is not allowed.
         * 
         * @return builder
         * 
         */
        public Builder noNamespaces(Boolean noNamespaces) {
            return noNamespaces(Output.of(noNamespaces));
        }

        /**
         * @param selectedApplications A list of selected ProtectedApplications to restore.
         * The listed ProtectedApplications and all the resources
         * to which they refer will be restored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectedApplications(@Nullable Output<RestorePlanRestoreConfigSelectedApplicationsArgs> selectedApplications) {
            $.selectedApplications = selectedApplications;
            return this;
        }

        /**
         * @param selectedApplications A list of selected ProtectedApplications to restore.
         * The listed ProtectedApplications and all the resources
         * to which they refer will be restored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectedApplications(RestorePlanRestoreConfigSelectedApplicationsArgs selectedApplications) {
            return selectedApplications(Output.of(selectedApplications));
        }

        /**
         * @param selectedNamespaces A list of selected namespaces to restore from the Backup.
         * The listed Namespaces and all resources contained in them will be restored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectedNamespaces(@Nullable Output<RestorePlanRestoreConfigSelectedNamespacesArgs> selectedNamespaces) {
            $.selectedNamespaces = selectedNamespaces;
            return this;
        }

        /**
         * @param selectedNamespaces A list of selected namespaces to restore from the Backup.
         * The listed Namespaces and all resources contained in them will be restored.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectedNamespaces(RestorePlanRestoreConfigSelectedNamespacesArgs selectedNamespaces) {
            return selectedNamespaces(Output.of(selectedNamespaces));
        }

        /**
         * @param transformationRules A list of transformation rules to be applied against Kubernetes
         * resources as they are selected for restoration from a Backup.
         * Rules are executed in order defined - this order matters,
         * as changes made by a rule may impact the filtering logic of subsequent
         * rules. An empty list means no transformation will occur.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder transformationRules(@Nullable Output<List<RestorePlanRestoreConfigTransformationRuleArgs>> transformationRules) {
            $.transformationRules = transformationRules;
            return this;
        }

        /**
         * @param transformationRules A list of transformation rules to be applied against Kubernetes
         * resources as they are selected for restoration from a Backup.
         * Rules are executed in order defined - this order matters,
         * as changes made by a rule may impact the filtering logic of subsequent
         * rules. An empty list means no transformation will occur.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder transformationRules(List<RestorePlanRestoreConfigTransformationRuleArgs> transformationRules) {
            return transformationRules(Output.of(transformationRules));
        }

        /**
         * @param transformationRules A list of transformation rules to be applied against Kubernetes
         * resources as they are selected for restoration from a Backup.
         * Rules are executed in order defined - this order matters,
         * as changes made by a rule may impact the filtering logic of subsequent
         * rules. An empty list means no transformation will occur.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder transformationRules(RestorePlanRestoreConfigTransformationRuleArgs... transformationRules) {
            return transformationRules(List.of(transformationRules));
        }

        /**
         * @param volumeDataRestorePolicy Specifies the mechanism to be used to restore volume data.
         * This should be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
         * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
         * If not specified, it will be treated as `NO_VOLUME_DATA_RESTORATION`.
         * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#VolumeDataRestorePolicy
         * for more information on each policy option.
         * Possible values are: `RESTORE_VOLUME_DATA_FROM_BACKUP`, `REUSE_VOLUME_HANDLE_FROM_BACKUP`, `NO_VOLUME_DATA_RESTORATION`.
         * 
         * @return builder
         * 
         */
        public Builder volumeDataRestorePolicy(@Nullable Output<String> volumeDataRestorePolicy) {
            $.volumeDataRestorePolicy = volumeDataRestorePolicy;
            return this;
        }

        /**
         * @param volumeDataRestorePolicy Specifies the mechanism to be used to restore volume data.
         * This should be set to a value other than `NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED`
         * if the `namespacedResourceRestoreScope` is anything other than `noNamespaces`.
         * If not specified, it will be treated as `NO_VOLUME_DATA_RESTORATION`.
         * See https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/RestoreConfig#VolumeDataRestorePolicy
         * for more information on each policy option.
         * Possible values are: `RESTORE_VOLUME_DATA_FROM_BACKUP`, `REUSE_VOLUME_HANDLE_FROM_BACKUP`, `NO_VOLUME_DATA_RESTORATION`.
         * 
         * @return builder
         * 
         */
        public Builder volumeDataRestorePolicy(String volumeDataRestorePolicy) {
            return volumeDataRestorePolicy(Output.of(volumeDataRestorePolicy));
        }

        public RestorePlanRestoreConfigArgs build() {
            return $;
        }
    }

}
