// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.diagflow.outputs.CxWebhookServiceDirectoryGenericWebServiceOauthConfig;
import com.pulumi.gcp.diagflow.outputs.CxWebhookServiceDirectoryGenericWebServiceSecretVersionsForRequestHeader;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxWebhookServiceDirectoryGenericWebService {
    /**
     * @return Specifies a list of allowed custom CA certificates (in DER format) for
     * HTTPS verification. This overrides the default SSL trust store. If this
     * is empty or unspecified, Dialogflow will use Google&#39;s default trust store
     * to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with &#34;subject alt
     * name&#34;. For instance a certificate can be self-signed using the following
     * command,
     * openssl x509 -req -days 200 -in example.com.csr\
     * -signkey example.com.key\
     * -out example.com.crt\
     * -extfile &lt;(printf &#34;\nsubjectAltName=&#39;DNS:www.example.com&#39;&#34;)
     * 
     */
    private @Nullable List<String> allowedCaCerts;
    /**
     * @return HTTP method for the flexible webhook calls. Standard webhook always uses
     * POST.
     * Possible values are: `POST`, `GET`, `HEAD`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`.
     * 
     */
    private @Nullable String httpMethod;
    /**
     * @return Represents configuration of OAuth client credential flow for 3rd party
     * API authentication.
     * Structure is documented below.
     * 
     */
    private @Nullable CxWebhookServiceDirectoryGenericWebServiceOauthConfig oauthConfig;
    /**
     * @return Maps the values extracted from specific fields of the flexible webhook
     * response into session parameters.
     * - Key: session parameter name
     * - Value: field path in the webhook response
     * 
     */
    private @Nullable Map<String,String> parameterMapping;
    /**
     * @return Defines a custom JSON object as request body to send to flexible webhook.
     * 
     */
    private @Nullable String requestBody;
    /**
     * @return The HTTP request headers to send together with webhook requests.
     * 
     */
    private @Nullable Map<String,String> requestHeaders;
    /**
     * @return The SecretManager secret version resource storing the username:password
     * pair for HTTP Basic authentication.
     * Format: `projects/{project}/secrets/{secret}/versions/{version}`
     * 
     */
    private @Nullable String secretVersionForUsernamePassword;
    /**
     * @return The HTTP request headers to send together with webhook requests. Header
     * values are stored in SecretManager secret versions.
     * When the same header name is specified in both `request_headers` and
     * `secret_versions_for_request_headers`, the value in
     * `secret_versions_for_request_headers` will be used.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CxWebhookServiceDirectoryGenericWebServiceSecretVersionsForRequestHeader> secretVersionsForRequestHeaders;
    /**
     * @return Indicate the auth token type generated from the [Diglogflow service
     * agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent).
     * The generated token is sent in the Authorization header.
     * Possible values are: `NONE`, `ID_TOKEN`, `ACCESS_TOKEN`.
     * 
     */
    private @Nullable String serviceAgentAuth;
    /**
     * @return The webhook URI for receiving POST requests. It must use https protocol.
     * 
     */
    private String uri;
    /**
     * @return Type of the webhook.
     * Possible values are: `STANDARD`, `FLEXIBLE`.
     * 
     */
    private @Nullable String webhookType;

    private CxWebhookServiceDirectoryGenericWebService() {}
    /**
     * @return Specifies a list of allowed custom CA certificates (in DER format) for
     * HTTPS verification. This overrides the default SSL trust store. If this
     * is empty or unspecified, Dialogflow will use Google&#39;s default trust store
     * to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with &#34;subject alt
     * name&#34;. For instance a certificate can be self-signed using the following
     * command,
     * openssl x509 -req -days 200 -in example.com.csr\
     * -signkey example.com.key\
     * -out example.com.crt\
     * -extfile &lt;(printf &#34;\nsubjectAltName=&#39;DNS:www.example.com&#39;&#34;)
     * 
     */
    public List<String> allowedCaCerts() {
        return this.allowedCaCerts == null ? List.of() : this.allowedCaCerts;
    }
    /**
     * @return HTTP method for the flexible webhook calls. Standard webhook always uses
     * POST.
     * Possible values are: `POST`, `GET`, `HEAD`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`.
     * 
     */
    public Optional<String> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }
    /**
     * @return Represents configuration of OAuth client credential flow for 3rd party
     * API authentication.
     * Structure is documented below.
     * 
     */
    public Optional<CxWebhookServiceDirectoryGenericWebServiceOauthConfig> oauthConfig() {
        return Optional.ofNullable(this.oauthConfig);
    }
    /**
     * @return Maps the values extracted from specific fields of the flexible webhook
     * response into session parameters.
     * - Key: session parameter name
     * - Value: field path in the webhook response
     * 
     */
    public Map<String,String> parameterMapping() {
        return this.parameterMapping == null ? Map.of() : this.parameterMapping;
    }
    /**
     * @return Defines a custom JSON object as request body to send to flexible webhook.
     * 
     */
    public Optional<String> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }
    /**
     * @return The HTTP request headers to send together with webhook requests.
     * 
     */
    public Map<String,String> requestHeaders() {
        return this.requestHeaders == null ? Map.of() : this.requestHeaders;
    }
    /**
     * @return The SecretManager secret version resource storing the username:password
     * pair for HTTP Basic authentication.
     * Format: `projects/{project}/secrets/{secret}/versions/{version}`
     * 
     */
    public Optional<String> secretVersionForUsernamePassword() {
        return Optional.ofNullable(this.secretVersionForUsernamePassword);
    }
    /**
     * @return The HTTP request headers to send together with webhook requests. Header
     * values are stored in SecretManager secret versions.
     * When the same header name is specified in both `request_headers` and
     * `secret_versions_for_request_headers`, the value in
     * `secret_versions_for_request_headers` will be used.
     * Structure is documented below.
     * 
     */
    public List<CxWebhookServiceDirectoryGenericWebServiceSecretVersionsForRequestHeader> secretVersionsForRequestHeaders() {
        return this.secretVersionsForRequestHeaders == null ? List.of() : this.secretVersionsForRequestHeaders;
    }
    /**
     * @return Indicate the auth token type generated from the [Diglogflow service
     * agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent).
     * The generated token is sent in the Authorization header.
     * Possible values are: `NONE`, `ID_TOKEN`, `ACCESS_TOKEN`.
     * 
     */
    public Optional<String> serviceAgentAuth() {
        return Optional.ofNullable(this.serviceAgentAuth);
    }
    /**
     * @return The webhook URI for receiving POST requests. It must use https protocol.
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return Type of the webhook.
     * Possible values are: `STANDARD`, `FLEXIBLE`.
     * 
     */
    public Optional<String> webhookType() {
        return Optional.ofNullable(this.webhookType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxWebhookServiceDirectoryGenericWebService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedCaCerts;
        private @Nullable String httpMethod;
        private @Nullable CxWebhookServiceDirectoryGenericWebServiceOauthConfig oauthConfig;
        private @Nullable Map<String,String> parameterMapping;
        private @Nullable String requestBody;
        private @Nullable Map<String,String> requestHeaders;
        private @Nullable String secretVersionForUsernamePassword;
        private @Nullable List<CxWebhookServiceDirectoryGenericWebServiceSecretVersionsForRequestHeader> secretVersionsForRequestHeaders;
        private @Nullable String serviceAgentAuth;
        private String uri;
        private @Nullable String webhookType;
        public Builder() {}
        public Builder(CxWebhookServiceDirectoryGenericWebService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedCaCerts = defaults.allowedCaCerts;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthConfig = defaults.oauthConfig;
    	      this.parameterMapping = defaults.parameterMapping;
    	      this.requestBody = defaults.requestBody;
    	      this.requestHeaders = defaults.requestHeaders;
    	      this.secretVersionForUsernamePassword = defaults.secretVersionForUsernamePassword;
    	      this.secretVersionsForRequestHeaders = defaults.secretVersionsForRequestHeaders;
    	      this.serviceAgentAuth = defaults.serviceAgentAuth;
    	      this.uri = defaults.uri;
    	      this.webhookType = defaults.webhookType;
        }

        @CustomType.Setter
        public Builder allowedCaCerts(@Nullable List<String> allowedCaCerts) {

            this.allowedCaCerts = allowedCaCerts;
            return this;
        }
        public Builder allowedCaCerts(String... allowedCaCerts) {
            return allowedCaCerts(List.of(allowedCaCerts));
        }
        @CustomType.Setter
        public Builder httpMethod(@Nullable String httpMethod) {

            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder oauthConfig(@Nullable CxWebhookServiceDirectoryGenericWebServiceOauthConfig oauthConfig) {

            this.oauthConfig = oauthConfig;
            return this;
        }
        @CustomType.Setter
        public Builder parameterMapping(@Nullable Map<String,String> parameterMapping) {

            this.parameterMapping = parameterMapping;
            return this;
        }
        @CustomType.Setter
        public Builder requestBody(@Nullable String requestBody) {

            this.requestBody = requestBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaders(@Nullable Map<String,String> requestHeaders) {

            this.requestHeaders = requestHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder secretVersionForUsernamePassword(@Nullable String secretVersionForUsernamePassword) {

            this.secretVersionForUsernamePassword = secretVersionForUsernamePassword;
            return this;
        }
        @CustomType.Setter
        public Builder secretVersionsForRequestHeaders(@Nullable List<CxWebhookServiceDirectoryGenericWebServiceSecretVersionsForRequestHeader> secretVersionsForRequestHeaders) {

            this.secretVersionsForRequestHeaders = secretVersionsForRequestHeaders;
            return this;
        }
        public Builder secretVersionsForRequestHeaders(CxWebhookServiceDirectoryGenericWebServiceSecretVersionsForRequestHeader... secretVersionsForRequestHeaders) {
            return secretVersionsForRequestHeaders(List.of(secretVersionsForRequestHeaders));
        }
        @CustomType.Setter
        public Builder serviceAgentAuth(@Nullable String serviceAgentAuth) {

            this.serviceAgentAuth = serviceAgentAuth;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("CxWebhookServiceDirectoryGenericWebService", "uri");
            }
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder webhookType(@Nullable String webhookType) {

            this.webhookType = webhookType;
            return this;
        }
        public CxWebhookServiceDirectoryGenericWebService build() {
            final var _resultValue = new CxWebhookServiceDirectoryGenericWebService();
            _resultValue.allowedCaCerts = allowedCaCerts;
            _resultValue.httpMethod = httpMethod;
            _resultValue.oauthConfig = oauthConfig;
            _resultValue.parameterMapping = parameterMapping;
            _resultValue.requestBody = requestBody;
            _resultValue.requestHeaders = requestHeaders;
            _resultValue.secretVersionForUsernamePassword = secretVersionForUsernamePassword;
            _resultValue.secretVersionsForRequestHeaders = secretVersionsForRequestHeaders;
            _resultValue.serviceAgentAuth = serviceAgentAuth;
            _resultValue.uri = uri;
            _resultValue.webhookType = webhookType;
            return _resultValue;
        }
    }
}
