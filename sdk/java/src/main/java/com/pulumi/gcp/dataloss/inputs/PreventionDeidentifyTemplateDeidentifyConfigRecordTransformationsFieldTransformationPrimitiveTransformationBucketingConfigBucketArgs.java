// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMaxArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMinArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValueArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs Empty = new PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs();

    /**
     * Upper bound of the range, exclusive; type must match min.
     * The `max` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
     * Structure is documented below.
     * 
     */
    @Import(name="max")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMaxArgs> max;

    /**
     * @return Upper bound of the range, exclusive; type must match min.
     * The `max` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMaxArgs>> max() {
        return Optional.ofNullable(this.max);
    }

    /**
     * Lower bound of the range, inclusive. Type should be the same as max if used.
     * The `min` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
     * Structure is documented below.
     * 
     */
    @Import(name="min")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMinArgs> min;

    /**
     * @return Lower bound of the range, inclusive. Type should be the same as max if used.
     * The `min` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMinArgs>> min() {
        return Optional.ofNullable(this.min);
    }

    /**
     * Replacement value for this bucket.
     * The `replacement_value` block must only contain one argument.
     * Structure is documented below.
     * 
     */
    @Import(name="replacementValue", required=true)
    private Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValueArgs> replacementValue;

    /**
     * @return Replacement value for this bucket.
     * The `replacement_value` block must only contain one argument.
     * Structure is documented below.
     * 
     */
    public Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValueArgs> replacementValue() {
        return this.replacementValue;
    }

    private PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs() {}

    private PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs $) {
        this.max = $.max;
        this.min = $.min;
        this.replacementValue = $.replacementValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs $;

        public Builder() {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs();
        }

        public Builder(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs defaults) {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param max Upper bound of the range, exclusive; type must match min.
         * The `max` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder max(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMaxArgs> max) {
            $.max = max;
            return this;
        }

        /**
         * @param max Upper bound of the range, exclusive; type must match min.
         * The `max` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder max(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMaxArgs max) {
            return max(Output.of(max));
        }

        /**
         * @param min Lower bound of the range, inclusive. Type should be the same as max if used.
         * The `min` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder min(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMinArgs> min) {
            $.min = min;
            return this;
        }

        /**
         * @param min Lower bound of the range, inclusive. Type should be the same as max if used.
         * The `min` block must only contain one argument. See the `bucketing_config` block description for more information about choosing a data type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder min(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketMinArgs min) {
            return min(Output.of(min));
        }

        /**
         * @param replacementValue Replacement value for this bucket.
         * The `replacement_value` block must only contain one argument.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder replacementValue(Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValueArgs> replacementValue) {
            $.replacementValue = replacementValue;
            return this;
        }

        /**
         * @param replacementValue Replacement value for this bucket.
         * The `replacement_value` block must only contain one argument.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder replacementValue(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketReplacementValueArgs replacementValue) {
            return replacementValue(Output.of(replacementValue));
        }

        public PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationPrimitiveTransformationBucketingConfigBucketArgs build() {
            $.replacementValue = Objects.requireNonNull($.replacementValue, "expected parameter 'replacementValue' to be non-null");
            return $;
        }
    }

}
