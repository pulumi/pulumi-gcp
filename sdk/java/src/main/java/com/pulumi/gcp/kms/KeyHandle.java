// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.kms.KeyHandleArgs;
import com.pulumi.gcp.kms.inputs.KeyHandleState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Kms Key Handle Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.Folder;
 * import com.pulumi.gcp.organizations.FolderArgs;
 * import com.pulumi.gcp.organizations.Project;
 * import com.pulumi.gcp.organizations.ProjectArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.kms.AutokeyConfig;
 * import com.pulumi.gcp.kms.AutokeyConfigArgs;
 * import com.pulumi.gcp.kms.KeyHandle;
 * import com.pulumi.gcp.kms.KeyHandleArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         // Create Folder in GCP Organization
 *         var autokmsFolder = new Folder("autokmsFolder", FolderArgs.builder()
 *             .displayName("my-folder")
 *             .parent("organizations/123456789")
 *             .deletionProtection(false)
 *             .build());
 * 
 *         // Create the key project
 *         var keyProject = new Project("keyProject", ProjectArgs.builder()
 *             .projectId("key-proj")
 *             .name("key-proj")
 *             .folderId(autokmsFolder.folderId())
 *             .billingAccount("000000-0000000-0000000-000000")
 *             .deletionPolicy("DELETE")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(autokmsFolder)
 *                 .build());
 * 
 *         // Create the resource project
 *         var resourceProject = new Project("resourceProject", ProjectArgs.builder()
 *             .projectId("res-proj")
 *             .name("res-proj")
 *             .folderId(autokmsFolder.folderId())
 *             .billingAccount("000000-0000000-0000000-000000")
 *             .deletionPolicy("DELETE")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(autokmsFolder)
 *                 .build());
 * 
 *         // Enable the Cloud KMS API
 *         var kmsApiService = new Service("kmsApiService", ServiceArgs.builder()
 *             .service("cloudkms.googleapis.com")
 *             .project(keyProject.projectId())
 *             .disableDependentServices(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(keyProject)
 *                 .build());
 * 
 *         // Wait delay after enabling APIs
 *         var waitEnableServiceApi = new Sleep("waitEnableServiceApi", SleepArgs.builder()
 *             .createDuration("30s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(kmsApiService))
 *                 .build());
 * 
 *         //Create KMS Service Agent
 *         var kmsServiceAgent = new ServiceIdentity("kmsServiceAgent", ServiceIdentityArgs.builder()
 *             .service("cloudkms.googleapis.com")
 *             .project(keyProject.number())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(waitEnableServiceApi)
 *                 .build());
 * 
 *         // Wait delay after creating service agent.
 *         var waitServiceAgent = new Sleep("waitServiceAgent", SleepArgs.builder()
 *             .createDuration("10s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(kmsServiceAgent))
 *                 .build());
 * 
 *         //Grant the KMS Service Agent the Cloud KMS Admin role
 *         var autokeyProjectAdmin = new IAMMember("autokeyProjectAdmin", IAMMemberArgs.builder()
 *             .project(keyProject.projectId())
 *             .role("roles/cloudkms.admin")
 *             .member(keyProject.number().applyValue(_number -> String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-cloudkms.iam.gserviceaccount.com", _number)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(waitServiceAgent)
 *                 .build());
 * 
 *         // Wait delay after granting IAM permissions
 *         var waitSrvAccPermissions = new Sleep("waitSrvAccPermissions", SleepArgs.builder()
 *             .createDuration("10s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(autokeyProjectAdmin))
 *                 .build());
 * 
 *         var autokeyConfig = new AutokeyConfig("autokeyConfig", AutokeyConfigArgs.builder()
 *             .folder(autokmsFolder.folderId())
 *             .keyProject(keyProject.projectId().applyValue(_projectId -> String.format("projects/%s", _projectId)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(waitSrvAccPermissions)
 *                 .build());
 * 
 *         // Wait delay for autokey config to take effect
 *         var waitAutokeyConfig = new Sleep("waitAutokeyConfig", SleepArgs.builder()
 *             .createDuration("10s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(autokeyConfig))
 *                 .build());
 * 
 *         var example_keyhandle = new KeyHandle("example-keyhandle", KeyHandleArgs.builder()
 *             .project(resourceProject.projectId())
 *             .name("tf-test-key-handle")
 *             .location("global")
 *             .resourceTypeSelector("storage.googleapis.com/Bucket")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(waitAutokeyConfig)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * KeyHandle can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/keyHandles/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, KeyHandle can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:kms/keyHandle:KeyHandle default projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:kms/keyHandle:KeyHandle default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:kms/keyHandle:KeyHandle default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:kms/keyHandle:KeyHandle")
public class KeyHandle extends com.pulumi.resources.CustomResource {
    /**
     * A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
     * product/project/location, for example
     * `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
     * 
     */
    @Export(name="kmsKey", refs={String.class}, tree="[0]")
    private Output<String> kmsKey;

    /**
     * @return A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
     * product/project/location, for example
     * `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
     * 
     */
    public Output<String> kmsKey() {
        return this.kmsKey;
    }
    /**
     * The location for the KeyHandle.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the KeyHandle.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name for the KeyHandle.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name for the KeyHandle.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Selector of the resource type where we want to protect resources.
     * For example, `storage.googleapis.com/Bucket`.
     * 
     */
    @Export(name="resourceTypeSelector", refs={String.class}, tree="[0]")
    private Output<String> resourceTypeSelector;

    /**
     * @return Selector of the resource type where we want to protect resources.
     * For example, `storage.googleapis.com/Bucket`.
     * 
     */
    public Output<String> resourceTypeSelector() {
        return this.resourceTypeSelector;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KeyHandle(java.lang.String name) {
        this(name, KeyHandleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KeyHandle(java.lang.String name, KeyHandleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KeyHandle(java.lang.String name, KeyHandleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/keyHandle:KeyHandle", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KeyHandle(java.lang.String name, Output<java.lang.String> id, @Nullable KeyHandleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/keyHandle:KeyHandle", name, state, makeResourceOptions(options, id), false);
    }

    private static KeyHandleArgs makeArgs(KeyHandleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KeyHandleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KeyHandle get(java.lang.String name, Output<java.lang.String> id, @Nullable KeyHandleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KeyHandle(name, id, state, options);
    }
}
