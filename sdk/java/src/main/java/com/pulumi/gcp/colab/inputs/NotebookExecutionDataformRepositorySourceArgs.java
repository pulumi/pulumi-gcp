// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.colab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotebookExecutionDataformRepositorySourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotebookExecutionDataformRepositorySourceArgs Empty = new NotebookExecutionDataformRepositorySourceArgs();

    /**
     * The commit SHA to read repository with. If unset, the file will be read at HEAD.
     * 
     */
    @Import(name="commitSha")
    private @Nullable Output<String> commitSha;

    /**
     * @return The commit SHA to read repository with. If unset, the file will be read at HEAD.
     * 
     */
    public Optional<Output<String>> commitSha() {
        return Optional.ofNullable(this.commitSha);
    }

    /**
     * The resource name of the Dataform Repository.
     * 
     */
    @Import(name="dataformRepositoryResourceName", required=true)
    private Output<String> dataformRepositoryResourceName;

    /**
     * @return The resource name of the Dataform Repository.
     * 
     */
    public Output<String> dataformRepositoryResourceName() {
        return this.dataformRepositoryResourceName;
    }

    private NotebookExecutionDataformRepositorySourceArgs() {}

    private NotebookExecutionDataformRepositorySourceArgs(NotebookExecutionDataformRepositorySourceArgs $) {
        this.commitSha = $.commitSha;
        this.dataformRepositoryResourceName = $.dataformRepositoryResourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotebookExecutionDataformRepositorySourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotebookExecutionDataformRepositorySourceArgs $;

        public Builder() {
            $ = new NotebookExecutionDataformRepositorySourceArgs();
        }

        public Builder(NotebookExecutionDataformRepositorySourceArgs defaults) {
            $ = new NotebookExecutionDataformRepositorySourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commitSha The commit SHA to read repository with. If unset, the file will be read at HEAD.
         * 
         * @return builder
         * 
         */
        public Builder commitSha(@Nullable Output<String> commitSha) {
            $.commitSha = commitSha;
            return this;
        }

        /**
         * @param commitSha The commit SHA to read repository with. If unset, the file will be read at HEAD.
         * 
         * @return builder
         * 
         */
        public Builder commitSha(String commitSha) {
            return commitSha(Output.of(commitSha));
        }

        /**
         * @param dataformRepositoryResourceName The resource name of the Dataform Repository.
         * 
         * @return builder
         * 
         */
        public Builder dataformRepositoryResourceName(Output<String> dataformRepositoryResourceName) {
            $.dataformRepositoryResourceName = dataformRepositoryResourceName;
            return this;
        }

        /**
         * @param dataformRepositoryResourceName The resource name of the Dataform Repository.
         * 
         * @return builder
         * 
         */
        public Builder dataformRepositoryResourceName(String dataformRepositoryResourceName) {
            return dataformRepositoryResourceName(Output.of(dataformRepositoryResourceName));
        }

        public NotebookExecutionDataformRepositorySourceArgs build() {
            if ($.dataformRepositoryResourceName == null) {
                throw new MissingRequiredPropertyException("NotebookExecutionDataformRepositorySourceArgs", "dataformRepositoryResourceName");
            }
            return $;
        }
    }

}
