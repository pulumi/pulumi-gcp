// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceClone;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceIpAddress;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceReplicaConfiguration;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceRestoreBackupContext;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceServerCaCert;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSetting;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseInstanceResult {
    private List<GetDatabaseInstanceClone> clones;
    private String connectionName;
    private String databaseVersion;
    private Boolean deletionProtection;
    private String encryptionKeyName;
    private String firstIpAddress;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetDatabaseInstanceIpAddress> ipAddresses;
    private String masterInstanceName;
    private String name;
    private String privateIpAddress;
    private @Nullable String project;
    private String publicIpAddress;
    private String region;
    private List<GetDatabaseInstanceReplicaConfiguration> replicaConfigurations;
    private List<GetDatabaseInstanceRestoreBackupContext> restoreBackupContexts;
    private String rootPassword;
    private String selfLink;
    private List<GetDatabaseInstanceServerCaCert> serverCaCerts;
    private String serviceAccountEmailAddress;
    private List<GetDatabaseInstanceSetting> settings;

    private GetDatabaseInstanceResult() {}
    public List<GetDatabaseInstanceClone> clones() {
        return this.clones;
    }
    public String connectionName() {
        return this.connectionName;
    }
    public String databaseVersion() {
        return this.databaseVersion;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String encryptionKeyName() {
        return this.encryptionKeyName;
    }
    public String firstIpAddress() {
        return this.firstIpAddress;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetDatabaseInstanceIpAddress> ipAddresses() {
        return this.ipAddresses;
    }
    public String masterInstanceName() {
        return this.masterInstanceName;
    }
    public String name() {
        return this.name;
    }
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String publicIpAddress() {
        return this.publicIpAddress;
    }
    public String region() {
        return this.region;
    }
    public List<GetDatabaseInstanceReplicaConfiguration> replicaConfigurations() {
        return this.replicaConfigurations;
    }
    public List<GetDatabaseInstanceRestoreBackupContext> restoreBackupContexts() {
        return this.restoreBackupContexts;
    }
    public String rootPassword() {
        return this.rootPassword;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<GetDatabaseInstanceServerCaCert> serverCaCerts() {
        return this.serverCaCerts;
    }
    public String serviceAccountEmailAddress() {
        return this.serviceAccountEmailAddress;
    }
    public List<GetDatabaseInstanceSetting> settings() {
        return this.settings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDatabaseInstanceClone> clones;
        private String connectionName;
        private String databaseVersion;
        private Boolean deletionProtection;
        private String encryptionKeyName;
        private String firstIpAddress;
        private String id;
        private List<GetDatabaseInstanceIpAddress> ipAddresses;
        private String masterInstanceName;
        private String name;
        private String privateIpAddress;
        private @Nullable String project;
        private String publicIpAddress;
        private String region;
        private List<GetDatabaseInstanceReplicaConfiguration> replicaConfigurations;
        private List<GetDatabaseInstanceRestoreBackupContext> restoreBackupContexts;
        private String rootPassword;
        private String selfLink;
        private List<GetDatabaseInstanceServerCaCert> serverCaCerts;
        private String serviceAccountEmailAddress;
        private List<GetDatabaseInstanceSetting> settings;
        public Builder() {}
        public Builder(GetDatabaseInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clones = defaults.clones;
    	      this.connectionName = defaults.connectionName;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.encryptionKeyName = defaults.encryptionKeyName;
    	      this.firstIpAddress = defaults.firstIpAddress;
    	      this.id = defaults.id;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.masterInstanceName = defaults.masterInstanceName;
    	      this.name = defaults.name;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.project = defaults.project;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.region = defaults.region;
    	      this.replicaConfigurations = defaults.replicaConfigurations;
    	      this.restoreBackupContexts = defaults.restoreBackupContexts;
    	      this.rootPassword = defaults.rootPassword;
    	      this.selfLink = defaults.selfLink;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.serviceAccountEmailAddress = defaults.serviceAccountEmailAddress;
    	      this.settings = defaults.settings;
        }

        @CustomType.Setter
        public Builder clones(List<GetDatabaseInstanceClone> clones) {
            this.clones = Objects.requireNonNull(clones);
            return this;
        }
        public Builder clones(GetDatabaseInstanceClone... clones) {
            return clones(List.of(clones));
        }
        @CustomType.Setter
        public Builder connectionName(String connectionName) {
            this.connectionName = Objects.requireNonNull(connectionName);
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            this.deletionProtection = Objects.requireNonNull(deletionProtection);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKeyName(String encryptionKeyName) {
            this.encryptionKeyName = Objects.requireNonNull(encryptionKeyName);
            return this;
        }
        @CustomType.Setter
        public Builder firstIpAddress(String firstIpAddress) {
            this.firstIpAddress = Objects.requireNonNull(firstIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(List<GetDatabaseInstanceIpAddress> ipAddresses) {
            this.ipAddresses = Objects.requireNonNull(ipAddresses);
            return this;
        }
        public Builder ipAddresses(GetDatabaseInstanceIpAddress... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        @CustomType.Setter
        public Builder masterInstanceName(String masterInstanceName) {
            this.masterInstanceName = Objects.requireNonNull(masterInstanceName);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder publicIpAddress(String publicIpAddress) {
            this.publicIpAddress = Objects.requireNonNull(publicIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder replicaConfigurations(List<GetDatabaseInstanceReplicaConfiguration> replicaConfigurations) {
            this.replicaConfigurations = Objects.requireNonNull(replicaConfigurations);
            return this;
        }
        public Builder replicaConfigurations(GetDatabaseInstanceReplicaConfiguration... replicaConfigurations) {
            return replicaConfigurations(List.of(replicaConfigurations));
        }
        @CustomType.Setter
        public Builder restoreBackupContexts(List<GetDatabaseInstanceRestoreBackupContext> restoreBackupContexts) {
            this.restoreBackupContexts = Objects.requireNonNull(restoreBackupContexts);
            return this;
        }
        public Builder restoreBackupContexts(GetDatabaseInstanceRestoreBackupContext... restoreBackupContexts) {
            return restoreBackupContexts(List.of(restoreBackupContexts));
        }
        @CustomType.Setter
        public Builder rootPassword(String rootPassword) {
            this.rootPassword = Objects.requireNonNull(rootPassword);
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder serverCaCerts(List<GetDatabaseInstanceServerCaCert> serverCaCerts) {
            this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
            return this;
        }
        public Builder serverCaCerts(GetDatabaseInstanceServerCaCert... serverCaCerts) {
            return serverCaCerts(List.of(serverCaCerts));
        }
        @CustomType.Setter
        public Builder serviceAccountEmailAddress(String serviceAccountEmailAddress) {
            this.serviceAccountEmailAddress = Objects.requireNonNull(serviceAccountEmailAddress);
            return this;
        }
        @CustomType.Setter
        public Builder settings(List<GetDatabaseInstanceSetting> settings) {
            this.settings = Objects.requireNonNull(settings);
            return this;
        }
        public Builder settings(GetDatabaseInstanceSetting... settings) {
            return settings(List.of(settings));
        }
        public GetDatabaseInstanceResult build() {
            final var o = new GetDatabaseInstanceResult();
            o.clones = clones;
            o.connectionName = connectionName;
            o.databaseVersion = databaseVersion;
            o.deletionProtection = deletionProtection;
            o.encryptionKeyName = encryptionKeyName;
            o.firstIpAddress = firstIpAddress;
            o.id = id;
            o.ipAddresses = ipAddresses;
            o.masterInstanceName = masterInstanceName;
            o.name = name;
            o.privateIpAddress = privateIpAddress;
            o.project = project;
            o.publicIpAddress = publicIpAddress;
            o.region = region;
            o.replicaConfigurations = replicaConfigurations;
            o.restoreBackupContexts = restoreBackupContexts;
            o.rootPassword = rootPassword;
            o.selfLink = selfLink;
            o.serverCaCerts = serverCaCerts;
            o.serviceAccountEmailAddress = serviceAccountEmailAddress;
            o.settings = settings;
            return o;
        }
    }
}
