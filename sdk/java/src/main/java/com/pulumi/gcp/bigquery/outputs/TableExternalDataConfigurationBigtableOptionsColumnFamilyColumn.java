// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn {
    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
     * 
     */
    private @Nullable String encoding;
    /**
     * @return If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
     * 
     */
    private @Nullable String fieldName;
    /**
     * @return If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
     * 
     */
    private @Nullable Boolean onlyReadLatest;
    /**
     * @return Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifierString field. Otherwise, a base-64 encoded value must be set to qualifierEncoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as fieldName.
     * 
     */
    private @Nullable String qualifierEncoded;
    /**
     * @return Qualifier string.
     * 
     */
    private @Nullable String qualifierString;
    /**
     * @return The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;, Default type is &#34;BYTES&#34;. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
     * 
     */
    private @Nullable String type;

    private TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn() {}
    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
     * 
     */
    public Optional<String> encoding() {
        return Optional.ofNullable(this.encoding);
    }
    /**
     * @return If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
     * 
     */
    public Optional<String> fieldName() {
        return Optional.ofNullable(this.fieldName);
    }
    /**
     * @return If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
     * 
     */
    public Optional<Boolean> onlyReadLatest() {
        return Optional.ofNullable(this.onlyReadLatest);
    }
    /**
     * @return Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifierString field. Otherwise, a base-64 encoded value must be set to qualifierEncoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as fieldName.
     * 
     */
    public Optional<String> qualifierEncoded() {
        return Optional.ofNullable(this.qualifierEncoded);
    }
    /**
     * @return Qualifier string.
     * 
     */
    public Optional<String> qualifierString() {
        return Optional.ofNullable(this.qualifierString);
    }
    /**
     * @return The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;, Default type is &#34;BYTES&#34;. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String encoding;
        private @Nullable String fieldName;
        private @Nullable Boolean onlyReadLatest;
        private @Nullable String qualifierEncoded;
        private @Nullable String qualifierString;
        private @Nullable String type;
        public Builder() {}
        public Builder(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encoding = defaults.encoding;
    	      this.fieldName = defaults.fieldName;
    	      this.onlyReadLatest = defaults.onlyReadLatest;
    	      this.qualifierEncoded = defaults.qualifierEncoded;
    	      this.qualifierString = defaults.qualifierString;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder encoding(@Nullable String encoding) {

            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder fieldName(@Nullable String fieldName) {

            this.fieldName = fieldName;
            return this;
        }
        @CustomType.Setter
        public Builder onlyReadLatest(@Nullable Boolean onlyReadLatest) {

            this.onlyReadLatest = onlyReadLatest;
            return this;
        }
        @CustomType.Setter
        public Builder qualifierEncoded(@Nullable String qualifierEncoded) {

            this.qualifierEncoded = qualifierEncoded;
            return this;
        }
        @CustomType.Setter
        public Builder qualifierString(@Nullable String qualifierString) {

            this.qualifierString = qualifierString;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn build() {
            final var _resultValue = new TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn();
            _resultValue.encoding = encoding;
            _resultValue.fieldName = fieldName;
            _resultValue.onlyReadLatest = onlyReadLatest;
            _resultValue.qualifierEncoded = qualifierEncoded;
            _resultValue.qualifierString = qualifierString;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
