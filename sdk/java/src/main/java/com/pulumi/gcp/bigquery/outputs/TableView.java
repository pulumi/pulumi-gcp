// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableView {
    /**
     * @return A query that BigQuery executes when the view is referenced.
     * 
     */
    private String query;
    /**
     * @return Specifies whether to use BigQuery&#39;s legacy SQL for this view.
     * If set to `false`, the view will use BigQuery&#39;s standard SQL. If set to
     * `true`, the view will use BigQuery&#39;s legacy SQL. If unset, the API will
     * interpret it as a `true` and assumes the legacy SQL dialect for its query
     * according to the [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#ViewDefinition).
     * &gt; **Note**: Starting in provider version `7.0.0`, no default value is
     * provided for this field unless explicitly set in the configuration.
     * 
     */
    private @Nullable Boolean useLegacySql;

    private TableView() {}
    /**
     * @return A query that BigQuery executes when the view is referenced.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return Specifies whether to use BigQuery&#39;s legacy SQL for this view.
     * If set to `false`, the view will use BigQuery&#39;s standard SQL. If set to
     * `true`, the view will use BigQuery&#39;s legacy SQL. If unset, the API will
     * interpret it as a `true` and assumes the legacy SQL dialect for its query
     * according to the [API documentation](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#ViewDefinition).
     * &gt; **Note**: Starting in provider version `7.0.0`, no default value is
     * provided for this field unless explicitly set in the configuration.
     * 
     */
    public Optional<Boolean> useLegacySql() {
        return Optional.ofNullable(this.useLegacySql);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableView defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String query;
        private @Nullable Boolean useLegacySql;
        public Builder() {}
        public Builder(TableView defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.query = defaults.query;
    	      this.useLegacySql = defaults.useLegacySql;
        }

        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("TableView", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder useLegacySql(@Nullable Boolean useLegacySql) {

            this.useLegacySql = useLegacySql;
            return this;
        }
        public TableView build() {
            final var _resultValue = new TableView();
            _resultValue.query = query;
            _resultValue.useLegacySql = useLegacySql;
            return _resultValue;
        }
    }
}
