// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WasmPluginVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final WasmPluginVersionArgs Empty = new WasmPluginVersionArgs();

    /**
     * (Output)
     * Output only. The timestamp when the resource was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Output)
     * Output only. The timestamp when the resource was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Optional. A human-readable description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A human-readable description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Output)
     * Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
     * This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
     * 
     */
    @Import(name="imageDigest")
    private @Nullable Output<String> imageDigest;

    /**
     * @return (Output)
     * Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
     * This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
     * 
     */
    public Optional<Output<String>> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }

    /**
     * Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
     * When downloading an image, the digest value is used instead of an image tag.
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    /**
     * @return Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
     * When downloading an image, the digest value is used instead of an image tag.
     * 
     */
    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    /**
     * Optional. Set of labels associated with the WasmPlugin resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Set of labels associated with the WasmPlugin resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigUri.
     * 
     */
    @Import(name="pluginConfigData")
    private @Nullable Output<String> pluginConfigData;

    /**
     * @return A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigUri.
     * 
     */
    public Optional<Output<String>> pluginConfigData() {
        return Optional.ofNullable(this.pluginConfigData);
    }

    /**
     * (Output)
     * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
     * The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
     * 
     */
    @Import(name="pluginConfigDigest")
    private @Nullable Output<String> pluginConfigDigest;

    /**
     * @return (Output)
     * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
     * The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
     * 
     */
    public Optional<Output<String>> pluginConfigDigest() {
        return Optional.ofNullable(this.pluginConfigDigest);
    }

    /**
     * URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * The container image must contain only a single file with the name plugin.config.
     * When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigData.
     * 
     */
    @Import(name="pluginConfigUri")
    private @Nullable Output<String> pluginConfigUri;

    /**
     * @return URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * The container image must contain only a single file with the name plugin.config.
     * When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigData.
     * 
     */
    public Optional<Output<String>> pluginConfigUri() {
        return Optional.ofNullable(this.pluginConfigUri);
    }

    /**
     * (Output)
     * Output only. The timestamp when the resource was updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return (Output)
     * Output only. The timestamp when the resource was updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The identifier for this object. Format specified above.
     * 
     */
    @Import(name="versionName", required=true)
    private Output<String> versionName;

    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public Output<String> versionName() {
        return this.versionName;
    }

    private WasmPluginVersionArgs() {}

    private WasmPluginVersionArgs(WasmPluginVersionArgs $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.imageDigest = $.imageDigest;
        this.imageUri = $.imageUri;
        this.labels = $.labels;
        this.pluginConfigData = $.pluginConfigData;
        this.pluginConfigDigest = $.pluginConfigDigest;
        this.pluginConfigUri = $.pluginConfigUri;
        this.updateTime = $.updateTime;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WasmPluginVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WasmPluginVersionArgs $;

        public Builder() {
            $ = new WasmPluginVersionArgs();
        }

        public Builder(WasmPluginVersionArgs defaults) {
            $ = new WasmPluginVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime (Output)
         * Output only. The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Output)
         * Output only. The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Optional. A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param imageDigest (Output)
         * Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
         * This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
         * 
         * @return builder
         * 
         */
        public Builder imageDigest(@Nullable Output<String> imageDigest) {
            $.imageDigest = imageDigest;
            return this;
        }

        /**
         * @param imageDigest (Output)
         * Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
         * This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
         * 
         * @return builder
         * 
         */
        public Builder imageDigest(String imageDigest) {
            return imageDigest(Output.of(imageDigest));
        }

        /**
         * @param imageUri Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
         * When downloading an image, the digest value is used instead of an image tag.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        /**
         * @param imageUri Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
         * When downloading an image, the digest value is used instead of an image tag.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        /**
         * @param labels Optional. Set of labels associated with the WasmPlugin resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Set of labels associated with the WasmPlugin resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param pluginConfigData A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
         * When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
         * Conflics with pluginConfigUri.
         * 
         * @return builder
         * 
         */
        public Builder pluginConfigData(@Nullable Output<String> pluginConfigData) {
            $.pluginConfigData = pluginConfigData;
            return this;
        }

        /**
         * @param pluginConfigData A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
         * When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
         * Conflics with pluginConfigUri.
         * 
         * @return builder
         * 
         */
        public Builder pluginConfigData(String pluginConfigData) {
            return pluginConfigData(Output.of(pluginConfigData));
        }

        /**
         * @param pluginConfigDigest (Output)
         * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
         * The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
         * 
         * @return builder
         * 
         */
        public Builder pluginConfigDigest(@Nullable Output<String> pluginConfigDigest) {
            $.pluginConfigDigest = pluginConfigDigest;
            return this;
        }

        /**
         * @param pluginConfigDigest (Output)
         * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
         * The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
         * 
         * @return builder
         * 
         */
        public Builder pluginConfigDigest(String pluginConfigDigest) {
            return pluginConfigDigest(Output.of(pluginConfigDigest));
        }

        /**
         * @param pluginConfigUri URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
         * The container image must contain only a single file with the name plugin.config.
         * When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
         * Conflics with pluginConfigData.
         * 
         * @return builder
         * 
         */
        public Builder pluginConfigUri(@Nullable Output<String> pluginConfigUri) {
            $.pluginConfigUri = pluginConfigUri;
            return this;
        }

        /**
         * @param pluginConfigUri URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
         * The container image must contain only a single file with the name plugin.config.
         * When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
         * Conflics with pluginConfigData.
         * 
         * @return builder
         * 
         */
        public Builder pluginConfigUri(String pluginConfigUri) {
            return pluginConfigUri(Output.of(pluginConfigUri));
        }

        /**
         * @param updateTime (Output)
         * Output only. The timestamp when the resource was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime (Output)
         * Output only. The timestamp when the resource was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param versionName The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder versionName(Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public WasmPluginVersionArgs build() {
            if ($.versionName == null) {
                throw new MissingRequiredPropertyException("WasmPluginVersionArgs", "versionName");
            }
            return $;
        }
    }

}
