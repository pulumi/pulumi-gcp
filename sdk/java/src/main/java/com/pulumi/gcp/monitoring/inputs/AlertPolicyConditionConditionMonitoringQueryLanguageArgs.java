// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionMonitoringQueryLanguageTriggerArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionMonitoringQueryLanguageArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionMonitoringQueryLanguageArgs Empty = new AlertPolicyConditionConditionMonitoringQueryLanguageArgs();

    /**
     * The amount of time that a time series must
     * violate the threshold to be considered
     * failing. Currently, only values that are a
     * multiple of a minute--e.g., 0, 60, 120, or
     * 300 seconds--are supported. If an invalid
     * value is given, an error will be returned.
     * When choosing a duration, it is useful to
     * keep in mind the frequency of the underlying
     * time series data (which may also be affected
     * by any alignments specified in the
     * aggregations field); a good duration is long
     * enough so that a single outlier does not
     * generate spurious alerts, but short enough
     * that unhealthy states are detected and
     * alerted on quickly.
     * 
     */
    @Import(name="duration", required=true)
    private Output<String> duration;

    /**
     * @return The amount of time that a time series must
     * violate the threshold to be considered
     * failing. Currently, only values that are a
     * multiple of a minute--e.g., 0, 60, 120, or
     * 300 seconds--are supported. If an invalid
     * value is given, an error will be returned.
     * When choosing a duration, it is useful to
     * keep in mind the frequency of the underlying
     * time series data (which may also be affected
     * by any alignments specified in the
     * aggregations field); a good duration is long
     * enough so that a single outlier does not
     * generate spurious alerts, but short enough
     * that unhealthy states are detected and
     * alerted on quickly.
     * 
     */
    public Output<String> duration() {
        return this.duration;
    }

    /**
     * A condition control that determines how
     * metric-threshold conditions are evaluated when
     * data stops arriving.
     * Possible values are `EVALUATION_MISSING_DATA_INACTIVE`, `EVALUATION_MISSING_DATA_ACTIVE`, and `EVALUATION_MISSING_DATA_NO_OP`.
     * 
     */
    @Import(name="evaluationMissingData")
    private @Nullable Output<String> evaluationMissingData;

    /**
     * @return A condition control that determines how
     * metric-threshold conditions are evaluated when
     * data stops arriving.
     * Possible values are `EVALUATION_MISSING_DATA_INACTIVE`, `EVALUATION_MISSING_DATA_ACTIVE`, and `EVALUATION_MISSING_DATA_NO_OP`.
     * 
     */
    public Optional<Output<String>> evaluationMissingData() {
        return Optional.ofNullable(this.evaluationMissingData);
    }

    /**
     * Monitoring Query Language query that outputs a boolean stream.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return Monitoring Query Language query that outputs a boolean stream.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * The number/percent of time series for which
     * the comparison must hold in order for the
     * condition to trigger. If unspecified, then
     * the condition will trigger if the comparison
     * is true for any of the time series that have
     * been identified by filter and aggregations,
     * or by the ratio, if denominator_filter and
     * denominator_aggregations are specified.
     * Structure is documented below.
     * 
     */
    @Import(name="trigger")
    private @Nullable Output<AlertPolicyConditionConditionMonitoringQueryLanguageTriggerArgs> trigger;

    /**
     * @return The number/percent of time series for which
     * the comparison must hold in order for the
     * condition to trigger. If unspecified, then
     * the condition will trigger if the comparison
     * is true for any of the time series that have
     * been identified by filter and aggregations,
     * or by the ratio, if denominator_filter and
     * denominator_aggregations are specified.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionMonitoringQueryLanguageTriggerArgs>> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    private AlertPolicyConditionConditionMonitoringQueryLanguageArgs() {}

    private AlertPolicyConditionConditionMonitoringQueryLanguageArgs(AlertPolicyConditionConditionMonitoringQueryLanguageArgs $) {
        this.duration = $.duration;
        this.evaluationMissingData = $.evaluationMissingData;
        this.query = $.query;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionConditionMonitoringQueryLanguageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionConditionMonitoringQueryLanguageArgs $;

        public Builder() {
            $ = new AlertPolicyConditionConditionMonitoringQueryLanguageArgs();
        }

        public Builder(AlertPolicyConditionConditionMonitoringQueryLanguageArgs defaults) {
            $ = new AlertPolicyConditionConditionMonitoringQueryLanguageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duration The amount of time that a time series must
         * violate the threshold to be considered
         * failing. Currently, only values that are a
         * multiple of a minute--e.g., 0, 60, 120, or
         * 300 seconds--are supported. If an invalid
         * value is given, an error will be returned.
         * When choosing a duration, it is useful to
         * keep in mind the frequency of the underlying
         * time series data (which may also be affected
         * by any alignments specified in the
         * aggregations field); a good duration is long
         * enough so that a single outlier does not
         * generate spurious alerts, but short enough
         * that unhealthy states are detected and
         * alerted on quickly.
         * 
         * @return builder
         * 
         */
        public Builder duration(Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The amount of time that a time series must
         * violate the threshold to be considered
         * failing. Currently, only values that are a
         * multiple of a minute--e.g., 0, 60, 120, or
         * 300 seconds--are supported. If an invalid
         * value is given, an error will be returned.
         * When choosing a duration, it is useful to
         * keep in mind the frequency of the underlying
         * time series data (which may also be affected
         * by any alignments specified in the
         * aggregations field); a good duration is long
         * enough so that a single outlier does not
         * generate spurious alerts, but short enough
         * that unhealthy states are detected and
         * alerted on quickly.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param evaluationMissingData A condition control that determines how
         * metric-threshold conditions are evaluated when
         * data stops arriving.
         * Possible values are `EVALUATION_MISSING_DATA_INACTIVE`, `EVALUATION_MISSING_DATA_ACTIVE`, and `EVALUATION_MISSING_DATA_NO_OP`.
         * 
         * @return builder
         * 
         */
        public Builder evaluationMissingData(@Nullable Output<String> evaluationMissingData) {
            $.evaluationMissingData = evaluationMissingData;
            return this;
        }

        /**
         * @param evaluationMissingData A condition control that determines how
         * metric-threshold conditions are evaluated when
         * data stops arriving.
         * Possible values are `EVALUATION_MISSING_DATA_INACTIVE`, `EVALUATION_MISSING_DATA_ACTIVE`, and `EVALUATION_MISSING_DATA_NO_OP`.
         * 
         * @return builder
         * 
         */
        public Builder evaluationMissingData(String evaluationMissingData) {
            return evaluationMissingData(Output.of(evaluationMissingData));
        }

        /**
         * @param query Monitoring Query Language query that outputs a boolean stream.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Monitoring Query Language query that outputs a boolean stream.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param trigger The number/percent of time series for which
         * the comparison must hold in order for the
         * condition to trigger. If unspecified, then
         * the condition will trigger if the comparison
         * is true for any of the time series that have
         * been identified by filter and aggregations,
         * or by the ratio, if denominator_filter and
         * denominator_aggregations are specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trigger(@Nullable Output<AlertPolicyConditionConditionMonitoringQueryLanguageTriggerArgs> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The number/percent of time series for which
         * the comparison must hold in order for the
         * condition to trigger. If unspecified, then
         * the condition will trigger if the comparison
         * is true for any of the time series that have
         * been identified by filter and aggregations,
         * or by the ratio, if denominator_filter and
         * denominator_aggregations are specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trigger(AlertPolicyConditionConditionMonitoringQueryLanguageTriggerArgs trigger) {
            return trigger(Output.of(trigger));
        }

        public AlertPolicyConditionConditionMonitoringQueryLanguageArgs build() {
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            return $;
        }
    }

}
