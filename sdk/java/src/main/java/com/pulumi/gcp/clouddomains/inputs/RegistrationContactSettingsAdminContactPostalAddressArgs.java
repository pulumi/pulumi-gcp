// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationContactSettingsAdminContactPostalAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationContactSettingsAdminContactPostalAddressArgs Empty = new RegistrationContactSettingsAdminContactPostalAddressArgs();

    /**
     * Unstructured address lines describing the lower levels of an address.
     * Because values in addressLines do not have type information and may sometimes contain multiple values in a single
     * field (e.g. &#34;Austin, TX&#34;), it is important that the line order is clear. The order of address lines should be
     * &#34;envelope order&#34; for the country/region of the address. In places where this can vary (e.g. Japan), address_language
     * is used to make it explicit (e.g. &#34;ja&#34; for large-to-small ordering and &#34;ja-Latn&#34; or &#34;en&#34; for small-to-large). This way,
     * the most specific line of an address can be selected based on the language.
     * 
     */
    @Import(name="addressLines")
    private @Nullable Output<List<String>> addressLines;

    /**
     * @return Unstructured address lines describing the lower levels of an address.
     * Because values in addressLines do not have type information and may sometimes contain multiple values in a single
     * field (e.g. &#34;Austin, TX&#34;), it is important that the line order is clear. The order of address lines should be
     * &#34;envelope order&#34; for the country/region of the address. In places where this can vary (e.g. Japan), address_language
     * is used to make it explicit (e.g. &#34;ja&#34; for large-to-small ordering and &#34;ja-Latn&#34; or &#34;en&#34; for small-to-large). This way,
     * the most specific line of an address can be selected based on the language.
     * 
     */
    public Optional<Output<List<String>>> addressLines() {
        return Optional.ofNullable(this.addressLines);
    }

    /**
     * Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
     * a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
     * (e.g. &#34;Barcelona&#34; and not &#34;Catalonia&#34;). Many countries don&#39;t use an administrative area in postal addresses. E.g. in Switzerland
     * this should be left unpopulated.
     * 
     */
    @Import(name="administrativeArea")
    private @Nullable Output<String> administrativeArea;

    /**
     * @return Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
     * a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
     * (e.g. &#34;Barcelona&#34; and not &#34;Catalonia&#34;). Many countries don&#39;t use an administrative area in postal addresses. E.g. in Switzerland
     * this should be left unpopulated.
     * 
     */
    public Optional<Output<String>> administrativeArea() {
        return Optional.ofNullable(this.administrativeArea);
    }

    /**
     * Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
     * where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
     * 
     */
    @Import(name="locality")
    private @Nullable Output<String> locality;

    /**
     * @return Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
     * where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
     * 
     */
    public Optional<Output<String>> locality() {
        return Optional.ofNullable(this.locality);
    }

    /**
     * The name of the organization at the address.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return The name of the organization at the address.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
     * they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     * 
     */
    @Import(name="postalCode")
    private @Nullable Output<String> postalCode;

    /**
     * @return Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
     * they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     * 
     */
    public Optional<Output<String>> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    /**
     * The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
     * it might contain &#34;care of&#34; information.
     * 
     * ***
     * 
     */
    @Import(name="recipients")
    private @Nullable Output<List<String>> recipients;

    /**
     * @return The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
     * it might contain &#34;care of&#34; information.
     * 
     * ***
     * 
     */
    public Optional<Output<List<String>>> recipients() {
        return Optional.ofNullable(this.recipients);
    }

    /**
     * Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
     * ensure the value is correct. See https://cldr.unicode.org/ and
     * https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: &#34;CH&#34; for Switzerland.
     * 
     */
    @Import(name="regionCode", required=true)
    private Output<String> regionCode;

    /**
     * @return Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
     * ensure the value is correct. See https://cldr.unicode.org/ and
     * https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: &#34;CH&#34; for Switzerland.
     * 
     */
    public Output<String> regionCode() {
        return this.regionCode;
    }

    private RegistrationContactSettingsAdminContactPostalAddressArgs() {}

    private RegistrationContactSettingsAdminContactPostalAddressArgs(RegistrationContactSettingsAdminContactPostalAddressArgs $) {
        this.addressLines = $.addressLines;
        this.administrativeArea = $.administrativeArea;
        this.locality = $.locality;
        this.organization = $.organization;
        this.postalCode = $.postalCode;
        this.recipients = $.recipients;
        this.regionCode = $.regionCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationContactSettingsAdminContactPostalAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationContactSettingsAdminContactPostalAddressArgs $;

        public Builder() {
            $ = new RegistrationContactSettingsAdminContactPostalAddressArgs();
        }

        public Builder(RegistrationContactSettingsAdminContactPostalAddressArgs defaults) {
            $ = new RegistrationContactSettingsAdminContactPostalAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressLines Unstructured address lines describing the lower levels of an address.
         * Because values in addressLines do not have type information and may sometimes contain multiple values in a single
         * field (e.g. &#34;Austin, TX&#34;), it is important that the line order is clear. The order of address lines should be
         * &#34;envelope order&#34; for the country/region of the address. In places where this can vary (e.g. Japan), address_language
         * is used to make it explicit (e.g. &#34;ja&#34; for large-to-small ordering and &#34;ja-Latn&#34; or &#34;en&#34; for small-to-large). This way,
         * the most specific line of an address can be selected based on the language.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(@Nullable Output<List<String>> addressLines) {
            $.addressLines = addressLines;
            return this;
        }

        /**
         * @param addressLines Unstructured address lines describing the lower levels of an address.
         * Because values in addressLines do not have type information and may sometimes contain multiple values in a single
         * field (e.g. &#34;Austin, TX&#34;), it is important that the line order is clear. The order of address lines should be
         * &#34;envelope order&#34; for the country/region of the address. In places where this can vary (e.g. Japan), address_language
         * is used to make it explicit (e.g. &#34;ja&#34; for large-to-small ordering and &#34;ja-Latn&#34; or &#34;en&#34; for small-to-large). This way,
         * the most specific line of an address can be selected based on the language.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(List<String> addressLines) {
            return addressLines(Output.of(addressLines));
        }

        /**
         * @param addressLines Unstructured address lines describing the lower levels of an address.
         * Because values in addressLines do not have type information and may sometimes contain multiple values in a single
         * field (e.g. &#34;Austin, TX&#34;), it is important that the line order is clear. The order of address lines should be
         * &#34;envelope order&#34; for the country/region of the address. In places where this can vary (e.g. Japan), address_language
         * is used to make it explicit (e.g. &#34;ja&#34; for large-to-small ordering and &#34;ja-Latn&#34; or &#34;en&#34; for small-to-large). This way,
         * the most specific line of an address can be selected based on the language.
         * 
         * @return builder
         * 
         */
        public Builder addressLines(String... addressLines) {
            return addressLines(List.of(addressLines));
        }

        /**
         * @param administrativeArea Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
         * a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
         * (e.g. &#34;Barcelona&#34; and not &#34;Catalonia&#34;). Many countries don&#39;t use an administrative area in postal addresses. E.g. in Switzerland
         * this should be left unpopulated.
         * 
         * @return builder
         * 
         */
        public Builder administrativeArea(@Nullable Output<String> administrativeArea) {
            $.administrativeArea = administrativeArea;
            return this;
        }

        /**
         * @param administrativeArea Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
         * a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
         * (e.g. &#34;Barcelona&#34; and not &#34;Catalonia&#34;). Many countries don&#39;t use an administrative area in postal addresses. E.g. in Switzerland
         * this should be left unpopulated.
         * 
         * @return builder
         * 
         */
        public Builder administrativeArea(String administrativeArea) {
            return administrativeArea(Output.of(administrativeArea));
        }

        /**
         * @param locality Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
         * where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
         * 
         * @return builder
         * 
         */
        public Builder locality(@Nullable Output<String> locality) {
            $.locality = locality;
            return this;
        }

        /**
         * @param locality Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
         * where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
         * 
         * @return builder
         * 
         */
        public Builder locality(String locality) {
            return locality(Output.of(locality));
        }

        /**
         * @param organization The name of the organization at the address.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The name of the organization at the address.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param postalCode Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
         * they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
         * 
         * @return builder
         * 
         */
        public Builder postalCode(@Nullable Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param postalCode Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
         * they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
         * 
         * @return builder
         * 
         */
        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        /**
         * @param recipients The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
         * it might contain &#34;care of&#34; information.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder recipients(@Nullable Output<List<String>> recipients) {
            $.recipients = recipients;
            return this;
        }

        /**
         * @param recipients The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
         * it might contain &#34;care of&#34; information.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder recipients(List<String> recipients) {
            return recipients(Output.of(recipients));
        }

        /**
         * @param recipients The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
         * it might contain &#34;care of&#34; information.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder recipients(String... recipients) {
            return recipients(List.of(recipients));
        }

        /**
         * @param regionCode Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
         * ensure the value is correct. See https://cldr.unicode.org/ and
         * https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: &#34;CH&#34; for Switzerland.
         * 
         * @return builder
         * 
         */
        public Builder regionCode(Output<String> regionCode) {
            $.regionCode = regionCode;
            return this;
        }

        /**
         * @param regionCode Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
         * ensure the value is correct. See https://cldr.unicode.org/ and
         * https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: &#34;CH&#34; for Switzerland.
         * 
         * @return builder
         * 
         */
        public Builder regionCode(String regionCode) {
            return regionCode(Output.of(regionCode));
        }

        public RegistrationContactSettingsAdminContactPostalAddressArgs build() {
            if ($.regionCode == null) {
                throw new MissingRequiredPropertyException("RegistrationContactSettingsAdminContactPostalAddressArgs", "regionCode");
            }
            return $;
        }
    }

}
