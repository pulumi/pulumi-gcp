// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gkebackup.inputs.BackupPlanBackupScheduleRpoConfigExclusionWindowArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanBackupScheduleRpoConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPlanBackupScheduleRpoConfigArgs Empty = new BackupPlanBackupScheduleRpoConfigArgs();

    /**
     * User specified time windows during which backup can NOT happen for this BackupPlan.
     * Backups should start and finish outside of any given exclusion window. Note: backup
     * jobs will be scheduled to start and finish outside the duration of the window as
     * much as possible, but running jobs will not get canceled when it runs into the window.
     * All the time and date values in exclusionWindows entry in the API are in UTC. We
     * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
     * restriction on number of single occurrence windows.
     * Structure is documented below.
     * 
     */
    @Import(name="exclusionWindows")
    private @Nullable Output<List<BackupPlanBackupScheduleRpoConfigExclusionWindowArgs>> exclusionWindows;

    /**
     * @return User specified time windows during which backup can NOT happen for this BackupPlan.
     * Backups should start and finish outside of any given exclusion window. Note: backup
     * jobs will be scheduled to start and finish outside the duration of the window as
     * much as possible, but running jobs will not get canceled when it runs into the window.
     * All the time and date values in exclusionWindows entry in the API are in UTC. We
     * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
     * restriction on number of single occurrence windows.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BackupPlanBackupScheduleRpoConfigExclusionWindowArgs>>> exclusionWindows() {
        return Optional.ofNullable(this.exclusionWindows);
    }

    /**
     * Defines the target RPO for the BackupPlan in minutes, which means the target
     * maximum data loss in time that is acceptable for this BackupPlan. This must be
     * at least 60, i.e., 1 hour, and at most 86400, i.e., 60 days.
     * 
     */
    @Import(name="targetRpoMinutes", required=true)
    private Output<Integer> targetRpoMinutes;

    /**
     * @return Defines the target RPO for the BackupPlan in minutes, which means the target
     * maximum data loss in time that is acceptable for this BackupPlan. This must be
     * at least 60, i.e., 1 hour, and at most 86400, i.e., 60 days.
     * 
     */
    public Output<Integer> targetRpoMinutes() {
        return this.targetRpoMinutes;
    }

    private BackupPlanBackupScheduleRpoConfigArgs() {}

    private BackupPlanBackupScheduleRpoConfigArgs(BackupPlanBackupScheduleRpoConfigArgs $) {
        this.exclusionWindows = $.exclusionWindows;
        this.targetRpoMinutes = $.targetRpoMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanBackupScheduleRpoConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanBackupScheduleRpoConfigArgs $;

        public Builder() {
            $ = new BackupPlanBackupScheduleRpoConfigArgs();
        }

        public Builder(BackupPlanBackupScheduleRpoConfigArgs defaults) {
            $ = new BackupPlanBackupScheduleRpoConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclusionWindows User specified time windows during which backup can NOT happen for this BackupPlan.
         * Backups should start and finish outside of any given exclusion window. Note: backup
         * jobs will be scheduled to start and finish outside the duration of the window as
         * much as possible, but running jobs will not get canceled when it runs into the window.
         * All the time and date values in exclusionWindows entry in the API are in UTC. We
         * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
         * restriction on number of single occurrence windows.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusionWindows(@Nullable Output<List<BackupPlanBackupScheduleRpoConfigExclusionWindowArgs>> exclusionWindows) {
            $.exclusionWindows = exclusionWindows;
            return this;
        }

        /**
         * @param exclusionWindows User specified time windows during which backup can NOT happen for this BackupPlan.
         * Backups should start and finish outside of any given exclusion window. Note: backup
         * jobs will be scheduled to start and finish outside the duration of the window as
         * much as possible, but running jobs will not get canceled when it runs into the window.
         * All the time and date values in exclusionWindows entry in the API are in UTC. We
         * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
         * restriction on number of single occurrence windows.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusionWindows(List<BackupPlanBackupScheduleRpoConfigExclusionWindowArgs> exclusionWindows) {
            return exclusionWindows(Output.of(exclusionWindows));
        }

        /**
         * @param exclusionWindows User specified time windows during which backup can NOT happen for this BackupPlan.
         * Backups should start and finish outside of any given exclusion window. Note: backup
         * jobs will be scheduled to start and finish outside the duration of the window as
         * much as possible, but running jobs will not get canceled when it runs into the window.
         * All the time and date values in exclusionWindows entry in the API are in UTC. We
         * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
         * restriction on number of single occurrence windows.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exclusionWindows(BackupPlanBackupScheduleRpoConfigExclusionWindowArgs... exclusionWindows) {
            return exclusionWindows(List.of(exclusionWindows));
        }

        /**
         * @param targetRpoMinutes Defines the target RPO for the BackupPlan in minutes, which means the target
         * maximum data loss in time that is acceptable for this BackupPlan. This must be
         * at least 60, i.e., 1 hour, and at most 86400, i.e., 60 days.
         * 
         * @return builder
         * 
         */
        public Builder targetRpoMinutes(Output<Integer> targetRpoMinutes) {
            $.targetRpoMinutes = targetRpoMinutes;
            return this;
        }

        /**
         * @param targetRpoMinutes Defines the target RPO for the BackupPlan in minutes, which means the target
         * maximum data loss in time that is acceptable for this BackupPlan. This must be
         * at least 60, i.e., 1 hour, and at most 86400, i.e., 60 days.
         * 
         * @return builder
         * 
         */
        public Builder targetRpoMinutes(Integer targetRpoMinutes) {
            return targetRpoMinutes(Output.of(targetRpoMinutes));
        }

        public BackupPlanBackupScheduleRpoConfigArgs build() {
            if ($.targetRpoMinutes == null) {
                throw new MissingRequiredPropertyException("BackupPlanBackupScheduleRpoConfigArgs", "targetRpoMinutes");
            }
            return $;
        }
    }

}
