// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs Empty = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs();

    /**
     * Indicates that this revision has been successfully rolled out in this zone
     * and new VMs will be assigned OS policies from this revision.
     * 
     * For a given OS policy assignment, there is only one revision with a value
     * of &#39;true&#39; for this field.
     * 
     */
    @Import(name="baseline")
    private @Nullable Output<Boolean> baseline;

    /**
     * @return Indicates that this revision has been successfully rolled out in this zone
     * and new VMs will be assigned OS policies from this revision.
     * 
     * For a given OS policy assignment, there is only one revision with a value
     * of &#39;true&#39; for this field.
     * 
     */
    public Optional<Output<Boolean>> baseline() {
        return Optional.ofNullable(this.baseline);
    }

    /**
     * Indicates that this revision deletes the OS policy assignment.
     * 
     */
    @Import(name="deleted")
    private @Nullable Output<Boolean> deleted;

    /**
     * @return Indicates that this revision deletes the OS policy assignment.
     * 
     */
    public Optional<Output<Boolean>> deleted() {
        return Optional.ofNullable(this.deleted);
    }

    /**
     * Freeform text describing the purpose of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Freeform text describing the purpose of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Filters to select target VMs for an assignment.
     * 
     * If more than one filter criteria is specified below, a VM will be selected
     * if and only if it satisfies all of them.
     * 
     */
    @Import(name="instanceFilter", required=true)
    private Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs> instanceFilter;

    /**
     * @return Filters to select target VMs for an assignment.
     * 
     * If more than one filter criteria is specified below, a VM will be selected
     * if and only if it satisfies all of them.
     * 
     */
    public Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs> instanceFilter() {
        return this.instanceFilter;
    }

    /**
     * Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of OS policies to be applied to the VMs.
     * 
     */
    @Import(name="osPolicies", required=true)
    private Output<List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs>> osPolicies;

    /**
     * @return List of OS policies to be applied to the VMs.
     * 
     */
    public Output<List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs>> osPolicies() {
        return this.osPolicies;
    }

    /**
     * Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * The timestamp that the revision was created.
     * 
     */
    @Import(name="revisionCreateTime")
    private @Nullable Output<String> revisionCreateTime;

    /**
     * @return The timestamp that the revision was created.
     * 
     */
    public Optional<Output<String>> revisionCreateTime() {
        return Optional.ofNullable(this.revisionCreateTime);
    }

    /**
     * The assignment revision ID
     * A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    @Import(name="revisionId")
    private @Nullable Output<String> revisionId;

    /**
     * @return The assignment revision ID
     * A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    public Optional<Output<String>> revisionId() {
        return Optional.ofNullable(this.revisionId);
    }

    /**
     * Message to configure the rollout at the zonal level for the OS policy
     * assignment.
     * 
     */
    @Import(name="rollout", required=true)
    private Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs> rollout;

    /**
     * @return Message to configure the rollout at the zonal level for the OS policy
     * assignment.
     * 
     */
    public Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs> rollout() {
        return this.rollout;
    }

    /**
     * OS policy assignment rollout state
     * Possible values:
     * IN_PROGRESS
     * CANCELLING
     * CANCELLED
     * SUCCEEDED
     * 
     */
    @Import(name="rolloutState")
    private @Nullable Output<String> rolloutState;

    /**
     * @return OS policy assignment rollout state
     * Possible values:
     * IN_PROGRESS
     * CANCELLING
     * CANCELLED
     * SUCCEEDED
     * 
     */
    public Optional<Output<String>> rolloutState() {
        return Optional.ofNullable(this.rolloutState);
    }

    /**
     * Server generated unique id for the OS policy assignment resource.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Server generated unique id for the OS policy assignment resource.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs() {}

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs $) {
        this.baseline = $.baseline;
        this.deleted = $.deleted;
        this.description = $.description;
        this.etag = $.etag;
        this.instanceFilter = $.instanceFilter;
        this.name = $.name;
        this.osPolicies = $.osPolicies;
        this.reconciling = $.reconciling;
        this.revisionCreateTime = $.revisionCreateTime;
        this.revisionId = $.revisionId;
        this.rollout = $.rollout;
        this.rolloutState = $.rolloutState;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseline Indicates that this revision has been successfully rolled out in this zone
         * and new VMs will be assigned OS policies from this revision.
         * 
         * For a given OS policy assignment, there is only one revision with a value
         * of &#39;true&#39; for this field.
         * 
         * @return builder
         * 
         */
        public Builder baseline(@Nullable Output<Boolean> baseline) {
            $.baseline = baseline;
            return this;
        }

        /**
         * @param baseline Indicates that this revision has been successfully rolled out in this zone
         * and new VMs will be assigned OS policies from this revision.
         * 
         * For a given OS policy assignment, there is only one revision with a value
         * of &#39;true&#39; for this field.
         * 
         * @return builder
         * 
         */
        public Builder baseline(Boolean baseline) {
            return baseline(Output.of(baseline));
        }

        /**
         * @param deleted Indicates that this revision deletes the OS policy assignment.
         * 
         * @return builder
         * 
         */
        public Builder deleted(@Nullable Output<Boolean> deleted) {
            $.deleted = deleted;
            return this;
        }

        /**
         * @param deleted Indicates that this revision deletes the OS policy assignment.
         * 
         * @return builder
         * 
         */
        public Builder deleted(Boolean deleted) {
            return deleted(Output.of(deleted));
        }

        /**
         * @param description Freeform text describing the purpose of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Freeform text describing the purpose of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param etag This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param instanceFilter Filters to select target VMs for an assignment.
         * 
         * If more than one filter criteria is specified below, a VM will be selected
         * if and only if it satisfies all of them.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs> instanceFilter) {
            $.instanceFilter = instanceFilter;
            return this;
        }

        /**
         * @param instanceFilter Filters to select target VMs for an assignment.
         * 
         * If more than one filter criteria is specified below, a VM will be selected
         * if and only if it satisfies all of them.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs instanceFilter) {
            return instanceFilter(Output.of(instanceFilter));
        }

        /**
         * @param name Identifier. In form of
         * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. In form of
         * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
         * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osPolicies List of OS policies to be applied to the VMs.
         * 
         * @return builder
         * 
         */
        public Builder osPolicies(Output<List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs>> osPolicies) {
            $.osPolicies = osPolicies;
            return this;
        }

        /**
         * @param osPolicies List of OS policies to be applied to the VMs.
         * 
         * @return builder
         * 
         */
        public Builder osPolicies(List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs> osPolicies) {
            return osPolicies(Output.of(osPolicies));
        }

        /**
         * @param osPolicies List of OS policies to be applied to the VMs.
         * 
         * @return builder
         * 
         */
        public Builder osPolicies(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs... osPolicies) {
            return osPolicies(List.of(osPolicies));
        }

        /**
         * @param reconciling Set to true, if the there are ongoing changes being applied by the
         * orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling Set to true, if the there are ongoing changes being applied by the
         * orchestrator.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param revisionCreateTime The timestamp that the revision was created.
         * 
         * @return builder
         * 
         */
        public Builder revisionCreateTime(@Nullable Output<String> revisionCreateTime) {
            $.revisionCreateTime = revisionCreateTime;
            return this;
        }

        /**
         * @param revisionCreateTime The timestamp that the revision was created.
         * 
         * @return builder
         * 
         */
        public Builder revisionCreateTime(String revisionCreateTime) {
            return revisionCreateTime(Output.of(revisionCreateTime));
        }

        /**
         * @param revisionId The assignment revision ID
         * A new revision is committed whenever a rollout is triggered for a OS policy
         * assignment
         * 
         * @return builder
         * 
         */
        public Builder revisionId(@Nullable Output<String> revisionId) {
            $.revisionId = revisionId;
            return this;
        }

        /**
         * @param revisionId The assignment revision ID
         * A new revision is committed whenever a rollout is triggered for a OS policy
         * assignment
         * 
         * @return builder
         * 
         */
        public Builder revisionId(String revisionId) {
            return revisionId(Output.of(revisionId));
        }

        /**
         * @param rollout Message to configure the rollout at the zonal level for the OS policy
         * assignment.
         * 
         * @return builder
         * 
         */
        public Builder rollout(Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs> rollout) {
            $.rollout = rollout;
            return this;
        }

        /**
         * @param rollout Message to configure the rollout at the zonal level for the OS policy
         * assignment.
         * 
         * @return builder
         * 
         */
        public Builder rollout(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs rollout) {
            return rollout(Output.of(rollout));
        }

        /**
         * @param rolloutState OS policy assignment rollout state
         * Possible values:
         * IN_PROGRESS
         * CANCELLING
         * CANCELLED
         * SUCCEEDED
         * 
         * @return builder
         * 
         */
        public Builder rolloutState(@Nullable Output<String> rolloutState) {
            $.rolloutState = rolloutState;
            return this;
        }

        /**
         * @param rolloutState OS policy assignment rollout state
         * Possible values:
         * IN_PROGRESS
         * CANCELLING
         * CANCELLED
         * SUCCEEDED
         * 
         * @return builder
         * 
         */
        public Builder rolloutState(String rolloutState) {
            return rolloutState(Output.of(rolloutState));
        }

        /**
         * @param uid Server generated unique id for the OS policy assignment resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Server generated unique id for the OS policy assignment resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs build() {
            if ($.instanceFilter == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs", "instanceFilter");
            }
            if ($.osPolicies == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs", "osPolicies");
            }
            if ($.rollout == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs", "rollout");
            }
            return $;
        }
    }

}
