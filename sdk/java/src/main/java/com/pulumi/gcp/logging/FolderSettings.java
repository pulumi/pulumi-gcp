// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.logging.FolderSettingsArgs;
import com.pulumi.gcp.logging.inputs.FolderSettingsState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Default resource settings control whether CMEK is required for new log buckets. These settings also determine the storage location for the _Default and _Required log buckets, and whether the _Default sink is enabled or disabled.
 * 
 * To get more information about FolderSettings, see:
 * 
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getSettings)
 * * How-to Guides
 *     * [Configure default settings for organizations and folders](https://cloud.google.com/logging/docs/default-settings)
 * 
 * ## Example Usage
 * ### Logging Folder Settings All
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.Folder;
 * import com.pulumi.gcp.organizations.FolderArgs;
 * import com.pulumi.gcp.logging.LoggingFunctions;
 * import com.pulumi.gcp.logging.inputs.GetFolderSettingsArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.logging.FolderSettings;
 * import com.pulumi.gcp.logging.FolderSettingsArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myFolder = new Folder(&#34;myFolder&#34;, FolderArgs.builder()        
 *             .displayName(&#34;folder-name&#34;)
 *             .parent(&#34;organizations/123456789&#34;)
 *             .build());
 * 
 *         final var settings = LoggingFunctions.getFolderSettings(GetFolderSettingsArgs.builder()
 *             .folder(myFolder.folderId())
 *             .build());
 * 
 *         var iam = new CryptoKeyIAMMember(&#34;iam&#34;, CryptoKeyIAMMemberArgs.builder()        
 *             .cryptoKeyId(&#34;kms-key&#34;)
 *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
 *             .member(settings.applyValue(getFolderSettingsResult -&gt; getFolderSettingsResult).applyValue(settings -&gt; String.format(&#34;serviceAccount:%s&#34;, settings.applyValue(getFolderSettingsResult -&gt; getFolderSettingsResult.kmsServiceAccountId()))))
 *             .build());
 * 
 *         var example = new FolderSettings(&#34;example&#34;, FolderSettingsArgs.builder()        
 *             .disableDefaultSink(true)
 *             .folder(myFolder.folderId())
 *             .kmsKeyName(&#34;kms-key&#34;)
 *             .storageLocation(&#34;us-central1&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(iam)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * FolderSettings can be imported using any of these accepted formats* `folders/{{folder}}/settings` * `{{folder}}` When using the `pulumi import` command, FolderSettings can be imported using one of the formats above. For example
 * 
 * ```sh
 *  $ pulumi import gcp:logging/folderSettings:FolderSettings default folders/{{folder}}/settings
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:logging/folderSettings:FolderSettings default {{folder}}
 * ```
 * 
 */
@ResourceType(type="gcp:logging/folderSettings:FolderSettings")
public class FolderSettings extends com.pulumi.resources.CustomResource {
    /**
     * If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     * 
     */
    @Export(name="disableDefaultSink", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disableDefaultSink;

    /**
     * @return If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     * 
     */
    public Output<Boolean> disableDefaultSink() {
        return this.disableDefaultSink;
    }
    /**
     * The folder for which to retrieve settings.
     * 
     * ***
     * 
     */
    @Export(name="folder", refs={String.class}, tree="[0]")
    private Output<String> folder;

    /**
     * @return The folder for which to retrieve settings.
     * 
     * ***
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }
    /**
     * The resource name for the configured Cloud KMS key.
     * 
     */
    @Export(name="kmsKeyName", refs={String.class}, tree="[0]")
    private Output<String> kmsKeyName;

    /**
     * @return The resource name for the configured Cloud KMS key.
     * 
     */
    public Output<String> kmsKeyName() {
        return this.kmsKeyName;
    }
    /**
     * The service account that will be used by the Log Router to access your Cloud KMS key.
     * 
     */
    @Export(name="kmsServiceAccountId", refs={String.class}, tree="[0]")
    private Output<String> kmsServiceAccountId;

    /**
     * @return The service account that will be used by the Log Router to access your Cloud KMS key.
     * 
     */
    public Output<String> kmsServiceAccountId() {
        return this.kmsServiceAccountId;
    }
    /**
     * The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     * 
     */
    @Export(name="loggingServiceAccountId", refs={String.class}, tree="[0]")
    private Output<String> loggingServiceAccountId;

    /**
     * @return The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     * 
     */
    public Output<String> loggingServiceAccountId() {
        return this.loggingServiceAccountId;
    }
    /**
     * The resource name of the settings.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the settings.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     * 
     */
    @Export(name="storageLocation", refs={String.class}, tree="[0]")
    private Output<String> storageLocation;

    /**
     * @return The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     * 
     */
    public Output<String> storageLocation() {
        return this.storageLocation;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FolderSettings(String name) {
        this(name, FolderSettingsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FolderSettings(String name, FolderSettingsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FolderSettings(String name, FolderSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/folderSettings:FolderSettings", name, args == null ? FolderSettingsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FolderSettings(String name, Output<String> id, @Nullable FolderSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/folderSettings:FolderSettings", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FolderSettings get(String name, Output<String> id, @Nullable FolderSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FolderSettings(name, id, state, options);
    }
}
