// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.firebase.outputs.AppHostingDomainCustomDomainStatusIssue;
import com.pulumi.gcp.firebase.outputs.AppHostingDomainCustomDomainStatusRequiredDnsUpdate;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppHostingDomainCustomDomainStatus {
    /**
     * @return (Output)
     * Possible values:
     * CERT_PREPARING
     * CERT_VALIDATING
     * CERT_PROPAGATING
     * CERT_ACTIVE
     * CERT_EXPIRING_SOON
     * CERT_EXPIRED
     * 
     */
    private @Nullable String certState;
    /**
     * @return (Output)
     * Possible values:
     * HOST_UNHOSTED
     * HOST_UNREACHABLE
     * HOST_NON_FAH
     * HOST_CONFLICT
     * HOST_WRONG_SHARD
     * HOST_ACTIVE
     * 
     */
    private @Nullable String hostState;
    /**
     * @return (Output)
     * A list of issues with domain configuration. Allows users to self-correct
     * problems with DNS records.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AppHostingDomainCustomDomainStatusIssue> issues;
    /**
     * @return (Output)
     * Possible values:
     * OWNERSHIP_MISSING
     * OWNERSHIP_UNREACHABLE
     * OWNERSHIP_MISMATCH
     * OWNERSHIP_CONFLICT
     * OWNERSHIP_PENDING
     * OWNERSHIP_ACTIVE
     * 
     */
    private @Nullable String ownershipState;
    /**
     * @return (Output)
     * Lists the records that must added or removed to a custom domain&#39;s DNS
     * in order to finish setup and start serving content.
     * Field is present during onboarding. Also present after onboarding if one
     * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
     * records are in a bad state.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AppHostingDomainCustomDomainStatusRequiredDnsUpdate> requiredDnsUpdates;

    private AppHostingDomainCustomDomainStatus() {}
    /**
     * @return (Output)
     * Possible values:
     * CERT_PREPARING
     * CERT_VALIDATING
     * CERT_PROPAGATING
     * CERT_ACTIVE
     * CERT_EXPIRING_SOON
     * CERT_EXPIRED
     * 
     */
    public Optional<String> certState() {
        return Optional.ofNullable(this.certState);
    }
    /**
     * @return (Output)
     * Possible values:
     * HOST_UNHOSTED
     * HOST_UNREACHABLE
     * HOST_NON_FAH
     * HOST_CONFLICT
     * HOST_WRONG_SHARD
     * HOST_ACTIVE
     * 
     */
    public Optional<String> hostState() {
        return Optional.ofNullable(this.hostState);
    }
    /**
     * @return (Output)
     * A list of issues with domain configuration. Allows users to self-correct
     * problems with DNS records.
     * Structure is documented below.
     * 
     */
    public List<AppHostingDomainCustomDomainStatusIssue> issues() {
        return this.issues == null ? List.of() : this.issues;
    }
    /**
     * @return (Output)
     * Possible values:
     * OWNERSHIP_MISSING
     * OWNERSHIP_UNREACHABLE
     * OWNERSHIP_MISMATCH
     * OWNERSHIP_CONFLICT
     * OWNERSHIP_PENDING
     * OWNERSHIP_ACTIVE
     * 
     */
    public Optional<String> ownershipState() {
        return Optional.ofNullable(this.ownershipState);
    }
    /**
     * @return (Output)
     * Lists the records that must added or removed to a custom domain&#39;s DNS
     * in order to finish setup and start serving content.
     * Field is present during onboarding. Also present after onboarding if one
     * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
     * records are in a bad state.
     * Structure is documented below.
     * 
     */
    public List<AppHostingDomainCustomDomainStatusRequiredDnsUpdate> requiredDnsUpdates() {
        return this.requiredDnsUpdates == null ? List.of() : this.requiredDnsUpdates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppHostingDomainCustomDomainStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certState;
        private @Nullable String hostState;
        private @Nullable List<AppHostingDomainCustomDomainStatusIssue> issues;
        private @Nullable String ownershipState;
        private @Nullable List<AppHostingDomainCustomDomainStatusRequiredDnsUpdate> requiredDnsUpdates;
        public Builder() {}
        public Builder(AppHostingDomainCustomDomainStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certState = defaults.certState;
    	      this.hostState = defaults.hostState;
    	      this.issues = defaults.issues;
    	      this.ownershipState = defaults.ownershipState;
    	      this.requiredDnsUpdates = defaults.requiredDnsUpdates;
        }

        @CustomType.Setter
        public Builder certState(@Nullable String certState) {

            this.certState = certState;
            return this;
        }
        @CustomType.Setter
        public Builder hostState(@Nullable String hostState) {

            this.hostState = hostState;
            return this;
        }
        @CustomType.Setter
        public Builder issues(@Nullable List<AppHostingDomainCustomDomainStatusIssue> issues) {

            this.issues = issues;
            return this;
        }
        public Builder issues(AppHostingDomainCustomDomainStatusIssue... issues) {
            return issues(List.of(issues));
        }
        @CustomType.Setter
        public Builder ownershipState(@Nullable String ownershipState) {

            this.ownershipState = ownershipState;
            return this;
        }
        @CustomType.Setter
        public Builder requiredDnsUpdates(@Nullable List<AppHostingDomainCustomDomainStatusRequiredDnsUpdate> requiredDnsUpdates) {

            this.requiredDnsUpdates = requiredDnsUpdates;
            return this;
        }
        public Builder requiredDnsUpdates(AppHostingDomainCustomDomainStatusRequiredDnsUpdate... requiredDnsUpdates) {
            return requiredDnsUpdates(List.of(requiredDnsUpdates));
        }
        public AppHostingDomainCustomDomainStatus build() {
            final var _resultValue = new AppHostingDomainCustomDomainStatus();
            _resultValue.certState = certState;
            _resultValue.hostState = hostState;
            _resultValue.issues = issues;
            _resultValue.ownershipState = ownershipState;
            _resultValue.requiredDnsUpdates = requiredDnsUpdates;
            return _resultValue;
        }
    }
}
