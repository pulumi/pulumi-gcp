// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.URLMapTestHeader;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class URLMapTest {
    /**
     * @return Description of this test case.
     * 
     */
    private @Nullable String description;
    /**
     * @return The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters.
     * For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored.
     * For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer&#39;s redirect response. If urlRedirect specifies httpsRedirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies stripQuery, the test passes only if expectedOutputUrl does not contain any query parameters.
     * expectedOutputUrl is optional when service is specified.
     * 
     */
    private @Nullable String expectedOutputUrl;
    /**
     * @return For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer&#39;s redirect response.
     * expectedRedirectResponseCode cannot be set when service is set.
     * 
     */
    private @Nullable Integer expectedRedirectResponseCode;
    /**
     * @return HTTP headers for this request.
     * Structure is documented below.
     * 
     */
    private @Nullable List<URLMapTestHeader> headers;
    /**
     * @return Host portion of the URL.
     * 
     */
    private String host;
    /**
     * @return Path portion of the URL.
     * 
     */
    private String path;
    /**
     * @return The backend service or backend bucket link that should be matched by this test.
     * 
     */
    private @Nullable String service;

    private URLMapTest() {}
    /**
     * @return Description of this test case.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters.
     * For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored.
     * For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer&#39;s redirect response. If urlRedirect specifies httpsRedirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies stripQuery, the test passes only if expectedOutputUrl does not contain any query parameters.
     * expectedOutputUrl is optional when service is specified.
     * 
     */
    public Optional<String> expectedOutputUrl() {
        return Optional.ofNullable(this.expectedOutputUrl);
    }
    /**
     * @return For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer&#39;s redirect response.
     * expectedRedirectResponseCode cannot be set when service is set.
     * 
     */
    public Optional<Integer> expectedRedirectResponseCode() {
        return Optional.ofNullable(this.expectedRedirectResponseCode);
    }
    /**
     * @return HTTP headers for this request.
     * Structure is documented below.
     * 
     */
    public List<URLMapTestHeader> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return Host portion of the URL.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Path portion of the URL.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The backend service or backend bucket link that should be matched by this test.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapTest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String expectedOutputUrl;
        private @Nullable Integer expectedRedirectResponseCode;
        private @Nullable List<URLMapTestHeader> headers;
        private String host;
        private String path;
        private @Nullable String service;
        public Builder() {}
        public Builder(URLMapTest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.expectedOutputUrl = defaults.expectedOutputUrl;
    	      this.expectedRedirectResponseCode = defaults.expectedRedirectResponseCode;
    	      this.headers = defaults.headers;
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.service = defaults.service;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expectedOutputUrl(@Nullable String expectedOutputUrl) {

            this.expectedOutputUrl = expectedOutputUrl;
            return this;
        }
        @CustomType.Setter
        public Builder expectedRedirectResponseCode(@Nullable Integer expectedRedirectResponseCode) {

            this.expectedRedirectResponseCode = expectedRedirectResponseCode;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable List<URLMapTestHeader> headers) {

            this.headers = headers;
            return this;
        }
        public Builder headers(URLMapTestHeader... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("URLMapTest", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("URLMapTest", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        public URLMapTest build() {
            final var _resultValue = new URLMapTest();
            _resultValue.description = description;
            _resultValue.expectedOutputUrl = expectedOutputUrl;
            _resultValue.expectedRedirectResponseCode = expectedRedirectResponseCode;
            _resultValue.headers = headers;
            _resultValue.host = host;
            _resultValue.path = path;
            _resultValue.service = service;
            return _resultValue;
        }
    }
}
