// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkmanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectivityTestRunReachabilityDetailTraceEndpointInfo {
    /**
     * @return (Output)
     * Destination IP address.
     * 
     */
    private String destinationIp;
    /**
     * @return (Output)
     * URI of the network where this packet is sent to.
     * 
     */
    private String destinationNetworkUri;
    /**
     * @return (Output)
     * Destination port. Only valid when protocol is TCP or UDP.
     * 
     */
    private Integer destinationPort;
    /**
     * @return (Output)
     * IP protocol in string format, for example: &#34;TCP&#34;, &#34;UDP&#34;, &#34;ICMP&#34;.
     * 
     */
    private String protocol;
    /**
     * @return (Output)
     * URI of the source telemetry agent this packet originates from.
     * 
     */
    private String sourceAgentUri;
    /**
     * @return (Output)
     * Source IP address.
     * 
     */
    private String sourceIp;
    /**
     * @return (Output)
     * URI of the network where this packet originates from.
     * 
     */
    private String sourceNetworkUri;
    /**
     * @return (Output)
     * Source port. Only valid when protocol is TCP or UDP.
     * 
     */
    private Integer sourcePort;

    private GetConnectivityTestRunReachabilityDetailTraceEndpointInfo() {}
    /**
     * @return (Output)
     * Destination IP address.
     * 
     */
    public String destinationIp() {
        return this.destinationIp;
    }
    /**
     * @return (Output)
     * URI of the network where this packet is sent to.
     * 
     */
    public String destinationNetworkUri() {
        return this.destinationNetworkUri;
    }
    /**
     * @return (Output)
     * Destination port. Only valid when protocol is TCP or UDP.
     * 
     */
    public Integer destinationPort() {
        return this.destinationPort;
    }
    /**
     * @return (Output)
     * IP protocol in string format, for example: &#34;TCP&#34;, &#34;UDP&#34;, &#34;ICMP&#34;.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return (Output)
     * URI of the source telemetry agent this packet originates from.
     * 
     */
    public String sourceAgentUri() {
        return this.sourceAgentUri;
    }
    /**
     * @return (Output)
     * Source IP address.
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return (Output)
     * URI of the network where this packet originates from.
     * 
     */
    public String sourceNetworkUri() {
        return this.sourceNetworkUri;
    }
    /**
     * @return (Output)
     * Source port. Only valid when protocol is TCP or UDP.
     * 
     */
    public Integer sourcePort() {
        return this.sourcePort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectivityTestRunReachabilityDetailTraceEndpointInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationIp;
        private String destinationNetworkUri;
        private Integer destinationPort;
        private String protocol;
        private String sourceAgentUri;
        private String sourceIp;
        private String sourceNetworkUri;
        private Integer sourcePort;
        public Builder() {}
        public Builder(GetConnectivityTestRunReachabilityDetailTraceEndpointInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationIp = defaults.destinationIp;
    	      this.destinationNetworkUri = defaults.destinationNetworkUri;
    	      this.destinationPort = defaults.destinationPort;
    	      this.protocol = defaults.protocol;
    	      this.sourceAgentUri = defaults.sourceAgentUri;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceNetworkUri = defaults.sourceNetworkUri;
    	      this.sourcePort = defaults.sourcePort;
        }

        @CustomType.Setter
        public Builder destinationIp(String destinationIp) {
            if (destinationIp == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "destinationIp");
            }
            this.destinationIp = destinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNetworkUri(String destinationNetworkUri) {
            if (destinationNetworkUri == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "destinationNetworkUri");
            }
            this.destinationNetworkUri = destinationNetworkUri;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPort(Integer destinationPort) {
            if (destinationPort == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "destinationPort");
            }
            this.destinationPort = destinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAgentUri(String sourceAgentUri) {
            if (sourceAgentUri == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "sourceAgentUri");
            }
            this.sourceAgentUri = sourceAgentUri;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(String sourceIp) {
            if (sourceIp == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "sourceIp");
            }
            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourceNetworkUri(String sourceNetworkUri) {
            if (sourceNetworkUri == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "sourceNetworkUri");
            }
            this.sourceNetworkUri = sourceNetworkUri;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(Integer sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestRunReachabilityDetailTraceEndpointInfo", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        public GetConnectivityTestRunReachabilityDetailTraceEndpointInfo build() {
            final var _resultValue = new GetConnectivityTestRunReachabilityDetailTraceEndpointInfo();
            _resultValue.destinationIp = destinationIp;
            _resultValue.destinationNetworkUri = destinationNetworkUri;
            _resultValue.destinationPort = destinationPort;
            _resultValue.protocol = protocol;
            _resultValue.sourceAgentUri = sourceAgentUri;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourceNetworkUri = sourceNetworkUri;
            _resultValue.sourcePort = sourcePort;
            return _resultValue;
        }
    }
}
