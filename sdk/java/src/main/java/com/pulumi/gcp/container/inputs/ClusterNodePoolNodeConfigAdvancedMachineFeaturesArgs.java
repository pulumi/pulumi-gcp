// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs Empty = new ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs();

    /**
     * Defines whether the instance should have nested virtualization enabled. Defaults to false.
     * 
     */
    @Import(name="enableNestedVirtualization")
    private @Nullable Output<Boolean> enableNestedVirtualization;

    /**
     * @return Defines whether the instance should have nested virtualization enabled. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> enableNestedVirtualization() {
        return Optional.ofNullable(this.enableNestedVirtualization);
    }

    /**
     * Defines the performance monitoring unit [PMU](https://cloud.google.com/compute/docs/pmu-overview) level. Valid values are `ARCHITECTURAL`, `STANDARD`, or `ENHANCED`. Defaults to off.
     * 
     */
    @Import(name="performanceMonitoringUnit")
    private @Nullable Output<String> performanceMonitoringUnit;

    /**
     * @return Defines the performance monitoring unit [PMU](https://cloud.google.com/compute/docs/pmu-overview) level. Valid values are `ARCHITECTURAL`, `STANDARD`, or `ENHANCED`. Defaults to off.
     * 
     */
    public Optional<Output<String>> performanceMonitoringUnit() {
        return Optional.ofNullable(this.performanceMonitoringUnit);
    }

    /**
     * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    @Import(name="threadsPerCore", required=true)
    private Output<Integer> threadsPerCore;

    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    public Output<Integer> threadsPerCore() {
        return this.threadsPerCore;
    }

    private ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs() {}

    private ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs(ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs $) {
        this.enableNestedVirtualization = $.enableNestedVirtualization;
        this.performanceMonitoringUnit = $.performanceMonitoringUnit;
        this.threadsPerCore = $.threadsPerCore;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs $;

        public Builder() {
            $ = new ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs();
        }

        public Builder(ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs defaults) {
            $ = new ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableNestedVirtualization Defines whether the instance should have nested virtualization enabled. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder enableNestedVirtualization(@Nullable Output<Boolean> enableNestedVirtualization) {
            $.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }

        /**
         * @param enableNestedVirtualization Defines whether the instance should have nested virtualization enabled. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder enableNestedVirtualization(Boolean enableNestedVirtualization) {
            return enableNestedVirtualization(Output.of(enableNestedVirtualization));
        }

        /**
         * @param performanceMonitoringUnit Defines the performance monitoring unit [PMU](https://cloud.google.com/compute/docs/pmu-overview) level. Valid values are `ARCHITECTURAL`, `STANDARD`, or `ENHANCED`. Defaults to off.
         * 
         * @return builder
         * 
         */
        public Builder performanceMonitoringUnit(@Nullable Output<String> performanceMonitoringUnit) {
            $.performanceMonitoringUnit = performanceMonitoringUnit;
            return this;
        }

        /**
         * @param performanceMonitoringUnit Defines the performance monitoring unit [PMU](https://cloud.google.com/compute/docs/pmu-overview) level. Valid values are `ARCHITECTURAL`, `STANDARD`, or `ENHANCED`. Defaults to off.
         * 
         * @return builder
         * 
         */
        public Builder performanceMonitoringUnit(String performanceMonitoringUnit) {
            return performanceMonitoringUnit(Output.of(performanceMonitoringUnit));
        }

        /**
         * @param threadsPerCore The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCore(Output<Integer> threadsPerCore) {
            $.threadsPerCore = threadsPerCore;
            return this;
        }

        /**
         * @param threadsPerCore The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCore(Integer threadsPerCore) {
            return threadsPerCore(Output.of(threadsPerCore));
        }

        public ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs build() {
            if ($.threadsPerCore == null) {
                throw new MissingRequiredPropertyException("ClusterNodePoolNodeConfigAdvancedMachineFeaturesArgs", "threadsPerCore");
            }
            return $;
        }
    }

}
