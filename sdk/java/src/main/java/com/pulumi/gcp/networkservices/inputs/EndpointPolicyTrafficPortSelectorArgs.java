// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class EndpointPolicyTrafficPortSelectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointPolicyTrafficPortSelectorArgs Empty = new EndpointPolicyTrafficPortSelectorArgs();

    /**
     * List of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
     * 
     */
    @Import(name="ports", required=true)
    private Output<List<String>> ports;

    /**
     * @return List of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
     * 
     */
    public Output<List<String>> ports() {
        return this.ports;
    }

    private EndpointPolicyTrafficPortSelectorArgs() {}

    private EndpointPolicyTrafficPortSelectorArgs(EndpointPolicyTrafficPortSelectorArgs $) {
        this.ports = $.ports;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointPolicyTrafficPortSelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointPolicyTrafficPortSelectorArgs $;

        public Builder() {
            $ = new EndpointPolicyTrafficPortSelectorArgs();
        }

        public Builder(EndpointPolicyTrafficPortSelectorArgs defaults) {
            $ = new EndpointPolicyTrafficPortSelectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ports List of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
         * 
         * @return builder
         * 
         */
        public Builder ports(Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports List of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports List of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        public EndpointPolicyTrafficPortSelectorArgs build() {
            $.ports = Objects.requireNonNull($.ports, "expected parameter 'ports' to be non-null");
            return $;
        }
    }

}
