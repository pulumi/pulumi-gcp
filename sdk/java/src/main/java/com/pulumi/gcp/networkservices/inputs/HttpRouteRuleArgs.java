// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleMatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRouteRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteRuleArgs Empty = new HttpRouteRuleArgs();

    /**
     * The detailed rule defining how to route matched traffic.
     * Structure is documented below.
     * 
     */
    @Import(name="action")
    private @Nullable Output<HttpRouteRuleActionArgs> action;

    /**
     * @return The detailed rule defining how to route matched traffic.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
     * If no matches field is specified, this rule will unconditionally match traffic.
     * If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
     * Structure is documented below.
     * 
     */
    @Import(name="matches")
    private @Nullable Output<List<HttpRouteRuleMatchArgs>> matches;

    /**
     * @return A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
     * If no matches field is specified, this rule will unconditionally match traffic.
     * If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HttpRouteRuleMatchArgs>>> matches() {
        return Optional.ofNullable(this.matches);
    }

    private HttpRouteRuleArgs() {}

    private HttpRouteRuleArgs(HttpRouteRuleArgs $) {
        this.action = $.action;
        this.matches = $.matches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRuleArgs $;

        public Builder() {
            $ = new HttpRouteRuleArgs();
        }

        public Builder(HttpRouteRuleArgs defaults) {
            $ = new HttpRouteRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The detailed rule defining how to route matched traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<HttpRouteRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The detailed rule defining how to route matched traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder action(HttpRouteRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param matches A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
         * If no matches field is specified, this rule will unconditionally match traffic.
         * If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder matches(@Nullable Output<List<HttpRouteRuleMatchArgs>> matches) {
            $.matches = matches;
            return this;
        }

        /**
         * @param matches A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
         * If no matches field is specified, this rule will unconditionally match traffic.
         * If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder matches(List<HttpRouteRuleMatchArgs> matches) {
            return matches(Output.of(matches));
        }

        /**
         * @param matches A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.
         * If no matches field is specified, this rule will unconditionally match traffic.
         * If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder matches(HttpRouteRuleMatchArgs... matches) {
            return matches(List.of(matches));
        }

        public HttpRouteRuleArgs build() {
            return $;
        }
    }

}
