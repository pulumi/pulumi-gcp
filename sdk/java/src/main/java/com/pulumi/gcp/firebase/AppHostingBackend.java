// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.AppHostingBackendArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingBackendState;
import com.pulumi.gcp.firebase.outputs.AppHostingBackendCodebase;
import com.pulumi.gcp.firebase.outputs.AppHostingBackendManagedResource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Backend is the primary resource of App Hosting.
 * 
 * ## Example Usage
 * 
 * ### Firebase App Hosting Backend Minimal
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         //## Include these blocks only once per project if you are starting from scratch ###
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("firebase-app-hosting-compute")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var fah = new Service("fah", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebaseapphosting.googleapis.com")
 *             .build());
 * 
 *         var example = new AppHostingBackend("example", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .backendId("mini")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fah)
 *                 .build());
 * 
 *         var appHostingSaRunner = new IAMMember("appHostingSaRunner", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/firebaseapphosting.computeRunner")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebase App Hosting Backend Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         //## Include these blocks only once per project if you are starting from scratch ###
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("firebase-app-hosting-compute")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var fah = new Service("fah", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebaseapphosting.googleapis.com")
 *             .build());
 * 
 *         var example = new AppHostingBackend("example", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .backendId("full")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .displayName("My Backend")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .environment("prod")
 *             .annotations(Map.of("key", "value"))
 *             .labels(Map.of("key", "value"))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fah)
 *                 .build());
 * 
 *         var appHostingSaDeveloperconnect = new IAMMember("appHostingSaDeveloperconnect", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/developerconnect.readTokenAccessor")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *         var appHostingSaAdminsdk = new IAMMember("appHostingSaAdminsdk", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/firebase.sdkAdminServiceAgent")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *         var appHostingSaRunner = new IAMMember("appHostingSaRunner", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/firebaseapphosting.computeRunner")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebase App Hosting Backend Github
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
 * import com.pulumi.gcp.developerconnect.GitRepositoryLink;
 * import com.pulumi.gcp.developerconnect.GitRepositoryLinkArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingBackendCodebaseArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         //## Include these blocks only once per project if you are starting from scratch ###
 *         var devconnect_p4sa = new ServiceIdentity("devconnect-p4sa", ServiceIdentityArgs.builder()
 *             .project("my-project-name")
 *             .service("developerconnect.googleapis.com")
 *             .build());
 * 
 *         var devconnect_secret = new IAMMember("devconnect-secret", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/secretmanager.admin")
 *             .member(devconnect_p4sa.member())
 *             .build());
 * 
 *         //##
 *         //## Include these blocks only once per Github account ###
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .connectionId("tf-test-connection-new")
 *             .githubConfig(ConnectionGithubConfigArgs.builder()
 *                 .githubApp("FIREBASE")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(devconnect_secret)
 *                 .build());
 * 
 *         var my_repository = new GitRepositoryLink("my-repository", GitRepositoryLinkArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .gitRepositoryLinkId("my-repo")
 *             .parentConnection(my_connection.connectionId())
 *             .cloneUri("https://github.com/myuser/myrepo.git")
 *             .build());
 * 
 *         var example = new AppHostingBackend("example", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .backendId("my-backend-gh")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .displayName("My Backend")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount("firebase-app-hosting-compute}{@literal @}{@code my-project-name.iam.gserviceaccount.com")
 *             .environment("prod")
 *             .annotations(Map.of("key", "value"))
 *             .labels(Map.of("key", "value"))
 *             .codebase(AppHostingBackendCodebaseArgs.builder()
 *                 .repository(my_repository.name())
 *                 .rootDirectory("/")
 *                 .build())
 *             .build());
 * 
 *         ctx.export("nextSteps", my_connection.installationStates());
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Backend can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/backends/{{backend_id}}`
 * 
 * * `{{project}}/{{location}}/{{backend_id}}`
 * 
 * * `{{location}}/{{backend_id}}`
 * 
 * When using the `pulumi import` command, Backend can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default projects/{{project}}/locations/{{location}}/backends/{{backend_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default {{project}}/{{location}}/{{backend_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingBackend:AppHostingBackend default {{location}}/{{backend_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/appHostingBackend:AppHostingBackend")
public class AppHostingBackend extends com.pulumi.resources.CustomResource {
    /**
     * Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * The [ID of a Web
     * App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
     * associated with the backend.
     * 
     */
    @Export(name="appId", refs={String.class}, tree="[0]")
    private Output<String> appId;

    /**
     * @return The [ID of a Web
     * App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
     * associated with the backend.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * Id of the backend. Also used as the service ID for Cloud Run, and as part
     * of the default domain name.
     * 
     */
    @Export(name="backendId", refs={String.class}, tree="[0]")
    private Output<String> backendId;

    /**
     * @return Id of the backend. Also used as the service ID for Cloud Run, and as part
     * of the default domain name.
     * 
     */
    public Output<String> backendId() {
        return this.backendId;
    }
    /**
     * The connection to an external source repository to watch for event-driven
     * updates to the backend.
     * Structure is documented below.
     * 
     */
    @Export(name="codebase", refs={AppHostingBackendCodebase.class}, tree="[0]")
    private Output</* @Nullable */ AppHostingBackendCodebase> codebase;

    /**
     * @return The connection to an external source repository to watch for event-driven
     * updates to the backend.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AppHostingBackendCodebase>> codebase() {
        return Codegen.optional(this.codebase);
    }
    /**
     * Time at which the backend was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time at which the backend was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Time at which the backend was deleted.
     * 
     */
    @Export(name="deleteTime", refs={String.class}, tree="[0]")
    private Output<String> deleteTime;

    /**
     * @return Time at which the backend was deleted.
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    /**
     * Human-readable name. 63 character limit.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Human-readable name. 63 character limit.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The environment name of the backend, used to load environment variables
     * from environment specific configuration.
     * 
     */
    @Export(name="environment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> environment;

    /**
     * @return The environment name of the backend, used to load environment variables
     * from environment specific configuration.
     * 
     */
    public Output<Optional<String>> environment() {
        return Codegen.optional(this.environment);
    }
    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The canonical IDs of a Google Cloud location such as &#34;us-east1&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The canonical IDs of a Google Cloud location such as &#34;us-east1&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * A list of the resources managed by this backend.
     * Structure is documented below.
     * 
     */
    @Export(name="managedResources", refs={List.class,AppHostingBackendManagedResource.class}, tree="[0,1]")
    private Output<List<AppHostingBackendManagedResource>> managedResources;

    /**
     * @return A list of the resources managed by this backend.
     * Structure is documented below.
     * 
     */
    public Output<List<AppHostingBackendManagedResource>> managedResources() {
        return this.managedResources;
    }
    /**
     * Identifier. The resource name of the backend.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of the backend.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The name of the service account used for Cloud Build and Cloud Run.
     * Should have the role roles/firebaseapphosting.computeRunner
     * or equivalent permissions.
     * 
     */
    @Export(name="serviceAccount", refs={String.class}, tree="[0]")
    private Output<String> serviceAccount;

    /**
     * @return The name of the service account used for Cloud Build and Cloud Run.
     * Should have the role roles/firebaseapphosting.computeRunner
     * or equivalent permissions.
     * 
     */
    public Output<String> serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * Immutable. Specifies how App Hosting will serve the content for this backend. It will
     * either be contained to a single region (REGIONAL_STRICT) or allowed to use
     * App Hosting&#39;s global-replicated serving infrastructure (GLOBAL_ACCESS).
     * Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
     * 
     */
    @Export(name="servingLocality", refs={String.class}, tree="[0]")
    private Output<String> servingLocality;

    /**
     * @return Immutable. Specifies how App Hosting will serve the content for this backend. It will
     * either be contained to a single region (REGIONAL_STRICT) or allowed to use
     * App Hosting&#39;s global-replicated serving infrastructure (GLOBAL_ACCESS).
     * Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
     * 
     */
    public Output<String> servingLocality() {
        return this.servingLocality;
    }
    /**
     * System-assigned, unique identifier.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return System-assigned, unique identifier.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Time at which the backend was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time at which the backend was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The primary URI to communicate with the backend.
     * 
     */
    @Export(name="uri", refs={String.class}, tree="[0]")
    private Output<String> uri;

    /**
     * @return The primary URI to communicate with the backend.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppHostingBackend(java.lang.String name) {
        this(name, AppHostingBackendArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppHostingBackend(java.lang.String name, AppHostingBackendArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppHostingBackend(java.lang.String name, AppHostingBackendArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appHostingBackend:AppHostingBackend", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AppHostingBackend(java.lang.String name, Output<java.lang.String> id, @Nullable AppHostingBackendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appHostingBackend:AppHostingBackend", name, state, makeResourceOptions(options, id), false);
    }

    private static AppHostingBackendArgs makeArgs(AppHostingBackendArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AppHostingBackendArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppHostingBackend get(java.lang.String name, Output<java.lang.String> id, @Nullable AppHostingBackendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AppHostingBackend(name, id, state, options);
    }
}
