// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.healthcare.inputs.PipelineJobBackfillPipelineJobArgs;
import com.pulumi.gcp.healthcare.inputs.PipelineJobMappingPipelineJobArgs;
import com.pulumi.gcp.healthcare.inputs.PipelineJobReconciliationPipelineJobArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineJobArgs Empty = new PipelineJobArgs();

    /**
     * Specifies the backfill configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="backfillPipelineJob")
    private @Nullable Output<PipelineJobBackfillPipelineJobArgs> backfillPipelineJob;

    /**
     * @return Specifies the backfill configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineJobBackfillPipelineJobArgs>> backfillPipelineJob() {
        return Optional.ofNullable(this.backfillPipelineJob);
    }

    /**
     * Healthcare Dataset under which the Pipeline Job is to run
     * 
     * ***
     * 
     */
    @Import(name="dataset", required=true)
    private Output<String> dataset;

    /**
     * @return Healthcare Dataset under which the Pipeline Job is to run
     * 
     * ***
     * 
     */
    public Output<String> dataset() {
        return this.dataset;
    }

    /**
     * If true, disables writing lineage for the pipeline.
     * 
     */
    @Import(name="disableLineage")
    private @Nullable Output<Boolean> disableLineage;

    /**
     * @return If true, disables writing lineage for the pipeline.
     * 
     */
    public Optional<Output<Boolean>> disableLineage() {
        return Optional.ofNullable(this.disableLineage);
    }

    /**
     * User-supplied key-value pairs used to organize Pipeline Jobs.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
     * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be associated with a given pipeline.
     * An object containing a list of &#34;key&#34;: value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-supplied key-value pairs used to organize Pipeline Jobs.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
     * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be associated with a given pipeline.
     * An object containing a list of &#34;key&#34;: value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location where the Pipeline Job is to run
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location where the Pipeline Job is to run
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Specifies mapping configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="mappingPipelineJob")
    private @Nullable Output<PipelineJobMappingPipelineJobArgs> mappingPipelineJob;

    /**
     * @return Specifies mapping configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineJobMappingPipelineJobArgs>> mappingPipelineJob() {
        return Optional.ofNullable(this.mappingPipelineJob);
    }

    /**
     * Specifies the name of the pipeline job. This field is user-assigned.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the pipeline job. This field is user-assigned.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies reconciliation configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="reconciliationPipelineJob")
    private @Nullable Output<PipelineJobReconciliationPipelineJobArgs> reconciliationPipelineJob;

    /**
     * @return Specifies reconciliation configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineJobReconciliationPipelineJobArgs>> reconciliationPipelineJob() {
        return Optional.ofNullable(this.reconciliationPipelineJob);
    }

    private PipelineJobArgs() {}

    private PipelineJobArgs(PipelineJobArgs $) {
        this.backfillPipelineJob = $.backfillPipelineJob;
        this.dataset = $.dataset;
        this.disableLineage = $.disableLineage;
        this.labels = $.labels;
        this.location = $.location;
        this.mappingPipelineJob = $.mappingPipelineJob;
        this.name = $.name;
        this.reconciliationPipelineJob = $.reconciliationPipelineJob;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineJobArgs $;

        public Builder() {
            $ = new PipelineJobArgs();
        }

        public Builder(PipelineJobArgs defaults) {
            $ = new PipelineJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backfillPipelineJob Specifies the backfill configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backfillPipelineJob(@Nullable Output<PipelineJobBackfillPipelineJobArgs> backfillPipelineJob) {
            $.backfillPipelineJob = backfillPipelineJob;
            return this;
        }

        /**
         * @param backfillPipelineJob Specifies the backfill configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backfillPipelineJob(PipelineJobBackfillPipelineJobArgs backfillPipelineJob) {
            return backfillPipelineJob(Output.of(backfillPipelineJob));
        }

        /**
         * @param dataset Healthcare Dataset under which the Pipeline Job is to run
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataset(Output<String> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset Healthcare Dataset under which the Pipeline Job is to run
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataset(String dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param disableLineage If true, disables writing lineage for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder disableLineage(@Nullable Output<Boolean> disableLineage) {
            $.disableLineage = disableLineage;
            return this;
        }

        /**
         * @param disableLineage If true, disables writing lineage for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder disableLineage(Boolean disableLineage) {
            return disableLineage(Output.of(disableLineage));
        }

        /**
         * @param labels User-supplied key-value pairs used to organize Pipeline Jobs.
         * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
         * maximum 128 bytes, and must conform to the following PCRE regular expression:
         * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
         * Label values are optional, must be between 1 and 63 characters long, have a
         * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
         * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
         * No more than 64 labels can be associated with a given pipeline.
         * An object containing a list of &#34;key&#34;: value pairs.
         * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-supplied key-value pairs used to organize Pipeline Jobs.
         * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
         * maximum 128 bytes, and must conform to the following PCRE regular expression:
         * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
         * Label values are optional, must be between 1 and 63 characters long, have a
         * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE
         * regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
         * No more than 64 labels can be associated with a given pipeline.
         * An object containing a list of &#34;key&#34;: value pairs.
         * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location where the Pipeline Job is to run
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location where the Pipeline Job is to run
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mappingPipelineJob Specifies mapping configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mappingPipelineJob(@Nullable Output<PipelineJobMappingPipelineJobArgs> mappingPipelineJob) {
            $.mappingPipelineJob = mappingPipelineJob;
            return this;
        }

        /**
         * @param mappingPipelineJob Specifies mapping configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mappingPipelineJob(PipelineJobMappingPipelineJobArgs mappingPipelineJob) {
            return mappingPipelineJob(Output.of(mappingPipelineJob));
        }

        /**
         * @param name Specifies the name of the pipeline job. This field is user-assigned.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the pipeline job. This field is user-assigned.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param reconciliationPipelineJob Specifies reconciliation configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder reconciliationPipelineJob(@Nullable Output<PipelineJobReconciliationPipelineJobArgs> reconciliationPipelineJob) {
            $.reconciliationPipelineJob = reconciliationPipelineJob;
            return this;
        }

        /**
         * @param reconciliationPipelineJob Specifies reconciliation configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder reconciliationPipelineJob(PipelineJobReconciliationPipelineJobArgs reconciliationPipelineJob) {
            return reconciliationPipelineJob(Output.of(reconciliationPipelineJob));
        }

        public PipelineJobArgs build() {
            if ($.dataset == null) {
                throw new MissingRequiredPropertyException("PipelineJobArgs", "dataset");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PipelineJobArgs", "location");
            }
            return $;
        }
    }

}
