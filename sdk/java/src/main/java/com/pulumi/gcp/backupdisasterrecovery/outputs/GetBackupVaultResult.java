// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackupVaultResult {
    private String accessRestriction;
    private Boolean allowMissing;
    private Map<String,String> annotations;
    private String backupCount;
    private String backupMinimumEnforcedRetentionDuration;
    private String backupRetentionInheritance;
    private String backupVaultId;
    private String createTime;
    private Boolean deletable;
    private String description;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    private String effectiveTime;
    private String etag;
    private Boolean forceDelete;
    private Boolean forceUpdate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean ignoreBackupPlanReferences;
    private Boolean ignoreInactiveDatasources;
    private Map<String,String> labels;
    private String location;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String serviceAccount;
    private String state;
    private String totalStoredBytes;
    private String uid;
    private String updateTime;

    private GetBackupVaultResult() {}
    public String accessRestriction() {
        return this.accessRestriction;
    }
    public Boolean allowMissing() {
        return this.allowMissing;
    }
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public String backupCount() {
        return this.backupCount;
    }
    public String backupMinimumEnforcedRetentionDuration() {
        return this.backupMinimumEnforcedRetentionDuration;
    }
    public String backupRetentionInheritance() {
        return this.backupRetentionInheritance;
    }
    public String backupVaultId() {
        return this.backupVaultId;
    }
    public String createTime() {
        return this.createTime;
    }
    public Boolean deletable() {
        return this.deletable;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String effectiveTime() {
        return this.effectiveTime;
    }
    public String etag() {
        return this.etag;
    }
    public Boolean forceDelete() {
        return this.forceDelete;
    }
    public Boolean forceUpdate() {
        return this.forceUpdate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean ignoreBackupPlanReferences() {
        return this.ignoreBackupPlanReferences;
    }
    public Boolean ignoreInactiveDatasources() {
        return this.ignoreInactiveDatasources;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public String state() {
        return this.state;
    }
    public String totalStoredBytes() {
        return this.totalStoredBytes;
    }
    public String uid() {
        return this.uid;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupVaultResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessRestriction;
        private Boolean allowMissing;
        private Map<String,String> annotations;
        private String backupCount;
        private String backupMinimumEnforcedRetentionDuration;
        private String backupRetentionInheritance;
        private String backupVaultId;
        private String createTime;
        private Boolean deletable;
        private String description;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private String effectiveTime;
        private String etag;
        private Boolean forceDelete;
        private Boolean forceUpdate;
        private String id;
        private Boolean ignoreBackupPlanReferences;
        private Boolean ignoreInactiveDatasources;
        private Map<String,String> labels;
        private String location;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String serviceAccount;
        private String state;
        private String totalStoredBytes;
        private String uid;
        private String updateTime;
        public Builder() {}
        public Builder(GetBackupVaultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessRestriction = defaults.accessRestriction;
    	      this.allowMissing = defaults.allowMissing;
    	      this.annotations = defaults.annotations;
    	      this.backupCount = defaults.backupCount;
    	      this.backupMinimumEnforcedRetentionDuration = defaults.backupMinimumEnforcedRetentionDuration;
    	      this.backupRetentionInheritance = defaults.backupRetentionInheritance;
    	      this.backupVaultId = defaults.backupVaultId;
    	      this.createTime = defaults.createTime;
    	      this.deletable = defaults.deletable;
    	      this.description = defaults.description;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.effectiveTime = defaults.effectiveTime;
    	      this.etag = defaults.etag;
    	      this.forceDelete = defaults.forceDelete;
    	      this.forceUpdate = defaults.forceUpdate;
    	      this.id = defaults.id;
    	      this.ignoreBackupPlanReferences = defaults.ignoreBackupPlanReferences;
    	      this.ignoreInactiveDatasources = defaults.ignoreInactiveDatasources;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.state = defaults.state;
    	      this.totalStoredBytes = defaults.totalStoredBytes;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder accessRestriction(String accessRestriction) {
            if (accessRestriction == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "accessRestriction");
            }
            this.accessRestriction = accessRestriction;
            return this;
        }
        @CustomType.Setter
        public Builder allowMissing(Boolean allowMissing) {
            if (allowMissing == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "allowMissing");
            }
            this.allowMissing = allowMissing;
            return this;
        }
        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder backupCount(String backupCount) {
            if (backupCount == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "backupCount");
            }
            this.backupCount = backupCount;
            return this;
        }
        @CustomType.Setter
        public Builder backupMinimumEnforcedRetentionDuration(String backupMinimumEnforcedRetentionDuration) {
            if (backupMinimumEnforcedRetentionDuration == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "backupMinimumEnforcedRetentionDuration");
            }
            this.backupMinimumEnforcedRetentionDuration = backupMinimumEnforcedRetentionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder backupRetentionInheritance(String backupRetentionInheritance) {
            if (backupRetentionInheritance == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "backupRetentionInheritance");
            }
            this.backupRetentionInheritance = backupRetentionInheritance;
            return this;
        }
        @CustomType.Setter
        public Builder backupVaultId(String backupVaultId) {
            if (backupVaultId == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "backupVaultId");
            }
            this.backupVaultId = backupVaultId;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletable(Boolean deletable) {
            if (deletable == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "deletable");
            }
            this.deletable = deletable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveTime(String effectiveTime) {
            if (effectiveTime == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "effectiveTime");
            }
            this.effectiveTime = effectiveTime;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder forceDelete(Boolean forceDelete) {
            if (forceDelete == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "forceDelete");
            }
            this.forceDelete = forceDelete;
            return this;
        }
        @CustomType.Setter
        public Builder forceUpdate(Boolean forceUpdate) {
            if (forceUpdate == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "forceUpdate");
            }
            this.forceUpdate = forceUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreBackupPlanReferences(Boolean ignoreBackupPlanReferences) {
            if (ignoreBackupPlanReferences == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "ignoreBackupPlanReferences");
            }
            this.ignoreBackupPlanReferences = ignoreBackupPlanReferences;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreInactiveDatasources(Boolean ignoreInactiveDatasources) {
            if (ignoreInactiveDatasources == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "ignoreInactiveDatasources");
            }
            this.ignoreInactiveDatasources = ignoreInactiveDatasources;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder totalStoredBytes(String totalStoredBytes) {
            if (totalStoredBytes == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "totalStoredBytes");
            }
            this.totalStoredBytes = totalStoredBytes;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetBackupVaultResult build() {
            final var _resultValue = new GetBackupVaultResult();
            _resultValue.accessRestriction = accessRestriction;
            _resultValue.allowMissing = allowMissing;
            _resultValue.annotations = annotations;
            _resultValue.backupCount = backupCount;
            _resultValue.backupMinimumEnforcedRetentionDuration = backupMinimumEnforcedRetentionDuration;
            _resultValue.backupRetentionInheritance = backupRetentionInheritance;
            _resultValue.backupVaultId = backupVaultId;
            _resultValue.createTime = createTime;
            _resultValue.deletable = deletable;
            _resultValue.description = description;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.effectiveTime = effectiveTime;
            _resultValue.etag = etag;
            _resultValue.forceDelete = forceDelete;
            _resultValue.forceUpdate = forceUpdate;
            _resultValue.id = id;
            _resultValue.ignoreBackupPlanReferences = ignoreBackupPlanReferences;
            _resultValue.ignoreInactiveDatasources = ignoreInactiveDatasources;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.state = state;
            _resultValue.totalStoredBytes = totalStoredBytes;
            _resultValue.uid = uid;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
