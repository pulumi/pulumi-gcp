// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigAdvancedMachineFeature;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigConfidentialNode;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigEffectiveTaint;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigEphemeralStorageConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigEphemeralStorageLocalSsdConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigFastSocket;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigGcfsConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigGuestAccelerator;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigGvnic;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigHostMaintenancePolicy;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigKubeletConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigLinuxNodeConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigLocalNvmeSsdBlockConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigReservationAffinity;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigSandboxConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigShieldedInstanceConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigSoleTenantConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigTaint;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfigWorkloadMetadataConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterNodeConfig {
    private List<GetClusterNodeConfigAdvancedMachineFeature> advancedMachineFeatures;
    private String bootDiskKmsKey;
    private List<GetClusterNodeConfigConfidentialNode> confidentialNodes;
    private Integer diskSizeGb;
    private String diskType;
    private List<GetClusterNodeConfigEffectiveTaint> effectiveTaints;
    private Boolean enableConfidentialStorage;
    private List<GetClusterNodeConfigEphemeralStorageConfig> ephemeralStorageConfigs;
    private List<GetClusterNodeConfigEphemeralStorageLocalSsdConfig> ephemeralStorageLocalSsdConfigs;
    private List<GetClusterNodeConfigFastSocket> fastSockets;
    private List<GetClusterNodeConfigGcfsConfig> gcfsConfigs;
    private List<GetClusterNodeConfigGuestAccelerator> guestAccelerators;
    private List<GetClusterNodeConfigGvnic> gvnics;
    private List<GetClusterNodeConfigHostMaintenancePolicy> hostMaintenancePolicies;
    private String imageType;
    private List<GetClusterNodeConfigKubeletConfig> kubeletConfigs;
    private Map<String,String> labels;
    private List<GetClusterNodeConfigLinuxNodeConfig> linuxNodeConfigs;
    private List<GetClusterNodeConfigLocalNvmeSsdBlockConfig> localNvmeSsdBlockConfigs;
    private Integer localSsdCount;
    private String loggingVariant;
    private String machineType;
    private Map<String,String> metadata;
    private String minCpuPlatform;
    private String nodeGroup;
    private List<String> oauthScopes;
    private Boolean preemptible;
    private List<GetClusterNodeConfigReservationAffinity> reservationAffinities;
    private Map<String,String> resourceLabels;
    private List<GetClusterNodeConfigSandboxConfig> sandboxConfigs;
    private String serviceAccount;
    private List<GetClusterNodeConfigShieldedInstanceConfig> shieldedInstanceConfigs;
    private List<GetClusterNodeConfigSoleTenantConfig> soleTenantConfigs;
    private Boolean spot;
    private List<String> tags;
    private List<GetClusterNodeConfigTaint> taints;
    private List<GetClusterNodeConfigWorkloadMetadataConfig> workloadMetadataConfigs;

    private GetClusterNodeConfig() {}
    public List<GetClusterNodeConfigAdvancedMachineFeature> advancedMachineFeatures() {
        return this.advancedMachineFeatures;
    }
    public String bootDiskKmsKey() {
        return this.bootDiskKmsKey;
    }
    public List<GetClusterNodeConfigConfidentialNode> confidentialNodes() {
        return this.confidentialNodes;
    }
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    public String diskType() {
        return this.diskType;
    }
    public List<GetClusterNodeConfigEffectiveTaint> effectiveTaints() {
        return this.effectiveTaints;
    }
    public Boolean enableConfidentialStorage() {
        return this.enableConfidentialStorage;
    }
    public List<GetClusterNodeConfigEphemeralStorageConfig> ephemeralStorageConfigs() {
        return this.ephemeralStorageConfigs;
    }
    public List<GetClusterNodeConfigEphemeralStorageLocalSsdConfig> ephemeralStorageLocalSsdConfigs() {
        return this.ephemeralStorageLocalSsdConfigs;
    }
    public List<GetClusterNodeConfigFastSocket> fastSockets() {
        return this.fastSockets;
    }
    public List<GetClusterNodeConfigGcfsConfig> gcfsConfigs() {
        return this.gcfsConfigs;
    }
    public List<GetClusterNodeConfigGuestAccelerator> guestAccelerators() {
        return this.guestAccelerators;
    }
    public List<GetClusterNodeConfigGvnic> gvnics() {
        return this.gvnics;
    }
    public List<GetClusterNodeConfigHostMaintenancePolicy> hostMaintenancePolicies() {
        return this.hostMaintenancePolicies;
    }
    public String imageType() {
        return this.imageType;
    }
    public List<GetClusterNodeConfigKubeletConfig> kubeletConfigs() {
        return this.kubeletConfigs;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public List<GetClusterNodeConfigLinuxNodeConfig> linuxNodeConfigs() {
        return this.linuxNodeConfigs;
    }
    public List<GetClusterNodeConfigLocalNvmeSsdBlockConfig> localNvmeSsdBlockConfigs() {
        return this.localNvmeSsdBlockConfigs;
    }
    public Integer localSsdCount() {
        return this.localSsdCount;
    }
    public String loggingVariant() {
        return this.loggingVariant;
    }
    public String machineType() {
        return this.machineType;
    }
    public Map<String,String> metadata() {
        return this.metadata;
    }
    public String minCpuPlatform() {
        return this.minCpuPlatform;
    }
    public String nodeGroup() {
        return this.nodeGroup;
    }
    public List<String> oauthScopes() {
        return this.oauthScopes;
    }
    public Boolean preemptible() {
        return this.preemptible;
    }
    public List<GetClusterNodeConfigReservationAffinity> reservationAffinities() {
        return this.reservationAffinities;
    }
    public Map<String,String> resourceLabels() {
        return this.resourceLabels;
    }
    public List<GetClusterNodeConfigSandboxConfig> sandboxConfigs() {
        return this.sandboxConfigs;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public List<GetClusterNodeConfigShieldedInstanceConfig> shieldedInstanceConfigs() {
        return this.shieldedInstanceConfigs;
    }
    public List<GetClusterNodeConfigSoleTenantConfig> soleTenantConfigs() {
        return this.soleTenantConfigs;
    }
    public Boolean spot() {
        return this.spot;
    }
    public List<String> tags() {
        return this.tags;
    }
    public List<GetClusterNodeConfigTaint> taints() {
        return this.taints;
    }
    public List<GetClusterNodeConfigWorkloadMetadataConfig> workloadMetadataConfigs() {
        return this.workloadMetadataConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterNodeConfigAdvancedMachineFeature> advancedMachineFeatures;
        private String bootDiskKmsKey;
        private List<GetClusterNodeConfigConfidentialNode> confidentialNodes;
        private Integer diskSizeGb;
        private String diskType;
        private List<GetClusterNodeConfigEffectiveTaint> effectiveTaints;
        private Boolean enableConfidentialStorage;
        private List<GetClusterNodeConfigEphemeralStorageConfig> ephemeralStorageConfigs;
        private List<GetClusterNodeConfigEphemeralStorageLocalSsdConfig> ephemeralStorageLocalSsdConfigs;
        private List<GetClusterNodeConfigFastSocket> fastSockets;
        private List<GetClusterNodeConfigGcfsConfig> gcfsConfigs;
        private List<GetClusterNodeConfigGuestAccelerator> guestAccelerators;
        private List<GetClusterNodeConfigGvnic> gvnics;
        private List<GetClusterNodeConfigHostMaintenancePolicy> hostMaintenancePolicies;
        private String imageType;
        private List<GetClusterNodeConfigKubeletConfig> kubeletConfigs;
        private Map<String,String> labels;
        private List<GetClusterNodeConfigLinuxNodeConfig> linuxNodeConfigs;
        private List<GetClusterNodeConfigLocalNvmeSsdBlockConfig> localNvmeSsdBlockConfigs;
        private Integer localSsdCount;
        private String loggingVariant;
        private String machineType;
        private Map<String,String> metadata;
        private String minCpuPlatform;
        private String nodeGroup;
        private List<String> oauthScopes;
        private Boolean preemptible;
        private List<GetClusterNodeConfigReservationAffinity> reservationAffinities;
        private Map<String,String> resourceLabels;
        private List<GetClusterNodeConfigSandboxConfig> sandboxConfigs;
        private String serviceAccount;
        private List<GetClusterNodeConfigShieldedInstanceConfig> shieldedInstanceConfigs;
        private List<GetClusterNodeConfigSoleTenantConfig> soleTenantConfigs;
        private Boolean spot;
        private List<String> tags;
        private List<GetClusterNodeConfigTaint> taints;
        private List<GetClusterNodeConfigWorkloadMetadataConfig> workloadMetadataConfigs;
        public Builder() {}
        public Builder(GetClusterNodeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedMachineFeatures = defaults.advancedMachineFeatures;
    	      this.bootDiskKmsKey = defaults.bootDiskKmsKey;
    	      this.confidentialNodes = defaults.confidentialNodes;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.effectiveTaints = defaults.effectiveTaints;
    	      this.enableConfidentialStorage = defaults.enableConfidentialStorage;
    	      this.ephemeralStorageConfigs = defaults.ephemeralStorageConfigs;
    	      this.ephemeralStorageLocalSsdConfigs = defaults.ephemeralStorageLocalSsdConfigs;
    	      this.fastSockets = defaults.fastSockets;
    	      this.gcfsConfigs = defaults.gcfsConfigs;
    	      this.guestAccelerators = defaults.guestAccelerators;
    	      this.gvnics = defaults.gvnics;
    	      this.hostMaintenancePolicies = defaults.hostMaintenancePolicies;
    	      this.imageType = defaults.imageType;
    	      this.kubeletConfigs = defaults.kubeletConfigs;
    	      this.labels = defaults.labels;
    	      this.linuxNodeConfigs = defaults.linuxNodeConfigs;
    	      this.localNvmeSsdBlockConfigs = defaults.localNvmeSsdBlockConfigs;
    	      this.localSsdCount = defaults.localSsdCount;
    	      this.loggingVariant = defaults.loggingVariant;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.nodeGroup = defaults.nodeGroup;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.preemptible = defaults.preemptible;
    	      this.reservationAffinities = defaults.reservationAffinities;
    	      this.resourceLabels = defaults.resourceLabels;
    	      this.sandboxConfigs = defaults.sandboxConfigs;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfigs = defaults.shieldedInstanceConfigs;
    	      this.soleTenantConfigs = defaults.soleTenantConfigs;
    	      this.spot = defaults.spot;
    	      this.tags = defaults.tags;
    	      this.taints = defaults.taints;
    	      this.workloadMetadataConfigs = defaults.workloadMetadataConfigs;
        }

        @CustomType.Setter
        public Builder advancedMachineFeatures(List<GetClusterNodeConfigAdvancedMachineFeature> advancedMachineFeatures) {
            if (advancedMachineFeatures == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "advancedMachineFeatures");
            }
            this.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }
        public Builder advancedMachineFeatures(GetClusterNodeConfigAdvancedMachineFeature... advancedMachineFeatures) {
            return advancedMachineFeatures(List.of(advancedMachineFeatures));
        }
        @CustomType.Setter
        public Builder bootDiskKmsKey(String bootDiskKmsKey) {
            if (bootDiskKmsKey == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "bootDiskKmsKey");
            }
            this.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }
        @CustomType.Setter
        public Builder confidentialNodes(List<GetClusterNodeConfigConfidentialNode> confidentialNodes) {
            if (confidentialNodes == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "confidentialNodes");
            }
            this.confidentialNodes = confidentialNodes;
            return this;
        }
        public Builder confidentialNodes(GetClusterNodeConfigConfidentialNode... confidentialNodes) {
            return confidentialNodes(List.of(confidentialNodes));
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveTaints(List<GetClusterNodeConfigEffectiveTaint> effectiveTaints) {
            if (effectiveTaints == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "effectiveTaints");
            }
            this.effectiveTaints = effectiveTaints;
            return this;
        }
        public Builder effectiveTaints(GetClusterNodeConfigEffectiveTaint... effectiveTaints) {
            return effectiveTaints(List.of(effectiveTaints));
        }
        @CustomType.Setter
        public Builder enableConfidentialStorage(Boolean enableConfidentialStorage) {
            if (enableConfidentialStorage == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "enableConfidentialStorage");
            }
            this.enableConfidentialStorage = enableConfidentialStorage;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralStorageConfigs(List<GetClusterNodeConfigEphemeralStorageConfig> ephemeralStorageConfigs) {
            if (ephemeralStorageConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "ephemeralStorageConfigs");
            }
            this.ephemeralStorageConfigs = ephemeralStorageConfigs;
            return this;
        }
        public Builder ephemeralStorageConfigs(GetClusterNodeConfigEphemeralStorageConfig... ephemeralStorageConfigs) {
            return ephemeralStorageConfigs(List.of(ephemeralStorageConfigs));
        }
        @CustomType.Setter
        public Builder ephemeralStorageLocalSsdConfigs(List<GetClusterNodeConfigEphemeralStorageLocalSsdConfig> ephemeralStorageLocalSsdConfigs) {
            if (ephemeralStorageLocalSsdConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "ephemeralStorageLocalSsdConfigs");
            }
            this.ephemeralStorageLocalSsdConfigs = ephemeralStorageLocalSsdConfigs;
            return this;
        }
        public Builder ephemeralStorageLocalSsdConfigs(GetClusterNodeConfigEphemeralStorageLocalSsdConfig... ephemeralStorageLocalSsdConfigs) {
            return ephemeralStorageLocalSsdConfigs(List.of(ephemeralStorageLocalSsdConfigs));
        }
        @CustomType.Setter
        public Builder fastSockets(List<GetClusterNodeConfigFastSocket> fastSockets) {
            if (fastSockets == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "fastSockets");
            }
            this.fastSockets = fastSockets;
            return this;
        }
        public Builder fastSockets(GetClusterNodeConfigFastSocket... fastSockets) {
            return fastSockets(List.of(fastSockets));
        }
        @CustomType.Setter
        public Builder gcfsConfigs(List<GetClusterNodeConfigGcfsConfig> gcfsConfigs) {
            if (gcfsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "gcfsConfigs");
            }
            this.gcfsConfigs = gcfsConfigs;
            return this;
        }
        public Builder gcfsConfigs(GetClusterNodeConfigGcfsConfig... gcfsConfigs) {
            return gcfsConfigs(List.of(gcfsConfigs));
        }
        @CustomType.Setter
        public Builder guestAccelerators(List<GetClusterNodeConfigGuestAccelerator> guestAccelerators) {
            if (guestAccelerators == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "guestAccelerators");
            }
            this.guestAccelerators = guestAccelerators;
            return this;
        }
        public Builder guestAccelerators(GetClusterNodeConfigGuestAccelerator... guestAccelerators) {
            return guestAccelerators(List.of(guestAccelerators));
        }
        @CustomType.Setter
        public Builder gvnics(List<GetClusterNodeConfigGvnic> gvnics) {
            if (gvnics == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "gvnics");
            }
            this.gvnics = gvnics;
            return this;
        }
        public Builder gvnics(GetClusterNodeConfigGvnic... gvnics) {
            return gvnics(List.of(gvnics));
        }
        @CustomType.Setter
        public Builder hostMaintenancePolicies(List<GetClusterNodeConfigHostMaintenancePolicy> hostMaintenancePolicies) {
            if (hostMaintenancePolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "hostMaintenancePolicies");
            }
            this.hostMaintenancePolicies = hostMaintenancePolicies;
            return this;
        }
        public Builder hostMaintenancePolicies(GetClusterNodeConfigHostMaintenancePolicy... hostMaintenancePolicies) {
            return hostMaintenancePolicies(List.of(hostMaintenancePolicies));
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            if (imageType == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "imageType");
            }
            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder kubeletConfigs(List<GetClusterNodeConfigKubeletConfig> kubeletConfigs) {
            if (kubeletConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "kubeletConfigs");
            }
            this.kubeletConfigs = kubeletConfigs;
            return this;
        }
        public Builder kubeletConfigs(GetClusterNodeConfigKubeletConfig... kubeletConfigs) {
            return kubeletConfigs(List.of(kubeletConfigs));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder linuxNodeConfigs(List<GetClusterNodeConfigLinuxNodeConfig> linuxNodeConfigs) {
            if (linuxNodeConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "linuxNodeConfigs");
            }
            this.linuxNodeConfigs = linuxNodeConfigs;
            return this;
        }
        public Builder linuxNodeConfigs(GetClusterNodeConfigLinuxNodeConfig... linuxNodeConfigs) {
            return linuxNodeConfigs(List.of(linuxNodeConfigs));
        }
        @CustomType.Setter
        public Builder localNvmeSsdBlockConfigs(List<GetClusterNodeConfigLocalNvmeSsdBlockConfig> localNvmeSsdBlockConfigs) {
            if (localNvmeSsdBlockConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "localNvmeSsdBlockConfigs");
            }
            this.localNvmeSsdBlockConfigs = localNvmeSsdBlockConfigs;
            return this;
        }
        public Builder localNvmeSsdBlockConfigs(GetClusterNodeConfigLocalNvmeSsdBlockConfig... localNvmeSsdBlockConfigs) {
            return localNvmeSsdBlockConfigs(List.of(localNvmeSsdBlockConfigs));
        }
        @CustomType.Setter
        public Builder localSsdCount(Integer localSsdCount) {
            if (localSsdCount == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "localSsdCount");
            }
            this.localSsdCount = localSsdCount;
            return this;
        }
        @CustomType.Setter
        public Builder loggingVariant(String loggingVariant) {
            if (loggingVariant == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "loggingVariant");
            }
            this.loggingVariant = loggingVariant;
            return this;
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            if (machineType == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "machineType");
            }
            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder minCpuPlatform(String minCpuPlatform) {
            if (minCpuPlatform == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "minCpuPlatform");
            }
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }
        @CustomType.Setter
        public Builder nodeGroup(String nodeGroup) {
            if (nodeGroup == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "nodeGroup");
            }
            this.nodeGroup = nodeGroup;
            return this;
        }
        @CustomType.Setter
        public Builder oauthScopes(List<String> oauthScopes) {
            if (oauthScopes == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "oauthScopes");
            }
            this.oauthScopes = oauthScopes;
            return this;
        }
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }
        @CustomType.Setter
        public Builder preemptible(Boolean preemptible) {
            if (preemptible == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "preemptible");
            }
            this.preemptible = preemptible;
            return this;
        }
        @CustomType.Setter
        public Builder reservationAffinities(List<GetClusterNodeConfigReservationAffinity> reservationAffinities) {
            if (reservationAffinities == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "reservationAffinities");
            }
            this.reservationAffinities = reservationAffinities;
            return this;
        }
        public Builder reservationAffinities(GetClusterNodeConfigReservationAffinity... reservationAffinities) {
            return reservationAffinities(List.of(reservationAffinities));
        }
        @CustomType.Setter
        public Builder resourceLabels(Map<String,String> resourceLabels) {
            if (resourceLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "resourceLabels");
            }
            this.resourceLabels = resourceLabels;
            return this;
        }
        @CustomType.Setter
        public Builder sandboxConfigs(List<GetClusterNodeConfigSandboxConfig> sandboxConfigs) {
            if (sandboxConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "sandboxConfigs");
            }
            this.sandboxConfigs = sandboxConfigs;
            return this;
        }
        public Builder sandboxConfigs(GetClusterNodeConfigSandboxConfig... sandboxConfigs) {
            return sandboxConfigs(List.of(sandboxConfigs));
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder shieldedInstanceConfigs(List<GetClusterNodeConfigShieldedInstanceConfig> shieldedInstanceConfigs) {
            if (shieldedInstanceConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "shieldedInstanceConfigs");
            }
            this.shieldedInstanceConfigs = shieldedInstanceConfigs;
            return this;
        }
        public Builder shieldedInstanceConfigs(GetClusterNodeConfigShieldedInstanceConfig... shieldedInstanceConfigs) {
            return shieldedInstanceConfigs(List.of(shieldedInstanceConfigs));
        }
        @CustomType.Setter
        public Builder soleTenantConfigs(List<GetClusterNodeConfigSoleTenantConfig> soleTenantConfigs) {
            if (soleTenantConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "soleTenantConfigs");
            }
            this.soleTenantConfigs = soleTenantConfigs;
            return this;
        }
        public Builder soleTenantConfigs(GetClusterNodeConfigSoleTenantConfig... soleTenantConfigs) {
            return soleTenantConfigs(List.of(soleTenantConfigs));
        }
        @CustomType.Setter
        public Builder spot(Boolean spot) {
            if (spot == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "spot");
            }
            this.spot = spot;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder taints(List<GetClusterNodeConfigTaint> taints) {
            if (taints == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "taints");
            }
            this.taints = taints;
            return this;
        }
        public Builder taints(GetClusterNodeConfigTaint... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder workloadMetadataConfigs(List<GetClusterNodeConfigWorkloadMetadataConfig> workloadMetadataConfigs) {
            if (workloadMetadataConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfig", "workloadMetadataConfigs");
            }
            this.workloadMetadataConfigs = workloadMetadataConfigs;
            return this;
        }
        public Builder workloadMetadataConfigs(GetClusterNodeConfigWorkloadMetadataConfig... workloadMetadataConfigs) {
            return workloadMetadataConfigs(List.of(workloadMetadataConfigs));
        }
        public GetClusterNodeConfig build() {
            final var _resultValue = new GetClusterNodeConfig();
            _resultValue.advancedMachineFeatures = advancedMachineFeatures;
            _resultValue.bootDiskKmsKey = bootDiskKmsKey;
            _resultValue.confidentialNodes = confidentialNodes;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.diskType = diskType;
            _resultValue.effectiveTaints = effectiveTaints;
            _resultValue.enableConfidentialStorage = enableConfidentialStorage;
            _resultValue.ephemeralStorageConfigs = ephemeralStorageConfigs;
            _resultValue.ephemeralStorageLocalSsdConfigs = ephemeralStorageLocalSsdConfigs;
            _resultValue.fastSockets = fastSockets;
            _resultValue.gcfsConfigs = gcfsConfigs;
            _resultValue.guestAccelerators = guestAccelerators;
            _resultValue.gvnics = gvnics;
            _resultValue.hostMaintenancePolicies = hostMaintenancePolicies;
            _resultValue.imageType = imageType;
            _resultValue.kubeletConfigs = kubeletConfigs;
            _resultValue.labels = labels;
            _resultValue.linuxNodeConfigs = linuxNodeConfigs;
            _resultValue.localNvmeSsdBlockConfigs = localNvmeSsdBlockConfigs;
            _resultValue.localSsdCount = localSsdCount;
            _resultValue.loggingVariant = loggingVariant;
            _resultValue.machineType = machineType;
            _resultValue.metadata = metadata;
            _resultValue.minCpuPlatform = minCpuPlatform;
            _resultValue.nodeGroup = nodeGroup;
            _resultValue.oauthScopes = oauthScopes;
            _resultValue.preemptible = preemptible;
            _resultValue.reservationAffinities = reservationAffinities;
            _resultValue.resourceLabels = resourceLabels;
            _resultValue.sandboxConfigs = sandboxConfigs;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.shieldedInstanceConfigs = shieldedInstanceConfigs;
            _resultValue.soleTenantConfigs = soleTenantConfigs;
            _resultValue.spot = spot;
            _resultValue.tags = tags;
            _resultValue.taints = taints;
            _resultValue.workloadMetadataConfigs = workloadMetadataConfigs;
            return _resultValue;
        }
    }
}
