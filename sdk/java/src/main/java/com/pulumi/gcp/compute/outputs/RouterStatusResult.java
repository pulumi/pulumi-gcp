// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.RouterStatusBestRoute;
import com.pulumi.gcp.compute.outputs.RouterStatusBestRoutesForRouter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RouterStatusResult {
    /**
     * @return List of best `compute#routes` configurations for this router&#39;s network. See gcp.compute.Route resource for available attributes.
     * 
     */
    private List<RouterStatusBestRoute> bestRoutes;
    /**
     * @return List of best `compute#routes` for this specific router. See gcp.compute.Route resource for available attributes.
     * 
     */
    private List<RouterStatusBestRoutesForRouter> bestRoutesForRouters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    private String network;
    private @Nullable String project;
    private String region;

    private RouterStatusResult() {}
    /**
     * @return List of best `compute#routes` configurations for this router&#39;s network. See gcp.compute.Route resource for available attributes.
     * 
     */
    public List<RouterStatusBestRoute> bestRoutes() {
        return this.bestRoutes;
    }
    /**
     * @return List of best `compute#routes` for this specific router. See gcp.compute.Route resource for available attributes.
     * 
     */
    public List<RouterStatusBestRoutesForRouter> bestRoutesForRouters() {
        return this.bestRoutesForRouters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    public String network() {
        return this.network;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String region() {
        return this.region;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterStatusResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<RouterStatusBestRoute> bestRoutes;
        private List<RouterStatusBestRoutesForRouter> bestRoutesForRouters;
        private String id;
        private String name;
        private String network;
        private @Nullable String project;
        private String region;
        public Builder() {}
        public Builder(RouterStatusResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bestRoutes = defaults.bestRoutes;
    	      this.bestRoutesForRouters = defaults.bestRoutesForRouters;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
        }

        @CustomType.Setter
        public Builder bestRoutes(List<RouterStatusBestRoute> bestRoutes) {
            if (bestRoutes == null) {
              throw new MissingRequiredPropertyException("RouterStatusResult", "bestRoutes");
            }
            this.bestRoutes = bestRoutes;
            return this;
        }
        public Builder bestRoutes(RouterStatusBestRoute... bestRoutes) {
            return bestRoutes(List.of(bestRoutes));
        }
        @CustomType.Setter
        public Builder bestRoutesForRouters(List<RouterStatusBestRoutesForRouter> bestRoutesForRouters) {
            if (bestRoutesForRouters == null) {
              throw new MissingRequiredPropertyException("RouterStatusResult", "bestRoutesForRouters");
            }
            this.bestRoutesForRouters = bestRoutesForRouters;
            return this;
        }
        public Builder bestRoutesForRouters(RouterStatusBestRoutesForRouter... bestRoutesForRouters) {
            return bestRoutesForRouters(List.of(bestRoutesForRouters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("RouterStatusResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RouterStatusResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("RouterStatusResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("RouterStatusResult", "region");
            }
            this.region = region;
            return this;
        }
        public RouterStatusResult build() {
            final var _resultValue = new RouterStatusResult();
            _resultValue.bestRoutes = bestRoutes;
            _resultValue.bestRoutesForRouters = bestRoutesForRouters;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.project = project;
            _resultValue.region = region;
            return _resultValue;
        }
    }
}
