// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDbServersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDbServersArgs Empty = new GetDbServersArgs();

    /**
     * The Exadata Infrastructure id.
     * 
     */
    @Import(name="cloudExadataInfrastructure", required=true)
    private Output<String> cloudExadataInfrastructure;

    /**
     * @return The Exadata Infrastructure id.
     * 
     */
    public Output<String> cloudExadataInfrastructure() {
        return this.cloudExadataInfrastructure;
    }

    /**
     * The location of resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The project to which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project to which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetDbServersArgs() {}

    private GetDbServersArgs(GetDbServersArgs $) {
        this.cloudExadataInfrastructure = $.cloudExadataInfrastructure;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDbServersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDbServersArgs $;

        public Builder() {
            $ = new GetDbServersArgs();
        }

        public Builder(GetDbServersArgs defaults) {
            $ = new GetDbServersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudExadataInfrastructure The Exadata Infrastructure id.
         * 
         * @return builder
         * 
         */
        public Builder cloudExadataInfrastructure(Output<String> cloudExadataInfrastructure) {
            $.cloudExadataInfrastructure = cloudExadataInfrastructure;
            return this;
        }

        /**
         * @param cloudExadataInfrastructure The Exadata Infrastructure id.
         * 
         * @return builder
         * 
         */
        public Builder cloudExadataInfrastructure(String cloudExadataInfrastructure) {
            return cloudExadataInfrastructure(Output.of(cloudExadataInfrastructure));
        }

        /**
         * @param location The location of resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The project to which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project to which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetDbServersArgs build() {
            if ($.cloudExadataInfrastructure == null) {
                throw new MissingRequiredPropertyException("GetDbServersArgs", "cloudExadataInfrastructure");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetDbServersArgs", "location");
            }
            return $;
        }
    }

}
