// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs;
import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs Empty = new DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs();

    /**
     * Optional. Days of week. If left empty, all days of the week will be included.
     * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<String>> daysOfWeeks;

    /**
     * @return Optional. Days of week. If left empty, all days of the week will be included.
     * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * Optional. End time (exclusive). Use 24:00 to indicate midnight. If you specify endTime you must also specify startTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs> endTime;

    /**
     * @return Optional. End time (exclusive). Use 24:00 to indicate midnight. If you specify endTime you must also specify startTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Optional. Start time (inclusive). Use 00:00 for the beginning of the day. If you specify startTime you must also specify endTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs> startTime;

    /**
     * @return Optional. Start time (inclusive). Use 00:00 for the beginning of the day. If you specify startTime you must also specify endTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs() {}

    private DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs $) {
        this.daysOfWeeks = $.daysOfWeeks;
        this.endTime = $.endTime;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs $;

        public Builder() {
            $ = new DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs();
        }

        public Builder(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs defaults) {
            $ = new DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysOfWeeks Optional. Days of week. If left empty, all days of the week will be included.
         * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Optional. Days of week. If left empty, all days of the week will be included.
         * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Optional. Days of week. If left empty, all days of the week will be included.
         * Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param endTime Optional. End time (exclusive). Use 24:00 to indicate midnight. If you specify endTime you must also specify startTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Optional. End time (exclusive). Use 24:00 to indicate midnight. If you specify endTime you must also specify startTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param startTime Optional. Start time (inclusive). Use 00:00 for the beginning of the day. If you specify startTime you must also specify endTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Optional. Start time (inclusive). Use 00:00 for the beginning of the day. If you specify startTime you must also specify endTime. If left empty, this will block for the entire day for the days specified in daysOfWeek.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder startTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs startTime) {
            return startTime(Output.of(startTime));
        }

        public DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs build() {
            return $;
        }
    }

}
