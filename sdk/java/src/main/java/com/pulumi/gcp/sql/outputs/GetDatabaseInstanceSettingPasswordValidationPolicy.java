// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceSettingPasswordValidationPolicy {
    private final String complexity;
    private final Boolean disallowUsernameSubstring;
    private final Boolean enablePasswordPolicy;
    private final Integer minLength;
    private final String passwordChangeInterval;
    private final Integer reuseInterval;

    @CustomType.Constructor
    private GetDatabaseInstanceSettingPasswordValidationPolicy(
        @CustomType.Parameter("complexity") String complexity,
        @CustomType.Parameter("disallowUsernameSubstring") Boolean disallowUsernameSubstring,
        @CustomType.Parameter("enablePasswordPolicy") Boolean enablePasswordPolicy,
        @CustomType.Parameter("minLength") Integer minLength,
        @CustomType.Parameter("passwordChangeInterval") String passwordChangeInterval,
        @CustomType.Parameter("reuseInterval") Integer reuseInterval) {
        this.complexity = complexity;
        this.disallowUsernameSubstring = disallowUsernameSubstring;
        this.enablePasswordPolicy = enablePasswordPolicy;
        this.minLength = minLength;
        this.passwordChangeInterval = passwordChangeInterval;
        this.reuseInterval = reuseInterval;
    }

    public String complexity() {
        return this.complexity;
    }
    public Boolean disallowUsernameSubstring() {
        return this.disallowUsernameSubstring;
    }
    public Boolean enablePasswordPolicy() {
        return this.enablePasswordPolicy;
    }
    public Integer minLength() {
        return this.minLength;
    }
    public String passwordChangeInterval() {
        return this.passwordChangeInterval;
    }
    public Integer reuseInterval() {
        return this.reuseInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceSettingPasswordValidationPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String complexity;
        private Boolean disallowUsernameSubstring;
        private Boolean enablePasswordPolicy;
        private Integer minLength;
        private String passwordChangeInterval;
        private Integer reuseInterval;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseInstanceSettingPasswordValidationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complexity = defaults.complexity;
    	      this.disallowUsernameSubstring = defaults.disallowUsernameSubstring;
    	      this.enablePasswordPolicy = defaults.enablePasswordPolicy;
    	      this.minLength = defaults.minLength;
    	      this.passwordChangeInterval = defaults.passwordChangeInterval;
    	      this.reuseInterval = defaults.reuseInterval;
        }

        public Builder complexity(String complexity) {
            this.complexity = Objects.requireNonNull(complexity);
            return this;
        }
        public Builder disallowUsernameSubstring(Boolean disallowUsernameSubstring) {
            this.disallowUsernameSubstring = Objects.requireNonNull(disallowUsernameSubstring);
            return this;
        }
        public Builder enablePasswordPolicy(Boolean enablePasswordPolicy) {
            this.enablePasswordPolicy = Objects.requireNonNull(enablePasswordPolicy);
            return this;
        }
        public Builder minLength(Integer minLength) {
            this.minLength = Objects.requireNonNull(minLength);
            return this;
        }
        public Builder passwordChangeInterval(String passwordChangeInterval) {
            this.passwordChangeInterval = Objects.requireNonNull(passwordChangeInterval);
            return this;
        }
        public Builder reuseInterval(Integer reuseInterval) {
            this.reuseInterval = Objects.requireNonNull(reuseInterval);
            return this;
        }        public GetDatabaseInstanceSettingPasswordValidationPolicy build() {
            return new GetDatabaseInstanceSettingPasswordValidationPolicy(complexity, disallowUsernameSubstring, enablePasswordPolicy, minLength, passwordChangeInterval, reuseInterval);
        }
    }
}
