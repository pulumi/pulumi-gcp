// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkAttachmentConnectionEndpoint {
    /**
     * @return The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless.
     * 
     */
    private String ipAddress;
    /**
     * @return The project id or number of the interface to which the IP was assigned.
     * 
     */
    private String projectIdOrNum;
    /**
     * @return Alias IP ranges from the same subnetwork.
     * 
     */
    private String secondaryIpCidrRanges;
    /**
     * @return The status of a connected endpoint to this network attachment.
     * 
     */
    private String status;
    /**
     * @return The subnetwork used to assign the IP to the producer instance network interface.
     * 
     */
    private String subnetwork;

    private GetNetworkAttachmentConnectionEndpoint() {}
    /**
     * @return The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The project id or number of the interface to which the IP was assigned.
     * 
     */
    public String projectIdOrNum() {
        return this.projectIdOrNum;
    }
    /**
     * @return Alias IP ranges from the same subnetwork.
     * 
     */
    public String secondaryIpCidrRanges() {
        return this.secondaryIpCidrRanges;
    }
    /**
     * @return The status of a connected endpoint to this network attachment.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The subnetwork used to assign the IP to the producer instance network interface.
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAttachmentConnectionEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ipAddress;
        private String projectIdOrNum;
        private String secondaryIpCidrRanges;
        private String status;
        private String subnetwork;
        public Builder() {}
        public Builder(GetNetworkAttachmentConnectionEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.projectIdOrNum = defaults.projectIdOrNum;
    	      this.secondaryIpCidrRanges = defaults.secondaryIpCidrRanges;
    	      this.status = defaults.status;
    	      this.subnetwork = defaults.subnetwork;
        }

        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachmentConnectionEndpoint", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder projectIdOrNum(String projectIdOrNum) {
            if (projectIdOrNum == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachmentConnectionEndpoint", "projectIdOrNum");
            }
            this.projectIdOrNum = projectIdOrNum;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpCidrRanges(String secondaryIpCidrRanges) {
            if (secondaryIpCidrRanges == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachmentConnectionEndpoint", "secondaryIpCidrRanges");
            }
            this.secondaryIpCidrRanges = secondaryIpCidrRanges;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachmentConnectionEndpoint", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachmentConnectionEndpoint", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        public GetNetworkAttachmentConnectionEndpoint build() {
            final var _resultValue = new GetNetworkAttachmentConnectionEndpoint();
            _resultValue.ipAddress = ipAddress;
            _resultValue.projectIdOrNum = projectIdOrNum;
            _resultValue.secondaryIpCidrRanges = secondaryIpCidrRanges;
            _resultValue.status = status;
            _resultValue.subnetwork = subnetwork;
            return _resultValue;
        }
    }
}
