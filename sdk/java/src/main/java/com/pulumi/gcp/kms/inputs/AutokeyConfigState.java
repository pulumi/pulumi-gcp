// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutokeyConfigState extends com.pulumi.resources.ResourceArgs {

    public static final AutokeyConfigState Empty = new AutokeyConfigState();

    /**
     * The etag of the AutokeyConfig for optimistic concurrency control.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return The etag of the AutokeyConfig for optimistic concurrency control.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The folder for which to retrieve config.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The folder for which to retrieve config.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/&lt;project_id_or_number&gt;`.
     * 
     */
    @Import(name="keyProject")
    private @Nullable Output<String> keyProject;

    /**
     * @return The target key project for a given folder where KMS Autokey will provision a
     * CryptoKey for any new KeyHandle the Developer creates. Should have the form
     * `projects/&lt;project_id_or_number&gt;`.
     * 
     */
    public Optional<Output<String>> keyProject() {
        return Optional.ofNullable(this.keyProject);
    }

    private AutokeyConfigState() {}

    private AutokeyConfigState(AutokeyConfigState $) {
        this.etag = $.etag;
        this.folder = $.folder;
        this.keyProject = $.keyProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutokeyConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutokeyConfigState $;

        public Builder() {
            $ = new AutokeyConfigState();
        }

        public Builder(AutokeyConfigState defaults) {
            $ = new AutokeyConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param etag The etag of the AutokeyConfig for optimistic concurrency control.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag The etag of the AutokeyConfig for optimistic concurrency control.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param folder The folder for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param keyProject The target key project for a given folder where KMS Autokey will provision a
         * CryptoKey for any new KeyHandle the Developer creates. Should have the form
         * `projects/&lt;project_id_or_number&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder keyProject(@Nullable Output<String> keyProject) {
            $.keyProject = keyProject;
            return this;
        }

        /**
         * @param keyProject The target key project for a given folder where KMS Autokey will provision a
         * CryptoKey for any new KeyHandle the Developer creates. Should have the form
         * `projects/&lt;project_id_or_number&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder keyProject(String keyProject) {
            return keyProject(Output.of(keyProject));
        }

        public AutokeyConfigState build() {
            return $;
        }
    }

}
