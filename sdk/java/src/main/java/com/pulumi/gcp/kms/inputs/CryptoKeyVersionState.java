// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.kms.inputs.CryptoKeyVersionAttestationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CryptoKeyVersionState extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyVersionState Empty = new CryptoKeyVersionState();

    /**
     * The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
     * Only provided for key versions with protectionLevel HSM.
     * Structure is documented below.
     * 
     */
    @Import(name="attestations")
    private @Nullable Output<List<CryptoKeyVersionAttestationArgs>> attestations;

    /**
     * @return Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
     * Only provided for key versions with protectionLevel HSM.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CryptoKeyVersionAttestationArgs>>> attestations() {
        return Optional.ofNullable(this.attestations);
    }

    /**
     * The name of the cryptoKey associated with the CryptoKeyVersions.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    @Import(name="cryptoKey")
    private @Nullable Output<String> cryptoKey;

    /**
     * @return The name of the cryptoKey associated with the CryptoKeyVersions.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    public Optional<Output<String>> cryptoKey() {
        return Optional.ofNullable(this.cryptoKey);
    }

    /**
     * The time this CryptoKeyVersion key material was generated
     * 
     */
    @Import(name="generateTime")
    private @Nullable Output<String> generateTime;

    /**
     * @return The time this CryptoKeyVersion key material was generated
     * 
     */
    public Optional<Output<String>> generateTime() {
        return Optional.ofNullable(this.generateTime);
    }

    /**
     * The resource name for this CryptoKeyVersion.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name for this CryptoKeyVersion.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     * 
     */
    @Import(name="protectionLevel")
    private @Nullable Output<String> protectionLevel;

    /**
     * @return The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     * 
     */
    public Optional<Output<String>> protectionLevel() {
        return Optional.ofNullable(this.protectionLevel);
    }

    /**
     * The current state of the CryptoKeyVersion.
     * Possible values are `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, and `IMPORT_FAILED`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the CryptoKeyVersion.
     * Possible values are `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, and `IMPORT_FAILED`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private CryptoKeyVersionState() {}

    private CryptoKeyVersionState(CryptoKeyVersionState $) {
        this.algorithm = $.algorithm;
        this.attestations = $.attestations;
        this.cryptoKey = $.cryptoKey;
        this.generateTime = $.generateTime;
        this.name = $.name;
        this.protectionLevel = $.protectionLevel;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoKeyVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoKeyVersionState $;

        public Builder() {
            $ = new CryptoKeyVersionState();
        }

        public Builder(CryptoKeyVersionState defaults) {
            $ = new CryptoKeyVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param attestations Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
         * Only provided for key versions with protectionLevel HSM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attestations(@Nullable Output<List<CryptoKeyVersionAttestationArgs>> attestations) {
            $.attestations = attestations;
            return this;
        }

        /**
         * @param attestations Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
         * Only provided for key versions with protectionLevel HSM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attestations(List<CryptoKeyVersionAttestationArgs> attestations) {
            return attestations(Output.of(attestations));
        }

        /**
         * @param attestations Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
         * Only provided for key versions with protectionLevel HSM.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attestations(CryptoKeyVersionAttestationArgs... attestations) {
            return attestations(List.of(attestations));
        }

        /**
         * @param cryptoKey The name of the cryptoKey associated with the CryptoKeyVersions.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(@Nullable Output<String> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey The name of the cryptoKey associated with the CryptoKeyVersions.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        /**
         * @param generateTime The time this CryptoKeyVersion key material was generated
         * 
         * @return builder
         * 
         */
        public Builder generateTime(@Nullable Output<String> generateTime) {
            $.generateTime = generateTime;
            return this;
        }

        /**
         * @param generateTime The time this CryptoKeyVersion key material was generated
         * 
         * @return builder
         * 
         */
        public Builder generateTime(String generateTime) {
            return generateTime(Output.of(generateTime));
        }

        /**
         * @param name The resource name for this CryptoKeyVersion.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name for this CryptoKeyVersion.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protectionLevel The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevel(@Nullable Output<String> protectionLevel) {
            $.protectionLevel = protectionLevel;
            return this;
        }

        /**
         * @param protectionLevel The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
         * 
         * @return builder
         * 
         */
        public Builder protectionLevel(String protectionLevel) {
            return protectionLevel(Output.of(protectionLevel));
        }

        /**
         * @param state The current state of the CryptoKeyVersion.
         * Possible values are `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, and `IMPORT_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the CryptoKeyVersion.
         * Possible values are `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, and `IMPORT_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public CryptoKeyVersionState build() {
            return $;
        }
    }

}
