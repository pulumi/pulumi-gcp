// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkservices.inputs.TcpRouteRuleActionArgs;
import com.pulumi.gcp.networkservices.inputs.TcpRouteRuleMatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TcpRouteRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TcpRouteRuleArgs Empty = new TcpRouteRuleArgs();

    /**
     * A detailed rule defining how to route traffic.
     * Structure is documented below.
     * 
     */
    @Import(name="action", required=true)
    private Output<TcpRouteRuleActionArgs> action;

    /**
     * @return A detailed rule defining how to route traffic.
     * Structure is documented below.
     * 
     */
    public Output<TcpRouteRuleActionArgs> action() {
        return this.action;
    }

    /**
     * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
     * If no routeMatch field is specified, this rule will unconditionally match traffic.
     * Structure is documented below.
     * 
     */
    @Import(name="matches")
    private @Nullable Output<List<TcpRouteRuleMatchArgs>> matches;

    /**
     * @return RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
     * If no routeMatch field is specified, this rule will unconditionally match traffic.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TcpRouteRuleMatchArgs>>> matches() {
        return Optional.ofNullable(this.matches);
    }

    private TcpRouteRuleArgs() {}

    private TcpRouteRuleArgs(TcpRouteRuleArgs $) {
        this.action = $.action;
        this.matches = $.matches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TcpRouteRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TcpRouteRuleArgs $;

        public Builder() {
            $ = new TcpRouteRuleArgs();
        }

        public Builder(TcpRouteRuleArgs defaults) {
            $ = new TcpRouteRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action A detailed rule defining how to route traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<TcpRouteRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action A detailed rule defining how to route traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder action(TcpRouteRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param matches RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
         * If no routeMatch field is specified, this rule will unconditionally match traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder matches(@Nullable Output<List<TcpRouteRuleMatchArgs>> matches) {
            $.matches = matches;
            return this;
        }

        /**
         * @param matches RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
         * If no routeMatch field is specified, this rule will unconditionally match traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder matches(List<TcpRouteRuleMatchArgs> matches) {
            return matches(Output.of(matches));
        }

        /**
         * @param matches RouteMatch defines the predicate used to match requests to a given action. Multiple match types are &#34;OR&#34;ed for evaluation.
         * If no routeMatch field is specified, this rule will unconditionally match traffic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder matches(TcpRouteRuleMatchArgs... matches) {
            return matches(List.of(matches));
        }

        public TcpRouteRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            return $;
        }
    }

}
