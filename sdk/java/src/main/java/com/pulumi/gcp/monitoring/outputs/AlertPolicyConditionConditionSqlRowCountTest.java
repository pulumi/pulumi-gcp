// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AlertPolicyConditionConditionSqlRowCountTest {
    /**
     * @return The comparison to apply between the time
     * series (indicated by filter and aggregation)
     * and the threshold (indicated by
     * threshold_value). The comparison is applied
     * on each time series, with the time series on
     * the left-hand side and the threshold on the
     * right-hand side. Only COMPARISON_LT and
     * COMPARISON_GT are supported currently.
     * Possible values are: `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, `COMPARISON_NE`.
     * 
     */
    private String comparison;
    /**
     * @return The value against which to compare the row count.
     * 
     */
    private Integer threshold;

    private AlertPolicyConditionConditionSqlRowCountTest() {}
    /**
     * @return The comparison to apply between the time
     * series (indicated by filter and aggregation)
     * and the threshold (indicated by
     * threshold_value). The comparison is applied
     * on each time series, with the time series on
     * the left-hand side and the threshold on the
     * right-hand side. Only COMPARISON_LT and
     * COMPARISON_GT are supported currently.
     * Possible values are: `COMPARISON_GT`, `COMPARISON_GE`, `COMPARISON_LT`, `COMPARISON_LE`, `COMPARISON_EQ`, `COMPARISON_NE`.
     * 
     */
    public String comparison() {
        return this.comparison;
    }
    /**
     * @return The value against which to compare the row count.
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyConditionConditionSqlRowCountTest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comparison;
        private Integer threshold;
        public Builder() {}
        public Builder(AlertPolicyConditionConditionSqlRowCountTest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comparison = defaults.comparison;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder comparison(String comparison) {
            if (comparison == null) {
              throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlRowCountTest", "comparison");
            }
            this.comparison = comparison;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlRowCountTest", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public AlertPolicyConditionConditionSqlRowCountTest build() {
            final var _resultValue = new AlertPolicyConditionConditionSqlRowCountTest();
            _resultValue.comparison = comparison;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
