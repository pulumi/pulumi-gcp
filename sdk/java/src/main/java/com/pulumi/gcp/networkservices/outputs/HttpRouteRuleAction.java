// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionCorsPolicy;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionDestination;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionFaultInjectionPolicy;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionRedirect;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionRequestHeaderModifier;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionRequestMirrorPolicy;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionResponseHeaderModifier;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionRetryPolicy;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleActionUrlRewrite;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HttpRouteRuleAction {
    /**
     * @return The specification for allowing client side cross-origin requests.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionCorsPolicy corsPolicy;
    /**
     * @return The destination to which traffic should be forwarded.
     * Structure is documented below.
     * 
     */
    private @Nullable List<HttpRouteRuleActionDestination> destinations;
    /**
     * @return The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionFaultInjectionPolicy faultInjectionPolicy;
    /**
     * @return If set, the request is directed as configured by this field.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionRedirect redirect;
    /**
     * @return The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionRequestHeaderModifier requestHeaderModifier;
    /**
     * @return Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionRequestMirrorPolicy requestMirrorPolicy;
    /**
     * @return The specification for modifying the headers of a response prior to sending the response back to the client.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionResponseHeaderModifier responseHeaderModifier;
    /**
     * @return Specifies the retry policy associated with this route.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionRetryPolicy retryPolicy;
    /**
     * @return Specifies the timeout for selected route.
     * 
     */
    private @Nullable String timeout;
    /**
     * @return The specification for rewrite URL before forwarding requests to the destination.
     * Structure is documented below.
     * 
     */
    private @Nullable HttpRouteRuleActionUrlRewrite urlRewrite;

    private HttpRouteRuleAction() {}
    /**
     * @return The specification for allowing client side cross-origin requests.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionCorsPolicy> corsPolicy() {
        return Optional.ofNullable(this.corsPolicy);
    }
    /**
     * @return The destination to which traffic should be forwarded.
     * Structure is documented below.
     * 
     */
    public List<HttpRouteRuleActionDestination> destinations() {
        return this.destinations == null ? List.of() : this.destinations;
    }
    /**
     * @return The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionFaultInjectionPolicy> faultInjectionPolicy() {
        return Optional.ofNullable(this.faultInjectionPolicy);
    }
    /**
     * @return If set, the request is directed as configured by this field.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionRedirect> redirect() {
        return Optional.ofNullable(this.redirect);
    }
    /**
     * @return The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionRequestHeaderModifier> requestHeaderModifier() {
        return Optional.ofNullable(this.requestHeaderModifier);
    }
    /**
     * @return Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionRequestMirrorPolicy> requestMirrorPolicy() {
        return Optional.ofNullable(this.requestMirrorPolicy);
    }
    /**
     * @return The specification for modifying the headers of a response prior to sending the response back to the client.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionResponseHeaderModifier> responseHeaderModifier() {
        return Optional.ofNullable(this.responseHeaderModifier);
    }
    /**
     * @return Specifies the retry policy associated with this route.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionRetryPolicy> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }
    /**
     * @return Specifies the timeout for selected route.
     * 
     */
    public Optional<String> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return The specification for rewrite URL before forwarding requests to the destination.
     * Structure is documented below.
     * 
     */
    public Optional<HttpRouteRuleActionUrlRewrite> urlRewrite() {
        return Optional.ofNullable(this.urlRewrite);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRuleAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable HttpRouteRuleActionCorsPolicy corsPolicy;
        private @Nullable List<HttpRouteRuleActionDestination> destinations;
        private @Nullable HttpRouteRuleActionFaultInjectionPolicy faultInjectionPolicy;
        private @Nullable HttpRouteRuleActionRedirect redirect;
        private @Nullable HttpRouteRuleActionRequestHeaderModifier requestHeaderModifier;
        private @Nullable HttpRouteRuleActionRequestMirrorPolicy requestMirrorPolicy;
        private @Nullable HttpRouteRuleActionResponseHeaderModifier responseHeaderModifier;
        private @Nullable HttpRouteRuleActionRetryPolicy retryPolicy;
        private @Nullable String timeout;
        private @Nullable HttpRouteRuleActionUrlRewrite urlRewrite;
        public Builder() {}
        public Builder(HttpRouteRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.corsPolicy = defaults.corsPolicy;
    	      this.destinations = defaults.destinations;
    	      this.faultInjectionPolicy = defaults.faultInjectionPolicy;
    	      this.redirect = defaults.redirect;
    	      this.requestHeaderModifier = defaults.requestHeaderModifier;
    	      this.requestMirrorPolicy = defaults.requestMirrorPolicy;
    	      this.responseHeaderModifier = defaults.responseHeaderModifier;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.timeout = defaults.timeout;
    	      this.urlRewrite = defaults.urlRewrite;
        }

        @CustomType.Setter
        public Builder corsPolicy(@Nullable HttpRouteRuleActionCorsPolicy corsPolicy) {
            this.corsPolicy = corsPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder destinations(@Nullable List<HttpRouteRuleActionDestination> destinations) {
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(HttpRouteRuleActionDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder faultInjectionPolicy(@Nullable HttpRouteRuleActionFaultInjectionPolicy faultInjectionPolicy) {
            this.faultInjectionPolicy = faultInjectionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder redirect(@Nullable HttpRouteRuleActionRedirect redirect) {
            this.redirect = redirect;
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaderModifier(@Nullable HttpRouteRuleActionRequestHeaderModifier requestHeaderModifier) {
            this.requestHeaderModifier = requestHeaderModifier;
            return this;
        }
        @CustomType.Setter
        public Builder requestMirrorPolicy(@Nullable HttpRouteRuleActionRequestMirrorPolicy requestMirrorPolicy) {
            this.requestMirrorPolicy = requestMirrorPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder responseHeaderModifier(@Nullable HttpRouteRuleActionResponseHeaderModifier responseHeaderModifier) {
            this.responseHeaderModifier = responseHeaderModifier;
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicy(@Nullable HttpRouteRuleActionRetryPolicy retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable String timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder urlRewrite(@Nullable HttpRouteRuleActionUrlRewrite urlRewrite) {
            this.urlRewrite = urlRewrite;
            return this;
        }
        public HttpRouteRuleAction build() {
            final var o = new HttpRouteRuleAction();
            o.corsPolicy = corsPolicy;
            o.destinations = destinations;
            o.faultInjectionPolicy = faultInjectionPolicy;
            o.redirect = redirect;
            o.requestHeaderModifier = requestHeaderModifier;
            o.requestMirrorPolicy = requestMirrorPolicy;
            o.responseHeaderModifier = responseHeaderModifier;
            o.retryPolicy = retryPolicy;
            o.timeout = timeout;
            o.urlRewrite = urlRewrite;
            return o;
        }
    }
}
