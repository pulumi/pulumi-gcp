// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.billing.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.billing.inputs.BudgetAllUpdatesRuleArgs;
import com.pulumi.gcp.billing.inputs.BudgetAmountArgs;
import com.pulumi.gcp.billing.inputs.BudgetBudgetFilterArgs;
import com.pulumi.gcp.billing.inputs.BudgetThresholdRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetState extends com.pulumi.resources.ResourceArgs {

    public static final BudgetState Empty = new BudgetState();

    /**
     * Defines notifications that are sent on every update to the
     * billing account&#39;s spend, regardless of the thresholds defined
     * using threshold rules.
     * Structure is documented below.
     * 
     */
    @Import(name="allUpdatesRule")
    private @Nullable Output<BudgetAllUpdatesRuleArgs> allUpdatesRule;

    /**
     * @return Defines notifications that are sent on every update to the
     * billing account&#39;s spend, regardless of the thresholds defined
     * using threshold rules.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BudgetAllUpdatesRuleArgs>> allUpdatesRule() {
        return Optional.ofNullable(this.allUpdatesRule);
    }

    /**
     * The budgeted amount for each usage period.
     * Structure is documented below.
     * 
     */
    @Import(name="amount")
    private @Nullable Output<BudgetAmountArgs> amount;

    /**
     * @return The budgeted amount for each usage period.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BudgetAmountArgs>> amount() {
        return Optional.ofNullable(this.amount);
    }

    /**
     * ID of the billing account to set a budget on.
     * 
     */
    @Import(name="billingAccount")
    private @Nullable Output<String> billingAccount;

    /**
     * @return ID of the billing account to set a budget on.
     * 
     */
    public Optional<Output<String>> billingAccount() {
        return Optional.ofNullable(this.billingAccount);
    }

    /**
     * Filters that define which resources are used to compute the actual
     * spend against the budget.
     * Structure is documented below.
     * 
     */
    @Import(name="budgetFilter")
    private @Nullable Output<BudgetBudgetFilterArgs> budgetFilter;

    /**
     * @return Filters that define which resources are used to compute the actual
     * spend against the budget.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BudgetBudgetFilterArgs>> budgetFilter() {
        return Optional.ofNullable(this.budgetFilter);
    }

    /**
     * User data for display name in UI. Must be &lt;= 60 chars.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User data for display name in UI. Must be &lt;= 60 chars.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Rules that trigger alerts (notifications of thresholds being
     * crossed) when spend exceeds the specified percentages of the
     * budget.
     * Structure is documented below.
     * 
     */
    @Import(name="thresholdRules")
    private @Nullable Output<List<BudgetThresholdRuleArgs>> thresholdRules;

    /**
     * @return Rules that trigger alerts (notifications of thresholds being
     * crossed) when spend exceeds the specified percentages of the
     * budget.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BudgetThresholdRuleArgs>>> thresholdRules() {
        return Optional.ofNullable(this.thresholdRules);
    }

    private BudgetState() {}

    private BudgetState(BudgetState $) {
        this.allUpdatesRule = $.allUpdatesRule;
        this.amount = $.amount;
        this.billingAccount = $.billingAccount;
        this.budgetFilter = $.budgetFilter;
        this.displayName = $.displayName;
        this.name = $.name;
        this.thresholdRules = $.thresholdRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetState $;

        public Builder() {
            $ = new BudgetState();
        }

        public Builder(BudgetState defaults) {
            $ = new BudgetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allUpdatesRule Defines notifications that are sent on every update to the
         * billing account&#39;s spend, regardless of the thresholds defined
         * using threshold rules.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allUpdatesRule(@Nullable Output<BudgetAllUpdatesRuleArgs> allUpdatesRule) {
            $.allUpdatesRule = allUpdatesRule;
            return this;
        }

        /**
         * @param allUpdatesRule Defines notifications that are sent on every update to the
         * billing account&#39;s spend, regardless of the thresholds defined
         * using threshold rules.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allUpdatesRule(BudgetAllUpdatesRuleArgs allUpdatesRule) {
            return allUpdatesRule(Output.of(allUpdatesRule));
        }

        /**
         * @param amount The budgeted amount for each usage period.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder amount(@Nullable Output<BudgetAmountArgs> amount) {
            $.amount = amount;
            return this;
        }

        /**
         * @param amount The budgeted amount for each usage period.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder amount(BudgetAmountArgs amount) {
            return amount(Output.of(amount));
        }

        /**
         * @param billingAccount ID of the billing account to set a budget on.
         * 
         * @return builder
         * 
         */
        public Builder billingAccount(@Nullable Output<String> billingAccount) {
            $.billingAccount = billingAccount;
            return this;
        }

        /**
         * @param billingAccount ID of the billing account to set a budget on.
         * 
         * @return builder
         * 
         */
        public Builder billingAccount(String billingAccount) {
            return billingAccount(Output.of(billingAccount));
        }

        /**
         * @param budgetFilter Filters that define which resources are used to compute the actual
         * spend against the budget.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder budgetFilter(@Nullable Output<BudgetBudgetFilterArgs> budgetFilter) {
            $.budgetFilter = budgetFilter;
            return this;
        }

        /**
         * @param budgetFilter Filters that define which resources are used to compute the actual
         * spend against the budget.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder budgetFilter(BudgetBudgetFilterArgs budgetFilter) {
            return budgetFilter(Output.of(budgetFilter));
        }

        /**
         * @param displayName User data for display name in UI. Must be &lt;= 60 chars.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User data for display name in UI. Must be &lt;= 60 chars.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
         * billingAccounts/{billingAccountId}/budgets/{budgetId}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
         * billingAccounts/{billingAccountId}/budgets/{budgetId}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param thresholdRules Rules that trigger alerts (notifications of thresholds being
         * crossed) when spend exceeds the specified percentages of the
         * budget.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder thresholdRules(@Nullable Output<List<BudgetThresholdRuleArgs>> thresholdRules) {
            $.thresholdRules = thresholdRules;
            return this;
        }

        /**
         * @param thresholdRules Rules that trigger alerts (notifications of thresholds being
         * crossed) when spend exceeds the specified percentages of the
         * budget.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder thresholdRules(List<BudgetThresholdRuleArgs> thresholdRules) {
            return thresholdRules(Output.of(thresholdRules));
        }

        /**
         * @param thresholdRules Rules that trigger alerts (notifications of thresholds being
         * crossed) when spend exceeds the specified percentages of the
         * budget.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder thresholdRules(BudgetThresholdRuleArgs... thresholdRules) {
            return thresholdRules(List.of(thresholdRules));
        }

        public BudgetState build() {
            return $;
        }
    }

}
