// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.managedkafka.outputs.ClusterTlsConfigTrustConfig;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterTlsConfig {
    /**
     * @return The rules for mapping mTLS certificate Distinguished Names (DNs) to shortened principal names for Kafka ACLs. This field corresponds exactly to the ssl.principal.mapping.rules broker config and matches the format and syntax defined in the Apache Kafka documentation. Setting or modifying this field will trigger a rolling restart of the Kafka brokers to apply the change. An empty string means that the default Kafka behavior is used. Example: `RULE:^CN=(.?),OU=ServiceUsers.$/$1{@literal @}example.com/,DEFAULT`
     * 
     */
    private @Nullable String sslPrincipalMappingRules;
    /**
     * @return The configuration of the broker truststore. If specified, clients can use mTLS for authentication.
     * Structure is documented below.
     * 
     */
    private @Nullable ClusterTlsConfigTrustConfig trustConfig;

    private ClusterTlsConfig() {}
    /**
     * @return The rules for mapping mTLS certificate Distinguished Names (DNs) to shortened principal names for Kafka ACLs. This field corresponds exactly to the ssl.principal.mapping.rules broker config and matches the format and syntax defined in the Apache Kafka documentation. Setting or modifying this field will trigger a rolling restart of the Kafka brokers to apply the change. An empty string means that the default Kafka behavior is used. Example: `RULE:^CN=(.?),OU=ServiceUsers.$/$1{@literal @}example.com/,DEFAULT`
     * 
     */
    public Optional<String> sslPrincipalMappingRules() {
        return Optional.ofNullable(this.sslPrincipalMappingRules);
    }
    /**
     * @return The configuration of the broker truststore. If specified, clients can use mTLS for authentication.
     * Structure is documented below.
     * 
     */
    public Optional<ClusterTlsConfigTrustConfig> trustConfig() {
        return Optional.ofNullable(this.trustConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterTlsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String sslPrincipalMappingRules;
        private @Nullable ClusterTlsConfigTrustConfig trustConfig;
        public Builder() {}
        public Builder(ClusterTlsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sslPrincipalMappingRules = defaults.sslPrincipalMappingRules;
    	      this.trustConfig = defaults.trustConfig;
        }

        @CustomType.Setter
        public Builder sslPrincipalMappingRules(@Nullable String sslPrincipalMappingRules) {

            this.sslPrincipalMappingRules = sslPrincipalMappingRules;
            return this;
        }
        @CustomType.Setter
        public Builder trustConfig(@Nullable ClusterTlsConfigTrustConfig trustConfig) {

            this.trustConfig = trustConfig;
            return this;
        }
        public ClusterTlsConfig build() {
            final var _resultValue = new ClusterTlsConfig();
            _resultValue.sslPrincipalMappingRules = sslPrincipalMappingRules;
            _resultValue.trustConfig = trustConfig;
            return _resultValue;
        }
    }
}
