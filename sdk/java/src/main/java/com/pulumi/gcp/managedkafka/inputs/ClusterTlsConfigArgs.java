// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.managedkafka.inputs.ClusterTlsConfigTrustConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterTlsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterTlsConfigArgs Empty = new ClusterTlsConfigArgs();

    /**
     * The rules for mapping mTLS certificate Distinguished Names (DNs) to shortened principal names for Kafka ACLs. This field corresponds exactly to the ssl.principal.mapping.rules broker config and matches the format and syntax defined in the Apache Kafka documentation. Setting or modifying this field will trigger a rolling restart of the Kafka brokers to apply the change. An empty string means that the default Kafka behavior is used. Example: `RULE:^CN=(.?),OU=ServiceUsers.$/$1{@literal @}example.com/,DEFAULT`
     * 
     */
    @Import(name="sslPrincipalMappingRules")
    private @Nullable Output<String> sslPrincipalMappingRules;

    /**
     * @return The rules for mapping mTLS certificate Distinguished Names (DNs) to shortened principal names for Kafka ACLs. This field corresponds exactly to the ssl.principal.mapping.rules broker config and matches the format and syntax defined in the Apache Kafka documentation. Setting or modifying this field will trigger a rolling restart of the Kafka brokers to apply the change. An empty string means that the default Kafka behavior is used. Example: `RULE:^CN=(.?),OU=ServiceUsers.$/$1{@literal @}example.com/,DEFAULT`
     * 
     */
    public Optional<Output<String>> sslPrincipalMappingRules() {
        return Optional.ofNullable(this.sslPrincipalMappingRules);
    }

    /**
     * The configuration of the broker truststore. If specified, clients can use mTLS for authentication.
     * Structure is documented below.
     * 
     */
    @Import(name="trustConfig")
    private @Nullable Output<ClusterTlsConfigTrustConfigArgs> trustConfig;

    /**
     * @return The configuration of the broker truststore. If specified, clients can use mTLS for authentication.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClusterTlsConfigTrustConfigArgs>> trustConfig() {
        return Optional.ofNullable(this.trustConfig);
    }

    private ClusterTlsConfigArgs() {}

    private ClusterTlsConfigArgs(ClusterTlsConfigArgs $) {
        this.sslPrincipalMappingRules = $.sslPrincipalMappingRules;
        this.trustConfig = $.trustConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterTlsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterTlsConfigArgs $;

        public Builder() {
            $ = new ClusterTlsConfigArgs();
        }

        public Builder(ClusterTlsConfigArgs defaults) {
            $ = new ClusterTlsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sslPrincipalMappingRules The rules for mapping mTLS certificate Distinguished Names (DNs) to shortened principal names for Kafka ACLs. This field corresponds exactly to the ssl.principal.mapping.rules broker config and matches the format and syntax defined in the Apache Kafka documentation. Setting or modifying this field will trigger a rolling restart of the Kafka brokers to apply the change. An empty string means that the default Kafka behavior is used. Example: `RULE:^CN=(.?),OU=ServiceUsers.$/$1{@literal @}example.com/,DEFAULT`
         * 
         * @return builder
         * 
         */
        public Builder sslPrincipalMappingRules(@Nullable Output<String> sslPrincipalMappingRules) {
            $.sslPrincipalMappingRules = sslPrincipalMappingRules;
            return this;
        }

        /**
         * @param sslPrincipalMappingRules The rules for mapping mTLS certificate Distinguished Names (DNs) to shortened principal names for Kafka ACLs. This field corresponds exactly to the ssl.principal.mapping.rules broker config and matches the format and syntax defined in the Apache Kafka documentation. Setting or modifying this field will trigger a rolling restart of the Kafka brokers to apply the change. An empty string means that the default Kafka behavior is used. Example: `RULE:^CN=(.?),OU=ServiceUsers.$/$1{@literal @}example.com/,DEFAULT`
         * 
         * @return builder
         * 
         */
        public Builder sslPrincipalMappingRules(String sslPrincipalMappingRules) {
            return sslPrincipalMappingRules(Output.of(sslPrincipalMappingRules));
        }

        /**
         * @param trustConfig The configuration of the broker truststore. If specified, clients can use mTLS for authentication.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustConfig(@Nullable Output<ClusterTlsConfigTrustConfigArgs> trustConfig) {
            $.trustConfig = trustConfig;
            return this;
        }

        /**
         * @param trustConfig The configuration of the broker truststore. If specified, clients can use mTLS for authentication.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustConfig(ClusterTlsConfigTrustConfigArgs trustConfig) {
            return trustConfig(Output.of(trustConfig));
        }

        public ClusterTlsConfigArgs build() {
            return $;
        }
    }

}
