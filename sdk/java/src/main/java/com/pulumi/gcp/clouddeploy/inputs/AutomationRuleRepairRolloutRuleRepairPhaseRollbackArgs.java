// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs Empty = new AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs();

    /**
     * Optional. The starting phase ID for the Rollout. If unspecified, the Rollout will start in the stable phase.
     * 
     */
    @Import(name="destinationPhase")
    private @Nullable Output<String> destinationPhase;

    /**
     * @return Optional. The starting phase ID for the Rollout. If unspecified, the Rollout will start in the stable phase.
     * 
     */
    public Optional<Output<String>> destinationPhase() {
        return Optional.ofNullable(this.destinationPhase);
    }

    /**
     * Optional. If pending rollout exists on the target, the rollback operation will be aborted.
     * 
     */
    @Import(name="disableRollbackIfRolloutPending")
    private @Nullable Output<Boolean> disableRollbackIfRolloutPending;

    /**
     * @return Optional. If pending rollout exists on the target, the rollback operation will be aborted.
     * 
     */
    public Optional<Output<Boolean>> disableRollbackIfRolloutPending() {
        return Optional.ofNullable(this.disableRollbackIfRolloutPending);
    }

    private AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs() {}

    private AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs(AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs $) {
        this.destinationPhase = $.destinationPhase;
        this.disableRollbackIfRolloutPending = $.disableRollbackIfRolloutPending;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs $;

        public Builder() {
            $ = new AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs();
        }

        public Builder(AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs defaults) {
            $ = new AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPhase Optional. The starting phase ID for the Rollout. If unspecified, the Rollout will start in the stable phase.
         * 
         * @return builder
         * 
         */
        public Builder destinationPhase(@Nullable Output<String> destinationPhase) {
            $.destinationPhase = destinationPhase;
            return this;
        }

        /**
         * @param destinationPhase Optional. The starting phase ID for the Rollout. If unspecified, the Rollout will start in the stable phase.
         * 
         * @return builder
         * 
         */
        public Builder destinationPhase(String destinationPhase) {
            return destinationPhase(Output.of(destinationPhase));
        }

        /**
         * @param disableRollbackIfRolloutPending Optional. If pending rollout exists on the target, the rollback operation will be aborted.
         * 
         * @return builder
         * 
         */
        public Builder disableRollbackIfRolloutPending(@Nullable Output<Boolean> disableRollbackIfRolloutPending) {
            $.disableRollbackIfRolloutPending = disableRollbackIfRolloutPending;
            return this;
        }

        /**
         * @param disableRollbackIfRolloutPending Optional. If pending rollout exists on the target, the rollback operation will be aborted.
         * 
         * @return builder
         * 
         */
        public Builder disableRollbackIfRolloutPending(Boolean disableRollbackIfRolloutPending) {
            return disableRollbackIfRolloutPending(Output.of(disableRollbackIfRolloutPending));
        }

        public AutomationRuleRepairRolloutRuleRepairPhaseRollbackArgs build() {
            return $;
        }
    }

}
