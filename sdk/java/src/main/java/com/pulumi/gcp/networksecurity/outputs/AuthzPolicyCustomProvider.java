// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyCustomProviderAuthzExtension;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyCustomProviderCloudIap;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthzPolicyCustomProvider {
    /**
     * @return Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthzPolicyCustomProviderAuthzExtension authzExtension;
    /**
     * @return Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthzPolicyCustomProviderCloudIap cloudIap;

    private AuthzPolicyCustomProvider() {}
    /**
     * @return Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
     * Structure is documented below.
     * 
     */
    public Optional<AuthzPolicyCustomProviderAuthzExtension> authzExtension() {
        return Optional.ofNullable(this.authzExtension);
    }
    /**
     * @return Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
     * Structure is documented below.
     * 
     */
    public Optional<AuthzPolicyCustomProviderCloudIap> cloudIap() {
        return Optional.ofNullable(this.cloudIap);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthzPolicyCustomProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AuthzPolicyCustomProviderAuthzExtension authzExtension;
        private @Nullable AuthzPolicyCustomProviderCloudIap cloudIap;
        public Builder() {}
        public Builder(AuthzPolicyCustomProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authzExtension = defaults.authzExtension;
    	      this.cloudIap = defaults.cloudIap;
        }

        @CustomType.Setter
        public Builder authzExtension(@Nullable AuthzPolicyCustomProviderAuthzExtension authzExtension) {

            this.authzExtension = authzExtension;
            return this;
        }
        @CustomType.Setter
        public Builder cloudIap(@Nullable AuthzPolicyCustomProviderCloudIap cloudIap) {

            this.cloudIap = cloudIap;
            return this;
        }
        public AuthzPolicyCustomProvider build() {
            final var _resultValue = new AuthzPolicyCustomProvider();
            _resultValue.authzExtension = authzExtension;
            _resultValue.cloudIap = cloudIap;
            return _resultValue;
        }
    }
}
