// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig {
    /**
     * @return The token size limit for each chunk.
     * Supported values: 100-500 (inclusive). Default value: 500.
     * 
     */
    private @Nullable Integer chunkSize;
    /**
     * @return Whether to include appending different levels of headings to chunks from the middle of the document to prevent context loss.
     * Default value: False.
     * 
     */
    private @Nullable Boolean includeAncestorHeadings;

    private DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig() {}
    /**
     * @return The token size limit for each chunk.
     * Supported values: 100-500 (inclusive). Default value: 500.
     * 
     */
    public Optional<Integer> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }
    /**
     * @return Whether to include appending different levels of headings to chunks from the middle of the document to prevent context loss.
     * Default value: False.
     * 
     */
    public Optional<Boolean> includeAncestorHeadings() {
        return Optional.ofNullable(this.includeAncestorHeadings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer chunkSize;
        private @Nullable Boolean includeAncestorHeadings;
        public Builder() {}
        public Builder(DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chunkSize = defaults.chunkSize;
    	      this.includeAncestorHeadings = defaults.includeAncestorHeadings;
        }

        @CustomType.Setter
        public Builder chunkSize(@Nullable Integer chunkSize) {

            this.chunkSize = chunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder includeAncestorHeadings(@Nullable Boolean includeAncestorHeadings) {

            this.includeAncestorHeadings = includeAncestorHeadings;
            return this;
        }
        public DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig build() {
            final var _resultValue = new DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig();
            _resultValue.chunkSize = chunkSize;
            _resultValue.includeAncestorHeadings = includeAncestorHeadings;
            return _resultValue;
        }
    }
}
