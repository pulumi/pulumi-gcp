// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NoteIamPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final NoteIamPolicyArgs Empty = new NoteIamPolicyArgs();

    @Import(name="note", required=true)
    private Output<String> note;

    public Output<String> note() {
        return this.note;
    }

    @Import(name="policyData", required=true)
    private Output<String> policyData;

    public Output<String> policyData() {
        return this.policyData;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private NoteIamPolicyArgs() {}

    private NoteIamPolicyArgs(NoteIamPolicyArgs $) {
        this.note = $.note;
        this.policyData = $.policyData;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NoteIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NoteIamPolicyArgs $;

        public Builder() {
            $ = new NoteIamPolicyArgs();
        }

        public Builder(NoteIamPolicyArgs defaults) {
            $ = new NoteIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder note(Output<String> note) {
            $.note = note;
            return this;
        }

        public Builder note(String note) {
            return note(Output.of(note));
        }

        public Builder policyData(Output<String> policyData) {
            $.policyData = policyData;
            return this;
        }

        public Builder policyData(String policyData) {
            return policyData(Output.of(policyData));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public NoteIamPolicyArgs build() {
            $.note = Objects.requireNonNull($.note, "expected parameter 'note' to be non-null");
            $.policyData = Objects.requireNonNull($.policyData, "expected parameter 'policyData' to be non-null");
            return $;
        }
    }

}
