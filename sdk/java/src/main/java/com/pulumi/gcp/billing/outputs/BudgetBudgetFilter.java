// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.billing.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BudgetBudgetFilter {
    /**
     * @return A set of subaccounts of the form billingAccounts/{account_id},
     * specifying that usage from only this set of subaccounts should
     * be included in the budget. If a subaccount is set to the name of
     * the parent account, usage from the parent account will be included.
     * If the field is omitted, the report will include usage from the parent
     * account and all subaccounts, if they exist.
     * 
     */
    private final @Nullable List<String> creditTypes;
    /**
     * @return Specifies how credits should be treated when determining spend
     * for threshold calculations.
     * Default value is `INCLUDE_ALL_CREDITS`.
     * Possible values are `INCLUDE_ALL_CREDITS`, `EXCLUDE_ALL_CREDITS`, and `INCLUDE_SPECIFIED_CREDITS`.
     * 
     */
    private final @Nullable String creditTypesTreatment;
    /**
     * @return A single label and value pair specifying that usage from only
     * this set of labeled resources should be included in the budget.
     * 
     */
    private final @Nullable Map<String,String> labels;
    /**
     * @return A set of projects of the form projects/{project_number},
     * specifying that usage from only this set of projects should be
     * included in the budget. If omitted, the report will include
     * all usage for the billing account, regardless of which project
     * the usage occurred on.
     * 
     */
    private final @Nullable List<String> projects;
    /**
     * @return A set of services of the form services/{service_id},
     * specifying that usage from only this set of services should be
     * included in the budget. If omitted, the report will include
     * usage for all the services. The service names are available
     * through the Catalog API:
     * https://cloud.google.com/billing/v1/how-tos/catalog-api.
     * 
     */
    private final @Nullable List<String> services;
    /**
     * @return A set of subaccounts of the form billingAccounts/{account_id},
     * specifying that usage from only this set of subaccounts should
     * be included in the budget. If a subaccount is set to the name of
     * the parent account, usage from the parent account will be included.
     * If the field is omitted, the report will include usage from the parent
     * account and all subaccounts, if they exist.
     * 
     */
    private final @Nullable List<String> subaccounts;

    @CustomType.Constructor
    private BudgetBudgetFilter(
        @CustomType.Parameter("creditTypes") @Nullable List<String> creditTypes,
        @CustomType.Parameter("creditTypesTreatment") @Nullable String creditTypesTreatment,
        @CustomType.Parameter("labels") @Nullable Map<String,String> labels,
        @CustomType.Parameter("projects") @Nullable List<String> projects,
        @CustomType.Parameter("services") @Nullable List<String> services,
        @CustomType.Parameter("subaccounts") @Nullable List<String> subaccounts) {
        this.creditTypes = creditTypes;
        this.creditTypesTreatment = creditTypesTreatment;
        this.labels = labels;
        this.projects = projects;
        this.services = services;
        this.subaccounts = subaccounts;
    }

    /**
     * @return A set of subaccounts of the form billingAccounts/{account_id},
     * specifying that usage from only this set of subaccounts should
     * be included in the budget. If a subaccount is set to the name of
     * the parent account, usage from the parent account will be included.
     * If the field is omitted, the report will include usage from the parent
     * account and all subaccounts, if they exist.
     * 
     */
    public List<String> creditTypes() {
        return this.creditTypes == null ? List.of() : this.creditTypes;
    }
    /**
     * @return Specifies how credits should be treated when determining spend
     * for threshold calculations.
     * Default value is `INCLUDE_ALL_CREDITS`.
     * Possible values are `INCLUDE_ALL_CREDITS`, `EXCLUDE_ALL_CREDITS`, and `INCLUDE_SPECIFIED_CREDITS`.
     * 
     */
    public Optional<String> creditTypesTreatment() {
        return Optional.ofNullable(this.creditTypesTreatment);
    }
    /**
     * @return A single label and value pair specifying that usage from only
     * this set of labeled resources should be included in the budget.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return A set of projects of the form projects/{project_number},
     * specifying that usage from only this set of projects should be
     * included in the budget. If omitted, the report will include
     * all usage for the billing account, regardless of which project
     * the usage occurred on.
     * 
     */
    public List<String> projects() {
        return this.projects == null ? List.of() : this.projects;
    }
    /**
     * @return A set of services of the form services/{service_id},
     * specifying that usage from only this set of services should be
     * included in the budget. If omitted, the report will include
     * usage for all the services. The service names are available
     * through the Catalog API:
     * https://cloud.google.com/billing/v1/how-tos/catalog-api.
     * 
     */
    public List<String> services() {
        return this.services == null ? List.of() : this.services;
    }
    /**
     * @return A set of subaccounts of the form billingAccounts/{account_id},
     * specifying that usage from only this set of subaccounts should
     * be included in the budget. If a subaccount is set to the name of
     * the parent account, usage from the parent account will be included.
     * If the field is omitted, the report will include usage from the parent
     * account and all subaccounts, if they exist.
     * 
     */
    public List<String> subaccounts() {
        return this.subaccounts == null ? List.of() : this.subaccounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetBudgetFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> creditTypes;
        private @Nullable String creditTypesTreatment;
        private @Nullable Map<String,String> labels;
        private @Nullable List<String> projects;
        private @Nullable List<String> services;
        private @Nullable List<String> subaccounts;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetBudgetFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creditTypes = defaults.creditTypes;
    	      this.creditTypesTreatment = defaults.creditTypesTreatment;
    	      this.labels = defaults.labels;
    	      this.projects = defaults.projects;
    	      this.services = defaults.services;
    	      this.subaccounts = defaults.subaccounts;
        }

        public Builder creditTypes(@Nullable List<String> creditTypes) {
            this.creditTypes = creditTypes;
            return this;
        }
        public Builder creditTypes(String... creditTypes) {
            return creditTypes(List.of(creditTypes));
        }
        public Builder creditTypesTreatment(@Nullable String creditTypesTreatment) {
            this.creditTypesTreatment = creditTypesTreatment;
            return this;
        }
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        public Builder projects(@Nullable List<String> projects) {
            this.projects = projects;
            return this;
        }
        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }
        public Builder services(@Nullable List<String> services) {
            this.services = services;
            return this;
        }
        public Builder services(String... services) {
            return services(List.of(services));
        }
        public Builder subaccounts(@Nullable List<String> subaccounts) {
            this.subaccounts = subaccounts;
            return this;
        }
        public Builder subaccounts(String... subaccounts) {
            return subaccounts(List.of(subaccounts));
        }        public BudgetBudgetFilter build() {
            return new BudgetBudgetFilter(creditTypes, creditTypesTreatment, labels, projects, services, subaccounts);
        }
    }
}
