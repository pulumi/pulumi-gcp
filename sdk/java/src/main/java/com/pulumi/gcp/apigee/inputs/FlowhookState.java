// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowhookState extends com.pulumi.resources.ResourceArgs {

    public static final FlowhookState Empty = new FlowhookState();

    /**
     * Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
     * 
     */
    @Import(name="continueOnError")
    private @Nullable Output<Boolean> continueOnError;

    /**
     * @return Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> continueOnError() {
        return Optional.ofNullable(this.continueOnError);
    }

    /**
     * Description of the flow hook.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the flow hook.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The resource ID of the environment.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The resource ID of the environment.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
     * 
     */
    @Import(name="flowHookPoint")
    private @Nullable Output<String> flowHookPoint;

    /**
     * @return Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
     * 
     */
    public Optional<Output<String>> flowHookPoint() {
        return Optional.ofNullable(this.flowHookPoint);
    }

    /**
     * The Apigee Organization associated with the environment
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the environment
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Id of the Sharedflow attaching to a flowhook point.
     * 
     */
    @Import(name="sharedflow")
    private @Nullable Output<String> sharedflow;

    /**
     * @return Id of the Sharedflow attaching to a flowhook point.
     * 
     */
    public Optional<Output<String>> sharedflow() {
        return Optional.ofNullable(this.sharedflow);
    }

    private FlowhookState() {}

    private FlowhookState(FlowhookState $) {
        this.continueOnError = $.continueOnError;
        this.description = $.description;
        this.environment = $.environment;
        this.flowHookPoint = $.flowHookPoint;
        this.orgId = $.orgId;
        this.sharedflow = $.sharedflow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowhookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowhookState $;

        public Builder() {
            $ = new FlowhookState();
        }

        public Builder(FlowhookState defaults) {
            $ = new FlowhookState(Objects.requireNonNull(defaults));
        }

        /**
         * @param continueOnError Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder continueOnError(@Nullable Output<Boolean> continueOnError) {
            $.continueOnError = continueOnError;
            return this;
        }

        /**
         * @param continueOnError Flag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder continueOnError(Boolean continueOnError) {
            return continueOnError(Output.of(continueOnError));
        }

        /**
         * @param description Description of the flow hook.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the flow hook.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environment The resource ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The resource ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param flowHookPoint Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
         * 
         * @return builder
         * 
         */
        public Builder flowHookPoint(@Nullable Output<String> flowHookPoint) {
            $.flowHookPoint = flowHookPoint;
            return this;
        }

        /**
         * @param flowHookPoint Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
         * 
         * @return builder
         * 
         */
        public Builder flowHookPoint(String flowHookPoint) {
            return flowHookPoint(Output.of(flowHookPoint));
        }

        /**
         * @param orgId The Apigee Organization associated with the environment
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the environment
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param sharedflow Id of the Sharedflow attaching to a flowhook point.
         * 
         * @return builder
         * 
         */
        public Builder sharedflow(@Nullable Output<String> sharedflow) {
            $.sharedflow = sharedflow;
            return this;
        }

        /**
         * @param sharedflow Id of the Sharedflow attaching to a flowhook point.
         * 
         * @return builder
         * 
         */
        public Builder sharedflow(String sharedflow) {
            return sharedflow(Output.of(sharedflow));
        }

        public FlowhookState build() {
            return $;
        }
    }

}
