// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppHostingBackendCodebase {
    /**
     * @return The resource name for the Developer Connect
     * [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
     * connected to this backend, in the format:
     * projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}
     * 
     */
    private String repository;
    /**
     * @return If `repository` is provided, the directory relative to the root of the
     * repository to use as the root for the deployed web app.
     * 
     */
    private @Nullable String rootDirectory;

    private AppHostingBackendCodebase() {}
    /**
     * @return The resource name for the Developer Connect
     * [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
     * connected to this backend, in the format:
     * projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}
     * 
     */
    public String repository() {
        return this.repository;
    }
    /**
     * @return If `repository` is provided, the directory relative to the root of the
     * repository to use as the root for the deployed web app.
     * 
     */
    public Optional<String> rootDirectory() {
        return Optional.ofNullable(this.rootDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppHostingBackendCodebase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String repository;
        private @Nullable String rootDirectory;
        public Builder() {}
        public Builder(AppHostingBackendCodebase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.repository = defaults.repository;
    	      this.rootDirectory = defaults.rootDirectory;
        }

        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("AppHostingBackendCodebase", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder rootDirectory(@Nullable String rootDirectory) {

            this.rootDirectory = rootDirectory;
            return this;
        }
        public AppHostingBackendCodebase build() {
            final var _resultValue = new AppHostingBackendCodebase();
            _resultValue.repository = repository;
            _resultValue.rootDirectory = rootDirectory;
            return _resultValue;
        }
    }
}
