// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securitycenter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2FolderMuteConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2FolderMuteConfigArgs Empty = new V2FolderMuteConfigArgs();

    /**
     * A description of the mute config.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the mute config.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     * The folder whose Cloud Security Command Center the Mute
     * Config lives in.
     * 
     */
    @Import(name="folder", required=true)
    private Output<String> folder;

    /**
     * @return The folder whose Cloud Security Command Center the Mute
     * Config lives in.
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }

    /**
     * location Id is provided by folder. If not provided, Use global as default.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return location Id is provided by folder. If not provided, Use global as default.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Unique identifier provided by the client within the parent scope.
     * 
     * ***
     * 
     */
    @Import(name="muteConfigId", required=true)
    private Output<String> muteConfigId;

    /**
     * @return Unique identifier provided by the client within the parent scope.
     * 
     * ***
     * 
     */
    public Output<String> muteConfigId() {
        return this.muteConfigId;
    }

    /**
     * The type of the mute config.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the mute config.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private V2FolderMuteConfigArgs() {}

    private V2FolderMuteConfigArgs(V2FolderMuteConfigArgs $) {
        this.description = $.description;
        this.filter = $.filter;
        this.folder = $.folder;
        this.location = $.location;
        this.muteConfigId = $.muteConfigId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2FolderMuteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2FolderMuteConfigArgs $;

        public Builder() {
            $ = new V2FolderMuteConfigArgs();
        }

        public Builder(V2FolderMuteConfigArgs defaults) {
            $ = new V2FolderMuteConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the mute config.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the mute config.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filter An expression that defines the filter to apply across create/update
         * events of findings. While creating a filter string, be mindful of
         * the scope in which the mute configuration is being created. E.g.,
         * If a filter contains project = X but is created under the
         * project = Y scope, it might not match any findings.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter An expression that defines the filter to apply across create/update
         * events of findings. While creating a filter string, be mindful of
         * the scope in which the mute configuration is being created. E.g.,
         * If a filter contains project = X but is created under the
         * project = Y scope, it might not match any findings.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param folder The folder whose Cloud Security Command Center the Mute
         * Config lives in.
         * 
         * @return builder
         * 
         */
        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder whose Cloud Security Command Center the Mute
         * Config lives in.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param location location Id is provided by folder. If not provided, Use global as default.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location location Id is provided by folder. If not provided, Use global as default.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param muteConfigId Unique identifier provided by the client within the parent scope.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder muteConfigId(Output<String> muteConfigId) {
            $.muteConfigId = muteConfigId;
            return this;
        }

        /**
         * @param muteConfigId Unique identifier provided by the client within the parent scope.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder muteConfigId(String muteConfigId) {
            return muteConfigId(Output.of(muteConfigId));
        }

        /**
         * @param type The type of the mute config.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the mute config.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public V2FolderMuteConfigArgs build() {
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("V2FolderMuteConfigArgs", "filter");
            }
            if ($.folder == null) {
                throw new MissingRequiredPropertyException("V2FolderMuteConfigArgs", "folder");
            }
            if ($.muteConfigId == null) {
                throw new MissingRequiredPropertyException("V2FolderMuteConfigArgs", "muteConfigId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("V2FolderMuteConfigArgs", "type");
            }
            return $;
        }
    }

}
