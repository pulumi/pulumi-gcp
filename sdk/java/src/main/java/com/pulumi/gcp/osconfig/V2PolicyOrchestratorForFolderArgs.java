// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestrationScopeArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderArgs Empty = new V2PolicyOrchestratorForFolderArgs();

    /**
     * Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestration_scope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestration_scope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Freeform text describing the purpose of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Freeform text describing the purpose of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The parent resource name in the form of `folders/{folder_id}/locations/global`.
     * 
     */
    @Import(name="folderId", required=true)
    private Output<String> folderId;

    /**
     * @return The parent resource name in the form of `folders/{folder_id}/locations/global`.
     * 
     */
    public Output<String> folderId() {
        return this.folderId;
    }

    /**
     * Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     * 
     */
    @Import(name="orchestratedResource", required=true)
    private Output<V2PolicyOrchestratorForFolderOrchestratedResourceArgs> orchestratedResource;

    /**
     * @return Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     * 
     */
    public Output<V2PolicyOrchestratorForFolderOrchestratedResourceArgs> orchestratedResource() {
        return this.orchestratedResource;
    }

    /**
     * Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     * 
     */
    @Import(name="orchestrationScope")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestrationScopeArgs> orchestrationScope;

    /**
     * @return Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestrationScopeArgs>> orchestrationScope() {
        return Optional.ofNullable(this.orchestrationScope);
    }

    /**
     * The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     * 
     */
    @Import(name="policyOrchestratorId", required=true)
    private Output<String> policyOrchestratorId;

    /**
     * @return The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     * 
     */
    public Output<String> policyOrchestratorId() {
        return this.policyOrchestratorId;
    }

    /**
     * State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private V2PolicyOrchestratorForFolderArgs() {}

    private V2PolicyOrchestratorForFolderArgs(V2PolicyOrchestratorForFolderArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.folderId = $.folderId;
        this.labels = $.labels;
        this.orchestratedResource = $.orchestratedResource;
        this.orchestrationScope = $.orchestrationScope;
        this.policyOrchestratorId = $.policyOrchestratorId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to be done by the orchestrator in
         * `projects/{project_id}/zones/{zone_id}` locations defined by the
         * `orchestration_scope`. Allowed values:
         * - `UPSERT` - Orchestrator will create or update target resources.
         * - `DELETE` - Orchestrator will delete target resources, if they exist
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to be done by the orchestrator in
         * `projects/{project_id}/zones/{zone_id}` locations defined by the
         * `orchestration_scope`. Allowed values:
         * - `UPSERT` - Orchestrator will create or update target resources.
         * - `DELETE` - Orchestrator will delete target resources, if they exist
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description Freeform text describing the purpose of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Freeform text describing the purpose of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderId The parent resource name in the form of `folders/{folder_id}/locations/global`.
         * 
         * @return builder
         * 
         */
        public Builder folderId(Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId The parent resource name in the form of `folders/{folder_id}/locations/global`.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param labels Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param orchestratedResource Represents a resource that is being orchestrated by the policy orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestratedResource(Output<V2PolicyOrchestratorForFolderOrchestratedResourceArgs> orchestratedResource) {
            $.orchestratedResource = orchestratedResource;
            return this;
        }

        /**
         * @param orchestratedResource Represents a resource that is being orchestrated by the policy orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestratedResource(V2PolicyOrchestratorForFolderOrchestratedResourceArgs orchestratedResource) {
            return orchestratedResource(Output.of(orchestratedResource));
        }

        /**
         * @param orchestrationScope Defines a set of selectors which drive which resources are in scope of policy
         * orchestration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationScope(@Nullable Output<V2PolicyOrchestratorForFolderOrchestrationScopeArgs> orchestrationScope) {
            $.orchestrationScope = orchestrationScope;
            return this;
        }

        /**
         * @param orchestrationScope Defines a set of selectors which drive which resources are in scope of policy
         * orchestration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orchestrationScope(V2PolicyOrchestratorForFolderOrchestrationScopeArgs orchestrationScope) {
            return orchestrationScope(Output.of(orchestrationScope));
        }

        /**
         * @param policyOrchestratorId The logical identifier of the policy orchestrator, with the following
         * restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the parent.
         * 
         * @return builder
         * 
         */
        public Builder policyOrchestratorId(Output<String> policyOrchestratorId) {
            $.policyOrchestratorId = policyOrchestratorId;
            return this;
        }

        /**
         * @param policyOrchestratorId The logical identifier of the policy orchestrator, with the following
         * restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the parent.
         * 
         * @return builder
         * 
         */
        public Builder policyOrchestratorId(String policyOrchestratorId) {
            return policyOrchestratorId(Output.of(policyOrchestratorId));
        }

        /**
         * @param state State of the orchestrator. Can be updated to change orchestrator behaviour.
         * Allowed values:
         * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
         * - `STOPPED` - orchestrator won&#39;t make any changes.
         *   Note: There might be more states added in the future. We use string here
         *   instead of an enum, to avoid the need of propagating new states to all the
         *   client code.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the orchestrator. Can be updated to change orchestrator behaviour.
         * Allowed values:
         * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
         * - `STOPPED` - orchestrator won&#39;t make any changes.
         *   Note: There might be more states added in the future. We use string here
         *   instead of an enum, to avoid the need of propagating new states to all the
         *   client code.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public V2PolicyOrchestratorForFolderArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderArgs", "action");
            }
            if ($.folderId == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderArgs", "folderId");
            }
            if ($.orchestratedResource == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderArgs", "orchestratedResource");
            }
            if ($.policyOrchestratorId == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderArgs", "policyOrchestratorId");
            }
            return $;
        }
    }

}
