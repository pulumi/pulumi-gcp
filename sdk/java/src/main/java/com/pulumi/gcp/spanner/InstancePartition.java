// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.spanner;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.spanner.InstancePartitionArgs;
import com.pulumi.gcp.spanner.inputs.InstancePartitionState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Cloud Spanner instance partition is a unit of Cloud Spanner database capacity
 * that can be used to partition data and processing capacity within an instance.
 * 
 * To get more information about InstancePartition, see:
 * 
 * * [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.instancePartitions)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/spanner/docs/geo-partitioning)
 * 
 * ## Example Usage
 * 
 * ### Spanner Instance Partition Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.spanner.Instance;
 * import com.pulumi.gcp.spanner.InstanceArgs;
 * import com.pulumi.gcp.spanner.InstancePartition;
 * import com.pulumi.gcp.spanner.InstancePartitionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new Instance("main", InstanceArgs.builder()
 *             .name("test-instance")
 *             .config("nam6")
 *             .displayName("main-instance")
 *             .numNodes(1)
 *             .edition("ENTERPRISE_PLUS")
 *             .build());
 * 
 *         var partition = new InstancePartition("partition", InstancePartitionArgs.builder()
 *             .name("test-partition")
 *             .instance(main.name())
 *             .config("nam8")
 *             .displayName("test-spanner-partition")
 *             .nodeCount(1)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * InstancePartition can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/instances/{{instance}}/instancePartitions/{{name}}`
 * 
 * * `{{project}}/{{instance}}/{{name}}`
 * 
 * * `{{instance}}/{{name}}`
 * 
 * When using the `pulumi import` command, InstancePartition can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:spanner/instancePartition:InstancePartition default projects/{{project}}/instances/{{instance}}/instancePartitions/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:spanner/instancePartition:InstancePartition default {{project}}/{{instance}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:spanner/instancePartition:InstancePartition default {{instance}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:spanner/instancePartition:InstancePartition")
public class InstancePartition extends com.pulumi.resources.CustomResource {
    /**
     * The name of the instance partition&#39;s configuration (similar to a region) which
     * defines the geographic placement and replication of data in this instance partition.
     * 
     */
    @Export(name="config", refs={String.class}, tree="[0]")
    private Output<String> config;

    /**
     * @return The name of the instance partition&#39;s configuration (similar to a region) which
     * defines the geographic placement and replication of data in this instance partition.
     * 
     */
    public Output<String> config() {
        return this.config;
    }
    /**
     * The descriptive name for this instance partition as it appears in UIs.
     * Must be unique per project and between 4 and 30 characters in length.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The descriptive name for this instance partition as it appears in UIs.
     * Must be unique per project and between 4 and 30 characters in length.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The instance to create the instance partition in.
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output<String> instance;

    /**
     * @return The instance to create the instance partition in.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }
    /**
     * A unique identifier for the instance partition, which cannot be changed after
     * the instance partition is created. The name must be between 2 and 64 characters
     * and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A unique identifier for the instance partition, which cannot be changed after
     * the instance partition is created. The name must be between 2 and 64 characters
     * and match the regular expression [a-z][a-z0-9\\-]{0,61}[a-z0-9].
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The number of nodes allocated to this instance partition. One node equals
     * 1000 processing units. Exactly one of either node_count or processing_units
     * must be present.
     * 
     */
    @Export(name="nodeCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> nodeCount;

    /**
     * @return The number of nodes allocated to this instance partition. One node equals
     * 1000 processing units. Exactly one of either node_count or processing_units
     * must be present.
     * 
     */
    public Output<Optional<Integer>> nodeCount() {
        return Codegen.optional(this.nodeCount);
    }
    /**
     * The number of processing units allocated to this instance partition.
     * Exactly one of either node_count or processing_units must be present.
     * 
     */
    @Export(name="processingUnits", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> processingUnits;

    /**
     * @return The number of processing units allocated to this instance partition.
     * Exactly one of either node_count or processing_units must be present.
     * 
     */
    public Output<Optional<Integer>> processingUnits() {
        return Codegen.optional(this.processingUnits);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The current instance partition state. Possible values are:
     * CREATING: The instance partition is being created. Resources are being
     * allocated for the instance partition.
     * READY: The instance partition has been allocated resources and is ready for use.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current instance partition state. Possible values are:
     * CREATING: The instance partition is being created. Resources are being
     * allocated for the instance partition.
     * READY: The instance partition has been allocated resources and is ready for use.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InstancePartition(java.lang.String name) {
        this(name, InstancePartitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InstancePartition(java.lang.String name, InstancePartitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InstancePartition(java.lang.String name, InstancePartitionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:spanner/instancePartition:InstancePartition", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InstancePartition(java.lang.String name, Output<java.lang.String> id, @Nullable InstancePartitionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:spanner/instancePartition:InstancePartition", name, state, makeResourceOptions(options, id), false);
    }

    private static InstancePartitionArgs makeArgs(InstancePartitionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstancePartitionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InstancePartition get(java.lang.String name, Output<java.lang.String> id, @Nullable InstancePartitionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InstancePartition(name, id, state, options);
    }
}
