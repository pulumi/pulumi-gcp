// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class ServiceLbPoliciesFailoverConfig {
    /**
     * @return Optional. The percentage threshold that a load balancer will begin to send traffic to failover backends. If the percentage of endpoints in a MIG/NEG is smaller than this value, traffic would be sent to failover backends if possible. This field should be set to a value between 1 and 99. The default value is 50 for Global external HTTP(S) load balancer (classic) and Proxyless service mesh, and 70 for others.
     * 
     */
    private Integer failoverHealthThreshold;

    private ServiceLbPoliciesFailoverConfig() {}
    /**
     * @return Optional. The percentage threshold that a load balancer will begin to send traffic to failover backends. If the percentage of endpoints in a MIG/NEG is smaller than this value, traffic would be sent to failover backends if possible. This field should be set to a value between 1 and 99. The default value is 50 for Global external HTTP(S) load balancer (classic) and Proxyless service mesh, and 70 for others.
     * 
     */
    public Integer failoverHealthThreshold() {
        return this.failoverHealthThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceLbPoliciesFailoverConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer failoverHealthThreshold;
        public Builder() {}
        public Builder(ServiceLbPoliciesFailoverConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failoverHealthThreshold = defaults.failoverHealthThreshold;
        }

        @CustomType.Setter
        public Builder failoverHealthThreshold(Integer failoverHealthThreshold) {
            if (failoverHealthThreshold == null) {
              throw new MissingRequiredPropertyException("ServiceLbPoliciesFailoverConfig", "failoverHealthThreshold");
            }
            this.failoverHealthThreshold = failoverHealthThreshold;
            return this;
        }
        public ServiceLbPoliciesFailoverConfig build() {
            final var _resultValue = new ServiceLbPoliciesFailoverConfig();
            _resultValue.failoverHealthThreshold = failoverHealthThreshold;
            return _resultValue;
        }
    }
}
