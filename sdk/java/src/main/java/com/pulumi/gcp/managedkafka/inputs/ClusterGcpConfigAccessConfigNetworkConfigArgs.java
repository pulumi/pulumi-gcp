// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ClusterGcpConfigAccessConfigNetworkConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterGcpConfigAccessConfigNetworkConfigArgs Empty = new ClusterGcpConfigAccessConfigNetworkConfigArgs();

    /**
     * Name of the VPC subnet from which the cluster is accessible. Both broker and bootstrap server IP addresses and DNS entries are automatically created in the subnet. The subnet must be located in the same region as the cluster. The project may differ. A minimum of 1 subnet is required. A maximum of 10 subnets can be specified. The name of the subnet must be in the format `projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET`.
     * 
     */
    @Import(name="subnet", required=true)
    private Output<String> subnet;

    /**
     * @return Name of the VPC subnet from which the cluster is accessible. Both broker and bootstrap server IP addresses and DNS entries are automatically created in the subnet. The subnet must be located in the same region as the cluster. The project may differ. A minimum of 1 subnet is required. A maximum of 10 subnets can be specified. The name of the subnet must be in the format `projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET`.
     * 
     */
    public Output<String> subnet() {
        return this.subnet;
    }

    private ClusterGcpConfigAccessConfigNetworkConfigArgs() {}

    private ClusterGcpConfigAccessConfigNetworkConfigArgs(ClusterGcpConfigAccessConfigNetworkConfigArgs $) {
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterGcpConfigAccessConfigNetworkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterGcpConfigAccessConfigNetworkConfigArgs $;

        public Builder() {
            $ = new ClusterGcpConfigAccessConfigNetworkConfigArgs();
        }

        public Builder(ClusterGcpConfigAccessConfigNetworkConfigArgs defaults) {
            $ = new ClusterGcpConfigAccessConfigNetworkConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param subnet Name of the VPC subnet from which the cluster is accessible. Both broker and bootstrap server IP addresses and DNS entries are automatically created in the subnet. The subnet must be located in the same region as the cluster. The project may differ. A minimum of 1 subnet is required. A maximum of 10 subnets can be specified. The name of the subnet must be in the format `projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET`.
         * 
         * @return builder
         * 
         */
        public Builder subnet(Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet Name of the VPC subnet from which the cluster is accessible. Both broker and bootstrap server IP addresses and DNS entries are automatically created in the subnet. The subnet must be located in the same region as the cluster. The project may differ. A minimum of 1 subnet is required. A maximum of 10 subnets can be specified. The name of the subnet must be in the format `projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET`.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public ClusterGcpConfigAccessConfigNetworkConfigArgs build() {
            if ($.subnet == null) {
                throw new MissingRequiredPropertyException("ClusterGcpConfigAccessConfigNetworkConfigArgs", "subnet");
            }
            return $;
        }
    }

}
