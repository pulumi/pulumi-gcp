// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionCorsPolicyArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionDestinationArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionFaultInjectionPolicyArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRedirectArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestHeaderModifierArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestMirrorPolicyArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionResponseHeaderModifierArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRetryPolicyArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionUrlRewriteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRouteRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteRuleActionArgs Empty = new HttpRouteRuleActionArgs();

    /**
     * The specification for allowing client side cross-origin requests.
     * Structure is documented below.
     * 
     */
    @Import(name="corsPolicy")
    private @Nullable Output<HttpRouteRuleActionCorsPolicyArgs> corsPolicy;

    /**
     * @return The specification for allowing client side cross-origin requests.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionCorsPolicyArgs>> corsPolicy() {
        return Optional.ofNullable(this.corsPolicy);
    }

    /**
     * The destination to which traffic should be forwarded.
     * Structure is documented below.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<HttpRouteRuleActionDestinationArgs>> destinations;

    /**
     * @return The destination to which traffic should be forwarded.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HttpRouteRuleActionDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
     * Structure is documented below.
     * 
     */
    @Import(name="faultInjectionPolicy")
    private @Nullable Output<HttpRouteRuleActionFaultInjectionPolicyArgs> faultInjectionPolicy;

    /**
     * @return The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionFaultInjectionPolicyArgs>> faultInjectionPolicy() {
        return Optional.ofNullable(this.faultInjectionPolicy);
    }

    /**
     * If set, the request is directed as configured by this field.
     * Structure is documented below.
     * 
     */
    @Import(name="redirect")
    private @Nullable Output<HttpRouteRuleActionRedirectArgs> redirect;

    /**
     * @return If set, the request is directed as configured by this field.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionRedirectArgs>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * Structure is documented below.
     * 
     */
    @Import(name="requestHeaderModifier")
    private @Nullable Output<HttpRouteRuleActionRequestHeaderModifierArgs> requestHeaderModifier;

    /**
     * @return The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionRequestHeaderModifierArgs>> requestHeaderModifier() {
        return Optional.ofNullable(this.requestHeaderModifier);
    }

    /**
     * Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
     * Structure is documented below.
     * 
     */
    @Import(name="requestMirrorPolicy")
    private @Nullable Output<HttpRouteRuleActionRequestMirrorPolicyArgs> requestMirrorPolicy;

    /**
     * @return Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionRequestMirrorPolicyArgs>> requestMirrorPolicy() {
        return Optional.ofNullable(this.requestMirrorPolicy);
    }

    /**
     * The specification for modifying the headers of a response prior to sending the response back to the client.
     * Structure is documented below.
     * 
     */
    @Import(name="responseHeaderModifier")
    private @Nullable Output<HttpRouteRuleActionResponseHeaderModifierArgs> responseHeaderModifier;

    /**
     * @return The specification for modifying the headers of a response prior to sending the response back to the client.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionResponseHeaderModifierArgs>> responseHeaderModifier() {
        return Optional.ofNullable(this.responseHeaderModifier);
    }

    /**
     * Specifies the retry policy associated with this route.
     * Structure is documented below.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<HttpRouteRuleActionRetryPolicyArgs> retryPolicy;

    /**
     * @return Specifies the retry policy associated with this route.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionRetryPolicyArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * Specifies the timeout for selected route.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Specifies the timeout for selected route.
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The specification for rewrite URL before forwarding requests to the destination.
     * Structure is documented below.
     * 
     */
    @Import(name="urlRewrite")
    private @Nullable Output<HttpRouteRuleActionUrlRewriteArgs> urlRewrite;

    /**
     * @return The specification for rewrite URL before forwarding requests to the destination.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HttpRouteRuleActionUrlRewriteArgs>> urlRewrite() {
        return Optional.ofNullable(this.urlRewrite);
    }

    private HttpRouteRuleActionArgs() {}

    private HttpRouteRuleActionArgs(HttpRouteRuleActionArgs $) {
        this.corsPolicy = $.corsPolicy;
        this.destinations = $.destinations;
        this.faultInjectionPolicy = $.faultInjectionPolicy;
        this.redirect = $.redirect;
        this.requestHeaderModifier = $.requestHeaderModifier;
        this.requestMirrorPolicy = $.requestMirrorPolicy;
        this.responseHeaderModifier = $.responseHeaderModifier;
        this.retryPolicy = $.retryPolicy;
        this.timeout = $.timeout;
        this.urlRewrite = $.urlRewrite;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRuleActionArgs $;

        public Builder() {
            $ = new HttpRouteRuleActionArgs();
        }

        public Builder(HttpRouteRuleActionArgs defaults) {
            $ = new HttpRouteRuleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param corsPolicy The specification for allowing client side cross-origin requests.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder corsPolicy(@Nullable Output<HttpRouteRuleActionCorsPolicyArgs> corsPolicy) {
            $.corsPolicy = corsPolicy;
            return this;
        }

        /**
         * @param corsPolicy The specification for allowing client side cross-origin requests.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder corsPolicy(HttpRouteRuleActionCorsPolicyArgs corsPolicy) {
            return corsPolicy(Output.of(corsPolicy));
        }

        /**
         * @param destinations The destination to which traffic should be forwarded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<HttpRouteRuleActionDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations The destination to which traffic should be forwarded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<HttpRouteRuleActionDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations The destination to which traffic should be forwarded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinations(HttpRouteRuleActionDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param faultInjectionPolicy The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder faultInjectionPolicy(@Nullable Output<HttpRouteRuleActionFaultInjectionPolicyArgs> faultInjectionPolicy) {
            $.faultInjectionPolicy = faultInjectionPolicy;
            return this;
        }

        /**
         * @param faultInjectionPolicy The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder faultInjectionPolicy(HttpRouteRuleActionFaultInjectionPolicyArgs faultInjectionPolicy) {
            return faultInjectionPolicy(Output.of(faultInjectionPolicy));
        }

        /**
         * @param redirect If set, the request is directed as configured by this field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable Output<HttpRouteRuleActionRedirectArgs> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect If set, the request is directed as configured by this field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redirect(HttpRouteRuleActionRedirectArgs redirect) {
            return redirect(Output.of(redirect));
        }

        /**
         * @param requestHeaderModifier The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifier(@Nullable Output<HttpRouteRuleActionRequestHeaderModifierArgs> requestHeaderModifier) {
            $.requestHeaderModifier = requestHeaderModifier;
            return this;
        }

        /**
         * @param requestHeaderModifier The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderModifier(HttpRouteRuleActionRequestHeaderModifierArgs requestHeaderModifier) {
            return requestHeaderModifier(Output.of(requestHeaderModifier));
        }

        /**
         * @param requestMirrorPolicy Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestMirrorPolicy(@Nullable Output<HttpRouteRuleActionRequestMirrorPolicyArgs> requestMirrorPolicy) {
            $.requestMirrorPolicy = requestMirrorPolicy;
            return this;
        }

        /**
         * @param requestMirrorPolicy Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestMirrorPolicy(HttpRouteRuleActionRequestMirrorPolicyArgs requestMirrorPolicy) {
            return requestMirrorPolicy(Output.of(requestMirrorPolicy));
        }

        /**
         * @param responseHeaderModifier The specification for modifying the headers of a response prior to sending the response back to the client.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderModifier(@Nullable Output<HttpRouteRuleActionResponseHeaderModifierArgs> responseHeaderModifier) {
            $.responseHeaderModifier = responseHeaderModifier;
            return this;
        }

        /**
         * @param responseHeaderModifier The specification for modifying the headers of a response prior to sending the response back to the client.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderModifier(HttpRouteRuleActionResponseHeaderModifierArgs responseHeaderModifier) {
            return responseHeaderModifier(Output.of(responseHeaderModifier));
        }

        /**
         * @param retryPolicy Specifies the retry policy associated with this route.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(@Nullable Output<HttpRouteRuleActionRetryPolicyArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        /**
         * @param retryPolicy Specifies the retry policy associated with this route.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(HttpRouteRuleActionRetryPolicyArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        /**
         * @param timeout Specifies the timeout for selected route.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Specifies the timeout for selected route.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param urlRewrite The specification for rewrite URL before forwarding requests to the destination.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder urlRewrite(@Nullable Output<HttpRouteRuleActionUrlRewriteArgs> urlRewrite) {
            $.urlRewrite = urlRewrite;
            return this;
        }

        /**
         * @param urlRewrite The specification for rewrite URL before forwarding requests to the destination.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder urlRewrite(HttpRouteRuleActionUrlRewriteArgs urlRewrite) {
            return urlRewrite(Output.of(urlRewrite));
        }

        public HttpRouteRuleActionArgs build() {
            return $;
        }
    }

}
