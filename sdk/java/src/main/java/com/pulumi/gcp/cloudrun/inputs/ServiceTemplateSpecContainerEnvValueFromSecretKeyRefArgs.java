// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs Empty = new ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs();

    /**
     * A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest
     * version or an integer for a specific version.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest
     * version or an integer for a specific version.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project.
     * If the secret is in another project, you must define an alias.
     * An alias definition has the form: :projects/{project-id|project-number}/secrets/.
     * If multiple alias definitions are needed, they must be separated by commas.
     * The alias definitions must be set on the run.googleapis.com/secrets annotation.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project.
     * If the secret is in another project, you must define an alias.
     * An alias definition has the form: :projects/{project-id|project-number}/secrets/.
     * If multiple alias definitions are needed, they must be separated by commas.
     * The alias definitions must be set on the run.googleapis.com/secrets annotation.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs() {}

    private ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs(ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs $) {
        this.key = $.key;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs $;

        public Builder() {
            $ = new ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs();
        }

        public Builder(ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs defaults) {
            $ = new ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest
         * version or an integer for a specific version.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key A Cloud Secret Manager secret version. Must be &#39;latest&#39; for the latest
         * version or an integer for a specific version.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project.
         * If the secret is in another project, you must define an alias.
         * An alias definition has the form: :projects/{project-id|project-number}/secrets/.
         * If multiple alias definitions are needed, they must be separated by commas.
         * The alias definitions must be set on the run.googleapis.com/secrets annotation.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project.
         * If the secret is in another project, you must define an alias.
         * An alias definition has the form: :projects/{project-id|project-number}/secrets/.
         * If multiple alias definitions are needed, they must be separated by commas.
         * The alias definitions must be set on the run.googleapis.com/secrets annotation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
