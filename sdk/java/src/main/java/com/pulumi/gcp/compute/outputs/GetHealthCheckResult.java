// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetHealthCheckGrpcHealthCheck;
import com.pulumi.gcp.compute.outputs.GetHealthCheckGrpcTlsHealthCheck;
import com.pulumi.gcp.compute.outputs.GetHealthCheckHttp2HealthCheck;
import com.pulumi.gcp.compute.outputs.GetHealthCheckHttpHealthCheck;
import com.pulumi.gcp.compute.outputs.GetHealthCheckHttpsHealthCheck;
import com.pulumi.gcp.compute.outputs.GetHealthCheckLogConfig;
import com.pulumi.gcp.compute.outputs.GetHealthCheckSslHealthCheck;
import com.pulumi.gcp.compute.outputs.GetHealthCheckTcpHealthCheck;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHealthCheckResult {
    private Integer checkIntervalSec;
    private String creationTimestamp;
    private String description;
    private List<GetHealthCheckGrpcHealthCheck> grpcHealthChecks;
    private List<GetHealthCheckGrpcTlsHealthCheck> grpcTlsHealthChecks;
    private Integer healthyThreshold;
    private List<GetHealthCheckHttp2HealthCheck> http2HealthChecks;
    private List<GetHealthCheckHttpHealthCheck> httpHealthChecks;
    private List<GetHealthCheckHttpsHealthCheck> httpsHealthChecks;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetHealthCheckLogConfig> logConfigs;
    private String name;
    private @Nullable String project;
    private String selfLink;
    private List<String> sourceRegions;
    private List<GetHealthCheckSslHealthCheck> sslHealthChecks;
    private List<GetHealthCheckTcpHealthCheck> tcpHealthChecks;
    private Integer timeoutSec;
    private String type;
    private Integer unhealthyThreshold;

    private GetHealthCheckResult() {}
    public Integer checkIntervalSec() {
        return this.checkIntervalSec;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public List<GetHealthCheckGrpcHealthCheck> grpcHealthChecks() {
        return this.grpcHealthChecks;
    }
    public List<GetHealthCheckGrpcTlsHealthCheck> grpcTlsHealthChecks() {
        return this.grpcTlsHealthChecks;
    }
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    public List<GetHealthCheckHttp2HealthCheck> http2HealthChecks() {
        return this.http2HealthChecks;
    }
    public List<GetHealthCheckHttpHealthCheck> httpHealthChecks() {
        return this.httpHealthChecks;
    }
    public List<GetHealthCheckHttpsHealthCheck> httpsHealthChecks() {
        return this.httpsHealthChecks;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetHealthCheckLogConfig> logConfigs() {
        return this.logConfigs;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<String> sourceRegions() {
        return this.sourceRegions;
    }
    public List<GetHealthCheckSslHealthCheck> sslHealthChecks() {
        return this.sslHealthChecks;
    }
    public List<GetHealthCheckTcpHealthCheck> tcpHealthChecks() {
        return this.tcpHealthChecks;
    }
    public Integer timeoutSec() {
        return this.timeoutSec;
    }
    public String type() {
        return this.type;
    }
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHealthCheckResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer checkIntervalSec;
        private String creationTimestamp;
        private String description;
        private List<GetHealthCheckGrpcHealthCheck> grpcHealthChecks;
        private List<GetHealthCheckGrpcTlsHealthCheck> grpcTlsHealthChecks;
        private Integer healthyThreshold;
        private List<GetHealthCheckHttp2HealthCheck> http2HealthChecks;
        private List<GetHealthCheckHttpHealthCheck> httpHealthChecks;
        private List<GetHealthCheckHttpsHealthCheck> httpsHealthChecks;
        private String id;
        private List<GetHealthCheckLogConfig> logConfigs;
        private String name;
        private @Nullable String project;
        private String selfLink;
        private List<String> sourceRegions;
        private List<GetHealthCheckSslHealthCheck> sslHealthChecks;
        private List<GetHealthCheckTcpHealthCheck> tcpHealthChecks;
        private Integer timeoutSec;
        private String type;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(GetHealthCheckResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkIntervalSec = defaults.checkIntervalSec;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.grpcHealthChecks = defaults.grpcHealthChecks;
    	      this.grpcTlsHealthChecks = defaults.grpcTlsHealthChecks;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.http2HealthChecks = defaults.http2HealthChecks;
    	      this.httpHealthChecks = defaults.httpHealthChecks;
    	      this.httpsHealthChecks = defaults.httpsHealthChecks;
    	      this.id = defaults.id;
    	      this.logConfigs = defaults.logConfigs;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.sourceRegions = defaults.sourceRegions;
    	      this.sslHealthChecks = defaults.sslHealthChecks;
    	      this.tcpHealthChecks = defaults.tcpHealthChecks;
    	      this.timeoutSec = defaults.timeoutSec;
    	      this.type = defaults.type;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder checkIntervalSec(Integer checkIntervalSec) {
            if (checkIntervalSec == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "checkIntervalSec");
            }
            this.checkIntervalSec = checkIntervalSec;
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder grpcHealthChecks(List<GetHealthCheckGrpcHealthCheck> grpcHealthChecks) {
            if (grpcHealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "grpcHealthChecks");
            }
            this.grpcHealthChecks = grpcHealthChecks;
            return this;
        }
        public Builder grpcHealthChecks(GetHealthCheckGrpcHealthCheck... grpcHealthChecks) {
            return grpcHealthChecks(List.of(grpcHealthChecks));
        }
        @CustomType.Setter
        public Builder grpcTlsHealthChecks(List<GetHealthCheckGrpcTlsHealthCheck> grpcTlsHealthChecks) {
            if (grpcTlsHealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "grpcTlsHealthChecks");
            }
            this.grpcTlsHealthChecks = grpcTlsHealthChecks;
            return this;
        }
        public Builder grpcTlsHealthChecks(GetHealthCheckGrpcTlsHealthCheck... grpcTlsHealthChecks) {
            return grpcTlsHealthChecks(List.of(grpcTlsHealthChecks));
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            if (healthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "healthyThreshold");
            }
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder http2HealthChecks(List<GetHealthCheckHttp2HealthCheck> http2HealthChecks) {
            if (http2HealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "http2HealthChecks");
            }
            this.http2HealthChecks = http2HealthChecks;
            return this;
        }
        public Builder http2HealthChecks(GetHealthCheckHttp2HealthCheck... http2HealthChecks) {
            return http2HealthChecks(List.of(http2HealthChecks));
        }
        @CustomType.Setter
        public Builder httpHealthChecks(List<GetHealthCheckHttpHealthCheck> httpHealthChecks) {
            if (httpHealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "httpHealthChecks");
            }
            this.httpHealthChecks = httpHealthChecks;
            return this;
        }
        public Builder httpHealthChecks(GetHealthCheckHttpHealthCheck... httpHealthChecks) {
            return httpHealthChecks(List.of(httpHealthChecks));
        }
        @CustomType.Setter
        public Builder httpsHealthChecks(List<GetHealthCheckHttpsHealthCheck> httpsHealthChecks) {
            if (httpsHealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "httpsHealthChecks");
            }
            this.httpsHealthChecks = httpsHealthChecks;
            return this;
        }
        public Builder httpsHealthChecks(GetHealthCheckHttpsHealthCheck... httpsHealthChecks) {
            return httpsHealthChecks(List.of(httpsHealthChecks));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logConfigs(List<GetHealthCheckLogConfig> logConfigs) {
            if (logConfigs == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "logConfigs");
            }
            this.logConfigs = logConfigs;
            return this;
        }
        public Builder logConfigs(GetHealthCheckLogConfig... logConfigs) {
            return logConfigs(List.of(logConfigs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder sourceRegions(List<String> sourceRegions) {
            if (sourceRegions == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "sourceRegions");
            }
            this.sourceRegions = sourceRegions;
            return this;
        }
        public Builder sourceRegions(String... sourceRegions) {
            return sourceRegions(List.of(sourceRegions));
        }
        @CustomType.Setter
        public Builder sslHealthChecks(List<GetHealthCheckSslHealthCheck> sslHealthChecks) {
            if (sslHealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "sslHealthChecks");
            }
            this.sslHealthChecks = sslHealthChecks;
            return this;
        }
        public Builder sslHealthChecks(GetHealthCheckSslHealthCheck... sslHealthChecks) {
            return sslHealthChecks(List.of(sslHealthChecks));
        }
        @CustomType.Setter
        public Builder tcpHealthChecks(List<GetHealthCheckTcpHealthCheck> tcpHealthChecks) {
            if (tcpHealthChecks == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "tcpHealthChecks");
            }
            this.tcpHealthChecks = tcpHealthChecks;
            return this;
        }
        public Builder tcpHealthChecks(GetHealthCheckTcpHealthCheck... tcpHealthChecks) {
            return tcpHealthChecks(List.of(tcpHealthChecks));
        }
        @CustomType.Setter
        public Builder timeoutSec(Integer timeoutSec) {
            if (timeoutSec == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "timeoutSec");
            }
            this.timeoutSec = timeoutSec;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckResult", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public GetHealthCheckResult build() {
            final var _resultValue = new GetHealthCheckResult();
            _resultValue.checkIntervalSec = checkIntervalSec;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.grpcHealthChecks = grpcHealthChecks;
            _resultValue.grpcTlsHealthChecks = grpcTlsHealthChecks;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.http2HealthChecks = http2HealthChecks;
            _resultValue.httpHealthChecks = httpHealthChecks;
            _resultValue.httpsHealthChecks = httpsHealthChecks;
            _resultValue.id = id;
            _resultValue.logConfigs = logConfigs;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.selfLink = selfLink;
            _resultValue.sourceRegions = sourceRegions;
            _resultValue.sslHealthChecks = sslHealthChecks;
            _resultValue.tcpHealthChecks = tcpHealthChecks;
            _resultValue.timeoutSec = timeoutSec;
            _resultValue.type = type;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
