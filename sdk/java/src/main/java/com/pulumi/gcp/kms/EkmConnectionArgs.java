// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.inputs.EkmConnectionServiceResolverArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EkmConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EkmConnectionArgs Empty = new EkmConnectionArgs();

    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
     * 
     */
    @Import(name="cryptoSpacePath")
    private @Nullable Output<String> cryptoSpacePath;

    /**
     * @return Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
     * 
     */
    public Optional<Output<String>> cryptoSpacePath() {
        return Optional.ofNullable(this.cryptoSpacePath);
    }

    /**
     * Optional. Etag of the currently stored EkmConnection.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Optional. Etag of the currently stored EkmConnection.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
     * Default value is `MANUAL`.
     * Possible values are: `MANUAL`, `CLOUD_KMS`.
     * 
     */
    @Import(name="keyManagementMode")
    private @Nullable Output<String> keyManagementMode;

    /**
     * @return Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
     * Default value is `MANUAL`.
     * Possible values are: `MANUAL`, `CLOUD_KMS`.
     * 
     */
    public Optional<Output<String>> keyManagementMode() {
        return Optional.ofNullable(this.keyManagementMode);
    }

    /**
     * The location for the EkmConnection.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the EkmConnection.
     * A full list of valid locations can be found by running `gcloud kms locations list`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The resource name for the EkmConnection.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name for the EkmConnection.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
     * Structure is documented below.
     * 
     */
    @Import(name="serviceResolvers", required=true)
    private Output<List<EkmConnectionServiceResolverArgs>> serviceResolvers;

    /**
     * @return A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
     * Structure is documented below.
     * 
     */
    public Output<List<EkmConnectionServiceResolverArgs>> serviceResolvers() {
        return this.serviceResolvers;
    }

    private EkmConnectionArgs() {}

    private EkmConnectionArgs(EkmConnectionArgs $) {
        this.cryptoSpacePath = $.cryptoSpacePath;
        this.etag = $.etag;
        this.keyManagementMode = $.keyManagementMode;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.serviceResolvers = $.serviceResolvers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EkmConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EkmConnectionArgs $;

        public Builder() {
            $ = new EkmConnectionArgs();
        }

        public Builder(EkmConnectionArgs defaults) {
            $ = new EkmConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoSpacePath Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
         * 
         * @return builder
         * 
         */
        public Builder cryptoSpacePath(@Nullable Output<String> cryptoSpacePath) {
            $.cryptoSpacePath = cryptoSpacePath;
            return this;
        }

        /**
         * @param cryptoSpacePath Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
         * 
         * @return builder
         * 
         */
        public Builder cryptoSpacePath(String cryptoSpacePath) {
            return cryptoSpacePath(Output.of(cryptoSpacePath));
        }

        /**
         * @param etag Optional. Etag of the currently stored EkmConnection.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Optional. Etag of the currently stored EkmConnection.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param keyManagementMode Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
         * Default value is `MANUAL`.
         * Possible values are: `MANUAL`, `CLOUD_KMS`.
         * 
         * @return builder
         * 
         */
        public Builder keyManagementMode(@Nullable Output<String> keyManagementMode) {
            $.keyManagementMode = keyManagementMode;
            return this;
        }

        /**
         * @param keyManagementMode Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL
         * Default value is `MANUAL`.
         * Possible values are: `MANUAL`, `CLOUD_KMS`.
         * 
         * @return builder
         * 
         */
        public Builder keyManagementMode(String keyManagementMode) {
            return keyManagementMode(Output.of(keyManagementMode));
        }

        /**
         * @param location The location for the EkmConnection.
         * A full list of valid locations can be found by running `gcloud kms locations list`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the EkmConnection.
         * A full list of valid locations can be found by running `gcloud kms locations list`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name for the EkmConnection.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name for the EkmConnection.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceResolvers A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceResolvers(Output<List<EkmConnectionServiceResolverArgs>> serviceResolvers) {
            $.serviceResolvers = serviceResolvers;
            return this;
        }

        /**
         * @param serviceResolvers A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceResolvers(List<EkmConnectionServiceResolverArgs> serviceResolvers) {
            return serviceResolvers(Output.of(serviceResolvers));
        }

        /**
         * @param serviceResolvers A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceResolvers(EkmConnectionServiceResolverArgs... serviceResolvers) {
            return serviceResolvers(List.of(serviceResolvers));
        }

        public EkmConnectionArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("EkmConnectionArgs", "location");
            }
            if ($.serviceResolvers == null) {
                throw new MissingRequiredPropertyException("EkmConnectionArgs", "serviceResolvers");
            }
            return $;
        }
    }

}
