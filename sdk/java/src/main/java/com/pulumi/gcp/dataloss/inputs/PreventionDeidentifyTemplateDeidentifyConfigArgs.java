// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDeidentifyTemplateDeidentifyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDeidentifyTemplateDeidentifyConfigArgs Empty = new PreventionDeidentifyTemplateDeidentifyConfigArgs();

    /**
     * Treat the dataset as free-form text and apply the same free text transformation everywhere
     * Structure is documented below.
     * 
     */
    @Import(name="infoTypeTransformations")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsArgs> infoTypeTransformations;

    /**
     * @return Treat the dataset as free-form text and apply the same free text transformation everywhere
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsArgs>> infoTypeTransformations() {
        return Optional.ofNullable(this.infoTypeTransformations);
    }

    /**
     * Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
     * Structure is documented below.
     * 
     */
    @Import(name="recordTransformations")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsArgs> recordTransformations;

    /**
     * @return Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsArgs>> recordTransformations() {
        return Optional.ofNullable(this.recordTransformations);
    }

    private PreventionDeidentifyTemplateDeidentifyConfigArgs() {}

    private PreventionDeidentifyTemplateDeidentifyConfigArgs(PreventionDeidentifyTemplateDeidentifyConfigArgs $) {
        this.infoTypeTransformations = $.infoTypeTransformations;
        this.recordTransformations = $.recordTransformations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDeidentifyTemplateDeidentifyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDeidentifyTemplateDeidentifyConfigArgs $;

        public Builder() {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigArgs();
        }

        public Builder(PreventionDeidentifyTemplateDeidentifyConfigArgs defaults) {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param infoTypeTransformations Treat the dataset as free-form text and apply the same free text transformation everywhere
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infoTypeTransformations(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsArgs> infoTypeTransformations) {
            $.infoTypeTransformations = infoTypeTransformations;
            return this;
        }

        /**
         * @param infoTypeTransformations Treat the dataset as free-form text and apply the same free text transformation everywhere
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infoTypeTransformations(PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsArgs infoTypeTransformations) {
            return infoTypeTransformations(Output.of(infoTypeTransformations));
        }

        /**
         * @param recordTransformations Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recordTransformations(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsArgs> recordTransformations) {
            $.recordTransformations = recordTransformations;
            return this;
        }

        /**
         * @param recordTransformations Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recordTransformations(PreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsArgs recordTransformations) {
            return recordTransformations(Output.of(recordTransformations));
        }

        public PreventionDeidentifyTemplateDeidentifyConfigArgs build() {
            return $;
        }
    }

}
