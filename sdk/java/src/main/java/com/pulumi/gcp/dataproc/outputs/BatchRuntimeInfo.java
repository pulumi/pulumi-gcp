// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dataproc.outputs.BatchRuntimeInfoApproximateUsage;
import com.pulumi.gcp.dataproc.outputs.BatchRuntimeInfoCurrentUsage;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BatchRuntimeInfo {
    /**
     * @return (Output)
     * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    private @Nullable List<BatchRuntimeInfoApproximateUsage> approximateUsages;
    /**
     * @return (Output)
     * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    private @Nullable List<BatchRuntimeInfoCurrentUsage> currentUsages;
    /**
     * @return (Output)
     * A URI pointing to the location of the diagnostics tarball.
     * 
     */
    private @Nullable String diagnosticOutputUri;
    /**
     * @return (Output)
     * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
     * 
     */
    private @Nullable Map<String,String> endpoints;
    /**
     * @return (Output)
     * A URI pointing to the location of the stdout and stderr of the workload.
     * 
     */
    private @Nullable String outputUri;

    private BatchRuntimeInfo() {}
    /**
     * @return (Output)
     * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    public List<BatchRuntimeInfoApproximateUsage> approximateUsages() {
        return this.approximateUsages == null ? List.of() : this.approximateUsages;
    }
    /**
     * @return (Output)
     * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    public List<BatchRuntimeInfoCurrentUsage> currentUsages() {
        return this.currentUsages == null ? List.of() : this.currentUsages;
    }
    /**
     * @return (Output)
     * A URI pointing to the location of the diagnostics tarball.
     * 
     */
    public Optional<String> diagnosticOutputUri() {
        return Optional.ofNullable(this.diagnosticOutputUri);
    }
    /**
     * @return (Output)
     * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
     * 
     */
    public Map<String,String> endpoints() {
        return this.endpoints == null ? Map.of() : this.endpoints;
    }
    /**
     * @return (Output)
     * A URI pointing to the location of the stdout and stderr of the workload.
     * 
     */
    public Optional<String> outputUri() {
        return Optional.ofNullable(this.outputUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BatchRuntimeInfo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<BatchRuntimeInfoApproximateUsage> approximateUsages;
        private @Nullable List<BatchRuntimeInfoCurrentUsage> currentUsages;
        private @Nullable String diagnosticOutputUri;
        private @Nullable Map<String,String> endpoints;
        private @Nullable String outputUri;
        public Builder() {}
        public Builder(BatchRuntimeInfo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approximateUsages = defaults.approximateUsages;
    	      this.currentUsages = defaults.currentUsages;
    	      this.diagnosticOutputUri = defaults.diagnosticOutputUri;
    	      this.endpoints = defaults.endpoints;
    	      this.outputUri = defaults.outputUri;
        }

        @CustomType.Setter
        public Builder approximateUsages(@Nullable List<BatchRuntimeInfoApproximateUsage> approximateUsages) {

            this.approximateUsages = approximateUsages;
            return this;
        }
        public Builder approximateUsages(BatchRuntimeInfoApproximateUsage... approximateUsages) {
            return approximateUsages(List.of(approximateUsages));
        }
        @CustomType.Setter
        public Builder currentUsages(@Nullable List<BatchRuntimeInfoCurrentUsage> currentUsages) {

            this.currentUsages = currentUsages;
            return this;
        }
        public Builder currentUsages(BatchRuntimeInfoCurrentUsage... currentUsages) {
            return currentUsages(List.of(currentUsages));
        }
        @CustomType.Setter
        public Builder diagnosticOutputUri(@Nullable String diagnosticOutputUri) {

            this.diagnosticOutputUri = diagnosticOutputUri;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable Map<String,String> endpoints) {

            this.endpoints = endpoints;
            return this;
        }
        @CustomType.Setter
        public Builder outputUri(@Nullable String outputUri) {

            this.outputUri = outputUri;
            return this;
        }
        public BatchRuntimeInfo build() {
            final var _resultValue = new BatchRuntimeInfo();
            _resultValue.approximateUsages = approximateUsages;
            _resultValue.currentUsages = currentUsages;
            _resultValue.diagnosticOutputUri = diagnosticOutputUri;
            _resultValue.endpoints = endpoints;
            _resultValue.outputUri = outputUri;
            return _resultValue;
        }
    }
}
