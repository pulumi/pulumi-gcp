// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDiscoveryConfigTargetBigQueryTargetConditionsTypesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs Empty = new PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs();

    /**
     * File store must have been created after this date. Used to avoid backfilling. A timestamp in RFC3339 UTC &#34;Zulu&#34; format with nanosecond resolution and upto nine fractional digits.
     * 
     */
    @Import(name="createdAfter")
    private @Nullable Output<String> createdAfter;

    /**
     * @return File store must have been created after this date. Used to avoid backfilling. A timestamp in RFC3339 UTC &#34;Zulu&#34; format with nanosecond resolution and upto nine fractional digits.
     * 
     */
    public Optional<Output<String>> createdAfter() {
        return Optional.ofNullable(this.createdAfter);
    }

    /**
     * At least one of the conditions must be true for a table to be scanned.
     * Structure is documented below.
     * 
     */
    @Import(name="orConditions")
    private @Nullable Output<PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs> orConditions;

    /**
     * @return At least one of the conditions must be true for a table to be scanned.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs>> orConditions() {
        return Optional.ofNullable(this.orConditions);
    }

    /**
     * Restrict discovery to categories of table types. Currently view, materialized view, snapshot and non-biglake external tables are supported.
     * Possible values are: `BIG_QUERY_COLLECTION_ALL_TYPES`, `BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES`.
     * 
     */
    @Import(name="typeCollection")
    private @Nullable Output<String> typeCollection;

    /**
     * @return Restrict discovery to categories of table types. Currently view, materialized view, snapshot and non-biglake external tables are supported.
     * Possible values are: `BIG_QUERY_COLLECTION_ALL_TYPES`, `BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES`.
     * 
     */
    public Optional<Output<String>> typeCollection() {
        return Optional.ofNullable(this.typeCollection);
    }

    /**
     * Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
     * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
     * 
     */
    @Import(name="types")
    private @Nullable Output<PreventionDiscoveryConfigTargetBigQueryTargetConditionsTypesArgs> types;

    /**
     * @return Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
     * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
     * 
     */
    public Optional<Output<PreventionDiscoveryConfigTargetBigQueryTargetConditionsTypesArgs>> types() {
        return Optional.ofNullable(this.types);
    }

    private PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs() {}

    private PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs(PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs $) {
        this.createdAfter = $.createdAfter;
        this.orConditions = $.orConditions;
        this.typeCollection = $.typeCollection;
        this.types = $.types;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs();
        }

        public Builder(PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs defaults) {
            $ = new PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAfter File store must have been created after this date. Used to avoid backfilling. A timestamp in RFC3339 UTC &#34;Zulu&#34; format with nanosecond resolution and upto nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(@Nullable Output<String> createdAfter) {
            $.createdAfter = createdAfter;
            return this;
        }

        /**
         * @param createdAfter File store must have been created after this date. Used to avoid backfilling. A timestamp in RFC3339 UTC &#34;Zulu&#34; format with nanosecond resolution and upto nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder createdAfter(String createdAfter) {
            return createdAfter(Output.of(createdAfter));
        }

        /**
         * @param orConditions At least one of the conditions must be true for a table to be scanned.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orConditions(@Nullable Output<PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs> orConditions) {
            $.orConditions = orConditions;
            return this;
        }

        /**
         * @param orConditions At least one of the conditions must be true for a table to be scanned.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder orConditions(PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs orConditions) {
            return orConditions(Output.of(orConditions));
        }

        /**
         * @param typeCollection Restrict discovery to categories of table types. Currently view, materialized view, snapshot and non-biglake external tables are supported.
         * Possible values are: `BIG_QUERY_COLLECTION_ALL_TYPES`, `BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES`.
         * 
         * @return builder
         * 
         */
        public Builder typeCollection(@Nullable Output<String> typeCollection) {
            $.typeCollection = typeCollection;
            return this;
        }

        /**
         * @param typeCollection Restrict discovery to categories of table types. Currently view, materialized view, snapshot and non-biglake external tables are supported.
         * Possible values are: `BIG_QUERY_COLLECTION_ALL_TYPES`, `BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES`.
         * 
         * @return builder
         * 
         */
        public Builder typeCollection(String typeCollection) {
            return typeCollection(Output.of(typeCollection));
        }

        /**
         * @param types Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
         * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable Output<PreventionDiscoveryConfigTargetBigQueryTargetConditionsTypesArgs> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
         * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
         * 
         * @return builder
         * 
         */
        public Builder types(PreventionDiscoveryConfigTargetBigQueryTargetConditionsTypesArgs types) {
            return types(Output.of(types));
        }

        public PreventionDiscoveryConfigTargetBigQueryTargetConditionsArgs build() {
            return $;
        }
    }

}
