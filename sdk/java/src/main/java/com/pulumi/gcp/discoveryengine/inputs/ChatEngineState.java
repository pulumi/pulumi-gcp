// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.ChatEngineChatEngineConfigArgs;
import com.pulumi.gcp.discoveryengine.inputs.ChatEngineChatEngineMetadataArgs;
import com.pulumi.gcp.discoveryengine.inputs.ChatEngineCommonConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChatEngineState extends com.pulumi.resources.ResourceArgs {

    public static final ChatEngineState Empty = new ChatEngineState();

    /**
     * Configurations for a chat Engine.
     * Structure is documented below.
     * 
     */
    @Import(name="chatEngineConfig")
    private @Nullable Output<ChatEngineChatEngineConfigArgs> chatEngineConfig;

    /**
     * @return Configurations for a chat Engine.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ChatEngineChatEngineConfigArgs>> chatEngineConfig() {
        return Optional.ofNullable(this.chatEngineConfig);
    }

    /**
     * Additional information of the Chat Engine.
     * Structure is documented below.
     * 
     */
    @Import(name="chatEngineMetadatas")
    private @Nullable Output<List<ChatEngineChatEngineMetadataArgs>> chatEngineMetadatas;

    /**
     * @return Additional information of the Chat Engine.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ChatEngineChatEngineMetadataArgs>>> chatEngineMetadatas() {
        return Optional.ofNullable(this.chatEngineMetadatas);
    }

    /**
     * The collection ID.
     * 
     */
    @Import(name="collectionId")
    private @Nullable Output<String> collectionId;

    /**
     * @return The collection ID.
     * 
     */
    public Optional<Output<String>> collectionId() {
        return Optional.ofNullable(this.collectionId);
    }

    /**
     * Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     * 
     */
    @Import(name="commonConfig")
    private @Nullable Output<ChatEngineCommonConfigArgs> commonConfig;

    /**
     * @return Common config spec that specifies the metadata of the engine.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ChatEngineCommonConfigArgs>> commonConfig() {
        return Optional.ofNullable(this.commonConfig);
    }

    /**
     * Timestamp the Engine was created at.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Timestamp the Engine was created at.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
     * 
     */
    @Import(name="dataStoreIds")
    private @Nullable Output<List<String>> dataStoreIds;

    /**
     * @return The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
     * 
     */
    public Optional<Output<List<String>>> dataStoreIds() {
        return Optional.ofNullable(this.dataStoreIds);
    }

    /**
     * The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The ID to use for chat engine.
     * 
     */
    @Import(name="engineId")
    private @Nullable Output<String> engineId;

    /**
     * @return The ID to use for chat engine.
     * 
     */
    public Optional<Output<String>> engineId() {
        return Optional.ofNullable(this.engineId);
    }

    /**
     * The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`.
     * 
     */
    @Import(name="industryVertical")
    private @Nullable Output<String> industryVertical;

    /**
     * @return The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked to the engine.
     * Default value is `GENERIC`.
     * Possible values are: `GENERIC`.
     * 
     */
    public Optional<Output<String>> industryVertical() {
        return Optional.ofNullable(this.industryVertical);
    }

    /**
     * Location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full resource name of the chat engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full resource name of the chat engine. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Timestamp the Engine was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Timestamp the Engine was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ChatEngineState() {}

    private ChatEngineState(ChatEngineState $) {
        this.chatEngineConfig = $.chatEngineConfig;
        this.chatEngineMetadatas = $.chatEngineMetadatas;
        this.collectionId = $.collectionId;
        this.commonConfig = $.commonConfig;
        this.createTime = $.createTime;
        this.dataStoreIds = $.dataStoreIds;
        this.displayName = $.displayName;
        this.engineId = $.engineId;
        this.industryVertical = $.industryVertical;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChatEngineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChatEngineState $;

        public Builder() {
            $ = new ChatEngineState();
        }

        public Builder(ChatEngineState defaults) {
            $ = new ChatEngineState(Objects.requireNonNull(defaults));
        }

        /**
         * @param chatEngineConfig Configurations for a chat Engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chatEngineConfig(@Nullable Output<ChatEngineChatEngineConfigArgs> chatEngineConfig) {
            $.chatEngineConfig = chatEngineConfig;
            return this;
        }

        /**
         * @param chatEngineConfig Configurations for a chat Engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chatEngineConfig(ChatEngineChatEngineConfigArgs chatEngineConfig) {
            return chatEngineConfig(Output.of(chatEngineConfig));
        }

        /**
         * @param chatEngineMetadatas Additional information of the Chat Engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chatEngineMetadatas(@Nullable Output<List<ChatEngineChatEngineMetadataArgs>> chatEngineMetadatas) {
            $.chatEngineMetadatas = chatEngineMetadatas;
            return this;
        }

        /**
         * @param chatEngineMetadatas Additional information of the Chat Engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chatEngineMetadatas(List<ChatEngineChatEngineMetadataArgs> chatEngineMetadatas) {
            return chatEngineMetadatas(Output.of(chatEngineMetadatas));
        }

        /**
         * @param chatEngineMetadatas Additional information of the Chat Engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chatEngineMetadatas(ChatEngineChatEngineMetadataArgs... chatEngineMetadatas) {
            return chatEngineMetadatas(List.of(chatEngineMetadatas));
        }

        /**
         * @param collectionId The collection ID.
         * 
         * @return builder
         * 
         */
        public Builder collectionId(@Nullable Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        /**
         * @param collectionId The collection ID.
         * 
         * @return builder
         * 
         */
        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        /**
         * @param commonConfig Common config spec that specifies the metadata of the engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commonConfig(@Nullable Output<ChatEngineCommonConfigArgs> commonConfig) {
            $.commonConfig = commonConfig;
            return this;
        }

        /**
         * @param commonConfig Common config spec that specifies the metadata of the engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder commonConfig(ChatEngineCommonConfigArgs commonConfig) {
            return commonConfig(Output.of(commonConfig));
        }

        /**
         * @param createTime Timestamp the Engine was created at.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Timestamp the Engine was created at.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataStoreIds The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreIds(@Nullable Output<List<String>> dataStoreIds) {
            $.dataStoreIds = dataStoreIds;
            return this;
        }

        /**
         * @param dataStoreIds The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreIds(List<String> dataStoreIds) {
            return dataStoreIds(Output.of(dataStoreIds));
        }

        /**
         * @param dataStoreIds The data stores associated with this engine. Multiple DataStores in the same Collection can be associated here. All listed DataStores must be `SOLUTION_TYPE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreIds(String... dataStoreIds) {
            return dataStoreIds(List.of(dataStoreIds));
        }

        /**
         * @param displayName The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param engineId The ID to use for chat engine.
         * 
         * @return builder
         * 
         */
        public Builder engineId(@Nullable Output<String> engineId) {
            $.engineId = engineId;
            return this;
        }

        /**
         * @param engineId The ID to use for chat engine.
         * 
         * @return builder
         * 
         */
        public Builder engineId(String engineId) {
            return engineId(Output.of(engineId));
        }

        /**
         * @param industryVertical The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked to the engine.
         * Default value is `GENERIC`.
         * Possible values are: `GENERIC`.
         * 
         * @return builder
         * 
         */
        public Builder industryVertical(@Nullable Output<String> industryVertical) {
            $.industryVertical = industryVertical;
            return this;
        }

        /**
         * @param industryVertical The industry vertical that the chat engine registers. Vertical on Engine has to match vertical of the DataStore linked to the engine.
         * Default value is `GENERIC`.
         * Possible values are: `GENERIC`.
         * 
         * @return builder
         * 
         */
        public Builder industryVertical(String industryVertical) {
            return industryVertical(Output.of(industryVertical));
        }

        /**
         * @param location Location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full resource name of the chat engine. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full resource name of the chat engine. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param updateTime Timestamp the Engine was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Timestamp the Engine was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ChatEngineState build() {
            return $;
        }
    }

}
