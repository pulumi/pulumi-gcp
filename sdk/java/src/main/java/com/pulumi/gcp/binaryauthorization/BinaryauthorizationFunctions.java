// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.binaryauthorization;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.binaryauthorization.inputs.GetAttestorIamPolicyArgs;
import com.pulumi.gcp.binaryauthorization.inputs.GetAttestorIamPolicyPlainArgs;
import com.pulumi.gcp.binaryauthorization.outputs.GetAttestorIamPolicyResult;
import java.util.concurrent.CompletableFuture;

public final class BinaryauthorizationFunctions {
    /**
     * Retrieves the current IAM policy data for attestor
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.binaryauthorization.BinaryauthorizationFunctions;
     * import com.pulumi.gcp.binaryauthorization.inputs.GetAttestorIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = BinaryauthorizationFunctions.getAttestorIamPolicy(GetAttestorIamPolicyArgs.builder()
     *             .project(attestor.project())
     *             .attestor(attestor.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAttestorIamPolicyResult> getAttestorIamPolicy(GetAttestorIamPolicyArgs args) {
        return getAttestorIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for attestor
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.binaryauthorization.BinaryauthorizationFunctions;
     * import com.pulumi.gcp.binaryauthorization.inputs.GetAttestorIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = BinaryauthorizationFunctions.getAttestorIamPolicy(GetAttestorIamPolicyArgs.builder()
     *             .project(attestor.project())
     *             .attestor(attestor.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAttestorIamPolicyResult> getAttestorIamPolicyPlain(GetAttestorIamPolicyPlainArgs args) {
        return getAttestorIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for attestor
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.binaryauthorization.BinaryauthorizationFunctions;
     * import com.pulumi.gcp.binaryauthorization.inputs.GetAttestorIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = BinaryauthorizationFunctions.getAttestorIamPolicy(GetAttestorIamPolicyArgs.builder()
     *             .project(attestor.project())
     *             .attestor(attestor.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAttestorIamPolicyResult> getAttestorIamPolicy(GetAttestorIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy", TypeShape.of(GetAttestorIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for attestor
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.binaryauthorization.BinaryauthorizationFunctions;
     * import com.pulumi.gcp.binaryauthorization.inputs.GetAttestorIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = BinaryauthorizationFunctions.getAttestorIamPolicy(GetAttestorIamPolicyArgs.builder()
     *             .project(attestor.project())
     *             .attestor(attestor.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAttestorIamPolicyResult> getAttestorIamPolicyPlain(GetAttestorIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:binaryauthorization/getAttestorIamPolicy:getAttestorIamPolicy", TypeShape.of(GetAttestorIamPolicyResult.class), args, Utilities.withVersion(options));
    }
}
