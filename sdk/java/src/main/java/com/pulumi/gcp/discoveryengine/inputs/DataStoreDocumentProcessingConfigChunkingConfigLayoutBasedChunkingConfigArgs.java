// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs Empty = new DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs();

    /**
     * The token size limit for each chunk.
     * Supported values: 100-500 (inclusive). Default value: 500.
     * 
     */
    @Import(name="chunkSize")
    private @Nullable Output<Integer> chunkSize;

    /**
     * @return The token size limit for each chunk.
     * Supported values: 100-500 (inclusive). Default value: 500.
     * 
     */
    public Optional<Output<Integer>> chunkSize() {
        return Optional.ofNullable(this.chunkSize);
    }

    /**
     * Whether to include appending different levels of headings to chunks from the middle of the document to prevent context loss.
     * Default value: False.
     * 
     */
    @Import(name="includeAncestorHeadings")
    private @Nullable Output<Boolean> includeAncestorHeadings;

    /**
     * @return Whether to include appending different levels of headings to chunks from the middle of the document to prevent context loss.
     * Default value: False.
     * 
     */
    public Optional<Output<Boolean>> includeAncestorHeadings() {
        return Optional.ofNullable(this.includeAncestorHeadings);
    }

    private DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs() {}

    private DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs(DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs $) {
        this.chunkSize = $.chunkSize;
        this.includeAncestorHeadings = $.includeAncestorHeadings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs $;

        public Builder() {
            $ = new DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs();
        }

        public Builder(DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs defaults) {
            $ = new DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chunkSize The token size limit for each chunk.
         * Supported values: 100-500 (inclusive). Default value: 500.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(@Nullable Output<Integer> chunkSize) {
            $.chunkSize = chunkSize;
            return this;
        }

        /**
         * @param chunkSize The token size limit for each chunk.
         * Supported values: 100-500 (inclusive). Default value: 500.
         * 
         * @return builder
         * 
         */
        public Builder chunkSize(Integer chunkSize) {
            return chunkSize(Output.of(chunkSize));
        }

        /**
         * @param includeAncestorHeadings Whether to include appending different levels of headings to chunks from the middle of the document to prevent context loss.
         * Default value: False.
         * 
         * @return builder
         * 
         */
        public Builder includeAncestorHeadings(@Nullable Output<Boolean> includeAncestorHeadings) {
            $.includeAncestorHeadings = includeAncestorHeadings;
            return this;
        }

        /**
         * @param includeAncestorHeadings Whether to include appending different levels of headings to chunks from the middle of the document to prevent context loss.
         * Default value: False.
         * 
         * @return builder
         * 
         */
        public Builder includeAncestorHeadings(Boolean includeAncestorHeadings) {
            return includeAncestorHeadings(Output.of(includeAncestorHeadings));
        }

        public DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigArgs build() {
            return $;
        }
    }

}
