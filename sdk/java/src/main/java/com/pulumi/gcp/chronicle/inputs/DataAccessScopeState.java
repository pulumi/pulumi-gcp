// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelArgs;
import com.pulumi.gcp.chronicle.inputs.DataAccessScopeDeniedDataAccessLabelArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataAccessScopeState extends com.pulumi.resources.ResourceArgs {

    public static final DataAccessScopeState Empty = new DataAccessScopeState();

    /**
     * Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn&#39;t have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * 
     */
    @Import(name="allowAll")
    private @Nullable Output<Boolean> allowAll;

    /**
     * @return Optional. Whether or not the scope allows all labels, allow_all and
     * allowed_data_access_labels are mutually exclusive and one of them must be
     * present. denied_data_access_labels can still be used along with allow_all.
     * When combined with denied_data_access_labels, access will be granted to all
     * data that doesn&#39;t have labels mentioned in denied_data_access_labels. E.g.:
     * A customer with scope with denied labels A and B and allow_all will be able
     * to see all data except data labeled with A and data labeled with B and data
     * with labels A and B.
     * 
     */
    public Optional<Output<Boolean>> allowAll() {
        return Optional.ofNullable(this.allowAll);
    }

    /**
     * The allowed labels for the scope. There has to be at
     * least one label allowed for the scope to be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * Structure is documented below.
     * 
     */
    @Import(name="allowedDataAccessLabels")
    private @Nullable Output<List<DataAccessScopeAllowedDataAccessLabelArgs>> allowedDataAccessLabels;

    /**
     * @return The allowed labels for the scope. There has to be at
     * least one label allowed for the scope to be valid.
     * The logical operator for evaluation of the allowed labels is OR.
     * Either allow_all or allowed_data_access_labels needs to be provided.
     * E.g.: A customer with scope with allowed labels A and B will be able
     * to see data with labeled with A or B or (A and B).
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DataAccessScopeAllowedDataAccessLabelArgs>>> allowedDataAccessLabels() {
        return Optional.ofNullable(this.allowedDataAccessLabels);
    }

    /**
     * Output only. The user who created the data access scope.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return Output only. The user who created the data access scope.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * Output only. The time at which the data access scope was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The time at which the data access scope was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Required. The user provided scope id which will become the last part of the name
     * of the scope resource.
     * Needs to be compliant with https://google.aip.dev/122
     * 
     */
    @Import(name="dataAccessScopeId")
    private @Nullable Output<String> dataAccessScopeId;

    /**
     * @return Required. The user provided scope id which will become the last part of the name
     * of the scope resource.
     * Needs to be compliant with https://google.aip.dev/122
     * 
     */
    public Optional<Output<String>> dataAccessScopeId() {
        return Optional.ofNullable(this.dataAccessScopeId);
    }

    /**
     * Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won&#39;t be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * Structure is documented below.
     * 
     */
    @Import(name="deniedDataAccessLabels")
    private @Nullable Output<List<DataAccessScopeDeniedDataAccessLabelArgs>> deniedDataAccessLabels;

    /**
     * @return Optional. The denied labels for the scope.
     * The logical operator for evaluation of the denied labels is AND.
     * E.g.: A customer with scope with denied labels A and B won&#39;t be able
     * to see data labeled with A and data labeled with B
     * and data with labels A and B.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DataAccessScopeDeniedDataAccessLabelArgs>>> deniedDataAccessLabels() {
        return Optional.ofNullable(this.deniedDataAccessLabels);
    }

    /**
     * Optional. A description of the data access scope for a human reader.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A description of the data access scope for a human reader.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Output only. The name to be used for display to customers of the data access scope.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Output only. The name to be used for display to customers of the data access scope.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * Output only. The user who last updated the data access scope.
     * 
     */
    @Import(name="lastEditor")
    private @Nullable Output<String> lastEditor;

    /**
     * @return Output only. The user who last updated the data access scope.
     * 
     */
    public Optional<Output<String>> lastEditor() {
        return Optional.ofNullable(this.lastEditor);
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. The time at which the data access scope was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The time at which the data access scope was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private DataAccessScopeState() {}

    private DataAccessScopeState(DataAccessScopeState $) {
        this.allowAll = $.allowAll;
        this.allowedDataAccessLabels = $.allowedDataAccessLabels;
        this.author = $.author;
        this.createTime = $.createTime;
        this.dataAccessScopeId = $.dataAccessScopeId;
        this.deniedDataAccessLabels = $.deniedDataAccessLabels;
        this.description = $.description;
        this.displayName = $.displayName;
        this.instance = $.instance;
        this.lastEditor = $.lastEditor;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataAccessScopeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataAccessScopeState $;

        public Builder() {
            $ = new DataAccessScopeState();
        }

        public Builder(DataAccessScopeState defaults) {
            $ = new DataAccessScopeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAll Optional. Whether or not the scope allows all labels, allow_all and
         * allowed_data_access_labels are mutually exclusive and one of them must be
         * present. denied_data_access_labels can still be used along with allow_all.
         * When combined with denied_data_access_labels, access will be granted to all
         * data that doesn&#39;t have labels mentioned in denied_data_access_labels. E.g.:
         * A customer with scope with denied labels A and B and allow_all will be able
         * to see all data except data labeled with A and data labeled with B and data
         * with labels A and B.
         * 
         * @return builder
         * 
         */
        public Builder allowAll(@Nullable Output<Boolean> allowAll) {
            $.allowAll = allowAll;
            return this;
        }

        /**
         * @param allowAll Optional. Whether or not the scope allows all labels, allow_all and
         * allowed_data_access_labels are mutually exclusive and one of them must be
         * present. denied_data_access_labels can still be used along with allow_all.
         * When combined with denied_data_access_labels, access will be granted to all
         * data that doesn&#39;t have labels mentioned in denied_data_access_labels. E.g.:
         * A customer with scope with denied labels A and B and allow_all will be able
         * to see all data except data labeled with A and data labeled with B and data
         * with labels A and B.
         * 
         * @return builder
         * 
         */
        public Builder allowAll(Boolean allowAll) {
            return allowAll(Output.of(allowAll));
        }

        /**
         * @param allowedDataAccessLabels The allowed labels for the scope. There has to be at
         * least one label allowed for the scope to be valid.
         * The logical operator for evaluation of the allowed labels is OR.
         * Either allow_all or allowed_data_access_labels needs to be provided.
         * E.g.: A customer with scope with allowed labels A and B will be able
         * to see data with labeled with A or B or (A and B).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowedDataAccessLabels(@Nullable Output<List<DataAccessScopeAllowedDataAccessLabelArgs>> allowedDataAccessLabels) {
            $.allowedDataAccessLabels = allowedDataAccessLabels;
            return this;
        }

        /**
         * @param allowedDataAccessLabels The allowed labels for the scope. There has to be at
         * least one label allowed for the scope to be valid.
         * The logical operator for evaluation of the allowed labels is OR.
         * Either allow_all or allowed_data_access_labels needs to be provided.
         * E.g.: A customer with scope with allowed labels A and B will be able
         * to see data with labeled with A or B or (A and B).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowedDataAccessLabels(List<DataAccessScopeAllowedDataAccessLabelArgs> allowedDataAccessLabels) {
            return allowedDataAccessLabels(Output.of(allowedDataAccessLabels));
        }

        /**
         * @param allowedDataAccessLabels The allowed labels for the scope. There has to be at
         * least one label allowed for the scope to be valid.
         * The logical operator for evaluation of the allowed labels is OR.
         * Either allow_all or allowed_data_access_labels needs to be provided.
         * E.g.: A customer with scope with allowed labels A and B will be able
         * to see data with labeled with A or B or (A and B).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allowedDataAccessLabels(DataAccessScopeAllowedDataAccessLabelArgs... allowedDataAccessLabels) {
            return allowedDataAccessLabels(List.of(allowedDataAccessLabels));
        }

        /**
         * @param author Output only. The user who created the data access scope.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author Output only. The user who created the data access scope.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param createTime Output only. The time at which the data access scope was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The time at which the data access scope was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataAccessScopeId Required. The user provided scope id which will become the last part of the name
         * of the scope resource.
         * Needs to be compliant with https://google.aip.dev/122
         * 
         * @return builder
         * 
         */
        public Builder dataAccessScopeId(@Nullable Output<String> dataAccessScopeId) {
            $.dataAccessScopeId = dataAccessScopeId;
            return this;
        }

        /**
         * @param dataAccessScopeId Required. The user provided scope id which will become the last part of the name
         * of the scope resource.
         * Needs to be compliant with https://google.aip.dev/122
         * 
         * @return builder
         * 
         */
        public Builder dataAccessScopeId(String dataAccessScopeId) {
            return dataAccessScopeId(Output.of(dataAccessScopeId));
        }

        /**
         * @param deniedDataAccessLabels Optional. The denied labels for the scope.
         * The logical operator for evaluation of the denied labels is AND.
         * E.g.: A customer with scope with denied labels A and B won&#39;t be able
         * to see data labeled with A and data labeled with B
         * and data with labels A and B.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deniedDataAccessLabels(@Nullable Output<List<DataAccessScopeDeniedDataAccessLabelArgs>> deniedDataAccessLabels) {
            $.deniedDataAccessLabels = deniedDataAccessLabels;
            return this;
        }

        /**
         * @param deniedDataAccessLabels Optional. The denied labels for the scope.
         * The logical operator for evaluation of the denied labels is AND.
         * E.g.: A customer with scope with denied labels A and B won&#39;t be able
         * to see data labeled with A and data labeled with B
         * and data with labels A and B.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deniedDataAccessLabels(List<DataAccessScopeDeniedDataAccessLabelArgs> deniedDataAccessLabels) {
            return deniedDataAccessLabels(Output.of(deniedDataAccessLabels));
        }

        /**
         * @param deniedDataAccessLabels Optional. The denied labels for the scope.
         * The logical operator for evaluation of the denied labels is AND.
         * E.g.: A customer with scope with denied labels A and B won&#39;t be able
         * to see data labeled with A and data labeled with B
         * and data with labels A and B.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deniedDataAccessLabels(DataAccessScopeDeniedDataAccessLabelArgs... deniedDataAccessLabels) {
            return deniedDataAccessLabels(List.of(deniedDataAccessLabels));
        }

        /**
         * @param description Optional. A description of the data access scope for a human reader.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A description of the data access scope for a human reader.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Output only. The name to be used for display to customers of the data access scope.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Output only. The name to be used for display to customers of the data access scope.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param lastEditor Output only. The user who last updated the data access scope.
         * 
         * @return builder
         * 
         */
        public Builder lastEditor(@Nullable Output<String> lastEditor) {
            $.lastEditor = lastEditor;
            return this;
        }

        /**
         * @param lastEditor Output only. The user who last updated the data access scope.
         * 
         * @return builder
         * 
         */
        public Builder lastEditor(String lastEditor) {
            return lastEditor(Output.of(lastEditor));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
         * Format:
         * projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full name of the data access scope. This unique identifier is generated using values provided for the URL parameters.
         * Format:
         * projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope_id}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param updateTime Output only. The time at which the data access scope was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The time at which the data access scope was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public DataAccessScopeState build() {
            return $;
        }
    }

}
