// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.DataStoreDocumentProcessingConfigChunkingConfigArgs;
import com.pulumi.gcp.discoveryengine.inputs.DataStoreDocumentProcessingConfigDefaultParsingConfigArgs;
import com.pulumi.gcp.discoveryengine.inputs.DataStoreDocumentProcessingConfigParsingConfigOverrideArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataStoreDocumentProcessingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataStoreDocumentProcessingConfigArgs Empty = new DataStoreDocumentProcessingConfigArgs();

    /**
     * Whether chunking mode is enabled.
     * Structure is documented below.
     * 
     */
    @Import(name="chunkingConfig")
    private @Nullable Output<DataStoreDocumentProcessingConfigChunkingConfigArgs> chunkingConfig;

    /**
     * @return Whether chunking mode is enabled.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataStoreDocumentProcessingConfigChunkingConfigArgs>> chunkingConfig() {
        return Optional.ofNullable(this.chunkingConfig);
    }

    /**
     * Configurations for default Document parser. If not specified, this resource
     * will be configured to use a default DigitalParsingConfig, and the default parsing
     * config will be applied to all file types for Document parsing.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultParsingConfig")
    private @Nullable Output<DataStoreDocumentProcessingConfigDefaultParsingConfigArgs> defaultParsingConfig;

    /**
     * @return Configurations for default Document parser. If not specified, this resource
     * will be configured to use a default DigitalParsingConfig, and the default parsing
     * config will be applied to all file types for Document parsing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataStoreDocumentProcessingConfigDefaultParsingConfigArgs>> defaultParsingConfig() {
        return Optional.ofNullable(this.defaultParsingConfig);
    }

    /**
     * (Output)
     * The full resource name of the Document Processing Config. Format:
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Output)
     * The full resource name of the Document Processing Config. Format:
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Map from file type to override the default parsing configuration based on the file type. Supported keys:
     * 
     */
    @Import(name="parsingConfigOverrides")
    private @Nullable Output<List<DataStoreDocumentProcessingConfigParsingConfigOverrideArgs>> parsingConfigOverrides;

    /**
     * @return Map from file type to override the default parsing configuration based on the file type. Supported keys:
     * 
     */
    public Optional<Output<List<DataStoreDocumentProcessingConfigParsingConfigOverrideArgs>>> parsingConfigOverrides() {
        return Optional.ofNullable(this.parsingConfigOverrides);
    }

    private DataStoreDocumentProcessingConfigArgs() {}

    private DataStoreDocumentProcessingConfigArgs(DataStoreDocumentProcessingConfigArgs $) {
        this.chunkingConfig = $.chunkingConfig;
        this.defaultParsingConfig = $.defaultParsingConfig;
        this.name = $.name;
        this.parsingConfigOverrides = $.parsingConfigOverrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreDocumentProcessingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreDocumentProcessingConfigArgs $;

        public Builder() {
            $ = new DataStoreDocumentProcessingConfigArgs();
        }

        public Builder(DataStoreDocumentProcessingConfigArgs defaults) {
            $ = new DataStoreDocumentProcessingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chunkingConfig Whether chunking mode is enabled.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chunkingConfig(@Nullable Output<DataStoreDocumentProcessingConfigChunkingConfigArgs> chunkingConfig) {
            $.chunkingConfig = chunkingConfig;
            return this;
        }

        /**
         * @param chunkingConfig Whether chunking mode is enabled.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder chunkingConfig(DataStoreDocumentProcessingConfigChunkingConfigArgs chunkingConfig) {
            return chunkingConfig(Output.of(chunkingConfig));
        }

        /**
         * @param defaultParsingConfig Configurations for default Document parser. If not specified, this resource
         * will be configured to use a default DigitalParsingConfig, and the default parsing
         * config will be applied to all file types for Document parsing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultParsingConfig(@Nullable Output<DataStoreDocumentProcessingConfigDefaultParsingConfigArgs> defaultParsingConfig) {
            $.defaultParsingConfig = defaultParsingConfig;
            return this;
        }

        /**
         * @param defaultParsingConfig Configurations for default Document parser. If not specified, this resource
         * will be configured to use a default DigitalParsingConfig, and the default parsing
         * config will be applied to all file types for Document parsing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultParsingConfig(DataStoreDocumentProcessingConfigDefaultParsingConfigArgs defaultParsingConfig) {
            return defaultParsingConfig(Output.of(defaultParsingConfig));
        }

        /**
         * @param name (Output)
         * The full resource name of the Document Processing Config. Format:
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Output)
         * The full resource name of the Document Processing Config. Format:
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parsingConfigOverrides Map from file type to override the default parsing configuration based on the file type. Supported keys:
         * 
         * @return builder
         * 
         */
        public Builder parsingConfigOverrides(@Nullable Output<List<DataStoreDocumentProcessingConfigParsingConfigOverrideArgs>> parsingConfigOverrides) {
            $.parsingConfigOverrides = parsingConfigOverrides;
            return this;
        }

        /**
         * @param parsingConfigOverrides Map from file type to override the default parsing configuration based on the file type. Supported keys:
         * 
         * @return builder
         * 
         */
        public Builder parsingConfigOverrides(List<DataStoreDocumentProcessingConfigParsingConfigOverrideArgs> parsingConfigOverrides) {
            return parsingConfigOverrides(Output.of(parsingConfigOverrides));
        }

        /**
         * @param parsingConfigOverrides Map from file type to override the default parsing configuration based on the file type. Supported keys:
         * 
         * @return builder
         * 
         */
        public Builder parsingConfigOverrides(DataStoreDocumentProcessingConfigParsingConfigOverrideArgs... parsingConfigOverrides) {
            return parsingConfigOverrides(List.of(parsingConfigOverrides));
        }

        public DataStoreDocumentProcessingConfigArgs build() {
            return $;
        }
    }

}
