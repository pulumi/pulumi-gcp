// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.osconfig.V2PolicyOrchestratorArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorState;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorOrchestratedResource;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorOrchestrationScope;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorOrchestrationState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * PolicyOrchestrator helps managing project+zone level policy resources (e.g.
 * OS Policy Assignments), by providing tools to create, update and delete them
 * across projects and locations, at scale.
 * 
 * ## Example Usage
 * 
 * ### Osconfigv2 Policy Orchestrator Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.osconfig.V2PolicyOrchestrator;
 * import com.pulumi.gcp.osconfig.V2PolicyOrchestratorArgs;
 * import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorOrchestratedResourceArgs;
 * import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadArgs;
 * import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs;
 * import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs;
 * import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutDisruptionBudgetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var policyOrchestrator = new V2PolicyOrchestrator("policyOrchestrator", V2PolicyOrchestratorArgs.builder()
 *             .policyOrchestratorId("po")
 *             .state("ACTIVE")
 *             .action("UPSERT")
 *             .orchestratedResource(V2PolicyOrchestratorOrchestratedResourceArgs.builder()
 *                 .id("test-orchestrated-resource")
 *                 .osPolicyAssignmentV1Payload(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadArgs.builder()
 *                     .osPolicies(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs.builder()
 *                         .id("test-os-policy")
 *                         .mode("VALIDATION")
 *                         .resourceGroups(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs.builder()
 *                             .resources(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceArgs.builder()
 *                                 .id("resource-tf")
 *                                 .file(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs.builder()
 *                                     .content("file-content-tf")
 *                                     .path("file-path-tf-1")
 *                                     .state("PRESENT")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .instanceFilter(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterArgs.builder()
 *                         .inventories(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilterInventoryArgs.builder()
 *                             .osShortName("windows-10")
 *                             .build())
 *                         .build())
 *                     .rollout(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutArgs.builder()
 *                         .disruptionBudget(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadRolloutDisruptionBudgetArgs.builder()
 *                             .percent(100)
 *                             .build())
 *                         .minWaitDuration("60s")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .labels(Map.of("state", "active"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * PolicyOrchestrator can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`
 * 
 * * `{{project}}/{{policy_orchestrator_id}}`
 * 
 * * `{{policy_orchestrator_id}}`
 * 
 * When using the `pulumi import` command, PolicyOrchestrator can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default projects/{{project}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default {{project}}/{{policy_orchestrator_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator default {{policy_orchestrator_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator")
public class V2PolicyOrchestrator extends com.pulumi.resources.CustomResource {
    /**
     * Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestrationScope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     * 
     */
    @Export(name="action", refs={String.class}, tree="[0]")
    private Output<String> action;

    /**
     * @return Required. Action to be done by the orchestrator in
     * `projects/{project_id}/zones/{zone_id}` locations defined by the
     * `orchestrationScope`. Allowed values:
     * - `UPSERT` - Orchestrator will create or update target resources.
     * - `DELETE` - Orchestrator will delete target resources, if they exist
     * 
     */
    public Output<String> action() {
        return this.action;
    }
    /**
     * Output only. Timestamp when the policy orchestrator resource was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. Timestamp when the policy orchestrator resource was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Optional. Freeform text describing the purpose of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional. Freeform text describing the purpose of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Immutable. Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Immutable. Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     * 
     */
    @Export(name="orchestratedResource", refs={V2PolicyOrchestratorOrchestratedResource.class}, tree="[0]")
    private Output<V2PolicyOrchestratorOrchestratedResource> orchestratedResource;

    /**
     * @return Represents a resource that is being orchestrated by the policy orchestrator.
     * Structure is documented below.
     * 
     */
    public Output<V2PolicyOrchestratorOrchestratedResource> orchestratedResource() {
        return this.orchestratedResource;
    }
    /**
     * Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     * 
     */
    @Export(name="orchestrationScope", refs={V2PolicyOrchestratorOrchestrationScope.class}, tree="[0]")
    private Output</* @Nullable */ V2PolicyOrchestratorOrchestrationScope> orchestrationScope;

    /**
     * @return Defines a set of selectors which drive which resources are in scope of policy
     * orchestration.
     * Structure is documented below.
     * 
     */
    public Output<Optional<V2PolicyOrchestratorOrchestrationScope>> orchestrationScope() {
        return Codegen.optional(this.orchestrationScope);
    }
    /**
     * Describes the state of the orchestration process.
     * Structure is documented below.
     * 
     */
    @Export(name="orchestrationStates", refs={List.class,V2PolicyOrchestratorOrchestrationState.class}, tree="[0,1]")
    private Output<List<V2PolicyOrchestratorOrchestrationState>> orchestrationStates;

    /**
     * @return Describes the state of the orchestration process.
     * Structure is documented below.
     * 
     */
    public Output<List<V2PolicyOrchestratorOrchestrationState>> orchestrationStates() {
        return this.orchestrationStates;
    }
    /**
     * Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     * 
     */
    @Export(name="policyOrchestratorId", refs={String.class}, tree="[0]")
    private Output<String> policyOrchestratorId;

    /**
     * @return Required. The logical identifier of the policy orchestrator, with the following
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the parent.
     * 
     */
    public Output<String> policyOrchestratorId() {
        return this.policyOrchestratorId;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return Output only. Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return Optional. State of the orchestrator. Can be updated to change orchestrator behaviour.
     * Allowed values:
     * - `ACTIVE` - orchestrator is actively looking for actions to be taken.
     * - `STOPPED` - orchestrator won&#39;t make any changes.
     *   Note: There might be more states added in the future. We use string here
     *   instead of an enum, to avoid the need of propagating new states to all the
     *   client code.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * Output only. Timestamp when the policy orchestrator resource was last modified.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. Timestamp when the policy orchestrator resource was last modified.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public V2PolicyOrchestrator(java.lang.String name) {
        this(name, V2PolicyOrchestratorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public V2PolicyOrchestrator(java.lang.String name, V2PolicyOrchestratorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public V2PolicyOrchestrator(java.lang.String name, V2PolicyOrchestratorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private V2PolicyOrchestrator(java.lang.String name, Output<java.lang.String> id, @Nullable V2PolicyOrchestratorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:osconfig/v2PolicyOrchestrator:V2PolicyOrchestrator", name, state, makeResourceOptions(options, id), false);
    }

    private static V2PolicyOrchestratorArgs makeArgs(V2PolicyOrchestratorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? V2PolicyOrchestratorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static V2PolicyOrchestrator get(java.lang.String name, Output<java.lang.String> id, @Nullable V2PolicyOrchestratorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new V2PolicyOrchestrator(name, id, state, options);
    }
}
