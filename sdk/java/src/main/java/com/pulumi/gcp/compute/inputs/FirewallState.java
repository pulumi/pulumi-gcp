// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.FirewallAllowArgs;
import com.pulumi.gcp.compute.inputs.FirewallDenyArgs;
import com.pulumi.gcp.compute.inputs.FirewallLogConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallState extends com.pulumi.resources.ResourceArgs {

    public static final FirewallState Empty = new FirewallState();

    /**
     * The list of ALLOW rules specified by this firewall. Each rule
     * specifies a protocol and port-range tuple that describes a permitted
     * connection.
     * Structure is documented below.
     * 
     */
    @Import(name="allows")
    private @Nullable Output<List<FirewallAllowArgs>> allows;

    /**
     * @return The list of ALLOW rules specified by this firewall. Each rule
     * specifies a protocol and port-range tuple that describes a permitted
     * connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<FirewallAllowArgs>>> allows() {
        return Optional.ofNullable(this.allows);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * The list of DENY rules specified by this firewall. Each rule specifies
     * a protocol and port-range tuple that describes a denied connection.
     * Structure is documented below.
     * 
     */
    @Import(name="denies")
    private @Nullable Output<List<FirewallDenyArgs>> denies;

    /**
     * @return The list of DENY rules specified by this firewall. Each rule specifies
     * a protocol and port-range tuple that describes a denied connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<FirewallDenyArgs>>> denies() {
        return Optional.ofNullable(this.denies);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If destination ranges are specified, the firewall will apply only to
     * traffic that has destination IP address in these ranges. These ranges
     * must be expressed in CIDR format. Only IPv4 is supported.
     * 
     */
    @Import(name="destinationRanges")
    private @Nullable Output<List<String>> destinationRanges;

    /**
     * @return If destination ranges are specified, the firewall will apply only to
     * traffic that has destination IP address in these ranges. These ranges
     * must be expressed in CIDR format. Only IPv4 is supported.
     * 
     */
    public Optional<Output<List<String>>> destinationRanges() {
        return Optional.ofNullable(this.destinationRanges);
    }

    /**
     * Direction of traffic to which this firewall applies; default is
     * INGRESS. Note: For INGRESS traffic, it is NOT supported to specify
     * destinationRanges; For EGRESS traffic, it is NOT supported to specify
     * `source_ranges` OR `source_tags`. For INGRESS traffic, one of `source_ranges`,
     * `source_tags` or `source_service_accounts` is required.
     * Possible values are `INGRESS` and `EGRESS`.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return Direction of traffic to which this firewall applies; default is
     * INGRESS. Note: For INGRESS traffic, it is NOT supported to specify
     * destinationRanges; For EGRESS traffic, it is NOT supported to specify
     * `source_ranges` OR `source_tags`. For INGRESS traffic, one of `source_ranges`,
     * `source_tags` or `source_service_accounts` is required.
     * Possible values are `INGRESS` and `EGRESS`.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Denotes whether the firewall rule is disabled, i.e not applied to the
     * network it is associated with. When set to true, the firewall rule is
     * not enforced and the network behaves as if it did not exist. If this
     * is unspecified, the firewall rule will be enabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Denotes whether the firewall rule is disabled, i.e not applied to the
     * network it is associated with. When set to true, the firewall rule is
     * not enforced and the network behaves as if it did not exist. If this
     * is unspecified, the firewall rule will be enabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * This field denotes whether to enable logging for a particular firewall rule.
     * If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of `log_config`
     * 
     * @deprecated
     * Deprecated in favor of log_config
     * 
     */
    @Deprecated /* Deprecated in favor of log_config */
    @Import(name="enableLogging")
    private @Nullable Output<Boolean> enableLogging;

    /**
     * @return This field denotes whether to enable logging for a particular firewall rule.
     * If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of `log_config`
     * 
     * @deprecated
     * Deprecated in favor of log_config
     * 
     */
    @Deprecated /* Deprecated in favor of log_config */
    public Optional<Output<Boolean>> enableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }

    /**
     * This field denotes the logging options for a particular firewall rule.
     * If defined, logging is enabled, and logs will be exported to Cloud Logging.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<FirewallLogConfigArgs> logConfig;

    /**
     * @return This field denotes the logging options for a particular firewall rule.
     * If defined, logging is enabled, and logs will be exported to Cloud Logging.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FirewallLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name or self_link of the network to attach this firewall to.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The name or self_link of the network to attach this firewall to.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Priority for this rule. This is an integer between 0 and 65535, both
     * inclusive. When not specified, the value assumed is 1000. Relative
     * priorities determine precedence of conflicting rules. Lower value of
     * priority implies higher precedence (eg, a rule with priority 0 has
     * higher precedence than a rule with priority 1). DENY rules take
     * precedence over ALLOW rules having equal priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority for this rule. This is an integer between 0 and 65535, both
     * inclusive. When not specified, the value assumed is 1000. Relative
     * priorities determine precedence of conflicting rules. Lower value of
     * priority implies higher precedence (eg, a rule with priority 0 has
     * higher precedence than a rule with priority 1). DENY rules take
     * precedence over ALLOW rules having equal priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * If source ranges are specified, the firewall will apply only to
     * traffic that has source IP address in these ranges. These ranges must
     * be expressed in CIDR format. One or both of sourceRanges and
     * sourceTags may be set. If both properties are set, the firewall will
     * apply to traffic that has source IP address within sourceRanges OR the
     * source IP that belongs to a tag listed in the sourceTags property. The
     * connection does not need to match both properties for the firewall to
     * apply. Only IPv4 is supported. For INGRESS traffic, one of `source_ranges`,
     * `source_tags` or `source_service_accounts` is required.
     * 
     */
    @Import(name="sourceRanges")
    private @Nullable Output<List<String>> sourceRanges;

    /**
     * @return If source ranges are specified, the firewall will apply only to
     * traffic that has source IP address in these ranges. These ranges must
     * be expressed in CIDR format. One or both of sourceRanges and
     * sourceTags may be set. If both properties are set, the firewall will
     * apply to traffic that has source IP address within sourceRanges OR the
     * source IP that belongs to a tag listed in the sourceTags property. The
     * connection does not need to match both properties for the firewall to
     * apply. Only IPv4 is supported. For INGRESS traffic, one of `source_ranges`,
     * `source_tags` or `source_service_accounts` is required.
     * 
     */
    public Optional<Output<List<String>>> sourceRanges() {
        return Optional.ofNullable(this.sourceRanges);
    }

    /**
     * If source service accounts are specified, the firewall will apply only
     * to traffic originating from an instance with a service account in this
     * list. Source service accounts cannot be used to control traffic to an
     * instance&#39;s external IP address because service accounts are associated
     * with an instance, not an IP address. sourceRanges can be set at the
     * same time as sourceServiceAccounts. If both are set, the firewall will
     * apply to traffic that has source IP address within sourceRanges OR the
     * source IP belongs to an instance with service account listed in
     * sourceServiceAccount. The connection does not need to match both
     * properties for the firewall to apply. sourceServiceAccounts cannot be
     * used at the same time as sourceTags or targetTags. For INGRESS traffic,
     * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
     * 
     */
    @Import(name="sourceServiceAccounts")
    private @Nullable Output<List<String>> sourceServiceAccounts;

    /**
     * @return If source service accounts are specified, the firewall will apply only
     * to traffic originating from an instance with a service account in this
     * list. Source service accounts cannot be used to control traffic to an
     * instance&#39;s external IP address because service accounts are associated
     * with an instance, not an IP address. sourceRanges can be set at the
     * same time as sourceServiceAccounts. If both are set, the firewall will
     * apply to traffic that has source IP address within sourceRanges OR the
     * source IP belongs to an instance with service account listed in
     * sourceServiceAccount. The connection does not need to match both
     * properties for the firewall to apply. sourceServiceAccounts cannot be
     * used at the same time as sourceTags or targetTags. For INGRESS traffic,
     * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
     * 
     */
    public Optional<Output<List<String>>> sourceServiceAccounts() {
        return Optional.ofNullable(this.sourceServiceAccounts);
    }

    /**
     * If source tags are specified, the firewall will apply only to traffic
     * with source IP that belongs to a tag listed in source tags. Source
     * tags cannot be used to control traffic to an instance&#39;s external IP
     * address. Because tags are associated with an instance, not an IP
     * address. One or both of sourceRanges and sourceTags may be set. If
     * both properties are set, the firewall will apply to traffic that has
     * source IP address within sourceRanges OR the source IP that belongs to
     * a tag listed in the sourceTags property. The connection does not need
     * to match both properties for the firewall to apply. For INGRESS traffic,
     * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
     * 
     */
    @Import(name="sourceTags")
    private @Nullable Output<List<String>> sourceTags;

    /**
     * @return If source tags are specified, the firewall will apply only to traffic
     * with source IP that belongs to a tag listed in source tags. Source
     * tags cannot be used to control traffic to an instance&#39;s external IP
     * address. Because tags are associated with an instance, not an IP
     * address. One or both of sourceRanges and sourceTags may be set. If
     * both properties are set, the firewall will apply to traffic that has
     * source IP address within sourceRanges OR the source IP that belongs to
     * a tag listed in the sourceTags property. The connection does not need
     * to match both properties for the firewall to apply. For INGRESS traffic,
     * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
     * 
     */
    public Optional<Output<List<String>>> sourceTags() {
        return Optional.ofNullable(this.sourceTags);
    }

    /**
     * A list of service accounts indicating sets of instances located in the
     * network that may make network connections as specified in allowed[].
     * targetServiceAccounts cannot be used at the same time as targetTags or
     * sourceTags. If neither targetServiceAccounts nor targetTags are
     * specified, the firewall rule applies to all instances on the specified
     * network.
     * 
     */
    @Import(name="targetServiceAccounts")
    private @Nullable Output<List<String>> targetServiceAccounts;

    /**
     * @return A list of service accounts indicating sets of instances located in the
     * network that may make network connections as specified in allowed[].
     * targetServiceAccounts cannot be used at the same time as targetTags or
     * sourceTags. If neither targetServiceAccounts nor targetTags are
     * specified, the firewall rule applies to all instances on the specified
     * network.
     * 
     */
    public Optional<Output<List<String>>> targetServiceAccounts() {
        return Optional.ofNullable(this.targetServiceAccounts);
    }

    /**
     * A list of instance tags indicating sets of instances located in the
     * network that may make network connections as specified in allowed[].
     * If no targetTags are specified, the firewall rule applies to all
     * instances on the specified network.
     * 
     */
    @Import(name="targetTags")
    private @Nullable Output<List<String>> targetTags;

    /**
     * @return A list of instance tags indicating sets of instances located in the
     * network that may make network connections as specified in allowed[].
     * If no targetTags are specified, the firewall rule applies to all
     * instances on the specified network.
     * 
     */
    public Optional<Output<List<String>>> targetTags() {
        return Optional.ofNullable(this.targetTags);
    }

    private FirewallState() {}

    private FirewallState(FirewallState $) {
        this.allows = $.allows;
        this.creationTimestamp = $.creationTimestamp;
        this.denies = $.denies;
        this.description = $.description;
        this.destinationRanges = $.destinationRanges;
        this.direction = $.direction;
        this.disabled = $.disabled;
        this.enableLogging = $.enableLogging;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.network = $.network;
        this.priority = $.priority;
        this.project = $.project;
        this.selfLink = $.selfLink;
        this.sourceRanges = $.sourceRanges;
        this.sourceServiceAccounts = $.sourceServiceAccounts;
        this.sourceTags = $.sourceTags;
        this.targetServiceAccounts = $.targetServiceAccounts;
        this.targetTags = $.targetTags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallState $;

        public Builder() {
            $ = new FirewallState();
        }

        public Builder(FirewallState defaults) {
            $ = new FirewallState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allows The list of ALLOW rules specified by this firewall. Each rule
         * specifies a protocol and port-range tuple that describes a permitted
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allows(@Nullable Output<List<FirewallAllowArgs>> allows) {
            $.allows = allows;
            return this;
        }

        /**
         * @param allows The list of ALLOW rules specified by this firewall. Each rule
         * specifies a protocol and port-range tuple that describes a permitted
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allows(List<FirewallAllowArgs> allows) {
            return allows(Output.of(allows));
        }

        /**
         * @param allows The list of ALLOW rules specified by this firewall. Each rule
         * specifies a protocol and port-range tuple that describes a permitted
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder allows(FirewallAllowArgs... allows) {
            return allows(List.of(allows));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param denies The list of DENY rules specified by this firewall. Each rule specifies
         * a protocol and port-range tuple that describes a denied connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder denies(@Nullable Output<List<FirewallDenyArgs>> denies) {
            $.denies = denies;
            return this;
        }

        /**
         * @param denies The list of DENY rules specified by this firewall. Each rule specifies
         * a protocol and port-range tuple that describes a denied connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder denies(List<FirewallDenyArgs> denies) {
            return denies(Output.of(denies));
        }

        /**
         * @param denies The list of DENY rules specified by this firewall. Each rule specifies
         * a protocol and port-range tuple that describes a denied connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder denies(FirewallDenyArgs... denies) {
            return denies(List.of(denies));
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationRanges If destination ranges are specified, the firewall will apply only to
         * traffic that has destination IP address in these ranges. These ranges
         * must be expressed in CIDR format. Only IPv4 is supported.
         * 
         * @return builder
         * 
         */
        public Builder destinationRanges(@Nullable Output<List<String>> destinationRanges) {
            $.destinationRanges = destinationRanges;
            return this;
        }

        /**
         * @param destinationRanges If destination ranges are specified, the firewall will apply only to
         * traffic that has destination IP address in these ranges. These ranges
         * must be expressed in CIDR format. Only IPv4 is supported.
         * 
         * @return builder
         * 
         */
        public Builder destinationRanges(List<String> destinationRanges) {
            return destinationRanges(Output.of(destinationRanges));
        }

        /**
         * @param destinationRanges If destination ranges are specified, the firewall will apply only to
         * traffic that has destination IP address in these ranges. These ranges
         * must be expressed in CIDR format. Only IPv4 is supported.
         * 
         * @return builder
         * 
         */
        public Builder destinationRanges(String... destinationRanges) {
            return destinationRanges(List.of(destinationRanges));
        }

        /**
         * @param direction Direction of traffic to which this firewall applies; default is
         * INGRESS. Note: For INGRESS traffic, it is NOT supported to specify
         * destinationRanges; For EGRESS traffic, it is NOT supported to specify
         * `source_ranges` OR `source_tags`. For INGRESS traffic, one of `source_ranges`,
         * `source_tags` or `source_service_accounts` is required.
         * Possible values are `INGRESS` and `EGRESS`.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of traffic to which this firewall applies; default is
         * INGRESS. Note: For INGRESS traffic, it is NOT supported to specify
         * destinationRanges; For EGRESS traffic, it is NOT supported to specify
         * `source_ranges` OR `source_tags`. For INGRESS traffic, one of `source_ranges`,
         * `source_tags` or `source_service_accounts` is required.
         * Possible values are `INGRESS` and `EGRESS`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param disabled Denotes whether the firewall rule is disabled, i.e not applied to the
         * network it is associated with. When set to true, the firewall rule is
         * not enforced and the network behaves as if it did not exist. If this
         * is unspecified, the firewall rule will be enabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Denotes whether the firewall rule is disabled, i.e not applied to the
         * network it is associated with. When set to true, the firewall rule is
         * not enforced and the network behaves as if it did not exist. If this
         * is unspecified, the firewall rule will be enabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param enableLogging This field denotes whether to enable logging for a particular firewall rule.
         * If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of `log_config`
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated in favor of log_config
         * 
         */
        @Deprecated /* Deprecated in favor of log_config */
        public Builder enableLogging(@Nullable Output<Boolean> enableLogging) {
            $.enableLogging = enableLogging;
            return this;
        }

        /**
         * @param enableLogging This field denotes whether to enable logging for a particular firewall rule.
         * If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of `log_config`
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated in favor of log_config
         * 
         */
        @Deprecated /* Deprecated in favor of log_config */
        public Builder enableLogging(Boolean enableLogging) {
            return enableLogging(Output.of(enableLogging));
        }

        /**
         * @param logConfig This field denotes the logging options for a particular firewall rule.
         * If defined, logging is enabled, and logs will be exported to Cloud Logging.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<FirewallLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig This field denotes the logging options for a particular firewall rule.
         * If defined, logging is enabled, and logs will be exported to Cloud Logging.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(FirewallLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The name or self_link of the network to attach this firewall to.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The name or self_link of the network to attach this firewall to.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param priority Priority for this rule. This is an integer between 0 and 65535, both
         * inclusive. When not specified, the value assumed is 1000. Relative
         * priorities determine precedence of conflicting rules. Lower value of
         * priority implies higher precedence (eg, a rule with priority 0 has
         * higher precedence than a rule with priority 1). DENY rules take
         * precedence over ALLOW rules having equal priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority for this rule. This is an integer between 0 and 65535, both
         * inclusive. When not specified, the value assumed is 1000. Relative
         * priorities determine precedence of conflicting rules. Lower value of
         * priority implies higher precedence (eg, a rule with priority 0 has
         * higher precedence than a rule with priority 1). DENY rules take
         * precedence over ALLOW rules having equal priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param sourceRanges If source ranges are specified, the firewall will apply only to
         * traffic that has source IP address in these ranges. These ranges must
         * be expressed in CIDR format. One or both of sourceRanges and
         * sourceTags may be set. If both properties are set, the firewall will
         * apply to traffic that has source IP address within sourceRanges OR the
         * source IP that belongs to a tag listed in the sourceTags property. The
         * connection does not need to match both properties for the firewall to
         * apply. Only IPv4 is supported. For INGRESS traffic, one of `source_ranges`,
         * `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceRanges(@Nullable Output<List<String>> sourceRanges) {
            $.sourceRanges = sourceRanges;
            return this;
        }

        /**
         * @param sourceRanges If source ranges are specified, the firewall will apply only to
         * traffic that has source IP address in these ranges. These ranges must
         * be expressed in CIDR format. One or both of sourceRanges and
         * sourceTags may be set. If both properties are set, the firewall will
         * apply to traffic that has source IP address within sourceRanges OR the
         * source IP that belongs to a tag listed in the sourceTags property. The
         * connection does not need to match both properties for the firewall to
         * apply. Only IPv4 is supported. For INGRESS traffic, one of `source_ranges`,
         * `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceRanges(List<String> sourceRanges) {
            return sourceRanges(Output.of(sourceRanges));
        }

        /**
         * @param sourceRanges If source ranges are specified, the firewall will apply only to
         * traffic that has source IP address in these ranges. These ranges must
         * be expressed in CIDR format. One or both of sourceRanges and
         * sourceTags may be set. If both properties are set, the firewall will
         * apply to traffic that has source IP address within sourceRanges OR the
         * source IP that belongs to a tag listed in the sourceTags property. The
         * connection does not need to match both properties for the firewall to
         * apply. Only IPv4 is supported. For INGRESS traffic, one of `source_ranges`,
         * `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceRanges(String... sourceRanges) {
            return sourceRanges(List.of(sourceRanges));
        }

        /**
         * @param sourceServiceAccounts If source service accounts are specified, the firewall will apply only
         * to traffic originating from an instance with a service account in this
         * list. Source service accounts cannot be used to control traffic to an
         * instance&#39;s external IP address because service accounts are associated
         * with an instance, not an IP address. sourceRanges can be set at the
         * same time as sourceServiceAccounts. If both are set, the firewall will
         * apply to traffic that has source IP address within sourceRanges OR the
         * source IP belongs to an instance with service account listed in
         * sourceServiceAccount. The connection does not need to match both
         * properties for the firewall to apply. sourceServiceAccounts cannot be
         * used at the same time as sourceTags or targetTags. For INGRESS traffic,
         * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceAccounts(@Nullable Output<List<String>> sourceServiceAccounts) {
            $.sourceServiceAccounts = sourceServiceAccounts;
            return this;
        }

        /**
         * @param sourceServiceAccounts If source service accounts are specified, the firewall will apply only
         * to traffic originating from an instance with a service account in this
         * list. Source service accounts cannot be used to control traffic to an
         * instance&#39;s external IP address because service accounts are associated
         * with an instance, not an IP address. sourceRanges can be set at the
         * same time as sourceServiceAccounts. If both are set, the firewall will
         * apply to traffic that has source IP address within sourceRanges OR the
         * source IP belongs to an instance with service account listed in
         * sourceServiceAccount. The connection does not need to match both
         * properties for the firewall to apply. sourceServiceAccounts cannot be
         * used at the same time as sourceTags or targetTags. For INGRESS traffic,
         * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceAccounts(List<String> sourceServiceAccounts) {
            return sourceServiceAccounts(Output.of(sourceServiceAccounts));
        }

        /**
         * @param sourceServiceAccounts If source service accounts are specified, the firewall will apply only
         * to traffic originating from an instance with a service account in this
         * list. Source service accounts cannot be used to control traffic to an
         * instance&#39;s external IP address because service accounts are associated
         * with an instance, not an IP address. sourceRanges can be set at the
         * same time as sourceServiceAccounts. If both are set, the firewall will
         * apply to traffic that has source IP address within sourceRanges OR the
         * source IP belongs to an instance with service account listed in
         * sourceServiceAccount. The connection does not need to match both
         * properties for the firewall to apply. sourceServiceAccounts cannot be
         * used at the same time as sourceTags or targetTags. For INGRESS traffic,
         * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceServiceAccounts(String... sourceServiceAccounts) {
            return sourceServiceAccounts(List.of(sourceServiceAccounts));
        }

        /**
         * @param sourceTags If source tags are specified, the firewall will apply only to traffic
         * with source IP that belongs to a tag listed in source tags. Source
         * tags cannot be used to control traffic to an instance&#39;s external IP
         * address. Because tags are associated with an instance, not an IP
         * address. One or both of sourceRanges and sourceTags may be set. If
         * both properties are set, the firewall will apply to traffic that has
         * source IP address within sourceRanges OR the source IP that belongs to
         * a tag listed in the sourceTags property. The connection does not need
         * to match both properties for the firewall to apply. For INGRESS traffic,
         * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceTags(@Nullable Output<List<String>> sourceTags) {
            $.sourceTags = sourceTags;
            return this;
        }

        /**
         * @param sourceTags If source tags are specified, the firewall will apply only to traffic
         * with source IP that belongs to a tag listed in source tags. Source
         * tags cannot be used to control traffic to an instance&#39;s external IP
         * address. Because tags are associated with an instance, not an IP
         * address. One or both of sourceRanges and sourceTags may be set. If
         * both properties are set, the firewall will apply to traffic that has
         * source IP address within sourceRanges OR the source IP that belongs to
         * a tag listed in the sourceTags property. The connection does not need
         * to match both properties for the firewall to apply. For INGRESS traffic,
         * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceTags(List<String> sourceTags) {
            return sourceTags(Output.of(sourceTags));
        }

        /**
         * @param sourceTags If source tags are specified, the firewall will apply only to traffic
         * with source IP that belongs to a tag listed in source tags. Source
         * tags cannot be used to control traffic to an instance&#39;s external IP
         * address. Because tags are associated with an instance, not an IP
         * address. One or both of sourceRanges and sourceTags may be set. If
         * both properties are set, the firewall will apply to traffic that has
         * source IP address within sourceRanges OR the source IP that belongs to
         * a tag listed in the sourceTags property. The connection does not need
         * to match both properties for the firewall to apply. For INGRESS traffic,
         * one of `source_ranges`, `source_tags` or `source_service_accounts` is required.
         * 
         * @return builder
         * 
         */
        public Builder sourceTags(String... sourceTags) {
            return sourceTags(List.of(sourceTags));
        }

        /**
         * @param targetServiceAccounts A list of service accounts indicating sets of instances located in the
         * network that may make network connections as specified in allowed[].
         * targetServiceAccounts cannot be used at the same time as targetTags or
         * sourceTags. If neither targetServiceAccounts nor targetTags are
         * specified, the firewall rule applies to all instances on the specified
         * network.
         * 
         * @return builder
         * 
         */
        public Builder targetServiceAccounts(@Nullable Output<List<String>> targetServiceAccounts) {
            $.targetServiceAccounts = targetServiceAccounts;
            return this;
        }

        /**
         * @param targetServiceAccounts A list of service accounts indicating sets of instances located in the
         * network that may make network connections as specified in allowed[].
         * targetServiceAccounts cannot be used at the same time as targetTags or
         * sourceTags. If neither targetServiceAccounts nor targetTags are
         * specified, the firewall rule applies to all instances on the specified
         * network.
         * 
         * @return builder
         * 
         */
        public Builder targetServiceAccounts(List<String> targetServiceAccounts) {
            return targetServiceAccounts(Output.of(targetServiceAccounts));
        }

        /**
         * @param targetServiceAccounts A list of service accounts indicating sets of instances located in the
         * network that may make network connections as specified in allowed[].
         * targetServiceAccounts cannot be used at the same time as targetTags or
         * sourceTags. If neither targetServiceAccounts nor targetTags are
         * specified, the firewall rule applies to all instances on the specified
         * network.
         * 
         * @return builder
         * 
         */
        public Builder targetServiceAccounts(String... targetServiceAccounts) {
            return targetServiceAccounts(List.of(targetServiceAccounts));
        }

        /**
         * @param targetTags A list of instance tags indicating sets of instances located in the
         * network that may make network connections as specified in allowed[].
         * If no targetTags are specified, the firewall rule applies to all
         * instances on the specified network.
         * 
         * @return builder
         * 
         */
        public Builder targetTags(@Nullable Output<List<String>> targetTags) {
            $.targetTags = targetTags;
            return this;
        }

        /**
         * @param targetTags A list of instance tags indicating sets of instances located in the
         * network that may make network connections as specified in allowed[].
         * If no targetTags are specified, the firewall rule applies to all
         * instances on the specified network.
         * 
         * @return builder
         * 
         */
        public Builder targetTags(List<String> targetTags) {
            return targetTags(Output.of(targetTags));
        }

        /**
         * @param targetTags A list of instance tags indicating sets of instances located in the
         * network that may make network connections as specified in allowed[].
         * If no targetTags are specified, the firewall rule applies to all
         * instances on the specified network.
         * 
         * @return builder
         * 
         */
        public Builder targetTags(String... targetTags) {
            return targetTags(List.of(targetTags));
        }

        public FirewallState build() {
            return $;
        }
    }

}
