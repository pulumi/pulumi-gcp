// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.apigee.inputs.KeystoresAliasesPkcs12CertsInfoArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeystoresAliasesPkcs12State extends com.pulumi.resources.ResourceArgs {

    public static final KeystoresAliasesPkcs12State Empty = new KeystoresAliasesPkcs12State();

    /**
     * Alias Name
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return Alias Name
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     * 
     */
    @Import(name="certsInfos")
    private @Nullable Output<List<KeystoresAliasesPkcs12CertsInfoArgs>> certsInfos;

    /**
     * @return Chain of certificates under this alias.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<KeystoresAliasesPkcs12CertsInfoArgs>>> certsInfos() {
        return Optional.ofNullable(this.certsInfos);
    }

    /**
     * Environment associated with the alias
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return Environment associated with the alias
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * PKCS12 file content
     * 
     * ***
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return PKCS12 file content
     * 
     * ***
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * Hash of the pkcs file
     * 
     */
    @Import(name="filehash")
    private @Nullable Output<String> filehash;

    /**
     * @return Hash of the pkcs file
     * 
     */
    public Optional<Output<String>> filehash() {
        return Optional.ofNullable(this.filehash);
    }

    /**
     * Keystore Name
     * 
     */
    @Import(name="keystore")
    private @Nullable Output<String> keystore;

    /**
     * @return Keystore Name
     * 
     */
    public Optional<Output<String>> keystore() {
        return Optional.ofNullable(this.keystore);
    }

    /**
     * Organization ID associated with the alias, without organization/ prefix
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization ID associated with the alias, without organization/ prefix
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Password for the PKCS12 file if it&#39;s encrypted
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for the PKCS12 file if it&#39;s encrypted
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Optional.Type of Alias
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Optional.Type of Alias
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private KeystoresAliasesPkcs12State() {}

    private KeystoresAliasesPkcs12State(KeystoresAliasesPkcs12State $) {
        this.alias = $.alias;
        this.certsInfos = $.certsInfos;
        this.environment = $.environment;
        this.file = $.file;
        this.filehash = $.filehash;
        this.keystore = $.keystore;
        this.orgId = $.orgId;
        this.password = $.password;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeystoresAliasesPkcs12State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeystoresAliasesPkcs12State $;

        public Builder() {
            $ = new KeystoresAliasesPkcs12State();
        }

        public Builder(KeystoresAliasesPkcs12State defaults) {
            $ = new KeystoresAliasesPkcs12State(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias Alias Name
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Alias Name
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param certsInfos Chain of certificates under this alias.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certsInfos(@Nullable Output<List<KeystoresAliasesPkcs12CertsInfoArgs>> certsInfos) {
            $.certsInfos = certsInfos;
            return this;
        }

        /**
         * @param certsInfos Chain of certificates under this alias.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certsInfos(List<KeystoresAliasesPkcs12CertsInfoArgs> certsInfos) {
            return certsInfos(Output.of(certsInfos));
        }

        /**
         * @param certsInfos Chain of certificates under this alias.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certsInfos(KeystoresAliasesPkcs12CertsInfoArgs... certsInfos) {
            return certsInfos(List.of(certsInfos));
        }

        /**
         * @param environment Environment associated with the alias
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment associated with the alias
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param file PKCS12 file content
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file PKCS12 file content
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param filehash Hash of the pkcs file
         * 
         * @return builder
         * 
         */
        public Builder filehash(@Nullable Output<String> filehash) {
            $.filehash = filehash;
            return this;
        }

        /**
         * @param filehash Hash of the pkcs file
         * 
         * @return builder
         * 
         */
        public Builder filehash(String filehash) {
            return filehash(Output.of(filehash));
        }

        /**
         * @param keystore Keystore Name
         * 
         * @return builder
         * 
         */
        public Builder keystore(@Nullable Output<String> keystore) {
            $.keystore = keystore;
            return this;
        }

        /**
         * @param keystore Keystore Name
         * 
         * @return builder
         * 
         */
        public Builder keystore(String keystore) {
            return keystore(Output.of(keystore));
        }

        /**
         * @param orgId Organization ID associated with the alias, without organization/ prefix
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization ID associated with the alias, without organization/ prefix
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param password Password for the PKCS12 file if it&#39;s encrypted
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the PKCS12 file if it&#39;s encrypted
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param type Optional.Type of Alias
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Optional.Type of Alias
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public KeystoresAliasesPkcs12State build() {
            return $;
        }
    }

}
