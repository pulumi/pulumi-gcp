// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeBackupConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeBackupConfigArgs Empty = new VolumeBackupConfigArgs();

    /**
     * Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
     * 
     */
    @Import(name="backupPolicies")
    private @Nullable Output<List<String>> backupPolicies;

    /**
     * @return Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
     * 
     */
    public Optional<Output<List<String>>> backupPolicies() {
        return Optional.ofNullable(this.backupPolicies);
    }

    /**
     * ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
     * Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
     * 
     */
    @Import(name="backupVault")
    private @Nullable Output<String> backupVault;

    /**
     * @return ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
     * Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
     * 
     */
    public Optional<Output<String>> backupVault() {
        return Optional.ofNullable(this.backupVault);
    }

    /**
     * When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
     * 
     */
    @Import(name="scheduledBackupEnabled")
    private @Nullable Output<Boolean> scheduledBackupEnabled;

    /**
     * @return When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
     * 
     */
    public Optional<Output<Boolean>> scheduledBackupEnabled() {
        return Optional.ofNullable(this.scheduledBackupEnabled);
    }

    private VolumeBackupConfigArgs() {}

    private VolumeBackupConfigArgs(VolumeBackupConfigArgs $) {
        this.backupPolicies = $.backupPolicies;
        this.backupVault = $.backupVault;
        this.scheduledBackupEnabled = $.scheduledBackupEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeBackupConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeBackupConfigArgs $;

        public Builder() {
            $ = new VolumeBackupConfigArgs();
        }

        public Builder(VolumeBackupConfigArgs defaults) {
            $ = new VolumeBackupConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupPolicies Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
         * 
         * @return builder
         * 
         */
        public Builder backupPolicies(@Nullable Output<List<String>> backupPolicies) {
            $.backupPolicies = backupPolicies;
            return this;
        }

        /**
         * @param backupPolicies Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
         * 
         * @return builder
         * 
         */
        public Builder backupPolicies(List<String> backupPolicies) {
            return backupPolicies(Output.of(backupPolicies));
        }

        /**
         * @param backupPolicies Specify a single backup policy ID for scheduled backups. Format: `projects/{{projectId}}/locations/{{location}}/backupPolicies/{{backupPolicyName}}`
         * 
         * @return builder
         * 
         */
        public Builder backupPolicies(String... backupPolicies) {
            return backupPolicies(List.of(backupPolicies));
        }

        /**
         * @param backupVault ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
         * Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
         * 
         * @return builder
         * 
         */
        public Builder backupVault(@Nullable Output<String> backupVault) {
            $.backupVault = backupVault;
            return this;
        }

        /**
         * @param backupVault ID of the backup vault to use. A backup vault is reqired to create manual or scheduled backups.
         * Format: `projects/{{projectId}}/locations/{{location}}/backupVaults/{{backupVaultName}}`
         * 
         * @return builder
         * 
         */
        public Builder backupVault(String backupVault) {
            return backupVault(Output.of(backupVault));
        }

        /**
         * @param scheduledBackupEnabled When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
         * 
         * @return builder
         * 
         */
        public Builder scheduledBackupEnabled(@Nullable Output<Boolean> scheduledBackupEnabled) {
            $.scheduledBackupEnabled = scheduledBackupEnabled;
            return this;
        }

        /**
         * @param scheduledBackupEnabled When set to true, scheduled backup is enabled on the volume. Omit if no backupPolicy is specified.
         * 
         * @return builder
         * 
         */
        public Builder scheduledBackupEnabled(Boolean scheduledBackupEnabled) {
            return scheduledBackupEnabled(Output.of(scheduledBackupEnabled));
        }

        public VolumeBackupConfigArgs build() {
            return $;
        }
    }

}
