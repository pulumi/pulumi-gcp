// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigVsphereConfigTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VMwareNodePoolConfigVsphereConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareNodePoolConfigVsphereConfigArgs Empty = new VMwareNodePoolConfigVsphereConfigArgs();

    /**
     * (Output)
     * The name of the vCenter datastore. Inherited from the user cluster.
     * 
     */
    @Import(name="datastore")
    private @Nullable Output<String> datastore;

    /**
     * @return (Output)
     * The name of the vCenter datastore. Inherited from the user cluster.
     * 
     */
    public Optional<Output<String>> datastore() {
        return Optional.ofNullable(this.datastore);
    }

    /**
     * (Output)
     * Tags to apply to VMs.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_tags&#34;&gt;&lt;/a&gt;The `tags` block contains:
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<VMwareNodePoolConfigVsphereConfigTagArgs>> tags;

    /**
     * @return (Output)
     * Tags to apply to VMs.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_tags&#34;&gt;&lt;/a&gt;The `tags` block contains:
     * 
     */
    public Optional<Output<List<VMwareNodePoolConfigVsphereConfigTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private VMwareNodePoolConfigVsphereConfigArgs() {}

    private VMwareNodePoolConfigVsphereConfigArgs(VMwareNodePoolConfigVsphereConfigArgs $) {
        this.datastore = $.datastore;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareNodePoolConfigVsphereConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareNodePoolConfigVsphereConfigArgs $;

        public Builder() {
            $ = new VMwareNodePoolConfigVsphereConfigArgs();
        }

        public Builder(VMwareNodePoolConfigVsphereConfigArgs defaults) {
            $ = new VMwareNodePoolConfigVsphereConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datastore (Output)
         * The name of the vCenter datastore. Inherited from the user cluster.
         * 
         * @return builder
         * 
         */
        public Builder datastore(@Nullable Output<String> datastore) {
            $.datastore = datastore;
            return this;
        }

        /**
         * @param datastore (Output)
         * The name of the vCenter datastore. Inherited from the user cluster.
         * 
         * @return builder
         * 
         */
        public Builder datastore(String datastore) {
            return datastore(Output.of(datastore));
        }

        /**
         * @param tags (Output)
         * Tags to apply to VMs.
         * Structure is documented below.
         * 
         * &lt;a name=&#34;nested_tags&#34;&gt;&lt;/a&gt;The `tags` block contains:
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<VMwareNodePoolConfigVsphereConfigTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (Output)
         * Tags to apply to VMs.
         * Structure is documented below.
         * 
         * &lt;a name=&#34;nested_tags&#34;&gt;&lt;/a&gt;The `tags` block contains:
         * 
         * @return builder
         * 
         */
        public Builder tags(List<VMwareNodePoolConfigVsphereConfigTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags (Output)
         * Tags to apply to VMs.
         * Structure is documented below.
         * 
         * &lt;a name=&#34;nested_tags&#34;&gt;&lt;/a&gt;The `tags` block contains:
         * 
         * @return builder
         * 
         */
        public Builder tags(VMwareNodePoolConfigVsphereConfigTagArgs... tags) {
            return tags(List.of(tags));
        }

        public VMwareNodePoolConfigVsphereConfigArgs build() {
            return $;
        }
    }

}
