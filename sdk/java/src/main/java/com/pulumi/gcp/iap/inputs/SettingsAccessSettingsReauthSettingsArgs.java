// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SettingsAccessSettingsReauthSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingsAccessSettingsReauthSettingsArgs Empty = new SettingsAccessSettingsReauthSettingsArgs();

    /**
     * Reauth session lifetime, how long before a user has to reauthenticate again.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
     * Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="maxAge", required=true)
    private Output<String> maxAge;

    /**
     * @return Reauth session lifetime, how long before a user has to reauthenticate again.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
     * Example: &#34;3.5s&#34;.
     * 
     */
    public Output<String> maxAge() {
        return this.maxAge;
    }

    /**
     * Reauth method requested. The possible values are:
     * * `LOGIN`: Prompts the user to log in again.
     * * `SECURE_KEY`: User must use their secure key 2nd factor device.
     * * `ENROLLED_SECOND_FACTORS`: User can use any enabled 2nd factor.
     *   Possible values are: `LOGIN`, `SECURE_KEY`, `ENROLLED_SECOND_FACTORS`.
     * 
     */
    @Import(name="method", required=true)
    private Output<String> method;

    /**
     * @return Reauth method requested. The possible values are:
     * * `LOGIN`: Prompts the user to log in again.
     * * `SECURE_KEY`: User must use their secure key 2nd factor device.
     * * `ENROLLED_SECOND_FACTORS`: User can use any enabled 2nd factor.
     *   Possible values are: `LOGIN`, `SECURE_KEY`, `ENROLLED_SECOND_FACTORS`.
     * 
     */
    public Output<String> method() {
        return this.method;
    }

    /**
     * How IAP determines the effective policy in cases of hierarchical policies.
     * Policies are merged from higher in the hierarchy to lower in the hierarchy.
     * The possible values are:
     * * `MINIMUM`: This policy acts as a minimum to other policies, lower in the hierarchy.
     *   Effective policy may only be the same or stricter.
     * * `DEFAULT`: This policy acts as a default if no other reauth policy is set.
     *   Possible values are: `MINIMUM`, `DEFAULT`.
     * 
     */
    @Import(name="policyType", required=true)
    private Output<String> policyType;

    /**
     * @return How IAP determines the effective policy in cases of hierarchical policies.
     * Policies are merged from higher in the hierarchy to lower in the hierarchy.
     * The possible values are:
     * * `MINIMUM`: This policy acts as a minimum to other policies, lower in the hierarchy.
     *   Effective policy may only be the same or stricter.
     * * `DEFAULT`: This policy acts as a default if no other reauth policy is set.
     *   Possible values are: `MINIMUM`, `DEFAULT`.
     * 
     */
    public Output<String> policyType() {
        return this.policyType;
    }

    private SettingsAccessSettingsReauthSettingsArgs() {}

    private SettingsAccessSettingsReauthSettingsArgs(SettingsAccessSettingsReauthSettingsArgs $) {
        this.maxAge = $.maxAge;
        this.method = $.method;
        this.policyType = $.policyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingsAccessSettingsReauthSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingsAccessSettingsReauthSettingsArgs $;

        public Builder() {
            $ = new SettingsAccessSettingsReauthSettingsArgs();
        }

        public Builder(SettingsAccessSettingsReauthSettingsArgs defaults) {
            $ = new SettingsAccessSettingsReauthSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxAge Reauth session lifetime, how long before a user has to reauthenticate again.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
         * Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(Output<String> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        /**
         * @param maxAge Reauth session lifetime, how long before a user has to reauthenticate again.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
         * Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(String maxAge) {
            return maxAge(Output.of(maxAge));
        }

        /**
         * @param method Reauth method requested. The possible values are:
         * * `LOGIN`: Prompts the user to log in again.
         * * `SECURE_KEY`: User must use their secure key 2nd factor device.
         * * `ENROLLED_SECOND_FACTORS`: User can use any enabled 2nd factor.
         *   Possible values are: `LOGIN`, `SECURE_KEY`, `ENROLLED_SECOND_FACTORS`.
         * 
         * @return builder
         * 
         */
        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Reauth method requested. The possible values are:
         * * `LOGIN`: Prompts the user to log in again.
         * * `SECURE_KEY`: User must use their secure key 2nd factor device.
         * * `ENROLLED_SECOND_FACTORS`: User can use any enabled 2nd factor.
         *   Possible values are: `LOGIN`, `SECURE_KEY`, `ENROLLED_SECOND_FACTORS`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param policyType How IAP determines the effective policy in cases of hierarchical policies.
         * Policies are merged from higher in the hierarchy to lower in the hierarchy.
         * The possible values are:
         * * `MINIMUM`: This policy acts as a minimum to other policies, lower in the hierarchy.
         *   Effective policy may only be the same or stricter.
         * * `DEFAULT`: This policy acts as a default if no other reauth policy is set.
         *   Possible values are: `MINIMUM`, `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder policyType(Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType How IAP determines the effective policy in cases of hierarchical policies.
         * Policies are merged from higher in the hierarchy to lower in the hierarchy.
         * The possible values are:
         * * `MINIMUM`: This policy acts as a minimum to other policies, lower in the hierarchy.
         *   Effective policy may only be the same or stricter.
         * * `DEFAULT`: This policy acts as a default if no other reauth policy is set.
         *   Possible values are: `MINIMUM`, `DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        public SettingsAccessSettingsReauthSettingsArgs build() {
            if ($.maxAge == null) {
                throw new MissingRequiredPropertyException("SettingsAccessSettingsReauthSettingsArgs", "maxAge");
            }
            if ($.method == null) {
                throw new MissingRequiredPropertyException("SettingsAccessSettingsReauthSettingsArgs", "method");
            }
            if ($.policyType == null) {
                throw new MissingRequiredPropertyException("SettingsAccessSettingsReauthSettingsArgs", "policyType");
            }
            return $;
        }
    }

}
