// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHealthCheckHttpHealthCheck {
    private String host;
    private Integer port;
    private String portName;
    private String portSpecification;
    private String proxyHeader;
    private String requestPath;
    private String response;

    private GetHealthCheckHttpHealthCheck() {}
    public String host() {
        return this.host;
    }
    public Integer port() {
        return this.port;
    }
    public String portName() {
        return this.portName;
    }
    public String portSpecification() {
        return this.portSpecification;
    }
    public String proxyHeader() {
        return this.proxyHeader;
    }
    public String requestPath() {
        return this.requestPath;
    }
    public String response() {
        return this.response;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHealthCheckHttpHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String host;
        private Integer port;
        private String portName;
        private String portSpecification;
        private String proxyHeader;
        private String requestPath;
        private String response;
        public Builder() {}
        public Builder(GetHealthCheckHttpHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.port = defaults.port;
    	      this.portName = defaults.portName;
    	      this.portSpecification = defaults.portSpecification;
    	      this.proxyHeader = defaults.proxyHeader;
    	      this.requestPath = defaults.requestPath;
    	      this.response = defaults.response;
        }

        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portName(String portName) {
            if (portName == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "portName");
            }
            this.portName = portName;
            return this;
        }
        @CustomType.Setter
        public Builder portSpecification(String portSpecification) {
            if (portSpecification == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "portSpecification");
            }
            this.portSpecification = portSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder proxyHeader(String proxyHeader) {
            if (proxyHeader == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "proxyHeader");
            }
            this.proxyHeader = proxyHeader;
            return this;
        }
        @CustomType.Setter
        public Builder requestPath(String requestPath) {
            if (requestPath == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "requestPath");
            }
            this.requestPath = requestPath;
            return this;
        }
        @CustomType.Setter
        public Builder response(String response) {
            if (response == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckHttpHealthCheck", "response");
            }
            this.response = response;
            return this;
        }
        public GetHealthCheckHttpHealthCheck build() {
            final var _resultValue = new GetHealthCheckHttpHealthCheck();
            _resultValue.host = host;
            _resultValue.port = port;
            _resultValue.portName = portName;
            _resultValue.portSpecification = portSpecification;
            _resultValue.proxyHeader = proxyHeader;
            _resultValue.requestPath = requestPath;
            _resultValue.response = response;
            return _resultValue;
        }
    }
}
