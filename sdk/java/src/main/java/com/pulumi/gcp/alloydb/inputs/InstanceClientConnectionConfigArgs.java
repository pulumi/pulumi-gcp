// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.alloydb.inputs.InstanceClientConnectionConfigSslConfigArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceClientConnectionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceClientConnectionConfigArgs Empty = new InstanceClientConnectionConfigArgs();

    /**
     * Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
     * 
     */
    @Import(name="requireConnectors")
    private @Nullable Output<Boolean> requireConnectors;

    /**
     * @return Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
     * 
     */
    public Optional<Output<Boolean>> requireConnectors() {
        return Optional.ofNullable(this.requireConnectors);
    }

    /**
     * SSL config option for this instance.
     * Structure is documented below.
     * 
     */
    @Import(name="sslConfig")
    private @Nullable Output<InstanceClientConnectionConfigSslConfigArgs> sslConfig;

    /**
     * @return SSL config option for this instance.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceClientConnectionConfigSslConfigArgs>> sslConfig() {
        return Optional.ofNullable(this.sslConfig);
    }

    private InstanceClientConnectionConfigArgs() {}

    private InstanceClientConnectionConfigArgs(InstanceClientConnectionConfigArgs $) {
        this.requireConnectors = $.requireConnectors;
        this.sslConfig = $.sslConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceClientConnectionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceClientConnectionConfigArgs $;

        public Builder() {
            $ = new InstanceClientConnectionConfigArgs();
        }

        public Builder(InstanceClientConnectionConfigArgs defaults) {
            $ = new InstanceClientConnectionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param requireConnectors Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder requireConnectors(@Nullable Output<Boolean> requireConnectors) {
            $.requireConnectors = requireConnectors;
            return this;
        }

        /**
         * @param requireConnectors Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder requireConnectors(Boolean requireConnectors) {
            return requireConnectors(Output.of(requireConnectors));
        }

        /**
         * @param sslConfig SSL config option for this instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslConfig(@Nullable Output<InstanceClientConnectionConfigSslConfigArgs> sslConfig) {
            $.sslConfig = sslConfig;
            return this;
        }

        /**
         * @param sslConfig SSL config option for this instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslConfig(InstanceClientConnectionConfigSslConfigArgs sslConfig) {
            return sslConfig(Output.of(sslConfig));
        }

        public InstanceClientConnectionConfigArgs build() {
            return $;
        }
    }

}
