// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.apphub.inputs.ApplicationAttributesArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationState Empty = new ApplicationState();

    /**
     * Required. The Application identifier.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return Required. The Application identifier.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Consumer provided attributes.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<ApplicationAttributesArgs> attributes;

    /**
     * @return Consumer provided attributes.
     * 
     */
    public Optional<Output<ApplicationAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Output only. Create time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Create time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Optional. User-defined description of an Application.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. User-defined description of an Application.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. User-defined name for the Application.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. User-defined name for the Application.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Part of `parent`. See documentation of `projectsId`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Part of `parent`. See documentation of `projectsId`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of an Application. Format:
     * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of an Application. Format:
     * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Scope of an application.
     * Structure is documented below.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<ApplicationScopeArgs> scope;

    /**
     * @return Scope of an application.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ApplicationScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Output only. Application state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. Application state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. A universally unique identifier (in UUID4 format) for the `Application`.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. A universally unique identifier (in UUID4 format) for the `Application`.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. Update time.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. Update time.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ApplicationState() {}

    private ApplicationState(ApplicationState $) {
        this.applicationId = $.applicationId;
        this.attributes = $.attributes;
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.scope = $.scope;
        this.state = $.state;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationState $;

        public Builder() {
            $ = new ApplicationState();
        }

        public Builder(ApplicationState defaults) {
            $ = new ApplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Required. The Application identifier.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Required. The Application identifier.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param attributes Consumer provided attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<ApplicationAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Consumer provided attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(ApplicationAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Optional. User-defined description of an Application.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. User-defined description of an Application.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Optional. User-defined name for the Application.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. User-defined name for the Application.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location Part of `parent`. See documentation of `projectsId`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Part of `parent`. See documentation of `projectsId`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of an Application. Format:
         * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of an Application. Format:
         * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scope Scope of an application.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<ApplicationScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of an application.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scope(ApplicationScopeArgs scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param state Output only. Application state.
         * Possible values:
         * STATE_UNSPECIFIED
         * CREATING
         * ACTIVE
         * DELETING
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. Application state.
         * Possible values:
         * STATE_UNSPECIFIED
         * CREATING
         * ACTIVE
         * DELETING
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid Output only. A universally unique identifier (in UUID4 format) for the `Application`.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. A universally unique identifier (in UUID4 format) for the `Application`.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. Update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. Update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ApplicationState build() {
            return $;
        }
    }

}
