// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudfunctionsv2.outputs.GetFunctionEventTriggerEventFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFunctionEventTrigger {
    private List<GetFunctionEventTriggerEventFilter> eventFilters;
    private String eventType;
    private String pubsubTopic;
    private String retryPolicy;
    private String serviceAccountEmail;
    private String trigger;
    private String triggerRegion;

    private GetFunctionEventTrigger() {}
    public List<GetFunctionEventTriggerEventFilter> eventFilters() {
        return this.eventFilters;
    }
    public String eventType() {
        return this.eventType;
    }
    public String pubsubTopic() {
        return this.pubsubTopic;
    }
    public String retryPolicy() {
        return this.retryPolicy;
    }
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }
    public String trigger() {
        return this.trigger;
    }
    public String triggerRegion() {
        return this.triggerRegion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionEventTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetFunctionEventTriggerEventFilter> eventFilters;
        private String eventType;
        private String pubsubTopic;
        private String retryPolicy;
        private String serviceAccountEmail;
        private String trigger;
        private String triggerRegion;
        public Builder() {}
        public Builder(GetFunctionEventTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventFilters = defaults.eventFilters;
    	      this.eventType = defaults.eventType;
    	      this.pubsubTopic = defaults.pubsubTopic;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.trigger = defaults.trigger;
    	      this.triggerRegion = defaults.triggerRegion;
        }

        @CustomType.Setter
        public Builder eventFilters(List<GetFunctionEventTriggerEventFilter> eventFilters) {
            if (eventFilters == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "eventFilters");
            }
            this.eventFilters = eventFilters;
            return this;
        }
        public Builder eventFilters(GetFunctionEventTriggerEventFilter... eventFilters) {
            return eventFilters(List.of(eventFilters));
        }
        @CustomType.Setter
        public Builder eventType(String eventType) {
            if (eventType == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "eventType");
            }
            this.eventType = eventType;
            return this;
        }
        @CustomType.Setter
        public Builder pubsubTopic(String pubsubTopic) {
            if (pubsubTopic == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "pubsubTopic");
            }
            this.pubsubTopic = pubsubTopic;
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicy(String retryPolicy) {
            if (retryPolicy == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "retryPolicy");
            }
            this.retryPolicy = retryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            if (serviceAccountEmail == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "serviceAccountEmail");
            }
            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder trigger(String trigger) {
            if (trigger == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "trigger");
            }
            this.trigger = trigger;
            return this;
        }
        @CustomType.Setter
        public Builder triggerRegion(String triggerRegion) {
            if (triggerRegion == null) {
              throw new MissingRequiredPropertyException("GetFunctionEventTrigger", "triggerRegion");
            }
            this.triggerRegion = triggerRegion;
            return this;
        }
        public GetFunctionEventTrigger build() {
            final var _resultValue = new GetFunctionEventTrigger();
            _resultValue.eventFilters = eventFilters;
            _resultValue.eventType = eventType;
            _resultValue.pubsubTopic = pubsubTopic;
            _resultValue.retryPolicy = retryPolicy;
            _resultValue.serviceAccountEmail = serviceAccountEmail;
            _resultValue.trigger = trigger;
            _resultValue.triggerRegion = triggerRegion;
            return _resultValue;
        }
    }
}
