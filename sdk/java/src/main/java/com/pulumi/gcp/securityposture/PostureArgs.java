// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securityposture;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostureArgs extends com.pulumi.resources.ResourceArgs {

    public static final PostureArgs Empty = new PostureArgs();

    /**
     * Description of the posture.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the posture.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Location of the resource, eg: global.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location of the resource, eg: global.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * List of policy sets for the posture.
     * Structure is documented below.
     * 
     */
    @Import(name="policySets", required=true)
    private Output<List<PosturePolicySetArgs>> policySets;

    /**
     * @return List of policy sets for the posture.
     * Structure is documented below.
     * 
     */
    public Output<List<PosturePolicySetArgs>> policySets() {
        return this.policySets;
    }

    /**
     * Id of the posture. It is an immutable field.
     * 
     */
    @Import(name="postureId", required=true)
    private Output<String> postureId;

    /**
     * @return Id of the posture. It is an immutable field.
     * 
     */
    public Output<String> postureId() {
        return this.postureId;
    }

    /**
     * State of the posture. Update to state field should not be triggered along with
     * with other field updates.
     * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return State of the posture. Update to state field should not be triggered along with
     * with other field updates.
     * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    private PostureArgs() {}

    private PostureArgs(PostureArgs $) {
        this.description = $.description;
        this.location = $.location;
        this.parent = $.parent;
        this.policySets = $.policySets;
        this.postureId = $.postureId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostureArgs $;

        public Builder() {
            $ = new PostureArgs();
        }

        public Builder(PostureArgs defaults) {
            $ = new PostureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the posture.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the posture.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param location Location of the resource, eg: global.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource, eg: global.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param policySets List of policy sets for the posture.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policySets(Output<List<PosturePolicySetArgs>> policySets) {
            $.policySets = policySets;
            return this;
        }

        /**
         * @param policySets List of policy sets for the posture.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policySets(List<PosturePolicySetArgs> policySets) {
            return policySets(Output.of(policySets));
        }

        /**
         * @param policySets List of policy sets for the posture.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policySets(PosturePolicySetArgs... policySets) {
            return policySets(List.of(policySets));
        }

        /**
         * @param postureId Id of the posture. It is an immutable field.
         * 
         * @return builder
         * 
         */
        public Builder postureId(Output<String> postureId) {
            $.postureId = postureId;
            return this;
        }

        /**
         * @param postureId Id of the posture. It is an immutable field.
         * 
         * @return builder
         * 
         */
        public Builder postureId(String postureId) {
            return postureId(Output.of(postureId));
        }

        /**
         * @param state State of the posture. Update to state field should not be triggered along with
         * with other field updates.
         * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the posture. Update to state field should not be triggered along with
         * with other field updates.
         * Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public PostureArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PostureArgs", "location");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("PostureArgs", "parent");
            }
            if ($.policySets == null) {
                throw new MissingRequiredPropertyException("PostureArgs", "policySets");
            }
            if ($.postureId == null) {
                throw new MissingRequiredPropertyException("PostureArgs", "postureId");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("PostureArgs", "state");
            }
            return $;
        }
    }

}
