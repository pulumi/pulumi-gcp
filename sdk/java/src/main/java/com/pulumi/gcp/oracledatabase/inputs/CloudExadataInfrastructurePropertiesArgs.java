// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.inputs.CloudExadataInfrastructurePropertiesCustomerContactArgs;
import com.pulumi.gcp.oracledatabase.inputs.CloudExadataInfrastructurePropertiesMaintenanceWindowArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudExadataInfrastructurePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudExadataInfrastructurePropertiesArgs Empty = new CloudExadataInfrastructurePropertiesArgs();

    /**
     * (Output)
     * The requested number of additional storage servers activated for the
     * Exadata Infrastructure.
     * 
     */
    @Import(name="activatedStorageCount")
    private @Nullable Output<Integer> activatedStorageCount;

    /**
     * @return (Output)
     * The requested number of additional storage servers activated for the
     * Exadata Infrastructure.
     * 
     */
    public Optional<Output<Integer>> activatedStorageCount() {
        return Optional.ofNullable(this.activatedStorageCount);
    }

    /**
     * (Output)
     * The requested number of additional storage servers for the Exadata
     * Infrastructure.
     * 
     */
    @Import(name="additionalStorageCount")
    private @Nullable Output<Integer> additionalStorageCount;

    /**
     * @return (Output)
     * The requested number of additional storage servers for the Exadata
     * Infrastructure.
     * 
     */
    public Optional<Output<Integer>> additionalStorageCount() {
        return Optional.ofNullable(this.additionalStorageCount);
    }

    /**
     * (Output)
     * The available storage can be allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    @Import(name="availableStorageSizeGb")
    private @Nullable Output<Integer> availableStorageSizeGb;

    /**
     * @return (Output)
     * The available storage can be allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    public Optional<Output<Integer>> availableStorageSizeGb() {
        return Optional.ofNullable(this.availableStorageSizeGb);
    }

    /**
     * The number of compute servers for the Exadata Infrastructure.
     * 
     */
    @Import(name="computeCount")
    private @Nullable Output<Integer> computeCount;

    /**
     * @return The number of compute servers for the Exadata Infrastructure.
     * 
     */
    public Optional<Output<Integer>> computeCount() {
        return Optional.ofNullable(this.computeCount);
    }

    /**
     * (Output)
     * The number of enabled CPU cores.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return (Output)
     * The number of enabled CPU cores.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * The list of customer contacts.
     * Structure is documented below.
     * 
     */
    @Import(name="customerContacts")
    private @Nullable Output<List<CloudExadataInfrastructurePropertiesCustomerContactArgs>> customerContacts;

    /**
     * @return The list of customer contacts.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CloudExadataInfrastructurePropertiesCustomerContactArgs>>> customerContacts() {
        return Optional.ofNullable(this.customerContacts);
    }

    /**
     * (Output)
     * Size, in terabytes, of the DATA disk group.
     * 
     */
    @Import(name="dataStorageSizeTb")
    private @Nullable Output<Double> dataStorageSizeTb;

    /**
     * @return (Output)
     * Size, in terabytes, of the DATA disk group.
     * 
     */
    public Optional<Output<Double>> dataStorageSizeTb() {
        return Optional.ofNullable(this.dataStorageSizeTb);
    }

    /**
     * (Output)
     * The local node storage allocated in GBs.
     * 
     */
    @Import(name="dbNodeStorageSizeGb")
    private @Nullable Output<Integer> dbNodeStorageSizeGb;

    /**
     * @return (Output)
     * The local node storage allocated in GBs.
     * 
     */
    public Optional<Output<Integer>> dbNodeStorageSizeGb() {
        return Optional.ofNullable(this.dbNodeStorageSizeGb);
    }

    /**
     * (Output)
     * The software version of the database servers (dom0) in the Exadata
     * Infrastructure.
     * 
     */
    @Import(name="dbServerVersion")
    private @Nullable Output<String> dbServerVersion;

    /**
     * @return (Output)
     * The software version of the database servers (dom0) in the Exadata
     * Infrastructure.
     * 
     */
    public Optional<Output<String>> dbServerVersion() {
        return Optional.ofNullable(this.dbServerVersion);
    }

    /**
     * Maintenance window as defined by Oracle.
     * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
     * Structure is documented below.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<CloudExadataInfrastructurePropertiesMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return Maintenance window as defined by Oracle.
     * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
     * Structure is documented below.
     * 
     */
    public Optional<Output<CloudExadataInfrastructurePropertiesMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * (Output)
     * The total number of CPU cores available.
     * 
     */
    @Import(name="maxCpuCount")
    private @Nullable Output<Integer> maxCpuCount;

    /**
     * @return (Output)
     * The total number of CPU cores available.
     * 
     */
    public Optional<Output<Integer>> maxCpuCount() {
        return Optional.ofNullable(this.maxCpuCount);
    }

    /**
     * (Output)
     * The total available DATA disk group size.
     * 
     */
    @Import(name="maxDataStorageTb")
    private @Nullable Output<Double> maxDataStorageTb;

    /**
     * @return (Output)
     * The total available DATA disk group size.
     * 
     */
    public Optional<Output<Double>> maxDataStorageTb() {
        return Optional.ofNullable(this.maxDataStorageTb);
    }

    /**
     * (Output)
     * The total local node storage available in GBs.
     * 
     */
    @Import(name="maxDbNodeStorageSizeGb")
    private @Nullable Output<Integer> maxDbNodeStorageSizeGb;

    /**
     * @return (Output)
     * The total local node storage available in GBs.
     * 
     */
    public Optional<Output<Integer>> maxDbNodeStorageSizeGb() {
        return Optional.ofNullable(this.maxDbNodeStorageSizeGb);
    }

    /**
     * (Output)
     * The total memory available in GBs.
     * 
     */
    @Import(name="maxMemoryGb")
    private @Nullable Output<Integer> maxMemoryGb;

    /**
     * @return (Output)
     * The total memory available in GBs.
     * 
     */
    public Optional<Output<Integer>> maxMemoryGb() {
        return Optional.ofNullable(this.maxMemoryGb);
    }

    /**
     * (Output)
     * The memory allocated in GBs.
     * 
     */
    @Import(name="memorySizeGb")
    private @Nullable Output<Integer> memorySizeGb;

    /**
     * @return (Output)
     * The memory allocated in GBs.
     * 
     */
    public Optional<Output<Integer>> memorySizeGb() {
        return Optional.ofNullable(this.memorySizeGb);
    }

    /**
     * (Output)
     * The monthly software version of the database servers (dom0)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    @Import(name="monthlyDbServerVersion")
    private @Nullable Output<String> monthlyDbServerVersion;

    /**
     * @return (Output)
     * The monthly software version of the database servers (dom0)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    public Optional<Output<String>> monthlyDbServerVersion() {
        return Optional.ofNullable(this.monthlyDbServerVersion);
    }

    /**
     * (Output)
     * The monthly software version of the storage servers (cells)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    @Import(name="monthlyStorageServerVersion")
    private @Nullable Output<String> monthlyStorageServerVersion;

    /**
     * @return (Output)
     * The monthly software version of the storage servers (cells)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    public Optional<Output<String>> monthlyStorageServerVersion() {
        return Optional.ofNullable(this.monthlyStorageServerVersion);
    }

    /**
     * (Output)
     * The OCID of the next maintenance run.
     * 
     */
    @Import(name="nextMaintenanceRunId")
    private @Nullable Output<String> nextMaintenanceRunId;

    /**
     * @return (Output)
     * The OCID of the next maintenance run.
     * 
     */
    public Optional<Output<String>> nextMaintenanceRunId() {
        return Optional.ofNullable(this.nextMaintenanceRunId);
    }

    /**
     * (Output)
     * The time when the next maintenance run will occur.
     * 
     */
    @Import(name="nextMaintenanceRunTime")
    private @Nullable Output<String> nextMaintenanceRunTime;

    /**
     * @return (Output)
     * The time when the next maintenance run will occur.
     * 
     */
    public Optional<Output<String>> nextMaintenanceRunTime() {
        return Optional.ofNullable(this.nextMaintenanceRunTime);
    }

    /**
     * (Output)
     * The time when the next security maintenance run will occur.
     * 
     */
    @Import(name="nextSecurityMaintenanceRunTime")
    private @Nullable Output<String> nextSecurityMaintenanceRunTime;

    /**
     * @return (Output)
     * The time when the next security maintenance run will occur.
     * 
     */
    public Optional<Output<String>> nextSecurityMaintenanceRunTime() {
        return Optional.ofNullable(this.nextSecurityMaintenanceRunTime);
    }

    /**
     * (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    @Import(name="ociUrl")
    private @Nullable Output<String> ociUrl;

    /**
     * @return (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    public Optional<Output<String>> ociUrl() {
        return Optional.ofNullable(this.ociUrl);
    }

    /**
     * (Output)
     * OCID of created infra.
     * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return (Output)
     * OCID of created infra.
     * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * The shape of the Exadata Infrastructure. The shape determines the
     * amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    @Import(name="shape", required=true)
    private Output<String> shape;

    /**
     * @return The shape of the Exadata Infrastructure. The shape determines the
     * amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    public Output<String> shape() {
        return this.shape;
    }

    /**
     * (Output)
     * The current lifecycle state of the Exadata Infrastructure.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * The current lifecycle state of the Exadata Infrastructure.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The number of Cloud Exadata storage servers for the Exadata Infrastructure.
     * 
     */
    @Import(name="storageCount")
    private @Nullable Output<Integer> storageCount;

    /**
     * @return The number of Cloud Exadata storage servers for the Exadata Infrastructure.
     * 
     */
    public Optional<Output<Integer>> storageCount() {
        return Optional.ofNullable(this.storageCount);
    }

    /**
     * (Output)
     * The software version of the storage servers (cells) in the Exadata
     * Infrastructure.
     * 
     */
    @Import(name="storageServerVersion")
    private @Nullable Output<String> storageServerVersion;

    /**
     * @return (Output)
     * The software version of the storage servers (cells) in the Exadata
     * Infrastructure.
     * 
     */
    public Optional<Output<String>> storageServerVersion() {
        return Optional.ofNullable(this.storageServerVersion);
    }

    /**
     * The total storage allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    @Import(name="totalStorageSizeGb")
    private @Nullable Output<Integer> totalStorageSizeGb;

    /**
     * @return The total storage allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    public Optional<Output<Integer>> totalStorageSizeGb() {
        return Optional.ofNullable(this.totalStorageSizeGb);
    }

    private CloudExadataInfrastructurePropertiesArgs() {}

    private CloudExadataInfrastructurePropertiesArgs(CloudExadataInfrastructurePropertiesArgs $) {
        this.activatedStorageCount = $.activatedStorageCount;
        this.additionalStorageCount = $.additionalStorageCount;
        this.availableStorageSizeGb = $.availableStorageSizeGb;
        this.computeCount = $.computeCount;
        this.cpuCount = $.cpuCount;
        this.customerContacts = $.customerContacts;
        this.dataStorageSizeTb = $.dataStorageSizeTb;
        this.dbNodeStorageSizeGb = $.dbNodeStorageSizeGb;
        this.dbServerVersion = $.dbServerVersion;
        this.maintenanceWindow = $.maintenanceWindow;
        this.maxCpuCount = $.maxCpuCount;
        this.maxDataStorageTb = $.maxDataStorageTb;
        this.maxDbNodeStorageSizeGb = $.maxDbNodeStorageSizeGb;
        this.maxMemoryGb = $.maxMemoryGb;
        this.memorySizeGb = $.memorySizeGb;
        this.monthlyDbServerVersion = $.monthlyDbServerVersion;
        this.monthlyStorageServerVersion = $.monthlyStorageServerVersion;
        this.nextMaintenanceRunId = $.nextMaintenanceRunId;
        this.nextMaintenanceRunTime = $.nextMaintenanceRunTime;
        this.nextSecurityMaintenanceRunTime = $.nextSecurityMaintenanceRunTime;
        this.ociUrl = $.ociUrl;
        this.ocid = $.ocid;
        this.shape = $.shape;
        this.state = $.state;
        this.storageCount = $.storageCount;
        this.storageServerVersion = $.storageServerVersion;
        this.totalStorageSizeGb = $.totalStorageSizeGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudExadataInfrastructurePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudExadataInfrastructurePropertiesArgs $;

        public Builder() {
            $ = new CloudExadataInfrastructurePropertiesArgs();
        }

        public Builder(CloudExadataInfrastructurePropertiesArgs defaults) {
            $ = new CloudExadataInfrastructurePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activatedStorageCount (Output)
         * The requested number of additional storage servers activated for the
         * Exadata Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder activatedStorageCount(@Nullable Output<Integer> activatedStorageCount) {
            $.activatedStorageCount = activatedStorageCount;
            return this;
        }

        /**
         * @param activatedStorageCount (Output)
         * The requested number of additional storage servers activated for the
         * Exadata Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder activatedStorageCount(Integer activatedStorageCount) {
            return activatedStorageCount(Output.of(activatedStorageCount));
        }

        /**
         * @param additionalStorageCount (Output)
         * The requested number of additional storage servers for the Exadata
         * Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder additionalStorageCount(@Nullable Output<Integer> additionalStorageCount) {
            $.additionalStorageCount = additionalStorageCount;
            return this;
        }

        /**
         * @param additionalStorageCount (Output)
         * The requested number of additional storage servers for the Exadata
         * Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            return additionalStorageCount(Output.of(additionalStorageCount));
        }

        /**
         * @param availableStorageSizeGb (Output)
         * The available storage can be allocated to the Exadata Infrastructure
         * resource, in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder availableStorageSizeGb(@Nullable Output<Integer> availableStorageSizeGb) {
            $.availableStorageSizeGb = availableStorageSizeGb;
            return this;
        }

        /**
         * @param availableStorageSizeGb (Output)
         * The available storage can be allocated to the Exadata Infrastructure
         * resource, in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder availableStorageSizeGb(Integer availableStorageSizeGb) {
            return availableStorageSizeGb(Output.of(availableStorageSizeGb));
        }

        /**
         * @param computeCount The number of compute servers for the Exadata Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(@Nullable Output<Integer> computeCount) {
            $.computeCount = computeCount;
            return this;
        }

        /**
         * @param computeCount The number of compute servers for the Exadata Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder computeCount(Integer computeCount) {
            return computeCount(Output.of(computeCount));
        }

        /**
         * @param cpuCount (Output)
         * The number of enabled CPU cores.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount (Output)
         * The number of enabled CPU cores.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param customerContacts The list of customer contacts.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerContacts(@Nullable Output<List<CloudExadataInfrastructurePropertiesCustomerContactArgs>> customerContacts) {
            $.customerContacts = customerContacts;
            return this;
        }

        /**
         * @param customerContacts The list of customer contacts.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerContacts(List<CloudExadataInfrastructurePropertiesCustomerContactArgs> customerContacts) {
            return customerContacts(Output.of(customerContacts));
        }

        /**
         * @param customerContacts The list of customer contacts.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerContacts(CloudExadataInfrastructurePropertiesCustomerContactArgs... customerContacts) {
            return customerContacts(List.of(customerContacts));
        }

        /**
         * @param dataStorageSizeTb (Output)
         * Size, in terabytes, of the DATA disk group.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeTb(@Nullable Output<Double> dataStorageSizeTb) {
            $.dataStorageSizeTb = dataStorageSizeTb;
            return this;
        }

        /**
         * @param dataStorageSizeTb (Output)
         * Size, in terabytes, of the DATA disk group.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeTb(Double dataStorageSizeTb) {
            return dataStorageSizeTb(Output.of(dataStorageSizeTb));
        }

        /**
         * @param dbNodeStorageSizeGb (Output)
         * The local node storage allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeStorageSizeGb(@Nullable Output<Integer> dbNodeStorageSizeGb) {
            $.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            return this;
        }

        /**
         * @param dbNodeStorageSizeGb (Output)
         * The local node storage allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder dbNodeStorageSizeGb(Integer dbNodeStorageSizeGb) {
            return dbNodeStorageSizeGb(Output.of(dbNodeStorageSizeGb));
        }

        /**
         * @param dbServerVersion (Output)
         * The software version of the database servers (dom0) in the Exadata
         * Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder dbServerVersion(@Nullable Output<String> dbServerVersion) {
            $.dbServerVersion = dbServerVersion;
            return this;
        }

        /**
         * @param dbServerVersion (Output)
         * The software version of the database servers (dom0) in the Exadata
         * Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder dbServerVersion(String dbServerVersion) {
            return dbServerVersion(Output.of(dbServerVersion));
        }

        /**
         * @param maintenanceWindow Maintenance window as defined by Oracle.
         * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<CloudExadataInfrastructurePropertiesMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow Maintenance window as defined by Oracle.
         * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(CloudExadataInfrastructurePropertiesMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param maxCpuCount (Output)
         * The total number of CPU cores available.
         * 
         * @return builder
         * 
         */
        public Builder maxCpuCount(@Nullable Output<Integer> maxCpuCount) {
            $.maxCpuCount = maxCpuCount;
            return this;
        }

        /**
         * @param maxCpuCount (Output)
         * The total number of CPU cores available.
         * 
         * @return builder
         * 
         */
        public Builder maxCpuCount(Integer maxCpuCount) {
            return maxCpuCount(Output.of(maxCpuCount));
        }

        /**
         * @param maxDataStorageTb (Output)
         * The total available DATA disk group size.
         * 
         * @return builder
         * 
         */
        public Builder maxDataStorageTb(@Nullable Output<Double> maxDataStorageTb) {
            $.maxDataStorageTb = maxDataStorageTb;
            return this;
        }

        /**
         * @param maxDataStorageTb (Output)
         * The total available DATA disk group size.
         * 
         * @return builder
         * 
         */
        public Builder maxDataStorageTb(Double maxDataStorageTb) {
            return maxDataStorageTb(Output.of(maxDataStorageTb));
        }

        /**
         * @param maxDbNodeStorageSizeGb (Output)
         * The total local node storage available in GBs.
         * 
         * @return builder
         * 
         */
        public Builder maxDbNodeStorageSizeGb(@Nullable Output<Integer> maxDbNodeStorageSizeGb) {
            $.maxDbNodeStorageSizeGb = maxDbNodeStorageSizeGb;
            return this;
        }

        /**
         * @param maxDbNodeStorageSizeGb (Output)
         * The total local node storage available in GBs.
         * 
         * @return builder
         * 
         */
        public Builder maxDbNodeStorageSizeGb(Integer maxDbNodeStorageSizeGb) {
            return maxDbNodeStorageSizeGb(Output.of(maxDbNodeStorageSizeGb));
        }

        /**
         * @param maxMemoryGb (Output)
         * The total memory available in GBs.
         * 
         * @return builder
         * 
         */
        public Builder maxMemoryGb(@Nullable Output<Integer> maxMemoryGb) {
            $.maxMemoryGb = maxMemoryGb;
            return this;
        }

        /**
         * @param maxMemoryGb (Output)
         * The total memory available in GBs.
         * 
         * @return builder
         * 
         */
        public Builder maxMemoryGb(Integer maxMemoryGb) {
            return maxMemoryGb(Output.of(maxMemoryGb));
        }

        /**
         * @param memorySizeGb (Output)
         * The memory allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeGb(@Nullable Output<Integer> memorySizeGb) {
            $.memorySizeGb = memorySizeGb;
            return this;
        }

        /**
         * @param memorySizeGb (Output)
         * The memory allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeGb(Integer memorySizeGb) {
            return memorySizeGb(Output.of(memorySizeGb));
        }

        /**
         * @param monthlyDbServerVersion (Output)
         * The monthly software version of the database servers (dom0)
         * in the Exadata Infrastructure. Example: 20.1.15
         * 
         * @return builder
         * 
         */
        public Builder monthlyDbServerVersion(@Nullable Output<String> monthlyDbServerVersion) {
            $.monthlyDbServerVersion = monthlyDbServerVersion;
            return this;
        }

        /**
         * @param monthlyDbServerVersion (Output)
         * The monthly software version of the database servers (dom0)
         * in the Exadata Infrastructure. Example: 20.1.15
         * 
         * @return builder
         * 
         */
        public Builder monthlyDbServerVersion(String monthlyDbServerVersion) {
            return monthlyDbServerVersion(Output.of(monthlyDbServerVersion));
        }

        /**
         * @param monthlyStorageServerVersion (Output)
         * The monthly software version of the storage servers (cells)
         * in the Exadata Infrastructure. Example: 20.1.15
         * 
         * @return builder
         * 
         */
        public Builder monthlyStorageServerVersion(@Nullable Output<String> monthlyStorageServerVersion) {
            $.monthlyStorageServerVersion = monthlyStorageServerVersion;
            return this;
        }

        /**
         * @param monthlyStorageServerVersion (Output)
         * The monthly software version of the storage servers (cells)
         * in the Exadata Infrastructure. Example: 20.1.15
         * 
         * @return builder
         * 
         */
        public Builder monthlyStorageServerVersion(String monthlyStorageServerVersion) {
            return monthlyStorageServerVersion(Output.of(monthlyStorageServerVersion));
        }

        /**
         * @param nextMaintenanceRunId (Output)
         * The OCID of the next maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder nextMaintenanceRunId(@Nullable Output<String> nextMaintenanceRunId) {
            $.nextMaintenanceRunId = nextMaintenanceRunId;
            return this;
        }

        /**
         * @param nextMaintenanceRunId (Output)
         * The OCID of the next maintenance run.
         * 
         * @return builder
         * 
         */
        public Builder nextMaintenanceRunId(String nextMaintenanceRunId) {
            return nextMaintenanceRunId(Output.of(nextMaintenanceRunId));
        }

        /**
         * @param nextMaintenanceRunTime (Output)
         * The time when the next maintenance run will occur.
         * 
         * @return builder
         * 
         */
        public Builder nextMaintenanceRunTime(@Nullable Output<String> nextMaintenanceRunTime) {
            $.nextMaintenanceRunTime = nextMaintenanceRunTime;
            return this;
        }

        /**
         * @param nextMaintenanceRunTime (Output)
         * The time when the next maintenance run will occur.
         * 
         * @return builder
         * 
         */
        public Builder nextMaintenanceRunTime(String nextMaintenanceRunTime) {
            return nextMaintenanceRunTime(Output.of(nextMaintenanceRunTime));
        }

        /**
         * @param nextSecurityMaintenanceRunTime (Output)
         * The time when the next security maintenance run will occur.
         * 
         * @return builder
         * 
         */
        public Builder nextSecurityMaintenanceRunTime(@Nullable Output<String> nextSecurityMaintenanceRunTime) {
            $.nextSecurityMaintenanceRunTime = nextSecurityMaintenanceRunTime;
            return this;
        }

        /**
         * @param nextSecurityMaintenanceRunTime (Output)
         * The time when the next security maintenance run will occur.
         * 
         * @return builder
         * 
         */
        public Builder nextSecurityMaintenanceRunTime(String nextSecurityMaintenanceRunTime) {
            return nextSecurityMaintenanceRunTime(Output.of(nextSecurityMaintenanceRunTime));
        }

        /**
         * @param ociUrl (Output)
         * Deep link to the OCI console to view this resource.
         * 
         * @return builder
         * 
         */
        public Builder ociUrl(@Nullable Output<String> ociUrl) {
            $.ociUrl = ociUrl;
            return this;
        }

        /**
         * @param ociUrl (Output)
         * Deep link to the OCI console to view this resource.
         * 
         * @return builder
         * 
         */
        public Builder ociUrl(String ociUrl) {
            return ociUrl(Output.of(ociUrl));
        }

        /**
         * @param ocid (Output)
         * OCID of created infra.
         * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid (Output)
         * OCID of created infra.
         * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param shape The shape of the Exadata Infrastructure. The shape determines the
         * amount of CPU, storage, and memory resources allocated to the instance.
         * 
         * @return builder
         * 
         */
        public Builder shape(Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape The shape of the Exadata Infrastructure. The shape determines the
         * amount of CPU, storage, and memory resources allocated to the instance.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param state (Output)
         * The current lifecycle state of the Exadata Infrastructure.
         * Possible values:
         * STATE_UNSPECIFIED
         * PROVISIONING
         * AVAILABLE
         * UPDATING
         * TERMINATING
         * TERMINATED
         * FAILED
         * MAINTENANCE_IN_PROGRESS
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * The current lifecycle state of the Exadata Infrastructure.
         * Possible values:
         * STATE_UNSPECIFIED
         * PROVISIONING
         * AVAILABLE
         * UPDATING
         * TERMINATING
         * TERMINATED
         * FAILED
         * MAINTENANCE_IN_PROGRESS
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storageCount The number of Cloud Exadata storage servers for the Exadata Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder storageCount(@Nullable Output<Integer> storageCount) {
            $.storageCount = storageCount;
            return this;
        }

        /**
         * @param storageCount The number of Cloud Exadata storage servers for the Exadata Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder storageCount(Integer storageCount) {
            return storageCount(Output.of(storageCount));
        }

        /**
         * @param storageServerVersion (Output)
         * The software version of the storage servers (cells) in the Exadata
         * Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder storageServerVersion(@Nullable Output<String> storageServerVersion) {
            $.storageServerVersion = storageServerVersion;
            return this;
        }

        /**
         * @param storageServerVersion (Output)
         * The software version of the storage servers (cells) in the Exadata
         * Infrastructure.
         * 
         * @return builder
         * 
         */
        public Builder storageServerVersion(String storageServerVersion) {
            return storageServerVersion(Output.of(storageServerVersion));
        }

        /**
         * @param totalStorageSizeGb The total storage allocated to the Exadata Infrastructure
         * resource, in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder totalStorageSizeGb(@Nullable Output<Integer> totalStorageSizeGb) {
            $.totalStorageSizeGb = totalStorageSizeGb;
            return this;
        }

        /**
         * @param totalStorageSizeGb The total storage allocated to the Exadata Infrastructure
         * resource, in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder totalStorageSizeGb(Integer totalStorageSizeGb) {
            return totalStorageSizeGb(Output.of(totalStorageSizeGb));
        }

        public CloudExadataInfrastructurePropertiesArgs build() {
            if ($.shape == null) {
                throw new MissingRequiredPropertyException("CloudExadataInfrastructurePropertiesArgs", "shape");
            }
            return $;
        }
    }

}
