// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs Empty = new V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs();

    /**
     * Allows the TPU node to send and receive packets with non-matching destination or source
     * IPs. This is required if you plan to use the TPU workers to forward routes.
     * 
     */
    @Import(name="canIpForward")
    private @Nullable Output<Boolean> canIpForward;

    /**
     * @return Allows the TPU node to send and receive packets with non-matching destination or source
     * IPs. This is required if you plan to use the TPU workers to forward routes.
     * 
     */
    public Optional<Output<Boolean>> canIpForward() {
        return Optional.ofNullable(this.canIpForward);
    }

    /**
     * Indicates that external IP addresses would be associated with the TPU workers. If set to
     * false, the specified subnetwork or network should have Private Google Access enabled.
     * 
     */
    @Import(name="enableExternalIps")
    private @Nullable Output<Boolean> enableExternalIps;

    /**
     * @return Indicates that external IP addresses would be associated with the TPU workers. If set to
     * false, the specified subnetwork or network should have Private Google Access enabled.
     * 
     */
    public Optional<Output<Boolean>> enableExternalIps() {
        return Optional.ofNullable(this.enableExternalIps);
    }

    /**
     * The name of the network for the TPU node. It must be a preexisting Google Compute Engine
     * network. If none is provided, &#34;default&#34; will be used.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The name of the network for the TPU node. It must be a preexisting Google Compute Engine
     * network. If none is provided, &#34;default&#34; will be used.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Specifies networking queue count for TPU VM instance&#39;s network interface.
     * 
     */
    @Import(name="queueCount")
    private @Nullable Output<Integer> queueCount;

    /**
     * @return Specifies networking queue count for TPU VM instance&#39;s network interface.
     * 
     */
    public Optional<Output<Integer>> queueCount() {
        return Optional.ofNullable(this.queueCount);
    }

    /**
     * The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
     * Engine subnetwork. If none is provided, &#34;default&#34; will be used.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
     * Engine subnetwork. If none is provided, &#34;default&#34; will be used.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    private V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs() {}

    private V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs(V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs $) {
        this.canIpForward = $.canIpForward;
        this.enableExternalIps = $.enableExternalIps;
        this.network = $.network;
        this.queueCount = $.queueCount;
        this.subnetwork = $.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs $;

        public Builder() {
            $ = new V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs();
        }

        public Builder(V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs defaults) {
            $ = new V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canIpForward Allows the TPU node to send and receive packets with non-matching destination or source
         * IPs. This is required if you plan to use the TPU workers to forward routes.
         * 
         * @return builder
         * 
         */
        public Builder canIpForward(@Nullable Output<Boolean> canIpForward) {
            $.canIpForward = canIpForward;
            return this;
        }

        /**
         * @param canIpForward Allows the TPU node to send and receive packets with non-matching destination or source
         * IPs. This is required if you plan to use the TPU workers to forward routes.
         * 
         * @return builder
         * 
         */
        public Builder canIpForward(Boolean canIpForward) {
            return canIpForward(Output.of(canIpForward));
        }

        /**
         * @param enableExternalIps Indicates that external IP addresses would be associated with the TPU workers. If set to
         * false, the specified subnetwork or network should have Private Google Access enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableExternalIps(@Nullable Output<Boolean> enableExternalIps) {
            $.enableExternalIps = enableExternalIps;
            return this;
        }

        /**
         * @param enableExternalIps Indicates that external IP addresses would be associated with the TPU workers. If set to
         * false, the specified subnetwork or network should have Private Google Access enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableExternalIps(Boolean enableExternalIps) {
            return enableExternalIps(Output.of(enableExternalIps));
        }

        /**
         * @param network The name of the network for the TPU node. It must be a preexisting Google Compute Engine
         * network. If none is provided, &#34;default&#34; will be used.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The name of the network for the TPU node. It must be a preexisting Google Compute Engine
         * network. If none is provided, &#34;default&#34; will be used.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param queueCount Specifies networking queue count for TPU VM instance&#39;s network interface.
         * 
         * @return builder
         * 
         */
        public Builder queueCount(@Nullable Output<Integer> queueCount) {
            $.queueCount = queueCount;
            return this;
        }

        /**
         * @param queueCount Specifies networking queue count for TPU VM instance&#39;s network interface.
         * 
         * @return builder
         * 
         */
        public Builder queueCount(Integer queueCount) {
            return queueCount(Output.of(queueCount));
        }

        /**
         * @param subnetwork The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
         * Engine subnetwork. If none is provided, &#34;default&#34; will be used.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
         * Engine subnetwork. If none is provided, &#34;default&#34; will be used.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        public V2QueuedResourceTpuNodeSpecNodeNetworkConfigArgs build() {
            return $;
        }
    }

}
