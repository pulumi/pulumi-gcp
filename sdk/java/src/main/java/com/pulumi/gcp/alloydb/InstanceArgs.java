// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.alloydb.inputs.InstanceMachineConfigArgs;
import com.pulumi.gcp.alloydb.inputs.InstanceReadPoolConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
     * Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
     * 
     */
    @Import(name="availabilityType")
    private @Nullable Output<String> availabilityType;

    /**
     * @return Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
     * Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
     * 
     */
    public Optional<Output<String>> availabilityType() {
        return Optional.ofNullable(this.availabilityType);
    }

    /**
     * Identifies the alloydb cluster. Must be in the format
     * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return Identifies the alloydb cluster. Must be in the format
     * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
     * 
     */
    @Import(name="databaseFlags")
    private @Nullable Output<Map<String,String>> databaseFlags;

    /**
     * @return Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
     * 
     */
    public Optional<Output<Map<String,String>>> databaseFlags() {
        return Optional.ofNullable(this.databaseFlags);
    }

    /**
     * User-settable and human-readable display name for the Instance.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-settable and human-readable display name for the Instance.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
     * 
     */
    @Import(name="gceZone")
    private @Nullable Output<String> gceZone;

    /**
     * @return The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
     * 
     */
    public Optional<Output<String>> gceZone() {
        return Optional.ofNullable(this.gceZone);
    }

    /**
     * The ID of the alloydb instance.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The ID of the alloydb instance.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The type of the instance.
     * Possible values are `PRIMARY` and `READ_POOL`.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return The type of the instance.
     * Possible values are `PRIMARY` and `READ_POOL`.
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * User-defined labels for the alloydb instance.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels for the alloydb instance.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Configurations for the machines that host the underlying database engine.
     * Structure is documented below.
     * 
     */
    @Import(name="machineConfig")
    private @Nullable Output<InstanceMachineConfigArgs> machineConfig;

    /**
     * @return Configurations for the machines that host the underlying database engine.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceMachineConfigArgs>> machineConfig() {
        return Optional.ofNullable(this.machineConfig);
    }

    /**
     * Read pool specific config.
     * Structure is documented below.
     * 
     */
    @Import(name="readPoolConfig")
    private @Nullable Output<InstanceReadPoolConfigArgs> readPoolConfig;

    /**
     * @return Read pool specific config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceReadPoolConfigArgs>> readPoolConfig() {
        return Optional.ofNullable(this.readPoolConfig);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.annotations = $.annotations;
        this.availabilityType = $.availabilityType;
        this.cluster = $.cluster;
        this.databaseFlags = $.databaseFlags;
        this.displayName = $.displayName;
        this.gceZone = $.gceZone;
        this.instanceId = $.instanceId;
        this.instanceType = $.instanceType;
        this.labels = $.labels;
        this.machineConfig = $.machineConfig;
        this.readPoolConfig = $.readPoolConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param availabilityType Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
         * Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityType(@Nullable Output<String> availabilityType) {
            $.availabilityType = availabilityType;
            return this;
        }

        /**
         * @param availabilityType Availability type of an Instance. Defaults to REGIONAL for both primary and read instances. Note that primary and read instances can have different availability types.
         * Possible values are `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, and `REGIONAL`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityType(String availabilityType) {
            return availabilityType(Output.of(availabilityType));
        }

        /**
         * @param cluster Identifies the alloydb cluster. Must be in the format
         * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster Identifies the alloydb cluster. Must be in the format
         * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param databaseFlags Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
         * 
         * @return builder
         * 
         */
        public Builder databaseFlags(@Nullable Output<Map<String,String>> databaseFlags) {
            $.databaseFlags = databaseFlags;
            return this;
        }

        /**
         * @param databaseFlags Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
         * 
         * @return builder
         * 
         */
        public Builder databaseFlags(Map<String,String> databaseFlags) {
            return databaseFlags(Output.of(databaseFlags));
        }

        /**
         * @param displayName User-settable and human-readable display name for the Instance.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-settable and human-readable display name for the Instance.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param gceZone The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
         * 
         * @return builder
         * 
         */
        public Builder gceZone(@Nullable Output<String> gceZone) {
            $.gceZone = gceZone;
            return this;
        }

        /**
         * @param gceZone The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
         * 
         * @return builder
         * 
         */
        public Builder gceZone(String gceZone) {
            return gceZone(Output.of(gceZone));
        }

        /**
         * @param instanceId The ID of the alloydb instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the alloydb instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceType The type of the instance.
         * Possible values are `PRIMARY` and `READ_POOL`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The type of the instance.
         * Possible values are `PRIMARY` and `READ_POOL`.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param labels User-defined labels for the alloydb instance.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels for the alloydb instance.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param machineConfig Configurations for the machines that host the underlying database engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder machineConfig(@Nullable Output<InstanceMachineConfigArgs> machineConfig) {
            $.machineConfig = machineConfig;
            return this;
        }

        /**
         * @param machineConfig Configurations for the machines that host the underlying database engine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder machineConfig(InstanceMachineConfigArgs machineConfig) {
            return machineConfig(Output.of(machineConfig));
        }

        /**
         * @param readPoolConfig Read pool specific config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readPoolConfig(@Nullable Output<InstanceReadPoolConfigArgs> readPoolConfig) {
            $.readPoolConfig = readPoolConfig;
            return this;
        }

        /**
         * @param readPoolConfig Read pool specific config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readPoolConfig(InstanceReadPoolConfigArgs readPoolConfig) {
            return readPoolConfig(Output.of(readPoolConfig));
        }

        public InstanceArgs build() {
            $.cluster = Objects.requireNonNull($.cluster, "expected parameter 'cluster' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            return $;
        }
    }

}
