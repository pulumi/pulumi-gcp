// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigDecryptedCredentialServiceAccountCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigDecryptedCredentialServiceAccountCredentialsArgs Empty = new AuthConfigDecryptedCredentialServiceAccountCredentialsArgs();

    /**
     * A space-delimited list of requested scope permissions.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return A space-delimited list of requested scope permissions.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Name of the service account that has the permission to make the request.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Name of the service account that has the permission to make the request.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    private AuthConfigDecryptedCredentialServiceAccountCredentialsArgs() {}

    private AuthConfigDecryptedCredentialServiceAccountCredentialsArgs(AuthConfigDecryptedCredentialServiceAccountCredentialsArgs $) {
        this.scope = $.scope;
        this.serviceAccount = $.serviceAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigDecryptedCredentialServiceAccountCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigDecryptedCredentialServiceAccountCredentialsArgs $;

        public Builder() {
            $ = new AuthConfigDecryptedCredentialServiceAccountCredentialsArgs();
        }

        public Builder(AuthConfigDecryptedCredentialServiceAccountCredentialsArgs defaults) {
            $ = new AuthConfigDecryptedCredentialServiceAccountCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scope A space-delimited list of requested scope permissions.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope A space-delimited list of requested scope permissions.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param serviceAccount Name of the service account that has the permission to make the request.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Name of the service account that has the permission to make the request.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public AuthConfigDecryptedCredentialServiceAccountCredentialsArgs build() {
            return $;
        }
    }

}
