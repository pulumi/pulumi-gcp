// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.outputs.GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOption;
import com.pulumi.gcp.oracledatabase.outputs.GetCloudVmClustersCloudVmClusterPropertyTimeZone;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCloudVmClustersCloudVmClusterProperty {
    /**
     * @return OCI Cluster name.
     * 
     */
    private String clusterName;
    /**
     * @return Compartment ID of cluster.
     * 
     */
    private String compartmentId;
    /**
     * @return Number of enabled CPU cores.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    private Double dataStorageSizeTb;
    /**
     * @return Local storage per VM
     * 
     */
    private Integer dbNodeStorageSizeGb;
    /**
     * @return OCID of database servers.
     * 
     */
    private List<String> dbServerOcids;
    /**
     * @return Data collection options for diagnostics.
     * 
     */
    private List<GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOption> diagnosticsDataCollectionOptions;
    /**
     * @return The type of redundancy.
     *  Possible values:
     *  DISK_REDUNDANCY_UNSPECIFIED
     * HIGH
     * NORMAL
     * 
     */
    private String diskRedundancy;
    /**
     * @return DNS listener IP.
     * 
     */
    private String dnsListenerIp;
    /**
     * @return Parent DNS domain where SCAN DNS and hosts names are qualified.
     * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    private String domain;
    /**
     * @return Grid Infrastructure Version.
     * 
     */
    private String giVersion;
    /**
     * @return host name without domain.
     * format: &#34;-&#34; with some suffix.
     * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
     * 
     */
    private String hostname;
    /**
     * @return Prefix for VM cluster host names.
     * 
     */
    private String hostnamePrefix;
    /**
     * @return License type of VM Cluster.
     *  Possible values:
     *  LICENSE_TYPE_UNSPECIFIED
     * LICENSE_INCLUDED
     * BRING_YOUR_OWN_LICENSE
     * 
     */
    private String licenseType;
    /**
     * @return Use local backup.
     * 
     */
    private Boolean localBackupEnabled;
    /**
     * @return Memory allocated in GBs.
     * 
     */
    private Integer memorySizeGb;
    /**
     * @return Number of database servers.
     * 
     */
    private Integer nodeCount;
    /**
     * @return Deep link to the OCI console to view this resource.
     * 
     */
    private String ociUrl;
    /**
     * @return Oracle Cloud Infrastructure ID of VM Cluster.
     * 
     */
    private String ocid;
    /**
     * @return OCPU count per VM. Minimum is 0.1.
     * 
     */
    private Double ocpuCount;
    /**
     * @return SCAN DNS name.
     * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    private String scanDns;
    /**
     * @return OCID of scan DNS record.
     * 
     */
    private String scanDnsRecordId;
    /**
     * @return OCIDs of scan IPs.
     * 
     */
    private List<String> scanIpIds;
    /**
     * @return SCAN listener port - TCP
     * 
     */
    private Integer scanListenerPortTcp;
    /**
     * @return SCAN listener port - TLS
     * 
     */
    private Integer scanListenerPortTcpSsl;
    /**
     * @return Shape of VM Cluster.
     * 
     */
    private String shape;
    /**
     * @return Use exadata sparse snapshots.
     * 
     */
    private Boolean sparseDiskgroupEnabled;
    /**
     * @return SSH public keys to be stored with cluster.
     * 
     */
    private List<String> sshPublicKeys;
    /**
     * @return State of the cluster.
     *  Possible values:
     *  STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    private String state;
    /**
     * @return The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    private Integer storageSizeGb;
    /**
     * @return Operating system version of the image.
     * 
     */
    private String systemVersion;
    /**
     * @return Represents a time zone from the
     * [IANA Time Zone Database](https://www.iana.org/time-zones).
     * 
     */
    private List<GetCloudVmClustersCloudVmClusterPropertyTimeZone> timeZones;

    private GetCloudVmClustersCloudVmClusterProperty() {}
    /**
     * @return OCI Cluster name.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return Compartment ID of cluster.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Number of enabled CPU cores.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    public Double dataStorageSizeTb() {
        return this.dataStorageSizeTb;
    }
    /**
     * @return Local storage per VM
     * 
     */
    public Integer dbNodeStorageSizeGb() {
        return this.dbNodeStorageSizeGb;
    }
    /**
     * @return OCID of database servers.
     * 
     */
    public List<String> dbServerOcids() {
        return this.dbServerOcids;
    }
    /**
     * @return Data collection options for diagnostics.
     * 
     */
    public List<GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOption> diagnosticsDataCollectionOptions() {
        return this.diagnosticsDataCollectionOptions;
    }
    /**
     * @return The type of redundancy.
     *  Possible values:
     *  DISK_REDUNDANCY_UNSPECIFIED
     * HIGH
     * NORMAL
     * 
     */
    public String diskRedundancy() {
        return this.diskRedundancy;
    }
    /**
     * @return DNS listener IP.
     * 
     */
    public String dnsListenerIp() {
        return this.dnsListenerIp;
    }
    /**
     * @return Parent DNS domain where SCAN DNS and hosts names are qualified.
     * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Grid Infrastructure Version.
     * 
     */
    public String giVersion() {
        return this.giVersion;
    }
    /**
     * @return host name without domain.
     * format: &#34;-&#34; with some suffix.
     * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Prefix for VM cluster host names.
     * 
     */
    public String hostnamePrefix() {
        return this.hostnamePrefix;
    }
    /**
     * @return License type of VM Cluster.
     *  Possible values:
     *  LICENSE_TYPE_UNSPECIFIED
     * LICENSE_INCLUDED
     * BRING_YOUR_OWN_LICENSE
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return Use local backup.
     * 
     */
    public Boolean localBackupEnabled() {
        return this.localBackupEnabled;
    }
    /**
     * @return Memory allocated in GBs.
     * 
     */
    public Integer memorySizeGb() {
        return this.memorySizeGb;
    }
    /**
     * @return Number of database servers.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return Deep link to the OCI console to view this resource.
     * 
     */
    public String ociUrl() {
        return this.ociUrl;
    }
    /**
     * @return Oracle Cloud Infrastructure ID of VM Cluster.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return OCPU count per VM. Minimum is 0.1.
     * 
     */
    public Double ocpuCount() {
        return this.ocpuCount;
    }
    /**
     * @return SCAN DNS name.
     * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    public String scanDns() {
        return this.scanDns;
    }
    /**
     * @return OCID of scan DNS record.
     * 
     */
    public String scanDnsRecordId() {
        return this.scanDnsRecordId;
    }
    /**
     * @return OCIDs of scan IPs.
     * 
     */
    public List<String> scanIpIds() {
        return this.scanIpIds;
    }
    /**
     * @return SCAN listener port - TCP
     * 
     */
    public Integer scanListenerPortTcp() {
        return this.scanListenerPortTcp;
    }
    /**
     * @return SCAN listener port - TLS
     * 
     */
    public Integer scanListenerPortTcpSsl() {
        return this.scanListenerPortTcpSsl;
    }
    /**
     * @return Shape of VM Cluster.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return Use exadata sparse snapshots.
     * 
     */
    public Boolean sparseDiskgroupEnabled() {
        return this.sparseDiskgroupEnabled;
    }
    /**
     * @return SSH public keys to be stored with cluster.
     * 
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys;
    }
    /**
     * @return State of the cluster.
     *  Possible values:
     *  STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    public Integer storageSizeGb() {
        return this.storageSizeGb;
    }
    /**
     * @return Operating system version of the image.
     * 
     */
    public String systemVersion() {
        return this.systemVersion;
    }
    /**
     * @return Represents a time zone from the
     * [IANA Time Zone Database](https://www.iana.org/time-zones).
     * 
     */
    public List<GetCloudVmClustersCloudVmClusterPropertyTimeZone> timeZones() {
        return this.timeZones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudVmClustersCloudVmClusterProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterName;
        private String compartmentId;
        private Integer cpuCoreCount;
        private Double dataStorageSizeTb;
        private Integer dbNodeStorageSizeGb;
        private List<String> dbServerOcids;
        private List<GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOption> diagnosticsDataCollectionOptions;
        private String diskRedundancy;
        private String dnsListenerIp;
        private String domain;
        private String giVersion;
        private String hostname;
        private String hostnamePrefix;
        private String licenseType;
        private Boolean localBackupEnabled;
        private Integer memorySizeGb;
        private Integer nodeCount;
        private String ociUrl;
        private String ocid;
        private Double ocpuCount;
        private String scanDns;
        private String scanDnsRecordId;
        private List<String> scanIpIds;
        private Integer scanListenerPortTcp;
        private Integer scanListenerPortTcpSsl;
        private String shape;
        private Boolean sparseDiskgroupEnabled;
        private List<String> sshPublicKeys;
        private String state;
        private Integer storageSizeGb;
        private String systemVersion;
        private List<GetCloudVmClustersCloudVmClusterPropertyTimeZone> timeZones;
        public Builder() {}
        public Builder(GetCloudVmClustersCloudVmClusterProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.dataStorageSizeTb = defaults.dataStorageSizeTb;
    	      this.dbNodeStorageSizeGb = defaults.dbNodeStorageSizeGb;
    	      this.dbServerOcids = defaults.dbServerOcids;
    	      this.diagnosticsDataCollectionOptions = defaults.diagnosticsDataCollectionOptions;
    	      this.diskRedundancy = defaults.diskRedundancy;
    	      this.dnsListenerIp = defaults.dnsListenerIp;
    	      this.domain = defaults.domain;
    	      this.giVersion = defaults.giVersion;
    	      this.hostname = defaults.hostname;
    	      this.hostnamePrefix = defaults.hostnamePrefix;
    	      this.licenseType = defaults.licenseType;
    	      this.localBackupEnabled = defaults.localBackupEnabled;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.nodeCount = defaults.nodeCount;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.ocpuCount = defaults.ocpuCount;
    	      this.scanDns = defaults.scanDns;
    	      this.scanDnsRecordId = defaults.scanDnsRecordId;
    	      this.scanIpIds = defaults.scanIpIds;
    	      this.scanListenerPortTcp = defaults.scanListenerPortTcp;
    	      this.scanListenerPortTcpSsl = defaults.scanListenerPortTcpSsl;
    	      this.shape = defaults.shape;
    	      this.sparseDiskgroupEnabled = defaults.sparseDiskgroupEnabled;
    	      this.sshPublicKeys = defaults.sshPublicKeys;
    	      this.state = defaults.state;
    	      this.storageSizeGb = defaults.storageSizeGb;
    	      this.systemVersion = defaults.systemVersion;
    	      this.timeZones = defaults.timeZones;
        }

        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeTb(Double dataStorageSizeTb) {
            if (dataStorageSizeTb == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "dataStorageSizeTb");
            }
            this.dataStorageSizeTb = dataStorageSizeTb;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeGb(Integer dbNodeStorageSizeGb) {
            if (dbNodeStorageSizeGb == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "dbNodeStorageSizeGb");
            }
            this.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerOcids(List<String> dbServerOcids) {
            if (dbServerOcids == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "dbServerOcids");
            }
            this.dbServerOcids = dbServerOcids;
            return this;
        }
        public Builder dbServerOcids(String... dbServerOcids) {
            return dbServerOcids(List.of(dbServerOcids));
        }
        @CustomType.Setter
        public Builder diagnosticsDataCollectionOptions(List<GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOption> diagnosticsDataCollectionOptions) {
            if (diagnosticsDataCollectionOptions == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "diagnosticsDataCollectionOptions");
            }
            this.diagnosticsDataCollectionOptions = diagnosticsDataCollectionOptions;
            return this;
        }
        public Builder diagnosticsDataCollectionOptions(GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOption... diagnosticsDataCollectionOptions) {
            return diagnosticsDataCollectionOptions(List.of(diagnosticsDataCollectionOptions));
        }
        @CustomType.Setter
        public Builder diskRedundancy(String diskRedundancy) {
            if (diskRedundancy == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "diskRedundancy");
            }
            this.diskRedundancy = diskRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder dnsListenerIp(String dnsListenerIp) {
            if (dnsListenerIp == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "dnsListenerIp");
            }
            this.dnsListenerIp = dnsListenerIp;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder giVersion(String giVersion) {
            if (giVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "giVersion");
            }
            this.giVersion = giVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder hostnamePrefix(String hostnamePrefix) {
            if (hostnamePrefix == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "hostnamePrefix");
            }
            this.hostnamePrefix = hostnamePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            if (licenseType == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "licenseType");
            }
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder localBackupEnabled(Boolean localBackupEnabled) {
            if (localBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "localBackupEnabled");
            }
            this.localBackupEnabled = localBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGb(Integer memorySizeGb) {
            if (memorySizeGb == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "memorySizeGb");
            }
            this.memorySizeGb = memorySizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(String ociUrl) {
            if (ociUrl == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "ociUrl");
            }
            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuCount(Double ocpuCount) {
            if (ocpuCount == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "ocpuCount");
            }
            this.ocpuCount = ocpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder scanDns(String scanDns) {
            if (scanDns == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "scanDns");
            }
            this.scanDns = scanDns;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsRecordId(String scanDnsRecordId) {
            if (scanDnsRecordId == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "scanDnsRecordId");
            }
            this.scanDnsRecordId = scanDnsRecordId;
            return this;
        }
        @CustomType.Setter
        public Builder scanIpIds(List<String> scanIpIds) {
            if (scanIpIds == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "scanIpIds");
            }
            this.scanIpIds = scanIpIds;
            return this;
        }
        public Builder scanIpIds(String... scanIpIds) {
            return scanIpIds(List.of(scanIpIds));
        }
        @CustomType.Setter
        public Builder scanListenerPortTcp(Integer scanListenerPortTcp) {
            if (scanListenerPortTcp == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "scanListenerPortTcp");
            }
            this.scanListenerPortTcp = scanListenerPortTcp;
            return this;
        }
        @CustomType.Setter
        public Builder scanListenerPortTcpSsl(Integer scanListenerPortTcpSsl) {
            if (scanListenerPortTcpSsl == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "scanListenerPortTcpSsl");
            }
            this.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sparseDiskgroupEnabled(Boolean sparseDiskgroupEnabled) {
            if (sparseDiskgroupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "sparseDiskgroupEnabled");
            }
            this.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeys(List<String> sshPublicKeys) {
            if (sshPublicKeys == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "sshPublicKeys");
            }
            this.sshPublicKeys = sshPublicKeys;
            return this;
        }
        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageSizeGb(Integer storageSizeGb) {
            if (storageSizeGb == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "storageSizeGb");
            }
            this.storageSizeGb = storageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder systemVersion(String systemVersion) {
            if (systemVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "systemVersion");
            }
            this.systemVersion = systemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeZones(List<GetCloudVmClustersCloudVmClusterPropertyTimeZone> timeZones) {
            if (timeZones == null) {
              throw new MissingRequiredPropertyException("GetCloudVmClustersCloudVmClusterProperty", "timeZones");
            }
            this.timeZones = timeZones;
            return this;
        }
        public Builder timeZones(GetCloudVmClustersCloudVmClusterPropertyTimeZone... timeZones) {
            return timeZones(List.of(timeZones));
        }
        public GetCloudVmClustersCloudVmClusterProperty build() {
            final var _resultValue = new GetCloudVmClustersCloudVmClusterProperty();
            _resultValue.clusterName = clusterName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.dataStorageSizeTb = dataStorageSizeTb;
            _resultValue.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            _resultValue.dbServerOcids = dbServerOcids;
            _resultValue.diagnosticsDataCollectionOptions = diagnosticsDataCollectionOptions;
            _resultValue.diskRedundancy = diskRedundancy;
            _resultValue.dnsListenerIp = dnsListenerIp;
            _resultValue.domain = domain;
            _resultValue.giVersion = giVersion;
            _resultValue.hostname = hostname;
            _resultValue.hostnamePrefix = hostnamePrefix;
            _resultValue.licenseType = licenseType;
            _resultValue.localBackupEnabled = localBackupEnabled;
            _resultValue.memorySizeGb = memorySizeGb;
            _resultValue.nodeCount = nodeCount;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.ocpuCount = ocpuCount;
            _resultValue.scanDns = scanDns;
            _resultValue.scanDnsRecordId = scanDnsRecordId;
            _resultValue.scanIpIds = scanIpIds;
            _resultValue.scanListenerPortTcp = scanListenerPortTcp;
            _resultValue.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            _resultValue.shape = shape;
            _resultValue.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            _resultValue.sshPublicKeys = sshPublicKeys;
            _resultValue.state = state;
            _resultValue.storageSizeGb = storageSizeGb;
            _resultValue.systemVersion = systemVersion;
            _resultValue.timeZones = timeZones;
            return _resultValue;
        }
    }
}
