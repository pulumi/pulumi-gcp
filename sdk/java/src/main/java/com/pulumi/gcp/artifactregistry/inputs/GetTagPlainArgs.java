// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTagPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTagPlainArgs Empty = new GetTagPlainArgs();

    /**
     * The location of the artifact registry.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location of the artifact registry.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * The name of the package.
     * 
     */
    @Import(name="packageName", required=true)
    private String packageName;

    /**
     * @return The name of the package.
     * 
     */
    public String packageName() {
        return this.packageName;
    }

    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The last part of the repository name to fetch from.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return The last part of the repository name to fetch from.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * The name of the tag.
     * 
     */
    @Import(name="tagName", required=true)
    private String tagName;

    /**
     * @return The name of the tag.
     * 
     */
    public String tagName() {
        return this.tagName;
    }

    private GetTagPlainArgs() {}

    private GetTagPlainArgs(GetTagPlainArgs $) {
        this.location = $.location;
        this.packageName = $.packageName;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagPlainArgs $;

        public Builder() {
            $ = new GetTagPlainArgs();
        }

        public Builder(GetTagPlainArgs defaults) {
            $ = new GetTagPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location of the artifact registry.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param packageName The name of the package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repositoryId The last part of the repository name to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param tagName The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            $.tagName = tagName;
            return this;
        }

        public GetTagPlainArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetTagPlainArgs", "location");
            }
            if ($.packageName == null) {
                throw new MissingRequiredPropertyException("GetTagPlainArgs", "packageName");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetTagPlainArgs", "repositoryId");
            }
            if ($.tagName == null) {
                throw new MissingRequiredPropertyException("GetTagPlainArgs", "tagName");
            }
            return $;
        }
    }

}
