// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetSiteArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetSiteArgs Empty = new TargetSiteArgs();

    /**
     * The unique id of the data store.
     * 
     */
    @Import(name="dataStoreId", required=true)
    private Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     */
    public Output<String> dataStoreId() {
        return this.dataStoreId;
    }

    /**
     * If set to false, a uri_pattern is generated to include all pages whose
     * address contains the provided_uri_pattern. If set to true, an uri_pattern
     * is generated to try to be an exact match of the provided_uri_pattern or
     * just the specific page if the provided_uri_pattern is a specific one.
     * provided_uri_pattern is always normalized to generate the URI pattern to
     * be used by the search engine.
     * 
     */
    @Import(name="exactMatch")
    private @Nullable Output<Boolean> exactMatch;

    /**
     * @return If set to false, a uri_pattern is generated to include all pages whose
     * address contains the provided_uri_pattern. If set to true, an uri_pattern
     * is generated to try to be an exact match of the provided_uri_pattern or
     * just the specific page if the provided_uri_pattern is a specific one.
     * provided_uri_pattern is always normalized to generate the URI pattern to
     * be used by the search engine.
     * 
     */
    public Optional<Output<Boolean>> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The user provided URI pattern from which the `generated_uri_pattern` is
     * generated.
     * 
     */
    @Import(name="providedUriPattern", required=true)
    private Output<String> providedUriPattern;

    /**
     * @return The user provided URI pattern from which the `generated_uri_pattern` is
     * generated.
     * 
     */
    public Output<String> providedUriPattern() {
        return this.providedUriPattern;
    }

    /**
     * The possible target site types.
     * Possible values are: `INCLUDE`, `EXCLUDE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The possible target site types.
     * Possible values are: `INCLUDE`, `EXCLUDE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TargetSiteArgs() {}

    private TargetSiteArgs(TargetSiteArgs $) {
        this.dataStoreId = $.dataStoreId;
        this.exactMatch = $.exactMatch;
        this.location = $.location;
        this.project = $.project;
        this.providedUriPattern = $.providedUriPattern;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetSiteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetSiteArgs $;

        public Builder() {
            $ = new TargetSiteArgs();
        }

        public Builder(TargetSiteArgs defaults) {
            $ = new TargetSiteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(Output<String> dataStoreId) {
            $.dataStoreId = dataStoreId;
            return this;
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(String dataStoreId) {
            return dataStoreId(Output.of(dataStoreId));
        }

        /**
         * @param exactMatch If set to false, a uri_pattern is generated to include all pages whose
         * address contains the provided_uri_pattern. If set to true, an uri_pattern
         * is generated to try to be an exact match of the provided_uri_pattern or
         * just the specific page if the provided_uri_pattern is a specific one.
         * provided_uri_pattern is always normalized to generate the URI pattern to
         * be used by the search engine.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(@Nullable Output<Boolean> exactMatch) {
            $.exactMatch = exactMatch;
            return this;
        }

        /**
         * @param exactMatch If set to false, a uri_pattern is generated to include all pages whose
         * address contains the provided_uri_pattern. If set to true, an uri_pattern
         * is generated to try to be an exact match of the provided_uri_pattern or
         * just the specific page if the provided_uri_pattern is a specific one.
         * provided_uri_pattern is always normalized to generate the URI pattern to
         * be used by the search engine.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(Boolean exactMatch) {
            return exactMatch(Output.of(exactMatch));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param providedUriPattern The user provided URI pattern from which the `generated_uri_pattern` is
         * generated.
         * 
         * @return builder
         * 
         */
        public Builder providedUriPattern(Output<String> providedUriPattern) {
            $.providedUriPattern = providedUriPattern;
            return this;
        }

        /**
         * @param providedUriPattern The user provided URI pattern from which the `generated_uri_pattern` is
         * generated.
         * 
         * @return builder
         * 
         */
        public Builder providedUriPattern(String providedUriPattern) {
            return providedUriPattern(Output.of(providedUriPattern));
        }

        /**
         * @param type The possible target site types.
         * Possible values are: `INCLUDE`, `EXCLUDE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The possible target site types.
         * Possible values are: `INCLUDE`, `EXCLUDE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TargetSiteArgs build() {
            if ($.dataStoreId == null) {
                throw new MissingRequiredPropertyException("TargetSiteArgs", "dataStoreId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("TargetSiteArgs", "location");
            }
            if ($.providedUriPattern == null) {
                throw new MissingRequiredPropertyException("TargetSiteArgs", "providedUriPattern");
            }
            return $;
        }
    }

}
