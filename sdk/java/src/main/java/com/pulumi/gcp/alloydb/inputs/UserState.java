// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Identifies the alloydb cluster. Must be in the format
     * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return Identifies the alloydb cluster. Must be in the format
     * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * List of database roles this database user has.
     * 
     */
    @Import(name="databaseRoles")
    private @Nullable Output<List<String>> databaseRoles;

    /**
     * @return List of database roles this database user has.
     * 
     */
    public Optional<Output<List<String>>> databaseRoles() {
        return Optional.ofNullable(this.databaseRoles);
    }

    /**
     * Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Password for this database user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for this database user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The database role name of the user.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The database role name of the user.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * The type of this user.
     * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
     * 
     */
    @Import(name="userType")
    private @Nullable Output<String> userType;

    /**
     * @return The type of this user.
     * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
     * 
     */
    public Optional<Output<String>> userType() {
        return Optional.ofNullable(this.userType);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.cluster = $.cluster;
        this.databaseRoles = $.databaseRoles;
        this.name = $.name;
        this.password = $.password;
        this.userId = $.userId;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster Identifies the alloydb cluster. Must be in the format
         * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster Identifies the alloydb cluster. Must be in the format
         * &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param databaseRoles List of database roles this database user has.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoles(@Nullable Output<List<String>> databaseRoles) {
            $.databaseRoles = databaseRoles;
            return this;
        }

        /**
         * @param databaseRoles List of database roles this database user has.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoles(List<String> databaseRoles) {
            return databaseRoles(Output.of(databaseRoles));
        }

        /**
         * @param databaseRoles List of database roles this database user has.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoles(String... databaseRoles) {
            return databaseRoles(List.of(databaseRoles));
        }

        /**
         * @param name Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Password for this database user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for this database user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param userId The database role name of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The database role name of the user.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param userType The type of this user.
         * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
         * 
         * @return builder
         * 
         */
        public Builder userType(@Nullable Output<String> userType) {
            $.userType = userType;
            return this;
        }

        /**
         * @param userType The type of this user.
         * Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.
         * 
         * @return builder
         * 
         */
        public Builder userType(String userType) {
            return userType(Output.of(userType));
        }

        public UserState build() {
            return $;
        }
    }

}
