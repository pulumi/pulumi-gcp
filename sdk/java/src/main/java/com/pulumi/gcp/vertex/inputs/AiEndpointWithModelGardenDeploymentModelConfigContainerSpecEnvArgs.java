// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs Empty = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs();

    /**
     * Name of the environment variable. Must be a valid C identifier.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the environment variable. Must be a valid C identifier.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Variables that reference a $(VAR_NAME) are expanded
     * using the previous defined environment variables in the container and
     * any service environment variables. If a variable cannot be resolved,
     * the reference in the input string will be unchanged. The $(VAR_NAME)
     * syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
     * references will never be expanded, regardless of whether the variable
     * exists or not.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Variables that reference a $(VAR_NAME) are expanded
     * using the previous defined environment variables in the container and
     * any service environment variables. If a variable cannot be resolved,
     * the reference in the input string will be unchanged. The $(VAR_NAME)
     * syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
     * references will never be expanded, regardless of whether the variable
     * exists or not.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs() {}

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs $) {
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs();
        }

        public Builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs defaults) {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the environment variable. Must be a valid C identifier.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the environment variable. Must be a valid C identifier.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value Variables that reference a $(VAR_NAME) are expanded
         * using the previous defined environment variables in the container and
         * any service environment variables. If a variable cannot be resolved,
         * the reference in the input string will be unchanged. The $(VAR_NAME)
         * syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
         * references will never be expanded, regardless of whether the variable
         * exists or not.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Variables that reference a $(VAR_NAME) are expanded
         * using the previous defined environment variables in the container and
         * any service environment variables. If a variable cannot be resolved,
         * the reference in the input string will be unchanged. The $(VAR_NAME)
         * syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
         * references will never be expanded, regardless of whether the variable
         * exists or not.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs", "name");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs", "value");
            }
            return $;
        }
    }

}
