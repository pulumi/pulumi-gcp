// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.sql.outputs.DatabaseInstanceSettingsConnectionPoolConfigFlag;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseInstanceSettingsConnectionPoolConfig {
    /**
     * @return True if the manager connection pooling configuration is enabled.
     * 
     */
    private @Nullable Boolean connectionPoolingEnabled;
    /**
     * @return List of connection pool configuration flags
     * 
     */
    private @Nullable List<DatabaseInstanceSettingsConnectionPoolConfigFlag> flags;

    private DatabaseInstanceSettingsConnectionPoolConfig() {}
    /**
     * @return True if the manager connection pooling configuration is enabled.
     * 
     */
    public Optional<Boolean> connectionPoolingEnabled() {
        return Optional.ofNullable(this.connectionPoolingEnabled);
    }
    /**
     * @return List of connection pool configuration flags
     * 
     */
    public List<DatabaseInstanceSettingsConnectionPoolConfigFlag> flags() {
        return this.flags == null ? List.of() : this.flags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceSettingsConnectionPoolConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean connectionPoolingEnabled;
        private @Nullable List<DatabaseInstanceSettingsConnectionPoolConfigFlag> flags;
        public Builder() {}
        public Builder(DatabaseInstanceSettingsConnectionPoolConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPoolingEnabled = defaults.connectionPoolingEnabled;
    	      this.flags = defaults.flags;
        }

        @CustomType.Setter
        public Builder connectionPoolingEnabled(@Nullable Boolean connectionPoolingEnabled) {

            this.connectionPoolingEnabled = connectionPoolingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder flags(@Nullable List<DatabaseInstanceSettingsConnectionPoolConfigFlag> flags) {

            this.flags = flags;
            return this;
        }
        public Builder flags(DatabaseInstanceSettingsConnectionPoolConfigFlag... flags) {
            return flags(List.of(flags));
        }
        public DatabaseInstanceSettingsConnectionPoolConfig build() {
            final var _resultValue = new DatabaseInstanceSettingsConnectionPoolConfig();
            _resultValue.connectionPoolingEnabled = connectionPoolingEnabled;
            _resultValue.flags = flags;
            return _resultValue;
        }
    }
}
