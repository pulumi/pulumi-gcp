// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebase.inputs.AppHostingBackendCodebaseArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingBackendManagedResourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingBackendState extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingBackendState Empty = new AppHostingBackendState();

    /**
     * Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Unstructured key value map that may be set by external tools to
     * store and arbitrary metadata. They are not queryable and should be
     * preserved when modifying objects.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The [ID of a Web
     * App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
     * associated with the backend.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return The [ID of a Web
     * App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
     * associated with the backend.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Id of the backend. Also used as the service ID for Cloud Run, and as part
     * of the default domain name.
     * 
     * ***
     * 
     */
    @Import(name="backendId")
    private @Nullable Output<String> backendId;

    /**
     * @return Id of the backend. Also used as the service ID for Cloud Run, and as part
     * of the default domain name.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> backendId() {
        return Optional.ofNullable(this.backendId);
    }

    /**
     * The connection to an external source repository to watch for event-driven
     * updates to the backend.
     * Structure is documented below.
     * 
     */
    @Import(name="codebase")
    private @Nullable Output<AppHostingBackendCodebaseArgs> codebase;

    /**
     * @return The connection to an external source repository to watch for event-driven
     * updates to the backend.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AppHostingBackendCodebaseArgs>> codebase() {
        return Optional.ofNullable(this.codebase);
    }

    /**
     * Time at which the backend was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time at which the backend was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Time at which the backend was deleted.
     * 
     */
    @Import(name="deleteTime")
    private @Nullable Output<String> deleteTime;

    /**
     * @return Time at which the backend was deleted.
     * 
     */
    public Optional<Output<String>> deleteTime() {
        return Optional.ofNullable(this.deleteTime);
    }

    /**
     * Human-readable name. 63 character limit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable name. 63 character limit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * The environment name of the backend, used to load environment variables
     * from environment specific configuration.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The environment name of the backend, used to load environment variables
     * from environment specific configuration.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Unstructured key value map that can be used to organize and categorize
     * objects.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The canonical IDs of a Google Cloud location such as &#34;us-east1&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The canonical IDs of a Google Cloud location such as &#34;us-east1&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A list of the resources managed by this backend.
     * Structure is documented below.
     * 
     */
    @Import(name="managedResources")
    private @Nullable Output<List<AppHostingBackendManagedResourceArgs>> managedResources;

    /**
     * @return A list of the resources managed by this backend.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AppHostingBackendManagedResourceArgs>>> managedResources() {
        return Optional.ofNullable(this.managedResources);
    }

    /**
     * Identifier. The resource name of the backend.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of the backend.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * The name of the service account used for Cloud Build and Cloud Run.
     * Should have the role roles/firebaseapphosting.computeRunner
     * or equivalent permissions.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return The name of the service account used for Cloud Build and Cloud Run.
     * Should have the role roles/firebaseapphosting.computeRunner
     * or equivalent permissions.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Immutable. Specifies how App Hosting will serve the content for this backend. It will
     * either be contained to a single region (REGIONAL_STRICT) or allowed to use
     * App Hosting&#39;s global-replicated serving infrastructure (GLOBAL_ACCESS).
     * Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
     * 
     */
    @Import(name="servingLocality")
    private @Nullable Output<String> servingLocality;

    /**
     * @return Immutable. Specifies how App Hosting will serve the content for this backend. It will
     * either be contained to a single region (REGIONAL_STRICT) or allowed to use
     * App Hosting&#39;s global-replicated serving infrastructure (GLOBAL_ACCESS).
     * Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
     * 
     */
    public Optional<Output<String>> servingLocality() {
        return Optional.ofNullable(this.servingLocality);
    }

    /**
     * System-assigned, unique identifier.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System-assigned, unique identifier.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Time at which the backend was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time at which the backend was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The primary URI to communicate with the backend.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The primary URI to communicate with the backend.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private AppHostingBackendState() {}

    private AppHostingBackendState(AppHostingBackendState $) {
        this.annotations = $.annotations;
        this.appId = $.appId;
        this.backendId = $.backendId;
        this.codebase = $.codebase;
        this.createTime = $.createTime;
        this.deleteTime = $.deleteTime;
        this.displayName = $.displayName;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.environment = $.environment;
        this.etag = $.etag;
        this.labels = $.labels;
        this.location = $.location;
        this.managedResources = $.managedResources;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.serviceAccount = $.serviceAccount;
        this.servingLocality = $.servingLocality;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingBackendState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingBackendState $;

        public Builder() {
            $ = new AppHostingBackendState();
        }

        public Builder(AppHostingBackendState defaults) {
            $ = new AppHostingBackendState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Unstructured key value map that may be set by external tools to
         * store and arbitrary metadata. They are not queryable and should be
         * preserved when modifying objects.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Unstructured key value map that may be set by external tools to
         * store and arbitrary metadata. They are not queryable and should be
         * preserved when modifying objects.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param appId The [ID of a Web
         * App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
         * associated with the backend.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The [ID of a Web
         * App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
         * associated with the backend.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param backendId Id of the backend. Also used as the service ID for Cloud Run, and as part
         * of the default domain name.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder backendId(@Nullable Output<String> backendId) {
            $.backendId = backendId;
            return this;
        }

        /**
         * @param backendId Id of the backend. Also used as the service ID for Cloud Run, and as part
         * of the default domain name.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder backendId(String backendId) {
            return backendId(Output.of(backendId));
        }

        /**
         * @param codebase The connection to an external source repository to watch for event-driven
         * updates to the backend.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder codebase(@Nullable Output<AppHostingBackendCodebaseArgs> codebase) {
            $.codebase = codebase;
            return this;
        }

        /**
         * @param codebase The connection to an external source repository to watch for event-driven
         * updates to the backend.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder codebase(AppHostingBackendCodebaseArgs codebase) {
            return codebase(Output.of(codebase));
        }

        /**
         * @param createTime Time at which the backend was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time at which the backend was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deleteTime Time at which the backend was deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(@Nullable Output<String> deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        /**
         * @param deleteTime Time at which the backend was deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(String deleteTime) {
            return deleteTime(Output.of(deleteTime));
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param environment The environment name of the backend, used to load environment variables
         * from environment specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The environment name of the backend, used to load environment variables
         * from environment specific configuration.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param etag Server-computed checksum based on other values; may be sent
         * on update or delete to ensure operation is done on expected resource.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Server-computed checksum based on other values; may be sent
         * on update or delete to ensure operation is done on expected resource.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param labels Unstructured key value map that can be used to organize and categorize
         * objects.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Unstructured key value map that can be used to organize and categorize
         * objects.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The canonical IDs of a Google Cloud location such as &#34;us-east1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The canonical IDs of a Google Cloud location such as &#34;us-east1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedResources A list of the resources managed by this backend.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managedResources(@Nullable Output<List<AppHostingBackendManagedResourceArgs>> managedResources) {
            $.managedResources = managedResources;
            return this;
        }

        /**
         * @param managedResources A list of the resources managed by this backend.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managedResources(List<AppHostingBackendManagedResourceArgs> managedResources) {
            return managedResources(Output.of(managedResources));
        }

        /**
         * @param managedResources A list of the resources managed by this backend.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managedResources(AppHostingBackendManagedResourceArgs... managedResources) {
            return managedResources(List.of(managedResources));
        }

        /**
         * @param name Identifier. The resource name of the backend.
         * Format:
         * `projects/{project}/locations/{locationId}/backends/{backendId}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of the backend.
         * Format:
         * `projects/{project}/locations/{locationId}/backends/{backendId}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param serviceAccount The name of the service account used for Cloud Build and Cloud Run.
         * Should have the role roles/firebaseapphosting.computeRunner
         * or equivalent permissions.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount The name of the service account used for Cloud Build and Cloud Run.
         * Should have the role roles/firebaseapphosting.computeRunner
         * or equivalent permissions.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param servingLocality Immutable. Specifies how App Hosting will serve the content for this backend. It will
         * either be contained to a single region (REGIONAL_STRICT) or allowed to use
         * App Hosting&#39;s global-replicated serving infrastructure (GLOBAL_ACCESS).
         * Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
         * 
         * @return builder
         * 
         */
        public Builder servingLocality(@Nullable Output<String> servingLocality) {
            $.servingLocality = servingLocality;
            return this;
        }

        /**
         * @param servingLocality Immutable. Specifies how App Hosting will serve the content for this backend. It will
         * either be contained to a single region (REGIONAL_STRICT) or allowed to use
         * App Hosting&#39;s global-replicated serving infrastructure (GLOBAL_ACCESS).
         * Possible values are: `REGIONAL_STRICT`, `GLOBAL_ACCESS`.
         * 
         * @return builder
         * 
         */
        public Builder servingLocality(String servingLocality) {
            return servingLocality(Output.of(servingLocality));
        }

        /**
         * @param uid System-assigned, unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System-assigned, unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Time at which the backend was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time at which the backend was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param uri The primary URI to communicate with the backend.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The primary URI to communicate with the backend.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public AppHostingBackendState build() {
            return $;
        }
    }

}
