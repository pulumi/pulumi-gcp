// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.storage.outputs.TransferJobTransferSpecTransferOptionsMetadataOptions;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransferJobTransferSpecTransferOptions {
    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `deleteObjectsUniqueInSink` are mutually exclusive.
     * 
     */
    private @Nullable Boolean deleteObjectsFromSourceAfterTransfer;
    /**
     * @return Whether objects that exist only in the sink should be deleted. Note that this option and
     * `deleteObjectsFromSourceAfterTransfer` are mutually exclusive.
     * 
     */
    private @Nullable Boolean deleteObjectsUniqueInSink;
    /**
     * @return Specifies the metadata options for running a transfer
     * 
     */
    private @Nullable TransferJobTransferSpecTransferOptionsMetadataOptions metadataOptions;
    /**
     * @return Whether overwriting objects that already exist in the sink is allowed.
     * 
     */
    private @Nullable Boolean overwriteObjectsAlreadyExistingInSink;
    /**
     * @return When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwriteObjectsAlreadyExistingInSink`. Possible values: ALWAYS, DIFFERENT, NEVER.
     * 
     */
    private @Nullable String overwriteWhen;

    private TransferJobTransferSpecTransferOptions() {}
    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `deleteObjectsUniqueInSink` are mutually exclusive.
     * 
     */
    public Optional<Boolean> deleteObjectsFromSourceAfterTransfer() {
        return Optional.ofNullable(this.deleteObjectsFromSourceAfterTransfer);
    }
    /**
     * @return Whether objects that exist only in the sink should be deleted. Note that this option and
     * `deleteObjectsFromSourceAfterTransfer` are mutually exclusive.
     * 
     */
    public Optional<Boolean> deleteObjectsUniqueInSink() {
        return Optional.ofNullable(this.deleteObjectsUniqueInSink);
    }
    /**
     * @return Specifies the metadata options for running a transfer
     * 
     */
    public Optional<TransferJobTransferSpecTransferOptionsMetadataOptions> metadataOptions() {
        return Optional.ofNullable(this.metadataOptions);
    }
    /**
     * @return Whether overwriting objects that already exist in the sink is allowed.
     * 
     */
    public Optional<Boolean> overwriteObjectsAlreadyExistingInSink() {
        return Optional.ofNullable(this.overwriteObjectsAlreadyExistingInSink);
    }
    /**
     * @return When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwriteObjectsAlreadyExistingInSink`. Possible values: ALWAYS, DIFFERENT, NEVER.
     * 
     */
    public Optional<String> overwriteWhen() {
        return Optional.ofNullable(this.overwriteWhen);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferJobTransferSpecTransferOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean deleteObjectsFromSourceAfterTransfer;
        private @Nullable Boolean deleteObjectsUniqueInSink;
        private @Nullable TransferJobTransferSpecTransferOptionsMetadataOptions metadataOptions;
        private @Nullable Boolean overwriteObjectsAlreadyExistingInSink;
        private @Nullable String overwriteWhen;
        public Builder() {}
        public Builder(TransferJobTransferSpecTransferOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteObjectsFromSourceAfterTransfer = defaults.deleteObjectsFromSourceAfterTransfer;
    	      this.deleteObjectsUniqueInSink = defaults.deleteObjectsUniqueInSink;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.overwriteObjectsAlreadyExistingInSink = defaults.overwriteObjectsAlreadyExistingInSink;
    	      this.overwriteWhen = defaults.overwriteWhen;
        }

        @CustomType.Setter
        public Builder deleteObjectsFromSourceAfterTransfer(@Nullable Boolean deleteObjectsFromSourceAfterTransfer) {

            this.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            return this;
        }
        @CustomType.Setter
        public Builder deleteObjectsUniqueInSink(@Nullable Boolean deleteObjectsUniqueInSink) {

            this.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            return this;
        }
        @CustomType.Setter
        public Builder metadataOptions(@Nullable TransferJobTransferSpecTransferOptionsMetadataOptions metadataOptions) {

            this.metadataOptions = metadataOptions;
            return this;
        }
        @CustomType.Setter
        public Builder overwriteObjectsAlreadyExistingInSink(@Nullable Boolean overwriteObjectsAlreadyExistingInSink) {

            this.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            return this;
        }
        @CustomType.Setter
        public Builder overwriteWhen(@Nullable String overwriteWhen) {

            this.overwriteWhen = overwriteWhen;
            return this;
        }
        public TransferJobTransferSpecTransferOptions build() {
            final var _resultValue = new TransferJobTransferSpecTransferOptions();
            _resultValue.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            _resultValue.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            _resultValue.metadataOptions = metadataOptions;
            _resultValue.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            _resultValue.overwriteWhen = overwriteWhen;
            return _resultValue;
        }
    }
}
