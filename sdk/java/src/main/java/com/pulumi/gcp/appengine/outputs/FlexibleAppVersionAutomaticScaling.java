// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.appengine.outputs.FlexibleAppVersionAutomaticScalingCpuUtilization;
import com.pulumi.gcp.appengine.outputs.FlexibleAppVersionAutomaticScalingDiskUtilization;
import com.pulumi.gcp.appengine.outputs.FlexibleAppVersionAutomaticScalingNetworkUtilization;
import com.pulumi.gcp.appengine.outputs.FlexibleAppVersionAutomaticScalingRequestUtilization;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlexibleAppVersionAutomaticScaling {
    /**
     * @return The time period that the Autoscaler should wait before it starts collecting information from a new instance.
     * This prevents the autoscaler from collecting information when the instance is initializing,
     * during which the collected usage would not be reliable. Default: 120s
     * 
     */
    private @Nullable String coolDownPeriod;
    /**
     * @return Target scaling by CPU usage.
     * Structure is documented below.
     * 
     */
    private FlexibleAppVersionAutomaticScalingCpuUtilization cpuUtilization;
    /**
     * @return Target scaling by disk usage.
     * Structure is documented below.
     * 
     */
    private @Nullable FlexibleAppVersionAutomaticScalingDiskUtilization diskUtilization;
    /**
     * @return Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    private @Nullable Integer maxConcurrentRequests;
    /**
     * @return Maximum number of idle instances that should be maintained for this version.
     * 
     */
    private @Nullable Integer maxIdleInstances;
    /**
     * @return Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    private @Nullable String maxPendingLatency;
    /**
     * @return Maximum number of instances that should be started to handle requests for this version. Default: 20
     * 
     */
    private @Nullable Integer maxTotalInstances;
    /**
     * @return Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    private @Nullable Integer minIdleInstances;
    /**
     * @return Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    private @Nullable String minPendingLatency;
    /**
     * @return Minimum number of running instances that should be maintained for this version. Default: 2
     * 
     */
    private @Nullable Integer minTotalInstances;
    /**
     * @return Target scaling by network usage.
     * Structure is documented below.
     * 
     */
    private @Nullable FlexibleAppVersionAutomaticScalingNetworkUtilization networkUtilization;
    /**
     * @return Target scaling by request utilization.
     * Structure is documented below.
     * 
     */
    private @Nullable FlexibleAppVersionAutomaticScalingRequestUtilization requestUtilization;

    private FlexibleAppVersionAutomaticScaling() {}
    /**
     * @return The time period that the Autoscaler should wait before it starts collecting information from a new instance.
     * This prevents the autoscaler from collecting information when the instance is initializing,
     * during which the collected usage would not be reliable. Default: 120s
     * 
     */
    public Optional<String> coolDownPeriod() {
        return Optional.ofNullable(this.coolDownPeriod);
    }
    /**
     * @return Target scaling by CPU usage.
     * Structure is documented below.
     * 
     */
    public FlexibleAppVersionAutomaticScalingCpuUtilization cpuUtilization() {
        return this.cpuUtilization;
    }
    /**
     * @return Target scaling by disk usage.
     * Structure is documented below.
     * 
     */
    public Optional<FlexibleAppVersionAutomaticScalingDiskUtilization> diskUtilization() {
        return Optional.ofNullable(this.diskUtilization);
    }
    /**
     * @return Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    public Optional<Integer> maxConcurrentRequests() {
        return Optional.ofNullable(this.maxConcurrentRequests);
    }
    /**
     * @return Maximum number of idle instances that should be maintained for this version.
     * 
     */
    public Optional<Integer> maxIdleInstances() {
        return Optional.ofNullable(this.maxIdleInstances);
    }
    /**
     * @return Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    public Optional<String> maxPendingLatency() {
        return Optional.ofNullable(this.maxPendingLatency);
    }
    /**
     * @return Maximum number of instances that should be started to handle requests for this version. Default: 20
     * 
     */
    public Optional<Integer> maxTotalInstances() {
        return Optional.ofNullable(this.maxTotalInstances);
    }
    /**
     * @return Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    public Optional<Integer> minIdleInstances() {
        return Optional.ofNullable(this.minIdleInstances);
    }
    /**
     * @return Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * 
     */
    public Optional<String> minPendingLatency() {
        return Optional.ofNullable(this.minPendingLatency);
    }
    /**
     * @return Minimum number of running instances that should be maintained for this version. Default: 2
     * 
     */
    public Optional<Integer> minTotalInstances() {
        return Optional.ofNullable(this.minTotalInstances);
    }
    /**
     * @return Target scaling by network usage.
     * Structure is documented below.
     * 
     */
    public Optional<FlexibleAppVersionAutomaticScalingNetworkUtilization> networkUtilization() {
        return Optional.ofNullable(this.networkUtilization);
    }
    /**
     * @return Target scaling by request utilization.
     * Structure is documented below.
     * 
     */
    public Optional<FlexibleAppVersionAutomaticScalingRequestUtilization> requestUtilization() {
        return Optional.ofNullable(this.requestUtilization);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleAppVersionAutomaticScaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String coolDownPeriod;
        private FlexibleAppVersionAutomaticScalingCpuUtilization cpuUtilization;
        private @Nullable FlexibleAppVersionAutomaticScalingDiskUtilization diskUtilization;
        private @Nullable Integer maxConcurrentRequests;
        private @Nullable Integer maxIdleInstances;
        private @Nullable String maxPendingLatency;
        private @Nullable Integer maxTotalInstances;
        private @Nullable Integer minIdleInstances;
        private @Nullable String minPendingLatency;
        private @Nullable Integer minTotalInstances;
        private @Nullable FlexibleAppVersionAutomaticScalingNetworkUtilization networkUtilization;
        private @Nullable FlexibleAppVersionAutomaticScalingRequestUtilization requestUtilization;
        public Builder() {}
        public Builder(FlexibleAppVersionAutomaticScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coolDownPeriod = defaults.coolDownPeriod;
    	      this.cpuUtilization = defaults.cpuUtilization;
    	      this.diskUtilization = defaults.diskUtilization;
    	      this.maxConcurrentRequests = defaults.maxConcurrentRequests;
    	      this.maxIdleInstances = defaults.maxIdleInstances;
    	      this.maxPendingLatency = defaults.maxPendingLatency;
    	      this.maxTotalInstances = defaults.maxTotalInstances;
    	      this.minIdleInstances = defaults.minIdleInstances;
    	      this.minPendingLatency = defaults.minPendingLatency;
    	      this.minTotalInstances = defaults.minTotalInstances;
    	      this.networkUtilization = defaults.networkUtilization;
    	      this.requestUtilization = defaults.requestUtilization;
        }

        @CustomType.Setter
        public Builder coolDownPeriod(@Nullable String coolDownPeriod) {
            this.coolDownPeriod = coolDownPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuUtilization(FlexibleAppVersionAutomaticScalingCpuUtilization cpuUtilization) {
            this.cpuUtilization = Objects.requireNonNull(cpuUtilization);
            return this;
        }
        @CustomType.Setter
        public Builder diskUtilization(@Nullable FlexibleAppVersionAutomaticScalingDiskUtilization diskUtilization) {
            this.diskUtilization = diskUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentRequests(@Nullable Integer maxConcurrentRequests) {
            this.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }
        @CustomType.Setter
        public Builder maxIdleInstances(@Nullable Integer maxIdleInstances) {
            this.maxIdleInstances = maxIdleInstances;
            return this;
        }
        @CustomType.Setter
        public Builder maxPendingLatency(@Nullable String maxPendingLatency) {
            this.maxPendingLatency = maxPendingLatency;
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalInstances(@Nullable Integer maxTotalInstances) {
            this.maxTotalInstances = maxTotalInstances;
            return this;
        }
        @CustomType.Setter
        public Builder minIdleInstances(@Nullable Integer minIdleInstances) {
            this.minIdleInstances = minIdleInstances;
            return this;
        }
        @CustomType.Setter
        public Builder minPendingLatency(@Nullable String minPendingLatency) {
            this.minPendingLatency = minPendingLatency;
            return this;
        }
        @CustomType.Setter
        public Builder minTotalInstances(@Nullable Integer minTotalInstances) {
            this.minTotalInstances = minTotalInstances;
            return this;
        }
        @CustomType.Setter
        public Builder networkUtilization(@Nullable FlexibleAppVersionAutomaticScalingNetworkUtilization networkUtilization) {
            this.networkUtilization = networkUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder requestUtilization(@Nullable FlexibleAppVersionAutomaticScalingRequestUtilization requestUtilization) {
            this.requestUtilization = requestUtilization;
            return this;
        }
        public FlexibleAppVersionAutomaticScaling build() {
            final var o = new FlexibleAppVersionAutomaticScaling();
            o.coolDownPeriod = coolDownPeriod;
            o.cpuUtilization = cpuUtilization;
            o.diskUtilization = diskUtilization;
            o.maxConcurrentRequests = maxConcurrentRequests;
            o.maxIdleInstances = maxIdleInstances;
            o.maxPendingLatency = maxPendingLatency;
            o.maxTotalInstances = maxTotalInstances;
            o.minIdleInstances = minIdleInstances;
            o.minPendingLatency = minPendingLatency;
            o.minTotalInstances = minTotalInstances;
            o.networkUtilization = networkUtilization;
            o.requestUtilization = requestUtilization;
            return o;
        }
    }
}
