// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs Empty = new RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs();

    /**
     * Full machine-type names, e.g. &#34;n1-standard-16&#34;
     * 
     */
    @Import(name="machineTypes", required=true)
    private Output<List<String>> machineTypes;

    /**
     * @return Full machine-type names, e.g. &#34;n1-standard-16&#34;
     * 
     */
    public Output<List<String>> machineTypes() {
        return this.machineTypes;
    }

    /**
     * The name of the instance group manager. Must be 1-63
     * characters long and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
     * include lowercase letters, numbers, and hyphens.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the instance group manager. Must be 1-63
     * characters long and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
     * include lowercase letters, numbers, and hyphens.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Preference of this instance selection. Lower number means higher preference. MIG will first try to create a VM based on the machine-type with lowest rank and fallback to next rank based on availability. Machine types and instance selections with the same rank have the same preference.
     * 
     */
    @Import(name="rank")
    private @Nullable Output<Integer> rank;

    /**
     * @return Preference of this instance selection. Lower number means higher preference. MIG will first try to create a VM based on the machine-type with lowest rank and fallback to next rank based on availability. Machine types and instance selections with the same rank have the same preference.
     * 
     */
    public Optional<Output<Integer>> rank() {
        return Optional.ofNullable(this.rank);
    }

    private RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs() {}

    private RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs(RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs $) {
        this.machineTypes = $.machineTypes;
        this.name = $.name;
        this.rank = $.rank;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs $;

        public Builder() {
            $ = new RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs();
        }

        public Builder(RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs defaults) {
            $ = new RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param machineTypes Full machine-type names, e.g. &#34;n1-standard-16&#34;
         * 
         * @return builder
         * 
         */
        public Builder machineTypes(Output<List<String>> machineTypes) {
            $.machineTypes = machineTypes;
            return this;
        }

        /**
         * @param machineTypes Full machine-type names, e.g. &#34;n1-standard-16&#34;
         * 
         * @return builder
         * 
         */
        public Builder machineTypes(List<String> machineTypes) {
            return machineTypes(Output.of(machineTypes));
        }

        /**
         * @param machineTypes Full machine-type names, e.g. &#34;n1-standard-16&#34;
         * 
         * @return builder
         * 
         */
        public Builder machineTypes(String... machineTypes) {
            return machineTypes(List.of(machineTypes));
        }

        /**
         * @param name The name of the instance group manager. Must be 1-63
         * characters long and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
         * include lowercase letters, numbers, and hyphens.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance group manager. Must be 1-63
         * characters long and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
         * include lowercase letters, numbers, and hyphens.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rank Preference of this instance selection. Lower number means higher preference. MIG will first try to create a VM based on the machine-type with lowest rank and fallback to next rank based on availability. Machine types and instance selections with the same rank have the same preference.
         * 
         * @return builder
         * 
         */
        public Builder rank(@Nullable Output<Integer> rank) {
            $.rank = rank;
            return this;
        }

        /**
         * @param rank Preference of this instance selection. Lower number means higher preference. MIG will first try to create a VM based on the machine-type with lowest rank and fallback to next rank based on availability. Machine types and instance selections with the same rank have the same preference.
         * 
         * @return builder
         * 
         */
        public Builder rank(Integer rank) {
            return rank(Output.of(rank));
        }

        public RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs build() {
            if ($.machineTypes == null) {
                throw new MissingRequiredPropertyException("RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs", "machineTypes");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionArgs", "name");
            }
            return $;
        }
    }

}
