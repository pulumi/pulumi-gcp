// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.parametermanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRegionalParameterVersionRenderArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRegionalParameterVersionRenderArgs Empty = new GetRegionalParameterVersionRenderArgs();

    /**
     * Location of Parameter Manager regional Parameter resource.
     * It must be provided when the `parameter` field provided consists of only the name of the regional parameter.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of Parameter Manager regional Parameter resource.
     * It must be provided when the `parameter` field provided consists of only the name of the regional parameter.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The Parameter for obtaining the Regional Parameter Version.
     * This can be either the reference of the parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
     * 
     */
    @Import(name="parameter", required=true)
    private Output<String> parameter;

    /**
     * @return The Parameter for obtaining the Regional Parameter Version.
     * This can be either the reference of the parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
     * 
     */
    public Output<String> parameter() {
        return this.parameter;
    }

    /**
     * The version of the regional parameter to get.
     * 
     */
    @Import(name="parameterVersionId", required=true)
    private Output<String> parameterVersionId;

    /**
     * @return The version of the regional parameter to get.
     * 
     */
    public Output<String> parameterVersionId() {
        return this.parameterVersionId;
    }

    /**
     * The project for retrieving the Regional Parameter Version. If it&#39;s not
     * specified, the provider project will be used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for retrieving the Regional Parameter Version. If it&#39;s not
     * specified, the provider project will be used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetRegionalParameterVersionRenderArgs() {}

    private GetRegionalParameterVersionRenderArgs(GetRegionalParameterVersionRenderArgs $) {
        this.location = $.location;
        this.parameter = $.parameter;
        this.parameterVersionId = $.parameterVersionId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegionalParameterVersionRenderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegionalParameterVersionRenderArgs $;

        public Builder() {
            $ = new GetRegionalParameterVersionRenderArgs();
        }

        public Builder(GetRegionalParameterVersionRenderArgs defaults) {
            $ = new GetRegionalParameterVersionRenderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location Location of Parameter Manager regional Parameter resource.
         * It must be provided when the `parameter` field provided consists of only the name of the regional parameter.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of Parameter Manager regional Parameter resource.
         * It must be provided when the `parameter` field provided consists of only the name of the regional parameter.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param parameter The Parameter for obtaining the Regional Parameter Version.
         * This can be either the reference of the parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
         * 
         * @return builder
         * 
         */
        public Builder parameter(Output<String> parameter) {
            $.parameter = parameter;
            return this;
        }

        /**
         * @param parameter The Parameter for obtaining the Regional Parameter Version.
         * This can be either the reference of the parameter as in `projects/{{project}}/locations/{{location}}/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
         * 
         * @return builder
         * 
         */
        public Builder parameter(String parameter) {
            return parameter(Output.of(parameter));
        }

        /**
         * @param parameterVersionId The version of the regional parameter to get.
         * 
         * @return builder
         * 
         */
        public Builder parameterVersionId(Output<String> parameterVersionId) {
            $.parameterVersionId = parameterVersionId;
            return this;
        }

        /**
         * @param parameterVersionId The version of the regional parameter to get.
         * 
         * @return builder
         * 
         */
        public Builder parameterVersionId(String parameterVersionId) {
            return parameterVersionId(Output.of(parameterVersionId));
        }

        /**
         * @param project The project for retrieving the Regional Parameter Version. If it&#39;s not
         * specified, the provider project will be used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for retrieving the Regional Parameter Version. If it&#39;s not
         * specified, the provider project will be used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetRegionalParameterVersionRenderArgs build() {
            if ($.parameter == null) {
                throw new MissingRequiredPropertyException("GetRegionalParameterVersionRenderArgs", "parameter");
            }
            if ($.parameterVersionId == null) {
                throw new MissingRequiredPropertyException("GetRegionalParameterVersionRenderArgs", "parameterVersionId");
            }
            return $;
        }
    }

}
