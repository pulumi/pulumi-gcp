// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apigee.inputs.ApiProductAttributeArgs;
import com.pulumi.gcp.apigee.inputs.ApiProductGraphqlOperationGroupArgs;
import com.pulumi.gcp.apigee.inputs.ApiProductGrpcOperationGroupArgs;
import com.pulumi.gcp.apigee.inputs.ApiProductOperationGroupArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiProductArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiProductArgs Empty = new ApiProductArgs();

    /**
     * Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
     * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
     * 
     */
    @Import(name="apiResources")
    private @Nullable Output<List<String>> apiResources;

    /**
     * @return Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
     * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
     * 
     */
    public Optional<Output<List<String>>> apiResources() {
        return Optional.ofNullable(this.apiResources);
    }

    /**
     * Flag that specifies how API keys are approved to access the APIs defined by the API product.
     * Valid values are `auto` or `manual`.
     * Possible values are: `auto`, `manual`.
     * 
     */
    @Import(name="approvalType")
    private @Nullable Output<String> approvalType;

    /**
     * @return Flag that specifies how API keys are approved to access the APIs defined by the API product.
     * Valid values are `auto` or `manual`.
     * Possible values are: `auto`, `manual`.
     * 
     */
    public Optional<Output<String>> approvalType() {
        return Optional.ofNullable(this.approvalType);
    }

    /**
     * Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
     * Use this property to specify the access level of the API product as either public, private, or internal.
     * Structure is documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<ApiProductAttributeArgs>> attributes;

    /**
     * @return Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
     * Use this property to specify the access level of the API product as either public, private, or internal.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ApiProductAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Description of the API product. Include key information about the API product that is not captured by other fields.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the API product. Include key information about the API product that is not captured by other fields.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name displayed in the UI or developer portal to developers registering for API access.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Name displayed in the UI or developer portal to developers registering for API access.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
     * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
     * 
     */
    @Import(name="environments")
    private @Nullable Output<List<String>> environments;

    /**
     * @return Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
     * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
     * 
     */
    public Optional<Output<List<String>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    /**
     * Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
     * Structure is documented below.
     * 
     */
    @Import(name="graphqlOperationGroup")
    private @Nullable Output<ApiProductGraphqlOperationGroupArgs> graphqlOperationGroup;

    /**
     * @return Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ApiProductGraphqlOperationGroupArgs>> graphqlOperationGroup() {
        return Optional.ofNullable(this.graphqlOperationGroup);
    }

    /**
     * Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
     * Structure is documented below.
     * 
     */
    @Import(name="grpcOperationGroup")
    private @Nullable Output<ApiProductGrpcOperationGroupArgs> grpcOperationGroup;

    /**
     * @return Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ApiProductGrpcOperationGroupArgs>> grpcOperationGroup() {
        return Optional.ofNullable(this.grpcOperationGroup);
    }

    /**
     * Internal name of the API product.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Internal name of the API product.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
     * Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
     * Structure is documented below.
     * 
     */
    @Import(name="operationGroup")
    private @Nullable Output<ApiProductOperationGroupArgs> operationGroup;

    /**
     * @return Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
     * Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ApiProductOperationGroupArgs>> operationGroup() {
        return Optional.ofNullable(this.operationGroup);
    }

    /**
     * The Apigee Organization associated with the Apigee API product,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee API product,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
     * Apigee rejects requests to API proxies that are not listed.
     * 
     */
    @Import(name="proxies")
    private @Nullable Output<List<String>> proxies;

    /**
     * @return Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
     * Apigee rejects requests to API proxies that are not listed.
     * 
     */
    public Optional<Output<List<String>>> proxies() {
        return Optional.ofNullable(this.proxies);
    }

    /**
     * Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
     * For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
     * 
     */
    @Import(name="quota")
    private @Nullable Output<String> quota;

    /**
     * @return Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
     * For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
     * 
     */
    public Optional<Output<String>> quota() {
        return Optional.ofNullable(this.quota);
    }

    /**
     * Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
     * Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
     * 
     */
    @Import(name="quotaCounterScope")
    private @Nullable Output<String> quotaCounterScope;

    /**
     * @return Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
     * Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
     * 
     */
    public Optional<Output<String>> quotaCounterScope() {
        return Optional.ofNullable(this.quotaCounterScope);
    }

    /**
     * Time interval over which the number of request messages is calculated.
     * 
     */
    @Import(name="quotaInterval")
    private @Nullable Output<String> quotaInterval;

    /**
     * @return Time interval over which the number of request messages is calculated.
     * 
     */
    public Optional<Output<String>> quotaInterval() {
        return Optional.ofNullable(this.quotaInterval);
    }

    /**
     * Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
     * 
     */
    @Import(name="quotaTimeUnit")
    private @Nullable Output<String> quotaTimeUnit;

    /**
     * @return Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
     * 
     */
    public Optional<Output<String>> quotaTimeUnit() {
        return Optional.ofNullable(this.quotaTimeUnit);
    }

    /**
     * Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
     * 
     */
    @Import(name="space")
    private @Nullable Output<String> space;

    /**
     * @return Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
     * 
     */
    public Optional<Output<String>> space() {
        return Optional.ofNullable(this.space);
    }

    private ApiProductArgs() {}

    private ApiProductArgs(ApiProductArgs $) {
        this.apiResources = $.apiResources;
        this.approvalType = $.approvalType;
        this.attributes = $.attributes;
        this.description = $.description;
        this.displayName = $.displayName;
        this.environments = $.environments;
        this.graphqlOperationGroup = $.graphqlOperationGroup;
        this.grpcOperationGroup = $.grpcOperationGroup;
        this.name = $.name;
        this.operationGroup = $.operationGroup;
        this.orgId = $.orgId;
        this.proxies = $.proxies;
        this.quota = $.quota;
        this.quotaCounterScope = $.quotaCounterScope;
        this.quotaInterval = $.quotaInterval;
        this.quotaTimeUnit = $.quotaTimeUnit;
        this.scopes = $.scopes;
        this.space = $.space;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiProductArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiProductArgs $;

        public Builder() {
            $ = new ApiProductArgs();
        }

        public Builder(ApiProductArgs defaults) {
            $ = new ApiProductArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiResources Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
         * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
         * 
         * @return builder
         * 
         */
        public Builder apiResources(@Nullable Output<List<String>> apiResources) {
            $.apiResources = apiResources;
            return this;
        }

        /**
         * @param apiResources Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
         * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
         * 
         * @return builder
         * 
         */
        public Builder apiResources(List<String> apiResources) {
            return apiResources(Output.of(apiResources));
        }

        /**
         * @param apiResources Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
         * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
         * 
         * @return builder
         * 
         */
        public Builder apiResources(String... apiResources) {
            return apiResources(List.of(apiResources));
        }

        /**
         * @param approvalType Flag that specifies how API keys are approved to access the APIs defined by the API product.
         * Valid values are `auto` or `manual`.
         * Possible values are: `auto`, `manual`.
         * 
         * @return builder
         * 
         */
        public Builder approvalType(@Nullable Output<String> approvalType) {
            $.approvalType = approvalType;
            return this;
        }

        /**
         * @param approvalType Flag that specifies how API keys are approved to access the APIs defined by the API product.
         * Valid values are `auto` or `manual`.
         * Possible values are: `auto`, `manual`.
         * 
         * @return builder
         * 
         */
        public Builder approvalType(String approvalType) {
            return approvalType(Output.of(approvalType));
        }

        /**
         * @param attributes Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
         * Use this property to specify the access level of the API product as either public, private, or internal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<ApiProductAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
         * Use this property to specify the access level of the API product as either public, private, or internal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<ApiProductAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
         * Use this property to specify the access level of the API product as either public, private, or internal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(ApiProductAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param description Description of the API product. Include key information about the API product that is not captured by other fields.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the API product. Include key information about the API product that is not captured by other fields.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Name displayed in the UI or developer portal to developers registering for API access.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name displayed in the UI or developer portal to developers registering for API access.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param environments Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
         * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
         * 
         * @return builder
         * 
         */
        public Builder environments(@Nullable Output<List<String>> environments) {
            $.environments = environments;
            return this;
        }

        /**
         * @param environments Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
         * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
         * 
         * @return builder
         * 
         */
        public Builder environments(List<String> environments) {
            return environments(Output.of(environments));
        }

        /**
         * @param environments Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
         * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
         * 
         * @return builder
         * 
         */
        public Builder environments(String... environments) {
            return environments(List.of(environments));
        }

        /**
         * @param graphqlOperationGroup Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder graphqlOperationGroup(@Nullable Output<ApiProductGraphqlOperationGroupArgs> graphqlOperationGroup) {
            $.graphqlOperationGroup = graphqlOperationGroup;
            return this;
        }

        /**
         * @param graphqlOperationGroup Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder graphqlOperationGroup(ApiProductGraphqlOperationGroupArgs graphqlOperationGroup) {
            return graphqlOperationGroup(Output.of(graphqlOperationGroup));
        }

        /**
         * @param grpcOperationGroup Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder grpcOperationGroup(@Nullable Output<ApiProductGrpcOperationGroupArgs> grpcOperationGroup) {
            $.grpcOperationGroup = grpcOperationGroup;
            return this;
        }

        /**
         * @param grpcOperationGroup Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder grpcOperationGroup(ApiProductGrpcOperationGroupArgs grpcOperationGroup) {
            return grpcOperationGroup(Output.of(grpcOperationGroup));
        }

        /**
         * @param name Internal name of the API product.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Internal name of the API product.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param operationGroup Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
         * Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder operationGroup(@Nullable Output<ApiProductOperationGroupArgs> operationGroup) {
            $.operationGroup = operationGroup;
            return this;
        }

        /**
         * @param operationGroup Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
         * Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder operationGroup(ApiProductOperationGroupArgs operationGroup) {
            return operationGroup(Output.of(operationGroup));
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee API product,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee API product,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param proxies Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
         * Apigee rejects requests to API proxies that are not listed.
         * 
         * @return builder
         * 
         */
        public Builder proxies(@Nullable Output<List<String>> proxies) {
            $.proxies = proxies;
            return this;
        }

        /**
         * @param proxies Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
         * Apigee rejects requests to API proxies that are not listed.
         * 
         * @return builder
         * 
         */
        public Builder proxies(List<String> proxies) {
            return proxies(Output.of(proxies));
        }

        /**
         * @param proxies Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
         * Apigee rejects requests to API proxies that are not listed.
         * 
         * @return builder
         * 
         */
        public Builder proxies(String... proxies) {
            return proxies(List.of(proxies));
        }

        /**
         * @param quota Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
         * For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
         * 
         * @return builder
         * 
         */
        public Builder quota(@Nullable Output<String> quota) {
            $.quota = quota;
            return this;
        }

        /**
         * @param quota Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
         * For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
         * 
         * @return builder
         * 
         */
        public Builder quota(String quota) {
            return quota(Output.of(quota));
        }

        /**
         * @param quotaCounterScope Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
         * Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
         * 
         * @return builder
         * 
         */
        public Builder quotaCounterScope(@Nullable Output<String> quotaCounterScope) {
            $.quotaCounterScope = quotaCounterScope;
            return this;
        }

        /**
         * @param quotaCounterScope Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
         * Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
         * 
         * @return builder
         * 
         */
        public Builder quotaCounterScope(String quotaCounterScope) {
            return quotaCounterScope(Output.of(quotaCounterScope));
        }

        /**
         * @param quotaInterval Time interval over which the number of request messages is calculated.
         * 
         * @return builder
         * 
         */
        public Builder quotaInterval(@Nullable Output<String> quotaInterval) {
            $.quotaInterval = quotaInterval;
            return this;
        }

        /**
         * @param quotaInterval Time interval over which the number of request messages is calculated.
         * 
         * @return builder
         * 
         */
        public Builder quotaInterval(String quotaInterval) {
            return quotaInterval(Output.of(quotaInterval));
        }

        /**
         * @param quotaTimeUnit Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
         * 
         * @return builder
         * 
         */
        public Builder quotaTimeUnit(@Nullable Output<String> quotaTimeUnit) {
            $.quotaTimeUnit = quotaTimeUnit;
            return this;
        }

        /**
         * @param quotaTimeUnit Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
         * 
         * @return builder
         * 
         */
        public Builder quotaTimeUnit(String quotaTimeUnit) {
            return quotaTimeUnit(Output.of(quotaTimeUnit));
        }

        /**
         * @param scopes Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param space Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
         * 
         * @return builder
         * 
         */
        public Builder space(@Nullable Output<String> space) {
            $.space = space;
            return this;
        }

        /**
         * @param space Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
         * 
         * @return builder
         * 
         */
        public Builder space(String space) {
            return space(Output.of(space));
        }

        public ApiProductArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ApiProductArgs", "displayName");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("ApiProductArgs", "orgId");
            }
            return $;
        }
    }

}
