// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.privilegedaccessmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.privilegedaccessmanager.inputs.EntitlementAdditionalNotificationTargetsArgs;
import com.pulumi.gcp.privilegedaccessmanager.inputs.EntitlementApprovalWorkflowArgs;
import com.pulumi.gcp.privilegedaccessmanager.inputs.EntitlementEligibleUserArgs;
import com.pulumi.gcp.privilegedaccessmanager.inputs.EntitlementPrivilegedAccessArgs;
import com.pulumi.gcp.privilegedaccessmanager.inputs.EntitlementRequesterJustificationConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntitlementArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntitlementArgs Empty = new EntitlementArgs();

    /**
     * AdditionalNotificationTargets includes email addresses to be notified.
     * 
     */
    @Import(name="additionalNotificationTargets")
    private @Nullable Output<EntitlementAdditionalNotificationTargetsArgs> additionalNotificationTargets;

    /**
     * @return AdditionalNotificationTargets includes email addresses to be notified.
     * 
     */
    public Optional<Output<EntitlementAdditionalNotificationTargetsArgs>> additionalNotificationTargets() {
        return Optional.ofNullable(this.additionalNotificationTargets);
    }

    /**
     * The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
     * Different types of approval workflows that can be used to gate privileged access granting.
     * 
     */
    @Import(name="approvalWorkflow")
    private @Nullable Output<EntitlementApprovalWorkflowArgs> approvalWorkflow;

    /**
     * @return The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
     * Different types of approval workflows that can be used to gate privileged access granting.
     * 
     */
    public Optional<Output<EntitlementApprovalWorkflowArgs>> approvalWorkflow() {
        return Optional.ofNullable(this.approvalWorkflow);
    }

    /**
     * Who can create Grants using Entitlement. This list should contain at most one entry
     * Structure is documented below.
     * 
     */
    @Import(name="eligibleUsers", required=true)
    private Output<List<EntitlementEligibleUserArgs>> eligibleUsers;

    /**
     * @return Who can create Grants using Entitlement. This list should contain at most one entry
     * Structure is documented below.
     * 
     */
    public Output<List<EntitlementEligibleUserArgs>> eligibleUsers() {
        return this.eligibleUsers;
    }

    /**
     * The ID to use for this Entitlement. This will become the last part of the resource name.
     * This value should be 4-63 characters, and valid characters are &#34;[a-z]&#34;, &#34;[0-9]&#34;, and &#34;-&#34;. The first character should be from [a-z].
     * This value should be unique among all other Entitlements under the specified `parent`.
     * 
     */
    @Import(name="entitlementId", required=true)
    private Output<String> entitlementId;

    /**
     * @return The ID to use for this Entitlement. This will become the last part of the resource name.
     * This value should be 4-63 characters, and valid characters are &#34;[a-z]&#34;, &#34;[0-9]&#34;, and &#34;-&#34;. The first character should be from [a-z].
     * This value should be unique among all other Entitlements under the specified `parent`.
     * 
     */
    public Output<String> entitlementId() {
        return this.entitlementId;
    }

    /**
     * The region of the Entitlement resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The region of the Entitlement resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The maximum amount of time for which access would be granted for a request.
     * A requester can choose to ask for access for less than this duration but never more.
     * Format: calculate the time in seconds and concatenate it with &#39;s&#39; i.e. 2 hours = &#34;7200s&#34;, 45 minutes = &#34;2700s&#34;
     * 
     */
    @Import(name="maxRequestDuration", required=true)
    private Output<String> maxRequestDuration;

    /**
     * @return The maximum amount of time for which access would be granted for a request.
     * A requester can choose to ask for access for less than this duration but never more.
     * Format: calculate the time in seconds and concatenate it with &#39;s&#39; i.e. 2 hours = &#34;7200s&#34;, 45 minutes = &#34;2700s&#34;
     * 
     */
    public Output<String> maxRequestDuration() {
        return this.maxRequestDuration;
    }

    /**
     * Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * Privileged access that this service can be used to gate.
     * Structure is documented below.
     * 
     */
    @Import(name="privilegedAccess", required=true)
    private Output<EntitlementPrivilegedAccessArgs> privilegedAccess;

    /**
     * @return Privileged access that this service can be used to gate.
     * Structure is documented below.
     * 
     */
    public Output<EntitlementPrivilegedAccessArgs> privilegedAccess() {
        return this.privilegedAccess;
    }

    /**
     * Defines the ways in which a requester should provide the justification while requesting for access.
     * Structure is documented below.
     * 
     */
    @Import(name="requesterJustificationConfig", required=true)
    private Output<EntitlementRequesterJustificationConfigArgs> requesterJustificationConfig;

    /**
     * @return Defines the ways in which a requester should provide the justification while requesting for access.
     * Structure is documented below.
     * 
     */
    public Output<EntitlementRequesterJustificationConfigArgs> requesterJustificationConfig() {
        return this.requesterJustificationConfig;
    }

    private EntitlementArgs() {}

    private EntitlementArgs(EntitlementArgs $) {
        this.additionalNotificationTargets = $.additionalNotificationTargets;
        this.approvalWorkflow = $.approvalWorkflow;
        this.eligibleUsers = $.eligibleUsers;
        this.entitlementId = $.entitlementId;
        this.location = $.location;
        this.maxRequestDuration = $.maxRequestDuration;
        this.parent = $.parent;
        this.privilegedAccess = $.privilegedAccess;
        this.requesterJustificationConfig = $.requesterJustificationConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntitlementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntitlementArgs $;

        public Builder() {
            $ = new EntitlementArgs();
        }

        public Builder(EntitlementArgs defaults) {
            $ = new EntitlementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalNotificationTargets AdditionalNotificationTargets includes email addresses to be notified.
         * 
         * @return builder
         * 
         */
        public Builder additionalNotificationTargets(@Nullable Output<EntitlementAdditionalNotificationTargetsArgs> additionalNotificationTargets) {
            $.additionalNotificationTargets = additionalNotificationTargets;
            return this;
        }

        /**
         * @param additionalNotificationTargets AdditionalNotificationTargets includes email addresses to be notified.
         * 
         * @return builder
         * 
         */
        public Builder additionalNotificationTargets(EntitlementAdditionalNotificationTargetsArgs additionalNotificationTargets) {
            return additionalNotificationTargets(Output.of(additionalNotificationTargets));
        }

        /**
         * @param approvalWorkflow The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
         * Different types of approval workflows that can be used to gate privileged access granting.
         * 
         * @return builder
         * 
         */
        public Builder approvalWorkflow(@Nullable Output<EntitlementApprovalWorkflowArgs> approvalWorkflow) {
            $.approvalWorkflow = approvalWorkflow;
            return this;
        }

        /**
         * @param approvalWorkflow The approvals needed before access will be granted to a requester. No approvals will be needed if this field is null.
         * Different types of approval workflows that can be used to gate privileged access granting.
         * 
         * @return builder
         * 
         */
        public Builder approvalWorkflow(EntitlementApprovalWorkflowArgs approvalWorkflow) {
            return approvalWorkflow(Output.of(approvalWorkflow));
        }

        /**
         * @param eligibleUsers Who can create Grants using Entitlement. This list should contain at most one entry
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eligibleUsers(Output<List<EntitlementEligibleUserArgs>> eligibleUsers) {
            $.eligibleUsers = eligibleUsers;
            return this;
        }

        /**
         * @param eligibleUsers Who can create Grants using Entitlement. This list should contain at most one entry
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eligibleUsers(List<EntitlementEligibleUserArgs> eligibleUsers) {
            return eligibleUsers(Output.of(eligibleUsers));
        }

        /**
         * @param eligibleUsers Who can create Grants using Entitlement. This list should contain at most one entry
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eligibleUsers(EntitlementEligibleUserArgs... eligibleUsers) {
            return eligibleUsers(List.of(eligibleUsers));
        }

        /**
         * @param entitlementId The ID to use for this Entitlement. This will become the last part of the resource name.
         * This value should be 4-63 characters, and valid characters are &#34;[a-z]&#34;, &#34;[0-9]&#34;, and &#34;-&#34;. The first character should be from [a-z].
         * This value should be unique among all other Entitlements under the specified `parent`.
         * 
         * @return builder
         * 
         */
        public Builder entitlementId(Output<String> entitlementId) {
            $.entitlementId = entitlementId;
            return this;
        }

        /**
         * @param entitlementId The ID to use for this Entitlement. This will become the last part of the resource name.
         * This value should be 4-63 characters, and valid characters are &#34;[a-z]&#34;, &#34;[0-9]&#34;, and &#34;-&#34;. The first character should be from [a-z].
         * This value should be unique among all other Entitlements under the specified `parent`.
         * 
         * @return builder
         * 
         */
        public Builder entitlementId(String entitlementId) {
            return entitlementId(Output.of(entitlementId));
        }

        /**
         * @param location The region of the Entitlement resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The region of the Entitlement resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maxRequestDuration The maximum amount of time for which access would be granted for a request.
         * A requester can choose to ask for access for less than this duration but never more.
         * Format: calculate the time in seconds and concatenate it with &#39;s&#39; i.e. 2 hours = &#34;7200s&#34;, 45 minutes = &#34;2700s&#34;
         * 
         * @return builder
         * 
         */
        public Builder maxRequestDuration(Output<String> maxRequestDuration) {
            $.maxRequestDuration = maxRequestDuration;
            return this;
        }

        /**
         * @param maxRequestDuration The maximum amount of time for which access would be granted for a request.
         * A requester can choose to ask for access for less than this duration but never more.
         * Format: calculate the time in seconds and concatenate it with &#39;s&#39; i.e. 2 hours = &#34;7200s&#34;, 45 minutes = &#34;2700s&#34;
         * 
         * @return builder
         * 
         */
        public Builder maxRequestDuration(String maxRequestDuration) {
            return maxRequestDuration(Output.of(maxRequestDuration));
        }

        /**
         * @param parent Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param privilegedAccess Privileged access that this service can be used to gate.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privilegedAccess(Output<EntitlementPrivilegedAccessArgs> privilegedAccess) {
            $.privilegedAccess = privilegedAccess;
            return this;
        }

        /**
         * @param privilegedAccess Privileged access that this service can be used to gate.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privilegedAccess(EntitlementPrivilegedAccessArgs privilegedAccess) {
            return privilegedAccess(Output.of(privilegedAccess));
        }

        /**
         * @param requesterJustificationConfig Defines the ways in which a requester should provide the justification while requesting for access.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requesterJustificationConfig(Output<EntitlementRequesterJustificationConfigArgs> requesterJustificationConfig) {
            $.requesterJustificationConfig = requesterJustificationConfig;
            return this;
        }

        /**
         * @param requesterJustificationConfig Defines the ways in which a requester should provide the justification while requesting for access.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requesterJustificationConfig(EntitlementRequesterJustificationConfigArgs requesterJustificationConfig) {
            return requesterJustificationConfig(Output.of(requesterJustificationConfig));
        }

        public EntitlementArgs build() {
            if ($.eligibleUsers == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "eligibleUsers");
            }
            if ($.entitlementId == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "entitlementId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "location");
            }
            if ($.maxRequestDuration == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "maxRequestDuration");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "parent");
            }
            if ($.privilegedAccess == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "privilegedAccess");
            }
            if ($.requesterJustificationConfig == null) {
                throw new MissingRequiredPropertyException("EntitlementArgs", "requesterJustificationConfig");
            }
            return $;
        }
    }

}
