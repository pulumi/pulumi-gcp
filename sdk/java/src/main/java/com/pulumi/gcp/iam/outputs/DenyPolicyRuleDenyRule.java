// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.iam.outputs.DenyPolicyRuleDenyRuleDenialCondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DenyPolicyRuleDenyRule {
    /**
     * @return User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
     * Structure is documented below.
     * 
     */
    private final DenyPolicyRuleDenyRuleDenialCondition denialCondition;
    /**
     * @return The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
     * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
     * 
     */
    private final @Nullable List<String> deniedPermissions;
    /**
     * @return The identities that are prevented from using one or more permissions on Google Cloud resources.
     * 
     */
    private final @Nullable List<String> deniedPrincipals;
    /**
     * @return Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
     * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
     * The excluded permissions can be specified using the same syntax as deniedPermissions.
     * 
     */
    private final @Nullable List<String> exceptionPermissions;
    /**
     * @return The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
     * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
     * 
     */
    private final @Nullable List<String> exceptionPrincipals;

    @CustomType.Constructor
    private DenyPolicyRuleDenyRule(
        @CustomType.Parameter("denialCondition") DenyPolicyRuleDenyRuleDenialCondition denialCondition,
        @CustomType.Parameter("deniedPermissions") @Nullable List<String> deniedPermissions,
        @CustomType.Parameter("deniedPrincipals") @Nullable List<String> deniedPrincipals,
        @CustomType.Parameter("exceptionPermissions") @Nullable List<String> exceptionPermissions,
        @CustomType.Parameter("exceptionPrincipals") @Nullable List<String> exceptionPrincipals) {
        this.denialCondition = denialCondition;
        this.deniedPermissions = deniedPermissions;
        this.deniedPrincipals = deniedPrincipals;
        this.exceptionPermissions = exceptionPermissions;
        this.exceptionPrincipals = exceptionPrincipals;
    }

    /**
     * @return User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
     * Structure is documented below.
     * 
     */
    public DenyPolicyRuleDenyRuleDenialCondition denialCondition() {
        return this.denialCondition;
    }
    /**
     * @return The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
     * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
     * 
     */
    public List<String> deniedPermissions() {
        return this.deniedPermissions == null ? List.of() : this.deniedPermissions;
    }
    /**
     * @return The identities that are prevented from using one or more permissions on Google Cloud resources.
     * 
     */
    public List<String> deniedPrincipals() {
        return this.deniedPrincipals == null ? List.of() : this.deniedPrincipals;
    }
    /**
     * @return Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
     * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
     * The excluded permissions can be specified using the same syntax as deniedPermissions.
     * 
     */
    public List<String> exceptionPermissions() {
        return this.exceptionPermissions == null ? List.of() : this.exceptionPermissions;
    }
    /**
     * @return The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
     * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
     * 
     */
    public List<String> exceptionPrincipals() {
        return this.exceptionPrincipals == null ? List.of() : this.exceptionPrincipals;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DenyPolicyRuleDenyRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DenyPolicyRuleDenyRuleDenialCondition denialCondition;
        private @Nullable List<String> deniedPermissions;
        private @Nullable List<String> deniedPrincipals;
        private @Nullable List<String> exceptionPermissions;
        private @Nullable List<String> exceptionPrincipals;

        public Builder() {
    	      // Empty
        }

        public Builder(DenyPolicyRuleDenyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.denialCondition = defaults.denialCondition;
    	      this.deniedPermissions = defaults.deniedPermissions;
    	      this.deniedPrincipals = defaults.deniedPrincipals;
    	      this.exceptionPermissions = defaults.exceptionPermissions;
    	      this.exceptionPrincipals = defaults.exceptionPrincipals;
        }

        public Builder denialCondition(DenyPolicyRuleDenyRuleDenialCondition denialCondition) {
            this.denialCondition = Objects.requireNonNull(denialCondition);
            return this;
        }
        public Builder deniedPermissions(@Nullable List<String> deniedPermissions) {
            this.deniedPermissions = deniedPermissions;
            return this;
        }
        public Builder deniedPermissions(String... deniedPermissions) {
            return deniedPermissions(List.of(deniedPermissions));
        }
        public Builder deniedPrincipals(@Nullable List<String> deniedPrincipals) {
            this.deniedPrincipals = deniedPrincipals;
            return this;
        }
        public Builder deniedPrincipals(String... deniedPrincipals) {
            return deniedPrincipals(List.of(deniedPrincipals));
        }
        public Builder exceptionPermissions(@Nullable List<String> exceptionPermissions) {
            this.exceptionPermissions = exceptionPermissions;
            return this;
        }
        public Builder exceptionPermissions(String... exceptionPermissions) {
            return exceptionPermissions(List.of(exceptionPermissions));
        }
        public Builder exceptionPrincipals(@Nullable List<String> exceptionPrincipals) {
            this.exceptionPrincipals = exceptionPrincipals;
            return this;
        }
        public Builder exceptionPrincipals(String... exceptionPrincipals) {
            return exceptionPrincipals(List.of(exceptionPrincipals));
        }        public DenyPolicyRuleDenyRule build() {
            return new DenyPolicyRuleDenyRule(denialCondition, deniedPermissions, deniedPrincipals, exceptionPermissions, exceptionPrincipals);
        }
    }
}
