// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppCheckRecaptchaEnterpriseConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppCheckRecaptchaEnterpriseConfigArgs Empty = new AppCheckRecaptchaEnterpriseConfigArgs();

    /**
     * The ID of an
     * [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
     * 
     * ***
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return The ID of an
     * [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
     * 
     * ***
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
     * **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
     * 
     */
    @Import(name="siteKey", required=true)
    private Output<String> siteKey;

    /**
     * @return The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
     * **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
     * 
     */
    public Output<String> siteKey() {
        return this.siteKey;
    }

    /**
     * Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
     * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<String> tokenTtl;

    /**
     * @return Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
     * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    private AppCheckRecaptchaEnterpriseConfigArgs() {}

    private AppCheckRecaptchaEnterpriseConfigArgs(AppCheckRecaptchaEnterpriseConfigArgs $) {
        this.appId = $.appId;
        this.project = $.project;
        this.siteKey = $.siteKey;
        this.tokenTtl = $.tokenTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppCheckRecaptchaEnterpriseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppCheckRecaptchaEnterpriseConfigArgs $;

        public Builder() {
            $ = new AppCheckRecaptchaEnterpriseConfigArgs();
        }

        public Builder(AppCheckRecaptchaEnterpriseConfigArgs defaults) {
            $ = new AppCheckRecaptchaEnterpriseConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of an
         * [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of an
         * [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id).
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param siteKey The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
         * **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
         * 
         * @return builder
         * 
         */
        public Builder siteKey(Output<String> siteKey) {
            $.siteKey = siteKey;
            return this;
        }

        /**
         * @param siteKey The score-based site key created in reCAPTCHA Enterprise used to invoke reCAPTCHA and generate the reCAPTCHA tokens for your application.
         * **Important**: This is not the siteSecret (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
         * 
         * @return builder
         * 
         */
        public Builder siteKey(String siteKey) {
            return siteKey(Output.of(siteKey));
        }

        /**
         * @param tokenTtl Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
         * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<String> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise artifacts will be valid.
         * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(String tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        public AppCheckRecaptchaEnterpriseConfigArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("AppCheckRecaptchaEnterpriseConfigArgs", "appId");
            }
            if ($.siteKey == null) {
                throw new MissingRequiredPropertyException("AppCheckRecaptchaEnterpriseConfigArgs", "siteKey");
            }
            return $;
        }
    }

}
