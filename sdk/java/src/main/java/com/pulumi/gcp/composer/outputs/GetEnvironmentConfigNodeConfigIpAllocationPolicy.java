// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEnvironmentConfigNodeConfigIpAllocationPolicy {
    /**
     * @return The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use. Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
     * 
     */
    private String clusterIpv4CidrBlock;
    /**
     * @return The name of the cluster&#39;s secondary range used to allocate IP addresses to pods. Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true.
     * 
     */
    private String clusterSecondaryRangeName;
    /**
     * @return The IP address range used to allocate IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use. Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
     * 
     */
    private String servicesIpv4CidrBlock;
    /**
     * @return The name of the services&#39; secondary range used to allocate IP addresses to the cluster. Specify either services_secondary_range_name or services_ipv4_cidr_block but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true.
     * 
     */
    private String servicesSecondaryRangeName;
    /**
     * @return Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created. Defaults to true if the ip_allocation_policy block is present in config. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
     * 
     */
    private Boolean useIpAliases;

    private GetEnvironmentConfigNodeConfigIpAllocationPolicy() {}
    /**
     * @return The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use. Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
     * 
     */
    public String clusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock;
    }
    /**
     * @return The name of the cluster&#39;s secondary range used to allocate IP addresses to pods. Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true.
     * 
     */
    public String clusterSecondaryRangeName() {
        return this.clusterSecondaryRangeName;
    }
    /**
     * @return The IP address range used to allocate IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use. Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
     * 
     */
    public String servicesIpv4CidrBlock() {
        return this.servicesIpv4CidrBlock;
    }
    /**
     * @return The name of the services&#39; secondary range used to allocate IP addresses to the cluster. Specify either services_secondary_range_name or services_ipv4_cidr_block but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true.
     * 
     */
    public String servicesSecondaryRangeName() {
        return this.servicesSecondaryRangeName;
    }
    /**
     * @return Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created. Defaults to true if the ip_allocation_policy block is present in config. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
     * 
     */
    public Boolean useIpAliases() {
        return this.useIpAliases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfigNodeConfigIpAllocationPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterIpv4CidrBlock;
        private String clusterSecondaryRangeName;
        private String servicesIpv4CidrBlock;
        private String servicesSecondaryRangeName;
        private Boolean useIpAliases;
        public Builder() {}
        public Builder(GetEnvironmentConfigNodeConfigIpAllocationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.clusterSecondaryRangeName = defaults.clusterSecondaryRangeName;
    	      this.servicesIpv4CidrBlock = defaults.servicesIpv4CidrBlock;
    	      this.servicesSecondaryRangeName = defaults.servicesSecondaryRangeName;
    	      this.useIpAliases = defaults.useIpAliases;
        }

        @CustomType.Setter
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            if (clusterIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfigIpAllocationPolicy", "clusterIpv4CidrBlock");
            }
            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder clusterSecondaryRangeName(String clusterSecondaryRangeName) {
            if (clusterSecondaryRangeName == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfigIpAllocationPolicy", "clusterSecondaryRangeName");
            }
            this.clusterSecondaryRangeName = clusterSecondaryRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder servicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
            if (servicesIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfigIpAllocationPolicy", "servicesIpv4CidrBlock");
            }
            this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder servicesSecondaryRangeName(String servicesSecondaryRangeName) {
            if (servicesSecondaryRangeName == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfigIpAllocationPolicy", "servicesSecondaryRangeName");
            }
            this.servicesSecondaryRangeName = servicesSecondaryRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder useIpAliases(Boolean useIpAliases) {
            if (useIpAliases == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfigIpAllocationPolicy", "useIpAliases");
            }
            this.useIpAliases = useIpAliases;
            return this;
        }
        public GetEnvironmentConfigNodeConfigIpAllocationPolicy build() {
            final var _resultValue = new GetEnvironmentConfigNodeConfigIpAllocationPolicy();
            _resultValue.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            _resultValue.clusterSecondaryRangeName = clusterSecondaryRangeName;
            _resultValue.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            _resultValue.servicesSecondaryRangeName = servicesSecondaryRangeName;
            _resultValue.useIpAliases = useIpAliases;
            return _resultValue;
        }
    }
}
