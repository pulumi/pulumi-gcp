// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.containeranalysis.OccurenceArgs;
import com.pulumi.gcp.containeranalysis.inputs.OccurenceState;
import com.pulumi.gcp.containeranalysis.outputs.OccurenceAttestation;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An occurrence is an instance of a Note, or type of analysis that
 * can be done for a resource.
 * 
 * To get more information about Occurrence, see:
 * 
 * * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/container-analysis/)
 * 
 * ## Example Usage
 * ### Container Analysis Occurrence Kms
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.containeranalysis.Note;
 * import com.pulumi.gcp.containeranalysis.NoteArgs;
 * import com.pulumi.gcp.containeranalysis.inputs.NoteAttestationAuthorityArgs;
 * import com.pulumi.gcp.containeranalysis.inputs.NoteAttestationAuthorityHintArgs;
 * import com.pulumi.gcp.kms.KmsFunctions;
 * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
 * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
 * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
 * import com.pulumi.gcp.binaryauthorization.Attestor;
 * import com.pulumi.gcp.binaryauthorization.AttestorArgs;
 * import com.pulumi.gcp.binaryauthorization.inputs.AttestorAttestationAuthorityNoteArgs;
 * import com.pulumi.gcp.containeranalysis.Occurence;
 * import com.pulumi.gcp.containeranalysis.OccurenceArgs;
 * import com.pulumi.gcp.containeranalysis.inputs.OccurenceAttestationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var note = new Note(&#34;note&#34;, NoteArgs.builder()        
 *             .attestationAuthority(NoteAttestationAuthorityArgs.builder()
 *                 .hint(NoteAttestationAuthorityHintArgs.builder()
 *                     .humanReadableName(&#34;Attestor Note&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         final var keyring = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
 *             .name(&#34;my-key-ring&#34;)
 *             .location(&#34;global&#34;)
 *             .build());
 * 
 *         final var crypto-key = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
 *             .name(&#34;my-key&#34;)
 *             .keyRing(keyring.applyValue(getKMSKeyRingResult -&gt; getKMSKeyRingResult.id()))
 *             .build());
 * 
 *         final var version = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
 *             .cryptoKey(crypto_key.id())
 *             .build());
 * 
 *         var attestor = new Attestor(&#34;attestor&#34;, AttestorArgs.builder()        
 *             .attestationAuthorityNote(AttestorAttestationAuthorityNoteArgs.builder()
 *                 .noteReference(note.name())
 *                 .publicKeys(AttestorAttestationAuthorityNotePublicKeyArgs.builder()
 *                     .id(version.applyValue(getKMSCryptoKeyVersionResult -&gt; getKMSCryptoKeyVersionResult.id()))
 *                     .pkixPublicKey(AttestorAttestationAuthorityNotePublicKeyPkixPublicKeyArgs.builder()
 *                         .publicKeyPem(version.applyValue(getKMSCryptoKeyVersionResult -&gt; getKMSCryptoKeyVersionResult.publicKeys()[0].pem()))
 *                         .signatureAlgorithm(version.applyValue(getKMSCryptoKeyVersionResult -&gt; getKMSCryptoKeyVersionResult.publicKeys()[0].algorithm()))
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var occurrence = new Occurence(&#34;occurrence&#34;, OccurenceArgs.builder()        
 *             .resourceUri(&#34;gcr.io/my-project/my-image&#34;)
 *             .noteName(note.id())
 *             .attestation(OccurenceAttestationArgs.builder()
 *                 .serializedPayload(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(&#34;path/to/my/payload.json&#34;))))
 *                 .signatures(OccurenceAttestationSignatureArgs.builder()
 *                     .publicKeyId(version.applyValue(getKMSCryptoKeyVersionResult -&gt; getKMSCryptoKeyVersionResult.id()))
 *                     .serializedPayload(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(&#34;path/to/my/payload.json.sig&#34;))))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Occurrence can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default projects/{{project}}/occurrences/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:containeranalysis/occurence:Occurence default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:containeranalysis/occurence:Occurence")
public class Occurence extends com.pulumi.resources.CustomResource {
    /**
     * Occurrence that represents a single &#34;attestation&#34;. The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    @Export(name="attestation", type=OccurenceAttestation.class, parameters={})
    private Output<OccurenceAttestation> attestation;

    /**
     * @return Occurrence that represents a single &#34;attestation&#34;. The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    public Output<OccurenceAttestation> attestation() {
        return this.attestation;
    }
    /**
     * The time when the repository was created.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return The time when the repository was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The name of the occurrence.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the occurrence.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    @Export(name="noteName", type=String.class, parameters={})
    private Output<String> noteName;

    /**
     * @return The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    public Output<String> noteName() {
        return this.noteName;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * A description of actions that can be taken to remedy the note.
     * 
     */
    @Export(name="remediation", type=String.class, parameters={})
    private Output</* @Nullable */ String> remediation;

    /**
     * @return A description of actions that can be taken to remedy the note.
     * 
     */
    public Output<Optional<String>> remediation() {
        return Codegen.optional(this.remediation);
    }
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     * 
     */
    @Export(name="resourceUri", type=String.class, parameters={})
    private Output<String> resourceUri;

    /**
     * @return Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     * 
     */
    public Output<String> resourceUri() {
        return this.resourceUri;
    }
    /**
     * The time when the repository was last updated.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return The time when the repository was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Occurence(String name) {
        this(name, OccurenceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Occurence(String name, OccurenceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Occurence(String name, OccurenceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:containeranalysis/occurence:Occurence", name, args == null ? OccurenceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Occurence(String name, Output<String> id, @Nullable OccurenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:containeranalysis/occurence:Occurence", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Occurence get(String name, Output<String> id, @Nullable OccurenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Occurence(name, id, state, options);
    }
}
