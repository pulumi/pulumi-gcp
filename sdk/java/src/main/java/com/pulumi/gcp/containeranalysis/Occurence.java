// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.containeranalysis.OccurenceArgs;
import com.pulumi.gcp.containeranalysis.inputs.OccurenceState;
import com.pulumi.gcp.containeranalysis.outputs.OccurenceAttestation;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An occurrence is an instance of a Note, or type of analysis that
 * can be done for a resource.
 * 
 * To get more information about Occurrence, see:
 * 
 * * [API documentation](https://cloud.google.com/container-analysis/api/reference/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/container-analysis/)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Occurrence can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/occurrences/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Occurrence can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:containeranalysis/occurence:Occurence default projects/{{project}}/occurrences/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:containeranalysis/occurence:Occurence default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:containeranalysis/occurence:Occurence default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:containeranalysis/occurence:Occurence")
public class Occurence extends com.pulumi.resources.CustomResource {
    /**
     * Occurrence that represents a single &#34;attestation&#34;. The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    @Export(name="attestation", refs={OccurenceAttestation.class}, tree="[0]")
    private Output<OccurenceAttestation> attestation;

    /**
     * @return Occurrence that represents a single &#34;attestation&#34;. The authenticity
     * of an attestation can be verified using the attached signature.
     * If the verifier trusts the public key of the signer, then verifying
     * the signature is sufficient to establish trust. In this circumstance,
     * the authority to which this attestation is attached is primarily
     * useful for lookup (how to find this attestation if you already
     * know the authority and artifact to be verified) and intent (for
     * which authority this attestation was intended to sign.
     * Structure is documented below.
     * 
     */
    public Output<OccurenceAttestation> attestation() {
        return this.attestation;
    }
    /**
     * The time when the repository was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time when the repository was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The note kind which explicitly denotes which of the occurrence
     * details are specified. This field can be used as a filter in list
     * requests.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return The note kind which explicitly denotes which of the occurrence
     * details are specified. This field can be used as a filter in list
     * requests.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The name of the occurrence.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the occurrence.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    @Export(name="noteName", refs={String.class}, tree="[0]")
    private Output<String> noteName;

    /**
     * @return The analysis note associated with this occurrence, in the form of
     * projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
     * filter in list requests.
     * 
     */
    public Output<String> noteName() {
        return this.noteName;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * A description of actions that can be taken to remedy the note.
     * 
     */
    @Export(name="remediation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> remediation;

    /**
     * @return A description of actions that can be taken to remedy the note.
     * 
     */
    public Output<Optional<String>> remediation() {
        return Codegen.optional(this.remediation);
    }
    /**
     * Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image{@literal @}sha256:123abc for a Docker image.
     * 
     */
    @Export(name="resourceUri", refs={String.class}, tree="[0]")
    private Output<String> resourceUri;

    /**
     * @return Required. Immutable. A URI that represents the resource for which
     * the occurrence applies. For example,
     * https://gcr.io/project/image{@literal @}sha256:123abc for a Docker image.
     * 
     */
    public Output<String> resourceUri() {
        return this.resourceUri;
    }
    /**
     * The time when the repository was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time when the repository was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Occurence(java.lang.String name) {
        this(name, OccurenceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Occurence(java.lang.String name, OccurenceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Occurence(java.lang.String name, OccurenceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:containeranalysis/occurence:Occurence", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Occurence(java.lang.String name, Output<java.lang.String> id, @Nullable OccurenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:containeranalysis/occurence:Occurence", name, state, makeResourceOptions(options, id), false);
    }

    private static OccurenceArgs makeArgs(OccurenceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OccurenceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Occurence get(java.lang.String name, Output<java.lang.String> id, @Nullable OccurenceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Occurence(name, id, state, options);
    }
}
