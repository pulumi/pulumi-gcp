// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDocumentArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDocumentArgs Empty = new GetDocumentArgs();

    /**
     * The name of the collection of documents.
     * 
     */
    @Import(name="collection", required=true)
    private Output<String> collection;

    /**
     * @return The name of the collection of documents.
     * 
     */
    public Output<String> collection() {
        return this.collection;
    }

    /**
     * The name of the Firestore database.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The name of the Firestore database.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * The id of the document to get.
     * 
     */
    @Import(name="documentId", required=true)
    private Output<String> documentId;

    /**
     * @return The id of the document to get.
     * 
     */
    public Output<String> documentId() {
        return this.documentId;
    }

    /**
     * The project in which the database resides.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project in which the database resides.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetDocumentArgs() {}

    private GetDocumentArgs(GetDocumentArgs $) {
        this.collection = $.collection;
        this.database = $.database;
        this.documentId = $.documentId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDocumentArgs $;

        public Builder() {
            $ = new GetDocumentArgs();
        }

        public Builder(GetDocumentArgs defaults) {
            $ = new GetDocumentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collection The name of the collection of documents.
         * 
         * @return builder
         * 
         */
        public Builder collection(Output<String> collection) {
            $.collection = collection;
            return this;
        }

        /**
         * @param collection The name of the collection of documents.
         * 
         * @return builder
         * 
         */
        public Builder collection(String collection) {
            return collection(Output.of(collection));
        }

        /**
         * @param database The name of the Firestore database.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The name of the Firestore database.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param documentId The id of the document to get.
         * 
         * @return builder
         * 
         */
        public Builder documentId(Output<String> documentId) {
            $.documentId = documentId;
            return this;
        }

        /**
         * @param documentId The id of the document to get.
         * 
         * @return builder
         * 
         */
        public Builder documentId(String documentId) {
            return documentId(Output.of(documentId));
        }

        /**
         * @param project The project in which the database resides.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project in which the database resides.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetDocumentArgs build() {
            if ($.collection == null) {
                throw new MissingRequiredPropertyException("GetDocumentArgs", "collection");
            }
            if ($.database == null) {
                throw new MissingRequiredPropertyException("GetDocumentArgs", "database");
            }
            if ($.documentId == null) {
                throw new MissingRequiredPropertyException("GetDocumentArgs", "documentId");
            }
            return $;
        }
    }

}
