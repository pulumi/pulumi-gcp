// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.bigtable.GCPolicyArgs;
import com.pulumi.gcp.bigtable.inputs.GCPolicyState;
import com.pulumi.gcp.bigtable.outputs.GCPolicyMaxAge;
import com.pulumi.gcp.bigtable.outputs.GCPolicyMaxVersion;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a Google Cloud Bigtable GC Policy inside a family. For more information see
 * [the official documentation](https://cloud.google.com/bigtable/) and
 * [API](https://cloud.google.com/bigtable/docs/go/reference).
 * 
 * &gt; **Warning**: We don&#39;t recommend having multiple GC policies for the same column
 * family as it may result in unexpected behavior.
 * 
 * &gt; **Note**: GC policies associated with a replicated table cannot be destroyed directly.
 * Destroying a GC policy is translated into never perform garbage collection, this is
 * considered relaxing from pure age-based or version-based GC policy, hence not allowed.
 * The workaround is unreplicating the instance first by updating the instance to have one
 * cluster.
 * 
 * ## Import
 * 
 * This resource does not support import.
 * 
 */
@ResourceType(type="gcp:bigtable/gCPolicy:GCPolicy")
public class GCPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The name of the column family.
     * 
     */
    @Export(name="columnFamily", refs={String.class}, tree="[0]")
    private Output<String> columnFamily;

    /**
     * @return The name of the column family.
     * 
     */
    public Output<String> columnFamily() {
        return this.columnFamily;
    }
    /**
     * The deletion policy for the GC policy.
     * Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful for GC policy as it cannot be deleted in a replicated instance.
     * 
     * Possible values are: `ABANDON`.
     * 
     * ***
     * 
     */
    @Export(name="deletionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deletionPolicy;

    /**
     * @return The deletion policy for the GC policy.
     * Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful for GC policy as it cannot be deleted in a replicated instance.
     * 
     * Possible values are: `ABANDON`.
     * 
     * ***
     * 
     */
    public Output<Optional<String>> deletionPolicy() {
        return Codegen.optional(this.deletionPolicy);
    }
    /**
     * Serialized JSON object to represent a more complex GC policy. Conflicts with `mode`, `max_age` and `max_version`. Conflicts with `mode`, `max_age` and `max_version`.
     * 
     */
    @Export(name="gcRules", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gcRules;

    /**
     * @return Serialized JSON object to represent a more complex GC policy. Conflicts with `mode`, `max_age` and `max_version`. Conflicts with `mode`, `max_age` and `max_version`.
     * 
     */
    public Output<Optional<String>> gcRules() {
        return Codegen.optional(this.gcRules);
    }
    /**
     * The name of the Bigtable instance.
     * 
     */
    @Export(name="instanceName", refs={String.class}, tree="[0]")
    private Output<String> instanceName;

    /**
     * @return The name of the Bigtable instance.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }
    /**
     * GC policy that applies to all cells older than the given age.
     * 
     */
    @Export(name="maxAge", refs={GCPolicyMaxAge.class}, tree="[0]")
    private Output</* @Nullable */ GCPolicyMaxAge> maxAge;

    /**
     * @return GC policy that applies to all cells older than the given age.
     * 
     */
    public Output<Optional<GCPolicyMaxAge>> maxAge() {
        return Codegen.optional(this.maxAge);
    }
    /**
     * GC policy that applies to all versions of a cell except for the most recent.
     * 
     */
    @Export(name="maxVersions", refs={List.class,GCPolicyMaxVersion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<GCPolicyMaxVersion>> maxVersions;

    /**
     * @return GC policy that applies to all versions of a cell except for the most recent.
     * 
     */
    public Output<Optional<List<GCPolicyMaxVersion>>> maxVersions() {
        return Codegen.optional(this.maxVersions);
    }
    /**
     * If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mode;

    /**
     * @return If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
     * 
     */
    public Output<Optional<String>> mode() {
        return Codegen.optional(this.mode);
    }
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The name of the table.
     * 
     */
    @Export(name="table", refs={String.class}, tree="[0]")
    private Output<String> table;

    /**
     * @return The name of the table.
     * 
     */
    public Output<String> table() {
        return this.table;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GCPolicy(String name) {
        this(name, GCPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GCPolicy(String name, GCPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GCPolicy(String name, GCPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/gCPolicy:GCPolicy", name, args == null ? GCPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GCPolicy(String name, Output<String> id, @Nullable GCPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/gCPolicy:GCPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GCPolicy get(String name, Output<String> id, @Nullable GCPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GCPolicy(name, id, state, options);
    }
}
