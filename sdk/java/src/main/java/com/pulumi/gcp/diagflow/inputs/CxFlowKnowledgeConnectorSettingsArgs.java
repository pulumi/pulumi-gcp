// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs;
import com.pulumi.gcp.diagflow.inputs.CxFlowKnowledgeConnectorSettingsTriggerFulfillmentArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxFlowKnowledgeConnectorSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxFlowKnowledgeConnectorSettingsArgs Empty = new CxFlowKnowledgeConnectorSettingsArgs();

    /**
     * Optional. List of related data store connections.
     * Structure is documented below.
     * 
     */
    @Import(name="dataStoreConnections")
    private @Nullable Output<List<CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs>> dataStoreConnections;

    /**
     * @return Optional. List of related data store connections.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs>>> dataStoreConnections() {
        return Optional.ofNullable(this.dataStoreConnections);
    }

    /**
     * Whether Knowledge Connector is enabled or not.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether Knowledge Connector is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The target flow to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;.
     * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
     * 
     */
    @Import(name="targetFlow")
    private @Nullable Output<String> targetFlow;

    /**
     * @return The target flow to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;.
     * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
     * 
     */
    public Optional<Output<String>> targetFlow() {
        return Optional.ofNullable(this.targetFlow);
    }

    /**
     * The target page to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;/pages/&lt;PageID&gt;.
     * The page must be in the same host flow (the flow that owns this `KnowledgeConnectorSettings`).
     * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
     * 
     */
    @Import(name="targetPage")
    private @Nullable Output<String> targetPage;

    /**
     * @return The target page to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;/pages/&lt;PageID&gt;.
     * The page must be in the same host flow (the flow that owns this `KnowledgeConnectorSettings`).
     * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
     * 
     */
    public Optional<Output<String>> targetPage() {
        return Optional.ofNullable(this.targetPage);
    }

    /**
     * The fulfillment to be triggered.
     * When the answers from the Knowledge Connector are selected by Dialogflow, you can utitlize the request scoped parameter $request.knowledge.answers (contains up to the 5 highest confidence answers) and $request.knowledge.questions (contains the corresponding questions) to construct the fulfillment.
     * Structure is documented below.
     * 
     */
    @Import(name="triggerFulfillment")
    private @Nullable Output<CxFlowKnowledgeConnectorSettingsTriggerFulfillmentArgs> triggerFulfillment;

    /**
     * @return The fulfillment to be triggered.
     * When the answers from the Knowledge Connector are selected by Dialogflow, you can utitlize the request scoped parameter $request.knowledge.answers (contains up to the 5 highest confidence answers) and $request.knowledge.questions (contains the corresponding questions) to construct the fulfillment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowKnowledgeConnectorSettingsTriggerFulfillmentArgs>> triggerFulfillment() {
        return Optional.ofNullable(this.triggerFulfillment);
    }

    private CxFlowKnowledgeConnectorSettingsArgs() {}

    private CxFlowKnowledgeConnectorSettingsArgs(CxFlowKnowledgeConnectorSettingsArgs $) {
        this.dataStoreConnections = $.dataStoreConnections;
        this.enabled = $.enabled;
        this.targetFlow = $.targetFlow;
        this.targetPage = $.targetPage;
        this.triggerFulfillment = $.triggerFulfillment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxFlowKnowledgeConnectorSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxFlowKnowledgeConnectorSettingsArgs $;

        public Builder() {
            $ = new CxFlowKnowledgeConnectorSettingsArgs();
        }

        public Builder(CxFlowKnowledgeConnectorSettingsArgs defaults) {
            $ = new CxFlowKnowledgeConnectorSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStoreConnections Optional. List of related data store connections.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreConnections(@Nullable Output<List<CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs>> dataStoreConnections) {
            $.dataStoreConnections = dataStoreConnections;
            return this;
        }

        /**
         * @param dataStoreConnections Optional. List of related data store connections.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreConnections(List<CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs> dataStoreConnections) {
            return dataStoreConnections(Output.of(dataStoreConnections));
        }

        /**
         * @param dataStoreConnections Optional. List of related data store connections.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreConnections(CxFlowKnowledgeConnectorSettingsDataStoreConnectionArgs... dataStoreConnections) {
            return dataStoreConnections(List.of(dataStoreConnections));
        }

        /**
         * @param enabled Whether Knowledge Connector is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether Knowledge Connector is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param targetFlow The target flow to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;.
         * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
         * 
         * @return builder
         * 
         */
        public Builder targetFlow(@Nullable Output<String> targetFlow) {
            $.targetFlow = targetFlow;
            return this;
        }

        /**
         * @param targetFlow The target flow to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;.
         * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
         * 
         * @return builder
         * 
         */
        public Builder targetFlow(String targetFlow) {
            return targetFlow(Output.of(targetFlow));
        }

        /**
         * @param targetPage The target page to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;/pages/&lt;PageID&gt;.
         * The page must be in the same host flow (the flow that owns this `KnowledgeConnectorSettings`).
         * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
         * 
         * @return builder
         * 
         */
        public Builder targetPage(@Nullable Output<String> targetPage) {
            $.targetPage = targetPage;
            return this;
        }

        /**
         * @param targetPage The target page to transition to. Format: projects/&lt;ProjectID&gt;/locations/&lt;LocationID&gt;/agents/&lt;AgentID&gt;/flows/&lt;FlowID&gt;/pages/&lt;PageID&gt;.
         * The page must be in the same host flow (the flow that owns this `KnowledgeConnectorSettings`).
         * This field is part of a union field `target`: Only one of `targetPage` or `targetFlow` may be set.
         * 
         * @return builder
         * 
         */
        public Builder targetPage(String targetPage) {
            return targetPage(Output.of(targetPage));
        }

        /**
         * @param triggerFulfillment The fulfillment to be triggered.
         * When the answers from the Knowledge Connector are selected by Dialogflow, you can utitlize the request scoped parameter $request.knowledge.answers (contains up to the 5 highest confidence answers) and $request.knowledge.questions (contains the corresponding questions) to construct the fulfillment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggerFulfillment(@Nullable Output<CxFlowKnowledgeConnectorSettingsTriggerFulfillmentArgs> triggerFulfillment) {
            $.triggerFulfillment = triggerFulfillment;
            return this;
        }

        /**
         * @param triggerFulfillment The fulfillment to be triggered.
         * When the answers from the Knowledge Connector are selected by Dialogflow, you can utitlize the request scoped parameter $request.knowledge.answers (contains up to the 5 highest confidence answers) and $request.knowledge.questions (contains the corresponding questions) to construct the fulfillment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggerFulfillment(CxFlowKnowledgeConnectorSettingsTriggerFulfillmentArgs triggerFulfillment) {
            return triggerFulfillment(Output.of(triggerFulfillment));
        }

        public CxFlowKnowledgeConnectorSettingsArgs build() {
            return $;
        }
    }

}
