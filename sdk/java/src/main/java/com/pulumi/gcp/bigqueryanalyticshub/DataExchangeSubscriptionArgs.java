// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.DataExchangeSubscriptionDestinationDatasetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataExchangeSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataExchangeSubscriptionArgs Empty = new DataExchangeSubscriptionArgs();

    /**
     * The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="dataExchangeId", required=true)
    private Output<String> dataExchangeId;

    /**
     * @return The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Output<String> dataExchangeId() {
        return this.dataExchangeId;
    }

    /**
     * The name of the location of the Data Exchange.
     * 
     */
    @Import(name="dataExchangeLocation", required=true)
    private Output<String> dataExchangeLocation;

    /**
     * @return The name of the location of the Data Exchange.
     * 
     */
    public Output<String> dataExchangeLocation() {
        return this.dataExchangeLocation;
    }

    /**
     * The ID of the Google Cloud project where the Data Exchange is located.
     * 
     */
    @Import(name="dataExchangeProject", required=true)
    private Output<String> dataExchangeProject;

    /**
     * @return The ID of the Google Cloud project where the Data Exchange is located.
     * 
     */
    public Output<String> dataExchangeProject() {
        return this.dataExchangeProject;
    }

    /**
     * BigQuery destination dataset to create for the subscriber.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationDataset")
    private @Nullable Output<DataExchangeSubscriptionDestinationDatasetArgs> destinationDataset;

    /**
     * @return BigQuery destination dataset to create for the subscriber.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataExchangeSubscriptionDestinationDatasetArgs>> destinationDataset() {
        return Optional.ofNullable(this.destinationDataset);
    }

    /**
     * The geographic location where the Subscription (and its linked dataset) should reside.
     * This is the subscriber&#39;s desired location for the created resources.
     * See https://cloud.google.com/bigquery/docs/locations for supported locations.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The geographic location where the Subscription (and its linked dataset) should reside.
     * This is the subscriber&#39;s desired location for the created resources.
     * See https://cloud.google.com/bigquery/docs/locations for supported locations.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="refreshPolicy")
    private @Nullable Output<String> refreshPolicy;

    public Optional<Output<String>> refreshPolicy() {
        return Optional.ofNullable(this.refreshPolicy);
    }

    /**
     * Email of the subscriber.
     * 
     */
    @Import(name="subscriberContact")
    private @Nullable Output<String> subscriberContact;

    /**
     * @return Email of the subscriber.
     * 
     */
    public Optional<Output<String>> subscriberContact() {
        return Optional.ofNullable(this.subscriberContact);
    }

    /**
     * Name of the subscription to create.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return Name of the subscription to create.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    private DataExchangeSubscriptionArgs() {}

    private DataExchangeSubscriptionArgs(DataExchangeSubscriptionArgs $) {
        this.dataExchangeId = $.dataExchangeId;
        this.dataExchangeLocation = $.dataExchangeLocation;
        this.dataExchangeProject = $.dataExchangeProject;
        this.destinationDataset = $.destinationDataset;
        this.location = $.location;
        this.project = $.project;
        this.refreshPolicy = $.refreshPolicy;
        this.subscriberContact = $.subscriberContact;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataExchangeSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataExchangeSubscriptionArgs $;

        public Builder() {
            $ = new DataExchangeSubscriptionArgs();
        }

        public Builder(DataExchangeSubscriptionArgs defaults) {
            $ = new DataExchangeSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(Output<String> dataExchangeId) {
            $.dataExchangeId = dataExchangeId;
            return this;
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(String dataExchangeId) {
            return dataExchangeId(Output.of(dataExchangeId));
        }

        /**
         * @param dataExchangeLocation The name of the location of the Data Exchange.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeLocation(Output<String> dataExchangeLocation) {
            $.dataExchangeLocation = dataExchangeLocation;
            return this;
        }

        /**
         * @param dataExchangeLocation The name of the location of the Data Exchange.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeLocation(String dataExchangeLocation) {
            return dataExchangeLocation(Output.of(dataExchangeLocation));
        }

        /**
         * @param dataExchangeProject The ID of the Google Cloud project where the Data Exchange is located.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeProject(Output<String> dataExchangeProject) {
            $.dataExchangeProject = dataExchangeProject;
            return this;
        }

        /**
         * @param dataExchangeProject The ID of the Google Cloud project where the Data Exchange is located.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeProject(String dataExchangeProject) {
            return dataExchangeProject(Output.of(dataExchangeProject));
        }

        /**
         * @param destinationDataset BigQuery destination dataset to create for the subscriber.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataset(@Nullable Output<DataExchangeSubscriptionDestinationDatasetArgs> destinationDataset) {
            $.destinationDataset = destinationDataset;
            return this;
        }

        /**
         * @param destinationDataset BigQuery destination dataset to create for the subscriber.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataset(DataExchangeSubscriptionDestinationDatasetArgs destinationDataset) {
            return destinationDataset(Output.of(destinationDataset));
        }

        /**
         * @param location The geographic location where the Subscription (and its linked dataset) should reside.
         * This is the subscriber&#39;s desired location for the created resources.
         * See https://cloud.google.com/bigquery/docs/locations for supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the Subscription (and its linked dataset) should reside.
         * This is the subscriber&#39;s desired location for the created resources.
         * See https://cloud.google.com/bigquery/docs/locations for supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder refreshPolicy(@Nullable Output<String> refreshPolicy) {
            $.refreshPolicy = refreshPolicy;
            return this;
        }

        public Builder refreshPolicy(String refreshPolicy) {
            return refreshPolicy(Output.of(refreshPolicy));
        }

        /**
         * @param subscriberContact Email of the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder subscriberContact(@Nullable Output<String> subscriberContact) {
            $.subscriberContact = subscriberContact;
            return this;
        }

        /**
         * @param subscriberContact Email of the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder subscriberContact(String subscriberContact) {
            return subscriberContact(Output.of(subscriberContact));
        }

        /**
         * @param subscriptionId Name of the subscription to create.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Name of the subscription to create.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public DataExchangeSubscriptionArgs build() {
            if ($.dataExchangeId == null) {
                throw new MissingRequiredPropertyException("DataExchangeSubscriptionArgs", "dataExchangeId");
            }
            if ($.dataExchangeLocation == null) {
                throw new MissingRequiredPropertyException("DataExchangeSubscriptionArgs", "dataExchangeLocation");
            }
            if ($.dataExchangeProject == null) {
                throw new MissingRequiredPropertyException("DataExchangeSubscriptionArgs", "dataExchangeProject");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("DataExchangeSubscriptionArgs", "location");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("DataExchangeSubscriptionArgs", "subscriptionId");
            }
            return $;
        }
    }

}
