// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryGroupIamPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryGroupIamPolicyArgs Empty = new RepositoryGroupIamPolicyArgs();

    @Import(name="codeRepositoryIndex", required=true)
    private Output<String> codeRepositoryIndex;

    public Output<String> codeRepositoryIndex() {
        return this.codeRepositoryIndex;
    }

    /**
     * The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
     * location is specified, it is taken from the provider configuration.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
     * location is specified, it is taken from the provider configuration.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    @Import(name="policyData", required=true)
    private Output<String> policyData;

    /**
     * @return The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    public Output<String> policyData() {
        return this.policyData;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="repositoryGroupId", required=true)
    private Output<String> repositoryGroupId;

    public Output<String> repositoryGroupId() {
        return this.repositoryGroupId;
    }

    private RepositoryGroupIamPolicyArgs() {}

    private RepositoryGroupIamPolicyArgs(RepositoryGroupIamPolicyArgs $) {
        this.codeRepositoryIndex = $.codeRepositoryIndex;
        this.location = $.location;
        this.policyData = $.policyData;
        this.project = $.project;
        this.repositoryGroupId = $.repositoryGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryGroupIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryGroupIamPolicyArgs $;

        public Builder() {
            $ = new RepositoryGroupIamPolicyArgs();
        }

        public Builder(RepositoryGroupIamPolicyArgs defaults) {
            $ = new RepositoryGroupIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder codeRepositoryIndex(Output<String> codeRepositoryIndex) {
            $.codeRepositoryIndex = codeRepositoryIndex;
            return this;
        }

        public Builder codeRepositoryIndex(String codeRepositoryIndex) {
            return codeRepositoryIndex(Output.of(codeRepositoryIndex));
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
         * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
         * location is specified, it is taken from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
         * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
         * location is specified, it is taken from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param policyData The policy data generated by
         * a `gcp.organizations.getIAMPolicy` data source.
         * 
         * @return builder
         * 
         */
        public Builder policyData(Output<String> policyData) {
            $.policyData = policyData;
            return this;
        }

        /**
         * @param policyData The policy data generated by
         * a `gcp.organizations.getIAMPolicy` data source.
         * 
         * @return builder
         * 
         */
        public Builder policyData(String policyData) {
            return policyData(Output.of(policyData));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder repositoryGroupId(Output<String> repositoryGroupId) {
            $.repositoryGroupId = repositoryGroupId;
            return this;
        }

        public Builder repositoryGroupId(String repositoryGroupId) {
            return repositoryGroupId(Output.of(repositoryGroupId));
        }

        public RepositoryGroupIamPolicyArgs build() {
            if ($.codeRepositoryIndex == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupIamPolicyArgs", "codeRepositoryIndex");
            }
            if ($.policyData == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupIamPolicyArgs", "policyData");
            }
            if ($.repositoryGroupId == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupIamPolicyArgs", "repositoryGroupId");
            }
            return $;
        }
    }

}
