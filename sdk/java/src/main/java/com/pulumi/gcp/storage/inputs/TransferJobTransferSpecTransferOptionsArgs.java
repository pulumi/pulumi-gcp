// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecTransferOptionsMetadataOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobTransferSpecTransferOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobTransferSpecTransferOptionsArgs Empty = new TransferJobTransferSpecTransferOptionsArgs();

    /**
     * Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `deleteObjectsUniqueInSink` are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsFromSourceAfterTransfer")
    private @Nullable Output<Boolean> deleteObjectsFromSourceAfterTransfer;

    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `deleteObjectsUniqueInSink` are mutually exclusive.
     * 
     */
    public Optional<Output<Boolean>> deleteObjectsFromSourceAfterTransfer() {
        return Optional.ofNullable(this.deleteObjectsFromSourceAfterTransfer);
    }

    /**
     * Whether objects that exist only in the sink should be deleted. Note that this option and
     * `deleteObjectsFromSourceAfterTransfer` are mutually exclusive.
     * 
     */
    @Import(name="deleteObjectsUniqueInSink")
    private @Nullable Output<Boolean> deleteObjectsUniqueInSink;

    /**
     * @return Whether objects that exist only in the sink should be deleted. Note that this option and
     * `deleteObjectsFromSourceAfterTransfer` are mutually exclusive.
     * 
     */
    public Optional<Output<Boolean>> deleteObjectsUniqueInSink() {
        return Optional.ofNullable(this.deleteObjectsUniqueInSink);
    }

    /**
     * Specifies the metadata options for running a transfer
     * 
     */
    @Import(name="metadataOptions")
    private @Nullable Output<TransferJobTransferSpecTransferOptionsMetadataOptionsArgs> metadataOptions;

    /**
     * @return Specifies the metadata options for running a transfer
     * 
     */
    public Optional<Output<TransferJobTransferSpecTransferOptionsMetadataOptionsArgs>> metadataOptions() {
        return Optional.ofNullable(this.metadataOptions);
    }

    /**
     * Whether overwriting objects that already exist in the sink is allowed.
     * 
     */
    @Import(name="overwriteObjectsAlreadyExistingInSink")
    private @Nullable Output<Boolean> overwriteObjectsAlreadyExistingInSink;

    /**
     * @return Whether overwriting objects that already exist in the sink is allowed.
     * 
     */
    public Optional<Output<Boolean>> overwriteObjectsAlreadyExistingInSink() {
        return Optional.ofNullable(this.overwriteObjectsAlreadyExistingInSink);
    }

    /**
     * When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwriteObjectsAlreadyExistingInSink`. Possible values: ALWAYS, DIFFERENT, NEVER.
     * 
     */
    @Import(name="overwriteWhen")
    private @Nullable Output<String> overwriteWhen;

    /**
     * @return When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwriteObjectsAlreadyExistingInSink`. Possible values: ALWAYS, DIFFERENT, NEVER.
     * 
     */
    public Optional<Output<String>> overwriteWhen() {
        return Optional.ofNullable(this.overwriteWhen);
    }

    private TransferJobTransferSpecTransferOptionsArgs() {}

    private TransferJobTransferSpecTransferOptionsArgs(TransferJobTransferSpecTransferOptionsArgs $) {
        this.deleteObjectsFromSourceAfterTransfer = $.deleteObjectsFromSourceAfterTransfer;
        this.deleteObjectsUniqueInSink = $.deleteObjectsUniqueInSink;
        this.metadataOptions = $.metadataOptions;
        this.overwriteObjectsAlreadyExistingInSink = $.overwriteObjectsAlreadyExistingInSink;
        this.overwriteWhen = $.overwriteWhen;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobTransferSpecTransferOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobTransferSpecTransferOptionsArgs $;

        public Builder() {
            $ = new TransferJobTransferSpecTransferOptionsArgs();
        }

        public Builder(TransferJobTransferSpecTransferOptionsArgs defaults) {
            $ = new TransferJobTransferSpecTransferOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteObjectsFromSourceAfterTransfer Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `deleteObjectsUniqueInSink` are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsFromSourceAfterTransfer(@Nullable Output<Boolean> deleteObjectsFromSourceAfterTransfer) {
            $.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            return this;
        }

        /**
         * @param deleteObjectsFromSourceAfterTransfer Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and `deleteObjectsUniqueInSink` are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
            return deleteObjectsFromSourceAfterTransfer(Output.of(deleteObjectsFromSourceAfterTransfer));
        }

        /**
         * @param deleteObjectsUniqueInSink Whether objects that exist only in the sink should be deleted. Note that this option and
         * `deleteObjectsFromSourceAfterTransfer` are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsUniqueInSink(@Nullable Output<Boolean> deleteObjectsUniqueInSink) {
            $.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            return this;
        }

        /**
         * @param deleteObjectsUniqueInSink Whether objects that exist only in the sink should be deleted. Note that this option and
         * `deleteObjectsFromSourceAfterTransfer` are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
            return deleteObjectsUniqueInSink(Output.of(deleteObjectsUniqueInSink));
        }

        /**
         * @param metadataOptions Specifies the metadata options for running a transfer
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(@Nullable Output<TransferJobTransferSpecTransferOptionsMetadataOptionsArgs> metadataOptions) {
            $.metadataOptions = metadataOptions;
            return this;
        }

        /**
         * @param metadataOptions Specifies the metadata options for running a transfer
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(TransferJobTransferSpecTransferOptionsMetadataOptionsArgs metadataOptions) {
            return metadataOptions(Output.of(metadataOptions));
        }

        /**
         * @param overwriteObjectsAlreadyExistingInSink Whether overwriting objects that already exist in the sink is allowed.
         * 
         * @return builder
         * 
         */
        public Builder overwriteObjectsAlreadyExistingInSink(@Nullable Output<Boolean> overwriteObjectsAlreadyExistingInSink) {
            $.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            return this;
        }

        /**
         * @param overwriteObjectsAlreadyExistingInSink Whether overwriting objects that already exist in the sink is allowed.
         * 
         * @return builder
         * 
         */
        public Builder overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
            return overwriteObjectsAlreadyExistingInSink(Output.of(overwriteObjectsAlreadyExistingInSink));
        }

        /**
         * @param overwriteWhen When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwriteObjectsAlreadyExistingInSink`. Possible values: ALWAYS, DIFFERENT, NEVER.
         * 
         * @return builder
         * 
         */
        public Builder overwriteWhen(@Nullable Output<String> overwriteWhen) {
            $.overwriteWhen = overwriteWhen;
            return this;
        }

        /**
         * @param overwriteWhen When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwriteObjectsAlreadyExistingInSink`. Possible values: ALWAYS, DIFFERENT, NEVER.
         * 
         * @return builder
         * 
         */
        public Builder overwriteWhen(String overwriteWhen) {
            return overwriteWhen(Output.of(overwriteWhen));
        }

        public TransferJobTransferSpecTransferOptionsArgs build() {
            return $;
        }
    }

}
