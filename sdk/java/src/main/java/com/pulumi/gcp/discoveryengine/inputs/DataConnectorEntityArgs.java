// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataConnectorEntityArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataConnectorEntityArgs Empty = new DataConnectorEntityArgs();

    /**
     * (Output)
     * The full resource name of the associated data store for the source
     * entity.
     * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataStores/*`.
     * When the connector is initialized by the DataConnectorService.SetUpDataConnector
     * method, a DataStore is automatically created for each source entity.
     * 
     */
    @Import(name="dataStore")
    private @Nullable Output<String> dataStore;

    /**
     * @return (Output)
     * The full resource name of the associated data store for the source
     * entity.
     * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataStores/*`.
     * When the connector is initialized by the DataConnectorService.SetUpDataConnector
     * method, a DataStore is automatically created for each source entity.
     * 
     */
    public Optional<Output<String>> dataStore() {
        return Optional.ofNullable(this.dataStore);
    }

    /**
     * The name of the entity. Supported values by data source:
     * * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
     * * Jira: project, issue, attachment, comment, worklog
     * * Confluence: `Content`, `Space`
     * 
     */
    @Import(name="entityName")
    private @Nullable Output<String> entityName;

    /**
     * @return The name of the entity. Supported values by data source:
     * * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
     * * Jira: project, issue, attachment, comment, worklog
     * * Confluence: `Content`, `Space`
     * 
     */
    public Optional<Output<String>> entityName() {
        return Optional.ofNullable(this.entityName);
    }

    /**
     * Attributes for indexing.
     * Key: Field name.
     * Value: The key property to map a field to, such as `title`, and
     * `description`. Supported key properties:
     * 
     */
    @Import(name="keyPropertyMappings")
    private @Nullable Output<Map<String,String>> keyPropertyMappings;

    /**
     * @return Attributes for indexing.
     * Key: Field name.
     * Value: The key property to map a field to, such as `title`, and
     * `description`. Supported key properties:
     * 
     */
    public Optional<Output<Map<String,String>>> keyPropertyMappings() {
        return Optional.ofNullable(this.keyPropertyMappings);
    }

    /**
     * The parameters for the entity to facilitate data ingestion.
     * 
     */
    @Import(name="params")
    private @Nullable Output<String> params;

    /**
     * @return The parameters for the entity to facilitate data ingestion.
     * 
     */
    public Optional<Output<String>> params() {
        return Optional.ofNullable(this.params);
    }

    private DataConnectorEntityArgs() {}

    private DataConnectorEntityArgs(DataConnectorEntityArgs $) {
        this.dataStore = $.dataStore;
        this.entityName = $.entityName;
        this.keyPropertyMappings = $.keyPropertyMappings;
        this.params = $.params;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataConnectorEntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataConnectorEntityArgs $;

        public Builder() {
            $ = new DataConnectorEntityArgs();
        }

        public Builder(DataConnectorEntityArgs defaults) {
            $ = new DataConnectorEntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStore (Output)
         * The full resource name of the associated data store for the source
         * entity.
         * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataStores/*`.
         * When the connector is initialized by the DataConnectorService.SetUpDataConnector
         * method, a DataStore is automatically created for each source entity.
         * 
         * @return builder
         * 
         */
        public Builder dataStore(@Nullable Output<String> dataStore) {
            $.dataStore = dataStore;
            return this;
        }

        /**
         * @param dataStore (Output)
         * The full resource name of the associated data store for the source
         * entity.
         * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataStores/*`.
         * When the connector is initialized by the DataConnectorService.SetUpDataConnector
         * method, a DataStore is automatically created for each source entity.
         * 
         * @return builder
         * 
         */
        public Builder dataStore(String dataStore) {
            return dataStore(Output.of(dataStore));
        }

        /**
         * @param entityName The name of the entity. Supported values by data source:
         * * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
         * * Jira: project, issue, attachment, comment, worklog
         * * Confluence: `Content`, `Space`
         * 
         * @return builder
         * 
         */
        public Builder entityName(@Nullable Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName The name of the entity. Supported values by data source:
         * * Salesforce: `Lead`, `Opportunity`, `Contact`, `Account`, `Case`, `Contract`, `Campaign`
         * * Jira: project, issue, attachment, comment, worklog
         * * Confluence: `Content`, `Space`
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param keyPropertyMappings Attributes for indexing.
         * Key: Field name.
         * Value: The key property to map a field to, such as `title`, and
         * `description`. Supported key properties:
         * 
         * @return builder
         * 
         */
        public Builder keyPropertyMappings(@Nullable Output<Map<String,String>> keyPropertyMappings) {
            $.keyPropertyMappings = keyPropertyMappings;
            return this;
        }

        /**
         * @param keyPropertyMappings Attributes for indexing.
         * Key: Field name.
         * Value: The key property to map a field to, such as `title`, and
         * `description`. Supported key properties:
         * 
         * @return builder
         * 
         */
        public Builder keyPropertyMappings(Map<String,String> keyPropertyMappings) {
            return keyPropertyMappings(Output.of(keyPropertyMappings));
        }

        /**
         * @param params The parameters for the entity to facilitate data ingestion.
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<String> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params The parameters for the entity to facilitate data ingestion.
         * 
         * @return builder
         * 
         */
        public Builder params(String params) {
            return params(Output.of(params));
        }

        public DataConnectorEntityArgs build() {
            return $;
        }
    }

}
