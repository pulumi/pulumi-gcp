// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.outputs.GetCryptoKeysKeyKeyAccessJustificationsPolicy;
import com.pulumi.gcp.kms.outputs.GetCryptoKeysKeyPrimary;
import com.pulumi.gcp.kms.outputs.GetCryptoKeysKeyVersionTemplate;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCryptoKeysKey {
    /**
     * @return The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
     * The resource name is in the format &#34;projects/*{@literal /}locations/*{@literal /}ekmConnections/*&#34; and only applies to &#34;EXTERNAL_VPC&#34; keys.
     * 
     */
    private String cryptoKeyBackend;
    /**
     * @return The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
     * If not specified at creation time, the default duration is 30 days.
     * 
     */
    private String destroyScheduledDuration;
    private Map<String,String> effectiveLabels;
    private String id;
    /**
     * @return Whether this key may contain imported versions only.
     * 
     */
    private Boolean importOnly;
    /**
     * @return The policy used for Key Access Justifications Policy Enforcement. If this
     * field is present and this key is enrolled in Key Access Justifications
     * Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
     * sign operations, and the operation will fail if rejected by the policy. The
     * policy is defined by specifying zero or more allowed justification codes.
     * https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
     * By default, this field is absent, and all justification codes are allowed.
     * This field is currently in beta and is subject to change.
     * 
     */
    private List<GetCryptoKeysKeyKeyAccessJustificationsPolicy> keyAccessJustificationsPolicies;
    /**
     * @return The key ring that the keys belongs to. Format: &#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}&#39;.,
     * 
     */
    private @Nullable String keyRing;
    /**
     * @return Labels with user-defined metadata to apply to this resource.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The resource name for the CryptoKey.
     * 
     */
    private @Nullable String name;
    /**
     * @return A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
     * Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
     * 
     */
    private List<GetCryptoKeysKeyPrimary> primaries;
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    private Map<String,String> pulumiLabels;
    /**
     * @return The immutable purpose of this CryptoKey. See the
     * [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
     * for possible inputs.
     * Default value is &#34;ENCRYPT_DECRYPT&#34;.
     * 
     */
    private String purpose;
    /**
     * @return Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
     * The first rotation will take place after the specified period. The rotation period has
     * the format of a decimal number with up to 9 fractional digits, followed by the
     * letter &#39;s&#39; (seconds). It must be greater than a day (ie, 86400).
     * 
     */
    private String rotationPeriod;
    /**
     * @return If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
     * You must use the &#39;google_kms_crypto_key_version&#39; resource to create a new CryptoKeyVersion
     * or &#39;google_kms_key_ring_import_job&#39; resource to import the CryptoKeyVersion.
     * 
     */
    private Boolean skipInitialVersionCreation;
    /**
     * @return A template describing settings for new crypto key versions.
     * 
     */
    private List<GetCryptoKeysKeyVersionTemplate> versionTemplates;

    private GetCryptoKeysKey() {}
    /**
     * @return The resource name of the backend environment associated with all CryptoKeyVersions within this CryptoKey.
     * The resource name is in the format &#34;projects/*{@literal /}locations/*{@literal /}ekmConnections/*&#34; and only applies to &#34;EXTERNAL_VPC&#34; keys.
     * 
     */
    public String cryptoKeyBackend() {
        return this.cryptoKeyBackend;
    }
    /**
     * @return The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
     * If not specified at creation time, the default duration is 30 days.
     * 
     */
    public String destroyScheduledDuration() {
        return this.destroyScheduledDuration;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Whether this key may contain imported versions only.
     * 
     */
    public Boolean importOnly() {
        return this.importOnly;
    }
    /**
     * @return The policy used for Key Access Justifications Policy Enforcement. If this
     * field is present and this key is enrolled in Key Access Justifications
     * Policy Enforcement, the policy will be evaluated in encrypt, decrypt, and
     * sign operations, and the operation will fail if rejected by the policy. The
     * policy is defined by specifying zero or more allowed justification codes.
     * https://cloud.google.com/assured-workloads/key-access-justifications/docs/justification-codes
     * By default, this field is absent, and all justification codes are allowed.
     * This field is currently in beta and is subject to change.
     * 
     */
    public List<GetCryptoKeysKeyKeyAccessJustificationsPolicy> keyAccessJustificationsPolicies() {
        return this.keyAccessJustificationsPolicies;
    }
    /**
     * @return The key ring that the keys belongs to. Format: &#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}&#39;.,
     * 
     */
    public Optional<String> keyRing() {
        return Optional.ofNullable(this.keyRing);
    }
    /**
     * @return Labels with user-defined metadata to apply to this resource.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name for the CryptoKey.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A copy of the primary CryptoKeyVersion that will be used by cryptoKeys.encrypt when this CryptoKey is given in EncryptRequest.name.
     * Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be unset.
     * 
     */
    public List<GetCryptoKeysKeyPrimary> primaries() {
        return this.primaries;
    }
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * @return The immutable purpose of this CryptoKey. See the
     * [purpose reference](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKeyPurpose)
     * for possible inputs.
     * Default value is &#34;ENCRYPT_DECRYPT&#34;.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
     * The first rotation will take place after the specified period. The rotation period has
     * the format of a decimal number with up to 9 fractional digits, followed by the
     * letter &#39;s&#39; (seconds). It must be greater than a day (ie, 86400).
     * 
     */
    public String rotationPeriod() {
        return this.rotationPeriod;
    }
    /**
     * @return If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
     * You must use the &#39;google_kms_crypto_key_version&#39; resource to create a new CryptoKeyVersion
     * or &#39;google_kms_key_ring_import_job&#39; resource to import the CryptoKeyVersion.
     * 
     */
    public Boolean skipInitialVersionCreation() {
        return this.skipInitialVersionCreation;
    }
    /**
     * @return A template describing settings for new crypto key versions.
     * 
     */
    public List<GetCryptoKeysKeyVersionTemplate> versionTemplates() {
        return this.versionTemplates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoKeysKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cryptoKeyBackend;
        private String destroyScheduledDuration;
        private Map<String,String> effectiveLabels;
        private String id;
        private Boolean importOnly;
        private List<GetCryptoKeysKeyKeyAccessJustificationsPolicy> keyAccessJustificationsPolicies;
        private @Nullable String keyRing;
        private Map<String,String> labels;
        private @Nullable String name;
        private List<GetCryptoKeysKeyPrimary> primaries;
        private Map<String,String> pulumiLabels;
        private String purpose;
        private String rotationPeriod;
        private Boolean skipInitialVersionCreation;
        private List<GetCryptoKeysKeyVersionTemplate> versionTemplates;
        public Builder() {}
        public Builder(GetCryptoKeysKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyBackend = defaults.cryptoKeyBackend;
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.id = defaults.id;
    	      this.importOnly = defaults.importOnly;
    	      this.keyAccessJustificationsPolicies = defaults.keyAccessJustificationsPolicies;
    	      this.keyRing = defaults.keyRing;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.primaries = defaults.primaries;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.skipInitialVersionCreation = defaults.skipInitialVersionCreation;
    	      this.versionTemplates = defaults.versionTemplates;
        }

        @CustomType.Setter
        public Builder cryptoKeyBackend(String cryptoKeyBackend) {
            if (cryptoKeyBackend == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "cryptoKeyBackend");
            }
            this.cryptoKeyBackend = cryptoKeyBackend;
            return this;
        }
        @CustomType.Setter
        public Builder destroyScheduledDuration(String destroyScheduledDuration) {
            if (destroyScheduledDuration == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "destroyScheduledDuration");
            }
            this.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder importOnly(Boolean importOnly) {
            if (importOnly == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "importOnly");
            }
            this.importOnly = importOnly;
            return this;
        }
        @CustomType.Setter
        public Builder keyAccessJustificationsPolicies(List<GetCryptoKeysKeyKeyAccessJustificationsPolicy> keyAccessJustificationsPolicies) {
            if (keyAccessJustificationsPolicies == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "keyAccessJustificationsPolicies");
            }
            this.keyAccessJustificationsPolicies = keyAccessJustificationsPolicies;
            return this;
        }
        public Builder keyAccessJustificationsPolicies(GetCryptoKeysKeyKeyAccessJustificationsPolicy... keyAccessJustificationsPolicies) {
            return keyAccessJustificationsPolicies(List.of(keyAccessJustificationsPolicies));
        }
        @CustomType.Setter
        public Builder keyRing(@Nullable String keyRing) {

            this.keyRing = keyRing;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primaries(List<GetCryptoKeysKeyPrimary> primaries) {
            if (primaries == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "primaries");
            }
            this.primaries = primaries;
            return this;
        }
        public Builder primaries(GetCryptoKeysKeyPrimary... primaries) {
            return primaries(List.of(primaries));
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            if (purpose == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "purpose");
            }
            this.purpose = purpose;
            return this;
        }
        @CustomType.Setter
        public Builder rotationPeriod(String rotationPeriod) {
            if (rotationPeriod == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "rotationPeriod");
            }
            this.rotationPeriod = rotationPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder skipInitialVersionCreation(Boolean skipInitialVersionCreation) {
            if (skipInitialVersionCreation == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "skipInitialVersionCreation");
            }
            this.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }
        @CustomType.Setter
        public Builder versionTemplates(List<GetCryptoKeysKeyVersionTemplate> versionTemplates) {
            if (versionTemplates == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeysKey", "versionTemplates");
            }
            this.versionTemplates = versionTemplates;
            return this;
        }
        public Builder versionTemplates(GetCryptoKeysKeyVersionTemplate... versionTemplates) {
            return versionTemplates(List.of(versionTemplates));
        }
        public GetCryptoKeysKey build() {
            final var _resultValue = new GetCryptoKeysKey();
            _resultValue.cryptoKeyBackend = cryptoKeyBackend;
            _resultValue.destroyScheduledDuration = destroyScheduledDuration;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.id = id;
            _resultValue.importOnly = importOnly;
            _resultValue.keyAccessJustificationsPolicies = keyAccessJustificationsPolicies;
            _resultValue.keyRing = keyRing;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.primaries = primaries;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.purpose = purpose;
            _resultValue.rotationPeriod = rotationPeriod;
            _resultValue.skipInitialVersionCreation = skipInitialVersionCreation;
            _resultValue.versionTemplates = versionTemplates;
            return _resultValue;
        }
    }
}
