// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureGroupFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureGroupFeatureArgs Empty = new AiFeatureGroupFeatureArgs();

    /**
     * The description of the FeatureGroup.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the FeatureGroup.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Feature Group.
     * 
     */
    @Import(name="featureGroup", required=true)
    private Output<String> featureGroup;

    /**
     * @return The name of the Feature Group.
     * 
     */
    public Output<String> featureGroup() {
        return this.featureGroup;
    }

    /**
     * The labels with user-defined metadata to organize your FeatureGroup.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels with user-defined metadata to organize your FeatureGroup.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The resource name of the Feature Group Feature.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the Feature Group Feature.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region for the resource. It should be the same as the feature group&#39;s region.
     * 
     * ***
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region for the resource. It should be the same as the feature group&#39;s region.
     * 
     * ***
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
     * 
     */
    @Import(name="versionColumnName")
    private @Nullable Output<String> versionColumnName;

    /**
     * @return The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
     * 
     */
    public Optional<Output<String>> versionColumnName() {
        return Optional.ofNullable(this.versionColumnName);
    }

    private AiFeatureGroupFeatureArgs() {}

    private AiFeatureGroupFeatureArgs(AiFeatureGroupFeatureArgs $) {
        this.description = $.description;
        this.featureGroup = $.featureGroup;
        this.labels = $.labels;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.versionColumnName = $.versionColumnName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureGroupFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureGroupFeatureArgs $;

        public Builder() {
            $ = new AiFeatureGroupFeatureArgs();
        }

        public Builder(AiFeatureGroupFeatureArgs defaults) {
            $ = new AiFeatureGroupFeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the FeatureGroup.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the FeatureGroup.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param featureGroup The name of the Feature Group.
         * 
         * @return builder
         * 
         */
        public Builder featureGroup(Output<String> featureGroup) {
            $.featureGroup = featureGroup;
            return this;
        }

        /**
         * @param featureGroup The name of the Feature Group.
         * 
         * @return builder
         * 
         */
        public Builder featureGroup(String featureGroup) {
            return featureGroup(Output.of(featureGroup));
        }

        /**
         * @param labels The labels with user-defined metadata to organize your FeatureGroup.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels with user-defined metadata to organize your FeatureGroup.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The resource name of the Feature Group Feature.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the Feature Group Feature.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The region for the resource. It should be the same as the feature group&#39;s region.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region for the resource. It should be the same as the feature group&#39;s region.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param versionColumnName The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
         * 
         * @return builder
         * 
         */
        public Builder versionColumnName(@Nullable Output<String> versionColumnName) {
            $.versionColumnName = versionColumnName;
            return this;
        }

        /**
         * @param versionColumnName The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
         * 
         * @return builder
         * 
         */
        public Builder versionColumnName(String versionColumnName) {
            return versionColumnName(Output.of(versionColumnName));
        }

        public AiFeatureGroupFeatureArgs build() {
            if ($.featureGroup == null) {
                throw new MissingRequiredPropertyException("AiFeatureGroupFeatureArgs", "featureGroup");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("AiFeatureGroupFeatureArgs", "region");
            }
            return $;
        }
    }

}
