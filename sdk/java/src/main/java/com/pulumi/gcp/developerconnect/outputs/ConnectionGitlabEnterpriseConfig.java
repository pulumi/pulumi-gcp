// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGitlabEnterpriseConfigAuthorizerCredential;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGitlabEnterpriseConfigReadAuthorizerCredential;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGitlabEnterpriseConfigServiceDirectoryConfig;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionGitlabEnterpriseConfig {
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    private ConnectionGitlabEnterpriseConfigAuthorizerCredential authorizerCredential;
    /**
     * @return Required. The URI of the GitLab Enterprise host this connection is for.
     * 
     */
    private String hostUri;
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    private ConnectionGitlabEnterpriseConfigReadAuthorizerCredential readAuthorizerCredential;
    /**
     * @return (Output)
     * Output only. Version of the GitLab Enterprise server running on the `host_uri`.
     * 
     */
    private @Nullable String serverVersion;
    /**
     * @return ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionGitlabEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig;
    /**
     * @return Optional. SSL Certificate Authority certificate to use for requests to GitLab
     * Enterprise instance.
     * 
     */
    private @Nullable String sslCaCertificate;
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to validate
     * webhooks.
     * 
     */
    private String webhookSecretSecretVersion;

    private ConnectionGitlabEnterpriseConfig() {}
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public ConnectionGitlabEnterpriseConfigAuthorizerCredential authorizerCredential() {
        return this.authorizerCredential;
    }
    /**
     * @return Required. The URI of the GitLab Enterprise host this connection is for.
     * 
     */
    public String hostUri() {
        return this.hostUri;
    }
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public ConnectionGitlabEnterpriseConfigReadAuthorizerCredential readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }
    /**
     * @return (Output)
     * Output only. Version of the GitLab Enterprise server running on the `host_uri`.
     * 
     */
    public Optional<String> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }
    /**
     * @return ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionGitlabEnterpriseConfigServiceDirectoryConfig> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }
    /**
     * @return Optional. SSL Certificate Authority certificate to use for requests to GitLab
     * Enterprise instance.
     * 
     */
    public Optional<String> sslCaCertificate() {
        return Optional.ofNullable(this.sslCaCertificate);
    }
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to validate
     * webhooks.
     * 
     */
    public String webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionGitlabEnterpriseConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ConnectionGitlabEnterpriseConfigAuthorizerCredential authorizerCredential;
        private String hostUri;
        private ConnectionGitlabEnterpriseConfigReadAuthorizerCredential readAuthorizerCredential;
        private @Nullable String serverVersion;
        private @Nullable ConnectionGitlabEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig;
        private @Nullable String sslCaCertificate;
        private String webhookSecretSecretVersion;
        public Builder() {}
        public Builder(ConnectionGitlabEnterpriseConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizerCredential = defaults.authorizerCredential;
    	      this.hostUri = defaults.hostUri;
    	      this.readAuthorizerCredential = defaults.readAuthorizerCredential;
    	      this.serverVersion = defaults.serverVersion;
    	      this.serviceDirectoryConfig = defaults.serviceDirectoryConfig;
    	      this.sslCaCertificate = defaults.sslCaCertificate;
    	      this.webhookSecretSecretVersion = defaults.webhookSecretSecretVersion;
        }

        @CustomType.Setter
        public Builder authorizerCredential(ConnectionGitlabEnterpriseConfigAuthorizerCredential authorizerCredential) {
            if (authorizerCredential == null) {
              throw new MissingRequiredPropertyException("ConnectionGitlabEnterpriseConfig", "authorizerCredential");
            }
            this.authorizerCredential = authorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder hostUri(String hostUri) {
            if (hostUri == null) {
              throw new MissingRequiredPropertyException("ConnectionGitlabEnterpriseConfig", "hostUri");
            }
            this.hostUri = hostUri;
            return this;
        }
        @CustomType.Setter
        public Builder readAuthorizerCredential(ConnectionGitlabEnterpriseConfigReadAuthorizerCredential readAuthorizerCredential) {
            if (readAuthorizerCredential == null) {
              throw new MissingRequiredPropertyException("ConnectionGitlabEnterpriseConfig", "readAuthorizerCredential");
            }
            this.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder serverVersion(@Nullable String serverVersion) {

            this.serverVersion = serverVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDirectoryConfig(@Nullable ConnectionGitlabEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig) {

            this.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sslCaCertificate(@Nullable String sslCaCertificate) {

            this.sslCaCertificate = sslCaCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            if (webhookSecretSecretVersion == null) {
              throw new MissingRequiredPropertyException("ConnectionGitlabEnterpriseConfig", "webhookSecretSecretVersion");
            }
            this.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }
        public ConnectionGitlabEnterpriseConfig build() {
            final var _resultValue = new ConnectionGitlabEnterpriseConfig();
            _resultValue.authorizerCredential = authorizerCredential;
            _resultValue.hostUri = hostUri;
            _resultValue.readAuthorizerCredential = readAuthorizerCredential;
            _resultValue.serverVersion = serverVersion;
            _resultValue.serviceDirectoryConfig = serviceDirectoryConfig;
            _resultValue.sslCaCertificate = sslCaCertificate;
            _resultValue.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return _resultValue;
        }
    }
}
