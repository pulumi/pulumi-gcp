// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionProfileSqlServerProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionProfileSqlServerProfileArgs Empty = new ConnectionProfileSqlServerProfileArgs();

    /**
     * Database for the SQL Server connection.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return Database for the SQL Server connection.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * Hostname for the SQL Server connection.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return Hostname for the SQL Server connection.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * Password for the SQL Server connection.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for the SQL Server connection.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Port for the SQL Server connection.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port for the SQL Server connection.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * A reference to a Secret Manager resource name storing the user&#39;s password.
     * 
     */
    @Import(name="secretManagerStoredPassword")
    private @Nullable Output<String> secretManagerStoredPassword;

    /**
     * @return A reference to a Secret Manager resource name storing the user&#39;s password.
     * 
     */
    public Optional<Output<String>> secretManagerStoredPassword() {
        return Optional.ofNullable(this.secretManagerStoredPassword);
    }

    /**
     * Username for the SQL Server connection.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username for the SQL Server connection.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ConnectionProfileSqlServerProfileArgs() {}

    private ConnectionProfileSqlServerProfileArgs(ConnectionProfileSqlServerProfileArgs $) {
        this.database = $.database;
        this.hostname = $.hostname;
        this.password = $.password;
        this.port = $.port;
        this.secretManagerStoredPassword = $.secretManagerStoredPassword;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionProfileSqlServerProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionProfileSqlServerProfileArgs $;

        public Builder() {
            $ = new ConnectionProfileSqlServerProfileArgs();
        }

        public Builder(ConnectionProfileSqlServerProfileArgs defaults) {
            $ = new ConnectionProfileSqlServerProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database Database for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Database for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param hostname Hostname for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Hostname for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param password Password for the SQL Server connection.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the SQL Server connection.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Port for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param secretManagerStoredPassword A reference to a Secret Manager resource name storing the user&#39;s password.
         * 
         * @return builder
         * 
         */
        public Builder secretManagerStoredPassword(@Nullable Output<String> secretManagerStoredPassword) {
            $.secretManagerStoredPassword = secretManagerStoredPassword;
            return this;
        }

        /**
         * @param secretManagerStoredPassword A reference to a Secret Manager resource name storing the user&#39;s password.
         * 
         * @return builder
         * 
         */
        public Builder secretManagerStoredPassword(String secretManagerStoredPassword) {
            return secretManagerStoredPassword(Output.of(secretManagerStoredPassword));
        }

        /**
         * @param username Username for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username for the SQL Server connection.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConnectionProfileSqlServerProfileArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileSqlServerProfileArgs", "database");
            }
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileSqlServerProfileArgs", "hostname");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileSqlServerProfileArgs", "username");
            }
            return $;
        }
    }

}
