// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.backupdisasterrecovery.inputs.ManagementServerManagementUriArgs;
import com.pulumi.gcp.backupdisasterrecovery.inputs.ManagementServerNetworkArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementServerState extends com.pulumi.resources.ResourceArgs {

    public static final ManagementServerState Empty = new ManagementServerState();

    /**
     * The location for the management server (management console)
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the management server (management console)
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The management console URI
     * Structure is documented below.
     * 
     */
    @Import(name="managementUris")
    private @Nullable Output<List<ManagementServerManagementUriArgs>> managementUris;

    /**
     * @return The management console URI
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ManagementServerManagementUriArgs>>> managementUris() {
        return Optional.ofNullable(this.managementUris);
    }

    /**
     * The name of management server (management console)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of management server (management console)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network details to create management server (management console).
     * Structure is documented below.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<ManagementServerNetworkArgs>> networks;

    /**
     * @return Network details to create management server (management console).
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ManagementServerNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * The oauth2ClientId of management console.
     * 
     */
    @Import(name="oauth2ClientId")
    private @Nullable Output<String> oauth2ClientId;

    /**
     * @return The oauth2ClientId of management console.
     * 
     */
    public Optional<Output<String>> oauth2ClientId() {
        return Optional.ofNullable(this.oauth2ClientId);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The type of management server (management console).
     * Default value is `BACKUP_RESTORE`.
     * Possible values are: `BACKUP_RESTORE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of management server (management console).
     * Default value is `BACKUP_RESTORE`.
     * Possible values are: `BACKUP_RESTORE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ManagementServerState() {}

    private ManagementServerState(ManagementServerState $) {
        this.location = $.location;
        this.managementUris = $.managementUris;
        this.name = $.name;
        this.networks = $.networks;
        this.oauth2ClientId = $.oauth2ClientId;
        this.project = $.project;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementServerState $;

        public Builder() {
            $ = new ManagementServerState();
        }

        public Builder(ManagementServerState defaults) {
            $ = new ManagementServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location for the management server (management console)
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the management server (management console)
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementUris The management console URI
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementUris(@Nullable Output<List<ManagementServerManagementUriArgs>> managementUris) {
            $.managementUris = managementUris;
            return this;
        }

        /**
         * @param managementUris The management console URI
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementUris(List<ManagementServerManagementUriArgs> managementUris) {
            return managementUris(Output.of(managementUris));
        }

        /**
         * @param managementUris The management console URI
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementUris(ManagementServerManagementUriArgs... managementUris) {
            return managementUris(List.of(managementUris));
        }

        /**
         * @param name The name of management server (management console)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of management server (management console)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Network details to create management server (management console).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<ManagementServerNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Network details to create management server (management console).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<ManagementServerNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Network details to create management server (management console).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networks(ManagementServerNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param oauth2ClientId The oauth2ClientId of management console.
         * 
         * @return builder
         * 
         */
        public Builder oauth2ClientId(@Nullable Output<String> oauth2ClientId) {
            $.oauth2ClientId = oauth2ClientId;
            return this;
        }

        /**
         * @param oauth2ClientId The oauth2ClientId of management console.
         * 
         * @return builder
         * 
         */
        public Builder oauth2ClientId(String oauth2ClientId) {
            return oauth2ClientId(Output.of(oauth2ClientId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param type The type of management server (management console).
         * Default value is `BACKUP_RESTORE`.
         * Possible values are: `BACKUP_RESTORE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of management server (management console).
         * Default value is `BACKUP_RESTORE`.
         * Possible values are: `BACKUP_RESTORE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ManagementServerState build() {
            return $;
        }
    }

}
