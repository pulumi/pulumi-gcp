// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClientConfigResult {
    /**
     * @return The OAuth2 access token used by the client to authenticate against the Google Cloud API.
     * 
     */
    private String accessToken;
    /**
     * @return The default labels configured on the provider.
     * 
     */
    private Map<String,String> defaultLabels;
    private String id;
    /**
     * @return The ID of the project to apply any resources to.
     * 
     */
    private String project;
    /**
     * @return The region to operate under.
     * 
     */
    private String region;
    /**
     * @return The zone to operate under.
     * 
     */
    private String zone;

    private GetClientConfigResult() {}
    /**
     * @return The OAuth2 access token used by the client to authenticate against the Google Cloud API.
     * 
     */
    public String accessToken() {
        return this.accessToken;
    }
    /**
     * @return The default labels configured on the provider.
     * 
     */
    public Map<String,String> defaultLabels() {
        return this.defaultLabels;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the project to apply any resources to.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The region to operate under.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The zone to operate under.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessToken;
        private Map<String,String> defaultLabels;
        private String id;
        private String project;
        private String region;
        private String zone;
        public Builder() {}
        public Builder(GetClientConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.defaultLabels = defaults.defaultLabels;
    	      this.id = defaults.id;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder accessToken(String accessToken) {
            if (accessToken == null) {
              throw new MissingRequiredPropertyException("GetClientConfigResult", "accessToken");
            }
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder defaultLabels(Map<String,String> defaultLabels) {
            if (defaultLabels == null) {
              throw new MissingRequiredPropertyException("GetClientConfigResult", "defaultLabels");
            }
            this.defaultLabels = defaultLabels;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClientConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetClientConfigResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetClientConfigResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetClientConfigResult", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetClientConfigResult build() {
            final var _resultValue = new GetClientConfigResult();
            _resultValue.accessToken = accessToken;
            _resultValue.defaultLabels = defaultLabels;
            _resultValue.id = id;
            _resultValue.project = project;
            _resultValue.region = region;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
