// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataform.inputs.RepositoryReleaseConfigCodeCompilationConfigArgs;
import com.pulumi.gcp.dataform.inputs.RepositoryReleaseConfigRecentScheduledReleaseRecordArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryReleaseConfigState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryReleaseConfigState Empty = new RepositoryReleaseConfigState();

    /**
     * Optional. If set, fields of codeCompilationConfig override the default compilation settings that are specified in dataform.json.
     * Structure is documented below.
     * 
     */
    @Import(name="codeCompilationConfig")
    private @Nullable Output<RepositoryReleaseConfigCodeCompilationConfigArgs> codeCompilationConfig;

    /**
     * @return Optional. If set, fields of codeCompilationConfig override the default compilation settings that are specified in dataform.json.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RepositoryReleaseConfigCodeCompilationConfigArgs>> codeCompilationConfig() {
        return Optional.ofNullable(this.codeCompilationConfig);
    }

    /**
     * Optional. Optional schedule (in cron format) for automatic creation of compilation results.
     * 
     */
    @Import(name="cronSchedule")
    private @Nullable Output<String> cronSchedule;

    /**
     * @return Optional. Optional schedule (in cron format) for automatic creation of compilation results.
     * 
     */
    public Optional<Output<String>> cronSchedule() {
        return Optional.ofNullable(this.cronSchedule);
    }

    /**
     * Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository.
     * 
     * ***
     * 
     */
    @Import(name="gitCommitish")
    private @Nullable Output<String> gitCommitish;

    /**
     * @return Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> gitCommitish() {
        return Optional.ofNullable(this.gitCommitish);
    }

    /**
     * The release&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The release&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Records of the 10 most recent scheduled release attempts, ordered in in descending order of releaseTime. Updated whenever automatic creation of a compilation result is triggered by cronSchedule.
     * Structure is documented below.
     * 
     */
    @Import(name="recentScheduledReleaseRecords")
    private @Nullable Output<List<RepositoryReleaseConfigRecentScheduledReleaseRecordArgs>> recentScheduledReleaseRecords;

    /**
     * @return Records of the 10 most recent scheduled release attempts, ordered in in descending order of releaseTime. Updated whenever automatic creation of a compilation result is triggered by cronSchedule.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RepositoryReleaseConfigRecentScheduledReleaseRecordArgs>>> recentScheduledReleaseRecords() {
        return Optional.ofNullable(this.recentScheduledReleaseRecords);
    }

    /**
     * A reference to the region
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return A reference to the region
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A reference to the Dataform repository
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return A reference to the Dataform repository
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * Optional. Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Optional. Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private RepositoryReleaseConfigState() {}

    private RepositoryReleaseConfigState(RepositoryReleaseConfigState $) {
        this.codeCompilationConfig = $.codeCompilationConfig;
        this.cronSchedule = $.cronSchedule;
        this.gitCommitish = $.gitCommitish;
        this.name = $.name;
        this.project = $.project;
        this.recentScheduledReleaseRecords = $.recentScheduledReleaseRecords;
        this.region = $.region;
        this.repository = $.repository;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryReleaseConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryReleaseConfigState $;

        public Builder() {
            $ = new RepositoryReleaseConfigState();
        }

        public Builder(RepositoryReleaseConfigState defaults) {
            $ = new RepositoryReleaseConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeCompilationConfig Optional. If set, fields of codeCompilationConfig override the default compilation settings that are specified in dataform.json.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeCompilationConfig(@Nullable Output<RepositoryReleaseConfigCodeCompilationConfigArgs> codeCompilationConfig) {
            $.codeCompilationConfig = codeCompilationConfig;
            return this;
        }

        /**
         * @param codeCompilationConfig Optional. If set, fields of codeCompilationConfig override the default compilation settings that are specified in dataform.json.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder codeCompilationConfig(RepositoryReleaseConfigCodeCompilationConfigArgs codeCompilationConfig) {
            return codeCompilationConfig(Output.of(codeCompilationConfig));
        }

        /**
         * @param cronSchedule Optional. Optional schedule (in cron format) for automatic creation of compilation results.
         * 
         * @return builder
         * 
         */
        public Builder cronSchedule(@Nullable Output<String> cronSchedule) {
            $.cronSchedule = cronSchedule;
            return this;
        }

        /**
         * @param cronSchedule Optional. Optional schedule (in cron format) for automatic creation of compilation results.
         * 
         * @return builder
         * 
         */
        public Builder cronSchedule(String cronSchedule) {
            return cronSchedule(Output.of(cronSchedule));
        }

        /**
         * @param gitCommitish Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder gitCommitish(@Nullable Output<String> gitCommitish) {
            $.gitCommitish = gitCommitish;
            return this;
        }

        /**
         * @param gitCommitish Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder gitCommitish(String gitCommitish) {
            return gitCommitish(Output.of(gitCommitish));
        }

        /**
         * @param name The release&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The release&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param recentScheduledReleaseRecords Records of the 10 most recent scheduled release attempts, ordered in in descending order of releaseTime. Updated whenever automatic creation of a compilation result is triggered by cronSchedule.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recentScheduledReleaseRecords(@Nullable Output<List<RepositoryReleaseConfigRecentScheduledReleaseRecordArgs>> recentScheduledReleaseRecords) {
            $.recentScheduledReleaseRecords = recentScheduledReleaseRecords;
            return this;
        }

        /**
         * @param recentScheduledReleaseRecords Records of the 10 most recent scheduled release attempts, ordered in in descending order of releaseTime. Updated whenever automatic creation of a compilation result is triggered by cronSchedule.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recentScheduledReleaseRecords(List<RepositoryReleaseConfigRecentScheduledReleaseRecordArgs> recentScheduledReleaseRecords) {
            return recentScheduledReleaseRecords(Output.of(recentScheduledReleaseRecords));
        }

        /**
         * @param recentScheduledReleaseRecords Records of the 10 most recent scheduled release attempts, ordered in in descending order of releaseTime. Updated whenever automatic creation of a compilation result is triggered by cronSchedule.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recentScheduledReleaseRecords(RepositoryReleaseConfigRecentScheduledReleaseRecordArgs... recentScheduledReleaseRecords) {
            return recentScheduledReleaseRecords(List.of(recentScheduledReleaseRecords));
        }

        /**
         * @param region A reference to the region
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A reference to the region
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param repository A reference to the Dataform repository
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository A reference to the Dataform repository
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param timeZone Optional. Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Optional. Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public RepositoryReleaseConfigState build() {
            return $;
        }
    }

}
