// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RestorePlanRestoreConfigTransformationRuleResourceFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestorePlanRestoreConfigTransformationRuleResourceFilterArgs Empty = new RestorePlanRestoreConfigTransformationRuleResourceFilterArgs();

    /**
     * (Filtering parameter) Any resource subject to transformation must
     * belong to one of the listed &#34;types&#34;. If this field is not provided,
     * no type filtering will be performed
     * (all resources of all types matching previous filtering parameters
     * will be candidates for transformation).
     * Structure is documented below.
     * 
     */
    @Import(name="groupKinds")
    private @Nullable Output<List<RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs>> groupKinds;

    /**
     * @return (Filtering parameter) Any resource subject to transformation must
     * belong to one of the listed &#34;types&#34;. If this field is not provided,
     * no type filtering will be performed
     * (all resources of all types matching previous filtering parameters
     * will be candidates for transformation).
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs>>> groupKinds() {
        return Optional.ofNullable(this.groupKinds);
    }

    /**
     * This is a JSONPath expression that matches specific fields of
     * candidate resources and it operates as a filtering parameter
     * (resources that are not matched with this expression will not
     * be candidates for transformation).
     * 
     */
    @Import(name="jsonPath")
    private @Nullable Output<String> jsonPath;

    /**
     * @return This is a JSONPath expression that matches specific fields of
     * candidate resources and it operates as a filtering parameter
     * (resources that are not matched with this expression will not
     * be candidates for transformation).
     * 
     */
    public Optional<Output<String>> jsonPath() {
        return Optional.ofNullable(this.jsonPath);
    }

    /**
     * (Filtering parameter) Any resource subject to transformation must
     * be contained within one of the listed Kubernetes Namespace in the
     * Backup. If this field is not provided, no namespace filtering will
     * be performed (all resources in all Namespaces, including all
     * cluster-scoped resources, will be candidates for transformation).
     * To mix cluster-scoped and namespaced resources in the same rule,
     * use an empty string (&#34;&#34;) as one of the target namespaces.
     * 
     */
    @Import(name="namespaces")
    private @Nullable Output<List<String>> namespaces;

    /**
     * @return (Filtering parameter) Any resource subject to transformation must
     * be contained within one of the listed Kubernetes Namespace in the
     * Backup. If this field is not provided, no namespace filtering will
     * be performed (all resources in all Namespaces, including all
     * cluster-scoped resources, will be candidates for transformation).
     * To mix cluster-scoped and namespaced resources in the same rule,
     * use an empty string (&#34;&#34;) as one of the target namespaces.
     * 
     */
    public Optional<Output<List<String>>> namespaces() {
        return Optional.ofNullable(this.namespaces);
    }

    private RestorePlanRestoreConfigTransformationRuleResourceFilterArgs() {}

    private RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs $) {
        this.groupKinds = $.groupKinds;
        this.jsonPath = $.jsonPath;
        this.namespaces = $.namespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestorePlanRestoreConfigTransformationRuleResourceFilterArgs $;

        public Builder() {
            $ = new RestorePlanRestoreConfigTransformationRuleResourceFilterArgs();
        }

        public Builder(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs defaults) {
            $ = new RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupKinds (Filtering parameter) Any resource subject to transformation must
         * belong to one of the listed &#34;types&#34;. If this field is not provided,
         * no type filtering will be performed
         * (all resources of all types matching previous filtering parameters
         * will be candidates for transformation).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder groupKinds(@Nullable Output<List<RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs>> groupKinds) {
            $.groupKinds = groupKinds;
            return this;
        }

        /**
         * @param groupKinds (Filtering parameter) Any resource subject to transformation must
         * belong to one of the listed &#34;types&#34;. If this field is not provided,
         * no type filtering will be performed
         * (all resources of all types matching previous filtering parameters
         * will be candidates for transformation).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder groupKinds(List<RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs> groupKinds) {
            return groupKinds(Output.of(groupKinds));
        }

        /**
         * @param groupKinds (Filtering parameter) Any resource subject to transformation must
         * belong to one of the listed &#34;types&#34;. If this field is not provided,
         * no type filtering will be performed
         * (all resources of all types matching previous filtering parameters
         * will be candidates for transformation).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder groupKinds(RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs... groupKinds) {
            return groupKinds(List.of(groupKinds));
        }

        /**
         * @param jsonPath This is a JSONPath expression that matches specific fields of
         * candidate resources and it operates as a filtering parameter
         * (resources that are not matched with this expression will not
         * be candidates for transformation).
         * 
         * @return builder
         * 
         */
        public Builder jsonPath(@Nullable Output<String> jsonPath) {
            $.jsonPath = jsonPath;
            return this;
        }

        /**
         * @param jsonPath This is a JSONPath expression that matches specific fields of
         * candidate resources and it operates as a filtering parameter
         * (resources that are not matched with this expression will not
         * be candidates for transformation).
         * 
         * @return builder
         * 
         */
        public Builder jsonPath(String jsonPath) {
            return jsonPath(Output.of(jsonPath));
        }

        /**
         * @param namespaces (Filtering parameter) Any resource subject to transformation must
         * be contained within one of the listed Kubernetes Namespace in the
         * Backup. If this field is not provided, no namespace filtering will
         * be performed (all resources in all Namespaces, including all
         * cluster-scoped resources, will be candidates for transformation).
         * To mix cluster-scoped and namespaced resources in the same rule,
         * use an empty string (&#34;&#34;) as one of the target namespaces.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(@Nullable Output<List<String>> namespaces) {
            $.namespaces = namespaces;
            return this;
        }

        /**
         * @param namespaces (Filtering parameter) Any resource subject to transformation must
         * be contained within one of the listed Kubernetes Namespace in the
         * Backup. If this field is not provided, no namespace filtering will
         * be performed (all resources in all Namespaces, including all
         * cluster-scoped resources, will be candidates for transformation).
         * To mix cluster-scoped and namespaced resources in the same rule,
         * use an empty string (&#34;&#34;) as one of the target namespaces.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(List<String> namespaces) {
            return namespaces(Output.of(namespaces));
        }

        /**
         * @param namespaces (Filtering parameter) Any resource subject to transformation must
         * be contained within one of the listed Kubernetes Namespace in the
         * Backup. If this field is not provided, no namespace filtering will
         * be performed (all resources in all Namespaces, including all
         * cluster-scoped resources, will be candidates for transformation).
         * To mix cluster-scoped and namespaced resources in the same rule,
         * use an empty string (&#34;&#34;) as one of the target namespaces.
         * 
         * @return builder
         * 
         */
        public Builder namespaces(String... namespaces) {
            return namespaces(List.of(namespaces));
        }

        public RestorePlanRestoreConfigTransformationRuleResourceFilterArgs build() {
            return $;
        }
    }

}
