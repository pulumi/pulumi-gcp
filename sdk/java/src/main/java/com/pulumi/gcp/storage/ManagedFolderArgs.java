// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedFolderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedFolderArgs Empty = new ManagedFolderArgs();

    /**
     * The name of the bucket that contains the managed folder.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the bucket that contains the managed folder.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Allows the deletion of a managed folder even if contains
     * objects. If a non-empty managed folder is deleted, any objects
     * within the folder will remain in a simulated folder with the
     * same name.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return Allows the deletion of a managed folder even if contains
     * objects. If a non-empty managed folder is deleted, any objects
     * within the folder will remain in a simulated folder with the
     * same name.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * The name of the managed folder expressed as a path. Must include
     * trailing &#39;/&#39;. For example, `example_dir/example_dir2/`.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the managed folder expressed as a path. Must include
     * trailing &#39;/&#39;. For example, `example_dir/example_dir2/`.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ManagedFolderArgs() {}

    private ManagedFolderArgs(ManagedFolderArgs $) {
        this.bucket = $.bucket;
        this.forceDestroy = $.forceDestroy;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedFolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedFolderArgs $;

        public Builder() {
            $ = new ManagedFolderArgs();
        }

        public Builder(ManagedFolderArgs defaults) {
            $ = new ManagedFolderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the bucket that contains the managed folder.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the bucket that contains the managed folder.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param forceDestroy Allows the deletion of a managed folder even if contains
         * objects. If a non-empty managed folder is deleted, any objects
         * within the folder will remain in a simulated folder with the
         * same name.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy Allows the deletion of a managed folder even if contains
         * objects. If a non-empty managed folder is deleted, any objects
         * within the folder will remain in a simulated folder with the
         * same name.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param name The name of the managed folder expressed as a path. Must include
         * trailing &#39;/&#39;. For example, `example_dir/example_dir2/`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the managed folder expressed as a path. Must include
         * trailing &#39;/&#39;. For example, `example_dir/example_dir2/`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ManagedFolderArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("ManagedFolderArgs", "bucket");
            }
            return $;
        }
    }

}
