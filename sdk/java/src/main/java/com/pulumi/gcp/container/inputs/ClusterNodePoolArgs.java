// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.ClusterNodePoolAutoscalingArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolManagementArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolNetworkConfigArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolNodeConfigArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolPlacementPolicyArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolQueuedProvisioningArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolUpgradeSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodePoolArgs Empty = new ClusterNodePoolArgs();

    /**
     * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     * 
     */
    @Import(name="autoscaling")
    private @Nullable Output<ClusterNodePoolAutoscalingArgs> autoscaling;

    /**
     * @return Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     * 
     */
    public Optional<Output<ClusterNodePoolAutoscalingArgs>> autoscaling() {
        return Optional.ofNullable(this.autoscaling);
    }

    /**
     * The number of nodes to create in this
     * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
     * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
     * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
     * set this to a value of at least `1`, alongside setting
     * `remove_default_node_pool` to `true`.
     * 
     */
    @Import(name="initialNodeCount")
    private @Nullable Output<Integer> initialNodeCount;

    /**
     * @return The number of nodes to create in this
     * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
     * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
     * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
     * set this to a value of at least `1`, alongside setting
     * `remove_default_node_pool` to `true`.
     * 
     */
    public Optional<Output<Integer>> initialNodeCount() {
        return Optional.ofNullable(this.initialNodeCount);
    }

    /**
     * The resource URLs of the managed instance groups associated with this node pool.
     * 
     */
    @Import(name="instanceGroupUrls")
    private @Nullable Output<List<String>> instanceGroupUrls;

    /**
     * @return The resource URLs of the managed instance groups associated with this node pool.
     * 
     */
    public Optional<Output<List<String>>> instanceGroupUrls() {
        return Optional.ofNullable(this.instanceGroupUrls);
    }

    /**
     * List of instance group URLs which have been assigned to this node pool.
     * 
     */
    @Import(name="managedInstanceGroupUrls")
    private @Nullable Output<List<String>> managedInstanceGroupUrls;

    /**
     * @return List of instance group URLs which have been assigned to this node pool.
     * 
     */
    public Optional<Output<List<String>>> managedInstanceGroupUrls() {
        return Optional.ofNullable(this.managedInstanceGroupUrls);
    }

    /**
     * Node management configuration, wherein auto-repair and auto-upgrade is configured.
     * 
     */
    @Import(name="management")
    private @Nullable Output<ClusterNodePoolManagementArgs> management;

    /**
     * @return Node management configuration, wherein auto-repair and auto-upgrade is configured.
     * 
     */
    public Optional<Output<ClusterNodePoolManagementArgs>> management() {
        return Optional.ofNullable(this.management);
    }

    /**
     * The maximum number of pods per node in this node pool. Note that this does not work on node pools which are &#34;route-based&#34; - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     * 
     */
    @Import(name="maxPodsPerNode")
    private @Nullable Output<Integer> maxPodsPerNode;

    /**
     * @return The maximum number of pods per node in this node pool. Note that this does not work on node pools which are &#34;route-based&#34; - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     * 
     */
    public Optional<Output<Integer>> maxPodsPerNode() {
        return Optional.ofNullable(this.maxPodsPerNode);
    }

    /**
     * The name of the cluster, unique within the project and
     * location.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cluster, unique within the project and
     * location.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    /**
     * @return Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     * 
     */
    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * Configuration for
     * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
     * 
     */
    @Import(name="networkConfig")
    private @Nullable Output<ClusterNodePoolNetworkConfigArgs> networkConfig;

    /**
     * @return Configuration for
     * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
     * 
     */
    public Optional<Output<ClusterNodePoolNetworkConfigArgs>> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }

    /**
     * Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `node_pool` block; this configuration
     * manages the default node pool, which isn&#39;t recommended to be used.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeConfig")
    private @Nullable Output<ClusterNodePoolNodeConfigArgs> nodeConfig;

    /**
     * @return Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `node_pool` block; this configuration
     * manages the default node pool, which isn&#39;t recommended to be used.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClusterNodePoolNodeConfigArgs>> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }

    /**
     * The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * The list of zones in which the cluster&#39;s nodes
     * are located. Nodes must be in the region of their regional cluster or in the
     * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
     * a zonal cluster, omit the cluster&#39;s zone.
     * 
     * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
     * defined; in a multi-zonal cluster, the cluster master is only present in a
     * single zone while nodes are present in each of the primary zone and the node
     * locations. In contrast, in a regional cluster, cluster master nodes are present
     * in multiple zones in the region. For that reason, regional clusters should be
     * preferred.
     * 
     */
    @Import(name="nodeLocations")
    private @Nullable Output<List<String>> nodeLocations;

    /**
     * @return The list of zones in which the cluster&#39;s nodes
     * are located. Nodes must be in the region of their regional cluster or in the
     * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
     * a zonal cluster, omit the cluster&#39;s zone.
     * 
     * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
     * defined; in a multi-zonal cluster, the cluster master is only present in a
     * single zone while nodes are present in each of the primary zone and the node
     * locations. In contrast, in a regional cluster, cluster master nodes are present
     * in multiple zones in the region. For that reason, regional clusters should be
     * preferred.
     * 
     */
    public Optional<Output<List<String>>> nodeLocations() {
        return Optional.ofNullable(this.nodeLocations);
    }

    /**
     * Specifies the node placement policy
     * 
     */
    @Import(name="placementPolicy")
    private @Nullable Output<ClusterNodePoolPlacementPolicyArgs> placementPolicy;

    /**
     * @return Specifies the node placement policy
     * 
     */
    public Optional<Output<ClusterNodePoolPlacementPolicyArgs>> placementPolicy() {
        return Optional.ofNullable(this.placementPolicy);
    }

    /**
     * Specifies the configuration of queued provisioning
     * 
     */
    @Import(name="queuedProvisioning")
    private @Nullable Output<ClusterNodePoolQueuedProvisioningArgs> queuedProvisioning;

    /**
     * @return Specifies the configuration of queued provisioning
     * 
     */
    public Optional<Output<ClusterNodePoolQueuedProvisioningArgs>> queuedProvisioning() {
        return Optional.ofNullable(this.queuedProvisioning);
    }

    /**
     * Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
     * 
     */
    @Import(name="upgradeSettings")
    private @Nullable Output<ClusterNodePoolUpgradeSettingsArgs> upgradeSettings;

    /**
     * @return Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
     * 
     */
    public Optional<Output<ClusterNodePoolUpgradeSettingsArgs>> upgradeSettings() {
        return Optional.ofNullable(this.upgradeSettings);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ClusterNodePoolArgs() {}

    private ClusterNodePoolArgs(ClusterNodePoolArgs $) {
        this.autoscaling = $.autoscaling;
        this.initialNodeCount = $.initialNodeCount;
        this.instanceGroupUrls = $.instanceGroupUrls;
        this.managedInstanceGroupUrls = $.managedInstanceGroupUrls;
        this.management = $.management;
        this.maxPodsPerNode = $.maxPodsPerNode;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.networkConfig = $.networkConfig;
        this.nodeConfig = $.nodeConfig;
        this.nodeCount = $.nodeCount;
        this.nodeLocations = $.nodeLocations;
        this.placementPolicy = $.placementPolicy;
        this.queuedProvisioning = $.queuedProvisioning;
        this.upgradeSettings = $.upgradeSettings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodePoolArgs $;

        public Builder() {
            $ = new ClusterNodePoolArgs();
        }

        public Builder(ClusterNodePoolArgs defaults) {
            $ = new ClusterNodePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscaling Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
         * 
         * @return builder
         * 
         */
        public Builder autoscaling(@Nullable Output<ClusterNodePoolAutoscalingArgs> autoscaling) {
            $.autoscaling = autoscaling;
            return this;
        }

        /**
         * @param autoscaling Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
         * 
         * @return builder
         * 
         */
        public Builder autoscaling(ClusterNodePoolAutoscalingArgs autoscaling) {
            return autoscaling(Output.of(autoscaling));
        }

        /**
         * @param initialNodeCount The number of nodes to create in this
         * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
         * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
         * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
         * set this to a value of at least `1`, alongside setting
         * `remove_default_node_pool` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeCount(@Nullable Output<Integer> initialNodeCount) {
            $.initialNodeCount = initialNodeCount;
            return this;
        }

        /**
         * @param initialNodeCount The number of nodes to create in this
         * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
         * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
         * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
         * set this to a value of at least `1`, alongside setting
         * `remove_default_node_pool` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeCount(Integer initialNodeCount) {
            return initialNodeCount(Output.of(initialNodeCount));
        }

        /**
         * @param instanceGroupUrls The resource URLs of the managed instance groups associated with this node pool.
         * 
         * @return builder
         * 
         */
        public Builder instanceGroupUrls(@Nullable Output<List<String>> instanceGroupUrls) {
            $.instanceGroupUrls = instanceGroupUrls;
            return this;
        }

        /**
         * @param instanceGroupUrls The resource URLs of the managed instance groups associated with this node pool.
         * 
         * @return builder
         * 
         */
        public Builder instanceGroupUrls(List<String> instanceGroupUrls) {
            return instanceGroupUrls(Output.of(instanceGroupUrls));
        }

        /**
         * @param instanceGroupUrls The resource URLs of the managed instance groups associated with this node pool.
         * 
         * @return builder
         * 
         */
        public Builder instanceGroupUrls(String... instanceGroupUrls) {
            return instanceGroupUrls(List.of(instanceGroupUrls));
        }

        /**
         * @param managedInstanceGroupUrls List of instance group URLs which have been assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroupUrls(@Nullable Output<List<String>> managedInstanceGroupUrls) {
            $.managedInstanceGroupUrls = managedInstanceGroupUrls;
            return this;
        }

        /**
         * @param managedInstanceGroupUrls List of instance group URLs which have been assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroupUrls(List<String> managedInstanceGroupUrls) {
            return managedInstanceGroupUrls(Output.of(managedInstanceGroupUrls));
        }

        /**
         * @param managedInstanceGroupUrls List of instance group URLs which have been assigned to this node pool.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceGroupUrls(String... managedInstanceGroupUrls) {
            return managedInstanceGroupUrls(List.of(managedInstanceGroupUrls));
        }

        /**
         * @param management Node management configuration, wherein auto-repair and auto-upgrade is configured.
         * 
         * @return builder
         * 
         */
        public Builder management(@Nullable Output<ClusterNodePoolManagementArgs> management) {
            $.management = management;
            return this;
        }

        /**
         * @param management Node management configuration, wherein auto-repair and auto-upgrade is configured.
         * 
         * @return builder
         * 
         */
        public Builder management(ClusterNodePoolManagementArgs management) {
            return management(Output.of(management));
        }

        /**
         * @param maxPodsPerNode The maximum number of pods per node in this node pool. Note that this does not work on node pools which are &#34;route-based&#34; - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
         * 
         * @return builder
         * 
         */
        public Builder maxPodsPerNode(@Nullable Output<Integer> maxPodsPerNode) {
            $.maxPodsPerNode = maxPodsPerNode;
            return this;
        }

        /**
         * @param maxPodsPerNode The maximum number of pods per node in this node pool. Note that this does not work on node pools which are &#34;route-based&#34; - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
         * 
         * @return builder
         * 
         */
        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            return maxPodsPerNode(Output.of(maxPodsPerNode));
        }

        /**
         * @param name The name of the cluster, unique within the project and
         * location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cluster, unique within the project and
         * location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namePrefix Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param networkConfig Configuration for
         * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(@Nullable Output<ClusterNodePoolNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig Configuration for
         * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(ClusterNodePoolNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param nodeConfig Parameters used in creating the default node pool.
         * Generally, this field should not be used at the same time as a
         * `gcp.container.NodePool` or a `node_pool` block; this configuration
         * manages the default node pool, which isn&#39;t recommended to be used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(@Nullable Output<ClusterNodePoolNodeConfigArgs> nodeConfig) {
            $.nodeConfig = nodeConfig;
            return this;
        }

        /**
         * @param nodeConfig Parameters used in creating the default node pool.
         * Generally, this field should not be used at the same time as a
         * `gcp.container.NodePool` or a `node_pool` block; this configuration
         * manages the default node pool, which isn&#39;t recommended to be used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(ClusterNodePoolNodeConfigArgs nodeConfig) {
            return nodeConfig(Output.of(nodeConfig));
        }

        /**
         * @param nodeCount The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodeLocations The list of zones in which the cluster&#39;s nodes
         * are located. Nodes must be in the region of their regional cluster or in the
         * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
         * a zonal cluster, omit the cluster&#39;s zone.
         * 
         * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
         * defined; in a multi-zonal cluster, the cluster master is only present in a
         * single zone while nodes are present in each of the primary zone and the node
         * locations. In contrast, in a regional cluster, cluster master nodes are present
         * in multiple zones in the region. For that reason, regional clusters should be
         * preferred.
         * 
         * @return builder
         * 
         */
        public Builder nodeLocations(@Nullable Output<List<String>> nodeLocations) {
            $.nodeLocations = nodeLocations;
            return this;
        }

        /**
         * @param nodeLocations The list of zones in which the cluster&#39;s nodes
         * are located. Nodes must be in the region of their regional cluster or in the
         * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
         * a zonal cluster, omit the cluster&#39;s zone.
         * 
         * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
         * defined; in a multi-zonal cluster, the cluster master is only present in a
         * single zone while nodes are present in each of the primary zone and the node
         * locations. In contrast, in a regional cluster, cluster master nodes are present
         * in multiple zones in the region. For that reason, regional clusters should be
         * preferred.
         * 
         * @return builder
         * 
         */
        public Builder nodeLocations(List<String> nodeLocations) {
            return nodeLocations(Output.of(nodeLocations));
        }

        /**
         * @param nodeLocations The list of zones in which the cluster&#39;s nodes
         * are located. Nodes must be in the region of their regional cluster or in the
         * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
         * a zonal cluster, omit the cluster&#39;s zone.
         * 
         * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
         * defined; in a multi-zonal cluster, the cluster master is only present in a
         * single zone while nodes are present in each of the primary zone and the node
         * locations. In contrast, in a regional cluster, cluster master nodes are present
         * in multiple zones in the region. For that reason, regional clusters should be
         * preferred.
         * 
         * @return builder
         * 
         */
        public Builder nodeLocations(String... nodeLocations) {
            return nodeLocations(List.of(nodeLocations));
        }

        /**
         * @param placementPolicy Specifies the node placement policy
         * 
         * @return builder
         * 
         */
        public Builder placementPolicy(@Nullable Output<ClusterNodePoolPlacementPolicyArgs> placementPolicy) {
            $.placementPolicy = placementPolicy;
            return this;
        }

        /**
         * @param placementPolicy Specifies the node placement policy
         * 
         * @return builder
         * 
         */
        public Builder placementPolicy(ClusterNodePoolPlacementPolicyArgs placementPolicy) {
            return placementPolicy(Output.of(placementPolicy));
        }

        /**
         * @param queuedProvisioning Specifies the configuration of queued provisioning
         * 
         * @return builder
         * 
         */
        public Builder queuedProvisioning(@Nullable Output<ClusterNodePoolQueuedProvisioningArgs> queuedProvisioning) {
            $.queuedProvisioning = queuedProvisioning;
            return this;
        }

        /**
         * @param queuedProvisioning Specifies the configuration of queued provisioning
         * 
         * @return builder
         * 
         */
        public Builder queuedProvisioning(ClusterNodePoolQueuedProvisioningArgs queuedProvisioning) {
            return queuedProvisioning(Output.of(queuedProvisioning));
        }

        /**
         * @param upgradeSettings Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
         * 
         * @return builder
         * 
         */
        public Builder upgradeSettings(@Nullable Output<ClusterNodePoolUpgradeSettingsArgs> upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        /**
         * @param upgradeSettings Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
         * 
         * @return builder
         * 
         */
        public Builder upgradeSettings(ClusterNodePoolUpgradeSettingsArgs upgradeSettings) {
            return upgradeSettings(Output.of(upgradeSettings));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ClusterNodePoolArgs build() {
            return $;
        }
    }

}
