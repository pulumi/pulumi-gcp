// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.ClusterNodePoolAutoscalingArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolManagementArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolNetworkConfigArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolNodeConfigArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolPlacementPolicyArgs;
import com.pulumi.gcp.container.inputs.ClusterNodePoolUpgradeSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodePoolArgs Empty = new ClusterNodePoolArgs();

    @Import(name="autoscaling")
    private @Nullable Output<ClusterNodePoolAutoscalingArgs> autoscaling;

    public Optional<Output<ClusterNodePoolAutoscalingArgs>> autoscaling() {
        return Optional.ofNullable(this.autoscaling);
    }

    /**
     * The number of nodes to create in this
     * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
     * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
     * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
     * set this to a value of at least `1`, alongside setting
     * `remove_default_node_pool` to `true`.
     * 
     */
    @Import(name="initialNodeCount")
    private @Nullable Output<Integer> initialNodeCount;

    /**
     * @return The number of nodes to create in this
     * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
     * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
     * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
     * set this to a value of at least `1`, alongside setting
     * `remove_default_node_pool` to `true`.
     * 
     */
    public Optional<Output<Integer>> initialNodeCount() {
        return Optional.ofNullable(this.initialNodeCount);
    }

    @Import(name="instanceGroupUrls")
    private @Nullable Output<List<String>> instanceGroupUrls;

    public Optional<Output<List<String>>> instanceGroupUrls() {
        return Optional.ofNullable(this.instanceGroupUrls);
    }

    @Import(name="managedInstanceGroupUrls")
    private @Nullable Output<List<String>> managedInstanceGroupUrls;

    public Optional<Output<List<String>>> managedInstanceGroupUrls() {
        return Optional.ofNullable(this.managedInstanceGroupUrls);
    }

    /**
     * NodeManagement configuration for this NodePool. Structure is documented below.
     * 
     */
    @Import(name="management")
    private @Nullable Output<ClusterNodePoolManagementArgs> management;

    /**
     * @return NodeManagement configuration for this NodePool. Structure is documented below.
     * 
     */
    public Optional<Output<ClusterNodePoolManagementArgs>> management() {
        return Optional.ofNullable(this.management);
    }

    @Import(name="maxPodsPerNode")
    private @Nullable Output<Integer> maxPodsPerNode;

    public Optional<Output<Integer>> maxPodsPerNode() {
        return Optional.ofNullable(this.maxPodsPerNode);
    }

    /**
     * The name of the cluster, unique within the project and
     * location.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the cluster, unique within the project and
     * location.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * Configuration for
     * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
     * 
     */
    @Import(name="networkConfig")
    private @Nullable Output<ClusterNodePoolNetworkConfigArgs> networkConfig;

    /**
     * @return Configuration for
     * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
     * 
     */
    public Optional<Output<ClusterNodePoolNetworkConfigArgs>> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }

    /**
     * Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `node_pool` block; this configuration
     * manages the default node pool, which isn&#39;t recommended to be used.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeConfig")
    private @Nullable Output<ClusterNodePoolNodeConfigArgs> nodeConfig;

    /**
     * @return Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `node_pool` block; this configuration
     * manages the default node pool, which isn&#39;t recommended to be used.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClusterNodePoolNodeConfigArgs>> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }

    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * The list of zones in which the cluster&#39;s nodes
     * are located. Nodes must be in the region of their regional cluster or in the
     * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
     * a zonal cluster, omit the cluster&#39;s zone.
     * 
     */
    @Import(name="nodeLocations")
    private @Nullable Output<List<String>> nodeLocations;

    /**
     * @return The list of zones in which the cluster&#39;s nodes
     * are located. Nodes must be in the region of their regional cluster or in the
     * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
     * a zonal cluster, omit the cluster&#39;s zone.
     * 
     */
    public Optional<Output<List<String>>> nodeLocations() {
        return Optional.ofNullable(this.nodeLocations);
    }

    @Import(name="placementPolicy")
    private @Nullable Output<ClusterNodePoolPlacementPolicyArgs> placementPolicy;

    public Optional<Output<ClusterNodePoolPlacementPolicyArgs>> placementPolicy() {
        return Optional.ofNullable(this.placementPolicy);
    }

    /**
     * Specifies the upgrade settings for NAP created node pools. Structure is documented below.
     * 
     */
    @Import(name="upgradeSettings")
    private @Nullable Output<ClusterNodePoolUpgradeSettingsArgs> upgradeSettings;

    /**
     * @return Specifies the upgrade settings for NAP created node pools. Structure is documented below.
     * 
     */
    public Optional<Output<ClusterNodePoolUpgradeSettingsArgs>> upgradeSettings() {
        return Optional.ofNullable(this.upgradeSettings);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ClusterNodePoolArgs() {}

    private ClusterNodePoolArgs(ClusterNodePoolArgs $) {
        this.autoscaling = $.autoscaling;
        this.initialNodeCount = $.initialNodeCount;
        this.instanceGroupUrls = $.instanceGroupUrls;
        this.managedInstanceGroupUrls = $.managedInstanceGroupUrls;
        this.management = $.management;
        this.maxPodsPerNode = $.maxPodsPerNode;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.networkConfig = $.networkConfig;
        this.nodeConfig = $.nodeConfig;
        this.nodeCount = $.nodeCount;
        this.nodeLocations = $.nodeLocations;
        this.placementPolicy = $.placementPolicy;
        this.upgradeSettings = $.upgradeSettings;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodePoolArgs $;

        public Builder() {
            $ = new ClusterNodePoolArgs();
        }

        public Builder(ClusterNodePoolArgs defaults) {
            $ = new ClusterNodePoolArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoscaling(@Nullable Output<ClusterNodePoolAutoscalingArgs> autoscaling) {
            $.autoscaling = autoscaling;
            return this;
        }

        public Builder autoscaling(ClusterNodePoolAutoscalingArgs autoscaling) {
            return autoscaling(Output.of(autoscaling));
        }

        /**
         * @param initialNodeCount The number of nodes to create in this
         * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
         * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
         * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
         * set this to a value of at least `1`, alongside setting
         * `remove_default_node_pool` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeCount(@Nullable Output<Integer> initialNodeCount) {
            $.initialNodeCount = initialNodeCount;
            return this;
        }

        /**
         * @param initialNodeCount The number of nodes to create in this
         * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
         * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
         * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
         * set this to a value of at least `1`, alongside setting
         * `remove_default_node_pool` to `true`.
         * 
         * @return builder
         * 
         */
        public Builder initialNodeCount(Integer initialNodeCount) {
            return initialNodeCount(Output.of(initialNodeCount));
        }

        public Builder instanceGroupUrls(@Nullable Output<List<String>> instanceGroupUrls) {
            $.instanceGroupUrls = instanceGroupUrls;
            return this;
        }

        public Builder instanceGroupUrls(List<String> instanceGroupUrls) {
            return instanceGroupUrls(Output.of(instanceGroupUrls));
        }

        public Builder instanceGroupUrls(String... instanceGroupUrls) {
            return instanceGroupUrls(List.of(instanceGroupUrls));
        }

        public Builder managedInstanceGroupUrls(@Nullable Output<List<String>> managedInstanceGroupUrls) {
            $.managedInstanceGroupUrls = managedInstanceGroupUrls;
            return this;
        }

        public Builder managedInstanceGroupUrls(List<String> managedInstanceGroupUrls) {
            return managedInstanceGroupUrls(Output.of(managedInstanceGroupUrls));
        }

        public Builder managedInstanceGroupUrls(String... managedInstanceGroupUrls) {
            return managedInstanceGroupUrls(List.of(managedInstanceGroupUrls));
        }

        /**
         * @param management NodeManagement configuration for this NodePool. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder management(@Nullable Output<ClusterNodePoolManagementArgs> management) {
            $.management = management;
            return this;
        }

        /**
         * @param management NodeManagement configuration for this NodePool. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder management(ClusterNodePoolManagementArgs management) {
            return management(Output.of(management));
        }

        public Builder maxPodsPerNode(@Nullable Output<Integer> maxPodsPerNode) {
            $.maxPodsPerNode = maxPodsPerNode;
            return this;
        }

        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            return maxPodsPerNode(Output.of(maxPodsPerNode));
        }

        /**
         * @param name The name of the cluster, unique within the project and
         * location.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the cluster, unique within the project and
         * location.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param networkConfig Configuration for
         * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(@Nullable Output<ClusterNodePoolNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig Configuration for
         * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(ClusterNodePoolNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param nodeConfig Parameters used in creating the default node pool.
         * Generally, this field should not be used at the same time as a
         * `gcp.container.NodePool` or a `node_pool` block; this configuration
         * manages the default node pool, which isn&#39;t recommended to be used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(@Nullable Output<ClusterNodePoolNodeConfigArgs> nodeConfig) {
            $.nodeConfig = nodeConfig;
            return this;
        }

        /**
         * @param nodeConfig Parameters used in creating the default node pool.
         * Generally, this field should not be used at the same time as a
         * `gcp.container.NodePool` or a `node_pool` block; this configuration
         * manages the default node pool, which isn&#39;t recommended to be used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(ClusterNodePoolNodeConfigArgs nodeConfig) {
            return nodeConfig(Output.of(nodeConfig));
        }

        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodeLocations The list of zones in which the cluster&#39;s nodes
         * are located. Nodes must be in the region of their regional cluster or in the
         * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
         * a zonal cluster, omit the cluster&#39;s zone.
         * 
         * @return builder
         * 
         */
        public Builder nodeLocations(@Nullable Output<List<String>> nodeLocations) {
            $.nodeLocations = nodeLocations;
            return this;
        }

        /**
         * @param nodeLocations The list of zones in which the cluster&#39;s nodes
         * are located. Nodes must be in the region of their regional cluster or in the
         * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
         * a zonal cluster, omit the cluster&#39;s zone.
         * 
         * @return builder
         * 
         */
        public Builder nodeLocations(List<String> nodeLocations) {
            return nodeLocations(Output.of(nodeLocations));
        }

        /**
         * @param nodeLocations The list of zones in which the cluster&#39;s nodes
         * are located. Nodes must be in the region of their regional cluster or in the
         * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
         * a zonal cluster, omit the cluster&#39;s zone.
         * 
         * @return builder
         * 
         */
        public Builder nodeLocations(String... nodeLocations) {
            return nodeLocations(List.of(nodeLocations));
        }

        public Builder placementPolicy(@Nullable Output<ClusterNodePoolPlacementPolicyArgs> placementPolicy) {
            $.placementPolicy = placementPolicy;
            return this;
        }

        public Builder placementPolicy(ClusterNodePoolPlacementPolicyArgs placementPolicy) {
            return placementPolicy(Output.of(placementPolicy));
        }

        /**
         * @param upgradeSettings Specifies the upgrade settings for NAP created node pools. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder upgradeSettings(@Nullable Output<ClusterNodePoolUpgradeSettingsArgs> upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        /**
         * @param upgradeSettings Specifies the upgrade settings for NAP created node pools. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder upgradeSettings(ClusterNodePoolUpgradeSettingsArgs upgradeSettings) {
            return upgradeSettings(Output.of(upgradeSettings));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ClusterNodePoolArgs build() {
            return $;
        }
    }

}
