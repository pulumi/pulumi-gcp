// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.managedkafka.ConnectorArgs;
import com.pulumi.gcp.managedkafka.inputs.ConnectorState;
import com.pulumi.gcp.managedkafka.outputs.ConnectorTaskRestartPolicy;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Managedkafka Connector Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.managedkafka.Cluster;
 * import com.pulumi.gcp.managedkafka.ClusterArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ClusterCapacityConfigArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ClusterGcpConfigArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ClusterGcpConfigAccessConfigArgs;
 * import com.pulumi.gcp.managedkafka.ConnectCluster;
 * import com.pulumi.gcp.managedkafka.ConnectClusterArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ConnectClusterCapacityConfigArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ConnectClusterGcpConfigArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ConnectClusterGcpConfigAccessConfigArgs;
 * import com.pulumi.gcp.managedkafka.Connector;
 * import com.pulumi.gcp.managedkafka.ConnectorArgs;
 * import com.pulumi.gcp.managedkafka.inputs.ConnectorTaskRestartPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mkcNetwork = new Network("mkcNetwork", NetworkArgs.builder()
 *             .name("my-network-0")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var mkcSubnet = new Subnetwork("mkcSubnet", SubnetworkArgs.builder()
 *             .name("my-subnetwork-0")
 *             .ipCidrRange("10.4.0.0/16")
 *             .region("us-central1")
 *             .network(mkcNetwork.id())
 *             .build());
 * 
 *         var mkcAdditionalSubnet = new Subnetwork("mkcAdditionalSubnet", SubnetworkArgs.builder()
 *             .name("my-additional-subnetwork-0")
 *             .ipCidrRange("10.5.0.0/16")
 *             .region("us-central1")
 *             .network(mkcNetwork.id())
 *             .build());
 * 
 *         var cpsTopic = new com.pulumi.gcp.pubsub.Topic("cpsTopic", com.pulumi.gcp.pubsub.TopicArgs.builder()
 *             .name("my-cps-topic")
 *             .messageRetentionDuration("86600s")
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var gmkCluster = new Cluster("gmkCluster", ClusterArgs.builder()
 *             .clusterId("my-cluster")
 *             .location("us-central1")
 *             .capacityConfig(ClusterCapacityConfigArgs.builder()
 *                 .vcpuCount("3")
 *                 .memoryBytes("3221225472")
 *                 .build())
 *             .gcpConfig(ClusterGcpConfigArgs.builder()
 *                 .accessConfig(ClusterGcpConfigAccessConfigArgs.builder()
 *                     .networkConfigs(ClusterGcpConfigAccessConfigNetworkConfigArgs.builder()
 *                         .subnet(mkcSubnet.id().applyValue(_id -> String.format("projects/%s/regions/us-central1/subnetworks/%s", project.projectId(),_id)))
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var gmkTopic = new com.pulumi.gcp.managedkafka.Topic("gmkTopic", com.pulumi.gcp.managedkafka.TopicArgs.builder()
 *             .topicId("my-topic")
 *             .cluster(gmkCluster.clusterId())
 *             .location("us-central1")
 *             .partitionCount(2)
 *             .replicationFactor(3)
 *             .build());
 * 
 *         var mkcCluster = new ConnectCluster("mkcCluster", ConnectClusterArgs.builder()
 *             .connectClusterId("my-connect-cluster")
 *             .kafkaCluster(gmkCluster.clusterId().applyValue(_clusterId -> String.format("projects/%s/locations/us-central1/clusters/%s", project.projectId(),_clusterId)))
 *             .location("us-central1")
 *             .capacityConfig(ConnectClusterCapacityConfigArgs.builder()
 *                 .vcpuCount("12")
 *                 .memoryBytes("21474836480")
 *                 .build())
 *             .gcpConfig(ConnectClusterGcpConfigArgs.builder()
 *                 .accessConfig(ConnectClusterGcpConfigAccessConfigArgs.builder()
 *                     .networkConfigs(ConnectClusterGcpConfigAccessConfigNetworkConfigArgs.builder()
 *                         .primarySubnet(mkcSubnet.id().applyValue(_id -> String.format("projects/%s/regions/us-central1/subnetworks/%s", project.projectId(),_id)))
 *                         .additionalSubnets(mkcAdditionalSubnet.id())
 *                         .dnsDomainNames(gmkCluster.clusterId().applyValue(_clusterId -> String.format("%s.us-central1.managedkafka-staging.%s.cloud-staging.goog", _clusterId,project.projectId())))
 *                         .build())
 *                     .build())
 *                 .build())
 *             .labels(Map.of("key", "value"))
 *             .build());
 * 
 *         var example = new Connector("example", ConnectorArgs.builder()
 *             .connectorId("my-connector")
 *             .connectCluster(mkcCluster.connectClusterId())
 *             .location("us-central1")
 *             .configs(Map.ofEntries(
 *                 Map.entry("connector.class", "com.google.pubsub.kafka.sink.CloudPubSubSinkConnector"),
 *                 Map.entry("name", "my-connector"),
 *                 Map.entry("tasks.max", "1"),
 *                 Map.entry("topics", gmkTopic.topicId()),
 *                 Map.entry("cps.topic", cpsTopic.name()),
 *                 Map.entry("cps.project", project.projectId()),
 *                 Map.entry("value.converter", "org.apache.kafka.connect.storage.StringConverter"),
 *                 Map.entry("key.converter", "org.apache.kafka.connect.storage.StringConverter")
 *             ))
 *             .taskRestartPolicy(ConnectorTaskRestartPolicyArgs.builder()
 *                 .minimumBackoff("60s")
 *                 .maximumBackoff("1800s")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Connector can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}`
 * 
 * * `{{project}}/{{location}}/{{connect_cluster}}/{{connector_id}}`
 * 
 * * `{{location}}/{{connect_cluster}}/{{connector_id}}`
 * 
 * When using the `pulumi import` command, Connector can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:managedkafka/connector:Connector default projects/{{project}}/locations/{{location}}/connectClusters/{{connect_cluster}}/connectors/{{connector_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:managedkafka/connector:Connector default {{project}}/{{location}}/{{connect_cluster}}/{{connector_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:managedkafka/connector:Connector default {{location}}/{{connect_cluster}}/{{connector_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:managedkafka/connector:Connector")
public class Connector extends com.pulumi.resources.CustomResource {
    /**
     * Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
     * 
     */
    @Export(name="configs", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> configs;

    /**
     * @return Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
     * 
     */
    public Output<Optional<Map<String,String>>> configs() {
        return Codegen.optional(this.configs);
    }
    /**
     * The connect cluster name.
     * 
     */
    @Export(name="connectCluster", refs={String.class}, tree="[0]")
    private Output<String> connectCluster;

    /**
     * @return The connect cluster name.
     * 
     */
    public Output<String> connectCluster() {
        return this.connectCluster;
    }
    /**
     * The ID to use for the connector, which will become the final component of the connector&#39;s name. This value is structured like: `my-connector-id`.
     * 
     * ***
     * 
     */
    @Export(name="connectorId", refs={String.class}, tree="[0]")
    private Output<String> connectorId;

    /**
     * @return The ID to use for the connector, which will become the final component of the connector&#39;s name. This value is structured like: `my-connector-id`.
     * 
     * ***
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }
    /**
     * ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the connector. The `connector` segment is used when connecting directly to the connect cluster. Structured like: `projects/PROJECT_ID/locations/LOCATION/connectClusters/CONNECT_CLUSTER/connectors/CONNECTOR_ID`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the connect. Possible values: `STATE_UNSPECIFIED`, `UNASSIGNED`, `RUNNING`, `PAUSED`, `FAILED`, `RESTARTING`, and `STOPPED`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won&#39;t be restarted.
     * Structure is documented below.
     * 
     */
    @Export(name="taskRestartPolicy", refs={ConnectorTaskRestartPolicy.class}, tree="[0]")
    private Output</* @Nullable */ ConnectorTaskRestartPolicy> taskRestartPolicy;

    /**
     * @return A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won&#39;t be restarted.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectorTaskRestartPolicy>> taskRestartPolicy() {
        return Codegen.optional(this.taskRestartPolicy);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connector(java.lang.String name) {
        this(name, ConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connector(java.lang.String name, ConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connector(java.lang.String name, ConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:managedkafka/connector:Connector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Connector(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:managedkafka/connector:Connector", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectorArgs makeArgs(ConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connector get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connector(name, id, state, options);
    }
}
