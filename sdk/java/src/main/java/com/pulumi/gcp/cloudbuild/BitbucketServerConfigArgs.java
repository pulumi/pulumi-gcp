// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudbuild.inputs.BitbucketServerConfigConnectedRepositoryArgs;
import com.pulumi.gcp.cloudbuild.inputs.BitbucketServerConfigSecretsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BitbucketServerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BitbucketServerConfigArgs Empty = new BitbucketServerConfigArgs();

    /**
     * Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed.
     * Changing this field will result in deleting/ recreating the resource.
     * 
     */
    @Import(name="apiKey", required=true)
    private Output<String> apiKey;

    /**
     * @return Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed.
     * Changing this field will result in deleting/ recreating the resource.
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }

    /**
     * The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig&#39;s resource name.
     * 
     */
    @Import(name="configId", required=true)
    private Output<String> configId;

    /**
     * @return The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig&#39;s resource name.
     * 
     */
    public Output<String> configId() {
        return this.configId;
    }

    /**
     * Connected Bitbucket Server repositories for this config.
     * Structure is documented below.
     * 
     */
    @Import(name="connectedRepositories")
    private @Nullable Output<List<BitbucketServerConfigConnectedRepositoryArgs>> connectedRepositories;

    /**
     * @return Connected Bitbucket Server repositories for this config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BitbucketServerConfigConnectedRepositoryArgs>>> connectedRepositories() {
        return Optional.ofNullable(this.connectedRepositories);
    }

    /**
     * Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed.
     * If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    @Import(name="hostUri", required=true)
    private Output<String> hostUri;

    /**
     * @return Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed.
     * If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    public Output<String> hostUri() {
        return this.hostUri;
    }

    /**
     * The location of this bitbucket server config.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of this bitbucket server config.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection.
     * This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty,
     * no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format
     * projects/{project}/global/networks/{network}, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    @Import(name="peeredNetwork")
    private @Nullable Output<String> peeredNetwork;

    /**
     * @return The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection.
     * This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty,
     * no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format
     * projects/{project}/global/networks/{network}, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    public Optional<Output<String>> peeredNetwork() {
        return Optional.ofNullable(this.peeredNetwork);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Secret Manager secrets needed by the config.
     * Structure is documented below.
     * 
     */
    @Import(name="secrets", required=true)
    private Output<BitbucketServerConfigSecretsArgs> secrets;

    /**
     * @return Secret Manager secrets needed by the config.
     * Structure is documented below.
     * 
     */
    public Output<BitbucketServerConfigSecretsArgs> secrets() {
        return this.secrets;
    }

    /**
     * SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     * 
     */
    @Import(name="sslCa")
    private @Nullable Output<String> sslCa;

    /**
     * @return SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     * 
     */
    public Optional<Output<String>> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }

    /**
     * Username of the account Cloud Build will use on Bitbucket Server.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username of the account Cloud Build will use on Bitbucket Server.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private BitbucketServerConfigArgs() {}

    private BitbucketServerConfigArgs(BitbucketServerConfigArgs $) {
        this.apiKey = $.apiKey;
        this.configId = $.configId;
        this.connectedRepositories = $.connectedRepositories;
        this.hostUri = $.hostUri;
        this.location = $.location;
        this.peeredNetwork = $.peeredNetwork;
        this.project = $.project;
        this.secrets = $.secrets;
        this.sslCa = $.sslCa;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BitbucketServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BitbucketServerConfigArgs $;

        public Builder() {
            $ = new BitbucketServerConfigArgs();
        }

        public Builder(BitbucketServerConfigArgs defaults) {
            $ = new BitbucketServerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed.
         * Changing this field will result in deleting/ recreating the resource.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed.
         * Changing this field will result in deleting/ recreating the resource.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param configId The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig&#39;s resource name.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<String> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig&#39;s resource name.
         * 
         * @return builder
         * 
         */
        public Builder configId(String configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param connectedRepositories Connected Bitbucket Server repositories for this config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectedRepositories(@Nullable Output<List<BitbucketServerConfigConnectedRepositoryArgs>> connectedRepositories) {
            $.connectedRepositories = connectedRepositories;
            return this;
        }

        /**
         * @param connectedRepositories Connected Bitbucket Server repositories for this config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectedRepositories(List<BitbucketServerConfigConnectedRepositoryArgs> connectedRepositories) {
            return connectedRepositories(Output.of(connectedRepositories));
        }

        /**
         * @param connectedRepositories Connected Bitbucket Server repositories for this config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectedRepositories(BitbucketServerConfigConnectedRepositoryArgs... connectedRepositories) {
            return connectedRepositories(List.of(connectedRepositories));
        }

        /**
         * @param hostUri Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed.
         * If you need to change it, please create another BitbucketServerConfig.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(Output<String> hostUri) {
            $.hostUri = hostUri;
            return this;
        }

        /**
         * @param hostUri Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed.
         * If you need to change it, please create another BitbucketServerConfig.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(String hostUri) {
            return hostUri(Output.of(hostUri));
        }

        /**
         * @param location The location of this bitbucket server config.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of this bitbucket server config.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param peeredNetwork The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection.
         * This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty,
         * no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format
         * projects/{project}/global/networks/{network}, where {project} is a project number or id and {network} is the name of a VPC network in the project.
         * 
         * @return builder
         * 
         */
        public Builder peeredNetwork(@Nullable Output<String> peeredNetwork) {
            $.peeredNetwork = peeredNetwork;
            return this;
        }

        /**
         * @param peeredNetwork The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection.
         * This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty,
         * no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format
         * projects/{project}/global/networks/{network}, where {project} is a project number or id and {network} is the name of a VPC network in the project.
         * 
         * @return builder
         * 
         */
        public Builder peeredNetwork(String peeredNetwork) {
            return peeredNetwork(Output.of(peeredNetwork));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param secrets Secret Manager secrets needed by the config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secrets(Output<BitbucketServerConfigSecretsArgs> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets Secret Manager secrets needed by the config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secrets(BitbucketServerConfigSecretsArgs secrets) {
            return secrets(Output.of(secrets));
        }

        /**
         * @param sslCa SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(@Nullable Output<String> sslCa) {
            $.sslCa = sslCa;
            return this;
        }

        /**
         * @param sslCa SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
         * 
         * @return builder
         * 
         */
        public Builder sslCa(String sslCa) {
            return sslCa(Output.of(sslCa));
        }

        /**
         * @param username Username of the account Cloud Build will use on Bitbucket Server.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username of the account Cloud Build will use on Bitbucket Server.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public BitbucketServerConfigArgs build() {
            $.apiKey = Objects.requireNonNull($.apiKey, "expected parameter 'apiKey' to be non-null");
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            $.hostUri = Objects.requireNonNull($.hostUri, "expected parameter 'hostUri' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.secrets = Objects.requireNonNull($.secrets, "expected parameter 'secrets' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
