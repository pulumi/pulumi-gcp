// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionHealthCheckHttp2HealthCheck {
    /**
     * @return The value of the host header in the HTTP health check request.
     * If left empty (default value), the public IP on behalf of which this health
     * check is performed will be used.
     * (Optional)
     * The value of the host header in the HTTPS health check request.
     * If left empty (default value), the public IP on behalf of which this health
     * check is performed will be used.
     * (Optional)
     * The value of the host header in the HTTP2 health check request.
     * If left empty (default value), the public IP on behalf of which this health
     * check is performed will be used.
     * 
     */
    private @Nullable String host;
    /**
     * @return The TCP port number for the HTTP health check request.
     * The default value is 80.
     * (Optional)
     * The TCP port number for the HTTPS health check request.
     * The default value is 443.
     * (Optional)
     * The TCP port number for the TCP health check request.
     * The default value is 80.
     * (Optional)
     * The TCP port number for the SSL health check request.
     * The default value is 443.
     * (Optional)
     * The TCP port number for the HTTP2 health check request.
     * The default value is 443.
     * (Optional)
     * The port number for the health check request.
     * Must be specified if portName and portSpecification are not set
     * or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * 
     */
    private @Nullable String portName;
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * 
     */
    private @Nullable String portSpecification;
    /**
     * @return Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * 
     */
    private @Nullable String proxyHeader;
    /**
     * @return The request path of the HTTP health check request.
     * The default value is /.
     * (Optional)
     * The request path of the HTTPS health check request.
     * The default value is /.
     * (Optional)
     * The request path of the HTTP2 health check request.
     * The default value is /.
     * 
     */
    private @Nullable String requestPath;
    /**
     * @return The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * 
     */
    private @Nullable String response;

    private RegionHealthCheckHttp2HealthCheck() {}
    /**
     * @return The value of the host header in the HTTP health check request.
     * If left empty (default value), the public IP on behalf of which this health
     * check is performed will be used.
     * (Optional)
     * The value of the host header in the HTTPS health check request.
     * If left empty (default value), the public IP on behalf of which this health
     * check is performed will be used.
     * (Optional)
     * The value of the host header in the HTTP2 health check request.
     * If left empty (default value), the public IP on behalf of which this health
     * check is performed will be used.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return The TCP port number for the HTTP health check request.
     * The default value is 80.
     * (Optional)
     * The TCP port number for the HTTPS health check request.
     * The default value is 443.
     * (Optional)
     * The TCP port number for the TCP health check request.
     * The default value is 80.
     * (Optional)
     * The TCP port number for the SSL health check request.
     * The default value is 443.
     * (Optional)
     * The TCP port number for the HTTP2 health check request.
     * The default value is 443.
     * (Optional)
     * The port number for the health check request.
     * Must be specified if portName and portSpecification are not set
     * or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * (Optional)
     * Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * 
     */
    public Optional<String> portName() {
        return Optional.ofNullable(this.portName);
    }
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * (Optional)
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * 
     */
    public Optional<String> portSpecification() {
        return Optional.ofNullable(this.portSpecification);
    }
    /**
     * @return Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * (Optional)
     * Specifies the type of proxy header to append before sending data to the
     * backend.
     * Default value is `NONE`.
     * Possible values are `NONE` and `PROXY_V1`.
     * 
     */
    public Optional<String> proxyHeader() {
        return Optional.ofNullable(this.proxyHeader);
    }
    /**
     * @return The request path of the HTTP health check request.
     * The default value is /.
     * (Optional)
     * The request path of the HTTPS health check request.
     * The default value is /.
     * (Optional)
     * The request path of the HTTP2 health check request.
     * The default value is /.
     * 
     */
    public Optional<String> requestPath() {
        return Optional.ofNullable(this.requestPath);
    }
    /**
     * @return The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * (Optional)
     * The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * 
     */
    public Optional<String> response() {
        return Optional.ofNullable(this.response);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionHealthCheckHttp2HealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String host;
        private @Nullable Integer port;
        private @Nullable String portName;
        private @Nullable String portSpecification;
        private @Nullable String proxyHeader;
        private @Nullable String requestPath;
        private @Nullable String response;
        public Builder() {}
        public Builder(RegionHealthCheckHttp2HealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.port = defaults.port;
    	      this.portName = defaults.portName;
    	      this.portSpecification = defaults.portSpecification;
    	      this.proxyHeader = defaults.proxyHeader;
    	      this.requestPath = defaults.requestPath;
    	      this.response = defaults.response;
        }

        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portName(@Nullable String portName) {
            this.portName = portName;
            return this;
        }
        @CustomType.Setter
        public Builder portSpecification(@Nullable String portSpecification) {
            this.portSpecification = portSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder proxyHeader(@Nullable String proxyHeader) {
            this.proxyHeader = proxyHeader;
            return this;
        }
        @CustomType.Setter
        public Builder requestPath(@Nullable String requestPath) {
            this.requestPath = requestPath;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable String response) {
            this.response = response;
            return this;
        }
        public RegionHealthCheckHttp2HealthCheck build() {
            final var o = new RegionHealthCheckHttp2HealthCheck();
            o.host = host;
            o.port = port;
            o.portName = portName;
            o.portSpecification = portSpecification;
            o.proxyHeader = proxyHeader;
            o.requestPath = requestPath;
            o.response = response;
            return o;
        }
    }
}
