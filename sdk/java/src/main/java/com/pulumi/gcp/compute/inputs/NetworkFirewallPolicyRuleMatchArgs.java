// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.inputs.NetworkFirewallPolicyRuleMatchLayer4ConfigArgs;
import com.pulumi.gcp.compute.inputs.NetworkFirewallPolicyRuleMatchSrcSecureTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyRuleMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyRuleMatchArgs Empty = new NetworkFirewallPolicyRuleMatchArgs();

    /**
     * Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
     * 
     */
    @Import(name="destAddressGroups")
    private @Nullable Output<List<String>> destAddressGroups;

    /**
     * @return Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
     * 
     */
    public Optional<Output<List<String>>> destAddressGroups() {
        return Optional.ofNullable(this.destAddressGroups);
    }

    /**
     * Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
     * 
     */
    @Import(name="destFqdns")
    private @Nullable Output<List<String>> destFqdns;

    /**
     * @return Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
     * 
     */
    public Optional<Output<List<String>>> destFqdns() {
        return Optional.ofNullable(this.destFqdns);
    }

    /**
     * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
     * 
     */
    @Import(name="destIpRanges")
    private @Nullable Output<List<String>> destIpRanges;

    /**
     * @return CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
     * 
     */
    public Optional<Output<List<String>>> destIpRanges() {
        return Optional.ofNullable(this.destIpRanges);
    }

    /**
     * Network scope of the traffic destination.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    @Import(name="destNetworkScope")
    private @Nullable Output<String> destNetworkScope;

    /**
     * @return Network scope of the traffic destination.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    public Optional<Output<String>> destNetworkScope() {
        return Optional.ofNullable(this.destNetworkScope);
    }

    /**
     * Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of dest region codes allowed is 5000.
     * 
     */
    @Import(name="destRegionCodes")
    private @Nullable Output<List<String>> destRegionCodes;

    /**
     * @return Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of dest region codes allowed is 5000.
     * 
     */
    public Optional<Output<List<String>>> destRegionCodes() {
        return Optional.ofNullable(this.destRegionCodes);
    }

    /**
     * Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
     * 
     */
    @Import(name="destThreatIntelligences")
    private @Nullable Output<List<String>> destThreatIntelligences;

    /**
     * @return Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
     * 
     */
    public Optional<Output<List<String>>> destThreatIntelligences() {
        return Optional.ofNullable(this.destThreatIntelligences);
    }

    /**
     * Pairs of IP protocols and ports that the rule should match.
     * Structure is documented below.
     * 
     */
    @Import(name="layer4Configs", required=true)
    private Output<List<NetworkFirewallPolicyRuleMatchLayer4ConfigArgs>> layer4Configs;

    /**
     * @return Pairs of IP protocols and ports that the rule should match.
     * Structure is documented below.
     * 
     */
    public Output<List<NetworkFirewallPolicyRuleMatchLayer4ConfigArgs>> layer4Configs() {
        return this.layer4Configs;
    }

    /**
     * Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
     * 
     */
    @Import(name="srcAddressGroups")
    private @Nullable Output<List<String>> srcAddressGroups;

    /**
     * @return Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
     * 
     */
    public Optional<Output<List<String>>> srcAddressGroups() {
        return Optional.ofNullable(this.srcAddressGroups);
    }

    /**
     * Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
     * 
     */
    @Import(name="srcFqdns")
    private @Nullable Output<List<String>> srcFqdns;

    /**
     * @return Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
     * 
     */
    public Optional<Output<List<String>>> srcFqdns() {
        return Optional.ofNullable(this.srcFqdns);
    }

    /**
     * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
     * 
     */
    @Import(name="srcIpRanges")
    private @Nullable Output<List<String>> srcIpRanges;

    /**
     * @return CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
     * 
     */
    public Optional<Output<List<String>>> srcIpRanges() {
        return Optional.ofNullable(this.srcIpRanges);
    }

    /**
     * Network scope of the traffic source.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    @Import(name="srcNetworkScope")
    private @Nullable Output<String> srcNetworkScope;

    /**
     * @return Network scope of the traffic source.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    public Optional<Output<String>> srcNetworkScope() {
        return Optional.ofNullable(this.srcNetworkScope);
    }

    /**
     * Networks of the traffic source. It can be either a full or partial url.
     * 
     */
    @Import(name="srcNetworks")
    private @Nullable Output<List<String>> srcNetworks;

    /**
     * @return Networks of the traffic source. It can be either a full or partial url.
     * 
     */
    public Optional<Output<List<String>>> srcNetworks() {
        return Optional.ofNullable(this.srcNetworks);
    }

    /**
     * Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of source region codes allowed is 5000.
     * 
     */
    @Import(name="srcRegionCodes")
    private @Nullable Output<List<String>> srcRegionCodes;

    /**
     * @return Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of source region codes allowed is 5000.
     * 
     */
    public Optional<Output<List<String>>> srcRegionCodes() {
        return Optional.ofNullable(this.srcRegionCodes);
    }

    /**
     * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
     * Structure is documented below.
     * 
     */
    @Import(name="srcSecureTags")
    private @Nullable Output<List<NetworkFirewallPolicyRuleMatchSrcSecureTagArgs>> srcSecureTags;

    /**
     * @return List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<NetworkFirewallPolicyRuleMatchSrcSecureTagArgs>>> srcSecureTags() {
        return Optional.ofNullable(this.srcSecureTags);
    }

    /**
     * Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
     * 
     * &lt;a name=&#34;nested_match_layer4_configs&#34;&gt;&lt;/a&gt;The `layer4_configs` block supports:
     * 
     */
    @Import(name="srcThreatIntelligences")
    private @Nullable Output<List<String>> srcThreatIntelligences;

    /**
     * @return Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
     * 
     * &lt;a name=&#34;nested_match_layer4_configs&#34;&gt;&lt;/a&gt;The `layer4_configs` block supports:
     * 
     */
    public Optional<Output<List<String>>> srcThreatIntelligences() {
        return Optional.ofNullable(this.srcThreatIntelligences);
    }

    private NetworkFirewallPolicyRuleMatchArgs() {}

    private NetworkFirewallPolicyRuleMatchArgs(NetworkFirewallPolicyRuleMatchArgs $) {
        this.destAddressGroups = $.destAddressGroups;
        this.destFqdns = $.destFqdns;
        this.destIpRanges = $.destIpRanges;
        this.destNetworkScope = $.destNetworkScope;
        this.destRegionCodes = $.destRegionCodes;
        this.destThreatIntelligences = $.destThreatIntelligences;
        this.layer4Configs = $.layer4Configs;
        this.srcAddressGroups = $.srcAddressGroups;
        this.srcFqdns = $.srcFqdns;
        this.srcIpRanges = $.srcIpRanges;
        this.srcNetworkScope = $.srcNetworkScope;
        this.srcNetworks = $.srcNetworks;
        this.srcRegionCodes = $.srcRegionCodes;
        this.srcSecureTags = $.srcSecureTags;
        this.srcThreatIntelligences = $.srcThreatIntelligences;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyRuleMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyRuleMatchArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicyRuleMatchArgs();
        }

        public Builder(NetworkFirewallPolicyRuleMatchArgs defaults) {
            $ = new NetworkFirewallPolicyRuleMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destAddressGroups Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
         * 
         * @return builder
         * 
         */
        public Builder destAddressGroups(@Nullable Output<List<String>> destAddressGroups) {
            $.destAddressGroups = destAddressGroups;
            return this;
        }

        /**
         * @param destAddressGroups Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
         * 
         * @return builder
         * 
         */
        public Builder destAddressGroups(List<String> destAddressGroups) {
            return destAddressGroups(Output.of(destAddressGroups));
        }

        /**
         * @param destAddressGroups Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
         * 
         * @return builder
         * 
         */
        public Builder destAddressGroups(String... destAddressGroups) {
            return destAddressGroups(List.of(destAddressGroups));
        }

        /**
         * @param destFqdns Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
         * 
         * @return builder
         * 
         */
        public Builder destFqdns(@Nullable Output<List<String>> destFqdns) {
            $.destFqdns = destFqdns;
            return this;
        }

        /**
         * @param destFqdns Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
         * 
         * @return builder
         * 
         */
        public Builder destFqdns(List<String> destFqdns) {
            return destFqdns(Output.of(destFqdns));
        }

        /**
         * @param destFqdns Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
         * 
         * @return builder
         * 
         */
        public Builder destFqdns(String... destFqdns) {
            return destFqdns(List.of(destFqdns));
        }

        /**
         * @param destIpRanges CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder destIpRanges(@Nullable Output<List<String>> destIpRanges) {
            $.destIpRanges = destIpRanges;
            return this;
        }

        /**
         * @param destIpRanges CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder destIpRanges(List<String> destIpRanges) {
            return destIpRanges(Output.of(destIpRanges));
        }

        /**
         * @param destIpRanges CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder destIpRanges(String... destIpRanges) {
            return destIpRanges(List.of(destIpRanges));
        }

        /**
         * @param destNetworkScope Network scope of the traffic destination.
         * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
         * 
         * @return builder
         * 
         */
        public Builder destNetworkScope(@Nullable Output<String> destNetworkScope) {
            $.destNetworkScope = destNetworkScope;
            return this;
        }

        /**
         * @param destNetworkScope Network scope of the traffic destination.
         * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
         * 
         * @return builder
         * 
         */
        public Builder destNetworkScope(String destNetworkScope) {
            return destNetworkScope(Output.of(destNetworkScope));
        }

        /**
         * @param destRegionCodes Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of dest region codes allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder destRegionCodes(@Nullable Output<List<String>> destRegionCodes) {
            $.destRegionCodes = destRegionCodes;
            return this;
        }

        /**
         * @param destRegionCodes Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of dest region codes allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder destRegionCodes(List<String> destRegionCodes) {
            return destRegionCodes(Output.of(destRegionCodes));
        }

        /**
         * @param destRegionCodes Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of dest region codes allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder destRegionCodes(String... destRegionCodes) {
            return destRegionCodes(List.of(destRegionCodes));
        }

        /**
         * @param destThreatIntelligences Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
         * 
         * @return builder
         * 
         */
        public Builder destThreatIntelligences(@Nullable Output<List<String>> destThreatIntelligences) {
            $.destThreatIntelligences = destThreatIntelligences;
            return this;
        }

        /**
         * @param destThreatIntelligences Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
         * 
         * @return builder
         * 
         */
        public Builder destThreatIntelligences(List<String> destThreatIntelligences) {
            return destThreatIntelligences(Output.of(destThreatIntelligences));
        }

        /**
         * @param destThreatIntelligences Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
         * 
         * @return builder
         * 
         */
        public Builder destThreatIntelligences(String... destThreatIntelligences) {
            return destThreatIntelligences(List.of(destThreatIntelligences));
        }

        /**
         * @param layer4Configs Pairs of IP protocols and ports that the rule should match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder layer4Configs(Output<List<NetworkFirewallPolicyRuleMatchLayer4ConfigArgs>> layer4Configs) {
            $.layer4Configs = layer4Configs;
            return this;
        }

        /**
         * @param layer4Configs Pairs of IP protocols and ports that the rule should match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder layer4Configs(List<NetworkFirewallPolicyRuleMatchLayer4ConfigArgs> layer4Configs) {
            return layer4Configs(Output.of(layer4Configs));
        }

        /**
         * @param layer4Configs Pairs of IP protocols and ports that the rule should match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder layer4Configs(NetworkFirewallPolicyRuleMatchLayer4ConfigArgs... layer4Configs) {
            return layer4Configs(List.of(layer4Configs));
        }

        /**
         * @param srcAddressGroups Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
         * 
         * @return builder
         * 
         */
        public Builder srcAddressGroups(@Nullable Output<List<String>> srcAddressGroups) {
            $.srcAddressGroups = srcAddressGroups;
            return this;
        }

        /**
         * @param srcAddressGroups Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
         * 
         * @return builder
         * 
         */
        public Builder srcAddressGroups(List<String> srcAddressGroups) {
            return srcAddressGroups(Output.of(srcAddressGroups));
        }

        /**
         * @param srcAddressGroups Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
         * 
         * @return builder
         * 
         */
        public Builder srcAddressGroups(String... srcAddressGroups) {
            return srcAddressGroups(List.of(srcAddressGroups));
        }

        /**
         * @param srcFqdns Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
         * 
         * @return builder
         * 
         */
        public Builder srcFqdns(@Nullable Output<List<String>> srcFqdns) {
            $.srcFqdns = srcFqdns;
            return this;
        }

        /**
         * @param srcFqdns Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
         * 
         * @return builder
         * 
         */
        public Builder srcFqdns(List<String> srcFqdns) {
            return srcFqdns(Output.of(srcFqdns));
        }

        /**
         * @param srcFqdns Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
         * 
         * @return builder
         * 
         */
        public Builder srcFqdns(String... srcFqdns) {
            return srcFqdns(List.of(srcFqdns));
        }

        /**
         * @param srcIpRanges CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder srcIpRanges(@Nullable Output<List<String>> srcIpRanges) {
            $.srcIpRanges = srcIpRanges;
            return this;
        }

        /**
         * @param srcIpRanges CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder srcIpRanges(List<String> srcIpRanges) {
            return srcIpRanges(Output.of(srcIpRanges));
        }

        /**
         * @param srcIpRanges CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder srcIpRanges(String... srcIpRanges) {
            return srcIpRanges(List.of(srcIpRanges));
        }

        /**
         * @param srcNetworkScope Network scope of the traffic source.
         * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
         * 
         * @return builder
         * 
         */
        public Builder srcNetworkScope(@Nullable Output<String> srcNetworkScope) {
            $.srcNetworkScope = srcNetworkScope;
            return this;
        }

        /**
         * @param srcNetworkScope Network scope of the traffic source.
         * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
         * 
         * @return builder
         * 
         */
        public Builder srcNetworkScope(String srcNetworkScope) {
            return srcNetworkScope(Output.of(srcNetworkScope));
        }

        /**
         * @param srcNetworks Networks of the traffic source. It can be either a full or partial url.
         * 
         * @return builder
         * 
         */
        public Builder srcNetworks(@Nullable Output<List<String>> srcNetworks) {
            $.srcNetworks = srcNetworks;
            return this;
        }

        /**
         * @param srcNetworks Networks of the traffic source. It can be either a full or partial url.
         * 
         * @return builder
         * 
         */
        public Builder srcNetworks(List<String> srcNetworks) {
            return srcNetworks(Output.of(srcNetworks));
        }

        /**
         * @param srcNetworks Networks of the traffic source. It can be either a full or partial url.
         * 
         * @return builder
         * 
         */
        public Builder srcNetworks(String... srcNetworks) {
            return srcNetworks(List.of(srcNetworks));
        }

        /**
         * @param srcRegionCodes Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of source region codes allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder srcRegionCodes(@Nullable Output<List<String>> srcRegionCodes) {
            $.srcRegionCodes = srcRegionCodes;
            return this;
        }

        /**
         * @param srcRegionCodes Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of source region codes allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder srcRegionCodes(List<String> srcRegionCodes) {
            return srcRegionCodes(Output.of(srcRegionCodes));
        }

        /**
         * @param srcRegionCodes Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.&#34;US&#34; Maximum number of source region codes allowed is 5000.
         * 
         * @return builder
         * 
         */
        public Builder srcRegionCodes(String... srcRegionCodes) {
            return srcRegionCodes(List.of(srcRegionCodes));
        }

        /**
         * @param srcSecureTags List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder srcSecureTags(@Nullable Output<List<NetworkFirewallPolicyRuleMatchSrcSecureTagArgs>> srcSecureTags) {
            $.srcSecureTags = srcSecureTags;
            return this;
        }

        /**
         * @param srcSecureTags List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder srcSecureTags(List<NetworkFirewallPolicyRuleMatchSrcSecureTagArgs> srcSecureTags) {
            return srcSecureTags(Output.of(srcSecureTags));
        }

        /**
         * @param srcSecureTags List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder srcSecureTags(NetworkFirewallPolicyRuleMatchSrcSecureTagArgs... srcSecureTags) {
            return srcSecureTags(List.of(srcSecureTags));
        }

        /**
         * @param srcThreatIntelligences Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
         * 
         * &lt;a name=&#34;nested_match_layer4_configs&#34;&gt;&lt;/a&gt;The `layer4_configs` block supports:
         * 
         * @return builder
         * 
         */
        public Builder srcThreatIntelligences(@Nullable Output<List<String>> srcThreatIntelligences) {
            $.srcThreatIntelligences = srcThreatIntelligences;
            return this;
        }

        /**
         * @param srcThreatIntelligences Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
         * 
         * &lt;a name=&#34;nested_match_layer4_configs&#34;&gt;&lt;/a&gt;The `layer4_configs` block supports:
         * 
         * @return builder
         * 
         */
        public Builder srcThreatIntelligences(List<String> srcThreatIntelligences) {
            return srcThreatIntelligences(Output.of(srcThreatIntelligences));
        }

        /**
         * @param srcThreatIntelligences Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
         * 
         * &lt;a name=&#34;nested_match_layer4_configs&#34;&gt;&lt;/a&gt;The `layer4_configs` block supports:
         * 
         * @return builder
         * 
         */
        public Builder srcThreatIntelligences(String... srcThreatIntelligences) {
            return srcThreatIntelligences(List.of(srcThreatIntelligences));
        }

        public NetworkFirewallPolicyRuleMatchArgs build() {
            if ($.layer4Configs == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyRuleMatchArgs", "layer4Configs");
            }
            return $;
        }
    }

}
