// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodeConfigBootDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodeConfigBootDiskArgs Empty = new ClusterNodeConfigBootDiskArgs();

    /**
     * Type of the disk attached to each node
     * (e.g. &#39;pd-standard&#39;, &#39;pd-balanced&#39;, &#39;pd-ssd&#39;, &#39;hyperdisk-balanced&#39;). If unspecified, the default disk type is &#39;pd-balanced&#39; This is being migrated from `node_config.disk_type`, and must match if specified in both places. Prefer using this field.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return Type of the disk attached to each node
     * (e.g. &#39;pd-standard&#39;, &#39;pd-balanced&#39;, &#39;pd-ssd&#39;, &#39;hyperdisk-balanced&#39;). If unspecified, the default disk type is &#39;pd-balanced&#39; This is being migrated from `node_config.disk_type`, and must match if specified in both places. Prefer using this field.
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Configure disk IOPs. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    /**
     * @return Configure disk IOPs. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
     * 
     */
    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * Configure disk throughput. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
     * 
     */
    @Import(name="provisionedThroughput")
    private @Nullable Output<Integer> provisionedThroughput;

    /**
     * @return Configure disk throughput. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
     * 
     */
    public Optional<Output<Integer>> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }

    /**
     * Size of the disk attached to each node, specified
     * in GB. The smallest allowed disk size is 10GB. Defaults to 100GB. This is being migrated from `node_config.disk_size_gb`, and must match if specified in both places. Prefer using this field.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<Integer> sizeGb;

    /**
     * @return Size of the disk attached to each node, specified
     * in GB. The smallest allowed disk size is 10GB. Defaults to 100GB. This is being migrated from `node_config.disk_size_gb`, and must match if specified in both places. Prefer using this field.
     * 
     */
    public Optional<Output<Integer>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    private ClusterNodeConfigBootDiskArgs() {}

    private ClusterNodeConfigBootDiskArgs(ClusterNodeConfigBootDiskArgs $) {
        this.diskType = $.diskType;
        this.provisionedIops = $.provisionedIops;
        this.provisionedThroughput = $.provisionedThroughput;
        this.sizeGb = $.sizeGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodeConfigBootDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodeConfigBootDiskArgs $;

        public Builder() {
            $ = new ClusterNodeConfigBootDiskArgs();
        }

        public Builder(ClusterNodeConfigBootDiskArgs defaults) {
            $ = new ClusterNodeConfigBootDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskType Type of the disk attached to each node
         * (e.g. &#39;pd-standard&#39;, &#39;pd-balanced&#39;, &#39;pd-ssd&#39;, &#39;hyperdisk-balanced&#39;). If unspecified, the default disk type is &#39;pd-balanced&#39; This is being migrated from `node_config.disk_type`, and must match if specified in both places. Prefer using this field.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Type of the disk attached to each node
         * (e.g. &#39;pd-standard&#39;, &#39;pd-balanced&#39;, &#39;pd-ssd&#39;, &#39;hyperdisk-balanced&#39;). If unspecified, the default disk type is &#39;pd-balanced&#39; This is being migrated from `node_config.disk_type`, and must match if specified in both places. Prefer using this field.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param provisionedIops Configure disk IOPs. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param provisionedIops Configure disk IOPs. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        /**
         * @param provisionedThroughput Configure disk throughput. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(@Nullable Output<Integer> provisionedThroughput) {
            $.provisionedThroughput = provisionedThroughput;
            return this;
        }

        /**
         * @param provisionedThroughput Configure disk throughput. This is only valid if the `disk_type` is &#39;hyperdisk-balanced&#39;. See [performance limit documention](https://cloud.google.com/compute/docs/disks/hyperdisk-perf-limits) for more information about valid values.
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(Integer provisionedThroughput) {
            return provisionedThroughput(Output.of(provisionedThroughput));
        }

        /**
         * @param sizeGb Size of the disk attached to each node, specified
         * in GB. The smallest allowed disk size is 10GB. Defaults to 100GB. This is being migrated from `node_config.disk_size_gb`, and must match if specified in both places. Prefer using this field.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(@Nullable Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb Size of the disk attached to each node, specified
         * in GB. The smallest allowed disk size is 10GB. Defaults to 100GB. This is being migrated from `node_config.disk_size_gb`, and must match if specified in both places. Prefer using this field.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        public ClusterNodeConfigBootDiskArgs build() {
            return $;
        }
    }

}
