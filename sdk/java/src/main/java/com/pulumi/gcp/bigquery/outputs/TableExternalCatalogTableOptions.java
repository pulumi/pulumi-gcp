// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.bigquery.outputs.TableExternalCatalogTableOptionsStorageDescriptor;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableExternalCatalogTableOptions {
    /**
     * @return The connection specifying the credentials to be
     * used to read external storage, such as Azure Blob, Cloud Storage, or S3. The
     * connection is needed to read the open source table from BigQuery Engine. The
     * connectionId can have the form `&lt;project_id&gt;.&lt;location_id&gt;.&lt;connection_id&gt;`
     * or `projects/&lt;project_id&gt;/locations/&lt;location_id&gt;/connections/&lt;connection_id&gt;`.
     * 
     */
    private @Nullable String connectionId;
    /**
     * @return A map of key value pairs defining the parameters and
     * properties of the open source table. Corresponds with hive meta store table
     * parameters. Maximum size of 4Mib.
     * 
     */
    private @Nullable Map<String,String> parameters;
    /**
     * @return A storage descriptor containing information
     * about the physical storage of this table. Structure is documented below.
     * 
     */
    private @Nullable TableExternalCatalogTableOptionsStorageDescriptor storageDescriptor;

    private TableExternalCatalogTableOptions() {}
    /**
     * @return The connection specifying the credentials to be
     * used to read external storage, such as Azure Blob, Cloud Storage, or S3. The
     * connection is needed to read the open source table from BigQuery Engine. The
     * connectionId can have the form `&lt;project_id&gt;.&lt;location_id&gt;.&lt;connection_id&gt;`
     * or `projects/&lt;project_id&gt;/locations/&lt;location_id&gt;/connections/&lt;connection_id&gt;`.
     * 
     */
    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }
    /**
     * @return A map of key value pairs defining the parameters and
     * properties of the open source table. Corresponds with hive meta store table
     * parameters. Maximum size of 4Mib.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return A storage descriptor containing information
     * about the physical storage of this table. Structure is documented below.
     * 
     */
    public Optional<TableExternalCatalogTableOptionsStorageDescriptor> storageDescriptor() {
        return Optional.ofNullable(this.storageDescriptor);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableExternalCatalogTableOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionId;
        private @Nullable Map<String,String> parameters;
        private @Nullable TableExternalCatalogTableOptionsStorageDescriptor storageDescriptor;
        public Builder() {}
        public Builder(TableExternalCatalogTableOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.parameters = defaults.parameters;
    	      this.storageDescriptor = defaults.storageDescriptor;
        }

        @CustomType.Setter
        public Builder connectionId(@Nullable String connectionId) {

            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,String> parameters) {

            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder storageDescriptor(@Nullable TableExternalCatalogTableOptionsStorageDescriptor storageDescriptor) {

            this.storageDescriptor = storageDescriptor;
            return this;
        }
        public TableExternalCatalogTableOptions build() {
            final var _resultValue = new TableExternalCatalogTableOptions();
            _resultValue.connectionId = connectionId;
            _resultValue.parameters = parameters;
            _resultValue.storageDescriptor = storageDescriptor;
            return _resultValue;
        }
    }
}
