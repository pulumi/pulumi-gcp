// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforceFile;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce {
    /**
     * @return Optional arguments to pass to the source during execution.
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return A remote or local file.
     * Structure is documented below.
     * 
     */
    private @Nullable V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforceFile file;
    /**
     * @return Required. The script interpreter to use.
     * Possible values:
     * INTERPRETER_UNSPECIFIED
     * NONE
     * SHELL
     * POWERSHELL
     * 
     */
    private String interpreter;
    /**
     * @return Only recorded for enforce Exec.
     * Path to an output file (that is created by this Exec) whose
     * content will be recorded in OSPolicyResourceCompliance after a
     * successful run. Absence or failure to read this file will result in
     * this ExecResource being non-compliant. Output file size is limited to
     * 500K bytes.
     * 
     */
    private @Nullable String outputFilePath;
    /**
     * @return An inline script.
     * The size of the script is limited to 32KiB.
     * 
     */
    private @Nullable String script;

    private V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce() {}
    /**
     * @return Optional arguments to pass to the source during execution.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return A remote or local file.
     * Structure is documented below.
     * 
     */
    public Optional<V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforceFile> file() {
        return Optional.ofNullable(this.file);
    }
    /**
     * @return Required. The script interpreter to use.
     * Possible values:
     * INTERPRETER_UNSPECIFIED
     * NONE
     * SHELL
     * POWERSHELL
     * 
     */
    public String interpreter() {
        return this.interpreter;
    }
    /**
     * @return Only recorded for enforce Exec.
     * Path to an output file (that is created by this Exec) whose
     * content will be recorded in OSPolicyResourceCompliance after a
     * successful run. Absence or failure to read this file will result in
     * this ExecResource being non-compliant. Output file size is limited to
     * 500K bytes.
     * 
     */
    public Optional<String> outputFilePath() {
        return Optional.ofNullable(this.outputFilePath);
    }
    /**
     * @return An inline script.
     * The size of the script is limited to 32KiB.
     * 
     */
    public Optional<String> script() {
        return Optional.ofNullable(this.script);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> args;
        private @Nullable V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforceFile file;
        private String interpreter;
        private @Nullable String outputFilePath;
        private @Nullable String script;
        public Builder() {}
        public Builder(V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.file = defaults.file;
    	      this.interpreter = defaults.interpreter;
    	      this.outputFilePath = defaults.outputFilePath;
    	      this.script = defaults.script;
        }

        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {

            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder file(@Nullable V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforceFile file) {

            this.file = file;
            return this;
        }
        @CustomType.Setter
        public Builder interpreter(String interpreter) {
            if (interpreter == null) {
              throw new MissingRequiredPropertyException("V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce", "interpreter");
            }
            this.interpreter = interpreter;
            return this;
        }
        @CustomType.Setter
        public Builder outputFilePath(@Nullable String outputFilePath) {

            this.outputFilePath = outputFilePath;
            return this;
        }
        @CustomType.Setter
        public Builder script(@Nullable String script) {

            this.script = script;
            return this;
        }
        public V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce build() {
            final var _resultValue = new V2PolicyOrchestratorOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceExecEnforce();
            _resultValue.args = args;
            _resultValue.file = file;
            _resultValue.interpreter = interpreter;
            _resultValue.outputFilePath = outputFilePath;
            _resultValue.script = script;
            return _resultValue;
        }
    }
}
