// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule {
    /**
     * @return Valid values include:
     * - A number between 400 and 599: For example 401 or 503, in which case the load balancer applies the policy if the error code exactly matches this value.
     * - 5xx: Load Balancer will apply the policy if the backend service responds with any response code in the range of 500 to 599.
     * - 4xx: Load Balancer will apply the policy if the backend service responds with any response code in the range of 400 to 499.
     *   Values must be unique within matchResponseCodes and across all errorResponseRules of CustomErrorResponsePolicy.
     * 
     */
    private @Nullable List<String> matchResponseCodes;
    /**
     * @return The HTTP status code returned with the response containing the custom error content.
     * If overrideResponseCode is not supplied, the same response code returned by the original backend bucket or backend service is returned to the client.
     * 
     */
    private @Nullable Integer overrideResponseCode;
    /**
     * @return The full path to a file within backendBucket. For example: /errors/defaultError.html
     * path must start with a leading slash. path cannot have trailing slashes.
     * If the file is not available in backendBucket or the load balancer cannot reach the BackendBucket, a simple Not Found Error is returned to the client.
     * The value must be from 1 to 1024 characters.
     * 
     */
    private @Nullable String path;

    private URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule() {}
    /**
     * @return Valid values include:
     * - A number between 400 and 599: For example 401 or 503, in which case the load balancer applies the policy if the error code exactly matches this value.
     * - 5xx: Load Balancer will apply the policy if the backend service responds with any response code in the range of 500 to 599.
     * - 4xx: Load Balancer will apply the policy if the backend service responds with any response code in the range of 400 to 499.
     *   Values must be unique within matchResponseCodes and across all errorResponseRules of CustomErrorResponsePolicy.
     * 
     */
    public List<String> matchResponseCodes() {
        return this.matchResponseCodes == null ? List.of() : this.matchResponseCodes;
    }
    /**
     * @return The HTTP status code returned with the response containing the custom error content.
     * If overrideResponseCode is not supplied, the same response code returned by the original backend bucket or backend service is returned to the client.
     * 
     */
    public Optional<Integer> overrideResponseCode() {
        return Optional.ofNullable(this.overrideResponseCode);
    }
    /**
     * @return The full path to a file within backendBucket. For example: /errors/defaultError.html
     * path must start with a leading slash. path cannot have trailing slashes.
     * If the file is not available in backendBucket or the load balancer cannot reach the BackendBucket, a simple Not Found Error is returned to the client.
     * The value must be from 1 to 1024 characters.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> matchResponseCodes;
        private @Nullable Integer overrideResponseCode;
        private @Nullable String path;
        public Builder() {}
        public Builder(URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchResponseCodes = defaults.matchResponseCodes;
    	      this.overrideResponseCode = defaults.overrideResponseCode;
    	      this.path = defaults.path;
        }

        @CustomType.Setter
        public Builder matchResponseCodes(@Nullable List<String> matchResponseCodes) {

            this.matchResponseCodes = matchResponseCodes;
            return this;
        }
        public Builder matchResponseCodes(String... matchResponseCodes) {
            return matchResponseCodes(List.of(matchResponseCodes));
        }
        @CustomType.Setter
        public Builder overrideResponseCode(@Nullable Integer overrideResponseCode) {

            this.overrideResponseCode = overrideResponseCode;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        public URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule build() {
            final var _resultValue = new URLMapPathMatcherPathRuleCustomErrorResponsePolicyErrorResponseRule();
            _resultValue.matchResponseCodes = matchResponseCodes;
            _resultValue.overrideResponseCode = overrideResponseCode;
            _resultValue.path = path;
            return _resultValue;
        }
    }
}
