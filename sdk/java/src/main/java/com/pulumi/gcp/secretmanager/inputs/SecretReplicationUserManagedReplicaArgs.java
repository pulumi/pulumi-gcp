// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedReplicaCustomerManagedEncryptionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretReplicationUserManagedReplicaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretReplicationUserManagedReplicaArgs Empty = new SecretReplicationUserManagedReplicaArgs();

    /**
     * Customer Managed Encryption for the secret.
     * Structure is documented below.
     * 
     */
    @Import(name="customerManagedEncryption")
    private @Nullable Output<SecretReplicationUserManagedReplicaCustomerManagedEncryptionArgs> customerManagedEncryption;

    /**
     * @return Customer Managed Encryption for the secret.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SecretReplicationUserManagedReplicaCustomerManagedEncryptionArgs>> customerManagedEncryption() {
        return Optional.ofNullable(this.customerManagedEncryption);
    }

    /**
     * The canonical IDs of the location to replicate data. For example: &#34;us-east1&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The canonical IDs of the location to replicate data. For example: &#34;us-east1&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    private SecretReplicationUserManagedReplicaArgs() {}

    private SecretReplicationUserManagedReplicaArgs(SecretReplicationUserManagedReplicaArgs $) {
        this.customerManagedEncryption = $.customerManagedEncryption;
        this.location = $.location;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretReplicationUserManagedReplicaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretReplicationUserManagedReplicaArgs $;

        public Builder() {
            $ = new SecretReplicationUserManagedReplicaArgs();
        }

        public Builder(SecretReplicationUserManagedReplicaArgs defaults) {
            $ = new SecretReplicationUserManagedReplicaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerManagedEncryption Customer Managed Encryption for the secret.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryption(@Nullable Output<SecretReplicationUserManagedReplicaCustomerManagedEncryptionArgs> customerManagedEncryption) {
            $.customerManagedEncryption = customerManagedEncryption;
            return this;
        }

        /**
         * @param customerManagedEncryption Customer Managed Encryption for the secret.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryption(SecretReplicationUserManagedReplicaCustomerManagedEncryptionArgs customerManagedEncryption) {
            return customerManagedEncryption(Output.of(customerManagedEncryption));
        }

        /**
         * @param location The canonical IDs of the location to replicate data. For example: &#34;us-east1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The canonical IDs of the location to replicate data. For example: &#34;us-east1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public SecretReplicationUserManagedReplicaArgs build() {
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
