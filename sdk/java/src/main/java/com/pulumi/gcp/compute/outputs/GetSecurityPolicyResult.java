// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyAdaptiveProtectionConfig;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyAdvancedOptionsConfig;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyRecaptchaOptionsConfig;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyRule;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityPolicyResult {
    private List<GetSecurityPolicyAdaptiveProtectionConfig> adaptiveProtectionConfigs;
    private List<GetSecurityPolicyAdvancedOptionsConfig> advancedOptionsConfigs;
    private String description;
    private Map<String,String> effectiveLabels;
    private String fingerprint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String labelFingerprint;
    private Map<String,String> labels;
    private @Nullable String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private List<GetSecurityPolicyRecaptchaOptionsConfig> recaptchaOptionsConfigs;
    private List<GetSecurityPolicyRule> rules;
    private @Nullable String selfLink;
    private String type;

    private GetSecurityPolicyResult() {}
    public List<GetSecurityPolicyAdaptiveProtectionConfig> adaptiveProtectionConfigs() {
        return this.adaptiveProtectionConfigs;
    }
    public List<GetSecurityPolicyAdvancedOptionsConfig> advancedOptionsConfigs() {
        return this.advancedOptionsConfigs;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetSecurityPolicyRecaptchaOptionsConfig> recaptchaOptionsConfigs() {
        return this.recaptchaOptionsConfigs;
    }
    public List<GetSecurityPolicyRule> rules() {
        return this.rules;
    }
    public Optional<String> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSecurityPolicyAdaptiveProtectionConfig> adaptiveProtectionConfigs;
        private List<GetSecurityPolicyAdvancedOptionsConfig> advancedOptionsConfigs;
        private String description;
        private Map<String,String> effectiveLabels;
        private String fingerprint;
        private String id;
        private String labelFingerprint;
        private Map<String,String> labels;
        private @Nullable String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private List<GetSecurityPolicyRecaptchaOptionsConfig> recaptchaOptionsConfigs;
        private List<GetSecurityPolicyRule> rules;
        private @Nullable String selfLink;
        private String type;
        public Builder() {}
        public Builder(GetSecurityPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveProtectionConfigs = defaults.adaptiveProtectionConfigs;
    	      this.advancedOptionsConfigs = defaults.advancedOptionsConfigs;
    	      this.description = defaults.description;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.recaptchaOptionsConfigs = defaults.recaptchaOptionsConfigs;
    	      this.rules = defaults.rules;
    	      this.selfLink = defaults.selfLink;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder adaptiveProtectionConfigs(List<GetSecurityPolicyAdaptiveProtectionConfig> adaptiveProtectionConfigs) {
            if (adaptiveProtectionConfigs == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "adaptiveProtectionConfigs");
            }
            this.adaptiveProtectionConfigs = adaptiveProtectionConfigs;
            return this;
        }
        public Builder adaptiveProtectionConfigs(GetSecurityPolicyAdaptiveProtectionConfig... adaptiveProtectionConfigs) {
            return adaptiveProtectionConfigs(List.of(adaptiveProtectionConfigs));
        }
        @CustomType.Setter
        public Builder advancedOptionsConfigs(List<GetSecurityPolicyAdvancedOptionsConfig> advancedOptionsConfigs) {
            if (advancedOptionsConfigs == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "advancedOptionsConfigs");
            }
            this.advancedOptionsConfigs = advancedOptionsConfigs;
            return this;
        }
        public Builder advancedOptionsConfigs(GetSecurityPolicyAdvancedOptionsConfig... advancedOptionsConfigs) {
            return advancedOptionsConfigs(List.of(advancedOptionsConfigs));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labelFingerprint(String labelFingerprint) {
            if (labelFingerprint == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "labelFingerprint");
            }
            this.labelFingerprint = labelFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder recaptchaOptionsConfigs(List<GetSecurityPolicyRecaptchaOptionsConfig> recaptchaOptionsConfigs) {
            if (recaptchaOptionsConfigs == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "recaptchaOptionsConfigs");
            }
            this.recaptchaOptionsConfigs = recaptchaOptionsConfigs;
            return this;
        }
        public Builder recaptchaOptionsConfigs(GetSecurityPolicyRecaptchaOptionsConfig... recaptchaOptionsConfigs) {
            return recaptchaOptionsConfigs(List.of(recaptchaOptionsConfigs));
        }
        @CustomType.Setter
        public Builder rules(List<GetSecurityPolicyRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(GetSecurityPolicyRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder selfLink(@Nullable String selfLink) {

            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetSecurityPolicyResult build() {
            final var _resultValue = new GetSecurityPolicyResult();
            _resultValue.adaptiveProtectionConfigs = adaptiveProtectionConfigs;
            _resultValue.advancedOptionsConfigs = advancedOptionsConfigs;
            _resultValue.description = description;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.labelFingerprint = labelFingerprint;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.recaptchaOptionsConfigs = recaptchaOptionsConfigs;
            _resultValue.rules = rules;
            _resultValue.selfLink = selfLink;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
