// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.RegionTargetHttpsProxyArgs;
import com.pulumi.gcp.compute.inputs.RegionTargetHttpsProxyState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents a RegionTargetHttpsProxy resource, which is used by one or more
 * forwarding rules to route incoming HTTPS requests to a URL map.
 * 
 * To get more information about RegionTargetHttpsProxy, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionTargetHttpsProxies)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/load-balancing/http/target-proxies)
 * 
 * ## Example Usage
 * 
 * ### Region Target Https Proxy Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionSslCertificate;
 * import com.pulumi.gcp.compute.RegionSslCertificateArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxy;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultRegionSslCertificate = new RegionSslCertificate("defaultRegionSslCertificate", RegionSslCertificateArgs.builder()
 *             .region("us-central1")
 *             .name("my-certificate")
 *             .privateKey(StdFunctions.file(FileArgs.builder()
 *                 .input("path/to/private.key")
 *                 .build()).result())
 *             .certificate(StdFunctions.file(FileArgs.builder()
 *                 .input("path/to/certificate.crt")
 *                 .build()).result())
 *             .build());
 * 
 *         var defaultRegionHealthCheck = new RegionHealthCheck("defaultRegionHealthCheck", RegionHealthCheckArgs.builder()
 *             .region("us-central1")
 *             .name("http-health-check")
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("backend-service")
 *             .protocol("HTTP")
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .timeoutSec(10)
 *             .healthChecks(defaultRegionHealthCheck.id())
 *             .build());
 * 
 *         var defaultRegionUrlMap = new RegionUrlMap("defaultRegionUrlMap", RegionUrlMapArgs.builder()
 *             .region("us-central1")
 *             .name("url-map")
 *             .description("a description")
 *             .defaultService(defaultRegionBackendService.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts("mysite.com")
 *                 .pathMatcher("allpaths")
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name("allpaths")
 *                 .defaultService(defaultRegionBackendService.id())
 *                 .pathRules(RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                     .paths("/*")
 *                     .service(defaultRegionBackendService.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionTargetHttpsProxy("default", RegionTargetHttpsProxyArgs.builder()
 *             .region("us-central1")
 *             .name("test-proxy")
 *             .urlMap(defaultRegionUrlMap.id())
 *             .sslCertificates(defaultRegionSslCertificate.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Region Target Https Proxy Http Keep Alive Timeout
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionSslCertificate;
 * import com.pulumi.gcp.compute.RegionSslCertificateArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxy;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultRegionSslCertificate = new RegionSslCertificate("defaultRegionSslCertificate", RegionSslCertificateArgs.builder()
 *             .region("us-central1")
 *             .name("my-certificate")
 *             .privateKey(StdFunctions.file(FileArgs.builder()
 *                 .input("path/to/private.key")
 *                 .build()).result())
 *             .certificate(StdFunctions.file(FileArgs.builder()
 *                 .input("path/to/certificate.crt")
 *                 .build()).result())
 *             .build());
 * 
 *         var defaultRegionHealthCheck = new RegionHealthCheck("defaultRegionHealthCheck", RegionHealthCheckArgs.builder()
 *             .region("us-central1")
 *             .name("http-health-check")
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("backend-service")
 *             .portName("http")
 *             .protocol("HTTP")
 *             .timeoutSec(10)
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .healthChecks(defaultRegionHealthCheck.id())
 *             .build());
 * 
 *         var defaultRegionUrlMap = new RegionUrlMap("defaultRegionUrlMap", RegionUrlMapArgs.builder()
 *             .region("us-central1")
 *             .name("url-map")
 *             .description("a description")
 *             .defaultService(defaultRegionBackendService.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts("mysite.com")
 *                 .pathMatcher("allpaths")
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name("allpaths")
 *                 .defaultService(defaultRegionBackendService.id())
 *                 .pathRules(RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                     .paths("/*")
 *                     .service(defaultRegionBackendService.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionTargetHttpsProxy("default", RegionTargetHttpsProxyArgs.builder()
 *             .region("us-central1")
 *             .name("test-http-keep-alive-timeout-proxy")
 *             .httpKeepAliveTimeoutSec(600)
 *             .urlMap(defaultRegionUrlMap.id())
 *             .sslCertificates(defaultRegionSslCertificate.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Region Target Https Proxy Mtls
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.certificatemanager.TrustConfig;
 * import com.pulumi.gcp.certificatemanager.TrustConfigArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.TrustConfigTrustStoreArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicy;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicyArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyMtlsPolicyArgs;
 * import com.pulumi.gcp.compute.RegionSslCertificate;
 * import com.pulumi.gcp.compute.RegionSslCertificateArgs;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxy;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var defaultTrustConfig = new TrustConfig("defaultTrustConfig", TrustConfigArgs.builder()
 *             .location("us-central1")
 *             .name("my-trust-config")
 *             .description("sample description for trust config")
 *             .trustStores(TrustConfigTrustStoreArgs.builder()
 *                 .trustAnchors(TrustConfigTrustStoreTrustAnchorArgs.builder()
 *                     .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                         .input("test-fixtures/ca_cert.pem")
 *                         .build()).result())
 *                     .build())
 *                 .intermediateCas(TrustConfigTrustStoreIntermediateCaArgs.builder()
 *                     .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                         .input("test-fixtures/ca_cert.pem")
 *                         .build()).result())
 *                     .build())
 *                 .build())
 *             .labels(Map.of("foo", "bar"))
 *             .build());
 * 
 *         var defaultServerTlsPolicy = new ServerTlsPolicy("defaultServerTlsPolicy", ServerTlsPolicyArgs.builder()
 *             .location("us-central1")
 *             .name("my-tls-policy")
 *             .description("my description")
 *             .allowOpen(false)
 *             .mtlsPolicy(ServerTlsPolicyMtlsPolicyArgs.builder()
 *                 .clientValidationMode("REJECT_INVALID")
 *                 .clientValidationTrustConfig(defaultTrustConfig.name().applyValue(_name -> String.format("projects/%s/locations/us-central1/trustConfigs/%s", project.number(),_name)))
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionSslCertificate = new RegionSslCertificate("defaultRegionSslCertificate", RegionSslCertificateArgs.builder()
 *             .region("us-central1")
 *             .name("my-certificate")
 *             .privateKey(StdFunctions.file(FileArgs.builder()
 *                 .input("path/to/private.key")
 *                 .build()).result())
 *             .certificate(StdFunctions.file(FileArgs.builder()
 *                 .input("path/to/certificate.crt")
 *                 .build()).result())
 *             .build());
 * 
 *         var defaultRegionHealthCheck = new RegionHealthCheck("defaultRegionHealthCheck", RegionHealthCheckArgs.builder()
 *             .region("us-central1")
 *             .name("http-health-check")
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("backend-service")
 *             .portName("http")
 *             .protocol("HTTP")
 *             .timeoutSec(10)
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .healthChecks(defaultRegionHealthCheck.id())
 *             .build());
 * 
 *         var defaultRegionUrlMap = new RegionUrlMap("defaultRegionUrlMap", RegionUrlMapArgs.builder()
 *             .region("us-central1")
 *             .name("url-map")
 *             .description("a description")
 *             .defaultService(defaultRegionBackendService.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts("mysite.com")
 *                 .pathMatcher("allpaths")
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name("allpaths")
 *                 .defaultService(defaultRegionBackendService.id())
 *                 .pathRules(RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                     .paths("/*")
 *                     .service(defaultRegionBackendService.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionTargetHttpsProxy("default", RegionTargetHttpsProxyArgs.builder()
 *             .region("us-central1")
 *             .name("test-mtls-proxy")
 *             .urlMap(defaultRegionUrlMap.id())
 *             .sslCertificates(defaultRegionSslCertificate.id())
 *             .serverTlsPolicy(defaultServerTlsPolicy.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Region Target Https Proxy Certificate Manager Certificate
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificatemanager.Certificate;
 * import com.pulumi.gcp.certificatemanager.CertificateArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.CertificateSelfManagedArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxy;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultCertificate = new Certificate("defaultCertificate", CertificateArgs.builder()
 *             .name("my-certificate")
 *             .location("us-central1")
 *             .selfManaged(CertificateSelfManagedArgs.builder()
 *                 .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/cert.pem")
 *                     .build()).result())
 *                 .pemPrivateKey(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/private-key.pem")
 *                     .build()).result())
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .name("backend-service")
 *             .region("us-central1")
 *             .protocol("HTTPS")
 *             .timeoutSec(30)
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .build());
 * 
 *         var defaultRegionUrlMap = new RegionUrlMap("defaultRegionUrlMap", RegionUrlMapArgs.builder()
 *             .name("url-map")
 *             .defaultService(defaultRegionBackendService.id())
 *             .region("us-central1")
 *             .build());
 * 
 *         var default_ = new RegionTargetHttpsProxy("default", RegionTargetHttpsProxyArgs.builder()
 *             .name("target-http-proxy")
 *             .urlMap(defaultRegionUrlMap.id())
 *             .certificateManagerCertificates(defaultCertificate.id().applyValue(_id -> String.format("//certificatemanager.googleapis.com/%s", _id)))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * RegionTargetHttpsProxy can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/regions/{{region}}/targetHttpsProxies/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, RegionTargetHttpsProxy can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default projects/{{project}}/regions/{{region}}/targetHttpsProxies/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy")
public class RegionTargetHttpsProxy extends com.pulumi.resources.CustomResource {
    /**
     * URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
     * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
     * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
     * 
     */
    @Export(name="certificateManagerCertificates", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> certificateManagerCertificates;

    /**
     * @return URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
     * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
     * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the selfLink `projects/{project}/locations/{location}/certificates/{resourceName}`
     * 
     */
    public Output<Optional<List<String>>> certificateManagerCertificates() {
        return Codegen.optional(this.certificateManagerCertificates);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Specifies how long to keep a connection open, after completing a response,
     * while there is no matching traffic (in seconds). If an HTTP keepalive is
     * not specified, a default value (600 seconds) will be used. For Regioanl
     * HTTP(S) load balancer, the minimum allowed value is 5 seconds and the
     * maximum allowed value is 600 seconds.
     * 
     */
    @Export(name="httpKeepAliveTimeoutSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> httpKeepAliveTimeoutSec;

    /**
     * @return Specifies how long to keep a connection open, after completing a response,
     * while there is no matching traffic (in seconds). If an HTTP keepalive is
     * not specified, a default value (600 seconds) will be used. For Regioanl
     * HTTP(S) load balancer, the minimum allowed value is 5 seconds and the
     * maximum allowed value is 600 seconds.
     * 
     */
    public Output<Optional<Integer>> httpKeepAliveTimeoutSec() {
        return Codegen.optional(this.httpKeepAliveTimeoutSec);
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The unique identifier for the resource.
     * 
     */
    @Export(name="proxyId", refs={Integer.class}, tree="[0]")
    private Output<Integer> proxyId;

    /**
     * @return The unique identifier for the resource.
     * 
     */
    public Output<Integer> proxyId() {
        return this.proxyId;
    }
    /**
     * The Region in which the created target https proxy should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The Region in which the created target https proxy should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * A URL referring to a networksecurity.ServerTlsPolicy
     * resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
     * attached to globalForwardingRules with the loadBalancingScheme
     * set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
     * For details which ServerTlsPolicy resources are accepted with
     * INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
     * loadBalancingScheme consult ServerTlsPolicy documentation.
     * If left blank, communications are not encrypted.
     * If you remove this field from your configuration at the same time as
     * deleting or recreating a referenced ServerTlsPolicy resource, you will
     * receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
     * within the ServerTlsPolicy resource to avoid this.
     * 
     */
    @Export(name="serverTlsPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serverTlsPolicy;

    /**
     * @return A URL referring to a networksecurity.ServerTlsPolicy
     * resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
     * attached to globalForwardingRules with the loadBalancingScheme
     * set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
     * For details which ServerTlsPolicy resources are accepted with
     * INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
     * loadBalancingScheme consult ServerTlsPolicy documentation.
     * If left blank, communications are not encrypted.
     * If you remove this field from your configuration at the same time as
     * deleting or recreating a referenced ServerTlsPolicy resource, you will
     * receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
     * within the ServerTlsPolicy resource to avoid this.
     * 
     */
    public Output<Optional<String>> serverTlsPolicy() {
        return Codegen.optional(this.serverTlsPolicy);
    }
    /**
     * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
     * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
     * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     * 
     */
    @Export(name="sslCertificates", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sslCertificates;

    /**
     * @return URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
     * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
     * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     * 
     */
    public Output<Optional<List<String>>> sslCertificates() {
        return Codegen.optional(this.sslCertificates);
    }
    /**
     * A reference to the Region SslPolicy resource that will be associated with
     * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
     * resource will not have any SSL policy configured.
     * 
     */
    @Export(name="sslPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sslPolicy;

    /**
     * @return A reference to the Region SslPolicy resource that will be associated with
     * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
     * resource will not have any SSL policy configured.
     * 
     */
    public Output<Optional<String>> sslPolicy() {
        return Codegen.optional(this.sslPolicy);
    }
    /**
     * A reference to the RegionUrlMap resource that defines the mapping from URL
     * to the RegionBackendService.
     * 
     */
    @Export(name="urlMap", refs={String.class}, tree="[0]")
    private Output<String> urlMap;

    /**
     * @return A reference to the RegionUrlMap resource that defines the mapping from URL
     * to the RegionBackendService.
     * 
     */
    public Output<String> urlMap() {
        return this.urlMap;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionTargetHttpsProxy(java.lang.String name) {
        this(name, RegionTargetHttpsProxyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionTargetHttpsProxy(java.lang.String name, RegionTargetHttpsProxyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionTargetHttpsProxy(java.lang.String name, RegionTargetHttpsProxyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RegionTargetHttpsProxy(java.lang.String name, Output<java.lang.String> id, @Nullable RegionTargetHttpsProxyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy", name, state, makeResourceOptions(options, id), false);
    }

    private static RegionTargetHttpsProxyArgs makeArgs(RegionTargetHttpsProxyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RegionTargetHttpsProxyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionTargetHttpsProxy get(java.lang.String name, Output<java.lang.String> id, @Nullable RegionTargetHttpsProxyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegionTargetHttpsProxy(name, id, state, options);
    }
}
