// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppArgs Empty = new WebAppArgs();

    /**
     * The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
     * If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
     * This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
     * 
     */
    @Import(name="apiKeyId")
    private @Nullable Output<String> apiKeyId;

    /**
     * @return The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
     * If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
     * This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
     * 
     */
    public Optional<Output<String>> apiKeyId() {
        return Optional.ofNullable(this.apiKeyId);
    }

    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * The user-assigned display name of the App.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The user-assigned display name of the App.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private WebAppArgs() {}

    private WebAppArgs(WebAppArgs $) {
        this.apiKeyId = $.apiKeyId;
        this.deletionPolicy = $.deletionPolicy;
        this.displayName = $.displayName;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppArgs $;

        public Builder() {
            $ = new WebAppArgs();
        }

        public Builder(WebAppArgs defaults) {
            $ = new WebAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeyId The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
         * If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
         * This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyId(@Nullable Output<String> apiKeyId) {
            $.apiKeyId = apiKeyId;
            return this;
        }

        /**
         * @param apiKeyId The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the WebApp.
         * If apiKeyId is not set during creation, then Firebase automatically associates an apiKeyId with the WebApp.
         * This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyId(String apiKeyId) {
            return apiKeyId(Output.of(apiKeyId));
        }

        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param displayName The user-assigned display name of the App.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-assigned display name of the App.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public WebAppArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("WebAppArgs", "displayName");
            }
            return $;
        }
    }

}
