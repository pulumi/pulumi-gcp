// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.filestore.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceDirectoryServicesLdap {
    /**
     * @return The LDAP domain name in the format of `my-domain.com`.
     * 
     */
    private String domain;
    /**
     * @return The groups Organizational Unit (OU) is optional. This parameter is a hint
     * to allow faster lookup in the LDAP namespace. In case that this parameter
     * is not provided, Filestore instance will query the whole LDAP namespace.
     * 
     */
    private @Nullable String groupsOu;
    /**
     * @return The servers names are used for specifying the LDAP servers names.
     * The LDAP servers names can come with two formats:
     * 1. DNS name, for example: `ldap.example1.com`, `ldap.example2.com`.
     * 2. IP address, for example: `10.0.0.1`, `10.0.0.2`, `10.0.0.3`.
     *    All servers names must be in the same format: either all DNS names or all
     *    IP addresses.
     * 
     */
    private List<String> servers;
    /**
     * @return The users Organizational Unit (OU) is optional. This parameter is a hint
     * to allow faster lookup in the LDAP namespace. In case that this parameter
     * is not provided, Filestore instance will query the whole LDAP namespace.
     * 
     */
    private @Nullable String usersOu;

    private InstanceDirectoryServicesLdap() {}
    /**
     * @return The LDAP domain name in the format of `my-domain.com`.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return The groups Organizational Unit (OU) is optional. This parameter is a hint
     * to allow faster lookup in the LDAP namespace. In case that this parameter
     * is not provided, Filestore instance will query the whole LDAP namespace.
     * 
     */
    public Optional<String> groupsOu() {
        return Optional.ofNullable(this.groupsOu);
    }
    /**
     * @return The servers names are used for specifying the LDAP servers names.
     * The LDAP servers names can come with two formats:
     * 1. DNS name, for example: `ldap.example1.com`, `ldap.example2.com`.
     * 2. IP address, for example: `10.0.0.1`, `10.0.0.2`, `10.0.0.3`.
     *    All servers names must be in the same format: either all DNS names or all
     *    IP addresses.
     * 
     */
    public List<String> servers() {
        return this.servers;
    }
    /**
     * @return The users Organizational Unit (OU) is optional. This parameter is a hint
     * to allow faster lookup in the LDAP namespace. In case that this parameter
     * is not provided, Filestore instance will query the whole LDAP namespace.
     * 
     */
    public Optional<String> usersOu() {
        return Optional.ofNullable(this.usersOu);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceDirectoryServicesLdap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domain;
        private @Nullable String groupsOu;
        private List<String> servers;
        private @Nullable String usersOu;
        public Builder() {}
        public Builder(InstanceDirectoryServicesLdap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.groupsOu = defaults.groupsOu;
    	      this.servers = defaults.servers;
    	      this.usersOu = defaults.usersOu;
        }

        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("InstanceDirectoryServicesLdap", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder groupsOu(@Nullable String groupsOu) {

            this.groupsOu = groupsOu;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<String> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("InstanceDirectoryServicesLdap", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder usersOu(@Nullable String usersOu) {

            this.usersOu = usersOu;
            return this;
        }
        public InstanceDirectoryServicesLdap build() {
            final var _resultValue = new InstanceDirectoryServicesLdap();
            _resultValue.domain = domain;
            _resultValue.groupsOu = groupsOu;
            _resultValue.servers = servers;
            _resultValue.usersOu = usersOu;
            return _resultValue;
        }
    }
}
