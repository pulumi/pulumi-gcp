// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.resourcemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CapabilityState extends com.pulumi.resources.ResourceArgs {

    public static final CapabilityState Empty = new CapabilityState();

    /**
     * Capability name that should be updated on the folder.
     * 
     */
    @Import(name="capabilityName")
    private @Nullable Output<String> capabilityName;

    /**
     * @return Capability name that should be updated on the folder.
     * 
     */
    public Optional<Output<String>> capabilityName() {
        return Optional.ofNullable(this.capabilityName);
    }

    /**
     * Folder on which Capability needs to be updated in the format folders/folder_id.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return Folder on which Capability needs to be updated in the format folders/folder_id.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Capability Value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Boolean> value;

    /**
     * @return Capability Value.
     * 
     */
    public Optional<Output<Boolean>> value() {
        return Optional.ofNullable(this.value);
    }

    private CapabilityState() {}

    private CapabilityState(CapabilityState $) {
        this.capabilityName = $.capabilityName;
        this.parent = $.parent;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CapabilityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CapabilityState $;

        public Builder() {
            $ = new CapabilityState();
        }

        public Builder(CapabilityState defaults) {
            $ = new CapabilityState(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilityName Capability name that should be updated on the folder.
         * 
         * @return builder
         * 
         */
        public Builder capabilityName(@Nullable Output<String> capabilityName) {
            $.capabilityName = capabilityName;
            return this;
        }

        /**
         * @param capabilityName Capability name that should be updated on the folder.
         * 
         * @return builder
         * 
         */
        public Builder capabilityName(String capabilityName) {
            return capabilityName(Output.of(capabilityName));
        }

        /**
         * @param parent Folder on which Capability needs to be updated in the format folders/folder_id.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Folder on which Capability needs to be updated in the format folders/folder_id.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param value Capability Value.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Boolean> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Capability Value.
         * 
         * @return builder
         * 
         */
        public Builder value(Boolean value) {
            return value(Output.of(value));
        }

        public CapabilityState build() {
            return $;
        }
    }

}
