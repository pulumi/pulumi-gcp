// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingIpConfigurationPscConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceSettingIpConfiguration {
    /**
     * @return The name of the allocated ip range for the private ip CloudSQL instance. For example: &#34;google-managed-services-default&#34;. If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
     * 
     */
    private String allocatedIpRange;
    private List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks;
    /**
     * @return Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
     * 
     */
    private Boolean enablePrivatePathForGoogleCloudServices;
    /**
     * @return Whether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
     * 
     */
    private Boolean ipv4Enabled;
    /**
     * @return The VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default. Specifying a network enables private IP. At least ipv4_enabled must be enabled or a private_network must be configured. This setting can be updated, but it cannot be removed after it is set.
     * 
     */
    private String privateNetwork;
    /**
     * @return PSC settings for a Cloud SQL instance.
     * 
     */
    private List<GetDatabaseInstanceSettingIpConfigurationPscConfig> pscConfigs;
    /**
     * @return Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in ssl_mode if it has been set too.
     * 
     */
    private Boolean requireSsl;
    /**
     * @return Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcment options compared to require_ssl. To change this field, also set the correspoding value in require_ssl.
     * 
     */
    private String sslMode;

    private GetDatabaseInstanceSettingIpConfiguration() {}
    /**
     * @return The name of the allocated ip range for the private ip CloudSQL instance. For example: &#34;google-managed-services-default&#34;. If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
     * 
     */
    public String allocatedIpRange() {
        return this.allocatedIpRange;
    }
    public List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks() {
        return this.authorizedNetworks;
    }
    /**
     * @return Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
     * 
     */
    public Boolean enablePrivatePathForGoogleCloudServices() {
        return this.enablePrivatePathForGoogleCloudServices;
    }
    /**
     * @return Whether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
     * 
     */
    public Boolean ipv4Enabled() {
        return this.ipv4Enabled;
    }
    /**
     * @return The VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default. Specifying a network enables private IP. At least ipv4_enabled must be enabled or a private_network must be configured. This setting can be updated, but it cannot be removed after it is set.
     * 
     */
    public String privateNetwork() {
        return this.privateNetwork;
    }
    /**
     * @return PSC settings for a Cloud SQL instance.
     * 
     */
    public List<GetDatabaseInstanceSettingIpConfigurationPscConfig> pscConfigs() {
        return this.pscConfigs;
    }
    /**
     * @return Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in ssl_mode if it has been set too.
     * 
     */
    public Boolean requireSsl() {
        return this.requireSsl;
    }
    /**
     * @return Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcment options compared to require_ssl. To change this field, also set the correspoding value in require_ssl.
     * 
     */
    public String sslMode() {
        return this.sslMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceSettingIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allocatedIpRange;
        private List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks;
        private Boolean enablePrivatePathForGoogleCloudServices;
        private Boolean ipv4Enabled;
        private String privateNetwork;
        private List<GetDatabaseInstanceSettingIpConfigurationPscConfig> pscConfigs;
        private Boolean requireSsl;
        private String sslMode;
        public Builder() {}
        public Builder(GetDatabaseInstanceSettingIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpRange = defaults.allocatedIpRange;
    	      this.authorizedNetworks = defaults.authorizedNetworks;
    	      this.enablePrivatePathForGoogleCloudServices = defaults.enablePrivatePathForGoogleCloudServices;
    	      this.ipv4Enabled = defaults.ipv4Enabled;
    	      this.privateNetwork = defaults.privateNetwork;
    	      this.pscConfigs = defaults.pscConfigs;
    	      this.requireSsl = defaults.requireSsl;
    	      this.sslMode = defaults.sslMode;
        }

        @CustomType.Setter
        public Builder allocatedIpRange(String allocatedIpRange) {
            if (allocatedIpRange == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "allocatedIpRange");
            }
            this.allocatedIpRange = allocatedIpRange;
            return this;
        }
        @CustomType.Setter
        public Builder authorizedNetworks(List<GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork> authorizedNetworks) {
            if (authorizedNetworks == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "authorizedNetworks");
            }
            this.authorizedNetworks = authorizedNetworks;
            return this;
        }
        public Builder authorizedNetworks(GetDatabaseInstanceSettingIpConfigurationAuthorizedNetwork... authorizedNetworks) {
            return authorizedNetworks(List.of(authorizedNetworks));
        }
        @CustomType.Setter
        public Builder enablePrivatePathForGoogleCloudServices(Boolean enablePrivatePathForGoogleCloudServices) {
            if (enablePrivatePathForGoogleCloudServices == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "enablePrivatePathForGoogleCloudServices");
            }
            this.enablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Enabled(Boolean ipv4Enabled) {
            if (ipv4Enabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "ipv4Enabled");
            }
            this.ipv4Enabled = ipv4Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder privateNetwork(String privateNetwork) {
            if (privateNetwork == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "privateNetwork");
            }
            this.privateNetwork = privateNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder pscConfigs(List<GetDatabaseInstanceSettingIpConfigurationPscConfig> pscConfigs) {
            if (pscConfigs == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "pscConfigs");
            }
            this.pscConfigs = pscConfigs;
            return this;
        }
        public Builder pscConfigs(GetDatabaseInstanceSettingIpConfigurationPscConfig... pscConfigs) {
            return pscConfigs(List.of(pscConfigs));
        }
        @CustomType.Setter
        public Builder requireSsl(Boolean requireSsl) {
            if (requireSsl == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "requireSsl");
            }
            this.requireSsl = requireSsl;
            return this;
        }
        @CustomType.Setter
        public Builder sslMode(String sslMode) {
            if (sslMode == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSettingIpConfiguration", "sslMode");
            }
            this.sslMode = sslMode;
            return this;
        }
        public GetDatabaseInstanceSettingIpConfiguration build() {
            final var _resultValue = new GetDatabaseInstanceSettingIpConfiguration();
            _resultValue.allocatedIpRange = allocatedIpRange;
            _resultValue.authorizedNetworks = authorizedNetworks;
            _resultValue.enablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
            _resultValue.ipv4Enabled = ipv4Enabled;
            _resultValue.privateNetwork = privateNetwork;
            _resultValue.pscConfigs = pscConfigs;
            _resultValue.requireSsl = requireSsl;
            _resultValue.sslMode = sslMode;
            return _resultValue;
        }
    }
}
