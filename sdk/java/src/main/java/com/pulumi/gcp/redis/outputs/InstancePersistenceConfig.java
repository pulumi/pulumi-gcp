// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstancePersistenceConfig {
    /**
     * @return Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
     * - DISABLED: 	Persistence is disabled for the instance, and any existing snapshots are deleted.
     * - RDB: RDB based Persistence is enabled.
     *   Possible values are `DISABLED` and `RDB`.
     * 
     */
    private @Nullable String persistenceMode;
    /**
     * @return Output only. The next time that a snapshot attempt is scheduled to occur.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up
     * to nine fractional digits.
     * Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    private @Nullable String rdbNextSnapshotTime;
    /**
     * @return Optional. Available snapshot periods for scheduling.
     * - ONE_HOUR:	Snapshot every 1 hour.
     * - SIX_HOURS:	Snapshot every 6 hours.
     * - TWELVE_HOURS:	Snapshot every 12 hours.
     * - TWENTY_FOUR_HOURS:	Snapshot every 24 horus.
     *   Possible values are `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, and `TWENTY_FOUR_HOURS`.
     * 
     */
    private @Nullable String rdbSnapshotPeriod;
    /**
     * @return Optional. Date and time that the first snapshot was/will be attempted,
     * and to which future snapshots will be aligned. If not provided,
     * the current time will be used.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution
     * and up to nine fractional digits.
     * Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    private @Nullable String rdbSnapshotStartTime;

    private InstancePersistenceConfig() {}
    /**
     * @return Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
     * - DISABLED: 	Persistence is disabled for the instance, and any existing snapshots are deleted.
     * - RDB: RDB based Persistence is enabled.
     *   Possible values are `DISABLED` and `RDB`.
     * 
     */
    public Optional<String> persistenceMode() {
        return Optional.ofNullable(this.persistenceMode);
    }
    /**
     * @return Output only. The next time that a snapshot attempt is scheduled to occur.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up
     * to nine fractional digits.
     * Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<String> rdbNextSnapshotTime() {
        return Optional.ofNullable(this.rdbNextSnapshotTime);
    }
    /**
     * @return Optional. Available snapshot periods for scheduling.
     * - ONE_HOUR:	Snapshot every 1 hour.
     * - SIX_HOURS:	Snapshot every 6 hours.
     * - TWELVE_HOURS:	Snapshot every 12 hours.
     * - TWENTY_FOUR_HOURS:	Snapshot every 24 horus.
     *   Possible values are `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, and `TWENTY_FOUR_HOURS`.
     * 
     */
    public Optional<String> rdbSnapshotPeriod() {
        return Optional.ofNullable(this.rdbSnapshotPeriod);
    }
    /**
     * @return Optional. Date and time that the first snapshot was/will be attempted,
     * and to which future snapshots will be aligned. If not provided,
     * the current time will be used.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution
     * and up to nine fractional digits.
     * Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<String> rdbSnapshotStartTime() {
        return Optional.ofNullable(this.rdbSnapshotStartTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstancePersistenceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String persistenceMode;
        private @Nullable String rdbNextSnapshotTime;
        private @Nullable String rdbSnapshotPeriod;
        private @Nullable String rdbSnapshotStartTime;
        public Builder() {}
        public Builder(InstancePersistenceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.persistenceMode = defaults.persistenceMode;
    	      this.rdbNextSnapshotTime = defaults.rdbNextSnapshotTime;
    	      this.rdbSnapshotPeriod = defaults.rdbSnapshotPeriod;
    	      this.rdbSnapshotStartTime = defaults.rdbSnapshotStartTime;
        }

        @CustomType.Setter
        public Builder persistenceMode(@Nullable String persistenceMode) {
            this.persistenceMode = persistenceMode;
            return this;
        }
        @CustomType.Setter
        public Builder rdbNextSnapshotTime(@Nullable String rdbNextSnapshotTime) {
            this.rdbNextSnapshotTime = rdbNextSnapshotTime;
            return this;
        }
        @CustomType.Setter
        public Builder rdbSnapshotPeriod(@Nullable String rdbSnapshotPeriod) {
            this.rdbSnapshotPeriod = rdbSnapshotPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder rdbSnapshotStartTime(@Nullable String rdbSnapshotStartTime) {
            this.rdbSnapshotStartTime = rdbSnapshotStartTime;
            return this;
        }
        public InstancePersistenceConfig build() {
            final var o = new InstancePersistenceConfig();
            o.persistenceMode = persistenceMode;
            o.rdbNextSnapshotTime = rdbNextSnapshotTime;
            o.rdbSnapshotPeriod = rdbSnapshotPeriod;
            o.rdbSnapshotStartTime = rdbSnapshotStartTime;
            return o;
        }
    }
}
