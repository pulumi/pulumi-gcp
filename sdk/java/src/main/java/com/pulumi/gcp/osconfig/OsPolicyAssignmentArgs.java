// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentInstanceFilterArgs;
import com.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentOsPolicyArgs;
import com.pulumi.gcp.osconfig.inputs.OsPolicyAssignmentRolloutArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OsPolicyAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final OsPolicyAssignmentArgs Empty = new OsPolicyAssignmentArgs();

    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return OS policy assignment description. Length of the description is limited to 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Required. Filter to select VMs.
     * 
     */
    @Import(name="instanceFilter", required=true)
    private Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter;

    /**
     * @return Required. Filter to select VMs.
     * 
     */
    public Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter() {
        return this.instanceFilter;
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Required. The name of the repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Required. The name of the repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Required. List of OS policies to be applied to the VMs.
     * 
     */
    @Import(name="osPolicies", required=true)
    private Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies;

    /**
     * @return Required. List of OS policies to be applied to the VMs.
     * 
     */
    public Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies() {
        return this.osPolicies;
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     * 
     */
    @Import(name="rollout", required=true)
    private Output<OsPolicyAssignmentRolloutArgs> rollout;

    /**
     * @return Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     * 
     */
    public Output<OsPolicyAssignmentRolloutArgs> rollout() {
        return this.rollout;
    }

    /**
     * Set to true to skip awaiting rollout during resource creation and update.
     * 
     */
    @Import(name="skipAwaitRollout")
    private @Nullable Output<Boolean> skipAwaitRollout;

    /**
     * @return Set to true to skip awaiting rollout during resource creation and update.
     * 
     */
    public Optional<Output<Boolean>> skipAwaitRollout() {
        return Optional.ofNullable(this.skipAwaitRollout);
    }

    private OsPolicyAssignmentArgs() {}

    private OsPolicyAssignmentArgs(OsPolicyAssignmentArgs $) {
        this.description = $.description;
        this.instanceFilter = $.instanceFilter;
        this.location = $.location;
        this.name = $.name;
        this.osPolicies = $.osPolicies;
        this.project = $.project;
        this.rollout = $.rollout;
        this.skipAwaitRollout = $.skipAwaitRollout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OsPolicyAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OsPolicyAssignmentArgs $;

        public Builder() {
            $ = new OsPolicyAssignmentArgs();
        }

        public Builder(OsPolicyAssignmentArgs defaults) {
            $ = new OsPolicyAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description OS policy assignment description. Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description OS policy assignment description. Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instanceFilter Required. Filter to select VMs.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(Output<OsPolicyAssignmentInstanceFilterArgs> instanceFilter) {
            $.instanceFilter = instanceFilter;
            return this;
        }

        /**
         * @param instanceFilter Required. Filter to select VMs.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(OsPolicyAssignmentInstanceFilterArgs instanceFilter) {
            return instanceFilter(Output.of(instanceFilter));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Required. The name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required. The name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osPolicies Required. List of OS policies to be applied to the VMs.
         * 
         * @return builder
         * 
         */
        public Builder osPolicies(Output<List<OsPolicyAssignmentOsPolicyArgs>> osPolicies) {
            $.osPolicies = osPolicies;
            return this;
        }

        /**
         * @param osPolicies Required. List of OS policies to be applied to the VMs.
         * 
         * @return builder
         * 
         */
        public Builder osPolicies(List<OsPolicyAssignmentOsPolicyArgs> osPolicies) {
            return osPolicies(Output.of(osPolicies));
        }

        /**
         * @param osPolicies Required. List of OS policies to be applied to the VMs.
         * 
         * @return builder
         * 
         */
        public Builder osPolicies(OsPolicyAssignmentOsPolicyArgs... osPolicies) {
            return osPolicies(List.of(osPolicies));
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rollout Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
         * 
         * @return builder
         * 
         */
        public Builder rollout(Output<OsPolicyAssignmentRolloutArgs> rollout) {
            $.rollout = rollout;
            return this;
        }

        /**
         * @param rollout Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
         * 
         * @return builder
         * 
         */
        public Builder rollout(OsPolicyAssignmentRolloutArgs rollout) {
            return rollout(Output.of(rollout));
        }

        /**
         * @param skipAwaitRollout Set to true to skip awaiting rollout during resource creation and update.
         * 
         * @return builder
         * 
         */
        public Builder skipAwaitRollout(@Nullable Output<Boolean> skipAwaitRollout) {
            $.skipAwaitRollout = skipAwaitRollout;
            return this;
        }

        /**
         * @param skipAwaitRollout Set to true to skip awaiting rollout during resource creation and update.
         * 
         * @return builder
         * 
         */
        public Builder skipAwaitRollout(Boolean skipAwaitRollout) {
            return skipAwaitRollout(Output.of(skipAwaitRollout));
        }

        public OsPolicyAssignmentArgs build() {
            $.instanceFilter = Objects.requireNonNull($.instanceFilter, "expected parameter 'instanceFilter' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.osPolicies = Objects.requireNonNull($.osPolicies, "expected parameter 'osPolicies' to be non-null");
            $.rollout = Objects.requireNonNull($.rollout, "expected parameter 'rollout' to be non-null");
            return $;
        }
    }

}
