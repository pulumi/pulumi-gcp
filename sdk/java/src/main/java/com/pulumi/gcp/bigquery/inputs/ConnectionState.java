// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.ConnectionAwsArgs;
import com.pulumi.gcp.bigquery.inputs.ConnectionAzureArgs;
import com.pulumi.gcp.bigquery.inputs.ConnectionCloudResourceArgs;
import com.pulumi.gcp.bigquery.inputs.ConnectionCloudSpannerArgs;
import com.pulumi.gcp.bigquery.inputs.ConnectionCloudSqlArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionState Empty = new ConnectionState();

    /**
     * Connection properties specific to Amazon Web Services.
     * Structure is documented below.
     * 
     */
    @Import(name="aws")
    private @Nullable Output<ConnectionAwsArgs> aws;

    /**
     * @return Connection properties specific to Amazon Web Services.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionAwsArgs>> aws() {
        return Optional.ofNullable(this.aws);
    }

    /**
     * Container for connection properties specific to Azure.
     * Structure is documented below.
     * 
     */
    @Import(name="azure")
    private @Nullable Output<ConnectionAzureArgs> azure;

    /**
     * @return Container for connection properties specific to Azure.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionAzureArgs>> azure() {
        return Optional.ofNullable(this.azure);
    }

    /**
     * Container for connection properties for delegation of access to GCP resources.
     * Structure is documented below.
     * 
     */
    @Import(name="cloudResource")
    private @Nullable Output<ConnectionCloudResourceArgs> cloudResource;

    /**
     * @return Container for connection properties for delegation of access to GCP resources.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionCloudResourceArgs>> cloudResource() {
        return Optional.ofNullable(this.cloudResource);
    }

    /**
     * Connection properties specific to Cloud Spanner
     * Structure is documented below.
     * 
     */
    @Import(name="cloudSpanner")
    private @Nullable Output<ConnectionCloudSpannerArgs> cloudSpanner;

    /**
     * @return Connection properties specific to Cloud Spanner
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionCloudSpannerArgs>> cloudSpanner() {
        return Optional.ofNullable(this.cloudSpanner);
    }

    /**
     * Connection properties specific to the Cloud SQL.
     * Structure is documented below.
     * 
     */
    @Import(name="cloudSql")
    private @Nullable Output<ConnectionCloudSqlArgs> cloudSql;

    /**
     * @return Connection properties specific to the Cloud SQL.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionCloudSqlArgs>> cloudSql() {
        return Optional.ofNullable(this.cloudSql);
    }

    /**
     * Optional connection id that should be assigned to the created connection.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return Optional connection id that should be assigned to the created connection.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * A descriptive description for the connection
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A descriptive description for the connection
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A descriptive name for the connection
     * 
     */
    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    /**
     * @return A descriptive name for the connection
     * 
     */
    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * True if the connection has credential assigned.
     * 
     */
    @Import(name="hasCredential")
    private @Nullable Output<Boolean> hasCredential;

    /**
     * @return True if the connection has credential assigned.
     * 
     */
    public Optional<Output<Boolean>> hasCredential() {
        return Optional.ofNullable(this.hasCredential);
    }

    /**
     * The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
     * Spanner Connections same as spanner region
     * AWS allowed regions are aws-us-east-1
     * Azure allowed regions are azure-eastus2
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the connection should reside.
     * Cloud SQL instance must be in the same location as the connection
     * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
     * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
     * Spanner Connections same as spanner region
     * AWS allowed regions are aws-us-east-1
     * Azure allowed regions are azure-eastus2
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the connection in the form of:
     * &#34;projects/{project_id}/locations/{location_id}/connections/{connectionId}&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the connection in the form of:
     * &#34;projects/{project_id}/locations/{location_id}/connections/{connectionId}&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ConnectionState() {}

    private ConnectionState(ConnectionState $) {
        this.aws = $.aws;
        this.azure = $.azure;
        this.cloudResource = $.cloudResource;
        this.cloudSpanner = $.cloudSpanner;
        this.cloudSql = $.cloudSql;
        this.connectionId = $.connectionId;
        this.description = $.description;
        this.friendlyName = $.friendlyName;
        this.hasCredential = $.hasCredential;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionState $;

        public Builder() {
            $ = new ConnectionState();
        }

        public Builder(ConnectionState defaults) {
            $ = new ConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aws Connection properties specific to Amazon Web Services.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aws(@Nullable Output<ConnectionAwsArgs> aws) {
            $.aws = aws;
            return this;
        }

        /**
         * @param aws Connection properties specific to Amazon Web Services.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aws(ConnectionAwsArgs aws) {
            return aws(Output.of(aws));
        }

        /**
         * @param azure Container for connection properties specific to Azure.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder azure(@Nullable Output<ConnectionAzureArgs> azure) {
            $.azure = azure;
            return this;
        }

        /**
         * @param azure Container for connection properties specific to Azure.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder azure(ConnectionAzureArgs azure) {
            return azure(Output.of(azure));
        }

        /**
         * @param cloudResource Container for connection properties for delegation of access to GCP resources.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudResource(@Nullable Output<ConnectionCloudResourceArgs> cloudResource) {
            $.cloudResource = cloudResource;
            return this;
        }

        /**
         * @param cloudResource Container for connection properties for delegation of access to GCP resources.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudResource(ConnectionCloudResourceArgs cloudResource) {
            return cloudResource(Output.of(cloudResource));
        }

        /**
         * @param cloudSpanner Connection properties specific to Cloud Spanner
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudSpanner(@Nullable Output<ConnectionCloudSpannerArgs> cloudSpanner) {
            $.cloudSpanner = cloudSpanner;
            return this;
        }

        /**
         * @param cloudSpanner Connection properties specific to Cloud Spanner
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudSpanner(ConnectionCloudSpannerArgs cloudSpanner) {
            return cloudSpanner(Output.of(cloudSpanner));
        }

        /**
         * @param cloudSql Connection properties specific to the Cloud SQL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudSql(@Nullable Output<ConnectionCloudSqlArgs> cloudSql) {
            $.cloudSql = cloudSql;
            return this;
        }

        /**
         * @param cloudSql Connection properties specific to the Cloud SQL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudSql(ConnectionCloudSqlArgs cloudSql) {
            return cloudSql(Output.of(cloudSql));
        }

        /**
         * @param connectionId Optional connection id that should be assigned to the created connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Optional connection id that should be assigned to the created connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param description A descriptive description for the connection
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A descriptive description for the connection
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param friendlyName A descriptive name for the connection
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param friendlyName A descriptive name for the connection
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        /**
         * @param hasCredential True if the connection has credential assigned.
         * 
         * @return builder
         * 
         */
        public Builder hasCredential(@Nullable Output<Boolean> hasCredential) {
            $.hasCredential = hasCredential;
            return this;
        }

        /**
         * @param hasCredential True if the connection has credential assigned.
         * 
         * @return builder
         * 
         */
        public Builder hasCredential(Boolean hasCredential) {
            return hasCredential(Output.of(hasCredential));
        }

        /**
         * @param location The geographic location where the connection should reside.
         * Cloud SQL instance must be in the same location as the connection
         * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
         * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
         * Spanner Connections same as spanner region
         * AWS allowed regions are aws-us-east-1
         * Azure allowed regions are azure-eastus2
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the connection should reside.
         * Cloud SQL instance must be in the same location as the connection
         * with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
         * Examples: US, EU, asia-northeast1, us-central1, europe-west1.
         * Spanner Connections same as spanner region
         * AWS allowed regions are aws-us-east-1
         * Azure allowed regions are azure-eastus2
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the connection in the form of:
         * &#34;projects/{project_id}/locations/{location_id}/connections/{connectionId}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the connection in the form of:
         * &#34;projects/{project_id}/locations/{location_id}/connections/{connectionId}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ConnectionState build() {
            return $;
        }
    }

}
