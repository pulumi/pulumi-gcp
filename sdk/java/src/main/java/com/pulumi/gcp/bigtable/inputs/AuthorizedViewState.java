// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigtable.inputs.AuthorizedViewSubsetViewArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizedViewState extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizedViewState Empty = new AuthorizedViewState();

    @Import(name="deletionProtection")
    private @Nullable Output<String> deletionProtection;

    public Optional<Output<String>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * The name of the Bigtable instance in which the authorized view belongs.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the Bigtable instance in which the authorized view belongs.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     * 
     * ***
     * 
     */
    @Import(name="subsetView")
    private @Nullable Output<AuthorizedViewSubsetViewArgs> subsetView;

    /**
     * @return An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     * 
     * ***
     * 
     */
    public Optional<Output<AuthorizedViewSubsetViewArgs>> subsetView() {
        return Optional.ofNullable(this.subsetView);
    }

    /**
     * The name of the Bigtable table in which the authorized view belongs.
     * 
     */
    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    /**
     * @return The name of the Bigtable table in which the authorized view belongs.
     * 
     */
    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    private AuthorizedViewState() {}

    private AuthorizedViewState(AuthorizedViewState $) {
        this.deletionProtection = $.deletionProtection;
        this.instanceName = $.instanceName;
        this.name = $.name;
        this.project = $.project;
        this.subsetView = $.subsetView;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizedViewState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizedViewState $;

        public Builder() {
            $ = new AuthorizedViewState();
        }

        public Builder(AuthorizedViewState defaults) {
            $ = new AuthorizedViewState(Objects.requireNonNull(defaults));
        }

        public Builder deletionProtection(@Nullable Output<String> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(String deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param instanceName The name of the Bigtable instance in which the authorized view belongs.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the Bigtable instance in which the authorized view belongs.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param name The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param subsetView An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder subsetView(@Nullable Output<AuthorizedViewSubsetViewArgs> subsetView) {
            $.subsetView = subsetView;
            return this;
        }

        /**
         * @param subsetView An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder subsetView(AuthorizedViewSubsetViewArgs subsetView) {
            return subsetView(Output.of(subsetView));
        }

        /**
         * @param tableName The name of the Bigtable table in which the authorized view belongs.
         * 
         * @return builder
         * 
         */
        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the Bigtable table in which the authorized view belongs.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public AuthorizedViewState build() {
            return $;
        }
    }

}
