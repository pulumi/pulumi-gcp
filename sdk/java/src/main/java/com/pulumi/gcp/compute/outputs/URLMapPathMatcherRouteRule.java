// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherRouteRuleHeaderAction;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherRouteRuleMatchRule;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherRouteRuleRouteAction;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherRouteRuleUrlRedirect;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class URLMapPathMatcherRouteRule {
    /**
     * @return Specifies changes to request and response headers that need to take effect for
     * the selected backendService. The headerAction specified here are applied before
     * the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].r
     * outeAction.weightedBackendService.backendServiceWeightAction[].headerAction
     * Structure is documented below.
     * 
     */
    private @Nullable URLMapPathMatcherRouteRuleHeaderAction headerAction;
    /**
     * @return The rules for determining a match.
     * Structure is documented below.
     * 
     */
    private @Nullable List<URLMapPathMatcherRouteRuleMatchRule> matchRules;
    /**
     * @return For routeRules within a given pathMatcher, priority determines the order
     * in which load balancer will interpret routeRules. RouteRules are evaluated
     * in order of priority, from the lowest to highest number. The priority of
     * a rule decreases as its number increases (1, 2, 3, N+1). The first rule
     * that matches the request is applied.
     * You cannot configure two or more routeRules with the same priority.
     * Priority for each rule must be set to a number between 0 and
     * 2147483647 inclusive.
     * Priority numbers can have gaps, which enable you to add or remove rules
     * in the future without affecting the rest of the rules. For example,
     * 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
     * you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
     * future without any impact on existing rules.
     * 
     */
    private Integer priority;
    /**
     * @return In response to a matching matchRule, the load balancer performs advanced routing
     * actions like URL rewrites, header transformations, etc. prior to forwarding the
     * request to the selected backend. If  routeAction specifies any
     * weightedBackendServices, service must not be set. Conversely if service is set,
     * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
     * or urlRedirect must be set.
     * Structure is documented below.
     * 
     */
    private @Nullable URLMapPathMatcherRouteRuleRouteAction routeAction;
    /**
     * @return The backend service resource to which traffic is
     * directed if this rule is matched. If routeAction is additionally specified,
     * advanced routing actions like URL Rewrites, etc. take effect prior to sending
     * the request to the backend. However, if service is specified, routeAction cannot
     * contain any weightedBackendService s. Conversely, if routeAction specifies any
     * weightedBackendServices, service must not be specified. Only one of urlRedirect,
     * service or routeAction.weightedBackendService must be set.
     * 
     */
    private @Nullable String service;
    /**
     * @return When this rule is matched, the request is redirected to a URL specified by
     * urlRedirect. If urlRedirect is specified, service or routeAction must not be
     * set.
     * Structure is documented below.
     * 
     */
    private @Nullable URLMapPathMatcherRouteRuleUrlRedirect urlRedirect;

    private URLMapPathMatcherRouteRule() {}
    /**
     * @return Specifies changes to request and response headers that need to take effect for
     * the selected backendService. The headerAction specified here are applied before
     * the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].r
     * outeAction.weightedBackendService.backendServiceWeightAction[].headerAction
     * Structure is documented below.
     * 
     */
    public Optional<URLMapPathMatcherRouteRuleHeaderAction> headerAction() {
        return Optional.ofNullable(this.headerAction);
    }
    /**
     * @return The rules for determining a match.
     * Structure is documented below.
     * 
     */
    public List<URLMapPathMatcherRouteRuleMatchRule> matchRules() {
        return this.matchRules == null ? List.of() : this.matchRules;
    }
    /**
     * @return For routeRules within a given pathMatcher, priority determines the order
     * in which load balancer will interpret routeRules. RouteRules are evaluated
     * in order of priority, from the lowest to highest number. The priority of
     * a rule decreases as its number increases (1, 2, 3, N+1). The first rule
     * that matches the request is applied.
     * You cannot configure two or more routeRules with the same priority.
     * Priority for each rule must be set to a number between 0 and
     * 2147483647 inclusive.
     * Priority numbers can have gaps, which enable you to add or remove rules
     * in the future without affecting the rest of the rules. For example,
     * 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
     * you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
     * future without any impact on existing rules.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return In response to a matching matchRule, the load balancer performs advanced routing
     * actions like URL rewrites, header transformations, etc. prior to forwarding the
     * request to the selected backend. If  routeAction specifies any
     * weightedBackendServices, service must not be set. Conversely if service is set,
     * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
     * or urlRedirect must be set.
     * Structure is documented below.
     * 
     */
    public Optional<URLMapPathMatcherRouteRuleRouteAction> routeAction() {
        return Optional.ofNullable(this.routeAction);
    }
    /**
     * @return The backend service resource to which traffic is
     * directed if this rule is matched. If routeAction is additionally specified,
     * advanced routing actions like URL Rewrites, etc. take effect prior to sending
     * the request to the backend. However, if service is specified, routeAction cannot
     * contain any weightedBackendService s. Conversely, if routeAction specifies any
     * weightedBackendServices, service must not be specified. Only one of urlRedirect,
     * service or routeAction.weightedBackendService must be set.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return When this rule is matched, the request is redirected to a URL specified by
     * urlRedirect. If urlRedirect is specified, service or routeAction must not be
     * set.
     * Structure is documented below.
     * 
     */
    public Optional<URLMapPathMatcherRouteRuleUrlRedirect> urlRedirect() {
        return Optional.ofNullable(this.urlRedirect);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapPathMatcherRouteRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable URLMapPathMatcherRouteRuleHeaderAction headerAction;
        private @Nullable List<URLMapPathMatcherRouteRuleMatchRule> matchRules;
        private Integer priority;
        private @Nullable URLMapPathMatcherRouteRuleRouteAction routeAction;
        private @Nullable String service;
        private @Nullable URLMapPathMatcherRouteRuleUrlRedirect urlRedirect;
        public Builder() {}
        public Builder(URLMapPathMatcherRouteRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headerAction = defaults.headerAction;
    	      this.matchRules = defaults.matchRules;
    	      this.priority = defaults.priority;
    	      this.routeAction = defaults.routeAction;
    	      this.service = defaults.service;
    	      this.urlRedirect = defaults.urlRedirect;
        }

        @CustomType.Setter
        public Builder headerAction(@Nullable URLMapPathMatcherRouteRuleHeaderAction headerAction) {
            this.headerAction = headerAction;
            return this;
        }
        @CustomType.Setter
        public Builder matchRules(@Nullable List<URLMapPathMatcherRouteRuleMatchRule> matchRules) {
            this.matchRules = matchRules;
            return this;
        }
        public Builder matchRules(URLMapPathMatcherRouteRuleMatchRule... matchRules) {
            return matchRules(List.of(matchRules));
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder routeAction(@Nullable URLMapPathMatcherRouteRuleRouteAction routeAction) {
            this.routeAction = routeAction;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder urlRedirect(@Nullable URLMapPathMatcherRouteRuleUrlRedirect urlRedirect) {
            this.urlRedirect = urlRedirect;
            return this;
        }
        public URLMapPathMatcherRouteRule build() {
            final var o = new URLMapPathMatcherRouteRule();
            o.headerAction = headerAction;
            o.matchRules = matchRules;
            o.priority = priority;
            o.routeAction = routeAction;
            o.service = service;
            o.urlRedirect = urlRedirect;
            return o;
        }
    }
}
