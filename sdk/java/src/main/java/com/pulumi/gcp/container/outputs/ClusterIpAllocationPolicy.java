// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.ClusterIpAllocationPolicyAdditionalIpRangesConfig;
import com.pulumi.gcp.container.outputs.ClusterIpAllocationPolicyAdditionalPodRangesConfig;
import com.pulumi.gcp.container.outputs.ClusterIpAllocationPolicyAutoIpamConfig;
import com.pulumi.gcp.container.outputs.ClusterIpAllocationPolicyPodCidrOverprovisionConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterIpAllocationPolicy {
    /**
     * @return The configuration for individual additional subnetworks attached to the cluster.
     * Structure is documented below.
     * 
     */
    private @Nullable List<ClusterIpAllocationPolicyAdditionalIpRangesConfig> additionalIpRangesConfigs;
    /**
     * @return The configuration for additional pod secondary ranges at
     * the cluster level. Used for Autopilot clusters and Standard clusters with which control of the
     * secondary Pod IP address assignment to node pools isn&#39;t needed. Structure is documented below.
     * 
     */
    private @Nullable ClusterIpAllocationPolicyAdditionalPodRangesConfig additionalPodRangesConfig;
    /**
     * @return All the information related to Auto IPAM. Structure is documented below
     * 
     * &lt;a name=&#34;nested_auto_ipam_config&#34;&gt;&lt;/a&gt;The auto ipam config supports:
     * 
     */
    private @Nullable ClusterIpAllocationPolicyAutoIpamConfig autoIpamConfig;
    /**
     * @return The IP address range for the cluster pod IPs.
     * Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
     * to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
     * from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
     * pick a specific range to use.
     * 
     */
    private @Nullable String clusterIpv4CidrBlock;
    /**
     * @return The name of the existing secondary
     * range in the cluster&#39;s subnetwork to use for pod IP addresses. Alternatively,
     * `cluster_ipv4_cidr_block` can be used to automatically create a GKE-managed one.
     * 
     */
    private @Nullable String clusterSecondaryRangeName;
    /**
     * @return Configuration for cluster level pod cidr overprovision. Default is disabled=false.
     * 
     */
    private @Nullable ClusterIpAllocationPolicyPodCidrOverprovisionConfig podCidrOverprovisionConfig;
    /**
     * @return The IP address range of the services IPs in this cluster.
     * Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
     * to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
     * from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
     * pick a specific range to use.
     * 
     */
    private @Nullable String servicesIpv4CidrBlock;
    /**
     * @return The name of the existing
     * secondary range in the cluster&#39;s subnetwork to use for service `ClusterIP`s.
     * Alternatively, `services_ipv4_cidr_block` can be used to automatically create a
     * GKE-managed one.
     * 
     */
    private @Nullable String servicesSecondaryRangeName;
    /**
     * @return The IP Stack Type of the cluster.
     * Default value is `IPV4`.
     * Possible values are `IPV4` and `IPV4_IPV6`.
     * 
     */
    private @Nullable String stackType;

    private ClusterIpAllocationPolicy() {}
    /**
     * @return The configuration for individual additional subnetworks attached to the cluster.
     * Structure is documented below.
     * 
     */
    public List<ClusterIpAllocationPolicyAdditionalIpRangesConfig> additionalIpRangesConfigs() {
        return this.additionalIpRangesConfigs == null ? List.of() : this.additionalIpRangesConfigs;
    }
    /**
     * @return The configuration for additional pod secondary ranges at
     * the cluster level. Used for Autopilot clusters and Standard clusters with which control of the
     * secondary Pod IP address assignment to node pools isn&#39;t needed. Structure is documented below.
     * 
     */
    public Optional<ClusterIpAllocationPolicyAdditionalPodRangesConfig> additionalPodRangesConfig() {
        return Optional.ofNullable(this.additionalPodRangesConfig);
    }
    /**
     * @return All the information related to Auto IPAM. Structure is documented below
     * 
     * &lt;a name=&#34;nested_auto_ipam_config&#34;&gt;&lt;/a&gt;The auto ipam config supports:
     * 
     */
    public Optional<ClusterIpAllocationPolicyAutoIpamConfig> autoIpamConfig() {
        return Optional.ofNullable(this.autoIpamConfig);
    }
    /**
     * @return The IP address range for the cluster pod IPs.
     * Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
     * to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
     * from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
     * pick a specific range to use.
     * 
     */
    public Optional<String> clusterIpv4CidrBlock() {
        return Optional.ofNullable(this.clusterIpv4CidrBlock);
    }
    /**
     * @return The name of the existing secondary
     * range in the cluster&#39;s subnetwork to use for pod IP addresses. Alternatively,
     * `cluster_ipv4_cidr_block` can be used to automatically create a GKE-managed one.
     * 
     */
    public Optional<String> clusterSecondaryRangeName() {
        return Optional.ofNullable(this.clusterSecondaryRangeName);
    }
    /**
     * @return Configuration for cluster level pod cidr overprovision. Default is disabled=false.
     * 
     */
    public Optional<ClusterIpAllocationPolicyPodCidrOverprovisionConfig> podCidrOverprovisionConfig() {
        return Optional.ofNullable(this.podCidrOverprovisionConfig);
    }
    /**
     * @return The IP address range of the services IPs in this cluster.
     * Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14)
     * to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14)
     * from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to
     * pick a specific range to use.
     * 
     */
    public Optional<String> servicesIpv4CidrBlock() {
        return Optional.ofNullable(this.servicesIpv4CidrBlock);
    }
    /**
     * @return The name of the existing
     * secondary range in the cluster&#39;s subnetwork to use for service `ClusterIP`s.
     * Alternatively, `services_ipv4_cidr_block` can be used to automatically create a
     * GKE-managed one.
     * 
     */
    public Optional<String> servicesSecondaryRangeName() {
        return Optional.ofNullable(this.servicesSecondaryRangeName);
    }
    /**
     * @return The IP Stack Type of the cluster.
     * Default value is `IPV4`.
     * Possible values are `IPV4` and `IPV4_IPV6`.
     * 
     */
    public Optional<String> stackType() {
        return Optional.ofNullable(this.stackType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterIpAllocationPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ClusterIpAllocationPolicyAdditionalIpRangesConfig> additionalIpRangesConfigs;
        private @Nullable ClusterIpAllocationPolicyAdditionalPodRangesConfig additionalPodRangesConfig;
        private @Nullable ClusterIpAllocationPolicyAutoIpamConfig autoIpamConfig;
        private @Nullable String clusterIpv4CidrBlock;
        private @Nullable String clusterSecondaryRangeName;
        private @Nullable ClusterIpAllocationPolicyPodCidrOverprovisionConfig podCidrOverprovisionConfig;
        private @Nullable String servicesIpv4CidrBlock;
        private @Nullable String servicesSecondaryRangeName;
        private @Nullable String stackType;
        public Builder() {}
        public Builder(ClusterIpAllocationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalIpRangesConfigs = defaults.additionalIpRangesConfigs;
    	      this.additionalPodRangesConfig = defaults.additionalPodRangesConfig;
    	      this.autoIpamConfig = defaults.autoIpamConfig;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.clusterSecondaryRangeName = defaults.clusterSecondaryRangeName;
    	      this.podCidrOverprovisionConfig = defaults.podCidrOverprovisionConfig;
    	      this.servicesIpv4CidrBlock = defaults.servicesIpv4CidrBlock;
    	      this.servicesSecondaryRangeName = defaults.servicesSecondaryRangeName;
    	      this.stackType = defaults.stackType;
        }

        @CustomType.Setter
        public Builder additionalIpRangesConfigs(@Nullable List<ClusterIpAllocationPolicyAdditionalIpRangesConfig> additionalIpRangesConfigs) {

            this.additionalIpRangesConfigs = additionalIpRangesConfigs;
            return this;
        }
        public Builder additionalIpRangesConfigs(ClusterIpAllocationPolicyAdditionalIpRangesConfig... additionalIpRangesConfigs) {
            return additionalIpRangesConfigs(List.of(additionalIpRangesConfigs));
        }
        @CustomType.Setter
        public Builder additionalPodRangesConfig(@Nullable ClusterIpAllocationPolicyAdditionalPodRangesConfig additionalPodRangesConfig) {

            this.additionalPodRangesConfig = additionalPodRangesConfig;
            return this;
        }
        @CustomType.Setter
        public Builder autoIpamConfig(@Nullable ClusterIpAllocationPolicyAutoIpamConfig autoIpamConfig) {

            this.autoIpamConfig = autoIpamConfig;
            return this;
        }
        @CustomType.Setter
        public Builder clusterIpv4CidrBlock(@Nullable String clusterIpv4CidrBlock) {

            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder clusterSecondaryRangeName(@Nullable String clusterSecondaryRangeName) {

            this.clusterSecondaryRangeName = clusterSecondaryRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder podCidrOverprovisionConfig(@Nullable ClusterIpAllocationPolicyPodCidrOverprovisionConfig podCidrOverprovisionConfig) {

            this.podCidrOverprovisionConfig = podCidrOverprovisionConfig;
            return this;
        }
        @CustomType.Setter
        public Builder servicesIpv4CidrBlock(@Nullable String servicesIpv4CidrBlock) {

            this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder servicesSecondaryRangeName(@Nullable String servicesSecondaryRangeName) {

            this.servicesSecondaryRangeName = servicesSecondaryRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder stackType(@Nullable String stackType) {

            this.stackType = stackType;
            return this;
        }
        public ClusterIpAllocationPolicy build() {
            final var _resultValue = new ClusterIpAllocationPolicy();
            _resultValue.additionalIpRangesConfigs = additionalIpRangesConfigs;
            _resultValue.additionalPodRangesConfig = additionalPodRangesConfig;
            _resultValue.autoIpamConfig = autoIpamConfig;
            _resultValue.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            _resultValue.clusterSecondaryRangeName = clusterSecondaryRangeName;
            _resultValue.podCidrOverprovisionConfig = podCidrOverprovisionConfig;
            _resultValue.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            _resultValue.servicesSecondaryRangeName = servicesSecondaryRangeName;
            _resultValue.stackType = stackType;
            return _resultValue;
        }
    }
}
