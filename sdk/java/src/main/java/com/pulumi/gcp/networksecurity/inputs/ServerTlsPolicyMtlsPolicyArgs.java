// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyMtlsPolicyClientValidationCaArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerTlsPolicyMtlsPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerTlsPolicyMtlsPolicyArgs Empty = new ServerTlsPolicyMtlsPolicyArgs();

    /**
     * Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
     * Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
     * Structure is documented below.
     * 
     */
    @Import(name="clientValidationCas")
    private @Nullable Output<List<ServerTlsPolicyMtlsPolicyClientValidationCaArgs>> clientValidationCas;

    /**
     * @return Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
     * Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServerTlsPolicyMtlsPolicyClientValidationCaArgs>>> clientValidationCas() {
        return Optional.ofNullable(this.clientValidationCas);
    }

    /**
     * When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
     * Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
     * Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
     * 
     */
    @Import(name="clientValidationMode")
    private @Nullable Output<String> clientValidationMode;

    /**
     * @return When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
     * Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
     * Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
     * 
     */
    public Optional<Output<String>> clientValidationMode() {
        return Optional.ofNullable(this.clientValidationMode);
    }

    /**
     * Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
     * If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
     * Allowed only if the policy is to be used with external HTTPS load balancers.
     * 
     */
    @Import(name="clientValidationTrustConfig")
    private @Nullable Output<String> clientValidationTrustConfig;

    /**
     * @return Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
     * If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
     * Allowed only if the policy is to be used with external HTTPS load balancers.
     * 
     */
    public Optional<Output<String>> clientValidationTrustConfig() {
        return Optional.ofNullable(this.clientValidationTrustConfig);
    }

    private ServerTlsPolicyMtlsPolicyArgs() {}

    private ServerTlsPolicyMtlsPolicyArgs(ServerTlsPolicyMtlsPolicyArgs $) {
        this.clientValidationCas = $.clientValidationCas;
        this.clientValidationMode = $.clientValidationMode;
        this.clientValidationTrustConfig = $.clientValidationTrustConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerTlsPolicyMtlsPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerTlsPolicyMtlsPolicyArgs $;

        public Builder() {
            $ = new ServerTlsPolicyMtlsPolicyArgs();
        }

        public Builder(ServerTlsPolicyMtlsPolicyArgs defaults) {
            $ = new ServerTlsPolicyMtlsPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientValidationCas Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
         * Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationCas(@Nullable Output<List<ServerTlsPolicyMtlsPolicyClientValidationCaArgs>> clientValidationCas) {
            $.clientValidationCas = clientValidationCas;
            return this;
        }

        /**
         * @param clientValidationCas Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
         * Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationCas(List<ServerTlsPolicyMtlsPolicyClientValidationCaArgs> clientValidationCas) {
            return clientValidationCas(Output.of(clientValidationCas));
        }

        /**
         * @param clientValidationCas Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
         * Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationCas(ServerTlsPolicyMtlsPolicyClientValidationCaArgs... clientValidationCas) {
            return clientValidationCas(List.of(clientValidationCas));
        }

        /**
         * @param clientValidationMode When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
         * Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
         * Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationMode(@Nullable Output<String> clientValidationMode) {
            $.clientValidationMode = clientValidationMode;
            return this;
        }

        /**
         * @param clientValidationMode When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
         * Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
         * Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationMode(String clientValidationMode) {
            return clientValidationMode(Output.of(clientValidationMode));
        }

        /**
         * @param clientValidationTrustConfig Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
         * If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
         * Allowed only if the policy is to be used with external HTTPS load balancers.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationTrustConfig(@Nullable Output<String> clientValidationTrustConfig) {
            $.clientValidationTrustConfig = clientValidationTrustConfig;
            return this;
        }

        /**
         * @param clientValidationTrustConfig Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
         * If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
         * Allowed only if the policy is to be used with external HTTPS load balancers.
         * 
         * @return builder
         * 
         */
        public Builder clientValidationTrustConfig(String clientValidationTrustConfig) {
            return clientValidationTrustConfig(Output.of(clientValidationTrustConfig));
        }

        public ServerTlsPolicyMtlsPolicyArgs build() {
            return $;
        }
    }

}
