// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddeploy.inputs.CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomTargetTypeCustomActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomTargetTypeCustomActionsArgs Empty = new CustomTargetTypeCustomActionsArgs();

    /**
     * The Skaffold custom action responsible for deploy operations.
     * 
     */
    @Import(name="deployAction", required=true)
    private Output<String> deployAction;

    /**
     * @return The Skaffold custom action responsible for deploy operations.
     * 
     */
    public Output<String> deployAction() {
        return this.deployAction;
    }

    /**
     * List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.
     * Structure is documented below.
     * 
     */
    @Import(name="includeSkaffoldModules")
    private @Nullable Output<List<CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs>> includeSkaffoldModules;

    /**
     * @return List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs>>> includeSkaffoldModules() {
        return Optional.ofNullable(this.includeSkaffoldModules);
    }

    /**
     * The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via `skaffold render`.
     * 
     */
    @Import(name="renderAction")
    private @Nullable Output<String> renderAction;

    /**
     * @return The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via `skaffold render`.
     * 
     */
    public Optional<Output<String>> renderAction() {
        return Optional.ofNullable(this.renderAction);
    }

    private CustomTargetTypeCustomActionsArgs() {}

    private CustomTargetTypeCustomActionsArgs(CustomTargetTypeCustomActionsArgs $) {
        this.deployAction = $.deployAction;
        this.includeSkaffoldModules = $.includeSkaffoldModules;
        this.renderAction = $.renderAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomTargetTypeCustomActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomTargetTypeCustomActionsArgs $;

        public Builder() {
            $ = new CustomTargetTypeCustomActionsArgs();
        }

        public Builder(CustomTargetTypeCustomActionsArgs defaults) {
            $ = new CustomTargetTypeCustomActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deployAction The Skaffold custom action responsible for deploy operations.
         * 
         * @return builder
         * 
         */
        public Builder deployAction(Output<String> deployAction) {
            $.deployAction = deployAction;
            return this;
        }

        /**
         * @param deployAction The Skaffold custom action responsible for deploy operations.
         * 
         * @return builder
         * 
         */
        public Builder deployAction(String deployAction) {
            return deployAction(Output.of(deployAction));
        }

        /**
         * @param includeSkaffoldModules List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeSkaffoldModules(@Nullable Output<List<CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs>> includeSkaffoldModules) {
            $.includeSkaffoldModules = includeSkaffoldModules;
            return this;
        }

        /**
         * @param includeSkaffoldModules List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeSkaffoldModules(List<CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs> includeSkaffoldModules) {
            return includeSkaffoldModules(Output.of(includeSkaffoldModules));
        }

        /**
         * @param includeSkaffoldModules List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder includeSkaffoldModules(CustomTargetTypeCustomActionsIncludeSkaffoldModuleArgs... includeSkaffoldModules) {
            return includeSkaffoldModules(List.of(includeSkaffoldModules));
        }

        /**
         * @param renderAction The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via `skaffold render`.
         * 
         * @return builder
         * 
         */
        public Builder renderAction(@Nullable Output<String> renderAction) {
            $.renderAction = renderAction;
            return this;
        }

        /**
         * @param renderAction The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via `skaffold render`.
         * 
         * @return builder
         * 
         */
        public Builder renderAction(String renderAction) {
            return renderAction(Output.of(renderAction));
        }

        public CustomTargetTypeCustomActionsArgs build() {
            if ($.deployAction == null) {
                throw new MissingRequiredPropertyException("CustomTargetTypeCustomActionsArgs", "deployAction");
            }
            return $;
        }
    }

}
