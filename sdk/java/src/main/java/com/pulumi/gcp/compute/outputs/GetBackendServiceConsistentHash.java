// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetBackendServiceConsistentHashHttpCooky;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendServiceConsistentHash {
    /**
     * @return Hash is based on HTTP Cookie. This field describes a HTTP cookie
     * that will be used as the hash key for the consistent hash load
     * balancer. If the cookie is not present, it will be generated.
     * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
     * 
     */
    private List<GetBackendServiceConsistentHashHttpCooky> httpCookies;
    /**
     * @return The hash based on the value of the specified header field.
     * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    private String httpHeaderName;
    /**
     * @return The minimum number of virtual nodes to use for the hash ring.
     * Larger ring sizes result in more granular load
     * distributions. If the number of hosts in the load balancing pool
     * is larger than the ring size, each host will be assigned a single
     * virtual node.
     * Defaults to 1024.
     * 
     */
    private Integer minimumRingSize;

    private GetBackendServiceConsistentHash() {}
    /**
     * @return Hash is based on HTTP Cookie. This field describes a HTTP cookie
     * that will be used as the hash key for the consistent hash load
     * balancer. If the cookie is not present, it will be generated.
     * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
     * 
     */
    public List<GetBackendServiceConsistentHashHttpCooky> httpCookies() {
        return this.httpCookies;
    }
    /**
     * @return The hash based on the value of the specified header field.
     * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    public String httpHeaderName() {
        return this.httpHeaderName;
    }
    /**
     * @return The minimum number of virtual nodes to use for the hash ring.
     * Larger ring sizes result in more granular load
     * distributions. If the number of hosts in the load balancing pool
     * is larger than the ring size, each host will be assigned a single
     * virtual node.
     * Defaults to 1024.
     * 
     */
    public Integer minimumRingSize() {
        return this.minimumRingSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceConsistentHash defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBackendServiceConsistentHashHttpCooky> httpCookies;
        private String httpHeaderName;
        private Integer minimumRingSize;
        public Builder() {}
        public Builder(GetBackendServiceConsistentHash defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpCookies = defaults.httpCookies;
    	      this.httpHeaderName = defaults.httpHeaderName;
    	      this.minimumRingSize = defaults.minimumRingSize;
        }

        @CustomType.Setter
        public Builder httpCookies(List<GetBackendServiceConsistentHashHttpCooky> httpCookies) {
            if (httpCookies == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceConsistentHash", "httpCookies");
            }
            this.httpCookies = httpCookies;
            return this;
        }
        public Builder httpCookies(GetBackendServiceConsistentHashHttpCooky... httpCookies) {
            return httpCookies(List.of(httpCookies));
        }
        @CustomType.Setter
        public Builder httpHeaderName(String httpHeaderName) {
            if (httpHeaderName == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceConsistentHash", "httpHeaderName");
            }
            this.httpHeaderName = httpHeaderName;
            return this;
        }
        @CustomType.Setter
        public Builder minimumRingSize(Integer minimumRingSize) {
            if (minimumRingSize == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceConsistentHash", "minimumRingSize");
            }
            this.minimumRingSize = minimumRingSize;
            return this;
        }
        public GetBackendServiceConsistentHash build() {
            final var _resultValue = new GetBackendServiceConsistentHash();
            _resultValue.httpCookies = httpCookies;
            _resultValue.httpHeaderName = httpHeaderName;
            _resultValue.minimumRingSize = minimumRingSize;
            return _resultValue;
        }
    }
}
