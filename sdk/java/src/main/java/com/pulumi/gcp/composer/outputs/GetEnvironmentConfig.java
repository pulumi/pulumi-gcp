// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigDataRetentionConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigDatabaseConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigEncryptionConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigMaintenanceWindow;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigMasterAuthorizedNetworksConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigNodeConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigPrivateEnvironmentConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigRecoveryConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigSoftwareConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigWebServerConfig;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigWebServerNetworkAccessControl;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigWorkloadsConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEnvironmentConfig {
    /**
     * @return The URI of the Apache Airflow Web UI hosted within the
     * environment.
     * 
     */
    private String airflowUri;
    /**
     * @return The Cloud Storage prefix of the DAGs for the environment.
     * 
     */
    private String dagGcsPrefix;
    /**
     * @return The configuration setting for Airflow data retention mechanism. This field is supported for Cloud Composer environments in versions composer-2.0.32-airflow-2.1.4. or newer
     * 
     */
    private List<GetEnvironmentConfigDataRetentionConfig> dataRetentionConfigs;
    /**
     * @return The configuration of Cloud SQL instance that is used by the Apache Airflow software. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private List<GetEnvironmentConfigDatabaseConfig> databaseConfigs;
    /**
     * @return Optional. If true, builds performed during operations that install Python packages have only private connectivity to Google services. If false, the builds also have access to the internet.
     * 
     */
    private Boolean enablePrivateBuildsOnly;
    /**
     * @return Optional. If true, a private Composer environment will be created.
     * 
     */
    private Boolean enablePrivateEnvironment;
    /**
     * @return The encryption options for the Composer environment and its dependencies.
     * 
     */
    private List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs;
    /**
     * @return The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    private String environmentSize;
    /**
     * @return The Kubernetes Engine cluster used to run the environment.
     * 
     */
    private String gkeCluster;
    /**
     * @return The configuration for Cloud Composer maintenance window.
     * 
     */
    private List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows;
    /**
     * @return Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
     * 
     */
    private List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
    /**
     * @return The configuration used for the Kubernetes Engine cluster.
     * 
     */
    private List<GetEnvironmentConfigNodeConfig> nodeConfigs;
    /**
     * @return The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The configuration used for the Private IP Cloud Composer environment.
     * 
     */
    private List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs;
    /**
     * @return The recovery configuration settings for the Cloud Composer environment
     * 
     */
    private List<GetEnvironmentConfigRecoveryConfig> recoveryConfigs;
    /**
     * @return Whether high resilience is enabled or not. This field is supported for Cloud Composer environments in versions composer-2.1.15-airflow-*.*.* and newer.
     * 
     */
    private String resilienceMode;
    /**
     * @return The configuration settings for software inside the environment.
     * 
     */
    private List<GetEnvironmentConfigSoftwareConfig> softwareConfigs;
    /**
     * @return The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private List<GetEnvironmentConfigWebServerConfig> webServerConfigs;
    /**
     * @return Network-level access control policy for the Airflow web server.
     * 
     */
    private List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls;
    /**
     * @return The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    private List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs;

    private GetEnvironmentConfig() {}
    /**
     * @return The URI of the Apache Airflow Web UI hosted within the
     * environment.
     * 
     */
    public String airflowUri() {
        return this.airflowUri;
    }
    /**
     * @return The Cloud Storage prefix of the DAGs for the environment.
     * 
     */
    public String dagGcsPrefix() {
        return this.dagGcsPrefix;
    }
    /**
     * @return The configuration setting for Airflow data retention mechanism. This field is supported for Cloud Composer environments in versions composer-2.0.32-airflow-2.1.4. or newer
     * 
     */
    public List<GetEnvironmentConfigDataRetentionConfig> dataRetentionConfigs() {
        return this.dataRetentionConfigs;
    }
    /**
     * @return The configuration of Cloud SQL instance that is used by the Apache Airflow software. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public List<GetEnvironmentConfigDatabaseConfig> databaseConfigs() {
        return this.databaseConfigs;
    }
    /**
     * @return Optional. If true, builds performed during operations that install Python packages have only private connectivity to Google services. If false, the builds also have access to the internet.
     * 
     */
    public Boolean enablePrivateBuildsOnly() {
        return this.enablePrivateBuildsOnly;
    }
    /**
     * @return Optional. If true, a private Composer environment will be created.
     * 
     */
    public Boolean enablePrivateEnvironment() {
        return this.enablePrivateEnvironment;
    }
    /**
     * @return The encryption options for the Composer environment and its dependencies.
     * 
     */
    public List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs() {
        return this.encryptionConfigs;
    }
    /**
     * @return The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public String environmentSize() {
        return this.environmentSize;
    }
    /**
     * @return The Kubernetes Engine cluster used to run the environment.
     * 
     */
    public String gkeCluster() {
        return this.gkeCluster;
    }
    /**
     * @return The configuration for Cloud Composer maintenance window.
     * 
     */
    public List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
     * 
     */
    public List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs() {
        return this.masterAuthorizedNetworksConfigs;
    }
    /**
     * @return The configuration used for the Kubernetes Engine cluster.
     * 
     */
    public List<GetEnvironmentConfigNodeConfig> nodeConfigs() {
        return this.nodeConfigs;
    }
    /**
     * @return The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The configuration used for the Private IP Cloud Composer environment.
     * 
     */
    public List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs() {
        return this.privateEnvironmentConfigs;
    }
    /**
     * @return The recovery configuration settings for the Cloud Composer environment
     * 
     */
    public List<GetEnvironmentConfigRecoveryConfig> recoveryConfigs() {
        return this.recoveryConfigs;
    }
    /**
     * @return Whether high resilience is enabled or not. This field is supported for Cloud Composer environments in versions composer-2.1.15-airflow-*.*.* and newer.
     * 
     */
    public String resilienceMode() {
        return this.resilienceMode;
    }
    /**
     * @return The configuration settings for software inside the environment.
     * 
     */
    public List<GetEnvironmentConfigSoftwareConfig> softwareConfigs() {
        return this.softwareConfigs;
    }
    /**
     * @return The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public List<GetEnvironmentConfigWebServerConfig> webServerConfigs() {
        return this.webServerConfigs;
    }
    /**
     * @return Network-level access control policy for the Airflow web server.
     * 
     */
    public List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls() {
        return this.webServerNetworkAccessControls;
    }
    /**
     * @return The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs() {
        return this.workloadsConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String airflowUri;
        private String dagGcsPrefix;
        private List<GetEnvironmentConfigDataRetentionConfig> dataRetentionConfigs;
        private List<GetEnvironmentConfigDatabaseConfig> databaseConfigs;
        private Boolean enablePrivateBuildsOnly;
        private Boolean enablePrivateEnvironment;
        private List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs;
        private String environmentSize;
        private String gkeCluster;
        private List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows;
        private List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
        private List<GetEnvironmentConfigNodeConfig> nodeConfigs;
        private Integer nodeCount;
        private List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs;
        private List<GetEnvironmentConfigRecoveryConfig> recoveryConfigs;
        private String resilienceMode;
        private List<GetEnvironmentConfigSoftwareConfig> softwareConfigs;
        private List<GetEnvironmentConfigWebServerConfig> webServerConfigs;
        private List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls;
        private List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs;
        public Builder() {}
        public Builder(GetEnvironmentConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.airflowUri = defaults.airflowUri;
    	      this.dagGcsPrefix = defaults.dagGcsPrefix;
    	      this.dataRetentionConfigs = defaults.dataRetentionConfigs;
    	      this.databaseConfigs = defaults.databaseConfigs;
    	      this.enablePrivateBuildsOnly = defaults.enablePrivateBuildsOnly;
    	      this.enablePrivateEnvironment = defaults.enablePrivateEnvironment;
    	      this.encryptionConfigs = defaults.encryptionConfigs;
    	      this.environmentSize = defaults.environmentSize;
    	      this.gkeCluster = defaults.gkeCluster;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.masterAuthorizedNetworksConfigs = defaults.masterAuthorizedNetworksConfigs;
    	      this.nodeConfigs = defaults.nodeConfigs;
    	      this.nodeCount = defaults.nodeCount;
    	      this.privateEnvironmentConfigs = defaults.privateEnvironmentConfigs;
    	      this.recoveryConfigs = defaults.recoveryConfigs;
    	      this.resilienceMode = defaults.resilienceMode;
    	      this.softwareConfigs = defaults.softwareConfigs;
    	      this.webServerConfigs = defaults.webServerConfigs;
    	      this.webServerNetworkAccessControls = defaults.webServerNetworkAccessControls;
    	      this.workloadsConfigs = defaults.workloadsConfigs;
        }

        @CustomType.Setter
        public Builder airflowUri(String airflowUri) {
            if (airflowUri == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "airflowUri");
            }
            this.airflowUri = airflowUri;
            return this;
        }
        @CustomType.Setter
        public Builder dagGcsPrefix(String dagGcsPrefix) {
            if (dagGcsPrefix == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "dagGcsPrefix");
            }
            this.dagGcsPrefix = dagGcsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder dataRetentionConfigs(List<GetEnvironmentConfigDataRetentionConfig> dataRetentionConfigs) {
            if (dataRetentionConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "dataRetentionConfigs");
            }
            this.dataRetentionConfigs = dataRetentionConfigs;
            return this;
        }
        public Builder dataRetentionConfigs(GetEnvironmentConfigDataRetentionConfig... dataRetentionConfigs) {
            return dataRetentionConfigs(List.of(dataRetentionConfigs));
        }
        @CustomType.Setter
        public Builder databaseConfigs(List<GetEnvironmentConfigDatabaseConfig> databaseConfigs) {
            if (databaseConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "databaseConfigs");
            }
            this.databaseConfigs = databaseConfigs;
            return this;
        }
        public Builder databaseConfigs(GetEnvironmentConfigDatabaseConfig... databaseConfigs) {
            return databaseConfigs(List.of(databaseConfigs));
        }
        @CustomType.Setter
        public Builder enablePrivateBuildsOnly(Boolean enablePrivateBuildsOnly) {
            if (enablePrivateBuildsOnly == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "enablePrivateBuildsOnly");
            }
            this.enablePrivateBuildsOnly = enablePrivateBuildsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateEnvironment(Boolean enablePrivateEnvironment) {
            if (enablePrivateEnvironment == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "enablePrivateEnvironment");
            }
            this.enablePrivateEnvironment = enablePrivateEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfigs(List<GetEnvironmentConfigEncryptionConfig> encryptionConfigs) {
            if (encryptionConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "encryptionConfigs");
            }
            this.encryptionConfigs = encryptionConfigs;
            return this;
        }
        public Builder encryptionConfigs(GetEnvironmentConfigEncryptionConfig... encryptionConfigs) {
            return encryptionConfigs(List.of(encryptionConfigs));
        }
        @CustomType.Setter
        public Builder environmentSize(String environmentSize) {
            if (environmentSize == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "environmentSize");
            }
            this.environmentSize = environmentSize;
            return this;
        }
        @CustomType.Setter
        public Builder gkeCluster(String gkeCluster) {
            if (gkeCluster == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "gkeCluster");
            }
            this.gkeCluster = gkeCluster;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetEnvironmentConfigMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetEnvironmentConfigMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder masterAuthorizedNetworksConfigs(List<GetEnvironmentConfigMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs) {
            if (masterAuthorizedNetworksConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "masterAuthorizedNetworksConfigs");
            }
            this.masterAuthorizedNetworksConfigs = masterAuthorizedNetworksConfigs;
            return this;
        }
        public Builder masterAuthorizedNetworksConfigs(GetEnvironmentConfigMasterAuthorizedNetworksConfig... masterAuthorizedNetworksConfigs) {
            return masterAuthorizedNetworksConfigs(List.of(masterAuthorizedNetworksConfigs));
        }
        @CustomType.Setter
        public Builder nodeConfigs(List<GetEnvironmentConfigNodeConfig> nodeConfigs) {
            if (nodeConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "nodeConfigs");
            }
            this.nodeConfigs = nodeConfigs;
            return this;
        }
        public Builder nodeConfigs(GetEnvironmentConfigNodeConfig... nodeConfigs) {
            return nodeConfigs(List.of(nodeConfigs));
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder privateEnvironmentConfigs(List<GetEnvironmentConfigPrivateEnvironmentConfig> privateEnvironmentConfigs) {
            if (privateEnvironmentConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "privateEnvironmentConfigs");
            }
            this.privateEnvironmentConfigs = privateEnvironmentConfigs;
            return this;
        }
        public Builder privateEnvironmentConfigs(GetEnvironmentConfigPrivateEnvironmentConfig... privateEnvironmentConfigs) {
            return privateEnvironmentConfigs(List.of(privateEnvironmentConfigs));
        }
        @CustomType.Setter
        public Builder recoveryConfigs(List<GetEnvironmentConfigRecoveryConfig> recoveryConfigs) {
            if (recoveryConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "recoveryConfigs");
            }
            this.recoveryConfigs = recoveryConfigs;
            return this;
        }
        public Builder recoveryConfigs(GetEnvironmentConfigRecoveryConfig... recoveryConfigs) {
            return recoveryConfigs(List.of(recoveryConfigs));
        }
        @CustomType.Setter
        public Builder resilienceMode(String resilienceMode) {
            if (resilienceMode == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "resilienceMode");
            }
            this.resilienceMode = resilienceMode;
            return this;
        }
        @CustomType.Setter
        public Builder softwareConfigs(List<GetEnvironmentConfigSoftwareConfig> softwareConfigs) {
            if (softwareConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "softwareConfigs");
            }
            this.softwareConfigs = softwareConfigs;
            return this;
        }
        public Builder softwareConfigs(GetEnvironmentConfigSoftwareConfig... softwareConfigs) {
            return softwareConfigs(List.of(softwareConfigs));
        }
        @CustomType.Setter
        public Builder webServerConfigs(List<GetEnvironmentConfigWebServerConfig> webServerConfigs) {
            if (webServerConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "webServerConfigs");
            }
            this.webServerConfigs = webServerConfigs;
            return this;
        }
        public Builder webServerConfigs(GetEnvironmentConfigWebServerConfig... webServerConfigs) {
            return webServerConfigs(List.of(webServerConfigs));
        }
        @CustomType.Setter
        public Builder webServerNetworkAccessControls(List<GetEnvironmentConfigWebServerNetworkAccessControl> webServerNetworkAccessControls) {
            if (webServerNetworkAccessControls == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "webServerNetworkAccessControls");
            }
            this.webServerNetworkAccessControls = webServerNetworkAccessControls;
            return this;
        }
        public Builder webServerNetworkAccessControls(GetEnvironmentConfigWebServerNetworkAccessControl... webServerNetworkAccessControls) {
            return webServerNetworkAccessControls(List.of(webServerNetworkAccessControls));
        }
        @CustomType.Setter
        public Builder workloadsConfigs(List<GetEnvironmentConfigWorkloadsConfig> workloadsConfigs) {
            if (workloadsConfigs == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfig", "workloadsConfigs");
            }
            this.workloadsConfigs = workloadsConfigs;
            return this;
        }
        public Builder workloadsConfigs(GetEnvironmentConfigWorkloadsConfig... workloadsConfigs) {
            return workloadsConfigs(List.of(workloadsConfigs));
        }
        public GetEnvironmentConfig build() {
            final var _resultValue = new GetEnvironmentConfig();
            _resultValue.airflowUri = airflowUri;
            _resultValue.dagGcsPrefix = dagGcsPrefix;
            _resultValue.dataRetentionConfigs = dataRetentionConfigs;
            _resultValue.databaseConfigs = databaseConfigs;
            _resultValue.enablePrivateBuildsOnly = enablePrivateBuildsOnly;
            _resultValue.enablePrivateEnvironment = enablePrivateEnvironment;
            _resultValue.encryptionConfigs = encryptionConfigs;
            _resultValue.environmentSize = environmentSize;
            _resultValue.gkeCluster = gkeCluster;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.masterAuthorizedNetworksConfigs = masterAuthorizedNetworksConfigs;
            _resultValue.nodeConfigs = nodeConfigs;
            _resultValue.nodeCount = nodeCount;
            _resultValue.privateEnvironmentConfigs = privateEnvironmentConfigs;
            _resultValue.recoveryConfigs = recoveryConfigs;
            _resultValue.resilienceMode = resilienceMode;
            _resultValue.softwareConfigs = softwareConfigs;
            _resultValue.webServerConfigs = webServerConfigs;
            _resultValue.webServerNetworkAccessControls = webServerNetworkAccessControls;
            _resultValue.workloadsConfigs = workloadsConfigs;
            return _resultValue;
        }
    }
}
