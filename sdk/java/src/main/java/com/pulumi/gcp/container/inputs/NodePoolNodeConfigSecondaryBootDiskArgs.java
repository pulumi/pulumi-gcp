// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeConfigSecondaryBootDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigSecondaryBootDiskArgs Empty = new NodePoolNodeConfigSecondaryBootDiskArgs();

    /**
     * Disk image to create the secondary boot disk from
     * 
     */
    @Import(name="diskImage", required=true)
    private Output<String> diskImage;

    /**
     * @return Disk image to create the secondary boot disk from
     * 
     */
    public Output<String> diskImage() {
        return this.diskImage;
    }

    /**
     * Mode for how the secondary boot disk is used.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Mode for how the secondary boot disk is used.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    private NodePoolNodeConfigSecondaryBootDiskArgs() {}

    private NodePoolNodeConfigSecondaryBootDiskArgs(NodePoolNodeConfigSecondaryBootDiskArgs $) {
        this.diskImage = $.diskImage;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigSecondaryBootDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigSecondaryBootDiskArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigSecondaryBootDiskArgs();
        }

        public Builder(NodePoolNodeConfigSecondaryBootDiskArgs defaults) {
            $ = new NodePoolNodeConfigSecondaryBootDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskImage Disk image to create the secondary boot disk from
         * 
         * @return builder
         * 
         */
        public Builder diskImage(Output<String> diskImage) {
            $.diskImage = diskImage;
            return this;
        }

        /**
         * @param diskImage Disk image to create the secondary boot disk from
         * 
         * @return builder
         * 
         */
        public Builder diskImage(String diskImage) {
            return diskImage(Output.of(diskImage));
        }

        /**
         * @param mode Mode for how the secondary boot disk is used.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Mode for how the secondary boot disk is used.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public NodePoolNodeConfigSecondaryBootDiskArgs build() {
            if ($.diskImage == null) {
                throw new MissingRequiredPropertyException("NodePoolNodeConfigSecondaryBootDiskArgs", "diskImage");
            }
            return $;
        }
    }

}
