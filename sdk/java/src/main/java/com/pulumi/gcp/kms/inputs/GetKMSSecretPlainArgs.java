// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKMSSecretPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetKMSSecretPlainArgs Empty = new GetKMSSecretPlainArgs();

    /**
     * The [additional authenticated data](https://cloud.google.com/kms/docs/additional-authenticated-data) used for integrity checks during encryption and decryption.
     * 
     */
    @Import(name="additionalAuthenticatedData")
    private @Nullable String additionalAuthenticatedData;

    /**
     * @return The [additional authenticated data](https://cloud.google.com/kms/docs/additional-authenticated-data) used for integrity checks during encryption and decryption.
     * 
     */
    public Optional<String> additionalAuthenticatedData() {
        return Optional.ofNullable(this.additionalAuthenticatedData);
    }

    /**
     * The ciphertext to be decrypted, encoded in base64
     * 
     */
    @Import(name="ciphertext", required=true)
    private String ciphertext;

    /**
     * @return The ciphertext to be decrypted, encoded in base64
     * 
     */
    public String ciphertext() {
        return this.ciphertext;
    }

    /**
     * The id of the CryptoKey that will be used to
     * decrypt the provided ciphertext. This is represented by the format
     * `{projectId}/{location}/{keyRingName}/{cryptoKeyName}`.
     * 
     */
    @Import(name="cryptoKey", required=true)
    private String cryptoKey;

    /**
     * @return The id of the CryptoKey that will be used to
     * decrypt the provided ciphertext. This is represented by the format
     * `{projectId}/{location}/{keyRingName}/{cryptoKeyName}`.
     * 
     */
    public String cryptoKey() {
        return this.cryptoKey;
    }

    private GetKMSSecretPlainArgs() {}

    private GetKMSSecretPlainArgs(GetKMSSecretPlainArgs $) {
        this.additionalAuthenticatedData = $.additionalAuthenticatedData;
        this.ciphertext = $.ciphertext;
        this.cryptoKey = $.cryptoKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKMSSecretPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKMSSecretPlainArgs $;

        public Builder() {
            $ = new GetKMSSecretPlainArgs();
        }

        public Builder(GetKMSSecretPlainArgs defaults) {
            $ = new GetKMSSecretPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalAuthenticatedData The [additional authenticated data](https://cloud.google.com/kms/docs/additional-authenticated-data) used for integrity checks during encryption and decryption.
         * 
         * @return builder
         * 
         */
        public Builder additionalAuthenticatedData(@Nullable String additionalAuthenticatedData) {
            $.additionalAuthenticatedData = additionalAuthenticatedData;
            return this;
        }

        /**
         * @param ciphertext The ciphertext to be decrypted, encoded in base64
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(String ciphertext) {
            $.ciphertext = ciphertext;
            return this;
        }

        /**
         * @param cryptoKey The id of the CryptoKey that will be used to
         * decrypt the provided ciphertext. This is represented by the format
         * `{projectId}/{location}/{keyRingName}/{cryptoKeyName}`.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        public GetKMSSecretPlainArgs build() {
            $.ciphertext = Objects.requireNonNull($.ciphertext, "expected parameter 'ciphertext' to be non-null");
            $.cryptoKey = Objects.requireNonNull($.cryptoKey, "expected parameter 'cryptoKey' to be non-null");
            return $;
        }
    }

}
