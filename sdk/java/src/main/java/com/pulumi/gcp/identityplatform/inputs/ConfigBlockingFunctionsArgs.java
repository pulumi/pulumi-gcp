// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.identityplatform.inputs.ConfigBlockingFunctionsForwardInboundCredentialsArgs;
import com.pulumi.gcp.identityplatform.inputs.ConfigBlockingFunctionsTriggerArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigBlockingFunctionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigBlockingFunctionsArgs Empty = new ConfigBlockingFunctionsArgs();

    /**
     * The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
     * Structure is documented below.
     * 
     */
    @Import(name="forwardInboundCredentials")
    private @Nullable Output<ConfigBlockingFunctionsForwardInboundCredentialsArgs> forwardInboundCredentials;

    /**
     * @return The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConfigBlockingFunctionsForwardInboundCredentialsArgs>> forwardInboundCredentials() {
        return Optional.ofNullable(this.forwardInboundCredentials);
    }

    /**
     * Map of Trigger to event type. Key should be one of the supported event types: &#34;beforeCreate&#34;, &#34;beforeSignIn&#34;.
     * Structure is documented below.
     * 
     */
    @Import(name="triggers", required=true)
    private Output<List<ConfigBlockingFunctionsTriggerArgs>> triggers;

    /**
     * @return Map of Trigger to event type. Key should be one of the supported event types: &#34;beforeCreate&#34;, &#34;beforeSignIn&#34;.
     * Structure is documented below.
     * 
     */
    public Output<List<ConfigBlockingFunctionsTriggerArgs>> triggers() {
        return this.triggers;
    }

    private ConfigBlockingFunctionsArgs() {}

    private ConfigBlockingFunctionsArgs(ConfigBlockingFunctionsArgs $) {
        this.forwardInboundCredentials = $.forwardInboundCredentials;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigBlockingFunctionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigBlockingFunctionsArgs $;

        public Builder() {
            $ = new ConfigBlockingFunctionsArgs();
        }

        public Builder(ConfigBlockingFunctionsArgs defaults) {
            $ = new ConfigBlockingFunctionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forwardInboundCredentials The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardInboundCredentials(@Nullable Output<ConfigBlockingFunctionsForwardInboundCredentialsArgs> forwardInboundCredentials) {
            $.forwardInboundCredentials = forwardInboundCredentials;
            return this;
        }

        /**
         * @param forwardInboundCredentials The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardInboundCredentials(ConfigBlockingFunctionsForwardInboundCredentialsArgs forwardInboundCredentials) {
            return forwardInboundCredentials(Output.of(forwardInboundCredentials));
        }

        /**
         * @param triggers Map of Trigger to event type. Key should be one of the supported event types: &#34;beforeCreate&#34;, &#34;beforeSignIn&#34;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Output<List<ConfigBlockingFunctionsTriggerArgs>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Map of Trigger to event type. Key should be one of the supported event types: &#34;beforeCreate&#34;, &#34;beforeSignIn&#34;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggers(List<ConfigBlockingFunctionsTriggerArgs> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggers Map of Trigger to event type. Key should be one of the supported event types: &#34;beforeCreate&#34;, &#34;beforeSignIn&#34;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggers(ConfigBlockingFunctionsTriggerArgs... triggers) {
            return triggers(List.of(triggers));
        }

        public ConfigBlockingFunctionsArgs build() {
            $.triggers = Objects.requireNonNull($.triggers, "expected parameter 'triggers' to be non-null");
            return $;
        }
    }

}
