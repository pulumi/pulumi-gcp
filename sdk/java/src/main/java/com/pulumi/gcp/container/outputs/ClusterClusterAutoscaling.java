// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.ClusterClusterAutoscalingAutoProvisioningDefaults;
import com.pulumi.gcp.container.outputs.ClusterClusterAutoscalingResourceLimit;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterClusterAutoscaling {
    /**
     * @return Contains defaults for a node pool created by NAP. A subset of fields also apply to
     * GKE Autopilot clusters.
     * Structure is documented below.
     * 
     */
    private @Nullable ClusterClusterAutoscalingAutoProvisioningDefaults autoProvisioningDefaults;
    /**
     * @return The list of Google Compute Engine
     * [zones](https://cloud.google.com/compute/docs/zones#available) in which the
     * NodePool&#39;s nodes can be created by NAP.
     * 
     */
    private @Nullable List<String> autoProvisioningLocations;
    /**
     * @return Configuration
     * options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
     * feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
     * when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
     * 
     */
    private @Nullable String autoscalingProfile;
    /**
     * @return Specifies whether default compute class behaviour is enabled. If enabled, cluster autoscaler will use Compute Class with name default for all the workloads, if not overriden.
     * 
     */
    private @Nullable Boolean defaultComputeClassEnabled;
    /**
     * @return Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, `true` is implied
     * for autopilot clusters. Resource limits for `cpu` and `memory` must be defined to enable node auto-provisioning for GKE Standard.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Global constraints for machine resources in the
     * cluster. Configuring the `cpu` and `memory` types is required if node
     * auto-provisioning is enabled. These limits will apply to node pool autoscaling
     * in addition to node auto-provisioning. Structure is documented below.
     * 
     */
    private @Nullable List<ClusterClusterAutoscalingResourceLimit> resourceLimits;

    private ClusterClusterAutoscaling() {}
    /**
     * @return Contains defaults for a node pool created by NAP. A subset of fields also apply to
     * GKE Autopilot clusters.
     * Structure is documented below.
     * 
     */
    public Optional<ClusterClusterAutoscalingAutoProvisioningDefaults> autoProvisioningDefaults() {
        return Optional.ofNullable(this.autoProvisioningDefaults);
    }
    /**
     * @return The list of Google Compute Engine
     * [zones](https://cloud.google.com/compute/docs/zones#available) in which the
     * NodePool&#39;s nodes can be created by NAP.
     * 
     */
    public List<String> autoProvisioningLocations() {
        return this.autoProvisioningLocations == null ? List.of() : this.autoProvisioningLocations;
    }
    /**
     * @return Configuration
     * options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
     * feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
     * when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
     * 
     */
    public Optional<String> autoscalingProfile() {
        return Optional.ofNullable(this.autoscalingProfile);
    }
    /**
     * @return Specifies whether default compute class behaviour is enabled. If enabled, cluster autoscaler will use Compute Class with name default for all the workloads, if not overriden.
     * 
     */
    public Optional<Boolean> defaultComputeClassEnabled() {
        return Optional.ofNullable(this.defaultComputeClassEnabled);
    }
    /**
     * @return Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, `true` is implied
     * for autopilot clusters. Resource limits for `cpu` and `memory` must be defined to enable node auto-provisioning for GKE Standard.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Global constraints for machine resources in the
     * cluster. Configuring the `cpu` and `memory` types is required if node
     * auto-provisioning is enabled. These limits will apply to node pool autoscaling
     * in addition to node auto-provisioning. Structure is documented below.
     * 
     */
    public List<ClusterClusterAutoscalingResourceLimit> resourceLimits() {
        return this.resourceLimits == null ? List.of() : this.resourceLimits;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterClusterAutoscaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterClusterAutoscalingAutoProvisioningDefaults autoProvisioningDefaults;
        private @Nullable List<String> autoProvisioningLocations;
        private @Nullable String autoscalingProfile;
        private @Nullable Boolean defaultComputeClassEnabled;
        private @Nullable Boolean enabled;
        private @Nullable List<ClusterClusterAutoscalingResourceLimit> resourceLimits;
        public Builder() {}
        public Builder(ClusterClusterAutoscaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoProvisioningDefaults = defaults.autoProvisioningDefaults;
    	      this.autoProvisioningLocations = defaults.autoProvisioningLocations;
    	      this.autoscalingProfile = defaults.autoscalingProfile;
    	      this.defaultComputeClassEnabled = defaults.defaultComputeClassEnabled;
    	      this.enabled = defaults.enabled;
    	      this.resourceLimits = defaults.resourceLimits;
        }

        @CustomType.Setter
        public Builder autoProvisioningDefaults(@Nullable ClusterClusterAutoscalingAutoProvisioningDefaults autoProvisioningDefaults) {

            this.autoProvisioningDefaults = autoProvisioningDefaults;
            return this;
        }
        @CustomType.Setter
        public Builder autoProvisioningLocations(@Nullable List<String> autoProvisioningLocations) {

            this.autoProvisioningLocations = autoProvisioningLocations;
            return this;
        }
        public Builder autoProvisioningLocations(String... autoProvisioningLocations) {
            return autoProvisioningLocations(List.of(autoProvisioningLocations));
        }
        @CustomType.Setter
        public Builder autoscalingProfile(@Nullable String autoscalingProfile) {

            this.autoscalingProfile = autoscalingProfile;
            return this;
        }
        @CustomType.Setter
        public Builder defaultComputeClassEnabled(@Nullable Boolean defaultComputeClassEnabled) {

            this.defaultComputeClassEnabled = defaultComputeClassEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder resourceLimits(@Nullable List<ClusterClusterAutoscalingResourceLimit> resourceLimits) {

            this.resourceLimits = resourceLimits;
            return this;
        }
        public Builder resourceLimits(ClusterClusterAutoscalingResourceLimit... resourceLimits) {
            return resourceLimits(List.of(resourceLimits));
        }
        public ClusterClusterAutoscaling build() {
            final var _resultValue = new ClusterClusterAutoscaling();
            _resultValue.autoProvisioningDefaults = autoProvisioningDefaults;
            _resultValue.autoProvisioningLocations = autoProvisioningLocations;
            _resultValue.autoscalingProfile = autoscalingProfile;
            _resultValue.defaultComputeClassEnabled = defaultComputeClassEnabled;
            _resultValue.enabled = enabled;
            _resultValue.resourceLimits = resourceLimits;
            return _resultValue;
        }
    }
}
