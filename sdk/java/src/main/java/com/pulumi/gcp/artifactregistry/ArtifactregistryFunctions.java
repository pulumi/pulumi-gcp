// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagePlainArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesPlainArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetLocationsPlainArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyPlainArgs;
import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryPlainArgs;
import com.pulumi.gcp.artifactregistry.outputs.GetDockerImageResult;
import com.pulumi.gcp.artifactregistry.outputs.GetDockerImagesResult;
import com.pulumi.gcp.artifactregistry.outputs.GetLocationsResult;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryIamPolicyResult;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryResult;
import java.util.concurrent.CompletableFuture;

public final class ArtifactregistryFunctions {
    /**
     * This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.
     * 
     * &gt; **Note**
     * Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
     * import com.pulumi.gcp.cloudrunv2.Service;
     * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
     * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myRepo = new Repository("myRepo", RepositoryArgs.builder()
     *             .location("us-west1")
     *             .repositoryId("my-repository")
     *             .format("DOCKER")
     *             .build());
     * 
     *         final var myImage = ArtifactregistryFunctions.getDockerImage(GetDockerImageArgs.builder()
     *             .location(myRepo.location())
     *             .repositoryId(myRepo.repositoryId())
     *             .imageName("my-image:my-tag")
     *             .build());
     * 
     *         var default_ = new Service("default", ServiceArgs.builder()
     *             .template(ServiceTemplateArgs.builder()
     *                 .containers(ServiceTemplateContainerArgs.builder()
     *                     .image(myImage.applyValue(_myImage -> _myImage.selfLink()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerImageResult> getDockerImage(GetDockerImageArgs args) {
        return getDockerImage(args, InvokeOptions.Empty);
    }
    /**
     * This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.
     * 
     * &gt; **Note**
     * Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
     * import com.pulumi.gcp.cloudrunv2.Service;
     * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
     * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myRepo = new Repository("myRepo", RepositoryArgs.builder()
     *             .location("us-west1")
     *             .repositoryId("my-repository")
     *             .format("DOCKER")
     *             .build());
     * 
     *         final var myImage = ArtifactregistryFunctions.getDockerImage(GetDockerImageArgs.builder()
     *             .location(myRepo.location())
     *             .repositoryId(myRepo.repositoryId())
     *             .imageName("my-image:my-tag")
     *             .build());
     * 
     *         var default_ = new Service("default", ServiceArgs.builder()
     *             .template(ServiceTemplateArgs.builder()
     *                 .containers(ServiceTemplateContainerArgs.builder()
     *                     .image(myImage.applyValue(_myImage -> _myImage.selfLink()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDockerImageResult> getDockerImagePlain(GetDockerImagePlainArgs args) {
        return getDockerImagePlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.
     * 
     * &gt; **Note**
     * Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
     * import com.pulumi.gcp.cloudrunv2.Service;
     * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
     * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myRepo = new Repository("myRepo", RepositoryArgs.builder()
     *             .location("us-west1")
     *             .repositoryId("my-repository")
     *             .format("DOCKER")
     *             .build());
     * 
     *         final var myImage = ArtifactregistryFunctions.getDockerImage(GetDockerImageArgs.builder()
     *             .location(myRepo.location())
     *             .repositoryId(myRepo.repositoryId())
     *             .imageName("my-image:my-tag")
     *             .build());
     * 
     *         var default_ = new Service("default", ServiceArgs.builder()
     *             .template(ServiceTemplateArgs.builder()
     *                 .containers(ServiceTemplateContainerArgs.builder()
     *                     .image(myImage.applyValue(_myImage -> _myImage.selfLink()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerImageResult> getDockerImage(GetDockerImageArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getDockerImage:getDockerImage", TypeShape.of(GetDockerImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.
     * 
     * &gt; **Note**
     * Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
     * import com.pulumi.gcp.cloudrunv2.Service;
     * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
     * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myRepo = new Repository("myRepo", RepositoryArgs.builder()
     *             .location("us-west1")
     *             .repositoryId("my-repository")
     *             .format("DOCKER")
     *             .build());
     * 
     *         final var myImage = ArtifactregistryFunctions.getDockerImage(GetDockerImageArgs.builder()
     *             .location(myRepo.location())
     *             .repositoryId(myRepo.repositoryId())
     *             .imageName("my-image:my-tag")
     *             .build());
     * 
     *         var default_ = new Service("default", ServiceArgs.builder()
     *             .template(ServiceTemplateArgs.builder()
     *                 .containers(ServiceTemplateContainerArgs.builder()
     *                     .image(myImage.applyValue(_myImage -> _myImage.selfLink()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerImageResult> getDockerImage(GetDockerImageArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getDockerImage:getDockerImage", TypeShape.of(GetDockerImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.
     * 
     * &gt; **Note**
     * Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
     * import com.pulumi.gcp.cloudrunv2.Service;
     * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
     * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myRepo = new Repository("myRepo", RepositoryArgs.builder()
     *             .location("us-west1")
     *             .repositoryId("my-repository")
     *             .format("DOCKER")
     *             .build());
     * 
     *         final var myImage = ArtifactregistryFunctions.getDockerImage(GetDockerImageArgs.builder()
     *             .location(myRepo.location())
     *             .repositoryId(myRepo.repositoryId())
     *             .imageName("my-image:my-tag")
     *             .build());
     * 
     *         var default_ = new Service("default", ServiceArgs.builder()
     *             .template(ServiceTemplateArgs.builder()
     *                 .containers(ServiceTemplateContainerArgs.builder()
     *                     .image(myImage.applyValue(_myImage -> _myImage.selfLink()))
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDockerImageResult> getDockerImagePlain(GetDockerImagePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:artifactregistry/getDockerImage:getDockerImage", TypeShape.of(GetDockerImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about Artifact Registry Docker images.
     * See [the official documentation](https://cloud.google.com/artifact-registry/docs/docker)
     * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages/list).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myImages = ArtifactregistryFunctions.getDockerImages(GetDockerImagesArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("example-repo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerImagesResult> getDockerImages(GetDockerImagesArgs args) {
        return getDockerImages(args, InvokeOptions.Empty);
    }
    /**
     * Get information about Artifact Registry Docker images.
     * See [the official documentation](https://cloud.google.com/artifact-registry/docs/docker)
     * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages/list).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myImages = ArtifactregistryFunctions.getDockerImages(GetDockerImagesArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("example-repo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDockerImagesResult> getDockerImagesPlain(GetDockerImagesPlainArgs args) {
        return getDockerImagesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about Artifact Registry Docker images.
     * See [the official documentation](https://cloud.google.com/artifact-registry/docs/docker)
     * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages/list).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myImages = ArtifactregistryFunctions.getDockerImages(GetDockerImagesArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("example-repo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerImagesResult> getDockerImages(GetDockerImagesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getDockerImages:getDockerImages", TypeShape.of(GetDockerImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about Artifact Registry Docker images.
     * See [the official documentation](https://cloud.google.com/artifact-registry/docs/docker)
     * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages/list).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myImages = ArtifactregistryFunctions.getDockerImages(GetDockerImagesArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("example-repo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDockerImagesResult> getDockerImages(GetDockerImagesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getDockerImages:getDockerImages", TypeShape.of(GetDockerImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about Artifact Registry Docker images.
     * See [the official documentation](https://cloud.google.com/artifact-registry/docs/docker)
     * and [API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages/list).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetDockerImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myImages = ArtifactregistryFunctions.getDockerImages(GetDockerImagesArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("example-repo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDockerImagesResult> getDockerImagesPlain(GetDockerImagesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:artifactregistry/getDockerImages:getDockerImages", TypeShape.of(GetDockerImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationsResult> getLocations() {
        return getLocations(GetLocationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain() {
        return getLocationsPlain(GetLocationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationsResult> getLocations(GetLocationsArgs args) {
        return getLocations(args, InvokeOptions.Empty);
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain(GetLocationsPlainArgs args) {
        return getLocationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationsResult> getLocations(GetLocationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationsResult> getLocations(GetLocationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get Artifact Registry locations available for a project.
     * 
     * To get more information about Artifact Registry, see:
     * 
     * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Multi-Regional Artifact Registry Deployment
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
     * import com.pulumi.gcp.artifactregistry.Repository;
     * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = ArtifactregistryFunctions.getLocations(GetLocationsArgs.builder()
     *             .build());
     * 
     *         var repoOne = new Repository("repoOne", RepositoryArgs.builder()
     *             .location(available.locations()[0])
     *             .repositoryId("repo-one")
     *             .format("apt")
     *             .build());
     * 
     *         var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
     *             .location(available.locations()[1])
     *             .repositoryId("repo-two")
     *             .format("apt")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain(GetLocationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:artifactregistry/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a Google Artifact Registry Repository. For more information see
     * the [official documentation](https://cloud.google.com/artifact-registry/docs/)
     * and [API](https://cloud.google.com/artifact-registry/docs/apis).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-repo = ArtifactregistryFunctions.getRepository(GetRepositoryArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("my-repository")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args) {
        return getRepository(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a Google Artifact Registry Repository. For more information see
     * the [official documentation](https://cloud.google.com/artifact-registry/docs/)
     * and [API](https://cloud.google.com/artifact-registry/docs/apis).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-repo = ArtifactregistryFunctions.getRepository(GetRepositoryArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("my-repository")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args) {
        return getRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a Google Artifact Registry Repository. For more information see
     * the [official documentation](https://cloud.google.com/artifact-registry/docs/)
     * and [API](https://cloud.google.com/artifact-registry/docs/apis).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-repo = ArtifactregistryFunctions.getRepository(GetRepositoryArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("my-repository")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a Google Artifact Registry Repository. For more information see
     * the [official documentation](https://cloud.google.com/artifact-registry/docs/)
     * and [API](https://cloud.google.com/artifact-registry/docs/apis).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-repo = ArtifactregistryFunctions.getRepository(GetRepositoryArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("my-repository")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a Google Artifact Registry Repository. For more information see
     * the [official documentation](https://cloud.google.com/artifact-registry/docs/)
     * and [API](https://cloud.google.com/artifact-registry/docs/apis).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-repo = ArtifactregistryFunctions.getRepository(GetRepositoryArgs.builder()
     *             .location("us-central1")
     *             .repositoryId("my-repository")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:artifactregistry/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for repository
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = ArtifactregistryFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
     *             .project(my_repo.project())
     *             .location(my_repo.location())
     *             .repository(my_repo.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepositoryIamPolicyResult> getRepositoryIamPolicy(GetRepositoryIamPolicyArgs args) {
        return getRepositoryIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for repository
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = ArtifactregistryFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
     *             .project(my_repo.project())
     *             .location(my_repo.location())
     *             .repository(my_repo.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRepositoryIamPolicyResult> getRepositoryIamPolicyPlain(GetRepositoryIamPolicyPlainArgs args) {
        return getRepositoryIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for repository
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = ArtifactregistryFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
     *             .project(my_repo.project())
     *             .location(my_repo.location())
     *             .repository(my_repo.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepositoryIamPolicyResult> getRepositoryIamPolicy(GetRepositoryIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy", TypeShape.of(GetRepositoryIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for repository
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = ArtifactregistryFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
     *             .project(my_repo.project())
     *             .location(my_repo.location())
     *             .repository(my_repo.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRepositoryIamPolicyResult> getRepositoryIamPolicy(GetRepositoryIamPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy", TypeShape.of(GetRepositoryIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for repository
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
     * import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = ArtifactregistryFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
     *             .project(my_repo.project())
     *             .location(my_repo.location())
     *             .repository(my_repo.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRepositoryIamPolicyResult> getRepositoryIamPolicyPlain(GetRepositoryIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicy", TypeShape.of(GetRepositoryIamPolicyResult.class), args, Utilities.withVersion(options));
    }
}
