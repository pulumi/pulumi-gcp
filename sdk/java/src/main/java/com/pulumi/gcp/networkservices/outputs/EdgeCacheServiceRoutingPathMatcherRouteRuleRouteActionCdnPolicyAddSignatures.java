// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures {
    /**
     * @return The actions to take to add signatures to responses.
     * Each value may be one of `GENERATE_COOKIE`, `GENERATE_TOKEN_HLS_COOKIELESS`, and `PROPAGATE_TOKEN_HLS_COOKIELESS`.
     * 
     */
    private String actions;
    /**
     * @return The parameters to copy from the verified token to the generated token.
     * Only the following parameters may be copied:
     * * `PathGlobs`
     * * `paths`
     * * `acl`
     * * `URLPrefix`
     * * `IPRanges`
     * * `SessionID`
     * * `id`
     * * `Data`
     * * `data`
     * * `payload`
     * * `Headers`
     *   You may specify up to 6 parameters to copy.  A given parameter is be copied only if the parameter exists in the verified token.  Parameter names are matched exactly as specified.  The order of the parameters does not matter.  Duplicates are not allowed.
     *   This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
     * 
     */
    private @Nullable List<String> copiedParameters;
    /**
     * @return The keyset to use for signature generation.
     * The following are both valid paths to an EdgeCacheKeyset resource:
     * * `projects/project/locations/global/edgeCacheKeysets/yourKeyset`
     * * `yourKeyset`
     *   This must be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.  This field may not be specified otherwise.
     * 
     */
    private @Nullable String keyset;
    /**
     * @return The query parameter in which to put the generated token.
     * If not specified, defaults to `edge-cache-token`.
     * If specified, the name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
     * This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
     * 
     */
    private @Nullable String tokenQueryParameter;
    /**
     * @return The duration the token is valid starting from the moment the token is first generated.
     * Defaults to `86400s` (1 day).
     * The TTL must be &gt;= 0 and &lt;= 604,800 seconds (1 week).
     * This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    private @Nullable String tokenTtl;

    private EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures() {}
    /**
     * @return The actions to take to add signatures to responses.
     * Each value may be one of `GENERATE_COOKIE`, `GENERATE_TOKEN_HLS_COOKIELESS`, and `PROPAGATE_TOKEN_HLS_COOKIELESS`.
     * 
     */
    public String actions() {
        return this.actions;
    }
    /**
     * @return The parameters to copy from the verified token to the generated token.
     * Only the following parameters may be copied:
     * * `PathGlobs`
     * * `paths`
     * * `acl`
     * * `URLPrefix`
     * * `IPRanges`
     * * `SessionID`
     * * `id`
     * * `Data`
     * * `data`
     * * `payload`
     * * `Headers`
     *   You may specify up to 6 parameters to copy.  A given parameter is be copied only if the parameter exists in the verified token.  Parameter names are matched exactly as specified.  The order of the parameters does not matter.  Duplicates are not allowed.
     *   This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
     * 
     */
    public List<String> copiedParameters() {
        return this.copiedParameters == null ? List.of() : this.copiedParameters;
    }
    /**
     * @return The keyset to use for signature generation.
     * The following are both valid paths to an EdgeCacheKeyset resource:
     * * `projects/project/locations/global/edgeCacheKeysets/yourKeyset`
     * * `yourKeyset`
     *   This must be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.  This field may not be specified otherwise.
     * 
     */
    public Optional<String> keyset() {
        return Optional.ofNullable(this.keyset);
    }
    /**
     * @return The query parameter in which to put the generated token.
     * If not specified, defaults to `edge-cache-token`.
     * If specified, the name must be 1-64 characters long and match the regular expression `a-zA-Z*` which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
     * This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
     * 
     */
    public Optional<String> tokenQueryParameter() {
        return Optional.ofNullable(this.tokenQueryParameter);
    }
    /**
     * @return The duration the token is valid starting from the moment the token is first generated.
     * Defaults to `86400s` (1 day).
     * The TTL must be &gt;= 0 and &lt;= 604,800 seconds (1 week).
     * This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<String> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String actions;
        private @Nullable List<String> copiedParameters;
        private @Nullable String keyset;
        private @Nullable String tokenQueryParameter;
        private @Nullable String tokenTtl;
        public Builder() {}
        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.copiedParameters = defaults.copiedParameters;
    	      this.keyset = defaults.keyset;
    	      this.tokenQueryParameter = defaults.tokenQueryParameter;
    	      this.tokenTtl = defaults.tokenTtl;
        }

        @CustomType.Setter
        public Builder actions(String actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        @CustomType.Setter
        public Builder copiedParameters(@Nullable List<String> copiedParameters) {
            this.copiedParameters = copiedParameters;
            return this;
        }
        public Builder copiedParameters(String... copiedParameters) {
            return copiedParameters(List.of(copiedParameters));
        }
        @CustomType.Setter
        public Builder keyset(@Nullable String keyset) {
            this.keyset = keyset;
            return this;
        }
        @CustomType.Setter
        public Builder tokenQueryParameter(@Nullable String tokenQueryParameter) {
            this.tokenQueryParameter = tokenQueryParameter;
            return this;
        }
        @CustomType.Setter
        public Builder tokenTtl(@Nullable String tokenTtl) {
            this.tokenTtl = tokenTtl;
            return this;
        }
        public EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures build() {
            final var o = new EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignatures();
            o.actions = actions;
            o.copiedParameters = copiedParameters;
            o.keyset = keyset;
            o.tokenQueryParameter = tokenQueryParameter;
            o.tokenTtl = tokenTtl;
            return o;
        }
    }
}
