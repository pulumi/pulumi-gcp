// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datacatalog.inputs.TagTemplateFieldArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagTemplateArgs Empty = new TagTemplateArgs();

    /**
     * The display name for this field.
     * (Required)
     * The display name of the enum value.
     * (Optional)
     * The display name for this template.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name for this field.
     * (Required)
     * The display name of the enum value.
     * (Optional)
     * The display name for this template.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
     * Structure is documented below.
     * 
     */
    @Import(name="fields", required=true)
    private Output<List<TagTemplateFieldArgs>> fields;

    /**
     * @return Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
     * Structure is documented below.
     * 
     */
    public Output<List<TagTemplateFieldArgs>> fields() {
        return this.fields;
    }

    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Template location region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Template location region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The id of the tag template to create.
     * 
     */
    @Import(name="tagTemplateId", required=true)
    private Output<String> tagTemplateId;

    /**
     * @return The id of the tag template to create.
     * 
     */
    public Output<String> tagTemplateId() {
        return this.tagTemplateId;
    }

    private TagTemplateArgs() {}

    private TagTemplateArgs(TagTemplateArgs $) {
        this.displayName = $.displayName;
        this.fields = $.fields;
        this.forceDelete = $.forceDelete;
        this.project = $.project;
        this.region = $.region;
        this.tagTemplateId = $.tagTemplateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagTemplateArgs $;

        public Builder() {
            $ = new TagTemplateArgs();
        }

        public Builder(TagTemplateArgs defaults) {
            $ = new TagTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The display name for this field.
         * (Required)
         * The display name of the enum value.
         * (Optional)
         * The display name for this template.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for this field.
         * (Required)
         * The display name of the enum value.
         * (Optional)
         * The display name for this template.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fields Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fields(Output<List<TagTemplateFieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<TagTemplateFieldArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fields(TagTemplateFieldArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param forceDelete This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Template location region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Template location region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tagTemplateId The id of the tag template to create.
         * 
         * @return builder
         * 
         */
        public Builder tagTemplateId(Output<String> tagTemplateId) {
            $.tagTemplateId = tagTemplateId;
            return this;
        }

        /**
         * @param tagTemplateId The id of the tag template to create.
         * 
         * @return builder
         * 
         */
        public Builder tagTemplateId(String tagTemplateId) {
            return tagTemplateId(Output.of(tagTemplateId));
        }

        public TagTemplateArgs build() {
            $.fields = Objects.requireNonNull($.fields, "expected parameter 'fields' to be non-null");
            $.tagTemplateId = Objects.requireNonNull($.tagTemplateId, "expected parameter 'tagTemplateId' to be non-null");
            return $;
        }
    }

}
