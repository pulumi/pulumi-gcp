// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.inputs.CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs;
import com.pulumi.gcp.oracledatabase.inputs.CloudVmClusterPropertiesTimeZoneArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudVmClusterPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudVmClusterPropertiesArgs Empty = new CloudVmClusterPropertiesArgs();

    /**
     * OCI Cluster name.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return OCI Cluster name.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * (Output)
     * Compartment ID of cluster.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return (Output)
     * Compartment ID of cluster.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * Number of enabled CPU cores.
     * 
     */
    @Import(name="cpuCoreCount", required=true)
    private Output<Integer> cpuCoreCount;

    /**
     * @return Number of enabled CPU cores.
     * 
     */
    public Output<Integer> cpuCoreCount() {
        return this.cpuCoreCount;
    }

    /**
     * The data disk group size to be allocated in TBs.
     * 
     */
    @Import(name="dataStorageSizeTb")
    private @Nullable Output<Double> dataStorageSizeTb;

    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    public Optional<Output<Double>> dataStorageSizeTb() {
        return Optional.ofNullable(this.dataStorageSizeTb);
    }

    /**
     * Local storage per VM
     * 
     */
    @Import(name="dbNodeStorageSizeGb")
    private @Nullable Output<Integer> dbNodeStorageSizeGb;

    /**
     * @return Local storage per VM
     * 
     */
    public Optional<Output<Integer>> dbNodeStorageSizeGb() {
        return Optional.ofNullable(this.dbNodeStorageSizeGb);
    }

    /**
     * OCID of database servers.
     * 
     */
    @Import(name="dbServerOcids")
    private @Nullable Output<List<String>> dbServerOcids;

    /**
     * @return OCID of database servers.
     * 
     */
    public Optional<Output<List<String>>> dbServerOcids() {
        return Optional.ofNullable(this.dbServerOcids);
    }

    /**
     * Data collection options for diagnostics.
     * Structure is documented below.
     * 
     */
    @Import(name="diagnosticsDataCollectionOptions")
    private @Nullable Output<CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs> diagnosticsDataCollectionOptions;

    /**
     * @return Data collection options for diagnostics.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs>> diagnosticsDataCollectionOptions() {
        return Optional.ofNullable(this.diagnosticsDataCollectionOptions);
    }

    /**
     * The type of redundancy.
     * Possible values:
     * DISK_REDUNDANCY_UNSPECIFIED
     * HIGH
     * NORMAL
     * 
     */
    @Import(name="diskRedundancy")
    private @Nullable Output<String> diskRedundancy;

    /**
     * @return The type of redundancy.
     * Possible values:
     * DISK_REDUNDANCY_UNSPECIFIED
     * HIGH
     * NORMAL
     * 
     */
    public Optional<Output<String>> diskRedundancy() {
        return Optional.ofNullable(this.diskRedundancy);
    }

    /**
     * (Output)
     * DNS listener IP.
     * 
     */
    @Import(name="dnsListenerIp")
    private @Nullable Output<String> dnsListenerIp;

    /**
     * @return (Output)
     * DNS listener IP.
     * 
     */
    public Optional<Output<String>> dnsListenerIp() {
        return Optional.ofNullable(this.dnsListenerIp);
    }

    /**
     * (Output)
     * Parent DNS domain where SCAN DNS and hosts names are qualified.
     * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return (Output)
     * Parent DNS domain where SCAN DNS and hosts names are qualified.
     * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Grid Infrastructure Version.
     * 
     */
    @Import(name="giVersion")
    private @Nullable Output<String> giVersion;

    /**
     * @return Grid Infrastructure Version.
     * 
     */
    public Optional<Output<String>> giVersion() {
        return Optional.ofNullable(this.giVersion);
    }

    /**
     * (Output)
     * host name without domain.
     * format: &#34;-&#34; with some suffix.
     * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return (Output)
     * host name without domain.
     * format: &#34;-&#34; with some suffix.
     * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Prefix for VM cluster host names.
     * 
     */
    @Import(name="hostnamePrefix")
    private @Nullable Output<String> hostnamePrefix;

    /**
     * @return Prefix for VM cluster host names.
     * 
     */
    public Optional<Output<String>> hostnamePrefix() {
        return Optional.ofNullable(this.hostnamePrefix);
    }

    /**
     * License type of VM Cluster.
     * Possible values:
     * LICENSE_TYPE_UNSPECIFIED
     * LICENSE_INCLUDED
     * BRING_YOUR_OWN_LICENSE
     * 
     */
    @Import(name="licenseType", required=true)
    private Output<String> licenseType;

    /**
     * @return License type of VM Cluster.
     * Possible values:
     * LICENSE_TYPE_UNSPECIFIED
     * LICENSE_INCLUDED
     * BRING_YOUR_OWN_LICENSE
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }

    /**
     * Use local backup.
     * 
     */
    @Import(name="localBackupEnabled")
    private @Nullable Output<Boolean> localBackupEnabled;

    /**
     * @return Use local backup.
     * 
     */
    public Optional<Output<Boolean>> localBackupEnabled() {
        return Optional.ofNullable(this.localBackupEnabled);
    }

    /**
     * Memory allocated in GBs.
     * 
     */
    @Import(name="memorySizeGb")
    private @Nullable Output<Integer> memorySizeGb;

    /**
     * @return Memory allocated in GBs.
     * 
     */
    public Optional<Output<Integer>> memorySizeGb() {
        return Optional.ofNullable(this.memorySizeGb);
    }

    /**
     * Number of database servers.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return Number of database servers.
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    @Import(name="ociUrl")
    private @Nullable Output<String> ociUrl;

    /**
     * @return (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    public Optional<Output<String>> ociUrl() {
        return Optional.ofNullable(this.ociUrl);
    }

    /**
     * (Output)
     * Oracle Cloud Infrastructure ID of VM Cluster.
     * 
     */
    @Import(name="ocid")
    private @Nullable Output<String> ocid;

    /**
     * @return (Output)
     * Oracle Cloud Infrastructure ID of VM Cluster.
     * 
     */
    public Optional<Output<String>> ocid() {
        return Optional.ofNullable(this.ocid);
    }

    /**
     * OCPU count per VM. Minimum is 0.1.
     * 
     */
    @Import(name="ocpuCount")
    private @Nullable Output<Double> ocpuCount;

    /**
     * @return OCPU count per VM. Minimum is 0.1.
     * 
     */
    public Optional<Output<Double>> ocpuCount() {
        return Optional.ofNullable(this.ocpuCount);
    }

    /**
     * (Output)
     * SCAN DNS name.
     * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    @Import(name="scanDns")
    private @Nullable Output<String> scanDns;

    /**
     * @return (Output)
     * SCAN DNS name.
     * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    public Optional<Output<String>> scanDns() {
        return Optional.ofNullable(this.scanDns);
    }

    /**
     * (Output)
     * OCID of scan DNS record.
     * 
     */
    @Import(name="scanDnsRecordId")
    private @Nullable Output<String> scanDnsRecordId;

    /**
     * @return (Output)
     * OCID of scan DNS record.
     * 
     */
    public Optional<Output<String>> scanDnsRecordId() {
        return Optional.ofNullable(this.scanDnsRecordId);
    }

    /**
     * (Output)
     * OCIDs of scan IPs.
     * 
     */
    @Import(name="scanIpIds")
    private @Nullable Output<List<String>> scanIpIds;

    /**
     * @return (Output)
     * OCIDs of scan IPs.
     * 
     */
    public Optional<Output<List<String>>> scanIpIds() {
        return Optional.ofNullable(this.scanIpIds);
    }

    /**
     * (Output)
     * SCAN listener port - TCP
     * 
     */
    @Import(name="scanListenerPortTcp")
    private @Nullable Output<Integer> scanListenerPortTcp;

    /**
     * @return (Output)
     * SCAN listener port - TCP
     * 
     */
    public Optional<Output<Integer>> scanListenerPortTcp() {
        return Optional.ofNullable(this.scanListenerPortTcp);
    }

    /**
     * (Output)
     * SCAN listener port - TLS
     * 
     */
    @Import(name="scanListenerPortTcpSsl")
    private @Nullable Output<Integer> scanListenerPortTcpSsl;

    /**
     * @return (Output)
     * SCAN listener port - TLS
     * 
     */
    public Optional<Output<Integer>> scanListenerPortTcpSsl() {
        return Optional.ofNullable(this.scanListenerPortTcpSsl);
    }

    /**
     * (Output)
     * Shape of VM Cluster.
     * 
     */
    @Import(name="shape")
    private @Nullable Output<String> shape;

    /**
     * @return (Output)
     * Shape of VM Cluster.
     * 
     */
    public Optional<Output<String>> shape() {
        return Optional.ofNullable(this.shape);
    }

    /**
     * Use exadata sparse snapshots.
     * 
     */
    @Import(name="sparseDiskgroupEnabled")
    private @Nullable Output<Boolean> sparseDiskgroupEnabled;

    /**
     * @return Use exadata sparse snapshots.
     * 
     */
    public Optional<Output<Boolean>> sparseDiskgroupEnabled() {
        return Optional.ofNullable(this.sparseDiskgroupEnabled);
    }

    /**
     * SSH public keys to be stored with cluster.
     * 
     */
    @Import(name="sshPublicKeys")
    private @Nullable Output<List<String>> sshPublicKeys;

    /**
     * @return SSH public keys to be stored with cluster.
     * 
     */
    public Optional<Output<List<String>>> sshPublicKeys() {
        return Optional.ofNullable(this.sshPublicKeys);
    }

    /**
     * (Output)
     * State of the cluster.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * State of the cluster.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * (Output)
     * The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    @Import(name="storageSizeGb")
    private @Nullable Output<Integer> storageSizeGb;

    /**
     * @return (Output)
     * The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    public Optional<Output<Integer>> storageSizeGb() {
        return Optional.ofNullable(this.storageSizeGb);
    }

    /**
     * (Output)
     * Operating system version of the image.
     * 
     */
    @Import(name="systemVersion")
    private @Nullable Output<String> systemVersion;

    /**
     * @return (Output)
     * Operating system version of the image.
     * 
     */
    public Optional<Output<String>> systemVersion() {
        return Optional.ofNullable(this.systemVersion);
    }

    /**
     * Represents a time zone from the
     * [IANA Time Zone Database](https://www.iana.org/time-zones).
     * Structure is documented below.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<CloudVmClusterPropertiesTimeZoneArgs> timeZone;

    /**
     * @return Represents a time zone from the
     * [IANA Time Zone Database](https://www.iana.org/time-zones).
     * Structure is documented below.
     * 
     */
    public Optional<Output<CloudVmClusterPropertiesTimeZoneArgs>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private CloudVmClusterPropertiesArgs() {}

    private CloudVmClusterPropertiesArgs(CloudVmClusterPropertiesArgs $) {
        this.clusterName = $.clusterName;
        this.compartmentId = $.compartmentId;
        this.cpuCoreCount = $.cpuCoreCount;
        this.dataStorageSizeTb = $.dataStorageSizeTb;
        this.dbNodeStorageSizeGb = $.dbNodeStorageSizeGb;
        this.dbServerOcids = $.dbServerOcids;
        this.diagnosticsDataCollectionOptions = $.diagnosticsDataCollectionOptions;
        this.diskRedundancy = $.diskRedundancy;
        this.dnsListenerIp = $.dnsListenerIp;
        this.domain = $.domain;
        this.giVersion = $.giVersion;
        this.hostname = $.hostname;
        this.hostnamePrefix = $.hostnamePrefix;
        this.licenseType = $.licenseType;
        this.localBackupEnabled = $.localBackupEnabled;
        this.memorySizeGb = $.memorySizeGb;
        this.nodeCount = $.nodeCount;
        this.ociUrl = $.ociUrl;
        this.ocid = $.ocid;
        this.ocpuCount = $.ocpuCount;
        this.scanDns = $.scanDns;
        this.scanDnsRecordId = $.scanDnsRecordId;
        this.scanIpIds = $.scanIpIds;
        this.scanListenerPortTcp = $.scanListenerPortTcp;
        this.scanListenerPortTcpSsl = $.scanListenerPortTcpSsl;
        this.shape = $.shape;
        this.sparseDiskgroupEnabled = $.sparseDiskgroupEnabled;
        this.sshPublicKeys = $.sshPublicKeys;
        this.state = $.state;
        this.storageSizeGb = $.storageSizeGb;
        this.systemVersion = $.systemVersion;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudVmClusterPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudVmClusterPropertiesArgs $;

        public Builder() {
            $ = new CloudVmClusterPropertiesArgs();
        }

        public Builder(CloudVmClusterPropertiesArgs defaults) {
            $ = new CloudVmClusterPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName OCI Cluster name.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName OCI Cluster name.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param compartmentId (Output)
         * Compartment ID of cluster.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Output)
         * Compartment ID of cluster.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param cpuCoreCount Number of enabled CPU cores.
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(Output<Integer> cpuCoreCount) {
            $.cpuCoreCount = cpuCoreCount;
            return this;
        }

        /**
         * @param cpuCoreCount Number of enabled CPU cores.
         * 
         * @return builder
         * 
         */
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            return cpuCoreCount(Output.of(cpuCoreCount));
        }

        /**
         * @param dataStorageSizeTb The data disk group size to be allocated in TBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeTb(@Nullable Output<Double> dataStorageSizeTb) {
            $.dataStorageSizeTb = dataStorageSizeTb;
            return this;
        }

        /**
         * @param dataStorageSizeTb The data disk group size to be allocated in TBs.
         * 
         * @return builder
         * 
         */
        public Builder dataStorageSizeTb(Double dataStorageSizeTb) {
            return dataStorageSizeTb(Output.of(dataStorageSizeTb));
        }

        /**
         * @param dbNodeStorageSizeGb Local storage per VM
         * 
         * @return builder
         * 
         */
        public Builder dbNodeStorageSizeGb(@Nullable Output<Integer> dbNodeStorageSizeGb) {
            $.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            return this;
        }

        /**
         * @param dbNodeStorageSizeGb Local storage per VM
         * 
         * @return builder
         * 
         */
        public Builder dbNodeStorageSizeGb(Integer dbNodeStorageSizeGb) {
            return dbNodeStorageSizeGb(Output.of(dbNodeStorageSizeGb));
        }

        /**
         * @param dbServerOcids OCID of database servers.
         * 
         * @return builder
         * 
         */
        public Builder dbServerOcids(@Nullable Output<List<String>> dbServerOcids) {
            $.dbServerOcids = dbServerOcids;
            return this;
        }

        /**
         * @param dbServerOcids OCID of database servers.
         * 
         * @return builder
         * 
         */
        public Builder dbServerOcids(List<String> dbServerOcids) {
            return dbServerOcids(Output.of(dbServerOcids));
        }

        /**
         * @param dbServerOcids OCID of database servers.
         * 
         * @return builder
         * 
         */
        public Builder dbServerOcids(String... dbServerOcids) {
            return dbServerOcids(List.of(dbServerOcids));
        }

        /**
         * @param diagnosticsDataCollectionOptions Data collection options for diagnostics.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticsDataCollectionOptions(@Nullable Output<CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs> diagnosticsDataCollectionOptions) {
            $.diagnosticsDataCollectionOptions = diagnosticsDataCollectionOptions;
            return this;
        }

        /**
         * @param diagnosticsDataCollectionOptions Data collection options for diagnostics.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticsDataCollectionOptions(CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs diagnosticsDataCollectionOptions) {
            return diagnosticsDataCollectionOptions(Output.of(diagnosticsDataCollectionOptions));
        }

        /**
         * @param diskRedundancy The type of redundancy.
         * Possible values:
         * DISK_REDUNDANCY_UNSPECIFIED
         * HIGH
         * NORMAL
         * 
         * @return builder
         * 
         */
        public Builder diskRedundancy(@Nullable Output<String> diskRedundancy) {
            $.diskRedundancy = diskRedundancy;
            return this;
        }

        /**
         * @param diskRedundancy The type of redundancy.
         * Possible values:
         * DISK_REDUNDANCY_UNSPECIFIED
         * HIGH
         * NORMAL
         * 
         * @return builder
         * 
         */
        public Builder diskRedundancy(String diskRedundancy) {
            return diskRedundancy(Output.of(diskRedundancy));
        }

        /**
         * @param dnsListenerIp (Output)
         * DNS listener IP.
         * 
         * @return builder
         * 
         */
        public Builder dnsListenerIp(@Nullable Output<String> dnsListenerIp) {
            $.dnsListenerIp = dnsListenerIp;
            return this;
        }

        /**
         * @param dnsListenerIp (Output)
         * DNS listener IP.
         * 
         * @return builder
         * 
         */
        public Builder dnsListenerIp(String dnsListenerIp) {
            return dnsListenerIp(Output.of(dnsListenerIp));
        }

        /**
         * @param domain (Output)
         * Parent DNS domain where SCAN DNS and hosts names are qualified.
         * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain (Output)
         * Parent DNS domain where SCAN DNS and hosts names are qualified.
         * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param giVersion Grid Infrastructure Version.
         * 
         * @return builder
         * 
         */
        public Builder giVersion(@Nullable Output<String> giVersion) {
            $.giVersion = giVersion;
            return this;
        }

        /**
         * @param giVersion Grid Infrastructure Version.
         * 
         * @return builder
         * 
         */
        public Builder giVersion(String giVersion) {
            return giVersion(Output.of(giVersion));
        }

        /**
         * @param hostname (Output)
         * host name without domain.
         * format: &#34;-&#34; with some suffix.
         * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname (Output)
         * host name without domain.
         * format: &#34;-&#34; with some suffix.
         * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param hostnamePrefix Prefix for VM cluster host names.
         * 
         * @return builder
         * 
         */
        public Builder hostnamePrefix(@Nullable Output<String> hostnamePrefix) {
            $.hostnamePrefix = hostnamePrefix;
            return this;
        }

        /**
         * @param hostnamePrefix Prefix for VM cluster host names.
         * 
         * @return builder
         * 
         */
        public Builder hostnamePrefix(String hostnamePrefix) {
            return hostnamePrefix(Output.of(hostnamePrefix));
        }

        /**
         * @param licenseType License type of VM Cluster.
         * Possible values:
         * LICENSE_TYPE_UNSPECIFIED
         * LICENSE_INCLUDED
         * BRING_YOUR_OWN_LICENSE
         * 
         * @return builder
         * 
         */
        public Builder licenseType(Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType License type of VM Cluster.
         * Possible values:
         * LICENSE_TYPE_UNSPECIFIED
         * LICENSE_INCLUDED
         * BRING_YOUR_OWN_LICENSE
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param localBackupEnabled Use local backup.
         * 
         * @return builder
         * 
         */
        public Builder localBackupEnabled(@Nullable Output<Boolean> localBackupEnabled) {
            $.localBackupEnabled = localBackupEnabled;
            return this;
        }

        /**
         * @param localBackupEnabled Use local backup.
         * 
         * @return builder
         * 
         */
        public Builder localBackupEnabled(Boolean localBackupEnabled) {
            return localBackupEnabled(Output.of(localBackupEnabled));
        }

        /**
         * @param memorySizeGb Memory allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeGb(@Nullable Output<Integer> memorySizeGb) {
            $.memorySizeGb = memorySizeGb;
            return this;
        }

        /**
         * @param memorySizeGb Memory allocated in GBs.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeGb(Integer memorySizeGb) {
            return memorySizeGb(Output.of(memorySizeGb));
        }

        /**
         * @param nodeCount Number of database servers.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount Number of database servers.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param ociUrl (Output)
         * Deep link to the OCI console to view this resource.
         * 
         * @return builder
         * 
         */
        public Builder ociUrl(@Nullable Output<String> ociUrl) {
            $.ociUrl = ociUrl;
            return this;
        }

        /**
         * @param ociUrl (Output)
         * Deep link to the OCI console to view this resource.
         * 
         * @return builder
         * 
         */
        public Builder ociUrl(String ociUrl) {
            return ociUrl(Output.of(ociUrl));
        }

        /**
         * @param ocid (Output)
         * Oracle Cloud Infrastructure ID of VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder ocid(@Nullable Output<String> ocid) {
            $.ocid = ocid;
            return this;
        }

        /**
         * @param ocid (Output)
         * Oracle Cloud Infrastructure ID of VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder ocid(String ocid) {
            return ocid(Output.of(ocid));
        }

        /**
         * @param ocpuCount OCPU count per VM. Minimum is 0.1.
         * 
         * @return builder
         * 
         */
        public Builder ocpuCount(@Nullable Output<Double> ocpuCount) {
            $.ocpuCount = ocpuCount;
            return this;
        }

        /**
         * @param ocpuCount OCPU count per VM. Minimum is 0.1.
         * 
         * @return builder
         * 
         */
        public Builder ocpuCount(Double ocpuCount) {
            return ocpuCount(Output.of(ocpuCount));
        }

        /**
         * @param scanDns (Output)
         * SCAN DNS name.
         * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
         * 
         * @return builder
         * 
         */
        public Builder scanDns(@Nullable Output<String> scanDns) {
            $.scanDns = scanDns;
            return this;
        }

        /**
         * @param scanDns (Output)
         * SCAN DNS name.
         * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
         * 
         * @return builder
         * 
         */
        public Builder scanDns(String scanDns) {
            return scanDns(Output.of(scanDns));
        }

        /**
         * @param scanDnsRecordId (Output)
         * OCID of scan DNS record.
         * 
         * @return builder
         * 
         */
        public Builder scanDnsRecordId(@Nullable Output<String> scanDnsRecordId) {
            $.scanDnsRecordId = scanDnsRecordId;
            return this;
        }

        /**
         * @param scanDnsRecordId (Output)
         * OCID of scan DNS record.
         * 
         * @return builder
         * 
         */
        public Builder scanDnsRecordId(String scanDnsRecordId) {
            return scanDnsRecordId(Output.of(scanDnsRecordId));
        }

        /**
         * @param scanIpIds (Output)
         * OCIDs of scan IPs.
         * 
         * @return builder
         * 
         */
        public Builder scanIpIds(@Nullable Output<List<String>> scanIpIds) {
            $.scanIpIds = scanIpIds;
            return this;
        }

        /**
         * @param scanIpIds (Output)
         * OCIDs of scan IPs.
         * 
         * @return builder
         * 
         */
        public Builder scanIpIds(List<String> scanIpIds) {
            return scanIpIds(Output.of(scanIpIds));
        }

        /**
         * @param scanIpIds (Output)
         * OCIDs of scan IPs.
         * 
         * @return builder
         * 
         */
        public Builder scanIpIds(String... scanIpIds) {
            return scanIpIds(List.of(scanIpIds));
        }

        /**
         * @param scanListenerPortTcp (Output)
         * SCAN listener port - TCP
         * 
         * @return builder
         * 
         */
        public Builder scanListenerPortTcp(@Nullable Output<Integer> scanListenerPortTcp) {
            $.scanListenerPortTcp = scanListenerPortTcp;
            return this;
        }

        /**
         * @param scanListenerPortTcp (Output)
         * SCAN listener port - TCP
         * 
         * @return builder
         * 
         */
        public Builder scanListenerPortTcp(Integer scanListenerPortTcp) {
            return scanListenerPortTcp(Output.of(scanListenerPortTcp));
        }

        /**
         * @param scanListenerPortTcpSsl (Output)
         * SCAN listener port - TLS
         * 
         * @return builder
         * 
         */
        public Builder scanListenerPortTcpSsl(@Nullable Output<Integer> scanListenerPortTcpSsl) {
            $.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            return this;
        }

        /**
         * @param scanListenerPortTcpSsl (Output)
         * SCAN listener port - TLS
         * 
         * @return builder
         * 
         */
        public Builder scanListenerPortTcpSsl(Integer scanListenerPortTcpSsl) {
            return scanListenerPortTcpSsl(Output.of(scanListenerPortTcpSsl));
        }

        /**
         * @param shape (Output)
         * Shape of VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder shape(@Nullable Output<String> shape) {
            $.shape = shape;
            return this;
        }

        /**
         * @param shape (Output)
         * Shape of VM Cluster.
         * 
         * @return builder
         * 
         */
        public Builder shape(String shape) {
            return shape(Output.of(shape));
        }

        /**
         * @param sparseDiskgroupEnabled Use exadata sparse snapshots.
         * 
         * @return builder
         * 
         */
        public Builder sparseDiskgroupEnabled(@Nullable Output<Boolean> sparseDiskgroupEnabled) {
            $.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            return this;
        }

        /**
         * @param sparseDiskgroupEnabled Use exadata sparse snapshots.
         * 
         * @return builder
         * 
         */
        public Builder sparseDiskgroupEnabled(Boolean sparseDiskgroupEnabled) {
            return sparseDiskgroupEnabled(Output.of(sparseDiskgroupEnabled));
        }

        /**
         * @param sshPublicKeys SSH public keys to be stored with cluster.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKeys(@Nullable Output<List<String>> sshPublicKeys) {
            $.sshPublicKeys = sshPublicKeys;
            return this;
        }

        /**
         * @param sshPublicKeys SSH public keys to be stored with cluster.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKeys(List<String> sshPublicKeys) {
            return sshPublicKeys(Output.of(sshPublicKeys));
        }

        /**
         * @param sshPublicKeys SSH public keys to be stored with cluster.
         * 
         * @return builder
         * 
         */
        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }

        /**
         * @param state (Output)
         * State of the cluster.
         * Possible values:
         * STATE_UNSPECIFIED
         * PROVISIONING
         * AVAILABLE
         * UPDATING
         * TERMINATING
         * TERMINATED
         * FAILED
         * MAINTENANCE_IN_PROGRESS
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * State of the cluster.
         * Possible values:
         * STATE_UNSPECIFIED
         * PROVISIONING
         * AVAILABLE
         * UPDATING
         * TERMINATING
         * TERMINATED
         * FAILED
         * MAINTENANCE_IN_PROGRESS
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storageSizeGb (Output)
         * The storage allocation for the disk group, in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder storageSizeGb(@Nullable Output<Integer> storageSizeGb) {
            $.storageSizeGb = storageSizeGb;
            return this;
        }

        /**
         * @param storageSizeGb (Output)
         * The storage allocation for the disk group, in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder storageSizeGb(Integer storageSizeGb) {
            return storageSizeGb(Output.of(storageSizeGb));
        }

        /**
         * @param systemVersion (Output)
         * Operating system version of the image.
         * 
         * @return builder
         * 
         */
        public Builder systemVersion(@Nullable Output<String> systemVersion) {
            $.systemVersion = systemVersion;
            return this;
        }

        /**
         * @param systemVersion (Output)
         * Operating system version of the image.
         * 
         * @return builder
         * 
         */
        public Builder systemVersion(String systemVersion) {
            return systemVersion(Output.of(systemVersion));
        }

        /**
         * @param timeZone Represents a time zone from the
         * [IANA Time Zone Database](https://www.iana.org/time-zones).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<CloudVmClusterPropertiesTimeZoneArgs> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Represents a time zone from the
         * [IANA Time Zone Database](https://www.iana.org/time-zones).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(CloudVmClusterPropertiesTimeZoneArgs timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public CloudVmClusterPropertiesArgs build() {
            if ($.cpuCoreCount == null) {
                throw new MissingRequiredPropertyException("CloudVmClusterPropertiesArgs", "cpuCoreCount");
            }
            if ($.licenseType == null) {
                throw new MissingRequiredPropertyException("CloudVmClusterPropertiesArgs", "licenseType");
            }
            return $;
        }
    }

}
