// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImageResult {
    /**
     * @return The size of the image tar.gz archive stored in Google Cloud Storage in bytes.
     * 
     */
    private Integer archiveSizeBytes;
    /**
     * @return The creation timestamp in RFC3339 text format.
     * 
     */
    private String creationTimestamp;
    /**
     * @return An optional description of this image.
     * 
     */
    private String description;
    /**
     * @return The size of the image when restored onto a persistent disk in gigabytes.
     * 
     */
    private Integer diskSizeGb;
    /**
     * @return The family name of the image.
     * 
     */
    private String family;
    private @Nullable String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
     * that protects this image.
     * 
     */
    private String imageEncryptionKeySha256;
    /**
     * @return The unique identifier for the image.
     * 
     */
    private String imageId;
    /**
     * @return A fingerprint for the labels being applied to this image.
     * 
     */
    private String labelFingerprint;
    /**
     * @return A map of labels applied to this image.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return A list of applicable license URI.
     * 
     */
    private List<String> licenses;
    /**
     * @return The name of the image.
     * 
     */
    private String name;
    private String project;
    /**
     * @return The URI of the image.
     * 
     */
    private String selfLink;
    /**
     * @return The URL of the source disk used to create this image.
     * 
     */
    private String sourceDisk;
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
     * that protects this image.
     * 
     */
    private String sourceDiskEncryptionKeySha256;
    /**
     * @return The ID value of the disk used to create this image.
     * 
     */
    private String sourceDiskId;
    /**
     * @return The ID value of the image used to create this image.
     * 
     */
    private String sourceImageId;
    /**
     * @return The status of the image. Possible values are **FAILED**, **PENDING**, or **READY**.
     * 
     */
    private String status;

    private GetImageResult() {}
    /**
     * @return The size of the image tar.gz archive stored in Google Cloud Storage in bytes.
     * 
     */
    public Integer archiveSizeBytes() {
        return this.archiveSizeBytes;
    }
    /**
     * @return The creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The size of the image when restored onto a persistent disk in gigabytes.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return The family name of the image.
     * 
     */
    public String family() {
        return this.family;
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
     * that protects this image.
     * 
     */
    public String imageEncryptionKeySha256() {
        return this.imageEncryptionKeySha256;
    }
    /**
     * @return The unique identifier for the image.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return A fingerprint for the labels being applied to this image.
     * 
     */
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    /**
     * @return A map of labels applied to this image.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return A list of applicable license URI.
     * 
     */
    public List<String> licenses() {
        return this.licenses;
    }
    /**
     * @return The name of the image.
     * 
     */
    public String name() {
        return this.name;
    }
    public String project() {
        return this.project;
    }
    /**
     * @return The URI of the image.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The URL of the source disk used to create this image.
     * 
     */
    public String sourceDisk() {
        return this.sourceDisk;
    }
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key](https://cloud.google.com/compute/docs/disks/customer-supplied-encryption)
     * that protects this image.
     * 
     */
    public String sourceDiskEncryptionKeySha256() {
        return this.sourceDiskEncryptionKeySha256;
    }
    /**
     * @return The ID value of the disk used to create this image.
     * 
     */
    public String sourceDiskId() {
        return this.sourceDiskId;
    }
    /**
     * @return The ID value of the image used to create this image.
     * 
     */
    public String sourceImageId() {
        return this.sourceImageId;
    }
    /**
     * @return The status of the image. Possible values are **FAILED**, **PENDING**, or **READY**.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer archiveSizeBytes;
        private String creationTimestamp;
        private String description;
        private Integer diskSizeGb;
        private String family;
        private @Nullable String filter;
        private String id;
        private String imageEncryptionKeySha256;
        private String imageId;
        private String labelFingerprint;
        private Map<String,String> labels;
        private List<String> licenses;
        private String name;
        private String project;
        private String selfLink;
        private String sourceDisk;
        private String sourceDiskEncryptionKeySha256;
        private String sourceDiskId;
        private String sourceImageId;
        private String status;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveSizeBytes = defaults.archiveSizeBytes;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.family = defaults.family;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.imageEncryptionKeySha256 = defaults.imageEncryptionKeySha256;
    	      this.imageId = defaults.imageId;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskEncryptionKeySha256 = defaults.sourceDiskEncryptionKeySha256;
    	      this.sourceDiskId = defaults.sourceDiskId;
    	      this.sourceImageId = defaults.sourceImageId;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder archiveSizeBytes(Integer archiveSizeBytes) {
            this.archiveSizeBytes = Objects.requireNonNull(archiveSizeBytes);
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder family(String family) {
            this.family = Objects.requireNonNull(family);
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageEncryptionKeySha256(String imageEncryptionKeySha256) {
            this.imageEncryptionKeySha256 = Objects.requireNonNull(imageEncryptionKeySha256);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        @CustomType.Setter
        public Builder labelFingerprint(String labelFingerprint) {
            this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder licenses(List<String> licenses) {
            this.licenses = Objects.requireNonNull(licenses);
            return this;
        }
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDisk(String sourceDisk) {
            this.sourceDisk = Objects.requireNonNull(sourceDisk);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskEncryptionKeySha256(String sourceDiskEncryptionKeySha256) {
            this.sourceDiskEncryptionKeySha256 = Objects.requireNonNull(sourceDiskEncryptionKeySha256);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskId(String sourceDiskId) {
            this.sourceDiskId = Objects.requireNonNull(sourceDiskId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceImageId(String sourceImageId) {
            this.sourceImageId = Objects.requireNonNull(sourceImageId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetImageResult build() {
            final var o = new GetImageResult();
            o.archiveSizeBytes = archiveSizeBytes;
            o.creationTimestamp = creationTimestamp;
            o.description = description;
            o.diskSizeGb = diskSizeGb;
            o.family = family;
            o.filter = filter;
            o.id = id;
            o.imageEncryptionKeySha256 = imageEncryptionKeySha256;
            o.imageId = imageId;
            o.labelFingerprint = labelFingerprint;
            o.labels = labels;
            o.licenses = licenses;
            o.name = name;
            o.project = project;
            o.selfLink = selfLink;
            o.sourceDisk = sourceDisk;
            o.sourceDiskEncryptionKeySha256 = sourceDiskEncryptionKeySha256;
            o.sourceDiskId = sourceDiskId;
            o.sourceImageId = sourceImageId;
            o.status = status;
            return o;
        }
    }
}
