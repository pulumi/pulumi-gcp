// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.InstanceFromTemplateBootDiskInitializeParamsSourceImageEncryptionKey;
import com.pulumi.gcp.compute.outputs.InstanceFromTemplateBootDiskInitializeParamsSourceSnapshotEncryptionKey;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceFromTemplateBootDiskInitializeParams {
    /**
     * @return The architecture of the disk. One of &#34;X86_64&#34; or &#34;ARM64&#34;.
     * 
     */
    private @Nullable String architecture;
    /**
     * @return A flag to enable confidential compute mode on boot disk
     * 
     */
    private @Nullable Boolean enableConfidentialCompute;
    /**
     * @return The image from which this disk was initialised.
     * 
     */
    private @Nullable String image;
    /**
     * @return A set of key/value label pairs assigned to the disk.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
     * 
     */
    private @Nullable Integer provisionedIops;
    /**
     * @return Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
     * 
     */
    private @Nullable Integer provisionedThroughput;
    /**
     * @return A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    private @Nullable Map<String,String> resourceManagerTags;
    /**
     * @return A list of self_links of resource policies to attach to the instance&#39;s boot disk. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.
     * 
     */
    private @Nullable String resourcePolicies;
    /**
     * @return The size of the image in gigabytes.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return The snapshot from which this disk was initialised.
     * 
     */
    private @Nullable String snapshot;
    /**
     * @return The encryption key used to decrypt the source image.
     * 
     */
    private @Nullable InstanceFromTemplateBootDiskInitializeParamsSourceImageEncryptionKey sourceImageEncryptionKey;
    /**
     * @return The encryption key used to decrypt the source snapshot.
     * 
     */
    private @Nullable InstanceFromTemplateBootDiskInitializeParamsSourceSnapshotEncryptionKey sourceSnapshotEncryptionKey;
    /**
     * @return The URL of the storage pool in which the new disk is created
     * 
     */
    private @Nullable String storagePool;
    /**
     * @return The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
     * 
     */
    private @Nullable String type;

    private InstanceFromTemplateBootDiskInitializeParams() {}
    /**
     * @return The architecture of the disk. One of &#34;X86_64&#34; or &#34;ARM64&#34;.
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    /**
     * @return A flag to enable confidential compute mode on boot disk
     * 
     */
    public Optional<Boolean> enableConfidentialCompute() {
        return Optional.ofNullable(this.enableConfidentialCompute);
    }
    /**
     * @return The image from which this disk was initialised.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return A set of key/value label pairs assigned to the disk.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle.
     * 
     */
    public Optional<Integer> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }
    /**
     * @return Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle.
     * 
     */
    public Optional<Integer> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }
    /**
     * @return A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    public Map<String,String> resourceManagerTags() {
        return this.resourceManagerTags == null ? Map.of() : this.resourceManagerTags;
    }
    /**
     * @return A list of self_links of resource policies to attach to the instance&#39;s boot disk. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.
     * 
     */
    public Optional<String> resourcePolicies() {
        return Optional.ofNullable(this.resourcePolicies);
    }
    /**
     * @return The size of the image in gigabytes.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return The snapshot from which this disk was initialised.
     * 
     */
    public Optional<String> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }
    /**
     * @return The encryption key used to decrypt the source image.
     * 
     */
    public Optional<InstanceFromTemplateBootDiskInitializeParamsSourceImageEncryptionKey> sourceImageEncryptionKey() {
        return Optional.ofNullable(this.sourceImageEncryptionKey);
    }
    /**
     * @return The encryption key used to decrypt the source snapshot.
     * 
     */
    public Optional<InstanceFromTemplateBootDiskInitializeParamsSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKey() {
        return Optional.ofNullable(this.sourceSnapshotEncryptionKey);
    }
    /**
     * @return The URL of the storage pool in which the new disk is created
     * 
     */
    public Optional<String> storagePool() {
        return Optional.ofNullable(this.storagePool);
    }
    /**
     * @return The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFromTemplateBootDiskInitializeParams defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String architecture;
        private @Nullable Boolean enableConfidentialCompute;
        private @Nullable String image;
        private @Nullable Map<String,String> labels;
        private @Nullable Integer provisionedIops;
        private @Nullable Integer provisionedThroughput;
        private @Nullable Map<String,String> resourceManagerTags;
        private @Nullable String resourcePolicies;
        private @Nullable Integer size;
        private @Nullable String snapshot;
        private @Nullable InstanceFromTemplateBootDiskInitializeParamsSourceImageEncryptionKey sourceImageEncryptionKey;
        private @Nullable InstanceFromTemplateBootDiskInitializeParamsSourceSnapshotEncryptionKey sourceSnapshotEncryptionKey;
        private @Nullable String storagePool;
        private @Nullable String type;
        public Builder() {}
        public Builder(InstanceFromTemplateBootDiskInitializeParams defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.enableConfidentialCompute = defaults.enableConfidentialCompute;
    	      this.image = defaults.image;
    	      this.labels = defaults.labels;
    	      this.provisionedIops = defaults.provisionedIops;
    	      this.provisionedThroughput = defaults.provisionedThroughput;
    	      this.resourceManagerTags = defaults.resourceManagerTags;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.size = defaults.size;
    	      this.snapshot = defaults.snapshot;
    	      this.sourceImageEncryptionKey = defaults.sourceImageEncryptionKey;
    	      this.sourceSnapshotEncryptionKey = defaults.sourceSnapshotEncryptionKey;
    	      this.storagePool = defaults.storagePool;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {

            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder enableConfidentialCompute(@Nullable Boolean enableConfidentialCompute) {

            this.enableConfidentialCompute = enableConfidentialCompute;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {

            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedIops(@Nullable Integer provisionedIops) {

            this.provisionedIops = provisionedIops;
            return this;
        }
        @CustomType.Setter
        public Builder provisionedThroughput(@Nullable Integer provisionedThroughput) {

            this.provisionedThroughput = provisionedThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder resourceManagerTags(@Nullable Map<String,String> resourceManagerTags) {

            this.resourceManagerTags = resourceManagerTags;
            return this;
        }
        @CustomType.Setter
        public Builder resourcePolicies(@Nullable String resourcePolicies) {

            this.resourcePolicies = resourcePolicies;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshot(@Nullable String snapshot) {

            this.snapshot = snapshot;
            return this;
        }
        @CustomType.Setter
        public Builder sourceImageEncryptionKey(@Nullable InstanceFromTemplateBootDiskInitializeParamsSourceImageEncryptionKey sourceImageEncryptionKey) {

            this.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSnapshotEncryptionKey(@Nullable InstanceFromTemplateBootDiskInitializeParamsSourceSnapshotEncryptionKey sourceSnapshotEncryptionKey) {

            this.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder storagePool(@Nullable String storagePool) {

            this.storagePool = storagePool;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public InstanceFromTemplateBootDiskInitializeParams build() {
            final var _resultValue = new InstanceFromTemplateBootDiskInitializeParams();
            _resultValue.architecture = architecture;
            _resultValue.enableConfidentialCompute = enableConfidentialCompute;
            _resultValue.image = image;
            _resultValue.labels = labels;
            _resultValue.provisionedIops = provisionedIops;
            _resultValue.provisionedThroughput = provisionedThroughput;
            _resultValue.resourceManagerTags = resourceManagerTags;
            _resultValue.resourcePolicies = resourcePolicies;
            _resultValue.size = size;
            _resultValue.snapshot = snapshot;
            _resultValue.sourceImageEncryptionKey = sourceImageEncryptionKey;
            _resultValue.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            _resultValue.storagePool = storagePool;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
