// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch {
    /**
     * @return The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
     * 
     */
    private final @Nullable String exactMatch;
    /**
     * @return Headers to remove from the response prior to sending it back to the client.
     * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
     * 
     */
    private final String headerName;
    /**
     * @return If set to false (default), the headerMatch is considered a match if the match criteria above are met.
     * If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
     * 
     */
    private final @Nullable Boolean invertMatch;
    /**
     * @return The value of the header must start with the contents of prefixMatch.
     * 
     */
    private final @Nullable String prefixMatch;
    /**
     * @return Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
     * 
     */
    private final @Nullable Boolean presentMatch;
    /**
     * @return The value of the header must end with the contents of suffixMatch.
     * 
     */
    private final @Nullable String suffixMatch;

    @CustomType.Constructor
    private EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch(
        @CustomType.Parameter("exactMatch") @Nullable String exactMatch,
        @CustomType.Parameter("headerName") String headerName,
        @CustomType.Parameter("invertMatch") @Nullable Boolean invertMatch,
        @CustomType.Parameter("prefixMatch") @Nullable String prefixMatch,
        @CustomType.Parameter("presentMatch") @Nullable Boolean presentMatch,
        @CustomType.Parameter("suffixMatch") @Nullable String suffixMatch) {
        this.exactMatch = exactMatch;
        this.headerName = headerName;
        this.invertMatch = invertMatch;
        this.prefixMatch = prefixMatch;
        this.presentMatch = presentMatch;
        this.suffixMatch = suffixMatch;
    }

    /**
     * @return The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
     * 
     */
    public Optional<String> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }
    /**
     * @return Headers to remove from the response prior to sending it back to the client.
     * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
     * 
     */
    public String headerName() {
        return this.headerName;
    }
    /**
     * @return If set to false (default), the headerMatch is considered a match if the match criteria above are met.
     * If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
     * 
     */
    public Optional<Boolean> invertMatch() {
        return Optional.ofNullable(this.invertMatch);
    }
    /**
     * @return The value of the header must start with the contents of prefixMatch.
     * 
     */
    public Optional<String> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }
    /**
     * @return Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
     * 
     */
    public Optional<Boolean> presentMatch() {
        return Optional.ofNullable(this.presentMatch);
    }
    /**
     * @return The value of the header must end with the contents of suffixMatch.
     * 
     */
    public Optional<String> suffixMatch() {
        return Optional.ofNullable(this.suffixMatch);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String exactMatch;
        private String headerName;
        private @Nullable Boolean invertMatch;
        private @Nullable String prefixMatch;
        private @Nullable Boolean presentMatch;
        private @Nullable String suffixMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exactMatch = defaults.exactMatch;
    	      this.headerName = defaults.headerName;
    	      this.invertMatch = defaults.invertMatch;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.presentMatch = defaults.presentMatch;
    	      this.suffixMatch = defaults.suffixMatch;
        }

        public Builder exactMatch(@Nullable String exactMatch) {
            this.exactMatch = exactMatch;
            return this;
        }
        public Builder headerName(String headerName) {
            this.headerName = Objects.requireNonNull(headerName);
            return this;
        }
        public Builder invertMatch(@Nullable Boolean invertMatch) {
            this.invertMatch = invertMatch;
            return this;
        }
        public Builder prefixMatch(@Nullable String prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }
        public Builder presentMatch(@Nullable Boolean presentMatch) {
            this.presentMatch = presentMatch;
            return this;
        }
        public Builder suffixMatch(@Nullable String suffixMatch) {
            this.suffixMatch = suffixMatch;
            return this;
        }        public EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch build() {
            return new EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatch(exactMatch, headerName, invertMatch, prefixMatch, presentMatch, suffixMatch);
        }
    }
}
