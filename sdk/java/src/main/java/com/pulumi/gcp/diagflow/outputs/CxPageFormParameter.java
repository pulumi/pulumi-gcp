// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.diagflow.outputs.CxPageFormParameterFillBehavior;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxPageFormParameter {
    /**
     * @return The human-readable name of the parameter, unique within the form.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The entity type of the parameter.
     * Format: projects/-/locations/-/agents/-/entityTypes/&lt;System Entity Type ID&gt; for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt; for developer entity types.
     * 
     */
    private @Nullable String entityType;
    /**
     * @return Defines fill behavior for the parameter.
     * Structure is documented below.
     * 
     */
    private @Nullable CxPageFormParameterFillBehavior fillBehavior;
    /**
     * @return Indicates whether the parameter represents a list of values.
     * 
     */
    private @Nullable Boolean isList;
    /**
     * @return Indicates whether the parameter content should be redacted in log.
     * If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
     * 
     */
    private @Nullable Boolean redact;
    /**
     * @return Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
     * Required parameters must be filled before form filling concludes.
     * 
     */
    private @Nullable Boolean required;

    private CxPageFormParameter() {}
    /**
     * @return The human-readable name of the parameter, unique within the form.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The entity type of the parameter.
     * Format: projects/-/locations/-/agents/-/entityTypes/&lt;System Entity Type ID&gt; for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt; for developer entity types.
     * 
     */
    public Optional<String> entityType() {
        return Optional.ofNullable(this.entityType);
    }
    /**
     * @return Defines fill behavior for the parameter.
     * Structure is documented below.
     * 
     */
    public Optional<CxPageFormParameterFillBehavior> fillBehavior() {
        return Optional.ofNullable(this.fillBehavior);
    }
    /**
     * @return Indicates whether the parameter represents a list of values.
     * 
     */
    public Optional<Boolean> isList() {
        return Optional.ofNullable(this.isList);
    }
    /**
     * @return Indicates whether the parameter content should be redacted in log.
     * If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
     * 
     */
    public Optional<Boolean> redact() {
        return Optional.ofNullable(this.redact);
    }
    /**
     * @return Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
     * Required parameters must be filled before form filling concludes.
     * 
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxPageFormParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable String entityType;
        private @Nullable CxPageFormParameterFillBehavior fillBehavior;
        private @Nullable Boolean isList;
        private @Nullable Boolean redact;
        private @Nullable Boolean required;
        public Builder() {}
        public Builder(CxPageFormParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.entityType = defaults.entityType;
    	      this.fillBehavior = defaults.fillBehavior;
    	      this.isList = defaults.isList;
    	      this.redact = defaults.redact;
    	      this.required = defaults.required;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder entityType(@Nullable String entityType) {
            this.entityType = entityType;
            return this;
        }
        @CustomType.Setter
        public Builder fillBehavior(@Nullable CxPageFormParameterFillBehavior fillBehavior) {
            this.fillBehavior = fillBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder isList(@Nullable Boolean isList) {
            this.isList = isList;
            return this;
        }
        @CustomType.Setter
        public Builder redact(@Nullable Boolean redact) {
            this.redact = redact;
            return this;
        }
        @CustomType.Setter
        public Builder required(@Nullable Boolean required) {
            this.required = required;
            return this;
        }
        public CxPageFormParameter build() {
            final var o = new CxPageFormParameter();
            o.displayName = displayName;
            o.entityType = entityType;
            o.fillBehavior = fillBehavior;
            o.isList = isList;
            o.redact = redact;
            o.required = required;
            return o;
        }
    }
}
