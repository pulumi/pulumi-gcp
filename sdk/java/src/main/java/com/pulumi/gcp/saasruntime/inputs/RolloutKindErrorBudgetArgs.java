// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolloutKindErrorBudgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutKindErrorBudgetArgs Empty = new RolloutKindErrorBudgetArgs();

    /**
     * The maximum number of failed units allowed in a location without pausing
     * the rollout.
     * 
     */
    @Import(name="allowedCount")
    private @Nullable Output<Integer> allowedCount;

    /**
     * @return The maximum number of failed units allowed in a location without pausing
     * the rollout.
     * 
     */
    public Optional<Output<Integer>> allowedCount() {
        return Optional.ofNullable(this.allowedCount);
    }

    /**
     * The maximum percentage of units allowed to fail (0, 100] within a location
     * without pausing the rollout.
     * 
     */
    @Import(name="allowedPercentage")
    private @Nullable Output<Integer> allowedPercentage;

    /**
     * @return The maximum percentage of units allowed to fail (0, 100] within a location
     * without pausing the rollout.
     * 
     */
    public Optional<Output<Integer>> allowedPercentage() {
        return Optional.ofNullable(this.allowedPercentage);
    }

    private RolloutKindErrorBudgetArgs() {}

    private RolloutKindErrorBudgetArgs(RolloutKindErrorBudgetArgs $) {
        this.allowedCount = $.allowedCount;
        this.allowedPercentage = $.allowedPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutKindErrorBudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutKindErrorBudgetArgs $;

        public Builder() {
            $ = new RolloutKindErrorBudgetArgs();
        }

        public Builder(RolloutKindErrorBudgetArgs defaults) {
            $ = new RolloutKindErrorBudgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedCount The maximum number of failed units allowed in a location without pausing
         * the rollout.
         * 
         * @return builder
         * 
         */
        public Builder allowedCount(@Nullable Output<Integer> allowedCount) {
            $.allowedCount = allowedCount;
            return this;
        }

        /**
         * @param allowedCount The maximum number of failed units allowed in a location without pausing
         * the rollout.
         * 
         * @return builder
         * 
         */
        public Builder allowedCount(Integer allowedCount) {
            return allowedCount(Output.of(allowedCount));
        }

        /**
         * @param allowedPercentage The maximum percentage of units allowed to fail (0, 100] within a location
         * without pausing the rollout.
         * 
         * @return builder
         * 
         */
        public Builder allowedPercentage(@Nullable Output<Integer> allowedPercentage) {
            $.allowedPercentage = allowedPercentage;
            return this;
        }

        /**
         * @param allowedPercentage The maximum percentage of units allowed to fail (0, 100] within a location
         * without pausing the rollout.
         * 
         * @return builder
         * 
         */
        public Builder allowedPercentage(Integer allowedPercentage) {
            return allowedPercentage(Output.of(allowedPercentage));
        }

        public RolloutKindErrorBudgetArgs build() {
            return $;
        }
    }

}
