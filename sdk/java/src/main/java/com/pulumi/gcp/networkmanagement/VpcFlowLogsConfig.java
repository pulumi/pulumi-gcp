// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkmanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfigArgs;
import com.pulumi.gcp.networkmanagement.inputs.VpcFlowLogsConfigState;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Network Management Vpc Flow Logs Config Interconnect Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Router;
 * import com.pulumi.gcp.compute.RouterArgs;
 * import com.pulumi.gcp.compute.inputs.RouterBgpArgs;
 * import com.pulumi.gcp.compute.InterconnectAttachment;
 * import com.pulumi.gcp.compute.InterconnectAttachmentArgs;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfig;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("full-interconnect-test-network")
 *             .build());
 * 
 *         var router = new Router("router", RouterArgs.builder()
 *             .name("full-interconnect-test-router")
 *             .network(network.name())
 *             .bgp(RouterBgpArgs.builder()
 *                 .asn(16550)
 *                 .build())
 *             .build());
 * 
 *         var attachment = new InterconnectAttachment("attachment", InterconnectAttachmentArgs.builder()
 *             .name("full-interconnect-test-id")
 *             .edgeAvailabilityDomain("AVAILABILITY_DOMAIN_1")
 *             .type("PARTNER")
 *             .router(router.id())
 *             .mtu(1500)
 *             .build());
 * 
 *         var interconnect_test = new VpcFlowLogsConfig("interconnect-test", VpcFlowLogsConfigArgs.builder()
 *             .vpcFlowLogsConfigId("full-interconnect-test-id")
 *             .location("global")
 *             .interconnectAttachment(attachment.name().applyValue(name -> String.format("projects/%s/regions/us-east4/interconnectAttachments/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
 *             .state("ENABLED")
 *             .aggregationInterval("INTERVAL_5_SEC")
 *             .description("VPC Flow Logs over a VPN Gateway.")
 *             .flowSampling(0.5)
 *             .metadata("INCLUDE_ALL_METADATA")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Management Vpc Flow Logs Config Interconnect Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Router;
 * import com.pulumi.gcp.compute.RouterArgs;
 * import com.pulumi.gcp.compute.inputs.RouterBgpArgs;
 * import com.pulumi.gcp.compute.InterconnectAttachment;
 * import com.pulumi.gcp.compute.InterconnectAttachmentArgs;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfig;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("basic-interconnect-test-network")
 *             .build());
 * 
 *         var router = new Router("router", RouterArgs.builder()
 *             .name("basic-interconnect-test-router")
 *             .network(network.name())
 *             .bgp(RouterBgpArgs.builder()
 *                 .asn(16550)
 *                 .build())
 *             .build());
 * 
 *         var attachment = new InterconnectAttachment("attachment", InterconnectAttachmentArgs.builder()
 *             .name("basic-interconnect-test-id")
 *             .edgeAvailabilityDomain("AVAILABILITY_DOMAIN_1")
 *             .type("PARTNER")
 *             .router(router.id())
 *             .mtu(1500)
 *             .build());
 * 
 *         var interconnect_test = new VpcFlowLogsConfig("interconnect-test", VpcFlowLogsConfigArgs.builder()
 *             .vpcFlowLogsConfigId("basic-interconnect-test-id")
 *             .location("global")
 *             .interconnectAttachment(attachment.name().applyValue(name -> String.format("projects/%s/regions/us-east4/interconnectAttachments/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Management Vpc Flow Logs Config Vpn Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.VPNGateway;
 * import com.pulumi.gcp.compute.VPNGatewayArgs;
 * import com.pulumi.gcp.compute.Address;
 * import com.pulumi.gcp.compute.AddressArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.compute.VPNTunnel;
 * import com.pulumi.gcp.compute.VPNTunnelArgs;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfig;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfigArgs;
 * import com.pulumi.gcp.compute.Route;
 * import com.pulumi.gcp.compute.RouteArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("basic-test-network")
 *             .build());
 * 
 *         var targetGateway = new VPNGateway("targetGateway", VPNGatewayArgs.builder()
 *             .name("basic-test-gateway")
 *             .network(network.id())
 *             .build());
 * 
 *         var vpnStaticIp = new Address("vpnStaticIp", AddressArgs.builder()
 *             .name("basic-test-address")
 *             .build());
 * 
 *         var frEsp = new ForwardingRule("frEsp", ForwardingRuleArgs.builder()
 *             .name("basic-test-fresp")
 *             .ipProtocol("ESP")
 *             .ipAddress(vpnStaticIp.address())
 *             .target(targetGateway.id())
 *             .build());
 * 
 *         var frUdp500 = new ForwardingRule("frUdp500", ForwardingRuleArgs.builder()
 *             .name("basic-test-fr500")
 *             .ipProtocol("UDP")
 *             .portRange("500")
 *             .ipAddress(vpnStaticIp.address())
 *             .target(targetGateway.id())
 *             .build());
 * 
 *         var frUdp4500 = new ForwardingRule("frUdp4500", ForwardingRuleArgs.builder()
 *             .name("basic-test-fr4500")
 *             .ipProtocol("UDP")
 *             .portRange("4500")
 *             .ipAddress(vpnStaticIp.address())
 *             .target(targetGateway.id())
 *             .build());
 * 
 *         var tunnel = new VPNTunnel("tunnel", VPNTunnelArgs.builder()
 *             .name("basic-test-tunnel")
 *             .peerIp("15.0.0.120")
 *             .sharedSecret("a secret message")
 *             .targetVpnGateway(targetGateway.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     frEsp,
 *                     frUdp500,
 *                     frUdp4500)
 *                 .build());
 * 
 *         var vpn_test = new VpcFlowLogsConfig("vpn-test", VpcFlowLogsConfigArgs.builder()
 *             .vpcFlowLogsConfigId("basic-test-id")
 *             .location("global")
 *             .vpnTunnel(tunnel.name().applyValue(name -> String.format("projects/%s/regions/us-central1/vpnTunnels/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
 *             .build());
 * 
 *         var route = new Route("route", RouteArgs.builder()
 *             .name("basic-test-route")
 *             .network(network.name())
 *             .destRange("15.0.0.0/24")
 *             .priority(1000)
 *             .nextHopVpnTunnel(tunnel.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Management Vpc Flow Logs Config Vpn Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.VPNGateway;
 * import com.pulumi.gcp.compute.VPNGatewayArgs;
 * import com.pulumi.gcp.compute.Address;
 * import com.pulumi.gcp.compute.AddressArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.compute.VPNTunnel;
 * import com.pulumi.gcp.compute.VPNTunnelArgs;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfig;
 * import com.pulumi.gcp.networkmanagement.VpcFlowLogsConfigArgs;
 * import com.pulumi.gcp.compute.Route;
 * import com.pulumi.gcp.compute.RouteArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("full-test-network")
 *             .build());
 * 
 *         var targetGateway = new VPNGateway("targetGateway", VPNGatewayArgs.builder()
 *             .name("full-test-gateway")
 *             .network(network.id())
 *             .build());
 * 
 *         var vpnStaticIp = new Address("vpnStaticIp", AddressArgs.builder()
 *             .name("full-test-address")
 *             .build());
 * 
 *         var frEsp = new ForwardingRule("frEsp", ForwardingRuleArgs.builder()
 *             .name("full-test-fresp")
 *             .ipProtocol("ESP")
 *             .ipAddress(vpnStaticIp.address())
 *             .target(targetGateway.id())
 *             .build());
 * 
 *         var frUdp500 = new ForwardingRule("frUdp500", ForwardingRuleArgs.builder()
 *             .name("full-test-fr500")
 *             .ipProtocol("UDP")
 *             .portRange("500")
 *             .ipAddress(vpnStaticIp.address())
 *             .target(targetGateway.id())
 *             .build());
 * 
 *         var frUdp4500 = new ForwardingRule("frUdp4500", ForwardingRuleArgs.builder()
 *             .name("full-test-fr4500")
 *             .ipProtocol("UDP")
 *             .portRange("4500")
 *             .ipAddress(vpnStaticIp.address())
 *             .target(targetGateway.id())
 *             .build());
 * 
 *         var tunnel = new VPNTunnel("tunnel", VPNTunnelArgs.builder()
 *             .name("full-test-tunnel")
 *             .peerIp("15.0.0.120")
 *             .sharedSecret("a secret message")
 *             .targetVpnGateway(targetGateway.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     frEsp,
 *                     frUdp500,
 *                     frUdp4500)
 *                 .build());
 * 
 *         var vpn_test = new VpcFlowLogsConfig("vpn-test", VpcFlowLogsConfigArgs.builder()
 *             .vpcFlowLogsConfigId("full-test-id")
 *             .location("global")
 *             .vpnTunnel(tunnel.name().applyValue(name -> String.format("projects/%s/regions/us-central1/vpnTunnels/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
 *             .state("ENABLED")
 *             .aggregationInterval("INTERVAL_5_SEC")
 *             .description("VPC Flow Logs over a VPN Gateway.")
 *             .flowSampling(0.5)
 *             .metadata("INCLUDE_ALL_METADATA")
 *             .build());
 * 
 *         var route = new Route("route", RouteArgs.builder()
 *             .name("full-test-route")
 *             .network(network.name())
 *             .destRange("15.0.0.0/24")
 *             .priority(1000)
 *             .nextHopVpnTunnel(tunnel.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * VpcFlowLogsConfig can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}`
 * 
 * * `{{project}}/{{location}}/{{vpc_flow_logs_config_id}}`
 * 
 * * `{{location}}/{{vpc_flow_logs_config_id}}`
 * 
 * When using the `pulumi import` command, VpcFlowLogsConfig can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default projects/{{project}}/locations/{{location}}/vpcFlowLogsConfigs/{{vpc_flow_logs_config_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default {{project}}/{{location}}/{{vpc_flow_logs_config_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig default {{location}}/{{vpc_flow_logs_config_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig")
public class VpcFlowLogsConfig extends com.pulumi.resources.CustomResource {
    /**
     * Optional. The aggregation interval for the logs. Default value is
     * INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN&#34;
     * 
     */
    @Export(name="aggregationInterval", refs={String.class}, tree="[0]")
    private Output<String> aggregationInterval;

    /**
     * @return Optional. The aggregation interval for the logs. Default value is
     * INTERVAL_5_SEC.   Possible values:  AGGREGATION_INTERVAL_UNSPECIFIED INTERVAL_5_SEC INTERVAL_30_SEC INTERVAL_1_MIN INTERVAL_5_MIN INTERVAL_10_MIN INTERVAL_15_MIN&#34;
     * 
     */
    public Output<String> aggregationInterval() {
        return this.aggregationInterval;
    }
    /**
     * Output only. The time the config was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The time the config was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
     * of 512 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional. The user-supplied description of the VPC Flow Logs configuration. Maximum
     * of 512 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Optional. Export filter used to define which VPC Flow Logs should be logged.
     * 
     */
    @Export(name="filterExpr", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filterExpr;

    /**
     * @return Optional. Export filter used to define which VPC Flow Logs should be logged.
     * 
     */
    public Output<Optional<String>> filterExpr() {
        return Codegen.optional(this.filterExpr);
    }
    /**
     * Optional. The value of the field must be in (0, 1]. The sampling rate
     * of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
     * sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
     * the state field instead. Default value is 1.0.
     * 
     */
    @Export(name="flowSampling", refs={Double.class}, tree="[0]")
    private Output<Double> flowSampling;

    /**
     * @return Optional. The value of the field must be in (0, 1]. The sampling rate
     * of VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
     * sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs, use
     * the state field instead. Default value is 1.0.
     * 
     */
    public Output<Double> flowSampling() {
        return this.flowSampling;
    }
    /**
     * Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
     * 
     */
    @Export(name="interconnectAttachment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interconnectAttachment;

    /**
     * @return Traffic will be logged from the Interconnect Attachment. Format: projects/{project_id}/regions/{region}/interconnectAttachments/{name}
     * 
     */
    public Output<Optional<String>> interconnectAttachment() {
        return Codegen.optional(this.interconnectAttachment);
    }
    /**
     * Optional. Resource labels to represent user-provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. Resource labels to represent user-provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Resource ID segment making up resource `name`. It identifies the resource
     * within its parent collection as described in https://google.aip.dev/122. See documentation
     * for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource
     * within its parent collection as described in https://google.aip.dev/122. See documentation
     * for resource type `networkmanagement.googleapis.com/VpcFlowLogsConfig`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Optional. Configures whether all, none or a subset of metadata fields
     * should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
     * Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
     * 
     */
    @Export(name="metadata", refs={String.class}, tree="[0]")
    private Output<String> metadata;

    /**
     * @return Optional. Configures whether all, none or a subset of metadata fields
     * should be added to the reported VPC flow logs. Default value is INCLUDE_ALL_METADATA.
     * Possible values:  METADATA_UNSPECIFIED INCLUDE_ALL_METADATA EXCLUDE_ALL_METADATA CUSTOM_METADATA
     * 
     */
    public Output<String> metadata() {
        return this.metadata;
    }
    /**
     * Optional. Custom metadata fields to include in the reported VPC flow
     * logs. Can only be specified if \&#34;metadata\&#34; was set to CUSTOM_METADATA.
     * 
     */
    @Export(name="metadataFields", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> metadataFields;

    /**
     * @return Optional. Custom metadata fields to include in the reported VPC flow
     * logs. Can only be specified if \&#34;metadata\&#34; was set to CUSTOM_METADATA.
     * 
     */
    public Output<Optional<List<String>>> metadataFields() {
        return Codegen.optional(this.metadataFields);
    }
    /**
     * Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. Unique name of the configuration using the form:     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Optional. The state of the VPC Flow Log configuration. Default value
     * is ENABLED. When creating a new configuration, it must be enabled.   Possible
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Optional. The state of the VPC Flow Log configuration. Default value
     * is ENABLED. When creating a new configuration, it must be enabled.   Possible
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Output only. The time the config was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The time the config was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Required. ID of the `VpcFlowLogsConfig`.
     * 
     * ***
     * 
     */
    @Export(name="vpcFlowLogsConfigId", refs={String.class}, tree="[0]")
    private Output<String> vpcFlowLogsConfigId;

    /**
     * @return Required. ID of the `VpcFlowLogsConfig`.
     * 
     * ***
     * 
     */
    public Output<String> vpcFlowLogsConfigId() {
        return this.vpcFlowLogsConfigId;
    }
    /**
     * Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
     * 
     */
    @Export(name="vpnTunnel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vpnTunnel;

    /**
     * @return Traffic will be logged from the VPN Tunnel. Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
     * 
     */
    public Output<Optional<String>> vpnTunnel() {
        return Codegen.optional(this.vpnTunnel);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VpcFlowLogsConfig(java.lang.String name) {
        this(name, VpcFlowLogsConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VpcFlowLogsConfig(java.lang.String name, VpcFlowLogsConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VpcFlowLogsConfig(java.lang.String name, VpcFlowLogsConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VpcFlowLogsConfig(java.lang.String name, Output<java.lang.String> id, @Nullable VpcFlowLogsConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkmanagement/vpcFlowLogsConfig:VpcFlowLogsConfig", name, state, makeResourceOptions(options, id), false);
    }

    private static VpcFlowLogsConfigArgs makeArgs(VpcFlowLogsConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VpcFlowLogsConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VpcFlowLogsConfig get(java.lang.String name, Output<java.lang.String> id, @Nullable VpcFlowLogsConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VpcFlowLogsConfig(name, id, state, options);
    }
}
