// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificatemanager.outputs.GetCertificatesCertificateManagedAuthorizationAttemptInfo;
import com.pulumi.gcp.certificatemanager.outputs.GetCertificatesCertificateManagedProvisioningIssue;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCertificatesCertificateManaged {
    /**
     * @return Detailed state of the latest authorization attempt for each domain
     * specified for this Managed Certificate.
     * 
     */
    private List<GetCertificatesCertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos;
    /**
     * @return Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
     * 
     */
    private List<String> dnsAuthorizations;
    /**
     * @return The domains for which a managed SSL certificate will be generated.
     * Wildcard domains are only supported with DNS challenge resolution
     * 
     */
    private List<String> domains;
    /**
     * @return The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*&#47;locations/*&#47;certificateIssuanceConfigs/*.
     * If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
     * Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
     * 
     */
    private String issuanceConfig;
    /**
     * @return Information about issues with provisioning this Managed Certificate.
     * 
     */
    private List<GetCertificatesCertificateManagedProvisioningIssue> provisioningIssues;
    /**
     * @return A state of this Managed Certificate.
     * 
     */
    private String state;

    private GetCertificatesCertificateManaged() {}
    /**
     * @return Detailed state of the latest authorization attempt for each domain
     * specified for this Managed Certificate.
     * 
     */
    public List<GetCertificatesCertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos() {
        return this.authorizationAttemptInfos;
    }
    /**
     * @return Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
     * 
     */
    public List<String> dnsAuthorizations() {
        return this.dnsAuthorizations;
    }
    /**
     * @return The domains for which a managed SSL certificate will be generated.
     * Wildcard domains are only supported with DNS challenge resolution
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*&#47;locations/*&#47;certificateIssuanceConfigs/*.
     * If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
     * Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
     * 
     */
    public String issuanceConfig() {
        return this.issuanceConfig;
    }
    /**
     * @return Information about issues with provisioning this Managed Certificate.
     * 
     */
    public List<GetCertificatesCertificateManagedProvisioningIssue> provisioningIssues() {
        return this.provisioningIssues;
    }
    /**
     * @return A state of this Managed Certificate.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificateManaged defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCertificatesCertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos;
        private List<String> dnsAuthorizations;
        private List<String> domains;
        private String issuanceConfig;
        private List<GetCertificatesCertificateManagedProvisioningIssue> provisioningIssues;
        private String state;
        public Builder() {}
        public Builder(GetCertificatesCertificateManaged defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationAttemptInfos = defaults.authorizationAttemptInfos;
    	      this.dnsAuthorizations = defaults.dnsAuthorizations;
    	      this.domains = defaults.domains;
    	      this.issuanceConfig = defaults.issuanceConfig;
    	      this.provisioningIssues = defaults.provisioningIssues;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder authorizationAttemptInfos(List<GetCertificatesCertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos) {
            if (authorizationAttemptInfos == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManaged", "authorizationAttemptInfos");
            }
            this.authorizationAttemptInfos = authorizationAttemptInfos;
            return this;
        }
        public Builder authorizationAttemptInfos(GetCertificatesCertificateManagedAuthorizationAttemptInfo... authorizationAttemptInfos) {
            return authorizationAttemptInfos(List.of(authorizationAttemptInfos));
        }
        @CustomType.Setter
        public Builder dnsAuthorizations(List<String> dnsAuthorizations) {
            if (dnsAuthorizations == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManaged", "dnsAuthorizations");
            }
            this.dnsAuthorizations = dnsAuthorizations;
            return this;
        }
        public Builder dnsAuthorizations(String... dnsAuthorizations) {
            return dnsAuthorizations(List.of(dnsAuthorizations));
        }
        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManaged", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder issuanceConfig(String issuanceConfig) {
            if (issuanceConfig == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManaged", "issuanceConfig");
            }
            this.issuanceConfig = issuanceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningIssues(List<GetCertificatesCertificateManagedProvisioningIssue> provisioningIssues) {
            if (provisioningIssues == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManaged", "provisioningIssues");
            }
            this.provisioningIssues = provisioningIssues;
            return this;
        }
        public Builder provisioningIssues(GetCertificatesCertificateManagedProvisioningIssue... provisioningIssues) {
            return provisioningIssues(List.of(provisioningIssues));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManaged", "state");
            }
            this.state = state;
            return this;
        }
        public GetCertificatesCertificateManaged build() {
            final var _resultValue = new GetCertificatesCertificateManaged();
            _resultValue.authorizationAttemptInfos = authorizationAttemptInfos;
            _resultValue.dnsAuthorizations = dnsAuthorizations;
            _resultValue.domains = domains;
            _resultValue.issuanceConfig = issuanceConfig;
            _resultValue.provisioningIssues = provisioningIssues;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
