// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceConfidentialInstanceConfig {
    /**
     * @return The confidential computing technology the instance uses.
     * 								SEV is an AMD feature. TDX is an Intel feature. One of the following
     * 								values is required: SEV, SEV_SNP, TDX. If SEV_SNP, min_cpu_platform =
     * 								&#34;AMD Milan&#34; is currently required.
     * 
     */
    private String confidentialInstanceType;
    /**
     * @return Defines whether the instance should have confidential compute enabled. Field will be deprecated in a future release
     * 
     */
    private Boolean enableConfidentialCompute;

    private GetInstanceConfidentialInstanceConfig() {}
    /**
     * @return The confidential computing technology the instance uses.
     * 								SEV is an AMD feature. TDX is an Intel feature. One of the following
     * 								values is required: SEV, SEV_SNP, TDX. If SEV_SNP, min_cpu_platform =
     * 								&#34;AMD Milan&#34; is currently required.
     * 
     */
    public String confidentialInstanceType() {
        return this.confidentialInstanceType;
    }
    /**
     * @return Defines whether the instance should have confidential compute enabled. Field will be deprecated in a future release
     * 
     */
    public Boolean enableConfidentialCompute() {
        return this.enableConfidentialCompute;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceConfidentialInstanceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String confidentialInstanceType;
        private Boolean enableConfidentialCompute;
        public Builder() {}
        public Builder(GetInstanceConfidentialInstanceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.confidentialInstanceType = defaults.confidentialInstanceType;
    	      this.enableConfidentialCompute = defaults.enableConfidentialCompute;
        }

        @CustomType.Setter
        public Builder confidentialInstanceType(String confidentialInstanceType) {
            if (confidentialInstanceType == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfidentialInstanceConfig", "confidentialInstanceType");
            }
            this.confidentialInstanceType = confidentialInstanceType;
            return this;
        }
        @CustomType.Setter
        public Builder enableConfidentialCompute(Boolean enableConfidentialCompute) {
            if (enableConfidentialCompute == null) {
              throw new MissingRequiredPropertyException("GetInstanceConfidentialInstanceConfig", "enableConfidentialCompute");
            }
            this.enableConfidentialCompute = enableConfidentialCompute;
            return this;
        }
        public GetInstanceConfidentialInstanceConfig build() {
            final var _resultValue = new GetInstanceConfidentialInstanceConfig();
            _resultValue.confidentialInstanceType = confidentialInstanceType;
            _resultValue.enableConfidentialCompute = enableConfidentialCompute;
            return _resultValue;
        }
    }
}
