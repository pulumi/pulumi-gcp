// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firestore.IndexArgs;
import com.pulumi.gcp.firestore.inputs.IndexState;
import com.pulumi.gcp.firestore.outputs.IndexField;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Cloud Firestore indexes enable simple and complex queries against documents in a database.
 *  Both Firestore Native and Datastore Mode indexes are supported.
 *  This resource manages composite indexes and not single field indexes.
 *  To manage single field indexes, use the `gcp.firestore.Field` resource instead.
 * 
 * To get more information about Index, see:
 * 
 * * [API documentation](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.collectionGroups.indexes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/firestore/docs/query-data/indexing)
 * 
 * &gt; **Warning:** This resource creates a Firestore Index on a project that already has
 * a Firestore database. If you haven&#39;t already created it, you may
 * create a `gcp.firestore.Database` resource and `location_id` set
 * to your chosen location. If you wish to use App Engine, you may
 * instead create a `gcp.appengine.Application` resource.
 * Your Firestore location will be the same as the App Engine location specified.
 * 
 * ## Example Usage
 * 
 * ### Firestore Index Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Index;
 * import com.pulumi.gcp.firestore.IndexArgs;
 * import com.pulumi.gcp.firestore.inputs.IndexFieldArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id")
 *             .locationId("nam5")
 *             .type("FIRESTORE_NATIVE")
 *             .deleteProtectionState("DELETE_PROTECTION_DISABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var my_index = new Index("my-index", IndexArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("atestcollection")
 *             .fields(            
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("name")
 *                     .order("ASCENDING")
 *                     .build(),
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("description")
 *                     .order("DESCENDING")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Firestore Index Datastore Mode
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Index;
 * import com.pulumi.gcp.firestore.IndexArgs;
 * import com.pulumi.gcp.firestore.inputs.IndexFieldArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id-dm")
 *             .locationId("nam5")
 *             .type("DATASTORE_MODE")
 *             .deleteProtectionState("DELETE_PROTECTION_DISABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var my_index = new Index("my-index", IndexArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("atestcollection")
 *             .queryScope("COLLECTION_RECURSIVE")
 *             .apiScope("DATASTORE_MODE_API")
 *             .fields(            
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("name")
 *                     .order("ASCENDING")
 *                     .build(),
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("description")
 *                     .order("DESCENDING")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Firestore Index Vector
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firestore.Database;
 * import com.pulumi.gcp.firestore.DatabaseArgs;
 * import com.pulumi.gcp.firestore.Index;
 * import com.pulumi.gcp.firestore.IndexArgs;
 * import com.pulumi.gcp.firestore.inputs.IndexFieldArgs;
 * import com.pulumi.gcp.firestore.inputs.IndexFieldVectorConfigArgs;
 * import com.pulumi.gcp.firestore.inputs.IndexFieldVectorConfigFlatArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var database = new Database("database", DatabaseArgs.builder()
 *             .project("my-project-name")
 *             .name("database-id-vector")
 *             .locationId("nam5")
 *             .type("FIRESTORE_NATIVE")
 *             .deleteProtectionState("DELETE_PROTECTION_DISABLED")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var my_index = new Index("my-index", IndexArgs.builder()
 *             .project("my-project-name")
 *             .database(database.name())
 *             .collection("atestcollection")
 *             .fields(            
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("field_name")
 *                     .order("ASCENDING")
 *                     .build(),
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("__name__")
 *                     .order("ASCENDING")
 *                     .build(),
 *                 IndexFieldArgs.builder()
 *                     .fieldPath("description")
 *                     .vectorConfig(IndexFieldVectorConfigArgs.builder()
 *                         .dimension(128)
 *                         .flat()
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Index can be imported using any of these accepted formats:
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Index can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firestore/index:Index default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:firestore/index:Index")
public class Index extends com.pulumi.resources.CustomResource {
    /**
     * The API scope at which a query is run. Default value: &#34;ANY_API&#34; Possible values: [&#34;ANY_API&#34;, &#34;DATASTORE_MODE_API&#34;]
     * 
     */
    @Export(name="apiScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> apiScope;

    /**
     * @return The API scope at which a query is run. Default value: &#34;ANY_API&#34; Possible values: [&#34;ANY_API&#34;, &#34;DATASTORE_MODE_API&#34;]
     * 
     */
    public Output<Optional<String>> apiScope() {
        return Codegen.optional(this.apiScope);
    }
    /**
     * The collection being indexed.
     * 
     */
    @Export(name="collection", refs={String.class}, tree="[0]")
    private Output<String> collection;

    /**
     * @return The collection being indexed.
     * 
     */
    public Output<String> collection() {
        return this.collection;
    }
    /**
     * The Firestore database id. Defaults to &#39;&#34;(default)&#34;&#39;.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> database;

    /**
     * @return The Firestore database id. Defaults to &#39;&#34;(default)&#34;&#39;.
     * 
     */
    public Output<Optional<String>> database() {
        return Codegen.optional(this.database);
    }
    /**
     * The fields supported by this index. The last non-stored field entry is
     * always for the field path `__name__`. If, on creation, `__name__` was not
     * specified as the last field, it will be added automatically with the same
     * direction as that of the last field defined. If the final field in a
     * composite index is not directional, the `__name__` will be ordered
     * `&#34;ASCENDING&#34;` (unless explicitly specified otherwise).
     * Structure is documented below.
     * 
     */
    @Export(name="fields", refs={List.class,IndexField.class}, tree="[0,1]")
    private Output<List<IndexField>> fields;

    /**
     * @return The fields supported by this index. The last non-stored field entry is
     * always for the field path `__name__`. If, on creation, `__name__` was not
     * specified as the last field, it will be added automatically with the same
     * direction as that of the last field defined. If the final field in a
     * composite index is not directional, the `__name__` will be ordered
     * `&#34;ASCENDING&#34;` (unless explicitly specified otherwise).
     * Structure is documented below.
     * 
     */
    public Output<List<IndexField>> fields() {
        return this.fields;
    }
    /**
     * A server defined name for this index. Format:
     * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A server defined name for this index. Format:
     * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * The scope at which a query is run. Default value: &#34;COLLECTION&#34; Possible values: [&#34;COLLECTION&#34;, &#34;COLLECTION_GROUP&#34;,
     * &#34;COLLECTION_RECURSIVE&#34;]
     * 
     */
    @Export(name="queryScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queryScope;

    /**
     * @return The scope at which a query is run. Default value: &#34;COLLECTION&#34; Possible values: [&#34;COLLECTION&#34;, &#34;COLLECTION_GROUP&#34;,
     * &#34;COLLECTION_RECURSIVE&#34;]
     * 
     */
    public Output<Optional<String>> queryScope() {
        return Codegen.optional(this.queryScope);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Index(java.lang.String name) {
        this(name, IndexArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Index(java.lang.String name, IndexArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Index(java.lang.String name, IndexArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firestore/index:Index", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Index(java.lang.String name, Output<java.lang.String> id, @Nullable IndexState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firestore/index:Index", name, state, makeResourceOptions(options, id), false);
    }

    private static IndexArgs makeArgs(IndexArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? IndexArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Index get(java.lang.String name, Output<java.lang.String> id, @Nullable IndexState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Index(name, id, state, options);
    }
}
