// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVersionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVersionArgs Empty = new GetVersionArgs();

    /**
     * The location of the artifact registry.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the artifact registry.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the package.
     * 
     */
    @Import(name="packageName", required=true)
    private Output<String> packageName;

    /**
     * @return The name of the package.
     * 
     */
    public Output<String> packageName() {
        return this.packageName;
    }

    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The last part of the repository name to fetch from.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The last part of the repository name to fetch from.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * The name of the version.
     * 
     */
    @Import(name="versionName", required=true)
    private Output<String> versionName;

    /**
     * @return The name of the version.
     * 
     */
    public Output<String> versionName() {
        return this.versionName;
    }

    /**
     * The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
     * 
     */
    @Import(name="view")
    private @Nullable Output<String> view;

    /**
     * @return The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
     * 
     */
    public Optional<Output<String>> view() {
        return Optional.ofNullable(this.view);
    }

    private GetVersionArgs() {}

    private GetVersionArgs(GetVersionArgs $) {
        this.location = $.location;
        this.packageName = $.packageName;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
        this.versionName = $.versionName;
        this.view = $.view;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVersionArgs $;

        public Builder() {
            $ = new GetVersionArgs();
        }

        public Builder(GetVersionArgs defaults) {
            $ = new GetVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location of the artifact registry.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the artifact registry.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param packageName The name of the package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(Output<String> packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param packageName The name of the package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            return packageName(Output.of(packageName));
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param repositoryId The last part of the repository name to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The last part of the repository name to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param versionName The name of the version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName The name of the version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        /**
         * @param view The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder view(@Nullable Output<String> view) {
            $.view = view;
            return this;
        }

        /**
         * @param view The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder view(String view) {
            return view(Output.of(view));
        }

        public GetVersionArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetVersionArgs", "location");
            }
            if ($.packageName == null) {
                throw new MissingRequiredPropertyException("GetVersionArgs", "packageName");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetVersionArgs", "repositoryId");
            }
            if ($.versionName == null) {
                throw new MissingRequiredPropertyException("GetVersionArgs", "versionName");
            }
            return $;
        }
    }

}
