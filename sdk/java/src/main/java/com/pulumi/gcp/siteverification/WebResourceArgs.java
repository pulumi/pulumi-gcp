// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.siteverification;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.siteverification.inputs.WebResourceSiteArgs;
import java.lang.String;
import java.util.Objects;


public final class WebResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebResourceArgs Empty = new WebResourceArgs();

    /**
     * Container for the address and type of a site for which a verification token will be verified.
     * Structure is documented below.
     * 
     */
    @Import(name="site", required=true)
    private Output<WebResourceSiteArgs> site;

    /**
     * @return Container for the address and type of a site for which a verification token will be verified.
     * Structure is documented below.
     * 
     */
    public Output<WebResourceSiteArgs> site() {
        return this.site;
    }

    /**
     * The verification method for the Site Verification system to use to verify
     * this site or domain.
     * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
     * 
     */
    @Import(name="verificationMethod", required=true)
    private Output<String> verificationMethod;

    /**
     * @return The verification method for the Site Verification system to use to verify
     * this site or domain.
     * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
     * 
     */
    public Output<String> verificationMethod() {
        return this.verificationMethod;
    }

    private WebResourceArgs() {}

    private WebResourceArgs(WebResourceArgs $) {
        this.site = $.site;
        this.verificationMethod = $.verificationMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebResourceArgs $;

        public Builder() {
            $ = new WebResourceArgs();
        }

        public Builder(WebResourceArgs defaults) {
            $ = new WebResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param site Container for the address and type of a site for which a verification token will be verified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder site(Output<WebResourceSiteArgs> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site Container for the address and type of a site for which a verification token will be verified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder site(WebResourceSiteArgs site) {
            return site(Output.of(site));
        }

        /**
         * @param verificationMethod The verification method for the Site Verification system to use to verify
         * this site or domain.
         * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder verificationMethod(Output<String> verificationMethod) {
            $.verificationMethod = verificationMethod;
            return this;
        }

        /**
         * @param verificationMethod The verification method for the Site Verification system to use to verify
         * this site or domain.
         * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder verificationMethod(String verificationMethod) {
            return verificationMethod(Output.of(verificationMethod));
        }

        public WebResourceArgs build() {
            if ($.site == null) {
                throw new MissingRequiredPropertyException("WebResourceArgs", "site");
            }
            if ($.verificationMethod == null) {
                throw new MissingRequiredPropertyException("WebResourceArgs", "verificationMethod");
            }
            return $;
        }
    }

}
