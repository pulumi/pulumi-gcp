// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestrationStatePreviousIterationStateArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestrationStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestrationStateArgs Empty = new V2PolicyOrchestratorForFolderOrchestrationStateArgs();

    /**
     * (Output)
     * Describes the state of a single iteration of the orchestrator.
     * Structure is documented below.
     * 
     */
    @Import(name="currentIterationStates")
    private @Nullable Output<List<V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateArgs>> currentIterationStates;

    /**
     * @return (Output)
     * Describes the state of a single iteration of the orchestrator.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateArgs>>> currentIterationStates() {
        return Optional.ofNullable(this.currentIterationStates);
    }

    /**
     * (Output)
     * Describes the state of a single iteration of the orchestrator.
     * Structure is documented below.
     * 
     */
    @Import(name="previousIterationStates")
    private @Nullable Output<List<V2PolicyOrchestratorForFolderOrchestrationStatePreviousIterationStateArgs>> previousIterationStates;

    /**
     * @return (Output)
     * Describes the state of a single iteration of the orchestrator.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForFolderOrchestrationStatePreviousIterationStateArgs>>> previousIterationStates() {
        return Optional.ofNullable(this.previousIterationStates);
    }

    private V2PolicyOrchestratorForFolderOrchestrationStateArgs() {}

    private V2PolicyOrchestratorForFolderOrchestrationStateArgs(V2PolicyOrchestratorForFolderOrchestrationStateArgs $) {
        this.currentIterationStates = $.currentIterationStates;
        this.previousIterationStates = $.previousIterationStates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestrationStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestrationStateArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestrationStateArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestrationStateArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestrationStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentIterationStates (Output)
         * Describes the state of a single iteration of the orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder currentIterationStates(@Nullable Output<List<V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateArgs>> currentIterationStates) {
            $.currentIterationStates = currentIterationStates;
            return this;
        }

        /**
         * @param currentIterationStates (Output)
         * Describes the state of a single iteration of the orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder currentIterationStates(List<V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateArgs> currentIterationStates) {
            return currentIterationStates(Output.of(currentIterationStates));
        }

        /**
         * @param currentIterationStates (Output)
         * Describes the state of a single iteration of the orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder currentIterationStates(V2PolicyOrchestratorForFolderOrchestrationStateCurrentIterationStateArgs... currentIterationStates) {
            return currentIterationStates(List.of(currentIterationStates));
        }

        /**
         * @param previousIterationStates (Output)
         * Describes the state of a single iteration of the orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder previousIterationStates(@Nullable Output<List<V2PolicyOrchestratorForFolderOrchestrationStatePreviousIterationStateArgs>> previousIterationStates) {
            $.previousIterationStates = previousIterationStates;
            return this;
        }

        /**
         * @param previousIterationStates (Output)
         * Describes the state of a single iteration of the orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder previousIterationStates(List<V2PolicyOrchestratorForFolderOrchestrationStatePreviousIterationStateArgs> previousIterationStates) {
            return previousIterationStates(Output.of(previousIterationStates));
        }

        /**
         * @param previousIterationStates (Output)
         * Describes the state of a single iteration of the orchestrator.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder previousIterationStates(V2PolicyOrchestratorForFolderOrchestrationStatePreviousIterationStateArgs... previousIterationStates) {
            return previousIterationStates(List.of(previousIterationStates));
        }

        public V2PolicyOrchestratorForFolderOrchestrationStateArgs build() {
            return $;
        }
    }

}
