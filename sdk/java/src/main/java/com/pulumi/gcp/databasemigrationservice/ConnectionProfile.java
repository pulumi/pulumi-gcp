// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileState;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileAlloydb;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileCloudsql;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileError;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileMysql;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfilePostgresql;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A connection profile definition.
 * 
 * To get more information about ConnectionProfile, see:
 * 
 * * [API documentation](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.connectionProfiles/create)
 * * How-to Guides
 *     * [Database Migration](https://cloud.google.com/database-migration/docs/)
 * 
 * &gt; **Warning:** All arguments including the following potentially sensitive
 * values will be stored in the raw state as plain text: `mysql.password`, `mysql.ssl.client_key`, `mysql.ssl.client_certificate`, `mysql.ssl.ca_certificate`, `postgresql.password`, `postgresql.ssl.client_key`, `postgresql.ssl.client_certificate`, `postgresql.ssl.ca_certificate`, `cloudsql.settings.root_password`, `alloydb.settings.initial_user.password`.
 * Read more about sensitive data in state.
 * 
 * ## Example Usage
 * ### Database Migration Service Connection Profile Cloudsql
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlSslArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileCloudsqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileCloudsqlSettingsArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileCloudsqlSettingsIpConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var cloudsqldb = new DatabaseInstance(&#34;cloudsqldb&#34;, DatabaseInstanceArgs.builder()        
 *             .databaseVersion(&#34;MYSQL_5_7&#34;)
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier(&#34;db-n1-standard-1&#34;)
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sqlClientCert = new SslCert(&#34;sqlClientCert&#34;, SslCertArgs.builder()        
 *             .commonName(&#34;my-cert&#34;)
 *             .instance(cloudsqldb.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cloudsqldb)
 *                 .build());
 * 
 *         var sqldbUser = new User(&#34;sqldbUser&#34;, UserArgs.builder()        
 *             .instance(cloudsqldb.name())
 *             .password(&#34;my-password&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqlClientCert)
 *                 .build());
 * 
 *         var cloudsqlprofile = new ConnectionProfile(&#34;cloudsqlprofile&#34;, ConnectionProfileArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;my-fromprofileid&#34;)
 *             .displayName(&#34;my-fromprofileid_display&#34;)
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .mysql(ConnectionProfileMysqlArgs.builder()
 *                 .host(cloudsqldb.ipAddresses().applyValue(ipAddresses -&gt; ipAddresses[0].ipAddress()))
 *                 .port(3306)
 *                 .username(sqldbUser.name())
 *                 .password(sqldbUser.password())
 *                 .ssl(ConnectionProfileMysqlSslArgs.builder()
 *                     .clientKey(sqlClientCert.privateKey())
 *                     .clientCertificate(sqlClientCert.cert())
 *                     .caCertificate(sqlClientCert.serverCaCert())
 *                     .build())
 *                 .cloudSqlId(&#34;my-database&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqldbUser)
 *                 .build());
 * 
 *         var cloudsqlprofileDestination = new ConnectionProfile(&#34;cloudsqlprofileDestination&#34;, ConnectionProfileArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;my-toprofileid&#34;)
 *             .displayName(&#34;my-toprofileid_displayname&#34;)
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .cloudsql(ConnectionProfileCloudsqlArgs.builder()
 *                 .settings(ConnectionProfileCloudsqlSettingsArgs.builder()
 *                     .databaseVersion(&#34;MYSQL_5_7&#34;)
 *                     .userLabels(Map.of(&#34;cloudfoo&#34;, &#34;cloudbar&#34;))
 *                     .tier(&#34;db-n1-standard-1&#34;)
 *                     .edition(&#34;ENTERPRISE&#34;)
 *                     .storageAutoResizeLimit(&#34;0&#34;)
 *                     .activationPolicy(&#34;ALWAYS&#34;)
 *                     .ipConfig(ConnectionProfileCloudsqlSettingsIpConfigArgs.builder()
 *                         .enableIpv4(true)
 *                         .requireSsl(true)
 *                         .build())
 *                     .autoStorageIncrease(true)
 *                     .dataDiskType(&#34;PD_HDD&#34;)
 *                     .dataDiskSizeGb(&#34;11&#34;)
 *                     .zone(&#34;us-central1-b&#34;)
 *                     .sourceId(String.format(&#34;projects/%s/locations/us-central1/connectionProfiles/my-fromprofileid&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.projectId())))
 *                     .rootPassword(&#34;testpasscloudsql&#34;)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cloudsqlprofile)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Database Migration Service Connection Profile Postgres
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlSslArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var postgresqldb = new DatabaseInstance(&#34;postgresqldb&#34;, DatabaseInstanceArgs.builder()        
 *             .databaseVersion(&#34;POSTGRES_12&#34;)
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier(&#34;db-custom-2-13312&#34;)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sqlClientCert = new SslCert(&#34;sqlClientCert&#34;, SslCertArgs.builder()        
 *             .commonName(&#34;my-cert&#34;)
 *             .instance(postgresqldb.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(postgresqldb)
 *                 .build());
 * 
 *         var sqldbUser = new User(&#34;sqldbUser&#34;, UserArgs.builder()        
 *             .instance(postgresqldb.name())
 *             .password(&#34;my-password&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqlClientCert)
 *                 .build());
 * 
 *         var postgresprofile = new ConnectionProfile(&#34;postgresprofile&#34;, ConnectionProfileArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;my-profileid&#34;)
 *             .displayName(&#34;my-profileid_display&#34;)
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .host(postgresqldb.ipAddresses().applyValue(ipAddresses -&gt; ipAddresses[0].ipAddress()))
 *                 .port(5432)
 *                 .username(sqldbUser.name())
 *                 .password(sqldbUser.password())
 *                 .ssl(ConnectionProfilePostgresqlSslArgs.builder()
 *                     .clientKey(sqlClientCert.privateKey())
 *                     .clientCertificate(sqlClientCert.cert())
 *                     .caCertificate(sqlClientCert.serverCaCert())
 *                     .build())
 *                 .cloudSqlId(&#34;my-database&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqldbUser)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ConnectionProfile can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{project}}/{{location}}/{{connection_profile_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{location}}/{{connection_profile_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:databasemigrationservice/connectionProfile:ConnectionProfile")
public class ConnectionProfile extends com.pulumi.resources.CustomResource {
    /**
     * Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="alloydb", refs={ConnectionProfileAlloydb.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileAlloydb> alloydb;

    /**
     * @return Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileAlloydb>> alloydb() {
        return Codegen.optional(this.alloydb);
    }
    /**
     * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     * 
     */
    @Export(name="cloudsql", refs={ConnectionProfileCloudsql.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileCloudsql> cloudsql;

    /**
     * @return Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileCloudsql>> cloudsql() {
        return Codegen.optional(this.cloudsql);
    }
    /**
     * The ID of the connection profile.
     * 
     * ***
     * 
     */
    @Export(name="connectionProfileId", refs={String.class}, tree="[0]")
    private Output<String> connectionProfileId;

    /**
     * @return The ID of the connection profile.
     * 
     * ***
     * 
     */
    public Output<String> connectionProfileId() {
        return this.connectionProfileId;
    }
    /**
     * Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC &#39;Zulu&#39; format, accurate to nanoseconds. Example: &#39;2014-10-02T15:01:23.045123456Z&#39;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC &#39;Zulu&#39; format, accurate to nanoseconds. Example: &#39;2014-10-02T15:01:23.045123456Z&#39;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The database provider.
     * 
     */
    @Export(name="dbprovider", refs={String.class}, tree="[0]")
    private Output<String> dbprovider;

    /**
     * @return The database provider.
     * 
     */
    public Output<String> dbprovider() {
        return this.dbprovider;
    }
    /**
     * The connection profile display name.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The connection profile display name.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Output only. The error details in case of state FAILED.
     * Structure is documented below.
     * 
     */
    @Export(name="errors", refs={List.class,ConnectionProfileError.class}, tree="[0,1]")
    private Output<List<ConnectionProfileError>> errors;

    /**
     * @return Output only. The error details in case of state FAILED.
     * Structure is documented below.
     * 
     */
    public Output<List<ConnectionProfileError>> errors() {
        return this.errors;
    }
    /**
     * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location where the connection profile should reside.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location where the connection profile should reside.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     * 
     */
    @Export(name="mysql", refs={ConnectionProfileMysql.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileMysql> mysql;

    /**
     * @return Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileMysql>> mysql() {
        return Codegen.optional(this.mysql);
    }
    /**
     * The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     * 
     */
    @Export(name="postgresql", refs={ConnectionProfilePostgresql.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfilePostgresql> postgresql;

    /**
     * @return Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfilePostgresql>> postgresql() {
        return Codegen.optional(this.postgresql);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The current connection profile state.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current connection profile state.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectionProfile(String name) {
        this(name, ConnectionProfileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectionProfile(String name, ConnectionProfileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectionProfile(String name, ConnectionProfileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:databasemigrationservice/connectionProfile:ConnectionProfile", name, args == null ? ConnectionProfileArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConnectionProfile(String name, Output<String> id, @Nullable ConnectionProfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:databasemigrationservice/connectionProfile:ConnectionProfile", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectionProfile get(String name, Output<String> id, @Nullable ConnectionProfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectionProfile(name, id, state, options);
    }
}
