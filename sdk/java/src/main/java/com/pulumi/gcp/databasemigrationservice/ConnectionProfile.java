// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileState;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileAlloydb;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileCloudsql;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileError;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileMysql;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileOracle;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfilePostgresql;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A connection profile definition.
 * 
 * To get more information about ConnectionProfile, see:
 * 
 * * [API documentation](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.connectionProfiles/create)
 * * How-to Guides
 *     * [Database Migration](https://cloud.google.com/database-migration/docs/)
 * 
 * ## Example Usage
 * 
 * ### Database Migration Service Connection Profile Cloudsql
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlSslArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileCloudsqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileCloudsqlSettingsArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileCloudsqlSettingsIpConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var cloudsqldb = new DatabaseInstance("cloudsqldb", DatabaseInstanceArgs.builder()
 *             .name("my-database")
 *             .databaseVersion("MYSQL_5_7")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-n1-standard-1")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sqlClientCert = new SslCert("sqlClientCert", SslCertArgs.builder()
 *             .commonName("my-cert")
 *             .instance(cloudsqldb.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cloudsqldb)
 *                 .build());
 * 
 *         var sqldbUser = new User("sqldbUser", UserArgs.builder()
 *             .name("my-username")
 *             .instance(cloudsqldb.name())
 *             .password("my-password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqlClientCert)
 *                 .build());
 * 
 *         var cloudsqlprofile = new ConnectionProfile("cloudsqlprofile", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-fromprofileid")
 *             .displayName("my-fromprofileid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .mysql(ConnectionProfileMysqlArgs.builder()
 *                 .host(cloudsqldb.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(3306)
 *                 .username(sqldbUser.name())
 *                 .password(sqldbUser.password())
 *                 .ssl(ConnectionProfileMysqlSslArgs.builder()
 *                     .clientKey(sqlClientCert.privateKey())
 *                     .clientCertificate(sqlClientCert.cert())
 *                     .caCertificate(sqlClientCert.serverCaCert())
 *                     .type("SERVER_CLIENT")
 *                     .build())
 *                 .cloudSqlId("my-database")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqldbUser)
 *                 .build());
 * 
 *         var cloudsqlprofileDestination = new ConnectionProfile("cloudsqlprofileDestination", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-toprofileid")
 *             .displayName("my-toprofileid_displayname")
 *             .labels(Map.of("foo", "bar"))
 *             .cloudsql(ConnectionProfileCloudsqlArgs.builder()
 *                 .settings(ConnectionProfileCloudsqlSettingsArgs.builder()
 *                     .databaseVersion("MYSQL_5_7")
 *                     .userLabels(Map.of("cloudfoo", "cloudbar"))
 *                     .tier("db-n1-standard-1")
 *                     .edition("ENTERPRISE")
 *                     .storageAutoResizeLimit("0")
 *                     .activationPolicy("ALWAYS")
 *                     .ipConfig(ConnectionProfileCloudsqlSettingsIpConfigArgs.builder()
 *                         .enableIpv4(true)
 *                         .requireSsl(true)
 *                         .build())
 *                     .autoStorageIncrease(true)
 *                     .dataDiskType("PD_HDD")
 *                     .dataDiskSizeGb("11")
 *                     .zone("us-central1-b")
 *                     .sourceId(String.format("projects/%s/locations/us-central1/connectionProfiles/my-fromprofileid", project.projectId()))
 *                     .rootPassword("testpasscloudsql")
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cloudsqlprofile)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Postgres
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlSslArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var postgresqldb = new DatabaseInstance("postgresqldb", DatabaseInstanceArgs.builder()
 *             .name("my-database")
 *             .databaseVersion("POSTGRES_12")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sqlClientCert = new SslCert("sqlClientCert", SslCertArgs.builder()
 *             .commonName("my-cert")
 *             .instance(postgresqldb.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(postgresqldb)
 *                 .build());
 * 
 *         var sqldbUser = new User("sqldbUser", UserArgs.builder()
 *             .name("my-username")
 *             .instance(postgresqldb.name())
 *             .password("my-password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqlClientCert)
 *                 .build());
 * 
 *         var postgresprofile = new ConnectionProfile("postgresprofile", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-profileid")
 *             .displayName("my-profileid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .host(postgresqldb.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(5432)
 *                 .username(sqldbUser.name())
 *                 .password(sqldbUser.password())
 *                 .ssl(ConnectionProfilePostgresqlSslArgs.builder()
 *                     .clientKey(sqlClientCert.privateKey())
 *                     .clientCertificate(sqlClientCert.cert())
 *                     .caCertificate(sqlClientCert.serverCaCert())
 *                     .type("SERVER_CLIENT")
 *                     .build())
 *                 .cloudSqlId("my-database")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqldbUser)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Postgres No Ssl
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlSslArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var postgresqldb = new DatabaseInstance("postgresqldb", DatabaseInstanceArgs.builder()
 *             .name("my-database")
 *             .databaseVersion("POSTGRES_12")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sqlClientCert = new SslCert("sqlClientCert", SslCertArgs.builder()
 *             .commonName("my-cert")
 *             .instance(postgresqldb.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(postgresqldb)
 *                 .build());
 * 
 *         var sqldbUser = new User("sqldbUser", UserArgs.builder()
 *             .name("my-username")
 *             .instance(postgresqldb.name())
 *             .password("my-password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqlClientCert)
 *                 .build());
 * 
 *         var postgresprofile = new ConnectionProfile("postgresprofile", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-profileid")
 *             .displayName("my-profileid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .host(postgresqldb.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(5432)
 *                 .username(sqldbUser.name())
 *                 .password(sqldbUser.password())
 *                 .ssl(ConnectionProfilePostgresqlSslArgs.builder()
 *                     .type("NONE")
 *                     .build())
 *                 .cloudSqlId("my-database")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqldbUser)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Postgres Required Ssl
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlSslArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var postgresqldb = new DatabaseInstance("postgresqldb", DatabaseInstanceArgs.builder()
 *             .name("my-database")
 *             .databaseVersion("POSTGRES_12")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sqlClientCert = new SslCert("sqlClientCert", SslCertArgs.builder()
 *             .commonName("my-cert")
 *             .instance(postgresqldb.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(postgresqldb)
 *                 .build());
 * 
 *         var sqldbUser = new User("sqldbUser", UserArgs.builder()
 *             .name("my-username")
 *             .instance(postgresqldb.name())
 *             .password("my-password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqlClientCert)
 *                 .build());
 * 
 *         var postgresprofile = new ConnectionProfile("postgresprofile", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-profileid")
 *             .displayName("my-profileid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .host(postgresqldb.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(5432)
 *                 .username(sqldbUser.name())
 *                 .password(sqldbUser.password())
 *                 .ssl(ConnectionProfilePostgresqlSslArgs.builder()
 *                     .type("REQUIRED")
 *                     .build())
 *                 .cloudSqlId("my-database")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sqldbUser)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Oracle
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileOracleArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileOracleStaticServiceIpConnectivityArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var oracleprofile = new ConnectionProfile("oracleprofile", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-profileid")
 *             .displayName("my-profileid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .oracle(ConnectionProfileOracleArgs.builder()
 *                 .host("host")
 *                 .port(1521)
 *                 .username("username")
 *                 .password("password")
 *                 .databaseService("dbprovider")
 *                 .staticServiceIpConnectivity(ConnectionProfileOracleStaticServiceIpConnectivityArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Alloydb
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileAlloydbArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileAlloydbSettingsArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileAlloydbSettingsInitialUserArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileAlloydbSettingsPrimaryInstanceSettingsArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("vpc-network")
 *             .build());
 * 
 *         var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
 *             .name("private-ip-alloc")
 *             .addressType("INTERNAL")
 *             .purpose("VPC_PEERING")
 *             .prefixLength(16)
 *             .network(default_.id())
 *             .build());
 * 
 *         var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
 *             .network(default_.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(privateIpAlloc.name())
 *             .build());
 * 
 *         var alloydbprofile = new ConnectionProfile("alloydbprofile", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("my-profileid")
 *             .displayName("my-profileid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .alloydb(ConnectionProfileAlloydbArgs.builder()
 *                 .clusterId("tf-test-dbmsalloycluster_85840")
 *                 .settings(ConnectionProfileAlloydbSettingsArgs.builder()
 *                     .initialUser(ConnectionProfileAlloydbSettingsInitialUserArgs.builder()
 *                         .user("alloyuser_60302")
 *                         .password("alloypass_22811")
 *                         .build())
 *                     .vpcNetwork(default_.id())
 *                     .labels(Map.of("alloyfoo", "alloybar"))
 *                     .primaryInstanceSettings(ConnectionProfileAlloydbSettingsPrimaryInstanceSettingsArgs.builder()
 *                         .id("priminstid")
 *                         .machineConfig(ConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigArgs.builder()
 *                             .cpuCount(2)
 *                             .build())
 *                         .databaseFlags(Map.ofEntries(
 *                         ))
 *                         .labels(Map.of("alloysinstfoo", "allowinstbar"))
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(vpcConnection)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Existing Mysql
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var destinationCsql = new DatabaseInstance("destinationCsql", DatabaseInstanceArgs.builder()
 *             .name("destination-csql")
 *             .databaseVersion("MYSQL_5_7")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-n1-standard-1")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var existing_mysql = new ConnectionProfile("existing-mysql", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("destination-cp")
 *             .displayName("destination-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .mysql(ConnectionProfileMysqlArgs.builder()
 *                 .cloudSqlId("destination-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(destinationCsql)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Existing Postgres
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var destinationCsql = new DatabaseInstance("destinationCsql", DatabaseInstanceArgs.builder()
 *             .name("destination-csql")
 *             .databaseVersion("POSTGRES_15")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var existing_psql = new ConnectionProfile("existing-psql", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("destination-cp")
 *             .displayName("destination-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .cloudSqlId("destination-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(destinationCsql)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Database Migration Service Connection Profile Existing Alloydb
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.alloydb.Cluster;
 * import com.pulumi.gcp.alloydb.ClusterArgs;
 * import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
 * import com.pulumi.gcp.alloydb.inputs.ClusterInitialUserArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.alloydb.Instance;
 * import com.pulumi.gcp.alloydb.InstanceArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("destination-alloydb")
 *             .build());
 * 
 *         var destinationAlloydb = new Cluster("destinationAlloydb", ClusterArgs.builder()
 *             .clusterId("destination-alloydb")
 *             .location("us-central1")
 *             .networkConfig(ClusterNetworkConfigArgs.builder()
 *                 .network(default_.id())
 *                 .build())
 *             .databaseVersion("POSTGRES_15")
 *             .initialUser(ClusterInitialUserArgs.builder()
 *                 .user("destination-alloydb")
 *                 .password("destination-alloydb")
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
 *             .name("destination-alloydb")
 *             .addressType("INTERNAL")
 *             .purpose("VPC_PEERING")
 *             .prefixLength(16)
 *             .network(default_.id())
 *             .build());
 * 
 *         var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
 *             .network(default_.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(privateIpAlloc.name())
 *             .build());
 * 
 *         var destinationAlloydbPrimary = new Instance("destinationAlloydbPrimary", InstanceArgs.builder()
 *             .cluster(destinationAlloydb.name())
 *             .instanceId("destination-alloydb-primary")
 *             .instanceType("PRIMARY")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(vpcConnection)
 *                 .build());
 * 
 *         var existing_alloydb = new ConnectionProfile("existing-alloydb", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("destination-cp")
 *             .displayName("destination-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .alloydbClusterId("destination-alloydb")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     destinationAlloydb,
 *                     destinationAlloydbPrimary)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ConnectionProfile can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}`
 * 
 * * `{{project}}/{{location}}/{{connection_profile_id}}`
 * 
 * * `{{location}}/{{connection_profile_id}}`
 * 
 * When using the `pulumi import` command, ConnectionProfile can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{project}}/{{location}}/{{connection_profile_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{location}}/{{connection_profile_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:databasemigrationservice/connectionProfile:ConnectionProfile")
public class ConnectionProfile extends com.pulumi.resources.CustomResource {
    /**
     * Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="alloydb", refs={ConnectionProfileAlloydb.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileAlloydb> alloydb;

    /**
     * @return Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileAlloydb>> alloydb() {
        return Codegen.optional(this.alloydb);
    }
    /**
     * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     * 
     */
    @Export(name="cloudsql", refs={ConnectionProfileCloudsql.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileCloudsql> cloudsql;

    /**
     * @return Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileCloudsql>> cloudsql() {
        return Codegen.optional(this.cloudsql);
    }
    /**
     * The ID of the connection profile.
     * 
     */
    @Export(name="connectionProfileId", refs={String.class}, tree="[0]")
    private Output<String> connectionProfileId;

    /**
     * @return The ID of the connection profile.
     * 
     */
    public Output<String> connectionProfileId() {
        return this.connectionProfileId;
    }
    /**
     * Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC &#39;Zulu&#39; format, accurate to nanoseconds. Example: &#39;2014-10-02T15:01:23.045123456Z&#39;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC &#39;Zulu&#39; format, accurate to nanoseconds. Example: &#39;2014-10-02T15:01:23.045123456Z&#39;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The database provider.
     * 
     */
    @Export(name="dbprovider", refs={String.class}, tree="[0]")
    private Output<String> dbprovider;

    /**
     * @return The database provider.
     * 
     */
    public Output<String> dbprovider() {
        return this.dbprovider;
    }
    /**
     * The connection profile display name.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The connection profile display name.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Output only. The error details in case of state FAILED.
     * Structure is documented below.
     * 
     */
    @Export(name="errors", refs={List.class,ConnectionProfileError.class}, tree="[0,1]")
    private Output<List<ConnectionProfileError>> errors;

    /**
     * @return Output only. The error details in case of state FAILED.
     * Structure is documented below.
     * 
     */
    public Output<List<ConnectionProfileError>> errors() {
        return this.errors;
    }
    /**
     * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location where the connection profile should reside.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location where the connection profile should reside.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     * 
     */
    @Export(name="mysql", refs={ConnectionProfileMysql.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileMysql> mysql;

    /**
     * @return Specifies connection parameters required specifically for MySQL databases.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileMysql>> mysql() {
        return Codegen.optional(this.mysql);
    }
    /**
     * The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies connection parameters required specifically for Oracle databases.
     * Structure is documented below.
     * 
     */
    @Export(name="oracle", refs={ConnectionProfileOracle.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfileOracle> oracle;

    /**
     * @return Specifies connection parameters required specifically for Oracle databases.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfileOracle>> oracle() {
        return Codegen.optional(this.oracle);
    }
    /**
     * Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     * 
     */
    @Export(name="postgresql", refs={ConnectionProfilePostgresql.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionProfilePostgresql> postgresql;

    /**
     * @return Specifies connection parameters required specifically for PostgreSQL databases.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionProfilePostgresql>> postgresql() {
        return Codegen.optional(this.postgresql);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The current connection profile state.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current connection profile state.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectionProfile(java.lang.String name) {
        this(name, ConnectionProfileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectionProfile(java.lang.String name, ConnectionProfileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectionProfile(java.lang.String name, ConnectionProfileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:databasemigrationservice/connectionProfile:ConnectionProfile", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ConnectionProfile(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionProfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:databasemigrationservice/connectionProfile:ConnectionProfile", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectionProfileArgs makeArgs(ConnectionProfileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectionProfileArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectionProfile get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionProfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectionProfile(name, id, state, options);
    }
}
