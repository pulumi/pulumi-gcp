// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datacatalog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datacatalog.inputs.TagTemplateFieldArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final TagTemplateState Empty = new TagTemplateState();

    /**
     * The display name for this template.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name for this template.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<TagTemplateFieldArgs>> fields;

    /**
     * @return Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<TagTemplateFieldArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     * 
     */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
     * 
     */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * - 
     * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return -
     * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Template location region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Template location region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The id of the tag template to create.
     * 
     */
    @Import(name="tagTemplateId")
    private @Nullable Output<String> tagTemplateId;

    /**
     * @return The id of the tag template to create.
     * 
     */
    public Optional<Output<String>> tagTemplateId() {
        return Optional.ofNullable(this.tagTemplateId);
    }

    private TagTemplateState() {}

    private TagTemplateState(TagTemplateState $) {
        this.displayName = $.displayName;
        this.fields = $.fields;
        this.forceDelete = $.forceDelete;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.tagTemplateId = $.tagTemplateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagTemplateState $;

        public Builder() {
            $ = new TagTemplateState();
        }

        public Builder(TagTemplateState defaults) {
            $ = new TagTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The display name for this template.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for this template.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fields Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<TagTemplateFieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<TagTemplateFieldArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fields(TagTemplateFieldArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param forceDelete This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param name -
         * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name -
         * The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Template location region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Template location region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tagTemplateId The id of the tag template to create.
         * 
         * @return builder
         * 
         */
        public Builder tagTemplateId(@Nullable Output<String> tagTemplateId) {
            $.tagTemplateId = tagTemplateId;
            return this;
        }

        /**
         * @param tagTemplateId The id of the tag template to create.
         * 
         * @return builder
         * 
         */
        public Builder tagTemplateId(String tagTemplateId) {
            return tagTemplateId(Output.of(tagTemplateId));
        }

        public TagTemplateState build() {
            return $;
        }
    }

}
