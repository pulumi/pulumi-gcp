// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAddonNodeArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAntiAffinityGroupsArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAuthorizationArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAutoRepairConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterControlPlaneNodeArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterFleetArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPlatformConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPrivateRegistryConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterProxyArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterStatusArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterVcenterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmwareAdminClusterState extends com.pulumi.resources.ResourceArgs {

    public static final VmwareAdminClusterState Empty = new VmwareAdminClusterState();

    /**
     * The VMware admin cluster addon node configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="addonNode")
    private @Nullable Output<VmwareAdminClusterAddonNodeArgs> addonNode;

    /**
     * @return The VMware admin cluster addon node configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterAddonNodeArgs>> addonNode() {
        return Optional.ofNullable(this.addonNode);
    }

    /**
     * Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     * 
     */
    @Import(name="antiAffinityGroups")
    private @Nullable Output<VmwareAdminClusterAntiAffinityGroupsArgs> antiAffinityGroups;

    /**
     * @return AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterAntiAffinityGroupsArgs>> antiAffinityGroups() {
        return Optional.ofNullable(this.antiAffinityGroups);
    }

    /**
     * The VMware admin cluster authorization configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<VmwareAdminClusterAuthorizationArgs> authorization;

    /**
     * @return The VMware admin cluster authorization configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterAuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     * 
     */
    @Import(name="autoRepairConfig")
    private @Nullable Output<VmwareAdminClusterAutoRepairConfigArgs> autoRepairConfig;

    /**
     * @return Configuration for auto repairing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterAutoRepairConfigArgs>> autoRepairConfig() {
        return Optional.ofNullable(this.autoRepairConfig);
    }

    /**
     * The bootstrap cluster this VMware admin cluster belongs to.
     * 
     */
    @Import(name="bootstrapClusterMembership")
    private @Nullable Output<String> bootstrapClusterMembership;

    /**
     * @return The bootstrap cluster this VMware admin cluster belongs to.
     * 
     */
    public Optional<Output<String>> bootstrapClusterMembership() {
        return Optional.ofNullable(this.bootstrapClusterMembership);
    }

    /**
     * The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="controlPlaneNode")
    private @Nullable Output<VmwareAdminClusterControlPlaneNodeArgs> controlPlaneNode;

    /**
     * @return The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterControlPlaneNodeArgs>> controlPlaneNode() {
        return Optional.ofNullable(this.controlPlaneNode);
    }

    /**
     * The time the cluster was created, in RFC3339 text format.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time the cluster was created, in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * A human readable description of this VMware admin cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human readable description of this VMware admin cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * If set, the advanced cluster feature is enabled.
     * 
     */
    @Import(name="enableAdvancedCluster")
    private @Nullable Output<Boolean> enableAdvancedCluster;

    /**
     * @return If set, the advanced cluster feature is enabled.
     * 
     */
    public Optional<Output<Boolean>> enableAdvancedCluster() {
        return Optional.ofNullable(this.enableAdvancedCluster);
    }

    /**
     * The DNS name of VMware admin cluster&#39;s API server.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The DNS name of VMware admin cluster&#39;s API server.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="fleets")
    private @Nullable Output<List<VmwareAdminClusterFleetArgs>> fleets;

    /**
     * @return Fleet configuration for the cluster.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VmwareAdminClusterFleetArgs>>> fleets() {
        return Optional.ofNullable(this.fleets);
    }

    /**
     * The OS image type for the VMware admin cluster.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The OS image type for the VMware admin cluster.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="loadBalancer")
    private @Nullable Output<VmwareAdminClusterLoadBalancerArgs> loadBalancer;

    /**
     * @return Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterLoadBalancerArgs>> loadBalancer() {
        return Optional.ofNullable(this.loadBalancer);
    }

    /**
     * The object name of the VMwareAdminCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     * 
     */
    @Import(name="localName")
    private @Nullable Output<String> localName;

    /**
     * @return The object name of the VMwareAdminCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     * 
     */
    public Optional<Output<String>> localName() {
        return Optional.ofNullable(this.localName);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The VMware admin cluster resource name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The VMware admin cluster resource name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The VMware admin cluster network configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="networkConfig")
    private @Nullable Output<VmwareAdminClusterNetworkConfigArgs> networkConfig;

    /**
     * @return The VMware admin cluster network configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterNetworkConfigArgs>> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }

    /**
     * The Anthos clusters on the VMware version for the admin cluster.
     * 
     */
    @Import(name="onPremVersion")
    private @Nullable Output<String> onPremVersion;

    /**
     * @return The Anthos clusters on the VMware version for the admin cluster.
     * 
     */
    public Optional<Output<String>> onPremVersion() {
        return Optional.ofNullable(this.onPremVersion);
    }

    /**
     * The VMware platform configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="platformConfig")
    private @Nullable Output<VmwareAdminClusterPlatformConfigArgs> platformConfig;

    /**
     * @return The VMware platform configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterPlatformConfigArgs>> platformConfig() {
        return Optional.ofNullable(this.platformConfig);
    }

    /**
     * Configuration for private registry.
     * Structure is documented below.
     * 
     */
    @Import(name="privateRegistryConfig")
    private @Nullable Output<VmwareAdminClusterPrivateRegistryConfigArgs> privateRegistryConfig;

    /**
     * @return Configuration for private registry.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterPrivateRegistryConfigArgs>> privateRegistryConfig() {
        return Optional.ofNullable(this.privateRegistryConfig);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Configuration for proxy.
     * Structure is documented below.
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<VmwareAdminClusterProxyArgs> proxy;

    /**
     * @return Configuration for proxy.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterProxyArgs>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * If set, there are currently changes in flight to the VMware admin cluster.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return If set, there are currently changes in flight to the VMware admin cluster.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * (Output)
     * The lifecycle state of the condition.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * The lifecycle state of the condition.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<VmwareAdminClusterStatusArgs>> statuses;

    /**
     * @return ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VmwareAdminClusterStatusArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * The unique identifier of the VMware Admin Cluster.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The unique identifier of the VMware Admin Cluster.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The time the cluster was last updated, in RFC3339 text format.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The time the cluster was last updated, in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="vcenter")
    private @Nullable Output<VmwareAdminClusterVcenterArgs> vcenter;

    /**
     * @return Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VmwareAdminClusterVcenterArgs>> vcenter() {
        return Optional.ofNullable(this.vcenter);
    }

    private VmwareAdminClusterState() {}

    private VmwareAdminClusterState(VmwareAdminClusterState $) {
        this.addonNode = $.addonNode;
        this.annotations = $.annotations;
        this.antiAffinityGroups = $.antiAffinityGroups;
        this.authorization = $.authorization;
        this.autoRepairConfig = $.autoRepairConfig;
        this.bootstrapClusterMembership = $.bootstrapClusterMembership;
        this.controlPlaneNode = $.controlPlaneNode;
        this.createTime = $.createTime;
        this.description = $.description;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.enableAdvancedCluster = $.enableAdvancedCluster;
        this.endpoint = $.endpoint;
        this.etag = $.etag;
        this.fleets = $.fleets;
        this.imageType = $.imageType;
        this.loadBalancer = $.loadBalancer;
        this.localName = $.localName;
        this.location = $.location;
        this.name = $.name;
        this.networkConfig = $.networkConfig;
        this.onPremVersion = $.onPremVersion;
        this.platformConfig = $.platformConfig;
        this.privateRegistryConfig = $.privateRegistryConfig;
        this.project = $.project;
        this.proxy = $.proxy;
        this.reconciling = $.reconciling;
        this.state = $.state;
        this.statuses = $.statuses;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.vcenter = $.vcenter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareAdminClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareAdminClusterState $;

        public Builder() {
            $ = new VmwareAdminClusterState();
        }

        public Builder(VmwareAdminClusterState defaults) {
            $ = new VmwareAdminClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonNode The VMware admin cluster addon node configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addonNode(@Nullable Output<VmwareAdminClusterAddonNodeArgs> addonNode) {
            $.addonNode = addonNode;
            return this;
        }

        /**
         * @param addonNode The VMware admin cluster addon node configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addonNode(VmwareAdminClusterAddonNodeArgs addonNode) {
            return addonNode(Output.of(addonNode));
        }

        /**
         * @param annotations Annotations on the VMware Admin Cluster.
         * This field has the same restrictions as Kubernetes annotations.
         * The total size of all keys and values combined is limited to 256k.
         * Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/).
         * Prefix must be a DNS subdomain.
         * Name must be 63 characters or less, begin and end with alphanumerics,
         * with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations on the VMware Admin Cluster.
         * This field has the same restrictions as Kubernetes annotations.
         * The total size of all keys and values combined is limited to 256k.
         * Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/).
         * Prefix must be a DNS subdomain.
         * Name must be 63 characters or less, begin and end with alphanumerics,
         * with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param antiAffinityGroups AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
         * least three physical hosts in the datacenter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroups(@Nullable Output<VmwareAdminClusterAntiAffinityGroupsArgs> antiAffinityGroups) {
            $.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * @param antiAffinityGroups AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
         * least three physical hosts in the datacenter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroups(VmwareAdminClusterAntiAffinityGroupsArgs antiAffinityGroups) {
            return antiAffinityGroups(Output.of(antiAffinityGroups));
        }

        /**
         * @param authorization The VMware admin cluster authorization configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<VmwareAdminClusterAuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization The VMware admin cluster authorization configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorization(VmwareAdminClusterAuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param autoRepairConfig Configuration for auto repairing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoRepairConfig(@Nullable Output<VmwareAdminClusterAutoRepairConfigArgs> autoRepairConfig) {
            $.autoRepairConfig = autoRepairConfig;
            return this;
        }

        /**
         * @param autoRepairConfig Configuration for auto repairing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoRepairConfig(VmwareAdminClusterAutoRepairConfigArgs autoRepairConfig) {
            return autoRepairConfig(Output.of(autoRepairConfig));
        }

        /**
         * @param bootstrapClusterMembership The bootstrap cluster this VMware admin cluster belongs to.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapClusterMembership(@Nullable Output<String> bootstrapClusterMembership) {
            $.bootstrapClusterMembership = bootstrapClusterMembership;
            return this;
        }

        /**
         * @param bootstrapClusterMembership The bootstrap cluster this VMware admin cluster belongs to.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapClusterMembership(String bootstrapClusterMembership) {
            return bootstrapClusterMembership(Output.of(bootstrapClusterMembership));
        }

        /**
         * @param controlPlaneNode The VMware admin cluster control plane node configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNode(@Nullable Output<VmwareAdminClusterControlPlaneNodeArgs> controlPlaneNode) {
            $.controlPlaneNode = controlPlaneNode;
            return this;
        }

        /**
         * @param controlPlaneNode The VMware admin cluster control plane node configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNode(VmwareAdminClusterControlPlaneNodeArgs controlPlaneNode) {
            return controlPlaneNode(Output.of(controlPlaneNode));
        }

        /**
         * @param createTime The time the cluster was created, in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time the cluster was created, in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description A human readable description of this VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human readable description of this VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param enableAdvancedCluster If set, the advanced cluster feature is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableAdvancedCluster(@Nullable Output<Boolean> enableAdvancedCluster) {
            $.enableAdvancedCluster = enableAdvancedCluster;
            return this;
        }

        /**
         * @param enableAdvancedCluster If set, the advanced cluster feature is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableAdvancedCluster(Boolean enableAdvancedCluster) {
            return enableAdvancedCluster(Output.of(enableAdvancedCluster));
        }

        /**
         * @param endpoint The DNS name of VMware admin cluster&#39;s API server.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The DNS name of VMware admin cluster&#39;s API server.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param etag This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * Allows clients to perform consistent read-modify-writes
         * through optimistic concurrency control.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * Allows clients to perform consistent read-modify-writes
         * through optimistic concurrency control.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param fleets Fleet configuration for the cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fleets(@Nullable Output<List<VmwareAdminClusterFleetArgs>> fleets) {
            $.fleets = fleets;
            return this;
        }

        /**
         * @param fleets Fleet configuration for the cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fleets(List<VmwareAdminClusterFleetArgs> fleets) {
            return fleets(Output.of(fleets));
        }

        /**
         * @param fleets Fleet configuration for the cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fleets(VmwareAdminClusterFleetArgs... fleets) {
            return fleets(List.of(fleets));
        }

        /**
         * @param imageType The OS image type for the VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The OS image type for the VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param loadBalancer Specifies the load balancer configuration for VMware admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(@Nullable Output<VmwareAdminClusterLoadBalancerArgs> loadBalancer) {
            $.loadBalancer = loadBalancer;
            return this;
        }

        /**
         * @param loadBalancer Specifies the load balancer configuration for VMware admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(VmwareAdminClusterLoadBalancerArgs loadBalancer) {
            return loadBalancer(Output.of(loadBalancer));
        }

        /**
         * @param localName The object name of the VMwareAdminCluster custom resource on the
         * associated admin cluster. This field is used to support conflicting
         * names when enrolling existing clusters to the API. When used as a part of
         * cluster enrollment, this field will differ from the ID in the resource
         * name. For new clusters, this field will match the user provided cluster ID
         * and be visible in the last component of the resource name. It is not
         * modifiable.
         * All users should use this name to access their cluster using gkectl or
         * kubectl and should expect to see the local name when viewing admin
         * cluster controller logs.
         * 
         * @return builder
         * 
         */
        public Builder localName(@Nullable Output<String> localName) {
            $.localName = localName;
            return this;
        }

        /**
         * @param localName The object name of the VMwareAdminCluster custom resource on the
         * associated admin cluster. This field is used to support conflicting
         * names when enrolling existing clusters to the API. When used as a part of
         * cluster enrollment, this field will differ from the ID in the resource
         * name. For new clusters, this field will match the user provided cluster ID
         * and be visible in the last component of the resource name. It is not
         * modifiable.
         * All users should use this name to access their cluster using gkectl or
         * kubectl and should expect to see the local name when viewing admin
         * cluster controller logs.
         * 
         * @return builder
         * 
         */
        public Builder localName(String localName) {
            return localName(Output.of(localName));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The VMware admin cluster resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The VMware admin cluster resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConfig The VMware admin cluster network configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(@Nullable Output<VmwareAdminClusterNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig The VMware admin cluster network configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(VmwareAdminClusterNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param onPremVersion The Anthos clusters on the VMware version for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder onPremVersion(@Nullable Output<String> onPremVersion) {
            $.onPremVersion = onPremVersion;
            return this;
        }

        /**
         * @param onPremVersion The Anthos clusters on the VMware version for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder onPremVersion(String onPremVersion) {
            return onPremVersion(Output.of(onPremVersion));
        }

        /**
         * @param platformConfig The VMware platform configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder platformConfig(@Nullable Output<VmwareAdminClusterPlatformConfigArgs> platformConfig) {
            $.platformConfig = platformConfig;
            return this;
        }

        /**
         * @param platformConfig The VMware platform configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder platformConfig(VmwareAdminClusterPlatformConfigArgs platformConfig) {
            return platformConfig(Output.of(platformConfig));
        }

        /**
         * @param privateRegistryConfig Configuration for private registry.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateRegistryConfig(@Nullable Output<VmwareAdminClusterPrivateRegistryConfigArgs> privateRegistryConfig) {
            $.privateRegistryConfig = privateRegistryConfig;
            return this;
        }

        /**
         * @param privateRegistryConfig Configuration for private registry.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateRegistryConfig(VmwareAdminClusterPrivateRegistryConfigArgs privateRegistryConfig) {
            return privateRegistryConfig(Output.of(privateRegistryConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param proxy Configuration for proxy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<VmwareAdminClusterProxyArgs> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Configuration for proxy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder proxy(VmwareAdminClusterProxyArgs proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param state (Output)
         * The lifecycle state of the condition.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * The lifecycle state of the condition.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param statuses ResourceStatus representing detailed cluster state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<VmwareAdminClusterStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses ResourceStatus representing detailed cluster state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<VmwareAdminClusterStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses ResourceStatus representing detailed cluster state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(VmwareAdminClusterStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param uid The unique identifier of the VMware Admin Cluster.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The unique identifier of the VMware Admin Cluster.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime The time the cluster was last updated, in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The time the cluster was last updated, in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param vcenter Specifies vCenter config for the admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vcenter(@Nullable Output<VmwareAdminClusterVcenterArgs> vcenter) {
            $.vcenter = vcenter;
            return this;
        }

        /**
         * @param vcenter Specifies vCenter config for the admin cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vcenter(VmwareAdminClusterVcenterArgs vcenter) {
            return vcenter(Output.of(vcenter));
        }

        public VmwareAdminClusterState build() {
            return $;
        }
    }

}
