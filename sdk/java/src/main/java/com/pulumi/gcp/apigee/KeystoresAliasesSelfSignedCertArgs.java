// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apigee.inputs.KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesArgs;
import com.pulumi.gcp.apigee.inputs.KeystoresAliasesSelfSignedCertSubjectArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeystoresAliasesSelfSignedCertArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeystoresAliasesSelfSignedCertArgs Empty = new KeystoresAliasesSelfSignedCertArgs();

    /**
     * Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
     * This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
     * this parameter or the JSON body.
     * 
     */
    @Import(name="alias", required=true)
    private Output<String> alias;

    /**
     * @return Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
     * This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
     * this parameter or the JSON body.
     * 
     */
    public Output<String> alias() {
        return this.alias;
    }

    /**
     * Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
     * 
     */
    @Import(name="certValidityInDays")
    private @Nullable Output<Integer> certValidityInDays;

    /**
     * @return Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
     * 
     */
    public Optional<Output<Integer>> certValidityInDays() {
        return Optional.ofNullable(this.certValidityInDays);
    }

    /**
     * The Apigee environment name
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return The Apigee environment name
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * Key size. Default and maximum value is 2048 bits.
     * 
     */
    @Import(name="keySize")
    private @Nullable Output<String> keySize;

    /**
     * @return Key size. Default and maximum value is 2048 bits.
     * 
     */
    public Optional<Output<String>> keySize() {
        return Optional.ofNullable(this.keySize);
    }

    /**
     * The Apigee keystore name associated in an Apigee environment
     * 
     */
    @Import(name="keystore", required=true)
    private Output<String> keystore;

    /**
     * @return The Apigee keystore name associated in an Apigee environment
     * 
     */
    public Output<String> keystore() {
        return this.keystore;
    }

    /**
     * The Apigee Organization name associated with the Apigee environment
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The Apigee Organization name associated with the Apigee environment
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
     * 
     */
    @Import(name="sigAlg", required=true)
    private Output<String> sigAlg;

    /**
     * @return Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
     * 
     */
    public Output<String> sigAlg() {
        return this.sigAlg;
    }

    /**
     * Subject details.
     * Structure is documented below.
     * 
     */
    @Import(name="subject", required=true)
    private Output<KeystoresAliasesSelfSignedCertSubjectArgs> subject;

    /**
     * @return Subject details.
     * Structure is documented below.
     * 
     */
    public Output<KeystoresAliasesSelfSignedCertSubjectArgs> subject() {
        return this.subject;
    }

    /**
     * List of alternative host names. Maximum length is 255 characters for each value.
     * 
     */
    @Import(name="subjectAlternativeDnsNames")
    private @Nullable Output<KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesArgs> subjectAlternativeDnsNames;

    /**
     * @return List of alternative host names. Maximum length is 255 characters for each value.
     * 
     */
    public Optional<Output<KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesArgs>> subjectAlternativeDnsNames() {
        return Optional.ofNullable(this.subjectAlternativeDnsNames);
    }

    private KeystoresAliasesSelfSignedCertArgs() {}

    private KeystoresAliasesSelfSignedCertArgs(KeystoresAliasesSelfSignedCertArgs $) {
        this.alias = $.alias;
        this.certValidityInDays = $.certValidityInDays;
        this.environment = $.environment;
        this.keySize = $.keySize;
        this.keystore = $.keystore;
        this.orgId = $.orgId;
        this.sigAlg = $.sigAlg;
        this.subject = $.subject;
        this.subjectAlternativeDnsNames = $.subjectAlternativeDnsNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeystoresAliasesSelfSignedCertArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeystoresAliasesSelfSignedCertArgs $;

        public Builder() {
            $ = new KeystoresAliasesSelfSignedCertArgs();
        }

        public Builder(KeystoresAliasesSelfSignedCertArgs defaults) {
            $ = new KeystoresAliasesSelfSignedCertArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
         * This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
         * this parameter or the JSON body.
         * 
         * @return builder
         * 
         */
        public Builder alias(Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Alias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
         * This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
         * this parameter or the JSON body.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param certValidityInDays Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
         * 
         * @return builder
         * 
         */
        public Builder certValidityInDays(@Nullable Output<Integer> certValidityInDays) {
            $.certValidityInDays = certValidityInDays;
            return this;
        }

        /**
         * @param certValidityInDays Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
         * 
         * @return builder
         * 
         */
        public Builder certValidityInDays(Integer certValidityInDays) {
            return certValidityInDays(Output.of(certValidityInDays));
        }

        /**
         * @param environment The Apigee environment name
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The Apigee environment name
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param keySize Key size. Default and maximum value is 2048 bits.
         * 
         * @return builder
         * 
         */
        public Builder keySize(@Nullable Output<String> keySize) {
            $.keySize = keySize;
            return this;
        }

        /**
         * @param keySize Key size. Default and maximum value is 2048 bits.
         * 
         * @return builder
         * 
         */
        public Builder keySize(String keySize) {
            return keySize(Output.of(keySize));
        }

        /**
         * @param keystore The Apigee keystore name associated in an Apigee environment
         * 
         * @return builder
         * 
         */
        public Builder keystore(Output<String> keystore) {
            $.keystore = keystore;
            return this;
        }

        /**
         * @param keystore The Apigee keystore name associated in an Apigee environment
         * 
         * @return builder
         * 
         */
        public Builder keystore(String keystore) {
            return keystore(Output.of(keystore));
        }

        /**
         * @param orgId The Apigee Organization name associated with the Apigee environment
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization name associated with the Apigee environment
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param sigAlg Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
         * 
         * @return builder
         * 
         */
        public Builder sigAlg(Output<String> sigAlg) {
            $.sigAlg = sigAlg;
            return this;
        }

        /**
         * @param sigAlg Signature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
         * 
         * @return builder
         * 
         */
        public Builder sigAlg(String sigAlg) {
            return sigAlg(Output.of(sigAlg));
        }

        /**
         * @param subject Subject details.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<KeystoresAliasesSelfSignedCertSubjectArgs> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject Subject details.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subject(KeystoresAliasesSelfSignedCertSubjectArgs subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param subjectAlternativeDnsNames List of alternative host names. Maximum length is 255 characters for each value.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(@Nullable Output<KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesArgs> subjectAlternativeDnsNames) {
            $.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
            return this;
        }

        /**
         * @param subjectAlternativeDnsNames List of alternative host names. Maximum length is 255 characters for each value.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesArgs subjectAlternativeDnsNames) {
            return subjectAlternativeDnsNames(Output.of(subjectAlternativeDnsNames));
        }

        public KeystoresAliasesSelfSignedCertArgs build() {
            if ($.alias == null) {
                throw new MissingRequiredPropertyException("KeystoresAliasesSelfSignedCertArgs", "alias");
            }
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("KeystoresAliasesSelfSignedCertArgs", "environment");
            }
            if ($.keystore == null) {
                throw new MissingRequiredPropertyException("KeystoresAliasesSelfSignedCertArgs", "keystore");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("KeystoresAliasesSelfSignedCertArgs", "orgId");
            }
            if ($.sigAlg == null) {
                throw new MissingRequiredPropertyException("KeystoresAliasesSelfSignedCertArgs", "sigAlg");
            }
            if ($.subject == null) {
                throw new MissingRequiredPropertyException("KeystoresAliasesSelfSignedCertArgs", "subject");
            }
            return $;
        }
    }

}
