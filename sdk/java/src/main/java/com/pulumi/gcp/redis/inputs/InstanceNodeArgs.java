// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceNodeArgs Empty = new InstanceNodeArgs();

    /**
     * Node identifying string. e.g. &#39;node-0&#39;, &#39;node-1&#39;
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Node identifying string. e.g. &#39;node-0&#39;, &#39;node-1&#39;
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Location of the node.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Location of the node.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceNodeArgs() {}

    private InstanceNodeArgs(InstanceNodeArgs $) {
        this.id = $.id;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceNodeArgs $;

        public Builder() {
            $ = new InstanceNodeArgs();
        }

        public Builder(InstanceNodeArgs defaults) {
            $ = new InstanceNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Node identifying string. e.g. &#39;node-0&#39;, &#39;node-1&#39;
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Node identifying string. e.g. &#39;node-0&#39;, &#39;node-1&#39;
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param zone Location of the node.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Location of the node.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceNodeArgs build() {
            return $;
        }
    }

}
