// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerPoolScalingArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerPoolScalingArgs Empty = new WorkerPoolScalingArgs();

    /**
     * The total number of instances in manual scaling mode.
     * 
     */
    @Import(name="manualInstanceCount")
    private @Nullable Output<Integer> manualInstanceCount;

    /**
     * @return The total number of instances in manual scaling mode.
     * 
     */
    public Optional<Output<Integer>> manualInstanceCount() {
        return Optional.ofNullable(this.manualInstanceCount);
    }

    /**
     * The maximum count of instances distributed among revisions based on the specified instance split percentages.
     * 
     */
    @Import(name="maxInstanceCount")
    private @Nullable Output<Integer> maxInstanceCount;

    /**
     * @return The maximum count of instances distributed among revisions based on the specified instance split percentages.
     * 
     */
    public Optional<Output<Integer>> maxInstanceCount() {
        return Optional.ofNullable(this.maxInstanceCount);
    }

    /**
     * The minimum count of instances distributed among revisions based on the specified instance split percentages.
     * 
     */
    @Import(name="minInstanceCount")
    private @Nullable Output<Integer> minInstanceCount;

    /**
     * @return The minimum count of instances distributed among revisions based on the specified instance split percentages.
     * 
     */
    public Optional<Output<Integer>> minInstanceCount() {
        return Optional.ofNullable(this.minInstanceCount);
    }

    /**
     * The scaling mode for the worker pool. It defaults to MANUAL.
     * Possible values are: `AUTOMATIC`, `MANUAL`.
     * 
     */
    @Import(name="scalingMode")
    private @Nullable Output<String> scalingMode;

    /**
     * @return The scaling mode for the worker pool. It defaults to MANUAL.
     * Possible values are: `AUTOMATIC`, `MANUAL`.
     * 
     */
    public Optional<Output<String>> scalingMode() {
        return Optional.ofNullable(this.scalingMode);
    }

    private WorkerPoolScalingArgs() {}

    private WorkerPoolScalingArgs(WorkerPoolScalingArgs $) {
        this.manualInstanceCount = $.manualInstanceCount;
        this.maxInstanceCount = $.maxInstanceCount;
        this.minInstanceCount = $.minInstanceCount;
        this.scalingMode = $.scalingMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerPoolScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerPoolScalingArgs $;

        public Builder() {
            $ = new WorkerPoolScalingArgs();
        }

        public Builder(WorkerPoolScalingArgs defaults) {
            $ = new WorkerPoolScalingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manualInstanceCount The total number of instances in manual scaling mode.
         * 
         * @return builder
         * 
         */
        public Builder manualInstanceCount(@Nullable Output<Integer> manualInstanceCount) {
            $.manualInstanceCount = manualInstanceCount;
            return this;
        }

        /**
         * @param manualInstanceCount The total number of instances in manual scaling mode.
         * 
         * @return builder
         * 
         */
        public Builder manualInstanceCount(Integer manualInstanceCount) {
            return manualInstanceCount(Output.of(manualInstanceCount));
        }

        /**
         * @param maxInstanceCount The maximum count of instances distributed among revisions based on the specified instance split percentages.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(@Nullable Output<Integer> maxInstanceCount) {
            $.maxInstanceCount = maxInstanceCount;
            return this;
        }

        /**
         * @param maxInstanceCount The maximum count of instances distributed among revisions based on the specified instance split percentages.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(Integer maxInstanceCount) {
            return maxInstanceCount(Output.of(maxInstanceCount));
        }

        /**
         * @param minInstanceCount The minimum count of instances distributed among revisions based on the specified instance split percentages.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(@Nullable Output<Integer> minInstanceCount) {
            $.minInstanceCount = minInstanceCount;
            return this;
        }

        /**
         * @param minInstanceCount The minimum count of instances distributed among revisions based on the specified instance split percentages.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(Integer minInstanceCount) {
            return minInstanceCount(Output.of(minInstanceCount));
        }

        /**
         * @param scalingMode The scaling mode for the worker pool. It defaults to MANUAL.
         * Possible values are: `AUTOMATIC`, `MANUAL`.
         * 
         * @return builder
         * 
         */
        public Builder scalingMode(@Nullable Output<String> scalingMode) {
            $.scalingMode = scalingMode;
            return this;
        }

        /**
         * @param scalingMode The scaling mode for the worker pool. It defaults to MANUAL.
         * Possible values are: `AUTOMATIC`, `MANUAL`.
         * 
         * @return builder
         * 
         */
        public Builder scalingMode(String scalingMode) {
            return scalingMode(Output.of(scalingMode));
        }

        public WorkerPoolScalingArgs build() {
            return $;
        }
    }

}
