// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBackupVaultArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBackupVaultArgs Empty = new GetBackupVaultArgs();

    /**
     * The id of Backup Vault resource.
     * 
     * ***
     * 
     */
    @Import(name="backupVaultId", required=true)
    private Output<String> backupVaultId;

    /**
     * @return The id of Backup Vault resource.
     * 
     * ***
     * 
     */
    public Output<String> backupVaultId() {
        return this.backupVaultId;
    }

    /**
     * The location in which the Backup Vault resource belongs.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location in which the Backup Vault resource belongs.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetBackupVaultArgs() {}

    private GetBackupVaultArgs(GetBackupVaultArgs $) {
        this.backupVaultId = $.backupVaultId;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackupVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackupVaultArgs $;

        public Builder() {
            $ = new GetBackupVaultArgs();
        }

        public Builder(GetBackupVaultArgs defaults) {
            $ = new GetBackupVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupVaultId The id of Backup Vault resource.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder backupVaultId(Output<String> backupVaultId) {
            $.backupVaultId = backupVaultId;
            return this;
        }

        /**
         * @param backupVaultId The id of Backup Vault resource.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder backupVaultId(String backupVaultId) {
            return backupVaultId(Output.of(backupVaultId));
        }

        /**
         * @param location The location in which the Backup Vault resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location in which the Backup Vault resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetBackupVaultArgs build() {
            if ($.backupVaultId == null) {
                throw new MissingRequiredPropertyException("GetBackupVaultArgs", "backupVaultId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetBackupVaultArgs", "location");
            }
            return $;
        }
    }

}
