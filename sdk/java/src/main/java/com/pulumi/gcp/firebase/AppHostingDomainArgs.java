// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.firebase.inputs.AppHostingDomainServeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingDomainArgs Empty = new AppHostingDomainArgs();

    /**
     * The ID of the Backend that this Domain is associated with
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The ID of the Backend that this Domain is associated with
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * Id of the domain to create.
     * Must be a valid domain name, such as &#34;foo.com&#34;
     * 
     */
    @Import(name="domainId", required=true)
    private Output<String> domainId;

    /**
     * @return Id of the domain to create.
     * Must be a valid domain name, such as &#34;foo.com&#34;
     * 
     */
    public Output<String> domainId() {
        return this.domainId;
    }

    /**
     * The location of the Backend that this Domain is associated with
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the Backend that this Domain is associated with
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The serving behavior of the domain. If specified, the domain will
     * serve content other than its Backend&#39;s live content.
     * Structure is documented below.
     * 
     */
    @Import(name="serve")
    private @Nullable Output<AppHostingDomainServeArgs> serve;

    /**
     * @return The serving behavior of the domain. If specified, the domain will
     * serve content other than its Backend&#39;s live content.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AppHostingDomainServeArgs>> serve() {
        return Optional.ofNullable(this.serve);
    }

    private AppHostingDomainArgs() {}

    private AppHostingDomainArgs(AppHostingDomainArgs $) {
        this.backend = $.backend;
        this.domainId = $.domainId;
        this.location = $.location;
        this.project = $.project;
        this.serve = $.serve;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingDomainArgs $;

        public Builder() {
            $ = new AppHostingDomainArgs();
        }

        public Builder(AppHostingDomainArgs defaults) {
            $ = new AppHostingDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The ID of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The ID of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param domainId Id of the domain to create.
         * Must be a valid domain name, such as &#34;foo.com&#34;
         * 
         * @return builder
         * 
         */
        public Builder domainId(Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId Id of the domain to create.
         * Must be a valid domain name, such as &#34;foo.com&#34;
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param location The location of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Backend that this Domain is associated with
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serve The serving behavior of the domain. If specified, the domain will
         * serve content other than its Backend&#39;s live content.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serve(@Nullable Output<AppHostingDomainServeArgs> serve) {
            $.serve = serve;
            return this;
        }

        /**
         * @param serve The serving behavior of the domain. If specified, the domain will
         * serve content other than its Backend&#39;s live content.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serve(AppHostingDomainServeArgs serve) {
            return serve(Output.of(serve));
        }

        public AppHostingDomainArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("AppHostingDomainArgs", "backend");
            }
            if ($.domainId == null) {
                throw new MissingRequiredPropertyException("AppHostingDomainArgs", "domainId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AppHostingDomainArgs", "location");
            }
            return $;
        }
    }

}
