// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudscheduler.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobRetryConfig {
    /**
     * @return The maximum amount of time to wait before retrying a job after it fails.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;.
     * 
     */
    private @Nullable String maxBackoffDuration;
    /**
     * @return The time between retries will double maxDoublings times.
     * A job&#39;s retry interval starts at minBackoffDuration,
     * then doubles maxDoublings times, then increases linearly,
     * and finally retries retries at intervals of maxBackoffDuration up to retryCount times.
     * 
     */
    private @Nullable Integer maxDoublings;
    /**
     * @return The time limit for retrying a failed job, measured from time when an execution was first attempted.
     * If specified with retryCount, the job will be retried until both limits are reached.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;.
     * 
     */
    private @Nullable String maxRetryDuration;
    /**
     * @return The minimum amount of time to wait before retrying a job after it fails.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;.
     * 
     */
    private @Nullable String minBackoffDuration;
    /**
     * @return The number of attempts that the system will make to run a
     * job using the exponential backoff procedure described by maxDoublings.
     * Values greater than 5 and negative values are not allowed.
     * 
     */
    private @Nullable Integer retryCount;

    private JobRetryConfig() {}
    /**
     * @return The maximum amount of time to wait before retrying a job after it fails.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;.
     * 
     */
    public Optional<String> maxBackoffDuration() {
        return Optional.ofNullable(this.maxBackoffDuration);
    }
    /**
     * @return The time between retries will double maxDoublings times.
     * A job&#39;s retry interval starts at minBackoffDuration,
     * then doubles maxDoublings times, then increases linearly,
     * and finally retries retries at intervals of maxBackoffDuration up to retryCount times.
     * 
     */
    public Optional<Integer> maxDoublings() {
        return Optional.ofNullable(this.maxDoublings);
    }
    /**
     * @return The time limit for retrying a failed job, measured from time when an execution was first attempted.
     * If specified with retryCount, the job will be retried until both limits are reached.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;.
     * 
     */
    public Optional<String> maxRetryDuration() {
        return Optional.ofNullable(this.maxRetryDuration);
    }
    /**
     * @return The minimum amount of time to wait before retrying a job after it fails.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;.
     * 
     */
    public Optional<String> minBackoffDuration() {
        return Optional.ofNullable(this.minBackoffDuration);
    }
    /**
     * @return The number of attempts that the system will make to run a
     * job using the exponential backoff procedure described by maxDoublings.
     * Values greater than 5 and negative values are not allowed.
     * 
     */
    public Optional<Integer> retryCount() {
        return Optional.ofNullable(this.retryCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobRetryConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String maxBackoffDuration;
        private @Nullable Integer maxDoublings;
        private @Nullable String maxRetryDuration;
        private @Nullable String minBackoffDuration;
        private @Nullable Integer retryCount;
        public Builder() {}
        public Builder(JobRetryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxBackoffDuration = defaults.maxBackoffDuration;
    	      this.maxDoublings = defaults.maxDoublings;
    	      this.maxRetryDuration = defaults.maxRetryDuration;
    	      this.minBackoffDuration = defaults.minBackoffDuration;
    	      this.retryCount = defaults.retryCount;
        }

        @CustomType.Setter
        public Builder maxBackoffDuration(@Nullable String maxBackoffDuration) {
            this.maxBackoffDuration = maxBackoffDuration;
            return this;
        }
        @CustomType.Setter
        public Builder maxDoublings(@Nullable Integer maxDoublings) {
            this.maxDoublings = maxDoublings;
            return this;
        }
        @CustomType.Setter
        public Builder maxRetryDuration(@Nullable String maxRetryDuration) {
            this.maxRetryDuration = maxRetryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder minBackoffDuration(@Nullable String minBackoffDuration) {
            this.minBackoffDuration = minBackoffDuration;
            return this;
        }
        @CustomType.Setter
        public Builder retryCount(@Nullable Integer retryCount) {
            this.retryCount = retryCount;
            return this;
        }
        public JobRetryConfig build() {
            final var o = new JobRetryConfig();
            o.maxBackoffDuration = maxBackoffDuration;
            o.maxDoublings = maxDoublings;
            o.maxRetryDuration = maxRetryDuration;
            o.minBackoffDuration = minBackoffDuration;
            o.retryCount = retryCount;
            return o;
        }
    }
}
