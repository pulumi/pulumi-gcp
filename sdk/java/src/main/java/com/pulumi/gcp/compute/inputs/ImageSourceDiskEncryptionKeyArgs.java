// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageSourceDiskEncryptionKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageSourceDiskEncryptionKeyArgs Empty = new ImageSourceDiskEncryptionKeyArgs();

    /**
     * The self link of the encryption key used to decrypt this resource. Also called KmsKeyName
     * in the cloud console. Your project&#39;s Compute Engine System service account
     * (`service-{{PROJECT_NUMBER}}{@literal @}compute-system.iam.gserviceaccount.com`) must have
     * `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
     * See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
     * 
     */
    @Import(name="kmsKeySelfLink")
    private @Nullable Output<String> kmsKeySelfLink;

    /**
     * @return The self link of the encryption key used to decrypt this resource. Also called KmsKeyName
     * in the cloud console. Your project&#39;s Compute Engine System service account
     * (`service-{{PROJECT_NUMBER}}{@literal @}compute-system.iam.gserviceaccount.com`) must have
     * `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
     * See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
     * 
     */
    public Optional<Output<String>> kmsKeySelfLink() {
        return Optional.ofNullable(this.kmsKeySelfLink);
    }

    /**
     * The service account being used for the encryption request for the
     * given KMS key. If absent, the Compute Engine default service
     * account is used.
     * 
     */
    @Import(name="kmsKeyServiceAccount")
    private @Nullable Output<String> kmsKeyServiceAccount;

    /**
     * @return The service account being used for the encryption request for the
     * given KMS key. If absent, the Compute Engine default service
     * account is used.
     * 
     */
    public Optional<Output<String>> kmsKeyServiceAccount() {
        return Optional.ofNullable(this.kmsKeyServiceAccount);
    }

    /**
     * Specifies a 256-bit customer-supplied encryption key, encoded in
     * RFC 4648 base64 to either encrypt or decrypt this resource.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="rawKey")
    private @Nullable Output<String> rawKey;

    /**
     * @return Specifies a 256-bit customer-supplied encryption key, encoded in
     * RFC 4648 base64 to either encrypt or decrypt this resource.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> rawKey() {
        return Optional.ofNullable(this.rawKey);
    }

    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
     * customer-supplied encryption key to either encrypt or decrypt
     * this resource. You can provide either the rawKey or the rsaEncryptedKey.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="rsaEncryptedKey")
    private @Nullable Output<String> rsaEncryptedKey;

    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
     * customer-supplied encryption key to either encrypt or decrypt
     * this resource. You can provide either the rawKey or the rsaEncryptedKey.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> rsaEncryptedKey() {
        return Optional.ofNullable(this.rsaEncryptedKey);
    }

    private ImageSourceDiskEncryptionKeyArgs() {}

    private ImageSourceDiskEncryptionKeyArgs(ImageSourceDiskEncryptionKeyArgs $) {
        this.kmsKeySelfLink = $.kmsKeySelfLink;
        this.kmsKeyServiceAccount = $.kmsKeyServiceAccount;
        this.rawKey = $.rawKey;
        this.rsaEncryptedKey = $.rsaEncryptedKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageSourceDiskEncryptionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageSourceDiskEncryptionKeyArgs $;

        public Builder() {
            $ = new ImageSourceDiskEncryptionKeyArgs();
        }

        public Builder(ImageSourceDiskEncryptionKeyArgs defaults) {
            $ = new ImageSourceDiskEncryptionKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kmsKeySelfLink The self link of the encryption key used to decrypt this resource. Also called KmsKeyName
         * in the cloud console. Your project&#39;s Compute Engine System service account
         * (`service-{{PROJECT_NUMBER}}{@literal @}compute-system.iam.gserviceaccount.com`) must have
         * `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
         * See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
         * 
         * @return builder
         * 
         */
        public Builder kmsKeySelfLink(@Nullable Output<String> kmsKeySelfLink) {
            $.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }

        /**
         * @param kmsKeySelfLink The self link of the encryption key used to decrypt this resource. Also called KmsKeyName
         * in the cloud console. Your project&#39;s Compute Engine System service account
         * (`service-{{PROJECT_NUMBER}}{@literal @}compute-system.iam.gserviceaccount.com`) must have
         * `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
         * See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
         * 
         * @return builder
         * 
         */
        public Builder kmsKeySelfLink(String kmsKeySelfLink) {
            return kmsKeySelfLink(Output.of(kmsKeySelfLink));
        }

        /**
         * @param kmsKeyServiceAccount The service account being used for the encryption request for the
         * given KMS key. If absent, the Compute Engine default service
         * account is used.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyServiceAccount(@Nullable Output<String> kmsKeyServiceAccount) {
            $.kmsKeyServiceAccount = kmsKeyServiceAccount;
            return this;
        }

        /**
         * @param kmsKeyServiceAccount The service account being used for the encryption request for the
         * given KMS key. If absent, the Compute Engine default service
         * account is used.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyServiceAccount(String kmsKeyServiceAccount) {
            return kmsKeyServiceAccount(Output.of(kmsKeyServiceAccount));
        }

        /**
         * @param rawKey Specifies a 256-bit customer-supplied encryption key, encoded in
         * RFC 4648 base64 to either encrypt or decrypt this resource.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder rawKey(@Nullable Output<String> rawKey) {
            $.rawKey = rawKey;
            return this;
        }

        /**
         * @param rawKey Specifies a 256-bit customer-supplied encryption key, encoded in
         * RFC 4648 base64 to either encrypt or decrypt this resource.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder rawKey(String rawKey) {
            return rawKey(Output.of(rawKey));
        }

        /**
         * @param rsaEncryptedKey Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
         * customer-supplied encryption key to either encrypt or decrypt
         * this resource. You can provide either the rawKey or the rsaEncryptedKey.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder rsaEncryptedKey(@Nullable Output<String> rsaEncryptedKey) {
            $.rsaEncryptedKey = rsaEncryptedKey;
            return this;
        }

        /**
         * @param rsaEncryptedKey Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
         * customer-supplied encryption key to either encrypt or decrypt
         * this resource. You can provide either the rawKey or the rsaEncryptedKey.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder rsaEncryptedKey(String rsaEncryptedKey) {
            return rsaEncryptedKey(Output.of(rsaEncryptedKey));
        }

        public ImageSourceDiskEncryptionKeyArgs build() {
            return $;
        }
    }

}
