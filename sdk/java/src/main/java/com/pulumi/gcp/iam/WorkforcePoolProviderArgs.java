// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iam.inputs.WorkforcePoolProviderOidcArgs;
import com.pulumi.gcp.iam.inputs.WorkforcePoolProviderSamlArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkforcePoolProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkforcePoolProviderArgs Empty = new WorkforcePoolProviderArgs();

    /**
     * A [Common Expression Language](https://opensource.google/projects/cel) expression, in
     * plain text, to restrict what otherwise valid authentication credentials issued by the
     * provider should not be accepted.
     * The expression must output a boolean representing whether to allow the federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by the provider.
     * * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`.
     *   `google.profile_photo` and `google.display_name` are not supported.
     * * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`.
     *   The maximum length of the attribute condition expression is 4096 characters.
     *   If unspecified, all valid authentication credentials will be accepted.
     *   The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     */
    @Import(name="attributeCondition")
    private @Nullable Output<String> attributeCondition;

    /**
     * @return A [Common Expression Language](https://opensource.google/projects/cel) expression, in
     * plain text, to restrict what otherwise valid authentication credentials issued by the
     * provider should not be accepted.
     * The expression must output a boolean representing whether to allow the federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by the provider.
     * * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`.
     *   `google.profile_photo` and `google.display_name` are not supported.
     * * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`.
     *   The maximum length of the attribute condition expression is 4096 characters.
     *   If unspecified, all valid authentication credentials will be accepted.
     *   The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     */
    public Optional<Output<String>> attributeCondition() {
        return Optional.ofNullable(this.attributeCondition);
    }

    /**
     * Maps attributes from the authentication credentials issued by an external identity provider
     * to Google Cloud attributes, such as `subject` and `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings.
     *   This is also the subject that appears in Cloud Logging logs. This is a required field and
     *   the mapped subject cannot exceed 127 bytes.
     * * `google.groups`: Groups the authenticating user belongs to. You can grant groups access to
     *   resources using an IAM `principalSet` binding; access applies to all members of the group.
     * * `google.display_name`: The name of the authenticated user. This is an optional field and
     *   the mapped display name cannot exceed 100 bytes. If not set, `google.subject` will be displayed instead.
     *   This attribute cannot be referenced in IAM bindings.
     * * `google.profile_photo`: The URL that specifies the authenticated user&#39;s thumbnail photo.
     *   This is an optional field. When set, the image will be visible as the user&#39;s profile picture.
     *   If not set, a generic user icon will be displayed instead.
     *   This attribute cannot be referenced in IAM bindings.
     *   You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where {custom_attribute}
     *   is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes.
     *   The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_].
     *   You can reference these attributes in IAM policies to define fine-grained access for a workforce pool
     *   to Google Cloud resources. For example:
     * * `google.subject`:
     *   `principal://iam.googleapis.com/locations/{location}/workforcePools/{pool}/subject/{value}`
     * * `google.groups`:
     *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/attribute.{custom_attribute}/{value}`
     *   Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
     *   function that maps an identity provider credential to the normalized attribute specified
     *   by the corresponding map key.
     *   You can use the `assertion` keyword in the expression to access a JSON representation of
     *   the authentication credential issued by the provider.
     *   The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
     *   the total size of all mapped attributes must not exceed 8KB.
     *   For OIDC providers, you must supply a custom mapping that includes the `google.subject` attribute.
     *   For example, the following maps the sub claim of the incoming credential to the `subject` attribute
     *   on a Google token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * An object containing a list of `&#34;key&#34;: value` pairs.
     * Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
     * 
     */
    @Import(name="attributeMapping")
    private @Nullable Output<Map<String,String>> attributeMapping;

    /**
     * @return Maps attributes from the authentication credentials issued by an external identity provider
     * to Google Cloud attributes, such as `subject` and `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings.
     *   This is also the subject that appears in Cloud Logging logs. This is a required field and
     *   the mapped subject cannot exceed 127 bytes.
     * * `google.groups`: Groups the authenticating user belongs to. You can grant groups access to
     *   resources using an IAM `principalSet` binding; access applies to all members of the group.
     * * `google.display_name`: The name of the authenticated user. This is an optional field and
     *   the mapped display name cannot exceed 100 bytes. If not set, `google.subject` will be displayed instead.
     *   This attribute cannot be referenced in IAM bindings.
     * * `google.profile_photo`: The URL that specifies the authenticated user&#39;s thumbnail photo.
     *   This is an optional field. When set, the image will be visible as the user&#39;s profile picture.
     *   If not set, a generic user icon will be displayed instead.
     *   This attribute cannot be referenced in IAM bindings.
     *   You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where {custom_attribute}
     *   is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes.
     *   The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_].
     *   You can reference these attributes in IAM policies to define fine-grained access for a workforce pool
     *   to Google Cloud resources. For example:
     * * `google.subject`:
     *   `principal://iam.googleapis.com/locations/{location}/workforcePools/{pool}/subject/{value}`
     * * `google.groups`:
     *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/attribute.{custom_attribute}/{value}`
     *   Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
     *   function that maps an identity provider credential to the normalized attribute specified
     *   by the corresponding map key.
     *   You can use the `assertion` keyword in the expression to access a JSON representation of
     *   the authentication credential issued by the provider.
     *   The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
     *   the total size of all mapped attributes must not exceed 8KB.
     *   For OIDC providers, you must supply a custom mapping that includes the `google.subject` attribute.
     *   For example, the following maps the sub claim of the incoming credential to the `subject` attribute
     *   on a Google token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * An object containing a list of `&#34;key&#34;: value` pairs.
     * Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
     * 
     */
    public Optional<Output<Map<String,String>>> attributeMapping() {
        return Optional.ofNullable(this.attributeMapping);
    }

    /**
     * A user-specified description of the provider. Cannot exceed 256 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A user-specified description of the provider. Cannot exceed 256 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
     * However, existing tokens still grant access.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
     * However, existing tokens still grant access.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * A user-specified display name for the provider. Cannot exceed 32 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A user-specified display name for the provider. Cannot exceed 32 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The location for the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Represents an OpenId Connect 1.0 identity provider.
     * Structure is documented below.
     * 
     */
    @Import(name="oidc")
    private @Nullable Output<WorkforcePoolProviderOidcArgs> oidc;

    /**
     * @return Represents an OpenId Connect 1.0 identity provider.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkforcePoolProviderOidcArgs>> oidc() {
        return Optional.ofNullable(this.oidc);
    }

    /**
     * The ID for the provider, which becomes the final component of the resource name.
     * This value must be 4-32 characters, and may contain the characters [a-z0-9-].
     * The prefix `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    @Import(name="providerId", required=true)
    private Output<String> providerId;

    /**
     * @return The ID for the provider, which becomes the final component of the resource name.
     * This value must be 4-32 characters, and may contain the characters [a-z0-9-].
     * The prefix `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    public Output<String> providerId() {
        return this.providerId;
    }

    /**
     * Represents a SAML identity provider.
     * Structure is documented below.
     * 
     */
    @Import(name="saml")
    private @Nullable Output<WorkforcePoolProviderSamlArgs> saml;

    /**
     * @return Represents a SAML identity provider.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkforcePoolProviderSamlArgs>> saml() {
        return Optional.ofNullable(this.saml);
    }

    /**
     * The ID to use for the pool, which becomes the final component of the resource name.
     * The IDs must be a globally unique string of 6 to 63 lowercase letters, digits, or hyphens.
     * It must start with a letter, and cannot have a trailing hyphen.
     * The prefix `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    @Import(name="workforcePoolId", required=true)
    private Output<String> workforcePoolId;

    /**
     * @return The ID to use for the pool, which becomes the final component of the resource name.
     * The IDs must be a globally unique string of 6 to 63 lowercase letters, digits, or hyphens.
     * It must start with a letter, and cannot have a trailing hyphen.
     * The prefix `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    public Output<String> workforcePoolId() {
        return this.workforcePoolId;
    }

    private WorkforcePoolProviderArgs() {}

    private WorkforcePoolProviderArgs(WorkforcePoolProviderArgs $) {
        this.attributeCondition = $.attributeCondition;
        this.attributeMapping = $.attributeMapping;
        this.description = $.description;
        this.disabled = $.disabled;
        this.displayName = $.displayName;
        this.location = $.location;
        this.oidc = $.oidc;
        this.providerId = $.providerId;
        this.saml = $.saml;
        this.workforcePoolId = $.workforcePoolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkforcePoolProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkforcePoolProviderArgs $;

        public Builder() {
            $ = new WorkforcePoolProviderArgs();
        }

        public Builder(WorkforcePoolProviderArgs defaults) {
            $ = new WorkforcePoolProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeCondition A [Common Expression Language](https://opensource.google/projects/cel) expression, in
         * plain text, to restrict what otherwise valid authentication credentials issued by the
         * provider should not be accepted.
         * The expression must output a boolean representing whether to allow the federation.
         * The following keywords may be referenced in the expressions:
         * * `assertion`: JSON representing the authentication credential issued by the provider.
         * * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`.
         *   `google.profile_photo` and `google.display_name` are not supported.
         * * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`.
         *   The maximum length of the attribute condition expression is 4096 characters.
         *   If unspecified, all valid authentication credentials will be accepted.
         *   The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder attributeCondition(@Nullable Output<String> attributeCondition) {
            $.attributeCondition = attributeCondition;
            return this;
        }

        /**
         * @param attributeCondition A [Common Expression Language](https://opensource.google/projects/cel) expression, in
         * plain text, to restrict what otherwise valid authentication credentials issued by the
         * provider should not be accepted.
         * The expression must output a boolean representing whether to allow the federation.
         * The following keywords may be referenced in the expressions:
         * * `assertion`: JSON representing the authentication credential issued by the provider.
         * * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`.
         *   `google.profile_photo` and `google.display_name` are not supported.
         * * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`.
         *   The maximum length of the attribute condition expression is 4096 characters.
         *   If unspecified, all valid authentication credentials will be accepted.
         *   The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder attributeCondition(String attributeCondition) {
            return attributeCondition(Output.of(attributeCondition));
        }

        /**
         * @param attributeMapping Maps attributes from the authentication credentials issued by an external identity provider
         * to Google Cloud attributes, such as `subject` and `segment`.
         * Each key must be a string specifying the Google Cloud IAM attribute to map to.
         * The following keys are supported:
         * * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings.
         *   This is also the subject that appears in Cloud Logging logs. This is a required field and
         *   the mapped subject cannot exceed 127 bytes.
         * * `google.groups`: Groups the authenticating user belongs to. You can grant groups access to
         *   resources using an IAM `principalSet` binding; access applies to all members of the group.
         * * `google.display_name`: The name of the authenticated user. This is an optional field and
         *   the mapped display name cannot exceed 100 bytes. If not set, `google.subject` will be displayed instead.
         *   This attribute cannot be referenced in IAM bindings.
         * * `google.profile_photo`: The URL that specifies the authenticated user&#39;s thumbnail photo.
         *   This is an optional field. When set, the image will be visible as the user&#39;s profile picture.
         *   If not set, a generic user icon will be displayed instead.
         *   This attribute cannot be referenced in IAM bindings.
         *   You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where {custom_attribute}
         *   is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes.
         *   The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_].
         *   You can reference these attributes in IAM policies to define fine-grained access for a workforce pool
         *   to Google Cloud resources. For example:
         * * `google.subject`:
         *   `principal://iam.googleapis.com/locations/{location}/workforcePools/{pool}/subject/{value}`
         * * `google.groups`:
         *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/group/{value}`
         * * `attribute.{custom_attribute}`:
         *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/attribute.{custom_attribute}/{value}`
         *   Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
         *   function that maps an identity provider credential to the normalized attribute specified
         *   by the corresponding map key.
         *   You can use the `assertion` keyword in the expression to access a JSON representation of
         *   the authentication credential issued by the provider.
         *   The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
         *   the total size of all mapped attributes must not exceed 8KB.
         *   For OIDC providers, you must supply a custom mapping that includes the `google.subject` attribute.
         *   For example, the following maps the sub claim of the incoming credential to the `subject` attribute
         *   on a Google token:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * An object containing a list of `&#34;key&#34;: value` pairs.
         * Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
         * 
         * @return builder
         * 
         */
        public Builder attributeMapping(@Nullable Output<Map<String,String>> attributeMapping) {
            $.attributeMapping = attributeMapping;
            return this;
        }

        /**
         * @param attributeMapping Maps attributes from the authentication credentials issued by an external identity provider
         * to Google Cloud attributes, such as `subject` and `segment`.
         * Each key must be a string specifying the Google Cloud IAM attribute to map to.
         * The following keys are supported:
         * * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings.
         *   This is also the subject that appears in Cloud Logging logs. This is a required field and
         *   the mapped subject cannot exceed 127 bytes.
         * * `google.groups`: Groups the authenticating user belongs to. You can grant groups access to
         *   resources using an IAM `principalSet` binding; access applies to all members of the group.
         * * `google.display_name`: The name of the authenticated user. This is an optional field and
         *   the mapped display name cannot exceed 100 bytes. If not set, `google.subject` will be displayed instead.
         *   This attribute cannot be referenced in IAM bindings.
         * * `google.profile_photo`: The URL that specifies the authenticated user&#39;s thumbnail photo.
         *   This is an optional field. When set, the image will be visible as the user&#39;s profile picture.
         *   If not set, a generic user icon will be displayed instead.
         *   This attribute cannot be referenced in IAM bindings.
         *   You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where {custom_attribute}
         *   is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes.
         *   The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_].
         *   You can reference these attributes in IAM policies to define fine-grained access for a workforce pool
         *   to Google Cloud resources. For example:
         * * `google.subject`:
         *   `principal://iam.googleapis.com/locations/{location}/workforcePools/{pool}/subject/{value}`
         * * `google.groups`:
         *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/group/{value}`
         * * `attribute.{custom_attribute}`:
         *   `principalSet://iam.googleapis.com/locations/{location}/workforcePools/{pool}/attribute.{custom_attribute}/{value}`
         *   Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
         *   function that maps an identity provider credential to the normalized attribute specified
         *   by the corresponding map key.
         *   You can use the `assertion` keyword in the expression to access a JSON representation of
         *   the authentication credential issued by the provider.
         *   The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
         *   the total size of all mapped attributes must not exceed 8KB.
         *   For OIDC providers, you must supply a custom mapping that includes the `google.subject` attribute.
         *   For example, the following maps the sub claim of the incoming credential to the `subject` attribute
         *   on a Google token:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * An object containing a list of `&#34;key&#34;: value` pairs.
         * Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
         * 
         * @return builder
         * 
         */
        public Builder attributeMapping(Map<String,String> attributeMapping) {
            return attributeMapping(Output.of(attributeMapping));
        }

        /**
         * @param description A user-specified description of the provider. Cannot exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A user-specified description of the provider. Cannot exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabled Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
         * However, existing tokens still grant access.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
         * However, existing tokens still grant access.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param displayName A user-specified display name for the provider. Cannot exceed 32 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A user-specified display name for the provider. Cannot exceed 32 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location The location for the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param oidc Represents an OpenId Connect 1.0 identity provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oidc(@Nullable Output<WorkforcePoolProviderOidcArgs> oidc) {
            $.oidc = oidc;
            return this;
        }

        /**
         * @param oidc Represents an OpenId Connect 1.0 identity provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oidc(WorkforcePoolProviderOidcArgs oidc) {
            return oidc(Output.of(oidc));
        }

        /**
         * @param providerId The ID for the provider, which becomes the final component of the resource name.
         * This value must be 4-32 characters, and may contain the characters [a-z0-9-].
         * The prefix `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder providerId(Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The ID for the provider, which becomes the final component of the resource name.
         * This value must be 4-32 characters, and may contain the characters [a-z0-9-].
         * The prefix `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param saml Represents a SAML identity provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder saml(@Nullable Output<WorkforcePoolProviderSamlArgs> saml) {
            $.saml = saml;
            return this;
        }

        /**
         * @param saml Represents a SAML identity provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder saml(WorkforcePoolProviderSamlArgs saml) {
            return saml(Output.of(saml));
        }

        /**
         * @param workforcePoolId The ID to use for the pool, which becomes the final component of the resource name.
         * The IDs must be a globally unique string of 6 to 63 lowercase letters, digits, or hyphens.
         * It must start with a letter, and cannot have a trailing hyphen.
         * The prefix `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder workforcePoolId(Output<String> workforcePoolId) {
            $.workforcePoolId = workforcePoolId;
            return this;
        }

        /**
         * @param workforcePoolId The ID to use for the pool, which becomes the final component of the resource name.
         * The IDs must be a globally unique string of 6 to 63 lowercase letters, digits, or hyphens.
         * It must start with a letter, and cannot have a trailing hyphen.
         * The prefix `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder workforcePoolId(String workforcePoolId) {
            return workforcePoolId(Output.of(workforcePoolId));
        }

        public WorkforcePoolProviderArgs build() {
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.providerId = Objects.requireNonNull($.providerId, "expected parameter 'providerId' to be non-null");
            $.workforcePoolId = Objects.requireNonNull($.workforcePoolId, "expected parameter 'workforcePoolId' to be non-null");
            return $;
        }
    }

}
