// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.eventarc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.eventarc.TriggerArgs;
import com.pulumi.gcp.eventarc.inputs.TriggerState;
import com.pulumi.gcp.eventarc.outputs.TriggerDestination;
import com.pulumi.gcp.eventarc.outputs.TriggerMatchingCriteria;
import com.pulumi.gcp.eventarc.outputs.TriggerTransport;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The Eventarc Trigger resource
 * 
 * To get more information about Trigger, see:
 * 
 * * [API documentation](https://cloud.google.com/eventarc/docs/reference/rest/v1/projects.locations.triggers)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/eventarc/standard/docs/overview#eventarc-triggers)
 * 
 * ## Example Usage
 * 
 * ### Eventarc Trigger With Cloud Run Destination
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.cloudrun.Service;
 * import com.pulumi.gcp.cloudrun.ServiceArgs;
 * import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateArgs;
 * import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecArgs;
 * import com.pulumi.gcp.cloudrun.inputs.ServiceTrafficArgs;
 * import com.pulumi.gcp.eventarc.Trigger;
 * import com.pulumi.gcp.eventarc.TriggerArgs;
 * import com.pulumi.gcp.eventarc.inputs.TriggerMatchingCriteriaArgs;
 * import com.pulumi.gcp.eventarc.inputs.TriggerDestinationArgs;
 * import com.pulumi.gcp.eventarc.inputs.TriggerDestinationCloudRunServiceArgs;
 * import com.pulumi.gcp.eventarc.inputs.TriggerTransportArgs;
 * import com.pulumi.gcp.eventarc.inputs.TriggerTransportPubsubArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Topic("foo", TopicArgs.builder()
 *             .name("some-topic")
 *             .build());
 * 
 *         var default_ = new Service("default", ServiceArgs.builder()
 *             .name("some-service")
 *             .location("us-central1")
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image("gcr.io/cloudrun/hello")
 *                         .ports(ServiceTemplateSpecContainerPortArgs.builder()
 *                             .containerPort(8080)
 *                             .build())
 *                         .build())
 *                     .containerConcurrency(50)
 *                     .timeoutSeconds(100)
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .build());
 * 
 *         var primary = new Trigger("primary", TriggerArgs.builder()
 *             .name("some-trigger")
 *             .location("us-central1")
 *             .matchingCriterias(TriggerMatchingCriteriaArgs.builder()
 *                 .attribute("type")
 *                 .value("google.cloud.pubsub.topic.v1.messagePublished")
 *                 .build())
 *             .destination(TriggerDestinationArgs.builder()
 *                 .cloudRunService(TriggerDestinationCloudRunServiceArgs.builder()
 *                     .service(default_.name())
 *                     .region("us-central1")
 *                     .build())
 *                 .build())
 *             .labels(Map.of("foo", "bar"))
 *             .transport(TriggerTransportArgs.builder()
 *                 .pubsub(TriggerTransportPubsubArgs.builder()
 *                     .topic(foo.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Trigger can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/triggers/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Trigger can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:eventarc/trigger:Trigger default projects/{{project}}/locations/{{location}}/triggers/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:eventarc/trigger:Trigger default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:eventarc/trigger:Trigger default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:eventarc/trigger:Trigger")
public class Trigger extends com.pulumi.resources.CustomResource {
    /**
     * Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
     * 
     */
    @Export(name="channel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> channel;

    /**
     * @return Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
     * 
     */
    public Output<Optional<String>> channel() {
        return Codegen.optional(this.channel);
    }
    /**
     * Output only. The reason(s) why a trigger is in FAILED state.
     * 
     */
    @Export(name="conditions", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> conditions;

    /**
     * @return Output only. The reason(s) why a trigger is in FAILED state.
     * 
     */
    public Output<Map<String,String>> conditions() {
        return this.conditions;
    }
    /**
     * Output only. The creation time.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The creation time.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Required. Destination specifies where the events should be sent to.
     * Structure is documented below.
     * 
     */
    @Export(name="destination", refs={TriggerDestination.class}, tree="[0]")
    private Output<TriggerDestination> destination;

    /**
     * @return Required. Destination specifies where the events should be sent to.
     * Structure is documented below.
     * 
     */
    public Output<TriggerDestination> destination() {
        return this.destination;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.
     * 
     */
    @Export(name="eventDataContentType", refs={String.class}, tree="[0]")
    private Output<String> eventDataContentType;

    /**
     * @return Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.
     * 
     */
    public Output<String> eventDataContentType() {
        return this.eventDataContentType;
    }
    /**
     * Optional. User labels attached to the triggers that can be used to group resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. User labels attached to the triggers that can be used to group resources.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
     * Structure is documented below.
     * 
     */
    @Export(name="matchingCriterias", refs={List.class,TriggerMatchingCriteria.class}, tree="[0,1]")
    private Output<List<TriggerMatchingCriteria>> matchingCriterias;

    /**
     * @return Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
     * Structure is documented below.
     * 
     */
    public Output<List<TriggerMatchingCriteria>> matchingCriterias() {
        return this.matchingCriterias;
    }
    /**
     * Required. The resource name of the trigger. Must be unique within the location on the project.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Required. The resource name of the trigger. Must be unique within the location on the project.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
     * 
     */
    @Export(name="serviceAccount", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceAccount;

    /**
     * @return Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
     * 
     */
    public Output<Optional<String>> serviceAccount() {
        return Codegen.optional(this.serviceAccount);
    }
    /**
     * Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
     * Structure is documented below.
     * 
     */
    @Export(name="transport", refs={TriggerTransport.class}, tree="[0]")
    private Output<TriggerTransport> transport;

    /**
     * @return Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
     * Structure is documented below.
     * 
     */
    public Output<TriggerTransport> transport() {
        return this.transport;
    }
    /**
     * Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Output only. The last-modified time.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The last-modified time.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Trigger(java.lang.String name) {
        this(name, TriggerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Trigger(java.lang.String name, TriggerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Trigger(java.lang.String name, TriggerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:eventarc/trigger:Trigger", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Trigger(java.lang.String name, Output<java.lang.String> id, @Nullable TriggerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:eventarc/trigger:Trigger", name, state, makeResourceOptions(options, id), false);
    }

    private static TriggerArgs makeArgs(TriggerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TriggerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Trigger get(java.lang.String name, Output<java.lang.String> id, @Nullable TriggerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Trigger(name, id, state, options);
    }
}
