// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMavenArtifactsMavenArtifact {
    /**
     * @return The name of the artifact to fetch.
     * 
     */
    private String artifactId;
    /**
     * @return The time the artifact was created.
     * 
     */
    private String createTime;
    /**
     * @return Group ID for the artifact.
     * 
     */
    private String groupId;
    /**
     * @return The fully qualified name of the fetched artifact. Format:
     * 
     */
    private String name;
    /**
     * @return URL to access the pom file of the artifact.
     * 
     */
    private String pomUri;
    /**
     * @return The time the artifact was last updated.
     * 
     */
    private String updateTime;
    /**
     * @return The version of the Maven artifact.
     * 
     */
    private String version;

    private GetMavenArtifactsMavenArtifact() {}
    /**
     * @return The name of the artifact to fetch.
     * 
     */
    public String artifactId() {
        return this.artifactId;
    }
    /**
     * @return The time the artifact was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Group ID for the artifact.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The fully qualified name of the fetched artifact. Format:
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return URL to access the pom file of the artifact.
     * 
     */
    public String pomUri() {
        return this.pomUri;
    }
    /**
     * @return The time the artifact was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The version of the Maven artifact.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMavenArtifactsMavenArtifact defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactId;
        private String createTime;
        private String groupId;
        private String name;
        private String pomUri;
        private String updateTime;
        private String version;
        public Builder() {}
        public Builder(GetMavenArtifactsMavenArtifact defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactId = defaults.artifactId;
    	      this.createTime = defaults.createTime;
    	      this.groupId = defaults.groupId;
    	      this.name = defaults.name;
    	      this.pomUri = defaults.pomUri;
    	      this.updateTime = defaults.updateTime;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder artifactId(String artifactId) {
            if (artifactId == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "artifactId");
            }
            this.artifactId = artifactId;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pomUri(String pomUri) {
            if (pomUri == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "pomUri");
            }
            this.pomUri = pomUri;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetMavenArtifactsMavenArtifact", "version");
            }
            this.version = version;
            return this;
        }
        public GetMavenArtifactsMavenArtifact build() {
            final var _resultValue = new GetMavenArtifactsMavenArtifact();
            _resultValue.artifactId = artifactId;
            _resultValue.createTime = createTime;
            _resultValue.groupId = groupId;
            _resultValue.name = name;
            _resultValue.pomUri = pomUri;
            _resultValue.updateTime = updateTime;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
