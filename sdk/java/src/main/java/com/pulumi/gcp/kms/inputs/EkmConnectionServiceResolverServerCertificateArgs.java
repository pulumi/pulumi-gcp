// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EkmConnectionServiceResolverServerCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final EkmConnectionServiceResolverServerCertificateArgs Empty = new EkmConnectionServiceResolverServerCertificateArgs();

    /**
     * (Output)
     * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return (Output)
     * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * (Output)
     * Output only. The certificate is not valid after this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="notAfterTime")
    private @Nullable Output<String> notAfterTime;

    /**
     * @return (Output)
     * Output only. The certificate is not valid after this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> notAfterTime() {
        return Optional.ofNullable(this.notAfterTime);
    }

    /**
     * (Output)
     * Output only. The certificate is not valid before this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="notBeforeTime")
    private @Nullable Output<String> notBeforeTime;

    /**
     * @return (Output)
     * Output only. The certificate is not valid before this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> notBeforeTime() {
        return Optional.ofNullable(this.notBeforeTime);
    }

    /**
     * (Output)
     * Output only. True if the certificate was parsed successfully.
     * 
     */
    @Import(name="parsed")
    private @Nullable Output<Boolean> parsed;

    /**
     * @return (Output)
     * Output only. True if the certificate was parsed successfully.
     * 
     */
    public Optional<Output<Boolean>> parsed() {
        return Optional.ofNullable(this.parsed);
    }

    /**
     * Required. The raw certificate bytes in DER format. A base64-encoded string.
     * 
     */
    @Import(name="rawDer", required=true)
    private Output<String> rawDer;

    /**
     * @return Required. The raw certificate bytes in DER format. A base64-encoded string.
     * 
     */
    public Output<String> rawDer() {
        return this.rawDer;
    }

    /**
     * (Output)
     * Output only. The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<String> serialNumber;

    /**
     * @return (Output)
     * Output only. The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    public Optional<Output<String>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    /**
     * (Output)
     * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    @Import(name="sha256Fingerprint")
    private @Nullable Output<String> sha256Fingerprint;

    /**
     * @return (Output)
     * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    public Optional<Output<String>> sha256Fingerprint() {
        return Optional.ofNullable(this.sha256Fingerprint);
    }

    /**
     * (Output)
     * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return (Output)
     * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * (Output)
     * Output only. The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    @Import(name="subjectAlternativeDnsNames")
    private @Nullable Output<List<String>> subjectAlternativeDnsNames;

    /**
     * @return (Output)
     * Output only. The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeDnsNames() {
        return Optional.ofNullable(this.subjectAlternativeDnsNames);
    }

    private EkmConnectionServiceResolverServerCertificateArgs() {}

    private EkmConnectionServiceResolverServerCertificateArgs(EkmConnectionServiceResolverServerCertificateArgs $) {
        this.issuer = $.issuer;
        this.notAfterTime = $.notAfterTime;
        this.notBeforeTime = $.notBeforeTime;
        this.parsed = $.parsed;
        this.rawDer = $.rawDer;
        this.serialNumber = $.serialNumber;
        this.sha256Fingerprint = $.sha256Fingerprint;
        this.subject = $.subject;
        this.subjectAlternativeDnsNames = $.subjectAlternativeDnsNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EkmConnectionServiceResolverServerCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EkmConnectionServiceResolverServerCertificateArgs $;

        public Builder() {
            $ = new EkmConnectionServiceResolverServerCertificateArgs();
        }

        public Builder(EkmConnectionServiceResolverServerCertificateArgs defaults) {
            $ = new EkmConnectionServiceResolverServerCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param issuer (Output)
         * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer (Output)
         * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param notAfterTime (Output)
         * Output only. The certificate is not valid after this time. Only present if parsed is true.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notAfterTime(@Nullable Output<String> notAfterTime) {
            $.notAfterTime = notAfterTime;
            return this;
        }

        /**
         * @param notAfterTime (Output)
         * Output only. The certificate is not valid after this time. Only present if parsed is true.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notAfterTime(String notAfterTime) {
            return notAfterTime(Output.of(notAfterTime));
        }

        /**
         * @param notBeforeTime (Output)
         * Output only. The certificate is not valid before this time. Only present if parsed is true.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeTime(@Nullable Output<String> notBeforeTime) {
            $.notBeforeTime = notBeforeTime;
            return this;
        }

        /**
         * @param notBeforeTime (Output)
         * Output only. The certificate is not valid before this time. Only present if parsed is true.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeTime(String notBeforeTime) {
            return notBeforeTime(Output.of(notBeforeTime));
        }

        /**
         * @param parsed (Output)
         * Output only. True if the certificate was parsed successfully.
         * 
         * @return builder
         * 
         */
        public Builder parsed(@Nullable Output<Boolean> parsed) {
            $.parsed = parsed;
            return this;
        }

        /**
         * @param parsed (Output)
         * Output only. True if the certificate was parsed successfully.
         * 
         * @return builder
         * 
         */
        public Builder parsed(Boolean parsed) {
            return parsed(Output.of(parsed));
        }

        /**
         * @param rawDer Required. The raw certificate bytes in DER format. A base64-encoded string.
         * 
         * @return builder
         * 
         */
        public Builder rawDer(Output<String> rawDer) {
            $.rawDer = rawDer;
            return this;
        }

        /**
         * @param rawDer Required. The raw certificate bytes in DER format. A base64-encoded string.
         * 
         * @return builder
         * 
         */
        public Builder rawDer(String rawDer) {
            return rawDer(Output.of(rawDer));
        }

        /**
         * @param serialNumber (Output)
         * Output only. The certificate serial number as a hex string. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<String> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber (Output)
         * Output only. The certificate serial number as a hex string. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        /**
         * @param sha256Fingerprint (Output)
         * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder sha256Fingerprint(@Nullable Output<String> sha256Fingerprint) {
            $.sha256Fingerprint = sha256Fingerprint;
            return this;
        }

        /**
         * @param sha256Fingerprint (Output)
         * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder sha256Fingerprint(String sha256Fingerprint) {
            return sha256Fingerprint(Output.of(sha256Fingerprint));
        }

        /**
         * @param subject (Output)
         * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject (Output)
         * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param subjectAlternativeDnsNames (Output)
         * Output only. The subject Alternative DNS names. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(@Nullable Output<List<String>> subjectAlternativeDnsNames) {
            $.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
            return this;
        }

        /**
         * @param subjectAlternativeDnsNames (Output)
         * Output only. The subject Alternative DNS names. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(List<String> subjectAlternativeDnsNames) {
            return subjectAlternativeDnsNames(Output.of(subjectAlternativeDnsNames));
        }

        /**
         * @param subjectAlternativeDnsNames (Output)
         * Output only. The subject Alternative DNS names. Only present if parsed is true.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeDnsNames(String... subjectAlternativeDnsNames) {
            return subjectAlternativeDnsNames(List.of(subjectAlternativeDnsNames));
        }

        public EkmConnectionServiceResolverServerCertificateArgs build() {
            if ($.rawDer == null) {
                throw new MissingRequiredPropertyException("EkmConnectionServiceResolverServerCertificateArgs", "rawDer");
            }
            return $;
        }
    }

}
