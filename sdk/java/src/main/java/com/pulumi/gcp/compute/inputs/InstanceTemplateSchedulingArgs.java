// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.InstanceTemplateSchedulingGracefulShutdownArgs;
import com.pulumi.gcp.compute.inputs.InstanceTemplateSchedulingLocalSsdRecoveryTimeoutArgs;
import com.pulumi.gcp.compute.inputs.InstanceTemplateSchedulingMaxRunDurationArgs;
import com.pulumi.gcp.compute.inputs.InstanceTemplateSchedulingNodeAffinityArgs;
import com.pulumi.gcp.compute.inputs.InstanceTemplateSchedulingOnInstanceStopActionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceTemplateSchedulingArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceTemplateSchedulingArgs Empty = new InstanceTemplateSchedulingArgs();

    /**
     * Specifies whether the instance should be
     * automatically restarted if it is terminated by Compute Engine (not
     * terminated by a user). This defaults to true.
     * 
     */
    @Import(name="automaticRestart")
    private @Nullable Output<Boolean> automaticRestart;

    /**
     * @return Specifies whether the instance should be
     * automatically restarted if it is terminated by Compute Engine (not
     * terminated by a user). This defaults to true.
     * 
     */
    public Optional<Output<Boolean>> automaticRestart() {
        return Optional.ofNullable(this.automaticRestart);
    }

    /**
     * Specifies the availability domain to place the instance in. The value must be a number between 1 and the number of availability domains specified in the spread placement policy attached to the instance.
     * 
     */
    @Import(name="availabilityDomain")
    private @Nullable Output<Integer> availabilityDomain;

    /**
     * @return Specifies the availability domain to place the instance in. The value must be a number between 1 and the number of availability domains specified in the spread placement policy attached to the instance.
     * 
     */
    public Optional<Output<Integer>> availabilityDomain() {
        return Optional.ofNullable(this.availabilityDomain);
    }

    /**
     * Settings for the instance to perform a graceful shutdown. Structure is documented below.
     * 
     */
    @Import(name="gracefulShutdown")
    private @Nullable Output<InstanceTemplateSchedulingGracefulShutdownArgs> gracefulShutdown;

    /**
     * @return Settings for the instance to perform a graceful shutdown. Structure is documented below.
     * 
     */
    public Optional<Output<InstanceTemplateSchedulingGracefulShutdownArgs>> gracefulShutdown() {
        return Optional.ofNullable(this.gracefulShutdown);
    }

    /**
     * Specifies the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     * 
     */
    @Import(name="hostErrorTimeoutSeconds")
    private @Nullable Output<Integer> hostErrorTimeoutSeconds;

    /**
     * @return Specifies the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     * 
     */
    public Optional<Output<Integer>> hostErrorTimeoutSeconds() {
        return Optional.ofNullable(this.hostErrorTimeoutSeconds);
    }

    /**
     * Describe the type of termination action for `SPOT` VM. Can be `STOP` or `DELETE`.  Read more on [here](https://cloud.google.com/compute/docs/instances/create-use-spot)
     * 
     */
    @Import(name="instanceTerminationAction")
    private @Nullable Output<String> instanceTerminationAction;

    /**
     * @return Describe the type of termination action for `SPOT` VM. Can be `STOP` or `DELETE`.  Read more on [here](https://cloud.google.com/compute/docs/instances/create-use-spot)
     * 
     */
    public Optional<Output<String>> instanceTerminationAction() {
        return Optional.ofNullable(this.instanceTerminationAction);
    }

    /**
     * Specifies the maximum amount of time a Local Ssd Vm should wait while
     *   recovery of the Local Ssd state is attempted. Its value should be in
     *   between 0 and 168 hours with hour granularity and the default value being 1
     *   hour.
     * 
     */
    @Import(name="localSsdRecoveryTimeouts")
    private @Nullable Output<List<InstanceTemplateSchedulingLocalSsdRecoveryTimeoutArgs>> localSsdRecoveryTimeouts;

    /**
     * @return Specifies the maximum amount of time a Local Ssd Vm should wait while
     *   recovery of the Local Ssd state is attempted. Its value should be in
     *   between 0 and 168 hours with hour granularity and the default value being 1
     *   hour.
     * 
     */
    public Optional<Output<List<InstanceTemplateSchedulingLocalSsdRecoveryTimeoutArgs>>> localSsdRecoveryTimeouts() {
        return Optional.ofNullable(this.localSsdRecoveryTimeouts);
    }

    /**
     * Specifies the frequency of planned maintenance events. The accepted values are: `PERIODIC`.
     * 
     */
    @Import(name="maintenanceInterval")
    private @Nullable Output<String> maintenanceInterval;

    /**
     * @return Specifies the frequency of planned maintenance events. The accepted values are: `PERIODIC`.
     * 
     */
    public Optional<Output<String>> maintenanceInterval() {
        return Optional.ofNullable(this.maintenanceInterval);
    }

    /**
     * The duration of the instance. Instance will run and be terminated after then, the termination action could be defined in `instance_termination_action`. Structure is documented below.
     * 
     */
    @Import(name="maxRunDuration")
    private @Nullable Output<InstanceTemplateSchedulingMaxRunDurationArgs> maxRunDuration;

    /**
     * @return The duration of the instance. Instance will run and be terminated after then, the termination action could be defined in `instance_termination_action`. Structure is documented below.
     * 
     */
    public Optional<Output<InstanceTemplateSchedulingMaxRunDurationArgs>> maxRunDuration() {
        return Optional.ofNullable(this.maxRunDuration);
    }

    /**
     * Minimum number of cpus for the instance.
     * 
     */
    @Import(name="minNodeCpus")
    private @Nullable Output<Integer> minNodeCpus;

    /**
     * @return Minimum number of cpus for the instance.
     * 
     */
    public Optional<Output<Integer>> minNodeCpus() {
        return Optional.ofNullable(this.minNodeCpus);
    }

    /**
     * Specifies node affinities or anti-affinities
     * to determine which sole-tenant nodes your instances and managed instance
     * groups will use as host systems. Read more on sole-tenant node creation
     * [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
     * Structure documented below.
     * 
     */
    @Import(name="nodeAffinities")
    private @Nullable Output<List<InstanceTemplateSchedulingNodeAffinityArgs>> nodeAffinities;

    /**
     * @return Specifies node affinities or anti-affinities
     * to determine which sole-tenant nodes your instances and managed instance
     * groups will use as host systems. Read more on sole-tenant node creation
     * [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
     * Structure documented below.
     * 
     */
    public Optional<Output<List<InstanceTemplateSchedulingNodeAffinityArgs>>> nodeAffinities() {
        return Optional.ofNullable(this.nodeAffinities);
    }

    /**
     * Defines the maintenance behavior for this
     * instance.
     * 
     */
    @Import(name="onHostMaintenance")
    private @Nullable Output<String> onHostMaintenance;

    /**
     * @return Defines the maintenance behavior for this
     * instance.
     * 
     */
    public Optional<Output<String>> onHostMaintenance() {
        return Optional.ofNullable(this.onHostMaintenance);
    }

    /**
     * Specifies the action to be performed when the instance is terminated using `max_run_duration` and `STOP` `instance_termination_action`. Only support `true` `discard_local_ssd` at this point. Structure is documented below.
     * 
     */
    @Import(name="onInstanceStopAction")
    private @Nullable Output<InstanceTemplateSchedulingOnInstanceStopActionArgs> onInstanceStopAction;

    /**
     * @return Specifies the action to be performed when the instance is terminated using `max_run_duration` and `STOP` `instance_termination_action`. Only support `true` `discard_local_ssd` at this point. Structure is documented below.
     * 
     */
    public Optional<Output<InstanceTemplateSchedulingOnInstanceStopActionArgs>> onInstanceStopAction() {
        return Optional.ofNullable(this.onInstanceStopAction);
    }

    /**
     * Allows instance to be preempted. This defaults to
     * false. Read more on this
     * [here](https://cloud.google.com/compute/docs/instances/preemptible).
     * 
     */
    @Import(name="preemptible")
    private @Nullable Output<Boolean> preemptible;

    /**
     * @return Allows instance to be preempted. This defaults to
     * false. Read more on this
     * [here](https://cloud.google.com/compute/docs/instances/preemptible).
     * 
     */
    public Optional<Output<Boolean>> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }

    /**
     * Describe the type of preemptible VM. This field accepts the value `STANDARD` or `SPOT`. If the value is `STANDARD`, there will be no discount. If this   is set to `SPOT`,
     * `preemptible` should be `true` and `automatic_restart` should be
     * `false`. For more info about
     * `SPOT`, read [here](https://cloud.google.com/compute/docs/instances/spot)
     * 
     */
    @Import(name="provisioningModel")
    private @Nullable Output<String> provisioningModel;

    /**
     * @return Describe the type of preemptible VM. This field accepts the value `STANDARD` or `SPOT`. If the value is `STANDARD`, there will be no discount. If this   is set to `SPOT`,
     * `preemptible` should be `true` and `automatic_restart` should be
     * `false`. For more info about
     * `SPOT`, read [here](https://cloud.google.com/compute/docs/instances/spot)
     * 
     */
    public Optional<Output<String>> provisioningModel() {
        return Optional.ofNullable(this.provisioningModel);
    }

    /**
     * Specifies the timestamp, when the instance will be terminated, in RFC3339 text format. If specified, the instance termination action will be performed at the termination time.
     * 
     */
    @Import(name="terminationTime")
    private @Nullable Output<String> terminationTime;

    /**
     * @return Specifies the timestamp, when the instance will be terminated, in RFC3339 text format. If specified, the instance termination action will be performed at the termination time.
     * 
     */
    public Optional<Output<String>> terminationTime() {
        return Optional.ofNullable(this.terminationTime);
    }

    private InstanceTemplateSchedulingArgs() {}

    private InstanceTemplateSchedulingArgs(InstanceTemplateSchedulingArgs $) {
        this.automaticRestart = $.automaticRestart;
        this.availabilityDomain = $.availabilityDomain;
        this.gracefulShutdown = $.gracefulShutdown;
        this.hostErrorTimeoutSeconds = $.hostErrorTimeoutSeconds;
        this.instanceTerminationAction = $.instanceTerminationAction;
        this.localSsdRecoveryTimeouts = $.localSsdRecoveryTimeouts;
        this.maintenanceInterval = $.maintenanceInterval;
        this.maxRunDuration = $.maxRunDuration;
        this.minNodeCpus = $.minNodeCpus;
        this.nodeAffinities = $.nodeAffinities;
        this.onHostMaintenance = $.onHostMaintenance;
        this.onInstanceStopAction = $.onInstanceStopAction;
        this.preemptible = $.preemptible;
        this.provisioningModel = $.provisioningModel;
        this.terminationTime = $.terminationTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceTemplateSchedulingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceTemplateSchedulingArgs $;

        public Builder() {
            $ = new InstanceTemplateSchedulingArgs();
        }

        public Builder(InstanceTemplateSchedulingArgs defaults) {
            $ = new InstanceTemplateSchedulingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticRestart Specifies whether the instance should be
         * automatically restarted if it is terminated by Compute Engine (not
         * terminated by a user). This defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder automaticRestart(@Nullable Output<Boolean> automaticRestart) {
            $.automaticRestart = automaticRestart;
            return this;
        }

        /**
         * @param automaticRestart Specifies whether the instance should be
         * automatically restarted if it is terminated by Compute Engine (not
         * terminated by a user). This defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder automaticRestart(Boolean automaticRestart) {
            return automaticRestart(Output.of(automaticRestart));
        }

        /**
         * @param availabilityDomain Specifies the availability domain to place the instance in. The value must be a number between 1 and the number of availability domains specified in the spread placement policy attached to the instance.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(@Nullable Output<Integer> availabilityDomain) {
            $.availabilityDomain = availabilityDomain;
            return this;
        }

        /**
         * @param availabilityDomain Specifies the availability domain to place the instance in. The value must be a number between 1 and the number of availability domains specified in the spread placement policy attached to the instance.
         * 
         * @return builder
         * 
         */
        public Builder availabilityDomain(Integer availabilityDomain) {
            return availabilityDomain(Output.of(availabilityDomain));
        }

        /**
         * @param gracefulShutdown Settings for the instance to perform a graceful shutdown. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gracefulShutdown(@Nullable Output<InstanceTemplateSchedulingGracefulShutdownArgs> gracefulShutdown) {
            $.gracefulShutdown = gracefulShutdown;
            return this;
        }

        /**
         * @param gracefulShutdown Settings for the instance to perform a graceful shutdown. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gracefulShutdown(InstanceTemplateSchedulingGracefulShutdownArgs gracefulShutdown) {
            return gracefulShutdown(Output.of(gracefulShutdown));
        }

        /**
         * @param hostErrorTimeoutSeconds Specifies the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
         * 
         * @return builder
         * 
         */
        public Builder hostErrorTimeoutSeconds(@Nullable Output<Integer> hostErrorTimeoutSeconds) {
            $.hostErrorTimeoutSeconds = hostErrorTimeoutSeconds;
            return this;
        }

        /**
         * @param hostErrorTimeoutSeconds Specifies the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
         * 
         * @return builder
         * 
         */
        public Builder hostErrorTimeoutSeconds(Integer hostErrorTimeoutSeconds) {
            return hostErrorTimeoutSeconds(Output.of(hostErrorTimeoutSeconds));
        }

        /**
         * @param instanceTerminationAction Describe the type of termination action for `SPOT` VM. Can be `STOP` or `DELETE`.  Read more on [here](https://cloud.google.com/compute/docs/instances/create-use-spot)
         * 
         * @return builder
         * 
         */
        public Builder instanceTerminationAction(@Nullable Output<String> instanceTerminationAction) {
            $.instanceTerminationAction = instanceTerminationAction;
            return this;
        }

        /**
         * @param instanceTerminationAction Describe the type of termination action for `SPOT` VM. Can be `STOP` or `DELETE`.  Read more on [here](https://cloud.google.com/compute/docs/instances/create-use-spot)
         * 
         * @return builder
         * 
         */
        public Builder instanceTerminationAction(String instanceTerminationAction) {
            return instanceTerminationAction(Output.of(instanceTerminationAction));
        }

        /**
         * @param localSsdRecoveryTimeouts Specifies the maximum amount of time a Local Ssd Vm should wait while
         *   recovery of the Local Ssd state is attempted. Its value should be in
         *   between 0 and 168 hours with hour granularity and the default value being 1
         *   hour.
         * 
         * @return builder
         * 
         */
        public Builder localSsdRecoveryTimeouts(@Nullable Output<List<InstanceTemplateSchedulingLocalSsdRecoveryTimeoutArgs>> localSsdRecoveryTimeouts) {
            $.localSsdRecoveryTimeouts = localSsdRecoveryTimeouts;
            return this;
        }

        /**
         * @param localSsdRecoveryTimeouts Specifies the maximum amount of time a Local Ssd Vm should wait while
         *   recovery of the Local Ssd state is attempted. Its value should be in
         *   between 0 and 168 hours with hour granularity and the default value being 1
         *   hour.
         * 
         * @return builder
         * 
         */
        public Builder localSsdRecoveryTimeouts(List<InstanceTemplateSchedulingLocalSsdRecoveryTimeoutArgs> localSsdRecoveryTimeouts) {
            return localSsdRecoveryTimeouts(Output.of(localSsdRecoveryTimeouts));
        }

        /**
         * @param localSsdRecoveryTimeouts Specifies the maximum amount of time a Local Ssd Vm should wait while
         *   recovery of the Local Ssd state is attempted. Its value should be in
         *   between 0 and 168 hours with hour granularity and the default value being 1
         *   hour.
         * 
         * @return builder
         * 
         */
        public Builder localSsdRecoveryTimeouts(InstanceTemplateSchedulingLocalSsdRecoveryTimeoutArgs... localSsdRecoveryTimeouts) {
            return localSsdRecoveryTimeouts(List.of(localSsdRecoveryTimeouts));
        }

        /**
         * @param maintenanceInterval Specifies the frequency of planned maintenance events. The accepted values are: `PERIODIC`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceInterval(@Nullable Output<String> maintenanceInterval) {
            $.maintenanceInterval = maintenanceInterval;
            return this;
        }

        /**
         * @param maintenanceInterval Specifies the frequency of planned maintenance events. The accepted values are: `PERIODIC`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceInterval(String maintenanceInterval) {
            return maintenanceInterval(Output.of(maintenanceInterval));
        }

        /**
         * @param maxRunDuration The duration of the instance. Instance will run and be terminated after then, the termination action could be defined in `instance_termination_action`. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maxRunDuration(@Nullable Output<InstanceTemplateSchedulingMaxRunDurationArgs> maxRunDuration) {
            $.maxRunDuration = maxRunDuration;
            return this;
        }

        /**
         * @param maxRunDuration The duration of the instance. Instance will run and be terminated after then, the termination action could be defined in `instance_termination_action`. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder maxRunDuration(InstanceTemplateSchedulingMaxRunDurationArgs maxRunDuration) {
            return maxRunDuration(Output.of(maxRunDuration));
        }

        /**
         * @param minNodeCpus Minimum number of cpus for the instance.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCpus(@Nullable Output<Integer> minNodeCpus) {
            $.minNodeCpus = minNodeCpus;
            return this;
        }

        /**
         * @param minNodeCpus Minimum number of cpus for the instance.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCpus(Integer minNodeCpus) {
            return minNodeCpus(Output.of(minNodeCpus));
        }

        /**
         * @param nodeAffinities Specifies node affinities or anti-affinities
         * to determine which sole-tenant nodes your instances and managed instance
         * groups will use as host systems. Read more on sole-tenant node creation
         * [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
         * Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(@Nullable Output<List<InstanceTemplateSchedulingNodeAffinityArgs>> nodeAffinities) {
            $.nodeAffinities = nodeAffinities;
            return this;
        }

        /**
         * @param nodeAffinities Specifies node affinities or anti-affinities
         * to determine which sole-tenant nodes your instances and managed instance
         * groups will use as host systems. Read more on sole-tenant node creation
         * [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
         * Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(List<InstanceTemplateSchedulingNodeAffinityArgs> nodeAffinities) {
            return nodeAffinities(Output.of(nodeAffinities));
        }

        /**
         * @param nodeAffinities Specifies node affinities or anti-affinities
         * to determine which sole-tenant nodes your instances and managed instance
         * groups will use as host systems. Read more on sole-tenant node creation
         * [here](https://cloud.google.com/compute/docs/nodes/create-nodes).
         * Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinities(InstanceTemplateSchedulingNodeAffinityArgs... nodeAffinities) {
            return nodeAffinities(List.of(nodeAffinities));
        }

        /**
         * @param onHostMaintenance Defines the maintenance behavior for this
         * instance.
         * 
         * @return builder
         * 
         */
        public Builder onHostMaintenance(@Nullable Output<String> onHostMaintenance) {
            $.onHostMaintenance = onHostMaintenance;
            return this;
        }

        /**
         * @param onHostMaintenance Defines the maintenance behavior for this
         * instance.
         * 
         * @return builder
         * 
         */
        public Builder onHostMaintenance(String onHostMaintenance) {
            return onHostMaintenance(Output.of(onHostMaintenance));
        }

        /**
         * @param onInstanceStopAction Specifies the action to be performed when the instance is terminated using `max_run_duration` and `STOP` `instance_termination_action`. Only support `true` `discard_local_ssd` at this point. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder onInstanceStopAction(@Nullable Output<InstanceTemplateSchedulingOnInstanceStopActionArgs> onInstanceStopAction) {
            $.onInstanceStopAction = onInstanceStopAction;
            return this;
        }

        /**
         * @param onInstanceStopAction Specifies the action to be performed when the instance is terminated using `max_run_duration` and `STOP` `instance_termination_action`. Only support `true` `discard_local_ssd` at this point. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder onInstanceStopAction(InstanceTemplateSchedulingOnInstanceStopActionArgs onInstanceStopAction) {
            return onInstanceStopAction(Output.of(onInstanceStopAction));
        }

        /**
         * @param preemptible Allows instance to be preempted. This defaults to
         * false. Read more on this
         * [here](https://cloud.google.com/compute/docs/instances/preemptible).
         * 
         * @return builder
         * 
         */
        public Builder preemptible(@Nullable Output<Boolean> preemptible) {
            $.preemptible = preemptible;
            return this;
        }

        /**
         * @param preemptible Allows instance to be preempted. This defaults to
         * false. Read more on this
         * [here](https://cloud.google.com/compute/docs/instances/preemptible).
         * 
         * @return builder
         * 
         */
        public Builder preemptible(Boolean preemptible) {
            return preemptible(Output.of(preemptible));
        }

        /**
         * @param provisioningModel Describe the type of preemptible VM. This field accepts the value `STANDARD` or `SPOT`. If the value is `STANDARD`, there will be no discount. If this   is set to `SPOT`,
         * `preemptible` should be `true` and `automatic_restart` should be
         * `false`. For more info about
         * `SPOT`, read [here](https://cloud.google.com/compute/docs/instances/spot)
         * 
         * @return builder
         * 
         */
        public Builder provisioningModel(@Nullable Output<String> provisioningModel) {
            $.provisioningModel = provisioningModel;
            return this;
        }

        /**
         * @param provisioningModel Describe the type of preemptible VM. This field accepts the value `STANDARD` or `SPOT`. If the value is `STANDARD`, there will be no discount. If this   is set to `SPOT`,
         * `preemptible` should be `true` and `automatic_restart` should be
         * `false`. For more info about
         * `SPOT`, read [here](https://cloud.google.com/compute/docs/instances/spot)
         * 
         * @return builder
         * 
         */
        public Builder provisioningModel(String provisioningModel) {
            return provisioningModel(Output.of(provisioningModel));
        }

        /**
         * @param terminationTime Specifies the timestamp, when the instance will be terminated, in RFC3339 text format. If specified, the instance termination action will be performed at the termination time.
         * 
         * @return builder
         * 
         */
        public Builder terminationTime(@Nullable Output<String> terminationTime) {
            $.terminationTime = terminationTime;
            return this;
        }

        /**
         * @param terminationTime Specifies the timestamp, when the instance will be terminated, in RFC3339 text format. If specified, the instance termination action will be performed at the termination time.
         * 
         * @return builder
         * 
         */
        public Builder terminationTime(String terminationTime) {
            return terminationTime(Output.of(terminationTime));
        }

        public InstanceTemplateSchedulingArgs build() {
            return $;
        }
    }

}
