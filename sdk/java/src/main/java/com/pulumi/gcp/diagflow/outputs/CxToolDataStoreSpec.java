// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.diagflow.outputs.CxToolDataStoreSpecDataStoreConnection;
import com.pulumi.gcp.diagflow.outputs.CxToolDataStoreSpecFallbackPrompt;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CxToolDataStoreSpec {
    /**
     * @return List of data stores to search.
     * Structure is documented below.
     * 
     */
    private List<CxToolDataStoreSpecDataStoreConnection> dataStoreConnections;
    /**
     * @return Fallback prompt configurations to use.
     * 
     */
    private CxToolDataStoreSpecFallbackPrompt fallbackPrompt;

    private CxToolDataStoreSpec() {}
    /**
     * @return List of data stores to search.
     * Structure is documented below.
     * 
     */
    public List<CxToolDataStoreSpecDataStoreConnection> dataStoreConnections() {
        return this.dataStoreConnections;
    }
    /**
     * @return Fallback prompt configurations to use.
     * 
     */
    public CxToolDataStoreSpecFallbackPrompt fallbackPrompt() {
        return this.fallbackPrompt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxToolDataStoreSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<CxToolDataStoreSpecDataStoreConnection> dataStoreConnections;
        private CxToolDataStoreSpecFallbackPrompt fallbackPrompt;
        public Builder() {}
        public Builder(CxToolDataStoreSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataStoreConnections = defaults.dataStoreConnections;
    	      this.fallbackPrompt = defaults.fallbackPrompt;
        }

        @CustomType.Setter
        public Builder dataStoreConnections(List<CxToolDataStoreSpecDataStoreConnection> dataStoreConnections) {
            if (dataStoreConnections == null) {
              throw new MissingRequiredPropertyException("CxToolDataStoreSpec", "dataStoreConnections");
            }
            this.dataStoreConnections = dataStoreConnections;
            return this;
        }
        public Builder dataStoreConnections(CxToolDataStoreSpecDataStoreConnection... dataStoreConnections) {
            return dataStoreConnections(List.of(dataStoreConnections));
        }
        @CustomType.Setter
        public Builder fallbackPrompt(CxToolDataStoreSpecFallbackPrompt fallbackPrompt) {
            if (fallbackPrompt == null) {
              throw new MissingRequiredPropertyException("CxToolDataStoreSpec", "fallbackPrompt");
            }
            this.fallbackPrompt = fallbackPrompt;
            return this;
        }
        public CxToolDataStoreSpec build() {
            final var _resultValue = new CxToolDataStoreSpec();
            _resultValue.dataStoreConnections = dataStoreConnections;
            _resultValue.fallbackPrompt = fallbackPrompt;
            return _resultValue;
        }
    }
}
