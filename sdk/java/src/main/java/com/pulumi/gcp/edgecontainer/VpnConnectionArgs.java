// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.edgecontainer.inputs.VpnConnectionVpcProjectArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnConnectionArgs Empty = new VpnConnectionArgs();

    /**
     * The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    /**
     * @return The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
     * 
     */
    @Import(name="enableHighAvailability")
    private @Nullable Output<Boolean> enableHighAvailability;

    /**
     * @return Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
     * 
     */
    public Optional<Output<Boolean>> enableHighAvailability() {
        return Optional.ofNullable(this.enableHighAvailability);
    }

    /**
     * Labels associated with this resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels associated with this resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Google Cloud Platform location.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Google Cloud Platform location.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The resource name of VPN connection
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of VPN connection
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
     * This is empty if NAT is not used.
     * 
     */
    @Import(name="natGatewayIp")
    private @Nullable Output<String> natGatewayIp;

    /**
     * @return NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
     * This is empty if NAT is not used.
     * 
     */
    public Optional<Output<String>> natGatewayIp() {
        return Optional.ofNullable(this.natGatewayIp);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The VPN connection Cloud Router name.
     * 
     */
    @Import(name="router")
    private @Nullable Output<String> router;

    /**
     * @return The VPN connection Cloud Router name.
     * 
     */
    public Optional<Output<String>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * The network ID of VPC to connect to.
     * 
     */
    @Import(name="vpc")
    private @Nullable Output<String> vpc;

    /**
     * @return The network ID of VPC to connect to.
     * 
     */
    public Optional<Output<String>> vpc() {
        return Optional.ofNullable(this.vpc);
    }

    /**
     * Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
     * Structure is documented below.
     * 
     */
    @Import(name="vpcProject")
    private @Nullable Output<VpnConnectionVpcProjectArgs> vpcProject;

    /**
     * @return Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VpnConnectionVpcProjectArgs>> vpcProject() {
        return Optional.ofNullable(this.vpcProject);
    }

    private VpnConnectionArgs() {}

    private VpnConnectionArgs(VpnConnectionArgs $) {
        this.cluster = $.cluster;
        this.enableHighAvailability = $.enableHighAvailability;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.natGatewayIp = $.natGatewayIp;
        this.project = $.project;
        this.router = $.router;
        this.vpc = $.vpc;
        this.vpcProject = $.vpcProject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnConnectionArgs $;

        public Builder() {
            $ = new VpnConnectionArgs();
        }

        public Builder(VpnConnectionArgs defaults) {
            $ = new VpnConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
         * 
         * @return builder
         * 
         */
        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The canonical Cluster name to connect to. It is in the form of projects/{project}/locations/{location}/clusters/{cluster}.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param enableHighAvailability Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
         * 
         * @return builder
         * 
         */
        public Builder enableHighAvailability(@Nullable Output<Boolean> enableHighAvailability) {
            $.enableHighAvailability = enableHighAvailability;
            return this;
        }

        /**
         * @param enableHighAvailability Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to use 2 ANG floating IPs.
         * 
         * @return builder
         * 
         */
        public Builder enableHighAvailability(Boolean enableHighAvailability) {
            return enableHighAvailability(Output.of(enableHighAvailability));
        }

        /**
         * @param labels Labels associated with this resource.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels associated with this resource.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Google Cloud Platform location.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Google Cloud Platform location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of VPN connection
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of VPN connection
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param natGatewayIp NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
         * This is empty if NAT is not used.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayIp(@Nullable Output<String> natGatewayIp) {
            $.natGatewayIp = natGatewayIp;
            return this;
        }

        /**
         * @param natGatewayIp NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that only one external IP maps to the GMEC Anthos cluster.
         * This is empty if NAT is not used.
         * 
         * @return builder
         * 
         */
        public Builder natGatewayIp(String natGatewayIp) {
            return natGatewayIp(Output.of(natGatewayIp));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param router The VPN connection Cloud Router name.
         * 
         * @return builder
         * 
         */
        public Builder router(@Nullable Output<String> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router The VPN connection Cloud Router name.
         * 
         * @return builder
         * 
         */
        public Builder router(String router) {
            return router(Output.of(router));
        }

        /**
         * @param vpc The network ID of VPC to connect to.
         * 
         * @return builder
         * 
         */
        public Builder vpc(@Nullable Output<String> vpc) {
            $.vpc = vpc;
            return this;
        }

        /**
         * @param vpc The network ID of VPC to connect to.
         * 
         * @return builder
         * 
         */
        public Builder vpc(String vpc) {
            return vpc(Output.of(vpc));
        }

        /**
         * @param vpcProject Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcProject(@Nullable Output<VpnConnectionVpcProjectArgs> vpcProject) {
            $.vpcProject = vpcProject;
            return this;
        }

        /**
         * @param vpcProject Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcProject(VpnConnectionVpcProjectArgs vpcProject) {
            return vpcProject(Output.of(vpcProject));
        }

        public VpnConnectionArgs build() {
            if ($.cluster == null) {
                throw new MissingRequiredPropertyException("VpnConnectionArgs", "cluster");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("VpnConnectionArgs", "location");
            }
            return $;
        }
    }

}
