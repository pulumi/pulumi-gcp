// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateContainerEnvArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateContainerLivenessProbeArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateContainerPortArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateContainerResourcesArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateContainerStartupProbeArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateContainerVolumeMountArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTemplateContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateContainerArgs Empty = new ServiceTemplateContainerArgs();

    /**
     * Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<ServiceTemplateContainerEnvArgs>> envs;

    /**
     * @return List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServiceTemplateContainerEnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    @Import(name="livenessProbe")
    private @Nullable Output<ServiceTemplateContainerLivenessProbeArgs> livenessProbe;

    /**
     * @return Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateContainerLivenessProbeArgs>> livenessProbe() {
        return Optional.ofNullable(this.livenessProbe);
    }

    /**
     * Volume&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Volume&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
     * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
     * Structure is documented below.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<ServiceTemplateContainerPortArgs>> ports;

    /**
     * @return List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
     * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServiceTemplateContainerPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * Structure is documented below.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<ServiceTemplateContainerResourcesArgs> resources;

    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateContainerResourcesArgs>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    @Import(name="startupProbe")
    private @Nullable Output<ServiceTemplateContainerStartupProbeArgs> startupProbe;

    /**
     * @return Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateContainerStartupProbeArgs>> startupProbe() {
        return Optional.ofNullable(this.startupProbe);
    }

    /**
     * Volume to mount into the container&#39;s filesystem.
     * Structure is documented below.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<ServiceTemplateContainerVolumeMountArgs>> volumeMounts;

    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServiceTemplateContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private ServiceTemplateContainerArgs() {}

    private ServiceTemplateContainerArgs(ServiceTemplateContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.envs = $.envs;
        this.image = $.image;
        this.livenessProbe = $.livenessProbe;
        this.name = $.name;
        this.ports = $.ports;
        this.resources = $.resources;
        this.startupProbe = $.startupProbe;
        this.volumeMounts = $.volumeMounts;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateContainerArgs $;

        public Builder() {
            $ = new ServiceTemplateContainerArgs();
        }

        public Builder(ServiceTemplateContainerArgs defaults) {
            $ = new ServiceTemplateContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param envs List of environment variables to set in the container.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<ServiceTemplateContainerEnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs List of environment variables to set in the container.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<ServiceTemplateContainerEnvArgs> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs List of environment variables to set in the container.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder envs(ServiceTemplateContainerEnvArgs... envs) {
            return envs(List.of(envs));
        }

        /**
         * @param image URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param livenessProbe Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbe(@Nullable Output<ServiceTemplateContainerLivenessProbeArgs> livenessProbe) {
            $.livenessProbe = livenessProbe;
            return this;
        }

        /**
         * @param livenessProbe Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbe(ServiceTemplateContainerLivenessProbeArgs livenessProbe) {
            return livenessProbe(Output.of(livenessProbe));
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ports List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
         * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<ServiceTemplateContainerPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
         * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<ServiceTemplateContainerPortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
         * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ports(ServiceTemplateContainerPortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param resources Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable Output<ServiceTemplateContainerResourcesArgs> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(ServiceTemplateContainerResourcesArgs resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param startupProbe Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder startupProbe(@Nullable Output<ServiceTemplateContainerStartupProbeArgs> startupProbe) {
            $.startupProbe = startupProbe;
            return this;
        }

        /**
         * @param startupProbe Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder startupProbe(ServiceTemplateContainerStartupProbeArgs startupProbe) {
            return startupProbe(Output.of(startupProbe));
        }

        /**
         * @param volumeMounts Volume to mount into the container&#39;s filesystem.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<ServiceTemplateContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts Volume to mount into the container&#39;s filesystem.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<ServiceTemplateContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts Volume to mount into the container&#39;s filesystem.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(ServiceTemplateContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param workingDir Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public ServiceTemplateContainerArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            return $;
        }
    }

}
