// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestratedResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestratedResourceArgs Empty = new V2PolicyOrchestratorForFolderOrchestratedResourceArgs();

    /**
     * ID of the resource to be used while generating set of affected resources.
     * For UPSERT action the value is auto-generated during PolicyOrchestrator
     * creation when not set. When the value is set it should following next
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     *   For DELETE action, ID must be specified explicitly during
     *   PolicyOrchestrator creation.
     * 
     * &lt;a name=&#34;nested_orchestrated_resource_os_policy_assignment_v1_payload&#34;&gt;&lt;/a&gt;The `os_policy_assignment_v1_payload` block supports:
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the resource to be used while generating set of affected resources.
     * For UPSERT action the value is auto-generated during PolicyOrchestrator
     * creation when not set. When the value is set it should following next
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     *   For DELETE action, ID must be specified explicitly during
     *   PolicyOrchestrator creation.
     * 
     * &lt;a name=&#34;nested_orchestrated_resource_os_policy_assignment_v1_payload&#34;&gt;&lt;/a&gt;The `os_policy_assignment_v1_payload` block supports:
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * OS policy assignment is an API resource that is used to
     * apply a set of OS policies to a dynamically targeted group of Compute Engine
     * VM instances.
     * An OS policy is used to define the desired state configuration for a
     * Compute Engine VM instance through a set of configuration resources that
     * provide capabilities such as installing or removing software packages, or
     * executing a script.
     * For more information about the OS policy resource definitions and examples,
     * see
     * [OS policy and OS policy
     * assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
     * Structure is documented below.
     * 
     */
    @Import(name="osPolicyAssignmentV1Payload")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs> osPolicyAssignmentV1Payload;

    /**
     * @return OS policy assignment is an API resource that is used to
     * apply a set of OS policies to a dynamically targeted group of Compute Engine
     * VM instances.
     * An OS policy is used to define the desired state configuration for a
     * Compute Engine VM instance through a set of configuration resources that
     * provide capabilities such as installing or removing software packages, or
     * executing a script.
     * For more information about the OS policy resource definitions and examples,
     * see
     * [OS policy and OS policy
     * assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs>> osPolicyAssignmentV1Payload() {
        return Optional.ofNullable(this.osPolicyAssignmentV1Payload);
    }

    private V2PolicyOrchestratorForFolderOrchestratedResourceArgs() {}

    private V2PolicyOrchestratorForFolderOrchestratedResourceArgs(V2PolicyOrchestratorForFolderOrchestratedResourceArgs $) {
        this.id = $.id;
        this.osPolicyAssignmentV1Payload = $.osPolicyAssignmentV1Payload;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestratedResourceArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the resource to be used while generating set of affected resources.
         * For UPSERT action the value is auto-generated during PolicyOrchestrator
         * creation when not set. When the value is set it should following next
         * restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the project.
         *   For DELETE action, ID must be specified explicitly during
         *   PolicyOrchestrator creation.
         * 
         * &lt;a name=&#34;nested_orchestrated_resource_os_policy_assignment_v1_payload&#34;&gt;&lt;/a&gt;The `os_policy_assignment_v1_payload` block supports:
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the resource to be used while generating set of affected resources.
         * For UPSERT action the value is auto-generated during PolicyOrchestrator
         * creation when not set. When the value is set it should following next
         * restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the project.
         *   For DELETE action, ID must be specified explicitly during
         *   PolicyOrchestrator creation.
         * 
         * &lt;a name=&#34;nested_orchestrated_resource_os_policy_assignment_v1_payload&#34;&gt;&lt;/a&gt;The `os_policy_assignment_v1_payload` block supports:
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param osPolicyAssignmentV1Payload OS policy assignment is an API resource that is used to
         * apply a set of OS policies to a dynamically targeted group of Compute Engine
         * VM instances.
         * An OS policy is used to define the desired state configuration for a
         * Compute Engine VM instance through a set of configuration resources that
         * provide capabilities such as installing or removing software packages, or
         * executing a script.
         * For more information about the OS policy resource definitions and examples,
         * see
         * [OS policy and OS policy
         * assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder osPolicyAssignmentV1Payload(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs> osPolicyAssignmentV1Payload) {
            $.osPolicyAssignmentV1Payload = osPolicyAssignmentV1Payload;
            return this;
        }

        /**
         * @param osPolicyAssignmentV1Payload OS policy assignment is an API resource that is used to
         * apply a set of OS policies to a dynamically targeted group of Compute Engine
         * VM instances.
         * An OS policy is used to define the desired state configuration for a
         * Compute Engine VM instance through a set of configuration resources that
         * provide capabilities such as installing or removing software packages, or
         * executing a script.
         * For more information about the OS policy resource definitions and examples,
         * see
         * [OS policy and OS policy
         * assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder osPolicyAssignmentV1Payload(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadArgs osPolicyAssignmentV1Payload) {
            return osPolicyAssignmentV1Payload(Output.of(osPolicyAssignmentV1Payload));
        }

        public V2PolicyOrchestratorForFolderOrchestratedResourceArgs build() {
            return $;
        }
    }

}
