// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.monitoring.GenericServiceArgs;
import com.pulumi.gcp.monitoring.inputs.GenericServiceState;
import com.pulumi.gcp.monitoring.outputs.GenericServiceBasicService;
import com.pulumi.gcp.monitoring.outputs.GenericServiceTelemetry;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Service is a discrete, autonomous, and network-accessible unit,
 * designed to solve an individual concern (Wikipedia). In Cloud Monitoring,
 * a Service acts as the root resource under which operational aspects of
 * the service are accessible
 * 
 * To get more information about GenericService, see:
 * 
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
 * * How-to Guides
 *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
 *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
 * 
 * ## Example Usage
 * ### Monitoring Service Example
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.GenericService;
 * import com.pulumi.gcp.monitoring.GenericServiceArgs;
 * import com.pulumi.gcp.monitoring.inputs.GenericServiceBasicServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myService = new GenericService(&#34;myService&#34;, GenericServiceArgs.builder()        
 *             .basicService(GenericServiceBasicServiceArgs.builder()
 *                 .serviceLabels(Map.of(&#34;moduleId&#34;, &#34;another-module-id&#34;))
 *                 .serviceType(&#34;APP_ENGINE&#34;)
 *                 .build())
 *             .displayName(&#34;My Service my-service&#34;)
 *             .serviceId(&#34;my-service&#34;)
 *             .userLabels(Map.ofEntries(
 *                 Map.entry(&#34;my_key&#34;, &#34;my_value&#34;),
 *                 Map.entry(&#34;my_other_key&#34;, &#34;my_other_value&#34;)
 *             ))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * GenericService can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/genericService:GenericService default projects/{{project}}/services/{{service_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/genericService:GenericService default {{project}}/{{service_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:monitoring/genericService:GenericService default {{service_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:monitoring/genericService:GenericService")
public class GenericService extends com.pulumi.resources.CustomResource {
    /**
     * A well-known service type, defined by its service type and service labels.
     * Valid values are described at
     * https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
     * Structure is documented below.
     * 
     */
    @Export(name="basicService", type=GenericServiceBasicService.class, parameters={})
    private Output</* @Nullable */ GenericServiceBasicService> basicService;

    /**
     * @return A well-known service type, defined by its service type and service labels.
     * Valid values are described at
     * https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli
     * Structure is documented below.
     * 
     */
    public Output<Optional<GenericServiceBasicService>> basicService() {
        return Codegen.optional(this.basicService);
    }
    /**
     * Name used for UI elements listing this Service.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Name used for UI elements listing this Service.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * An optional service ID to use. If not given, the server will generate a
     * service ID.
     * 
     */
    @Export(name="serviceId", type=String.class, parameters={})
    private Output<String> serviceId;

    /**
     * @return An optional service ID to use. If not given, the server will generate a
     * service ID.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }
    /**
     * Configuration for how to query telemetry on a Service.
     * 
     */
    @Export(name="telemetries", type=List.class, parameters={GenericServiceTelemetry.class})
    private Output<List<GenericServiceTelemetry>> telemetries;

    /**
     * @return Configuration for how to query telemetry on a Service.
     * 
     */
    public Output<List<GenericServiceTelemetry>> telemetries() {
        return this.telemetries;
    }
    /**
     * Labels which have been used to annotate the service. Label keys must start
     * with a letter. Label keys and values may contain lowercase letters,
     * numbers, underscores, and dashes. Label keys and values have a maximum
     * length of 63 characters, and must be less than 128 bytes in size. Up to 64
     * label entries may be stored. For labels which do not have a semantic value,
     * the empty string may be supplied for the label value.
     * 
     */
    @Export(name="userLabels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> userLabels;

    /**
     * @return Labels which have been used to annotate the service. Label keys must start
     * with a letter. Label keys and values may contain lowercase letters,
     * numbers, underscores, and dashes. Label keys and values have a maximum
     * length of 63 characters, and must be less than 128 bytes in size. Up to 64
     * label entries may be stored. For labels which do not have a semantic value,
     * the empty string may be supplied for the label value.
     * 
     */
    public Output<Optional<Map<String,String>>> userLabels() {
        return Codegen.optional(this.userLabels);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GenericService(String name) {
        this(name, GenericServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GenericService(String name, GenericServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GenericService(String name, GenericServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/genericService:GenericService", name, args == null ? GenericServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GenericService(String name, Output<String> id, @Nullable GenericServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/genericService:GenericService", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GenericService get(String name, Output<String> id, @Nullable GenericServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GenericService(name, id, state, options);
    }
}
