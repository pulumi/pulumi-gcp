// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxVersionNluSettingArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxVersionState extends com.pulumi.resources.ResourceArgs {

    public static final CxVersionState Empty = new CxVersionState();

    /**
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples:
     * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples:
     * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The human-readable name of the version. Limit of 64 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The human-readable name of the version. Limit of 64 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
     * upon version creation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
     * upon version creation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The NLU settings of the flow at version creation.
     * 
     */
    @Import(name="nluSettings")
    private @Nullable Output<List<CxVersionNluSettingArgs>> nluSettings;

    /**
     * @return The NLU settings of the flow at version creation.
     * 
     */
    public Optional<Output<List<CxVersionNluSettingArgs>>> nluSettings() {
        return Optional.ofNullable(this.nluSettings);
    }

    /**
     * The Flow to create an Version for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The Flow to create an Version for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
     * has succeeded and this version is ready to serve. * FAILED: Version training failed.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
     * has succeeded and this version is ready to serve. * FAILED: Version training failed.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private CxVersionState() {}

    private CxVersionState(CxVersionState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.name = $.name;
        this.nluSettings = $.nluSettings;
        this.parent = $.parent;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxVersionState $;

        public Builder() {
            $ = new CxVersionState();
        }

        public Builder(CxVersionState defaults) {
            $ = new CxVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples:
         * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples:
         * &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The human-readable name of the version. Limit of 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the version. Limit of 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
         * upon version creation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow
         * upon version creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nluSettings The NLU settings of the flow at version creation.
         * 
         * @return builder
         * 
         */
        public Builder nluSettings(@Nullable Output<List<CxVersionNluSettingArgs>> nluSettings) {
            $.nluSettings = nluSettings;
            return this;
        }

        /**
         * @param nluSettings The NLU settings of the flow at version creation.
         * 
         * @return builder
         * 
         */
        public Builder nluSettings(List<CxVersionNluSettingArgs> nluSettings) {
            return nluSettings(Output.of(nluSettings));
        }

        /**
         * @param nluSettings The NLU settings of the flow at version creation.
         * 
         * @return builder
         * 
         */
        public Builder nluSettings(CxVersionNluSettingArgs... nluSettings) {
            return nluSettings(List.of(nluSettings));
        }

        /**
         * @param parent The Flow to create an Version for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The Flow to create an Version for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/flows/&lt;Flow ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param state The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
         * has succeeded and this version is ready to serve. * FAILED: Version training failed.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of this version. * RUNNING: Version is not ready to serve (e.g. training is running). * SUCCEEDED: Training
         * has succeeded and this version is ready to serve. * FAILED: Version training failed.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public CxVersionState build() {
            return $;
        }
    }

}
