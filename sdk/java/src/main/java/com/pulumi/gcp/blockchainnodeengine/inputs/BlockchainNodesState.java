// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.blockchainnodeengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesConnectionInfoArgs;
import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlockchainNodesState extends com.pulumi.resources.ResourceArgs {

    public static final BlockchainNodesState Empty = new BlockchainNodesState();

    /**
     * ID of the requesting object.
     * 
     * ***
     * 
     */
    @Import(name="blockchainNodeId")
    private @Nullable Output<String> blockchainNodeId;

    /**
     * @return ID of the requesting object.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> blockchainNodeId() {
        return Optional.ofNullable(this.blockchainNodeId);
    }

    /**
     * User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     * 
     */
    @Import(name="blockchainType")
    private @Nullable Output<String> blockchainType;

    /**
     * @return User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     * 
     */
    public Optional<Output<String>> blockchainType() {
        return Optional.ofNullable(this.blockchainType);
    }

    /**
     * The connection information through which to interact with a blockchain node.
     * Structure is documented below.
     * 
     */
    @Import(name="connectionInfos")
    private @Nullable Output<List<BlockchainNodesConnectionInfoArgs>> connectionInfos;

    /**
     * @return The connection information through which to interact with a blockchain node.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BlockchainNodesConnectionInfoArgs>>> connectionInfos() {
        return Optional.ofNullable(this.connectionInfos);
    }

    /**
     * The timestamp at which the blockchain node was first created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp at which the blockchain node was first created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * User-provided key-value pairs
     * Structure is documented below.
     * 
     */
    @Import(name="ethereumDetails")
    private @Nullable Output<BlockchainNodesEthereumDetailsArgs> ethereumDetails;

    /**
     * @return User-provided key-value pairs
     * Structure is documented below.
     * 
     */
    public Optional<Output<BlockchainNodesEthereumDetailsArgs>> ethereumDetails() {
        return Optional.ofNullable(this.ethereumDetails);
    }

    /**
     * User-provided key-value pairs
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-provided key-value pairs
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location of Blockchain Node being created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of Blockchain Node being created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * The timestamp at which the blockchain node was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The timestamp at which the blockchain node was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private BlockchainNodesState() {}

    private BlockchainNodesState(BlockchainNodesState $) {
        this.blockchainNodeId = $.blockchainNodeId;
        this.blockchainType = $.blockchainType;
        this.connectionInfos = $.connectionInfos;
        this.createTime = $.createTime;
        this.effectiveLabels = $.effectiveLabels;
        this.ethereumDetails = $.ethereumDetails;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlockchainNodesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlockchainNodesState $;

        public Builder() {
            $ = new BlockchainNodesState();
        }

        public Builder(BlockchainNodesState defaults) {
            $ = new BlockchainNodesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockchainNodeId ID of the requesting object.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder blockchainNodeId(@Nullable Output<String> blockchainNodeId) {
            $.blockchainNodeId = blockchainNodeId;
            return this;
        }

        /**
         * @param blockchainNodeId ID of the requesting object.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder blockchainNodeId(String blockchainNodeId) {
            return blockchainNodeId(Output.of(blockchainNodeId));
        }

        /**
         * @param blockchainType User-provided key-value pairs
         * Possible values are: `ETHEREUM`.
         * 
         * @return builder
         * 
         */
        public Builder blockchainType(@Nullable Output<String> blockchainType) {
            $.blockchainType = blockchainType;
            return this;
        }

        /**
         * @param blockchainType User-provided key-value pairs
         * Possible values are: `ETHEREUM`.
         * 
         * @return builder
         * 
         */
        public Builder blockchainType(String blockchainType) {
            return blockchainType(Output.of(blockchainType));
        }

        /**
         * @param connectionInfos The connection information through which to interact with a blockchain node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectionInfos(@Nullable Output<List<BlockchainNodesConnectionInfoArgs>> connectionInfos) {
            $.connectionInfos = connectionInfos;
            return this;
        }

        /**
         * @param connectionInfos The connection information through which to interact with a blockchain node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectionInfos(List<BlockchainNodesConnectionInfoArgs> connectionInfos) {
            return connectionInfos(Output.of(connectionInfos));
        }

        /**
         * @param connectionInfos The connection information through which to interact with a blockchain node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectionInfos(BlockchainNodesConnectionInfoArgs... connectionInfos) {
            return connectionInfos(List.of(connectionInfos));
        }

        /**
         * @param createTime The timestamp at which the blockchain node was first created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp at which the blockchain node was first created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param ethereumDetails User-provided key-value pairs
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ethereumDetails(@Nullable Output<BlockchainNodesEthereumDetailsArgs> ethereumDetails) {
            $.ethereumDetails = ethereumDetails;
            return this;
        }

        /**
         * @param ethereumDetails User-provided key-value pairs
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ethereumDetails(BlockchainNodesEthereumDetailsArgs ethereumDetails) {
            return ethereumDetails(Output.of(ethereumDetails));
        }

        /**
         * @param labels User-provided key-value pairs
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-provided key-value pairs
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location of Blockchain Node being created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of Blockchain Node being created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param updateTime The timestamp at which the blockchain node was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The timestamp at which the blockchain node was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public BlockchainNodesState build() {
            return $;
        }
    }

}
