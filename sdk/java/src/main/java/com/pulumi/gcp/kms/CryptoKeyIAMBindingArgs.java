// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.kms.inputs.CryptoKeyIAMBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CryptoKeyIAMBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoKeyIAMBindingArgs Empty = new CryptoKeyIAMBindingArgs();

    /**
     * ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<CryptoKeyIAMBindingConditionArgs> condition;

    /**
     * @return ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CryptoKeyIAMBindingConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The crypto key ID, in the form
     * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
     * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
     * the provider&#39;s project setting will be used as a fallback.
     * 
     */
    @Import(name="cryptoKeyId", required=true)
    private Output<String> cryptoKeyId;

    /**
     * @return The crypto key ID, in the form
     * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
     * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
     * the provider&#39;s project setting will be used as a fallback.
     * 
     */
    public Output<String> cryptoKeyId() {
        return this.cryptoKeyId;
    }

    @Import(name="members", required=true)
    private Output<List<String>> members;

    public Output<List<String>> members() {
        return this.members;
    }

    /**
     * The role that should be applied. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The role that should be applied. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private CryptoKeyIAMBindingArgs() {}

    private CryptoKeyIAMBindingArgs(CryptoKeyIAMBindingArgs $) {
        this.condition = $.condition;
        this.cryptoKeyId = $.cryptoKeyId;
        this.members = $.members;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoKeyIAMBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoKeyIAMBindingArgs $;

        public Builder() {
            $ = new CryptoKeyIAMBindingArgs();
        }

        public Builder(CryptoKeyIAMBindingArgs defaults) {
            $ = new CryptoKeyIAMBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<CryptoKeyIAMBindingConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition ) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(CryptoKeyIAMBindingConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param cryptoKeyId The crypto key ID, in the form
         * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
         * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
         * the provider&#39;s project setting will be used as a fallback.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyId(Output<String> cryptoKeyId) {
            $.cryptoKeyId = cryptoKeyId;
            return this;
        }

        /**
         * @param cryptoKeyId The crypto key ID, in the form
         * `{project_id}/{location_name}/{key_ring_name}/{crypto_key_name}` or
         * `{location_name}/{key_ring_name}/{crypto_key_name}`. In the second form,
         * the provider&#39;s project setting will be used as a fallback.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyId(String cryptoKeyId) {
            return cryptoKeyId(Output.of(cryptoKeyId));
        }

        public Builder members(Output<List<String>> members) {
            $.members = members;
            return this;
        }

        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param role The role that should be applied. Note that custom roles must be of the format
         * `[projects|organizations]/{parent-name}/roles/{role-name}`.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role that should be applied. Note that custom roles must be of the format
         * `[projects|organizations]/{parent-name}/roles/{role-name}`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public CryptoKeyIAMBindingArgs build() {
            $.cryptoKeyId = Objects.requireNonNull($.cryptoKeyId, "expected parameter 'cryptoKeyId' to be non-null");
            $.members = Objects.requireNonNull($.members, "expected parameter 'members' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
