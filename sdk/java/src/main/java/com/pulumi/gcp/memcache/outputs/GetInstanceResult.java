// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memcache.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.memcache.outputs.GetInstanceMaintenancePolicy;
import com.pulumi.gcp.memcache.outputs.GetInstanceMaintenanceSchedule;
import com.pulumi.gcp.memcache.outputs.GetInstanceMemcacheNode;
import com.pulumi.gcp.memcache.outputs.GetInstanceMemcacheParameter;
import com.pulumi.gcp.memcache.outputs.GetInstanceNodeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    private String authorizedNetwork;
    private String createTime;
    private String discoveryEndpoint;
    private String displayName;
    private Map<String,String> effectiveLabels;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private List<GetInstanceMaintenancePolicy> maintenancePolicies;
    private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
    private String memcacheFullVersion;
    private List<GetInstanceMemcacheNode> memcacheNodes;
    private List<GetInstanceMemcacheParameter> memcacheParameters;
    private String memcacheVersion;
    private String name;
    private List<GetInstanceNodeConfig> nodeConfigs;
    private Integer nodeCount;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private @Nullable String region;
    private List<String> reservedIpRangeIds;
    private List<String> zones;

    private GetInstanceResult() {}
    public String authorizedNetwork() {
        return this.authorizedNetwork;
    }
    public String createTime() {
        return this.createTime;
    }
    public String discoveryEndpoint() {
        return this.discoveryEndpoint;
    }
    public String displayName() {
        return this.displayName;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public List<GetInstanceMaintenancePolicy> maintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetInstanceMaintenanceSchedule> maintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    public String memcacheFullVersion() {
        return this.memcacheFullVersion;
    }
    public List<GetInstanceMemcacheNode> memcacheNodes() {
        return this.memcacheNodes;
    }
    public List<GetInstanceMemcacheParameter> memcacheParameters() {
        return this.memcacheParameters;
    }
    public String memcacheVersion() {
        return this.memcacheVersion;
    }
    public String name() {
        return this.name;
    }
    public List<GetInstanceNodeConfig> nodeConfigs() {
        return this.nodeConfigs;
    }
    public Integer nodeCount() {
        return this.nodeCount;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public List<String> reservedIpRangeIds() {
        return this.reservedIpRangeIds;
    }
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorizedNetwork;
        private String createTime;
        private String discoveryEndpoint;
        private String displayName;
        private Map<String,String> effectiveLabels;
        private String id;
        private Map<String,String> labels;
        private List<GetInstanceMaintenancePolicy> maintenancePolicies;
        private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
        private String memcacheFullVersion;
        private List<GetInstanceMemcacheNode> memcacheNodes;
        private List<GetInstanceMemcacheParameter> memcacheParameters;
        private String memcacheVersion;
        private String name;
        private List<GetInstanceNodeConfig> nodeConfigs;
        private Integer nodeCount;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private @Nullable String region;
        private List<String> reservedIpRangeIds;
        private List<String> zones;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.createTime = defaults.createTime;
    	      this.discoveryEndpoint = defaults.discoveryEndpoint;
    	      this.displayName = defaults.displayName;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.maintenanceSchedules = defaults.maintenanceSchedules;
    	      this.memcacheFullVersion = defaults.memcacheFullVersion;
    	      this.memcacheNodes = defaults.memcacheNodes;
    	      this.memcacheParameters = defaults.memcacheParameters;
    	      this.memcacheVersion = defaults.memcacheVersion;
    	      this.name = defaults.name;
    	      this.nodeConfigs = defaults.nodeConfigs;
    	      this.nodeCount = defaults.nodeCount;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.region = defaults.region;
    	      this.reservedIpRangeIds = defaults.reservedIpRangeIds;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder authorizedNetwork(String authorizedNetwork) {
            if (authorizedNetwork == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "authorizedNetwork");
            }
            this.authorizedNetwork = authorizedNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryEndpoint(String discoveryEndpoint) {
            if (discoveryEndpoint == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "discoveryEndpoint");
            }
            this.discoveryEndpoint = discoveryEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder maintenancePolicies(List<GetInstanceMaintenancePolicy> maintenancePolicies) {
            if (maintenancePolicies == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maintenancePolicies");
            }
            this.maintenancePolicies = maintenancePolicies;
            return this;
        }
        public Builder maintenancePolicies(GetInstanceMaintenancePolicy... maintenancePolicies) {
            return maintenancePolicies(List.of(maintenancePolicies));
        }
        @CustomType.Setter
        public Builder maintenanceSchedules(List<GetInstanceMaintenanceSchedule> maintenanceSchedules) {
            if (maintenanceSchedules == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maintenanceSchedules");
            }
            this.maintenanceSchedules = maintenanceSchedules;
            return this;
        }
        public Builder maintenanceSchedules(GetInstanceMaintenanceSchedule... maintenanceSchedules) {
            return maintenanceSchedules(List.of(maintenanceSchedules));
        }
        @CustomType.Setter
        public Builder memcacheFullVersion(String memcacheFullVersion) {
            if (memcacheFullVersion == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "memcacheFullVersion");
            }
            this.memcacheFullVersion = memcacheFullVersion;
            return this;
        }
        @CustomType.Setter
        public Builder memcacheNodes(List<GetInstanceMemcacheNode> memcacheNodes) {
            if (memcacheNodes == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "memcacheNodes");
            }
            this.memcacheNodes = memcacheNodes;
            return this;
        }
        public Builder memcacheNodes(GetInstanceMemcacheNode... memcacheNodes) {
            return memcacheNodes(List.of(memcacheNodes));
        }
        @CustomType.Setter
        public Builder memcacheParameters(List<GetInstanceMemcacheParameter> memcacheParameters) {
            if (memcacheParameters == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "memcacheParameters");
            }
            this.memcacheParameters = memcacheParameters;
            return this;
        }
        public Builder memcacheParameters(GetInstanceMemcacheParameter... memcacheParameters) {
            return memcacheParameters(List.of(memcacheParameters));
        }
        @CustomType.Setter
        public Builder memcacheVersion(String memcacheVersion) {
            if (memcacheVersion == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "memcacheVersion");
            }
            this.memcacheVersion = memcacheVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeConfigs(List<GetInstanceNodeConfig> nodeConfigs) {
            if (nodeConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "nodeConfigs");
            }
            this.nodeConfigs = nodeConfigs;
            return this;
        }
        public Builder nodeConfigs(GetInstanceNodeConfig... nodeConfigs) {
            return nodeConfigs(List.of(nodeConfigs));
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder reservedIpRangeIds(List<String> reservedIpRangeIds) {
            if (reservedIpRangeIds == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "reservedIpRangeIds");
            }
            this.reservedIpRangeIds = reservedIpRangeIds;
            return this;
        }
        public Builder reservedIpRangeIds(String... reservedIpRangeIds) {
            return reservedIpRangeIds(List.of(reservedIpRangeIds));
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.authorizedNetwork = authorizedNetwork;
            _resultValue.createTime = createTime;
            _resultValue.discoveryEndpoint = discoveryEndpoint;
            _resultValue.displayName = displayName;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.maintenancePolicies = maintenancePolicies;
            _resultValue.maintenanceSchedules = maintenanceSchedules;
            _resultValue.memcacheFullVersion = memcacheFullVersion;
            _resultValue.memcacheNodes = memcacheNodes;
            _resultValue.memcacheParameters = memcacheParameters;
            _resultValue.memcacheVersion = memcacheVersion;
            _resultValue.name = name;
            _resultValue.nodeConfigs = nodeConfigs;
            _resultValue.nodeCount = nodeCount;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.region = region;
            _resultValue.reservedIpRangeIds = reservedIpRangeIds;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
