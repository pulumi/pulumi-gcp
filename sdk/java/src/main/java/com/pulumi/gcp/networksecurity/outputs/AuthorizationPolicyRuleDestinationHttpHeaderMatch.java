// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AuthorizationPolicyRuleDestinationHttpHeaderMatch {
    /**
     * @return The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &#34;:authority&#34;. For matching a request&#39;s method, use the headerName &#34;:method&#34;.
     * 
     */
    private String headerName;
    /**
     * @return The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier.
     * 
     */
    private String regexMatch;

    private AuthorizationPolicyRuleDestinationHttpHeaderMatch() {}
    /**
     * @return The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &#34;:authority&#34;. For matching a request&#39;s method, use the headerName &#34;:method&#34;.
     * 
     */
    public String headerName() {
        return this.headerName;
    }
    /**
     * @return The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier.
     * 
     */
    public String regexMatch() {
        return this.regexMatch;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationPolicyRuleDestinationHttpHeaderMatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String headerName;
        private String regexMatch;
        public Builder() {}
        public Builder(AuthorizationPolicyRuleDestinationHttpHeaderMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headerName = defaults.headerName;
    	      this.regexMatch = defaults.regexMatch;
        }

        @CustomType.Setter
        public Builder headerName(String headerName) {
            if (headerName == null) {
              throw new MissingRequiredPropertyException("AuthorizationPolicyRuleDestinationHttpHeaderMatch", "headerName");
            }
            this.headerName = headerName;
            return this;
        }
        @CustomType.Setter
        public Builder regexMatch(String regexMatch) {
            if (regexMatch == null) {
              throw new MissingRequiredPropertyException("AuthorizationPolicyRuleDestinationHttpHeaderMatch", "regexMatch");
            }
            this.regexMatch = regexMatch;
            return this;
        }
        public AuthorizationPolicyRuleDestinationHttpHeaderMatch build() {
            final var _resultValue = new AuthorizationPolicyRuleDestinationHttpHeaderMatch();
            _resultValue.headerName = headerName;
            _resultValue.regexMatch = regexMatch;
            return _resultValue;
        }
    }
}
