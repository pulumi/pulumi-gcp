// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddomains.inputs.RegistrationDnsSettingsCustomDnsDsRecordArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationDnsSettingsCustomDnsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationDnsSettingsCustomDnsArgs Empty = new RegistrationDnsSettingsCustomDnsArgs();

    /**
     * The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
     * the values to set here. If this field is empty, DNSSEC is disabled.
     * Structure is documented below.
     * 
     */
    @Import(name="dsRecords")
    private @Nullable Output<List<RegistrationDnsSettingsCustomDnsDsRecordArgs>> dsRecords;

    /**
     * @return The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
     * the values to set here. If this field is empty, DNSSEC is disabled.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RegistrationDnsSettingsCustomDnsDsRecordArgs>>> dsRecords() {
        return Optional.ofNullable(this.dsRecords);
    }

    /**
     * Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
     * name, with Unicode domain names expressed in Punycode format.
     * 
     */
    @Import(name="nameServers", required=true)
    private Output<List<String>> nameServers;

    /**
     * @return Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
     * name, with Unicode domain names expressed in Punycode format.
     * 
     */
    public Output<List<String>> nameServers() {
        return this.nameServers;
    }

    private RegistrationDnsSettingsCustomDnsArgs() {}

    private RegistrationDnsSettingsCustomDnsArgs(RegistrationDnsSettingsCustomDnsArgs $) {
        this.dsRecords = $.dsRecords;
        this.nameServers = $.nameServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationDnsSettingsCustomDnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationDnsSettingsCustomDnsArgs $;

        public Builder() {
            $ = new RegistrationDnsSettingsCustomDnsArgs();
        }

        public Builder(RegistrationDnsSettingsCustomDnsArgs defaults) {
            $ = new RegistrationDnsSettingsCustomDnsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dsRecords The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
         * the values to set here. If this field is empty, DNSSEC is disabled.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dsRecords(@Nullable Output<List<RegistrationDnsSettingsCustomDnsDsRecordArgs>> dsRecords) {
            $.dsRecords = dsRecords;
            return this;
        }

        /**
         * @param dsRecords The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
         * the values to set here. If this field is empty, DNSSEC is disabled.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dsRecords(List<RegistrationDnsSettingsCustomDnsDsRecordArgs> dsRecords) {
            return dsRecords(Output.of(dsRecords));
        }

        /**
         * @param dsRecords The list of DS records for this domain, which are used to enable DNSSEC. The domain&#39;s DNS provider can provide
         * the values to set here. If this field is empty, DNSSEC is disabled.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dsRecords(RegistrationDnsSettingsCustomDnsDsRecordArgs... dsRecords) {
            return dsRecords(List.of(dsRecords));
        }

        /**
         * @param nameServers Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
         * name, with Unicode domain names expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(Output<List<String>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        /**
         * @param nameServers Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
         * name, with Unicode domain names expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(List<String> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        /**
         * @param nameServers Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
         * name, with Unicode domain names expressed in Punycode format.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        public RegistrationDnsSettingsCustomDnsArgs build() {
            if ($.nameServers == null) {
                throw new MissingRequiredPropertyException("RegistrationDnsSettingsCustomDnsArgs", "nameServers");
            }
            return $;
        }
    }

}
