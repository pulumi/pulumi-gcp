// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalCatalogTableOptionStorageDescriptor;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetTableExternalCatalogTableOption {
    /**
     * @return The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection is needed to read the open source table from BigQuery Engine. The connectionId can have the form &lt;project_id&gt;.&lt;location_id&gt;.&lt;connection_id&gt; or projects/&lt;project_id&gt;/locations/&lt;location_id&gt;/connections/&lt;connection_id&gt;.
     * 
     */
    private String connectionId;
    /**
     * @return A map of key value pairs defining the parameters and properties of the open source table. Corresponds with hive meta store table parameters. Maximum size of 4Mib.
     * 
     */
    private Map<String,String> parameters;
    /**
     * @return A storage descriptor containing information about the physical storage of this table.
     * 
     */
    private List<GetTableExternalCatalogTableOptionStorageDescriptor> storageDescriptors;

    private GetTableExternalCatalogTableOption() {}
    /**
     * @return The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection is needed to read the open source table from BigQuery Engine. The connectionId can have the form &lt;project_id&gt;.&lt;location_id&gt;.&lt;connection_id&gt; or projects/&lt;project_id&gt;/locations/&lt;location_id&gt;/connections/&lt;connection_id&gt;.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return A map of key value pairs defining the parameters and properties of the open source table. Corresponds with hive meta store table parameters. Maximum size of 4Mib.
     * 
     */
    public Map<String,String> parameters() {
        return this.parameters;
    }
    /**
     * @return A storage descriptor containing information about the physical storage of this table.
     * 
     */
    public List<GetTableExternalCatalogTableOptionStorageDescriptor> storageDescriptors() {
        return this.storageDescriptors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableExternalCatalogTableOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionId;
        private Map<String,String> parameters;
        private List<GetTableExternalCatalogTableOptionStorageDescriptor> storageDescriptors;
        public Builder() {}
        public Builder(GetTableExternalCatalogTableOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.parameters = defaults.parameters;
    	      this.storageDescriptors = defaults.storageDescriptors;
        }

        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetTableExternalCatalogTableOption", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(Map<String,String> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetTableExternalCatalogTableOption", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder storageDescriptors(List<GetTableExternalCatalogTableOptionStorageDescriptor> storageDescriptors) {
            if (storageDescriptors == null) {
              throw new MissingRequiredPropertyException("GetTableExternalCatalogTableOption", "storageDescriptors");
            }
            this.storageDescriptors = storageDescriptors;
            return this;
        }
        public Builder storageDescriptors(GetTableExternalCatalogTableOptionStorageDescriptor... storageDescriptors) {
            return storageDescriptors(List.of(storageDescriptors));
        }
        public GetTableExternalCatalogTableOption build() {
            final var _resultValue = new GetTableExternalCatalogTableOption();
            _resultValue.connectionId = connectionId;
            _resultValue.parameters = parameters;
            _resultValue.storageDescriptors = storageDescriptors;
            return _resultValue;
        }
    }
}
