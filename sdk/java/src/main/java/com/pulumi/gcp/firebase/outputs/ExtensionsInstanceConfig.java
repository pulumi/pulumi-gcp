// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExtensionsInstanceConfig {
    /**
     * @return List of extension events selected by consumer that extension is allowed to
     * emit, identified by their types.
     * 
     */
    private @Nullable List<String> allowedEventTypes;
    /**
     * @return (Output)
     * The time at which the Extension Instance Config was created.
     * 
     */
    private @Nullable String createTime;
    /**
     * @return Fully qualified Eventarc resource name that consumers should use for event triggers.
     * 
     */
    private @Nullable String eventarcChannel;
    /**
     * @return The ref of the Extension from the Registry (e.g. publisher-id/awesome-extension)
     * 
     */
    private String extensionRef;
    /**
     * @return The version of the Extension from the Registry (e.g. 1.0.3). If left blank, latest is assumed.
     * 
     */
    private @Nullable String extensionVersion;
    /**
     * @return (Output)
     * The unique identifier for this configuration.
     * 
     */
    private @Nullable String name;
    /**
     * @return Environment variables that may be configured for the Extension
     * 
     */
    private Map<String,String> params;
    /**
     * @return (Output)
     * Postinstall instructions to be shown for this Extension, with
     * template strings representing function and parameter values substituted
     * with actual values. These strings include: ${param:FOO},
     * ${function:myFunc.url},
     * ${function:myFunc.name}, and ${function:myFunc.location}
     * 
     * ***
     * 
     */
    private @Nullable String populatedPostinstallContent;
    /**
     * @return Params whose values are only available at deployment time.
     * Unlike other params, these will not be set as environment variables on
     * functions.
     * 
     */
    private @Nullable Map<String,String> systemParams;

    private ExtensionsInstanceConfig() {}
    /**
     * @return List of extension events selected by consumer that extension is allowed to
     * emit, identified by their types.
     * 
     */
    public List<String> allowedEventTypes() {
        return this.allowedEventTypes == null ? List.of() : this.allowedEventTypes;
    }
    /**
     * @return (Output)
     * The time at which the Extension Instance Config was created.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }
    /**
     * @return Fully qualified Eventarc resource name that consumers should use for event triggers.
     * 
     */
    public Optional<String> eventarcChannel() {
        return Optional.ofNullable(this.eventarcChannel);
    }
    /**
     * @return The ref of the Extension from the Registry (e.g. publisher-id/awesome-extension)
     * 
     */
    public String extensionRef() {
        return this.extensionRef;
    }
    /**
     * @return The version of the Extension from the Registry (e.g. 1.0.3). If left blank, latest is assumed.
     * 
     */
    public Optional<String> extensionVersion() {
        return Optional.ofNullable(this.extensionVersion);
    }
    /**
     * @return (Output)
     * The unique identifier for this configuration.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Environment variables that may be configured for the Extension
     * 
     */
    public Map<String,String> params() {
        return this.params;
    }
    /**
     * @return (Output)
     * Postinstall instructions to be shown for this Extension, with
     * template strings representing function and parameter values substituted
     * with actual values. These strings include: ${param:FOO},
     * ${function:myFunc.url},
     * ${function:myFunc.name}, and ${function:myFunc.location}
     * 
     * ***
     * 
     */
    public Optional<String> populatedPostinstallContent() {
        return Optional.ofNullable(this.populatedPostinstallContent);
    }
    /**
     * @return Params whose values are only available at deployment time.
     * Unlike other params, these will not be set as environment variables on
     * functions.
     * 
     */
    public Map<String,String> systemParams() {
        return this.systemParams == null ? Map.of() : this.systemParams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExtensionsInstanceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedEventTypes;
        private @Nullable String createTime;
        private @Nullable String eventarcChannel;
        private String extensionRef;
        private @Nullable String extensionVersion;
        private @Nullable String name;
        private Map<String,String> params;
        private @Nullable String populatedPostinstallContent;
        private @Nullable Map<String,String> systemParams;
        public Builder() {}
        public Builder(ExtensionsInstanceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedEventTypes = defaults.allowedEventTypes;
    	      this.createTime = defaults.createTime;
    	      this.eventarcChannel = defaults.eventarcChannel;
    	      this.extensionRef = defaults.extensionRef;
    	      this.extensionVersion = defaults.extensionVersion;
    	      this.name = defaults.name;
    	      this.params = defaults.params;
    	      this.populatedPostinstallContent = defaults.populatedPostinstallContent;
    	      this.systemParams = defaults.systemParams;
        }

        @CustomType.Setter
        public Builder allowedEventTypes(@Nullable List<String> allowedEventTypes) {
            this.allowedEventTypes = allowedEventTypes;
            return this;
        }
        public Builder allowedEventTypes(String... allowedEventTypes) {
            return allowedEventTypes(List.of(allowedEventTypes));
        }
        @CustomType.Setter
        public Builder createTime(@Nullable String createTime) {
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder eventarcChannel(@Nullable String eventarcChannel) {
            this.eventarcChannel = eventarcChannel;
            return this;
        }
        @CustomType.Setter
        public Builder extensionRef(String extensionRef) {
            this.extensionRef = Objects.requireNonNull(extensionRef);
            return this;
        }
        @CustomType.Setter
        public Builder extensionVersion(@Nullable String extensionVersion) {
            this.extensionVersion = extensionVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder params(Map<String,String> params) {
            this.params = Objects.requireNonNull(params);
            return this;
        }
        @CustomType.Setter
        public Builder populatedPostinstallContent(@Nullable String populatedPostinstallContent) {
            this.populatedPostinstallContent = populatedPostinstallContent;
            return this;
        }
        @CustomType.Setter
        public Builder systemParams(@Nullable Map<String,String> systemParams) {
            this.systemParams = systemParams;
            return this;
        }
        public ExtensionsInstanceConfig build() {
            final var o = new ExtensionsInstanceConfig();
            o.allowedEventTypes = allowedEventTypes;
            o.createTime = createTime;
            o.eventarcChannel = eventarcChannel;
            o.extensionRef = extensionRef;
            o.extensionVersion = extensionVersion;
            o.name = name;
            o.params = params;
            o.populatedPostinstallContent = populatedPostinstallContent;
            o.systemParams = systemParams;
            return o;
        }
    }
}
