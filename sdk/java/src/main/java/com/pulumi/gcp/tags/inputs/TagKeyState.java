// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tags.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagKeyState extends com.pulumi.resources.ResourceArgs {

    public static final TagKeyState Empty = new TagKeyState();

    /**
     * Output only. Creation time.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Creation time.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * User-assigned description of the TagKey. Must not exceed 256 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-assigned description of the TagKey. Must not exceed 256 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The generated numeric id for the TagKey.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The generated numeric id for the TagKey.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Output only. Namespaced name of the TagKey.
     * 
     */
    @Import(name="namespacedName")
    private @Nullable Output<String> namespacedName;

    /**
     * @return Output only. Namespaced name of the TagKey.
     * 
     */
    public Optional<Output<String>> namespacedName() {
        return Optional.ofNullable(this.namespacedName);
    }

    /**
     * Input only. The resource name of the new TagKey&#39;s parent. Must be of the form organizations/{org_id}.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return Input only. The resource name of the new TagKey&#39;s parent. Must be of the form organizations/{org_id}.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Optional. A purpose cannot be changed once set.
     * A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
     * Possible values are `GCE_FIREWALL`.
     * 
     */
    @Import(name="purpose")
    private @Nullable Output<String> purpose;

    /**
     * @return Optional. A purpose cannot be changed once set.
     * A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
     * Possible values are `GCE_FIREWALL`.
     * 
     */
    public Optional<Output<String>> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * Optional. Purpose data cannot be changed once set.
     * Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: `network = &#34;&lt;project-name&gt;/&lt;vpc-name&gt;&#34;`.
     * 
     */
    @Import(name="purposeData")
    private @Nullable Output<Map<String,String>> purposeData;

    /**
     * @return Optional. Purpose data cannot be changed once set.
     * Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: `network = &#34;&lt;project-name&gt;/&lt;vpc-name&gt;&#34;`.
     * 
     */
    public Optional<Output<Map<String,String>>> purposeData() {
        return Optional.ofNullable(this.purposeData);
    }

    /**
     * Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
     * The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="shortName")
    private @Nullable Output<String> shortName;

    /**
     * @return Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
     * The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    public Optional<Output<String>> shortName() {
        return Optional.ofNullable(this.shortName);
    }

    /**
     * Output only. Update time.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. Update time.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private TagKeyState() {}

    private TagKeyState(TagKeyState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.name = $.name;
        this.namespacedName = $.namespacedName;
        this.parent = $.parent;
        this.purpose = $.purpose;
        this.purposeData = $.purposeData;
        this.shortName = $.shortName;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagKeyState $;

        public Builder() {
            $ = new TagKeyState();
        }

        public Builder(TagKeyState defaults) {
            $ = new TagKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Output only. Creation time.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Creation time.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description User-assigned description of the TagKey. Must not exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-assigned description of the TagKey. Must not exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The generated numeric id for the TagKey.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The generated numeric id for the TagKey.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespacedName Output only. Namespaced name of the TagKey.
         * 
         * @return builder
         * 
         */
        public Builder namespacedName(@Nullable Output<String> namespacedName) {
            $.namespacedName = namespacedName;
            return this;
        }

        /**
         * @param namespacedName Output only. Namespaced name of the TagKey.
         * 
         * @return builder
         * 
         */
        public Builder namespacedName(String namespacedName) {
            return namespacedName(Output.of(namespacedName));
        }

        /**
         * @param parent Input only. The resource name of the new TagKey&#39;s parent. Must be of the form organizations/{org_id}.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Input only. The resource name of the new TagKey&#39;s parent. Must be of the form organizations/{org_id}.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param purpose Optional. A purpose cannot be changed once set.
         * A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
         * Possible values are `GCE_FIREWALL`.
         * 
         * @return builder
         * 
         */
        public Builder purpose(@Nullable Output<String> purpose) {
            $.purpose = purpose;
            return this;
        }

        /**
         * @param purpose Optional. A purpose cannot be changed once set.
         * A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
         * Possible values are `GCE_FIREWALL`.
         * 
         * @return builder
         * 
         */
        public Builder purpose(String purpose) {
            return purpose(Output.of(purpose));
        }

        /**
         * @param purposeData Optional. Purpose data cannot be changed once set.
         * Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: `network = &#34;&lt;project-name&gt;/&lt;vpc-name&gt;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder purposeData(@Nullable Output<Map<String,String>> purposeData) {
            $.purposeData = purposeData;
            return this;
        }

        /**
         * @param purposeData Optional. Purpose data cannot be changed once set.
         * Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: `network = &#34;&lt;project-name&gt;/&lt;vpc-name&gt;&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder purposeData(Map<String,String> purposeData) {
            return purposeData(Output.of(purposeData));
        }

        /**
         * @param shortName Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
         * The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * @return builder
         * 
         */
        public Builder shortName(@Nullable Output<String> shortName) {
            $.shortName = shortName;
            return this;
        }

        /**
         * @param shortName Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
         * The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * @return builder
         * 
         */
        public Builder shortName(String shortName) {
            return shortName(Output.of(shortName));
        }

        /**
         * @param updateTime Output only. Update time.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. Update time.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public TagKeyState build() {
            return $;
        }
    }

}
