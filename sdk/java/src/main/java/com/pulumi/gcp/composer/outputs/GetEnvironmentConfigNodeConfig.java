// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigNodeConfigIpAllocationPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEnvironmentConfigNodeConfig {
    private String composerInternalIpv4CidrBlock;
    private Integer diskSizeGb;
    private Boolean enableIpMasqAgent;
    private List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies;
    private String machineType;
    private Integer maxPodsPerNode;
    private String network;
    private List<String> oauthScopes;
    private String serviceAccount;
    private String subnetwork;
    private List<String> tags;
    private String zone;

    private GetEnvironmentConfigNodeConfig() {}
    public String composerInternalIpv4CidrBlock() {
        return this.composerInternalIpv4CidrBlock;
    }
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    public Boolean enableIpMasqAgent() {
        return this.enableIpMasqAgent;
    }
    public List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies() {
        return this.ipAllocationPolicies;
    }
    public String machineType() {
        return this.machineType;
    }
    public Integer maxPodsPerNode() {
        return this.maxPodsPerNode;
    }
    public String network() {
        return this.network;
    }
    public List<String> oauthScopes() {
        return this.oauthScopes;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public String subnetwork() {
        return this.subnetwork;
    }
    public List<String> tags() {
        return this.tags;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfigNodeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String composerInternalIpv4CidrBlock;
        private Integer diskSizeGb;
        private Boolean enableIpMasqAgent;
        private List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies;
        private String machineType;
        private Integer maxPodsPerNode;
        private String network;
        private List<String> oauthScopes;
        private String serviceAccount;
        private String subnetwork;
        private List<String> tags;
        private String zone;
        public Builder() {}
        public Builder(GetEnvironmentConfigNodeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.composerInternalIpv4CidrBlock = defaults.composerInternalIpv4CidrBlock;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.enableIpMasqAgent = defaults.enableIpMasqAgent;
    	      this.ipAllocationPolicies = defaults.ipAllocationPolicies;
    	      this.machineType = defaults.machineType;
    	      this.maxPodsPerNode = defaults.maxPodsPerNode;
    	      this.network = defaults.network;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tags = defaults.tags;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder composerInternalIpv4CidrBlock(String composerInternalIpv4CidrBlock) {
            if (composerInternalIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "composerInternalIpv4CidrBlock");
            }
            this.composerInternalIpv4CidrBlock = composerInternalIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpMasqAgent(Boolean enableIpMasqAgent) {
            if (enableIpMasqAgent == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "enableIpMasqAgent");
            }
            this.enableIpMasqAgent = enableIpMasqAgent;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationPolicies(List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies) {
            if (ipAllocationPolicies == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "ipAllocationPolicies");
            }
            this.ipAllocationPolicies = ipAllocationPolicies;
            return this;
        }
        public Builder ipAllocationPolicies(GetEnvironmentConfigNodeConfigIpAllocationPolicy... ipAllocationPolicies) {
            return ipAllocationPolicies(List.of(ipAllocationPolicies));
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            if (machineType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "machineType");
            }
            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            if (maxPodsPerNode == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "maxPodsPerNode");
            }
            this.maxPodsPerNode = maxPodsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder oauthScopes(List<String> oauthScopes) {
            if (oauthScopes == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "oauthScopes");
            }
            this.oauthScopes = oauthScopes;
            return this;
        }
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetEnvironmentConfigNodeConfig build() {
            final var _resultValue = new GetEnvironmentConfigNodeConfig();
            _resultValue.composerInternalIpv4CidrBlock = composerInternalIpv4CidrBlock;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.enableIpMasqAgent = enableIpMasqAgent;
            _resultValue.ipAllocationPolicies = ipAllocationPolicies;
            _resultValue.machineType = machineType;
            _resultValue.maxPodsPerNode = maxPodsPerNode;
            _resultValue.network = network;
            _resultValue.oauthScopes = oauthScopes;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.subnetwork = subnetwork;
            _resultValue.tags = tags;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
