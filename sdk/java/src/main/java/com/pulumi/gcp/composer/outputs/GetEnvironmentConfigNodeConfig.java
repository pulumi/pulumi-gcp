// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.composer.outputs.GetEnvironmentConfigNodeConfigIpAllocationPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEnvironmentConfigNodeConfig {
    /**
     * @return IPv4 cidr range that will be used by Composer internal components.
     * 
     */
    private String composerInternalIpv4CidrBlock;
    /**
     * @return PSC (Private Service Connect) Network entry point. Customers can pre-create the Network Attachment and point Cloud Composer environment to use. It is possible to share network attachment among many environments, provided enough IP addresses are available.
     * 
     */
    private String composerNetworkAttachment;
    /**
     * @return The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private Integer diskSizeGb;
    /**
     * @return Deploys &#39;ip-masq-agent&#39; daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
     * 
     */
    private Boolean enableIpMasqAgent;
    /**
     * @return Configuration for controlling how IPs are allocated in the GKE cluster. Cannot be updated.
     * 
     */
    private List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies;
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private String machineType;
    /**
     * @return The maximum pods per node in the GKE cluster allocated during environment creation. Lowering this value reduces IP address consumption by the Cloud Composer Kubernetes cluster. This value can only be set during environment creation, and only if the environment is VPC-Native. The range of possible values is 8-110, and the default is 32. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private Integer maxPodsPerNode;
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. The network must belong to the environment&#39;s project. If unspecified, the &#34;default&#34; network ID in the environment&#39;s project is used. If a Custom Subnet Network is provided, subnetwork must also be provided.
     * 
     */
    private String network;
    /**
     * @return The set of Google API scopes to be made available on all node VMs. Cannot be updated. If empty, defaults to [&#34;https://www.googleapis.com/auth/cloud-platform&#34;]. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private List<String> oauthScopes;
    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the &#34;default&#34; Compute Engine service account is used. Cannot be updated. If given, note that the service account must have roles/composer.worker for any GCP resources created under the Cloud Composer Environment.
     * 
     */
    private String serviceAccount;
    /**
     * @return The Compute Engine subnetwork to be used for machine communications, specified as a self-link, relative resource name (e.g. &#34;projects/{project}/regions/{region}/subnetworks/{subnetwork}&#34;), or by name. If subnetwork is provided, network must also be provided and the subnetwork must belong to the enclosing environment&#39;s project and region.
     * 
     */
    private String subnetwork;
    /**
     * @return The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with RFC1035. Cannot be updated.
     * 
     */
    private List<String> tags;
    /**
     * @return The Compute Engine zone in which to deploy the VMs running the Apache Airflow software, specified as the zone name or relative resource name (e.g. &#34;projects/{project}/zones/{zone}&#34;). Must belong to the enclosing environment&#39;s project and region. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private String zone;

    private GetEnvironmentConfigNodeConfig() {}
    /**
     * @return IPv4 cidr range that will be used by Composer internal components.
     * 
     */
    public String composerInternalIpv4CidrBlock() {
        return this.composerInternalIpv4CidrBlock;
    }
    /**
     * @return PSC (Private Service Connect) Network entry point. Customers can pre-create the Network Attachment and point Cloud Composer environment to use. It is possible to share network attachment among many environments, provided enough IP addresses are available.
     * 
     */
    public String composerNetworkAttachment() {
        return this.composerNetworkAttachment;
    }
    /**
     * @return The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return Deploys &#39;ip-masq-agent&#39; daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
     * 
     */
    public Boolean enableIpMasqAgent() {
        return this.enableIpMasqAgent;
    }
    /**
     * @return Configuration for controlling how IPs are allocated in the GKE cluster. Cannot be updated.
     * 
     */
    public List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies() {
        return this.ipAllocationPolicies;
    }
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public String machineType() {
        return this.machineType;
    }
    /**
     * @return The maximum pods per node in the GKE cluster allocated during environment creation. Lowering this value reduces IP address consumption by the Cloud Composer Kubernetes cluster. This value can only be set during environment creation, and only if the environment is VPC-Native. The range of possible values is 8-110, and the default is 32. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Integer maxPodsPerNode() {
        return this.maxPodsPerNode;
    }
    /**
     * @return The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: &#34;projects/{project}/zones/{zone}/machineTypes/{machineType}&#34;. Must belong to the enclosing environment&#39;s project and region/zone. The network must belong to the environment&#39;s project. If unspecified, the &#34;default&#34; network ID in the environment&#39;s project is used. If a Custom Subnet Network is provided, subnetwork must also be provided.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The set of Google API scopes to be made available on all node VMs. Cannot be updated. If empty, defaults to [&#34;https://www.googleapis.com/auth/cloud-platform&#34;]. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public List<String> oauthScopes() {
        return this.oauthScopes;
    }
    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the &#34;default&#34; Compute Engine service account is used. Cannot be updated. If given, note that the service account must have roles/composer.worker for any GCP resources created under the Cloud Composer Environment.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The Compute Engine subnetwork to be used for machine communications, specified as a self-link, relative resource name (e.g. &#34;projects/{project}/regions/{region}/subnetworks/{subnetwork}&#34;), or by name. If subnetwork is provided, network must also be provided and the subnetwork must belong to the enclosing environment&#39;s project and region.
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }
    /**
     * @return The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with RFC1035. Cannot be updated.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The Compute Engine zone in which to deploy the VMs running the Apache Airflow software, specified as the zone name or relative resource name (e.g. &#34;projects/{project}/zones/{zone}&#34;). Must belong to the enclosing environment&#39;s project and region. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfigNodeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String composerInternalIpv4CidrBlock;
        private String composerNetworkAttachment;
        private Integer diskSizeGb;
        private Boolean enableIpMasqAgent;
        private List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies;
        private String machineType;
        private Integer maxPodsPerNode;
        private String network;
        private List<String> oauthScopes;
        private String serviceAccount;
        private String subnetwork;
        private List<String> tags;
        private String zone;
        public Builder() {}
        public Builder(GetEnvironmentConfigNodeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.composerInternalIpv4CidrBlock = defaults.composerInternalIpv4CidrBlock;
    	      this.composerNetworkAttachment = defaults.composerNetworkAttachment;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.enableIpMasqAgent = defaults.enableIpMasqAgent;
    	      this.ipAllocationPolicies = defaults.ipAllocationPolicies;
    	      this.machineType = defaults.machineType;
    	      this.maxPodsPerNode = defaults.maxPodsPerNode;
    	      this.network = defaults.network;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tags = defaults.tags;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder composerInternalIpv4CidrBlock(String composerInternalIpv4CidrBlock) {
            if (composerInternalIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "composerInternalIpv4CidrBlock");
            }
            this.composerInternalIpv4CidrBlock = composerInternalIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder composerNetworkAttachment(String composerNetworkAttachment) {
            if (composerNetworkAttachment == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "composerNetworkAttachment");
            }
            this.composerNetworkAttachment = composerNetworkAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpMasqAgent(Boolean enableIpMasqAgent) {
            if (enableIpMasqAgent == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "enableIpMasqAgent");
            }
            this.enableIpMasqAgent = enableIpMasqAgent;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationPolicies(List<GetEnvironmentConfigNodeConfigIpAllocationPolicy> ipAllocationPolicies) {
            if (ipAllocationPolicies == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "ipAllocationPolicies");
            }
            this.ipAllocationPolicies = ipAllocationPolicies;
            return this;
        }
        public Builder ipAllocationPolicies(GetEnvironmentConfigNodeConfigIpAllocationPolicy... ipAllocationPolicies) {
            return ipAllocationPolicies(List.of(ipAllocationPolicies));
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            if (machineType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "machineType");
            }
            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            if (maxPodsPerNode == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "maxPodsPerNode");
            }
            this.maxPodsPerNode = maxPodsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder oauthScopes(List<String> oauthScopes) {
            if (oauthScopes == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "oauthScopes");
            }
            this.oauthScopes = oauthScopes;
            return this;
        }
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigNodeConfig", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetEnvironmentConfigNodeConfig build() {
            final var _resultValue = new GetEnvironmentConfigNodeConfig();
            _resultValue.composerInternalIpv4CidrBlock = composerInternalIpv4CidrBlock;
            _resultValue.composerNetworkAttachment = composerNetworkAttachment;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.enableIpMasqAgent = enableIpMasqAgent;
            _resultValue.ipAllocationPolicies = ipAllocationPolicies;
            _resultValue.machineType = machineType;
            _resultValue.maxPodsPerNode = maxPodsPerNode;
            _resultValue.network = network;
            _resultValue.oauthScopes = oauthScopes;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.subnetwork = subnetwork;
            _resultValue.tags = tags;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
