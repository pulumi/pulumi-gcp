// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataStoreDocumentProcessingConfigChunkingConfig {
    /**
     * @return Configuration for the layout based chunking.
     * Structure is documented below.
     * 
     */
    private @Nullable DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig layoutBasedChunkingConfig;

    private DataStoreDocumentProcessingConfigChunkingConfig() {}
    /**
     * @return Configuration for the layout based chunking.
     * Structure is documented below.
     * 
     */
    public Optional<DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig> layoutBasedChunkingConfig() {
        return Optional.ofNullable(this.layoutBasedChunkingConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataStoreDocumentProcessingConfigChunkingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig layoutBasedChunkingConfig;
        public Builder() {}
        public Builder(DataStoreDocumentProcessingConfigChunkingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.layoutBasedChunkingConfig = defaults.layoutBasedChunkingConfig;
        }

        @CustomType.Setter
        public Builder layoutBasedChunkingConfig(@Nullable DataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfig layoutBasedChunkingConfig) {

            this.layoutBasedChunkingConfig = layoutBasedChunkingConfig;
            return this;
        }
        public DataStoreDocumentProcessingConfigChunkingConfig build() {
            final var _resultValue = new DataStoreDocumentProcessingConfigChunkingConfig();
            _resultValue.layoutBasedChunkingConfig = layoutBasedChunkingConfig;
            return _resultValue;
        }
    }
}
