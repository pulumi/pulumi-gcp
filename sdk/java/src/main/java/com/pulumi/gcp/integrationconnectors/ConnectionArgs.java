// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionAuthConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionConfigVariableArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionDestinationConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionEventingConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionLockConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionLogConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionNodeConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * authConfig for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="authConfig")
    private @Nullable Output<ConnectionAuthConfigArgs> authConfig;

    /**
     * @return authConfig for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionAuthConfigArgs>> authConfig() {
        return Optional.ofNullable(this.authConfig);
    }

    /**
     * Config Variables for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="configVariables")
    private @Nullable Output<List<ConnectionConfigVariableArgs>> configVariables;

    /**
     * @return Config Variables for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionConfigVariableArgs>>> configVariables() {
        return Optional.ofNullable(this.configVariables);
    }

    /**
     * connectorVersion of the Connector.
     * 
     */
    @Import(name="connectorVersion", required=true)
    private Output<String> connectorVersion;

    /**
     * @return connectorVersion of the Connector.
     * 
     */
    public Output<String> connectorVersion() {
        return this.connectorVersion;
    }

    /**
     * An arbitrary description for the Conection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An arbitrary description for the Conection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Define the Connectors target endpoint.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationConfigs")
    private @Nullable Output<List<ConnectionDestinationConfigArgs>> destinationConfigs;

    /**
     * @return Define the Connectors target endpoint.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionDestinationConfigArgs>>> destinationConfigs() {
        return Optional.ofNullable(this.destinationConfigs);
    }

    /**
     * Eventing Configuration of a connection
     * Structure is documented below.
     * 
     */
    @Import(name="eventingConfig")
    private @Nullable Output<ConnectionEventingConfigArgs> eventingConfig;

    /**
     * @return Eventing Configuration of a connection
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionEventingConfigArgs>> eventingConfig() {
        return Optional.ofNullable(this.eventingConfig);
    }

    /**
     * Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     * 
     */
    @Import(name="eventingEnablementType")
    private @Nullable Output<String> eventingEnablementType;

    /**
     * @return Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     * 
     */
    public Optional<Output<String>> eventingEnablementType() {
        return Optional.ofNullable(this.eventingEnablementType);
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location in which Connection needs to be created.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location in which Connection needs to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     * 
     */
    @Import(name="lockConfig")
    private @Nullable Output<ConnectionLockConfigArgs> lockConfig;

    /**
     * @return Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionLockConfigArgs>> lockConfig() {
        return Optional.ofNullable(this.lockConfig);
    }

    /**
     * Log configuration for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<ConnectionLogConfigArgs> logConfig;

    /**
     * @return Log configuration for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * Name of Connection needs to be created.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Connection needs to be created.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Node configuration for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeConfig")
    private @Nullable Output<ConnectionNodeConfigArgs> nodeConfig;

    /**
     * @return Node configuration for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionNodeConfigArgs>> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Service account needed for runtime plane to access Google Cloud resources.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * SSL Configuration of a connection
     * Structure is documented below.
     * 
     */
    @Import(name="sslConfig")
    private @Nullable Output<ConnectionSslConfigArgs> sslConfig;

    /**
     * @return SSL Configuration of a connection
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionSslConfigArgs>> sslConfig() {
        return Optional.ofNullable(this.sslConfig);
    }

    /**
     * Suspended indicates if a user has suspended a connection or not.
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return Suspended indicates if a user has suspended a connection or not.
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.authConfig = $.authConfig;
        this.configVariables = $.configVariables;
        this.connectorVersion = $.connectorVersion;
        this.description = $.description;
        this.destinationConfigs = $.destinationConfigs;
        this.eventingConfig = $.eventingConfig;
        this.eventingEnablementType = $.eventingEnablementType;
        this.labels = $.labels;
        this.location = $.location;
        this.lockConfig = $.lockConfig;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.nodeConfig = $.nodeConfig;
        this.project = $.project;
        this.serviceAccount = $.serviceAccount;
        this.sslConfig = $.sslConfig;
        this.suspended = $.suspended;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authConfig authConfig for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authConfig(@Nullable Output<ConnectionAuthConfigArgs> authConfig) {
            $.authConfig = authConfig;
            return this;
        }

        /**
         * @param authConfig authConfig for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authConfig(ConnectionAuthConfigArgs authConfig) {
            return authConfig(Output.of(authConfig));
        }

        /**
         * @param configVariables Config Variables for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configVariables(@Nullable Output<List<ConnectionConfigVariableArgs>> configVariables) {
            $.configVariables = configVariables;
            return this;
        }

        /**
         * @param configVariables Config Variables for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configVariables(List<ConnectionConfigVariableArgs> configVariables) {
            return configVariables(Output.of(configVariables));
        }

        /**
         * @param configVariables Config Variables for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configVariables(ConnectionConfigVariableArgs... configVariables) {
            return configVariables(List.of(configVariables));
        }

        /**
         * @param connectorVersion connectorVersion of the Connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersion(Output<String> connectorVersion) {
            $.connectorVersion = connectorVersion;
            return this;
        }

        /**
         * @param connectorVersion connectorVersion of the Connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersion(String connectorVersion) {
            return connectorVersion(Output.of(connectorVersion));
        }

        /**
         * @param description An arbitrary description for the Conection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An arbitrary description for the Conection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationConfigs Define the Connectors target endpoint.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfigs(@Nullable Output<List<ConnectionDestinationConfigArgs>> destinationConfigs) {
            $.destinationConfigs = destinationConfigs;
            return this;
        }

        /**
         * @param destinationConfigs Define the Connectors target endpoint.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfigs(List<ConnectionDestinationConfigArgs> destinationConfigs) {
            return destinationConfigs(Output.of(destinationConfigs));
        }

        /**
         * @param destinationConfigs Define the Connectors target endpoint.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfigs(ConnectionDestinationConfigArgs... destinationConfigs) {
            return destinationConfigs(List.of(destinationConfigs));
        }

        /**
         * @param eventingConfig Eventing Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingConfig(@Nullable Output<ConnectionEventingConfigArgs> eventingConfig) {
            $.eventingConfig = eventingConfig;
            return this;
        }

        /**
         * @param eventingConfig Eventing Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingConfig(ConnectionEventingConfigArgs eventingConfig) {
            return eventingConfig(Output.of(eventingConfig));
        }

        /**
         * @param eventingEnablementType Eventing enablement type. Will be nil if eventing is not enabled.
         * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
         * 
         * @return builder
         * 
         */
        public Builder eventingEnablementType(@Nullable Output<String> eventingEnablementType) {
            $.eventingEnablementType = eventingEnablementType;
            return this;
        }

        /**
         * @param eventingEnablementType Eventing enablement type. Will be nil if eventing is not enabled.
         * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
         * 
         * @return builder
         * 
         */
        public Builder eventingEnablementType(String eventingEnablementType) {
            return eventingEnablementType(Output.of(eventingEnablementType));
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location in which Connection needs to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location in which Connection needs to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param lockConfig Determines whether or no a connection is locked. If locked, a reason must be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lockConfig(@Nullable Output<ConnectionLockConfigArgs> lockConfig) {
            $.lockConfig = lockConfig;
            return this;
        }

        /**
         * @param lockConfig Determines whether or no a connection is locked. If locked, a reason must be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lockConfig(ConnectionLockConfigArgs lockConfig) {
            return lockConfig(Output.of(lockConfig));
        }

        /**
         * @param logConfig Log configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<ConnectionLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig Log configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(ConnectionLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param name Name of Connection needs to be created.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Connection needs to be created.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeConfig Node configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(@Nullable Output<ConnectionNodeConfigArgs> nodeConfig) {
            $.nodeConfig = nodeConfig;
            return this;
        }

        /**
         * @param nodeConfig Node configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(ConnectionNodeConfigArgs nodeConfig) {
            return nodeConfig(Output.of(nodeConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceAccount Service account needed for runtime plane to access Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account needed for runtime plane to access Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param sslConfig SSL Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslConfig(@Nullable Output<ConnectionSslConfigArgs> sslConfig) {
            $.sslConfig = sslConfig;
            return this;
        }

        /**
         * @param sslConfig SSL Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslConfig(ConnectionSslConfigArgs sslConfig) {
            return sslConfig(Output.of(sslConfig));
        }

        /**
         * @param suspended Suspended indicates if a user has suspended a connection or not.
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended Suspended indicates if a user has suspended a connection or not.
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        public ConnectionArgs build() {
            if ($.connectorVersion == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "connectorVersion");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "location");
            }
            return $;
        }
    }

}
