// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TriggerGitFileSource {
    /**
     * @return The full resource name of the github enterprise config.
     * Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
     * 
     */
    private @Nullable String githubEnterpriseConfig;
    /**
     * @return The path of the file, with the repo root as the root of the path.
     * 
     */
    private String path;
    /**
     * @return The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
     * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
     * Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
     * 
     */
    private String repoType;
    /**
     * @return The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
     * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
     * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
     * 
     */
    private @Nullable String revision;
    /**
     * @return The URI of the repo (optional). If unspecified, the repo from which the trigger
     * invocation originated is assumed to be the repo from which to read the specified path.
     * 
     */
    private @Nullable String uri;

    private TriggerGitFileSource() {}
    /**
     * @return The full resource name of the github enterprise config.
     * Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
     * 
     */
    public Optional<String> githubEnterpriseConfig() {
        return Optional.ofNullable(this.githubEnterpriseConfig);
    }
    /**
     * @return The path of the file, with the repo root as the root of the path.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
     * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
     * Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
     * 
     */
    public String repoType() {
        return this.repoType;
    }
    /**
     * @return The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
     * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
     * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
     * 
     */
    public Optional<String> revision() {
        return Optional.ofNullable(this.revision);
    }
    /**
     * @return The URI of the repo (optional). If unspecified, the repo from which the trigger
     * invocation originated is assumed to be the repo from which to read the specified path.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerGitFileSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String githubEnterpriseConfig;
        private String path;
        private String repoType;
        private @Nullable String revision;
        private @Nullable String uri;
        public Builder() {}
        public Builder(TriggerGitFileSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.githubEnterpriseConfig = defaults.githubEnterpriseConfig;
    	      this.path = defaults.path;
    	      this.repoType = defaults.repoType;
    	      this.revision = defaults.revision;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder githubEnterpriseConfig(@Nullable String githubEnterpriseConfig) {
            this.githubEnterpriseConfig = githubEnterpriseConfig;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder repoType(String repoType) {
            this.repoType = Objects.requireNonNull(repoType);
            return this;
        }
        @CustomType.Setter
        public Builder revision(@Nullable String revision) {
            this.revision = revision;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public TriggerGitFileSource build() {
            final var o = new TriggerGitFileSource();
            o.githubEnterpriseConfig = githubEnterpriseConfig;
            o.path = path;
            o.repoType = repoType;
            o.revision = revision;
            o.uri = uri;
            return o;
        }
    }
}
