// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxAgentClientCertificateSettings {
    /**
     * @return The name of the SecretManager secret version resource storing the passphrase. &#39;passphrase&#39; should be left unset if the private key is not encrypted. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    private @Nullable String passphrase;
    /**
     * @return The name of the SecretManager secret version resource storing the private key encoded in PEM format. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    private String privateKey;
    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    private String sslCertificate;

    private CxAgentClientCertificateSettings() {}
    /**
     * @return The name of the SecretManager secret version resource storing the passphrase. &#39;passphrase&#39; should be left unset if the private key is not encrypted. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    public Optional<String> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }
    /**
     * @return The name of the SecretManager secret version resource storing the private key encoded in PEM format. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    public String sslCertificate() {
        return this.sslCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxAgentClientCertificateSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String passphrase;
        private String privateKey;
        private String sslCertificate;
        public Builder() {}
        public Builder(CxAgentClientCertificateSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.passphrase = defaults.passphrase;
    	      this.privateKey = defaults.privateKey;
    	      this.sslCertificate = defaults.sslCertificate;
        }

        @CustomType.Setter
        public Builder passphrase(@Nullable String passphrase) {

            this.passphrase = passphrase;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("CxAgentClientCertificateSettings", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder sslCertificate(String sslCertificate) {
            if (sslCertificate == null) {
              throw new MissingRequiredPropertyException("CxAgentClientCertificateSettings", "sslCertificate");
            }
            this.sslCertificate = sslCertificate;
            return this;
        }
        public CxAgentClientCertificateSettings build() {
            final var _resultValue = new CxAgentClientCertificateSettings();
            _resultValue.passphrase = passphrase;
            _resultValue.privateKey = privateKey;
            _resultValue.sslCertificate = sslCertificate;
            return _resultValue;
        }
    }
}
