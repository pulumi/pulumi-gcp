// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.resourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class CapabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CapabilityArgs Empty = new CapabilityArgs();

    /**
     * Capability name that should be updated on the folder.
     * 
     */
    @Import(name="capabilityName", required=true)
    private Output<String> capabilityName;

    /**
     * @return Capability name that should be updated on the folder.
     * 
     */
    public Output<String> capabilityName() {
        return this.capabilityName;
    }

    /**
     * Folder on which Capability needs to be updated in the format folders/folder_id.
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return Folder on which Capability needs to be updated in the format folders/folder_id.
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * Capability Value.
     * 
     * ***
     * 
     */
    @Import(name="value", required=true)
    private Output<Boolean> value;

    /**
     * @return Capability Value.
     * 
     * ***
     * 
     */
    public Output<Boolean> value() {
        return this.value;
    }

    private CapabilityArgs() {}

    private CapabilityArgs(CapabilityArgs $) {
        this.capabilityName = $.capabilityName;
        this.parent = $.parent;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CapabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CapabilityArgs $;

        public Builder() {
            $ = new CapabilityArgs();
        }

        public Builder(CapabilityArgs defaults) {
            $ = new CapabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilityName Capability name that should be updated on the folder.
         * 
         * @return builder
         * 
         */
        public Builder capabilityName(Output<String> capabilityName) {
            $.capabilityName = capabilityName;
            return this;
        }

        /**
         * @param capabilityName Capability name that should be updated on the folder.
         * 
         * @return builder
         * 
         */
        public Builder capabilityName(String capabilityName) {
            return capabilityName(Output.of(capabilityName));
        }

        /**
         * @param parent Folder on which Capability needs to be updated in the format folders/folder_id.
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Folder on which Capability needs to be updated in the format folders/folder_id.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param value Capability Value.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder value(Output<Boolean> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Capability Value.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder value(Boolean value) {
            return value(Output.of(value));
        }

        public CapabilityArgs build() {
            if ($.capabilityName == null) {
                throw new MissingRequiredPropertyException("CapabilityArgs", "capabilityName");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("CapabilityArgs", "parent");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("CapabilityArgs", "value");
            }
            return $;
        }
    }

}
