// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceCloneArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceReplicaConfigurationArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceRestoreBackupContextArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceArgs Empty = new DatabaseInstanceArgs();

    /**
     * The context needed to create this instance as a clone of another instance. When this field is set during
     * resource creation, this provider will attempt to clone another instance as indicated in the context. The
     * configuration is detailed below.
     * 
     */
    @Import(name="clone")
    private @Nullable Output<DatabaseInstanceCloneArgs> clone;

    /**
     * @return The context needed to create this instance as a clone of another instance. When this field is set during
     * resource creation, this provider will attempt to clone another instance as indicated in the context. The
     * configuration is detailed below.
     * 
     */
    public Optional<Output<DatabaseInstanceCloneArgs>> clone_() {
        return Optional.ofNullable(this.clone);
    }

    /**
     * The MySQL, PostgreSQL or
     * SQL Server version to use. Supported values include `MYSQL_5_6`,
     * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
     * `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
     * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
     * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
     * `SQLSERVER_2019_WEB`.
     * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
     * includes an up-to-date reference of supported versions.
     * 
     */
    @Import(name="databaseVersion", required=true)
    private Output<String> databaseVersion;

    /**
     * @return The MySQL, PostgreSQL or
     * SQL Server version to use. Supported values include `MYSQL_5_6`,
     * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
     * `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
     * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
     * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
     * `SQLSERVER_2019_WEB`.
     * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
     * includes an up-to-date reference of supported versions.
     * 
     */
    public Output<String> databaseVersion() {
        return this.databaseVersion;
    }

    /**
     * Whether or not to allow he provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` command that deletes the instance will fail.
     * 
     */
    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    /**
     * @return Whether or not to allow he provider to destroy the instance. Unless this field is set to false
     * in state, a `destroy` or `update` command that deletes the instance will fail.
     * 
     */
    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * The full path to the encryption key used for the CMEK disk encryption.  Setting
     * up disk encryption currently requires manual steps outside of this provider.
     * The provided key must be in the same region as the SQL instance.  In order
     * to use this feature, a special kind of service account must be created and
     * granted permission on this key.  This step can currently only be done
     * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
     * That service account needs the `Cloud KMS &gt; Cloud KMS CryptoKey Encrypter/Decrypter` role on your
     * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
     * 
     */
    @Import(name="encryptionKeyName")
    private @Nullable Output<String> encryptionKeyName;

    /**
     * @return The full path to the encryption key used for the CMEK disk encryption.  Setting
     * up disk encryption currently requires manual steps outside of this provider.
     * The provided key must be in the same region as the SQL instance.  In order
     * to use this feature, a special kind of service account must be created and
     * granted permission on this key.  This step can currently only be done
     * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
     * That service account needs the `Cloud KMS &gt; Cloud KMS CryptoKey Encrypter/Decrypter` role on your
     * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
     * 
     */
    public Optional<Output<String>> encryptionKeyName() {
        return Optional.ofNullable(this.encryptionKeyName);
    }

    /**
     * The name of the existing instance that will
     * act as the master in the replication setup. Note, this requires the master to
     * have `binary_log_enabled` set, as well as existing backups.
     * 
     */
    @Import(name="masterInstanceName")
    private @Nullable Output<String> masterInstanceName;

    /**
     * @return The name of the existing instance that will
     * act as the master in the replication setup. Note, this requires the master to
     * have `binary_log_enabled` set, as well as existing backups.
     * 
     */
    public Optional<Output<String>> masterInstanceName() {
        return Optional.ofNullable(this.masterInstanceName);
    }

    /**
     * A name for this whitelist entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for this whitelist entry.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The full project ID of the source instance.`
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The full project ID of the source instance.`
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region the instance will sit in. If a region is not provided in the resource definition,
     * the provider region will be used instead.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region the instance will sit in. If a region is not provided in the resource definition,
     * the provider region will be used instead.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The configuration for replication. The
     * configuration is detailed below. Valid only for MySQL instances.
     * 
     */
    @Import(name="replicaConfiguration")
    private @Nullable Output<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration;

    /**
     * @return The configuration for replication. The
     * configuration is detailed below. Valid only for MySQL instances.
     * 
     */
    public Optional<Output<DatabaseInstanceReplicaConfigurationArgs>> replicaConfiguration() {
        return Optional.ofNullable(this.replicaConfiguration);
    }

    /**
     * The context needed to restore the database to a backup run. This field will
     * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
     * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
     * block during resource creation/update will trigger the restore action after the resource is created/updated.
     * 
     */
    @Import(name="restoreBackupContext")
    private @Nullable Output<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext;

    /**
     * @return The context needed to restore the database to a backup run. This field will
     * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
     * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
     * block during resource creation/update will trigger the restore action after the resource is created/updated.
     * 
     */
    public Optional<Output<DatabaseInstanceRestoreBackupContextArgs>> restoreBackupContext() {
        return Optional.ofNullable(this.restoreBackupContext);
    }

    /**
     * Initial root password. Required for MS SQL Server.
     * 
     */
    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    /**
     * @return Initial root password. Required for MS SQL Server.
     * 
     */
    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    /**
     * The settings to use for the database. The
     * configuration is detailed below. Required if `clone` is not set.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<DatabaseInstanceSettingsArgs> settings;

    /**
     * @return The settings to use for the database. The
     * configuration is detailed below. Required if `clone` is not set.
     * 
     */
    public Optional<Output<DatabaseInstanceSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    private DatabaseInstanceArgs() {}

    private DatabaseInstanceArgs(DatabaseInstanceArgs $) {
        this.clone = $.clone;
        this.databaseVersion = $.databaseVersion;
        this.deletionProtection = $.deletionProtection;
        this.encryptionKeyName = $.encryptionKeyName;
        this.masterInstanceName = $.masterInstanceName;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.replicaConfiguration = $.replicaConfiguration;
        this.restoreBackupContext = $.restoreBackupContext;
        this.rootPassword = $.rootPassword;
        this.settings = $.settings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceArgs $;

        public Builder() {
            $ = new DatabaseInstanceArgs();
        }

        public Builder(DatabaseInstanceArgs defaults) {
            $ = new DatabaseInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clone The context needed to create this instance as a clone of another instance. When this field is set during
         * resource creation, this provider will attempt to clone another instance as indicated in the context. The
         * configuration is detailed below.
         * 
         * @return builder
         * 
         */
        public Builder clone_(@Nullable Output<DatabaseInstanceCloneArgs> clone) {
            $.clone = clone;
            return this;
        }

        /**
         * @param clone The context needed to create this instance as a clone of another instance. When this field is set during
         * resource creation, this provider will attempt to clone another instance as indicated in the context. The
         * configuration is detailed below.
         * 
         * @return builder
         * 
         */
        public Builder clone_(DatabaseInstanceCloneArgs clone) {
            return clone_(Output.of(clone));
        }

        /**
         * @param databaseVersion The MySQL, PostgreSQL or
         * SQL Server version to use. Supported values include `MYSQL_5_6`,
         * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
         * `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
         * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
         * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
         * `SQLSERVER_2019_WEB`.
         * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
         * includes an up-to-date reference of supported versions.
         * 
         * @return builder
         * 
         */
        public Builder databaseVersion(Output<String> databaseVersion) {
            $.databaseVersion = databaseVersion;
            return this;
        }

        /**
         * @param databaseVersion The MySQL, PostgreSQL or
         * SQL Server version to use. Supported values include `MYSQL_5_6`,
         * `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
         * `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `SQLSERVER_2017_STANDARD`,
         * `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
         * `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
         * `SQLSERVER_2019_WEB`.
         * [Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
         * includes an up-to-date reference of supported versions.
         * 
         * @return builder
         * 
         */
        public Builder databaseVersion(String databaseVersion) {
            return databaseVersion(Output.of(databaseVersion));
        }

        /**
         * @param deletionProtection Whether or not to allow he provider to destroy the instance. Unless this field is set to false
         * in state, a `destroy` or `update` command that deletes the instance will fail.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        /**
         * @param deletionProtection Whether or not to allow he provider to destroy the instance. Unless this field is set to false
         * in state, a `destroy` or `update` command that deletes the instance will fail.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param encryptionKeyName The full path to the encryption key used for the CMEK disk encryption.  Setting
         * up disk encryption currently requires manual steps outside of this provider.
         * The provided key must be in the same region as the SQL instance.  In order
         * to use this feature, a special kind of service account must be created and
         * granted permission on this key.  This step can currently only be done
         * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
         * That service account needs the `Cloud KMS &gt; Cloud KMS CryptoKey Encrypter/Decrypter` role on your
         * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeyName(@Nullable Output<String> encryptionKeyName) {
            $.encryptionKeyName = encryptionKeyName;
            return this;
        }

        /**
         * @param encryptionKeyName The full path to the encryption key used for the CMEK disk encryption.  Setting
         * up disk encryption currently requires manual steps outside of this provider.
         * The provided key must be in the same region as the SQL instance.  In order
         * to use this feature, a special kind of service account must be created and
         * granted permission on this key.  This step can currently only be done
         * manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
         * That service account needs the `Cloud KMS &gt; Cloud KMS CryptoKey Encrypter/Decrypter` role on your
         * key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeyName(String encryptionKeyName) {
            return encryptionKeyName(Output.of(encryptionKeyName));
        }

        /**
         * @param masterInstanceName The name of the existing instance that will
         * act as the master in the replication setup. Note, this requires the master to
         * have `binary_log_enabled` set, as well as existing backups.
         * 
         * @return builder
         * 
         */
        public Builder masterInstanceName(@Nullable Output<String> masterInstanceName) {
            $.masterInstanceName = masterInstanceName;
            return this;
        }

        /**
         * @param masterInstanceName The name of the existing instance that will
         * act as the master in the replication setup. Note, this requires the master to
         * have `binary_log_enabled` set, as well as existing backups.
         * 
         * @return builder
         * 
         */
        public Builder masterInstanceName(String masterInstanceName) {
            return masterInstanceName(Output.of(masterInstanceName));
        }

        /**
         * @param name A name for this whitelist entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for this whitelist entry.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The full project ID of the source instance.`
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The full project ID of the source instance.`
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The region the instance will sit in. If a region is not provided in the resource definition,
         * the provider region will be used instead.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region the instance will sit in. If a region is not provided in the resource definition,
         * the provider region will be used instead.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param replicaConfiguration The configuration for replication. The
         * configuration is detailed below. Valid only for MySQL instances.
         * 
         * @return builder
         * 
         */
        public Builder replicaConfiguration(@Nullable Output<DatabaseInstanceReplicaConfigurationArgs> replicaConfiguration) {
            $.replicaConfiguration = replicaConfiguration;
            return this;
        }

        /**
         * @param replicaConfiguration The configuration for replication. The
         * configuration is detailed below. Valid only for MySQL instances.
         * 
         * @return builder
         * 
         */
        public Builder replicaConfiguration(DatabaseInstanceReplicaConfigurationArgs replicaConfiguration) {
            return replicaConfiguration(Output.of(replicaConfiguration));
        }

        /**
         * @param restoreBackupContext The context needed to restore the database to a backup run. This field will
         * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
         * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
         * block during resource creation/update will trigger the restore action after the resource is created/updated.
         * 
         * @return builder
         * 
         */
        public Builder restoreBackupContext(@Nullable Output<DatabaseInstanceRestoreBackupContextArgs> restoreBackupContext) {
            $.restoreBackupContext = restoreBackupContext;
            return this;
        }

        /**
         * @param restoreBackupContext The context needed to restore the database to a backup run. This field will
         * cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
         * **NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
         * block during resource creation/update will trigger the restore action after the resource is created/updated.
         * 
         * @return builder
         * 
         */
        public Builder restoreBackupContext(DatabaseInstanceRestoreBackupContextArgs restoreBackupContext) {
            return restoreBackupContext(Output.of(restoreBackupContext));
        }

        /**
         * @param rootPassword Initial root password. Required for MS SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        /**
         * @param rootPassword Initial root password. Required for MS SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        /**
         * @param settings The settings to use for the database. The
         * configuration is detailed below. Required if `clone` is not set.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<DatabaseInstanceSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings The settings to use for the database. The
         * configuration is detailed below. Required if `clone` is not set.
         * 
         * @return builder
         * 
         */
        public Builder settings(DatabaseInstanceSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        public DatabaseInstanceArgs build() {
            $.databaseVersion = Objects.requireNonNull($.databaseVersion, "expected parameter 'databaseVersion' to be non-null");
            return $;
        }
    }

}
