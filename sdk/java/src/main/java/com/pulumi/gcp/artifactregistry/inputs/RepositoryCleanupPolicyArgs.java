// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyConditionArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyMostRecentVersionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryCleanupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryCleanupPolicyArgs Empty = new RepositoryCleanupPolicyArgs();

    /**
     * (Optional, Beta)
     * Policy action.
     * Possible values are: `DELETE`, `KEEP`.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return (Optional, Beta)
     * Policy action.
     * Possible values are: `DELETE`, `KEEP`.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * (Optional, Beta)
     * Policy condition for matching versions.
     * Structure is documented below.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<RepositoryCleanupPolicyConditionArgs> condition;

    /**
     * @return (Optional, Beta)
     * Policy condition for matching versions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RepositoryCleanupPolicyConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The identifier for this object. Format specified above.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * (Optional, Beta)
     * Policy condition for retaining a minimum number of versions. May only be
     * specified with a Keep action.
     * Structure is documented below.
     * 
     */
    @Import(name="mostRecentVersions")
    private @Nullable Output<RepositoryCleanupPolicyMostRecentVersionsArgs> mostRecentVersions;

    /**
     * @return (Optional, Beta)
     * Policy condition for retaining a minimum number of versions. May only be
     * specified with a Keep action.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RepositoryCleanupPolicyMostRecentVersionsArgs>> mostRecentVersions() {
        return Optional.ofNullable(this.mostRecentVersions);
    }

    private RepositoryCleanupPolicyArgs() {}

    private RepositoryCleanupPolicyArgs(RepositoryCleanupPolicyArgs $) {
        this.action = $.action;
        this.condition = $.condition;
        this.id = $.id;
        this.mostRecentVersions = $.mostRecentVersions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryCleanupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryCleanupPolicyArgs $;

        public Builder() {
            $ = new RepositoryCleanupPolicyArgs();
        }

        public Builder(RepositoryCleanupPolicyArgs defaults) {
            $ = new RepositoryCleanupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action (Optional, Beta)
         * Policy action.
         * Possible values are: `DELETE`, `KEEP`.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action (Optional, Beta)
         * Policy action.
         * Possible values are: `DELETE`, `KEEP`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param condition (Optional, Beta)
         * Policy condition for matching versions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<RepositoryCleanupPolicyConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition (Optional, Beta)
         * Policy condition for matching versions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(RepositoryCleanupPolicyConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param id The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param mostRecentVersions (Optional, Beta)
         * Policy condition for retaining a minimum number of versions. May only be
         * specified with a Keep action.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mostRecentVersions(@Nullable Output<RepositoryCleanupPolicyMostRecentVersionsArgs> mostRecentVersions) {
            $.mostRecentVersions = mostRecentVersions;
            return this;
        }

        /**
         * @param mostRecentVersions (Optional, Beta)
         * Policy condition for retaining a minimum number of versions. May only be
         * specified with a Keep action.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mostRecentVersions(RepositoryCleanupPolicyMostRecentVersionsArgs mostRecentVersions) {
            return mostRecentVersions(Output.of(mostRecentVersions));
        }

        public RepositoryCleanupPolicyArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("RepositoryCleanupPolicyArgs", "id");
            }
            return $;
        }
    }

}
