// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaPoolIssuancePolicyAllowedKeyTypeRsaArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaPoolIssuancePolicyAllowedKeyTypeRsaArgs Empty = new CaPoolIssuancePolicyAllowedKeyTypeRsaArgs();

    /**
     * The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
     * service will not enforce an explicit upper bound on RSA modulus sizes.
     * 
     */
    @Import(name="maxModulusSize")
    private @Nullable Output<String> maxModulusSize;

    /**
     * @return The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
     * service will not enforce an explicit upper bound on RSA modulus sizes.
     * 
     */
    public Optional<Output<String>> maxModulusSize() {
        return Optional.ofNullable(this.maxModulusSize);
    }

    /**
     * The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
     * service-level min RSA modulus size will continue to apply.
     * 
     */
    @Import(name="minModulusSize")
    private @Nullable Output<String> minModulusSize;

    /**
     * @return The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
     * service-level min RSA modulus size will continue to apply.
     * 
     */
    public Optional<Output<String>> minModulusSize() {
        return Optional.ofNullable(this.minModulusSize);
    }

    private CaPoolIssuancePolicyAllowedKeyTypeRsaArgs() {}

    private CaPoolIssuancePolicyAllowedKeyTypeRsaArgs(CaPoolIssuancePolicyAllowedKeyTypeRsaArgs $) {
        this.maxModulusSize = $.maxModulusSize;
        this.minModulusSize = $.minModulusSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaPoolIssuancePolicyAllowedKeyTypeRsaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaPoolIssuancePolicyAllowedKeyTypeRsaArgs $;

        public Builder() {
            $ = new CaPoolIssuancePolicyAllowedKeyTypeRsaArgs();
        }

        public Builder(CaPoolIssuancePolicyAllowedKeyTypeRsaArgs defaults) {
            $ = new CaPoolIssuancePolicyAllowedKeyTypeRsaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxModulusSize The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
         * service will not enforce an explicit upper bound on RSA modulus sizes.
         * 
         * @return builder
         * 
         */
        public Builder maxModulusSize(@Nullable Output<String> maxModulusSize) {
            $.maxModulusSize = maxModulusSize;
            return this;
        }

        /**
         * @param maxModulusSize The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
         * service will not enforce an explicit upper bound on RSA modulus sizes.
         * 
         * @return builder
         * 
         */
        public Builder maxModulusSize(String maxModulusSize) {
            return maxModulusSize(Output.of(maxModulusSize));
        }

        /**
         * @param minModulusSize The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
         * service-level min RSA modulus size will continue to apply.
         * 
         * @return builder
         * 
         */
        public Builder minModulusSize(@Nullable Output<String> minModulusSize) {
            $.minModulusSize = minModulusSize;
            return this;
        }

        /**
         * @param minModulusSize The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
         * service-level min RSA modulus size will continue to apply.
         * 
         * @return builder
         * 
         */
        public Builder minModulusSize(String minModulusSize) {
            return minModulusSize(Output.of(minModulusSize));
        }

        public CaPoolIssuancePolicyAllowedKeyTypeRsaArgs build() {
            return $;
        }
    }

}
