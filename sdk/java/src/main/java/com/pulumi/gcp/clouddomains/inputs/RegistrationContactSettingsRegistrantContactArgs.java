// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddomains.inputs.RegistrationContactSettingsRegistrantContactPostalAddressArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrationContactSettingsRegistrantContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrationContactSettingsRegistrantContactArgs Empty = new RegistrationContactSettingsRegistrantContactArgs();

    /**
     * Required. Email address of the contact.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Required. Email address of the contact.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Fax number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    @Import(name="faxNumber")
    private @Nullable Output<String> faxNumber;

    /**
     * @return Fax number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    public Optional<Output<String>> faxNumber() {
        return Optional.ofNullable(this.faxNumber);
    }

    /**
     * Required. Phone number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    @Import(name="phoneNumber", required=true)
    private Output<String> phoneNumber;

    /**
     * @return Required. Phone number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    public Output<String> phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Required. Postal address of the contact.
     * Structure is documented below.
     * 
     */
    @Import(name="postalAddress", required=true)
    private Output<RegistrationContactSettingsRegistrantContactPostalAddressArgs> postalAddress;

    /**
     * @return Required. Postal address of the contact.
     * Structure is documented below.
     * 
     */
    public Output<RegistrationContactSettingsRegistrantContactPostalAddressArgs> postalAddress() {
        return this.postalAddress;
    }

    private RegistrationContactSettingsRegistrantContactArgs() {}

    private RegistrationContactSettingsRegistrantContactArgs(RegistrationContactSettingsRegistrantContactArgs $) {
        this.email = $.email;
        this.faxNumber = $.faxNumber;
        this.phoneNumber = $.phoneNumber;
        this.postalAddress = $.postalAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationContactSettingsRegistrantContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationContactSettingsRegistrantContactArgs $;

        public Builder() {
            $ = new RegistrationContactSettingsRegistrantContactArgs();
        }

        public Builder(RegistrationContactSettingsRegistrantContactArgs defaults) {
            $ = new RegistrationContactSettingsRegistrantContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email Required. Email address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Required. Email address of the contact.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param faxNumber Fax number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
         * 
         * @return builder
         * 
         */
        public Builder faxNumber(@Nullable Output<String> faxNumber) {
            $.faxNumber = faxNumber;
            return this;
        }

        /**
         * @param faxNumber Fax number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
         * 
         * @return builder
         * 
         */
        public Builder faxNumber(String faxNumber) {
            return faxNumber(Output.of(faxNumber));
        }

        /**
         * @param phoneNumber Required. Phone number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * @param phoneNumber Required. Phone number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
         * 
         * @return builder
         * 
         */
        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        /**
         * @param postalAddress Required. Postal address of the contact.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postalAddress(Output<RegistrationContactSettingsRegistrantContactPostalAddressArgs> postalAddress) {
            $.postalAddress = postalAddress;
            return this;
        }

        /**
         * @param postalAddress Required. Postal address of the contact.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postalAddress(RegistrationContactSettingsRegistrantContactPostalAddressArgs postalAddress) {
            return postalAddress(Output.of(postalAddress));
        }

        public RegistrationContactSettingsRegistrantContactArgs build() {
            if ($.email == null) {
                throw new MissingRequiredPropertyException("RegistrationContactSettingsRegistrantContactArgs", "email");
            }
            if ($.phoneNumber == null) {
                throw new MissingRequiredPropertyException("RegistrationContactSettingsRegistrantContactArgs", "phoneNumber");
            }
            if ($.postalAddress == null) {
                throw new MissingRequiredPropertyException("RegistrationContactSettingsRegistrantContactArgs", "postalAddress");
            }
            return $;
        }
    }

}
