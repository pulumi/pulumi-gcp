// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.storage.outputs.GetBucketAutoclass;
import com.pulumi.gcp.storage.outputs.GetBucketCor;
import com.pulumi.gcp.storage.outputs.GetBucketCustomPlacementConfig;
import com.pulumi.gcp.storage.outputs.GetBucketEncryption;
import com.pulumi.gcp.storage.outputs.GetBucketHierarchicalNamespace;
import com.pulumi.gcp.storage.outputs.GetBucketIpFilter;
import com.pulumi.gcp.storage.outputs.GetBucketLifecycleRule;
import com.pulumi.gcp.storage.outputs.GetBucketLogging;
import com.pulumi.gcp.storage.outputs.GetBucketRetentionPolicy;
import com.pulumi.gcp.storage.outputs.GetBucketSoftDeletePolicy;
import com.pulumi.gcp.storage.outputs.GetBucketVersioning;
import com.pulumi.gcp.storage.outputs.GetBucketWebsite;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBucketResult {
    private List<GetBucketAutoclass> autoclasses;
    private List<GetBucketCor> cors;
    private List<GetBucketCustomPlacementConfig> customPlacementConfigs;
    private Boolean defaultEventBasedHold;
    private Map<String,String> effectiveLabels;
    private Boolean enableObjectRetention;
    private List<GetBucketEncryption> encryptions;
    private Boolean forceDestroy;
    private List<GetBucketHierarchicalNamespace> hierarchicalNamespaces;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetBucketIpFilter> ipFilters;
    private Map<String,String> labels;
    private List<GetBucketLifecycleRule> lifecycleRules;
    private String location;
    private List<GetBucketLogging> loggings;
    private String name;
    private @Nullable String project;
    private Integer projectNumber;
    private String publicAccessPrevention;
    private Map<String,String> pulumiLabels;
    private Boolean requesterPays;
    private List<GetBucketRetentionPolicy> retentionPolicies;
    private String rpo;
    private String selfLink;
    private List<GetBucketSoftDeletePolicy> softDeletePolicies;
    private String storageClass;
    private String timeCreated;
    private Boolean uniformBucketLevelAccess;
    private String updated;
    private String url;
    private List<GetBucketVersioning> versionings;
    private List<GetBucketWebsite> websites;

    private GetBucketResult() {}
    public List<GetBucketAutoclass> autoclasses() {
        return this.autoclasses;
    }
    public List<GetBucketCor> cors() {
        return this.cors;
    }
    public List<GetBucketCustomPlacementConfig> customPlacementConfigs() {
        return this.customPlacementConfigs;
    }
    public Boolean defaultEventBasedHold() {
        return this.defaultEventBasedHold;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public Boolean enableObjectRetention() {
        return this.enableObjectRetention;
    }
    public List<GetBucketEncryption> encryptions() {
        return this.encryptions;
    }
    public Boolean forceDestroy() {
        return this.forceDestroy;
    }
    public List<GetBucketHierarchicalNamespace> hierarchicalNamespaces() {
        return this.hierarchicalNamespaces;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetBucketIpFilter> ipFilters() {
        return this.ipFilters;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public List<GetBucketLifecycleRule> lifecycleRules() {
        return this.lifecycleRules;
    }
    public String location() {
        return this.location;
    }
    public List<GetBucketLogging> loggings() {
        return this.loggings;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Integer projectNumber() {
        return this.projectNumber;
    }
    public String publicAccessPrevention() {
        return this.publicAccessPrevention;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Boolean requesterPays() {
        return this.requesterPays;
    }
    public List<GetBucketRetentionPolicy> retentionPolicies() {
        return this.retentionPolicies;
    }
    public String rpo() {
        return this.rpo;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<GetBucketSoftDeletePolicy> softDeletePolicies() {
        return this.softDeletePolicies;
    }
    public String storageClass() {
        return this.storageClass;
    }
    public String timeCreated() {
        return this.timeCreated;
    }
    public Boolean uniformBucketLevelAccess() {
        return this.uniformBucketLevelAccess;
    }
    public String updated() {
        return this.updated;
    }
    public String url() {
        return this.url;
    }
    public List<GetBucketVersioning> versionings() {
        return this.versionings;
    }
    public List<GetBucketWebsite> websites() {
        return this.websites;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBucketAutoclass> autoclasses;
        private List<GetBucketCor> cors;
        private List<GetBucketCustomPlacementConfig> customPlacementConfigs;
        private Boolean defaultEventBasedHold;
        private Map<String,String> effectiveLabels;
        private Boolean enableObjectRetention;
        private List<GetBucketEncryption> encryptions;
        private Boolean forceDestroy;
        private List<GetBucketHierarchicalNamespace> hierarchicalNamespaces;
        private String id;
        private List<GetBucketIpFilter> ipFilters;
        private Map<String,String> labels;
        private List<GetBucketLifecycleRule> lifecycleRules;
        private String location;
        private List<GetBucketLogging> loggings;
        private String name;
        private @Nullable String project;
        private Integer projectNumber;
        private String publicAccessPrevention;
        private Map<String,String> pulumiLabels;
        private Boolean requesterPays;
        private List<GetBucketRetentionPolicy> retentionPolicies;
        private String rpo;
        private String selfLink;
        private List<GetBucketSoftDeletePolicy> softDeletePolicies;
        private String storageClass;
        private String timeCreated;
        private Boolean uniformBucketLevelAccess;
        private String updated;
        private String url;
        private List<GetBucketVersioning> versionings;
        private List<GetBucketWebsite> websites;
        public Builder() {}
        public Builder(GetBucketResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoclasses = defaults.autoclasses;
    	      this.cors = defaults.cors;
    	      this.customPlacementConfigs = defaults.customPlacementConfigs;
    	      this.defaultEventBasedHold = defaults.defaultEventBasedHold;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.enableObjectRetention = defaults.enableObjectRetention;
    	      this.encryptions = defaults.encryptions;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.hierarchicalNamespaces = defaults.hierarchicalNamespaces;
    	      this.id = defaults.id;
    	      this.ipFilters = defaults.ipFilters;
    	      this.labels = defaults.labels;
    	      this.lifecycleRules = defaults.lifecycleRules;
    	      this.location = defaults.location;
    	      this.loggings = defaults.loggings;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.projectNumber = defaults.projectNumber;
    	      this.publicAccessPrevention = defaults.publicAccessPrevention;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.requesterPays = defaults.requesterPays;
    	      this.retentionPolicies = defaults.retentionPolicies;
    	      this.rpo = defaults.rpo;
    	      this.selfLink = defaults.selfLink;
    	      this.softDeletePolicies = defaults.softDeletePolicies;
    	      this.storageClass = defaults.storageClass;
    	      this.timeCreated = defaults.timeCreated;
    	      this.uniformBucketLevelAccess = defaults.uniformBucketLevelAccess;
    	      this.updated = defaults.updated;
    	      this.url = defaults.url;
    	      this.versionings = defaults.versionings;
    	      this.websites = defaults.websites;
        }

        @CustomType.Setter
        public Builder autoclasses(List<GetBucketAutoclass> autoclasses) {
            if (autoclasses == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "autoclasses");
            }
            this.autoclasses = autoclasses;
            return this;
        }
        public Builder autoclasses(GetBucketAutoclass... autoclasses) {
            return autoclasses(List.of(autoclasses));
        }
        @CustomType.Setter
        public Builder cors(List<GetBucketCor> cors) {
            if (cors == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "cors");
            }
            this.cors = cors;
            return this;
        }
        public Builder cors(GetBucketCor... cors) {
            return cors(List.of(cors));
        }
        @CustomType.Setter
        public Builder customPlacementConfigs(List<GetBucketCustomPlacementConfig> customPlacementConfigs) {
            if (customPlacementConfigs == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "customPlacementConfigs");
            }
            this.customPlacementConfigs = customPlacementConfigs;
            return this;
        }
        public Builder customPlacementConfigs(GetBucketCustomPlacementConfig... customPlacementConfigs) {
            return customPlacementConfigs(List.of(customPlacementConfigs));
        }
        @CustomType.Setter
        public Builder defaultEventBasedHold(Boolean defaultEventBasedHold) {
            if (defaultEventBasedHold == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "defaultEventBasedHold");
            }
            this.defaultEventBasedHold = defaultEventBasedHold;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder enableObjectRetention(Boolean enableObjectRetention) {
            if (enableObjectRetention == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "enableObjectRetention");
            }
            this.enableObjectRetention = enableObjectRetention;
            return this;
        }
        @CustomType.Setter
        public Builder encryptions(List<GetBucketEncryption> encryptions) {
            if (encryptions == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "encryptions");
            }
            this.encryptions = encryptions;
            return this;
        }
        public Builder encryptions(GetBucketEncryption... encryptions) {
            return encryptions(List.of(encryptions));
        }
        @CustomType.Setter
        public Builder forceDestroy(Boolean forceDestroy) {
            if (forceDestroy == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "forceDestroy");
            }
            this.forceDestroy = forceDestroy;
            return this;
        }
        @CustomType.Setter
        public Builder hierarchicalNamespaces(List<GetBucketHierarchicalNamespace> hierarchicalNamespaces) {
            if (hierarchicalNamespaces == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "hierarchicalNamespaces");
            }
            this.hierarchicalNamespaces = hierarchicalNamespaces;
            return this;
        }
        public Builder hierarchicalNamespaces(GetBucketHierarchicalNamespace... hierarchicalNamespaces) {
            return hierarchicalNamespaces(List.of(hierarchicalNamespaces));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(List<GetBucketIpFilter> ipFilters) {
            if (ipFilters == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "ipFilters");
            }
            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(GetBucketIpFilter... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleRules(List<GetBucketLifecycleRule> lifecycleRules) {
            if (lifecycleRules == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "lifecycleRules");
            }
            this.lifecycleRules = lifecycleRules;
            return this;
        }
        public Builder lifecycleRules(GetBucketLifecycleRule... lifecycleRules) {
            return lifecycleRules(List.of(lifecycleRules));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder loggings(List<GetBucketLogging> loggings) {
            if (loggings == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "loggings");
            }
            this.loggings = loggings;
            return this;
        }
        public Builder loggings(GetBucketLogging... loggings) {
            return loggings(List.of(loggings));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder projectNumber(Integer projectNumber) {
            if (projectNumber == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "projectNumber");
            }
            this.projectNumber = projectNumber;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccessPrevention(String publicAccessPrevention) {
            if (publicAccessPrevention == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "publicAccessPrevention");
            }
            this.publicAccessPrevention = publicAccessPrevention;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder requesterPays(Boolean requesterPays) {
            if (requesterPays == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "requesterPays");
            }
            this.requesterPays = requesterPays;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPolicies(List<GetBucketRetentionPolicy> retentionPolicies) {
            if (retentionPolicies == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "retentionPolicies");
            }
            this.retentionPolicies = retentionPolicies;
            return this;
        }
        public Builder retentionPolicies(GetBucketRetentionPolicy... retentionPolicies) {
            return retentionPolicies(List.of(retentionPolicies));
        }
        @CustomType.Setter
        public Builder rpo(String rpo) {
            if (rpo == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "rpo");
            }
            this.rpo = rpo;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder softDeletePolicies(List<GetBucketSoftDeletePolicy> softDeletePolicies) {
            if (softDeletePolicies == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "softDeletePolicies");
            }
            this.softDeletePolicies = softDeletePolicies;
            return this;
        }
        public Builder softDeletePolicies(GetBucketSoftDeletePolicy... softDeletePolicies) {
            return softDeletePolicies(List.of(softDeletePolicies));
        }
        @CustomType.Setter
        public Builder storageClass(String storageClass) {
            if (storageClass == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "storageClass");
            }
            this.storageClass = storageClass;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder uniformBucketLevelAccess(Boolean uniformBucketLevelAccess) {
            if (uniformBucketLevelAccess == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "uniformBucketLevelAccess");
            }
            this.uniformBucketLevelAccess = uniformBucketLevelAccess;
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "updated");
            }
            this.updated = updated;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder versionings(List<GetBucketVersioning> versionings) {
            if (versionings == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "versionings");
            }
            this.versionings = versionings;
            return this;
        }
        public Builder versionings(GetBucketVersioning... versionings) {
            return versionings(List.of(versionings));
        }
        @CustomType.Setter
        public Builder websites(List<GetBucketWebsite> websites) {
            if (websites == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "websites");
            }
            this.websites = websites;
            return this;
        }
        public Builder websites(GetBucketWebsite... websites) {
            return websites(List.of(websites));
        }
        public GetBucketResult build() {
            final var _resultValue = new GetBucketResult();
            _resultValue.autoclasses = autoclasses;
            _resultValue.cors = cors;
            _resultValue.customPlacementConfigs = customPlacementConfigs;
            _resultValue.defaultEventBasedHold = defaultEventBasedHold;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.enableObjectRetention = enableObjectRetention;
            _resultValue.encryptions = encryptions;
            _resultValue.forceDestroy = forceDestroy;
            _resultValue.hierarchicalNamespaces = hierarchicalNamespaces;
            _resultValue.id = id;
            _resultValue.ipFilters = ipFilters;
            _resultValue.labels = labels;
            _resultValue.lifecycleRules = lifecycleRules;
            _resultValue.location = location;
            _resultValue.loggings = loggings;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.projectNumber = projectNumber;
            _resultValue.publicAccessPrevention = publicAccessPrevention;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.requesterPays = requesterPays;
            _resultValue.retentionPolicies = retentionPolicies;
            _resultValue.rpo = rpo;
            _resultValue.selfLink = selfLink;
            _resultValue.softDeletePolicies = softDeletePolicies;
            _resultValue.storageClass = storageClass;
            _resultValue.timeCreated = timeCreated;
            _resultValue.uniformBucketLevelAccess = uniformBucketLevelAccess;
            _resultValue.updated = updated;
            _resultValue.url = url;
            _resultValue.versionings = versionings;
            _resultValue.websites = websites;
            return _resultValue;
        }
    }
}
