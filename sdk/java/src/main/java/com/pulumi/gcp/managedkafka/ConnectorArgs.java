// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.managedkafka.inputs.ConnectorTaskRestartPolicyArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorArgs Empty = new ConnectorArgs();

    /**
     * Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
     * 
     */
    @Import(name="configs")
    private @Nullable Output<Map<String,String>> configs;

    /**
     * @return Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
     * 
     */
    public Optional<Output<Map<String,String>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * The connect cluster name.
     * 
     */
    @Import(name="connectCluster", required=true)
    private Output<String> connectCluster;

    /**
     * @return The connect cluster name.
     * 
     */
    public Output<String> connectCluster() {
        return this.connectCluster;
    }

    /**
     * The ID to use for the connector, which will become the final component of the connector&#39;s name. This value is structured like: `my-connector-id`.
     * 
     */
    @Import(name="connectorId", required=true)
    private Output<String> connectorId;

    /**
     * @return The ID to use for the connector, which will become the final component of the connector&#39;s name. This value is structured like: `my-connector-id`.
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }

    /**
     * ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won&#39;t be restarted.
     * Structure is documented below.
     * 
     */
    @Import(name="taskRestartPolicy")
    private @Nullable Output<ConnectorTaskRestartPolicyArgs> taskRestartPolicy;

    /**
     * @return A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won&#39;t be restarted.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectorTaskRestartPolicyArgs>> taskRestartPolicy() {
        return Optional.ofNullable(this.taskRestartPolicy);
    }

    private ConnectorArgs() {}

    private ConnectorArgs(ConnectorArgs $) {
        this.configs = $.configs;
        this.connectCluster = $.connectCluster;
        this.connectorId = $.connectorId;
        this.location = $.location;
        this.project = $.project;
        this.taskRestartPolicy = $.taskRestartPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorArgs $;

        public Builder() {
            $ = new ConnectorArgs();
        }

        public Builder(ConnectorArgs defaults) {
            $ = new ConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configs Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
         * 
         * @return builder
         * 
         */
        public Builder configs(@Nullable Output<Map<String,String>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Connector config as keys/values. The keys of the map are connector property names, for example: `connector.class`, `tasks.max`, `key.converter`.
         * 
         * @return builder
         * 
         */
        public Builder configs(Map<String,String> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param connectCluster The connect cluster name.
         * 
         * @return builder
         * 
         */
        public Builder connectCluster(Output<String> connectCluster) {
            $.connectCluster = connectCluster;
            return this;
        }

        /**
         * @param connectCluster The connect cluster name.
         * 
         * @return builder
         * 
         */
        public Builder connectCluster(String connectCluster) {
            return connectCluster(Output.of(connectCluster));
        }

        /**
         * @param connectorId The ID to use for the connector, which will become the final component of the connector&#39;s name. This value is structured like: `my-connector-id`.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId The ID to use for the connector, which will become the final component of the connector&#39;s name. This value is structured like: `my-connector-id`.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param location ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location ID of the location of the Kafka Connect resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param taskRestartPolicy A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won&#39;t be restarted.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder taskRestartPolicy(@Nullable Output<ConnectorTaskRestartPolicyArgs> taskRestartPolicy) {
            $.taskRestartPolicy = taskRestartPolicy;
            return this;
        }

        /**
         * @param taskRestartPolicy A policy that specifies how to restart the failed connectors/tasks in a Cluster resource. If not set, the failed connectors/tasks won&#39;t be restarted.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder taskRestartPolicy(ConnectorTaskRestartPolicyArgs taskRestartPolicy) {
            return taskRestartPolicy(Output.of(taskRestartPolicy));
        }

        public ConnectorArgs build() {
            if ($.connectCluster == null) {
                throw new MissingRequiredPropertyException("ConnectorArgs", "connectCluster");
            }
            if ($.connectorId == null) {
                throw new MissingRequiredPropertyException("ConnectorArgs", "connectorId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ConnectorArgs", "location");
            }
            return $;
        }
    }

}
