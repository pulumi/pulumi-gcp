// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gkehub.outputs.GetMembershipAuthority;
import com.pulumi.gcp.gkehub.outputs.GetMembershipEndpoint;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMembershipResult {
    private List<GetMembershipAuthority> authorities;
    private Map<String,String> effectiveLabels;
    private List<GetMembershipEndpoint> endpoints;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String location;
    private String membershipId;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;

    private GetMembershipResult() {}
    public List<GetMembershipAuthority> authorities() {
        return this.authorities;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public List<GetMembershipEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public String membershipId() {
        return this.membershipId;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMembershipResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMembershipAuthority> authorities;
        private Map<String,String> effectiveLabels;
        private List<GetMembershipEndpoint> endpoints;
        private String id;
        private Map<String,String> labels;
        private String location;
        private String membershipId;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        public Builder() {}
        public Builder(GetMembershipResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorities = defaults.authorities;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.endpoints = defaults.endpoints;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.membershipId = defaults.membershipId;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
        }

        @CustomType.Setter
        public Builder authorities(List<GetMembershipAuthority> authorities) {
            if (authorities == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "authorities");
            }
            this.authorities = authorities;
            return this;
        }
        public Builder authorities(GetMembershipAuthority... authorities) {
            return authorities(List.of(authorities));
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetMembershipEndpoint> endpoints) {
            if (endpoints == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "endpoints");
            }
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetMembershipEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder membershipId(String membershipId) {
            if (membershipId == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "membershipId");
            }
            this.membershipId = membershipId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetMembershipResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        public GetMembershipResult build() {
            final var _resultValue = new GetMembershipResult();
            _resultValue.authorities = authorities;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.endpoints = endpoints;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.membershipId = membershipId;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            return _resultValue;
        }
    }
}
