// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAttachedVersionsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String location;
    private String project;
    /**
     * @return A list of versions available for use with this project and location.
     * 
     */
    private List<String> validVersions;

    private GetAttachedVersionsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    public String project() {
        return this.project;
    }
    /**
     * @return A list of versions available for use with this project and location.
     * 
     */
    public List<String> validVersions() {
        return this.validVersions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAttachedVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String location;
        private String project;
        private List<String> validVersions;
        public Builder() {}
        public Builder(GetAttachedVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.validVersions = defaults.validVersions;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder validVersions(List<String> validVersions) {
            this.validVersions = Objects.requireNonNull(validVersions);
            return this;
        }
        public Builder validVersions(String... validVersions) {
            return validVersions(List.of(validVersions));
        }
        public GetAttachedVersionsResult build() {
            final var o = new GetAttachedVersionsResult();
            o.id = id;
            o.location = location;
            o.project = project;
            o.validVersions = validVersions;
            return o;
        }
    }
}
