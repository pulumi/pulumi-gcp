// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.BackendServiceConsistentHashHttpCookieArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendServiceConsistentHashArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendServiceConsistentHashArgs Empty = new BackendServiceConsistentHashArgs();

    /**
     * Hash is based on HTTP Cookie. This field describes a HTTP cookie
     * that will be used as the hash key for the consistent hash load
     * balancer. If the cookie is not present, it will be generated.
     * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
     * Structure is documented below.
     * 
     */
    @Import(name="httpCookie")
    private @Nullable Output<BackendServiceConsistentHashHttpCookieArgs> httpCookie;

    /**
     * @return Hash is based on HTTP Cookie. This field describes a HTTP cookie
     * that will be used as the hash key for the consistent hash load
     * balancer. If the cookie is not present, it will be generated.
     * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceConsistentHashHttpCookieArgs>> httpCookie() {
        return Optional.ofNullable(this.httpCookie);
    }

    /**
     * The hash based on the value of the specified header field.
     * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    @Import(name="httpHeaderName")
    private @Nullable Output<String> httpHeaderName;

    /**
     * @return The hash based on the value of the specified header field.
     * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    public Optional<Output<String>> httpHeaderName() {
        return Optional.ofNullable(this.httpHeaderName);
    }

    /**
     * The minimum number of virtual nodes to use for the hash ring.
     * Larger ring sizes result in more granular load
     * distributions. If the number of hosts in the load balancing pool
     * is larger than the ring size, each host will be assigned a single
     * virtual node.
     * Defaults to 1024.
     * 
     */
    @Import(name="minimumRingSize")
    private @Nullable Output<Integer> minimumRingSize;

    /**
     * @return The minimum number of virtual nodes to use for the hash ring.
     * Larger ring sizes result in more granular load
     * distributions. If the number of hosts in the load balancing pool
     * is larger than the ring size, each host will be assigned a single
     * virtual node.
     * Defaults to 1024.
     * 
     */
    public Optional<Output<Integer>> minimumRingSize() {
        return Optional.ofNullable(this.minimumRingSize);
    }

    private BackendServiceConsistentHashArgs() {}

    private BackendServiceConsistentHashArgs(BackendServiceConsistentHashArgs $) {
        this.httpCookie = $.httpCookie;
        this.httpHeaderName = $.httpHeaderName;
        this.minimumRingSize = $.minimumRingSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendServiceConsistentHashArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendServiceConsistentHashArgs $;

        public Builder() {
            $ = new BackendServiceConsistentHashArgs();
        }

        public Builder(BackendServiceConsistentHashArgs defaults) {
            $ = new BackendServiceConsistentHashArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpCookie Hash is based on HTTP Cookie. This field describes a HTTP cookie
         * that will be used as the hash key for the consistent hash load
         * balancer. If the cookie is not present, it will be generated.
         * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpCookie(@Nullable Output<BackendServiceConsistentHashHttpCookieArgs> httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        /**
         * @param httpCookie Hash is based on HTTP Cookie. This field describes a HTTP cookie
         * that will be used as the hash key for the consistent hash load
         * balancer. If the cookie is not present, it will be generated.
         * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpCookie(BackendServiceConsistentHashHttpCookieArgs httpCookie) {
            return httpCookie(Output.of(httpCookie));
        }

        /**
         * @param httpHeaderName The hash based on the value of the specified header field.
         * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaderName(@Nullable Output<String> httpHeaderName) {
            $.httpHeaderName = httpHeaderName;
            return this;
        }

        /**
         * @param httpHeaderName The hash based on the value of the specified header field.
         * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
         * 
         * @return builder
         * 
         */
        public Builder httpHeaderName(String httpHeaderName) {
            return httpHeaderName(Output.of(httpHeaderName));
        }

        /**
         * @param minimumRingSize The minimum number of virtual nodes to use for the hash ring.
         * Larger ring sizes result in more granular load
         * distributions. If the number of hosts in the load balancing pool
         * is larger than the ring size, each host will be assigned a single
         * virtual node.
         * Defaults to 1024.
         * 
         * @return builder
         * 
         */
        public Builder minimumRingSize(@Nullable Output<Integer> minimumRingSize) {
            $.minimumRingSize = minimumRingSize;
            return this;
        }

        /**
         * @param minimumRingSize The minimum number of virtual nodes to use for the hash ring.
         * Larger ring sizes result in more granular load
         * distributions. If the number of hosts in the load balancing pool
         * is larger than the ring size, each host will be assigned a single
         * virtual node.
         * Defaults to 1024.
         * 
         * @return builder
         * 
         */
        public Builder minimumRingSize(Integer minimumRingSize) {
            return minimumRingSize(Output.of(minimumRingSize));
        }

        public BackendServiceConsistentHashArgs build() {
            return $;
        }
    }

}
