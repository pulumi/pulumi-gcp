// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionBitbucketDataCenterConfigAuthorizerCredential;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionBitbucketDataCenterConfigReadAuthorizerCredential;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionBitbucketDataCenterConfigServiceDirectoryConfig;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionBitbucketDataCenterConfig {
    /**
     * @return Required. A http access token with the `REPO_ADMIN` scope access.
     * Structure is documented below.
     * 
     */
    private ConnectionBitbucketDataCenterConfigAuthorizerCredential authorizerCredential;
    /**
     * @return The URI of the Bitbucket Data Center host this connection is for.
     * 
     */
    private String hostUri;
    /**
     * @return Required. A http access token with the `REPO_READ` access.
     * Structure is documented below.
     * 
     */
    private ConnectionBitbucketDataCenterConfigReadAuthorizerCredential readAuthorizerCredential;
    /**
     * @return (Output)
     * Output only. Version of the Bitbucket Data Center running on the `hostUri`.
     * 
     */
    private @Nullable String serverVersion;
    /**
     * @return Configuration for using Service Directory to privately connect to a Bitbucket Data Center. This should only be set if the Bitbucket Data Center is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the Bitbucket Data Center will be made over the public internet.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionBitbucketDataCenterConfigServiceDirectoryConfig serviceDirectoryConfig;
    /**
     * @return SSL certificate to use for requests to the Bitbucket Data Center.
     * 
     */
    private @Nullable String sslCa;
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook events, formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    private String webhookSecretSecretVersion;

    private ConnectionBitbucketDataCenterConfig() {}
    /**
     * @return Required. A http access token with the `REPO_ADMIN` scope access.
     * Structure is documented below.
     * 
     */
    public ConnectionBitbucketDataCenterConfigAuthorizerCredential authorizerCredential() {
        return this.authorizerCredential;
    }
    /**
     * @return The URI of the Bitbucket Data Center host this connection is for.
     * 
     */
    public String hostUri() {
        return this.hostUri;
    }
    /**
     * @return Required. A http access token with the `REPO_READ` access.
     * Structure is documented below.
     * 
     */
    public ConnectionBitbucketDataCenterConfigReadAuthorizerCredential readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }
    /**
     * @return (Output)
     * Output only. Version of the Bitbucket Data Center running on the `hostUri`.
     * 
     */
    public Optional<String> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }
    /**
     * @return Configuration for using Service Directory to privately connect to a Bitbucket Data Center. This should only be set if the Bitbucket Data Center is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the Bitbucket Data Center will be made over the public internet.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionBitbucketDataCenterConfigServiceDirectoryConfig> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }
    /**
     * @return SSL certificate to use for requests to the Bitbucket Data Center.
     * 
     */
    public Optional<String> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook events, formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    public String webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionBitbucketDataCenterConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ConnectionBitbucketDataCenterConfigAuthorizerCredential authorizerCredential;
        private String hostUri;
        private ConnectionBitbucketDataCenterConfigReadAuthorizerCredential readAuthorizerCredential;
        private @Nullable String serverVersion;
        private @Nullable ConnectionBitbucketDataCenterConfigServiceDirectoryConfig serviceDirectoryConfig;
        private @Nullable String sslCa;
        private String webhookSecretSecretVersion;
        public Builder() {}
        public Builder(ConnectionBitbucketDataCenterConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizerCredential = defaults.authorizerCredential;
    	      this.hostUri = defaults.hostUri;
    	      this.readAuthorizerCredential = defaults.readAuthorizerCredential;
    	      this.serverVersion = defaults.serverVersion;
    	      this.serviceDirectoryConfig = defaults.serviceDirectoryConfig;
    	      this.sslCa = defaults.sslCa;
    	      this.webhookSecretSecretVersion = defaults.webhookSecretSecretVersion;
        }

        @CustomType.Setter
        public Builder authorizerCredential(ConnectionBitbucketDataCenterConfigAuthorizerCredential authorizerCredential) {
            if (authorizerCredential == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfig", "authorizerCredential");
            }
            this.authorizerCredential = authorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder hostUri(String hostUri) {
            if (hostUri == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfig", "hostUri");
            }
            this.hostUri = hostUri;
            return this;
        }
        @CustomType.Setter
        public Builder readAuthorizerCredential(ConnectionBitbucketDataCenterConfigReadAuthorizerCredential readAuthorizerCredential) {
            if (readAuthorizerCredential == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfig", "readAuthorizerCredential");
            }
            this.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder serverVersion(@Nullable String serverVersion) {

            this.serverVersion = serverVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDirectoryConfig(@Nullable ConnectionBitbucketDataCenterConfigServiceDirectoryConfig serviceDirectoryConfig) {

            this.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sslCa(@Nullable String sslCa) {

            this.sslCa = sslCa;
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            if (webhookSecretSecretVersion == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfig", "webhookSecretSecretVersion");
            }
            this.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }
        public ConnectionBitbucketDataCenterConfig build() {
            final var _resultValue = new ConnectionBitbucketDataCenterConfig();
            _resultValue.authorizerCredential = authorizerCredential;
            _resultValue.hostUri = hostUri;
            _resultValue.readAuthorizerCredential = readAuthorizerCredential;
            _resultValue.serverVersion = serverVersion;
            _resultValue.serviceDirectoryConfig = serviceDirectoryConfig;
            _resultValue.sslCa = sslCa;
            _resultValue.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return _resultValue;
        }
    }
}
