// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.biglake.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogState extends com.pulumi.resources.ResourceArgs {

    public static final CatalogState Empty = new CatalogState();

    /**
     * Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
     * &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
     * digits.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
     * &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
     * digits.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Output only. The deletion time of the catalog. Only set after the catalog
     * is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    @Import(name="deleteTime")
    private @Nullable Output<String> deleteTime;

    /**
     * @return Output only. The deletion time of the catalog. Only set after the catalog
     * is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
     * resolution and up to nine fractional digits.
     * 
     */
    public Optional<Output<String>> deleteTime() {
        return Optional.ofNullable(this.deleteTime);
    }

    /**
     * Output only. The time when this catalog is considered expired. Only set
     * after the catalog is deleted. Only set after the catalog is deleted.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
     * up to nine fractional digits.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return Output only. The time when this catalog is considered expired. Only set
     * after the catalog is deleted. Only set after the catalog is deleted.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
     * up to nine fractional digits.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * The geographic location where the Catalog should reside.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the Catalog should reside.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the Catalog. Format:
     * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Catalog. Format:
     * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. The last modification time of the catalog. A timestamp in
     * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The last modification time of the catalog. A timestamp in
     * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private CatalogState() {}

    private CatalogState(CatalogState $) {
        this.createTime = $.createTime;
        this.deleteTime = $.deleteTime;
        this.expireTime = $.expireTime;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogState $;

        public Builder() {
            $ = new CatalogState();
        }

        public Builder(CatalogState defaults) {
            $ = new CatalogState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
         * &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
         * digits.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The creation time of the catalog. A timestamp in RFC3339 UTC
         * &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
         * digits.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deleteTime Output only. The deletion time of the catalog. Only set after the catalog
         * is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
         * resolution and up to nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(@Nullable Output<String> deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        /**
         * @param deleteTime Output only. The deletion time of the catalog. Only set after the catalog
         * is deleted. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond
         * resolution and up to nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(String deleteTime) {
            return deleteTime(Output.of(deleteTime));
        }

        /**
         * @param expireTime Output only. The time when this catalog is considered expired. Only set
         * after the catalog is deleted. Only set after the catalog is deleted.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
         * up to nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime Output only. The time when this catalog is considered expired. Only set
         * after the catalog is deleted. Only set after the catalog is deleted.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
         * up to nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param location The geographic location where the Catalog should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the Catalog should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the Catalog. Format:
         * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Catalog. Format:
         * projects/{project_id_or_number}/locations/{locationId}/catalogs/{catalogId}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param updateTime Output only. The last modification time of the catalog. A timestamp in
         * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
         * fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The last modification time of the catalog. A timestamp in
         * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
         * fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public CatalogState build() {
            return $;
        }
    }

}
