// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BatchRuntimeInfoCurrentUsageArgs extends com.pulumi.resources.ResourceArgs {

    public static final BatchRuntimeInfoCurrentUsageArgs Empty = new BatchRuntimeInfoCurrentUsageArgs();

    /**
     * (Output)
     * Accelerator type being used, if any.
     * 
     */
    @Import(name="acceleratorType")
    private @Nullable Output<String> acceleratorType;

    /**
     * @return (Output)
     * Accelerator type being used, if any.
     * 
     */
    public Optional<Output<String>> acceleratorType() {
        return Optional.ofNullable(this.acceleratorType);
    }

    /**
     * (Output)
     * Milli (one-thousandth) accelerator..
     * 
     */
    @Import(name="milliAccelerator")
    private @Nullable Output<String> milliAccelerator;

    /**
     * @return (Output)
     * Milli (one-thousandth) accelerator..
     * 
     */
    public Optional<Output<String>> milliAccelerator() {
        return Optional.ofNullable(this.milliAccelerator);
    }

    /**
     * (Output)
     * Milli (one-thousandth) Dataproc Compute Units (DCUs).
     * 
     */
    @Import(name="milliDcu")
    private @Nullable Output<String> milliDcu;

    /**
     * @return (Output)
     * Milli (one-thousandth) Dataproc Compute Units (DCUs).
     * 
     */
    public Optional<Output<String>> milliDcu() {
        return Optional.ofNullable(this.milliDcu);
    }

    /**
     * (Output)
     * Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier.
     * 
     */
    @Import(name="milliDcuPremium")
    private @Nullable Output<String> milliDcuPremium;

    /**
     * @return (Output)
     * Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier.
     * 
     */
    public Optional<Output<String>> milliDcuPremium() {
        return Optional.ofNullable(this.milliDcuPremium);
    }

    /**
     * (Output)
     * Shuffle Storage in gigabytes (GB).
     * 
     */
    @Import(name="shuffleStorageGb")
    private @Nullable Output<String> shuffleStorageGb;

    /**
     * @return (Output)
     * Shuffle Storage in gigabytes (GB).
     * 
     */
    public Optional<Output<String>> shuffleStorageGb() {
        return Optional.ofNullable(this.shuffleStorageGb);
    }

    /**
     * (Output)
     * Shuffle Storage in gigabytes (GB) charged at premium tier.
     * 
     */
    @Import(name="shuffleStorageGbPremium")
    private @Nullable Output<String> shuffleStorageGbPremium;

    /**
     * @return (Output)
     * Shuffle Storage in gigabytes (GB) charged at premium tier.
     * 
     */
    public Optional<Output<String>> shuffleStorageGbPremium() {
        return Optional.ofNullable(this.shuffleStorageGbPremium);
    }

    /**
     * (Output)
     * The timestamp of the usage snapshot.
     * 
     */
    @Import(name="snapshotTime")
    private @Nullable Output<String> snapshotTime;

    /**
     * @return (Output)
     * The timestamp of the usage snapshot.
     * 
     */
    public Optional<Output<String>> snapshotTime() {
        return Optional.ofNullable(this.snapshotTime);
    }

    private BatchRuntimeInfoCurrentUsageArgs() {}

    private BatchRuntimeInfoCurrentUsageArgs(BatchRuntimeInfoCurrentUsageArgs $) {
        this.acceleratorType = $.acceleratorType;
        this.milliAccelerator = $.milliAccelerator;
        this.milliDcu = $.milliDcu;
        this.milliDcuPremium = $.milliDcuPremium;
        this.shuffleStorageGb = $.shuffleStorageGb;
        this.shuffleStorageGbPremium = $.shuffleStorageGbPremium;
        this.snapshotTime = $.snapshotTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchRuntimeInfoCurrentUsageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchRuntimeInfoCurrentUsageArgs $;

        public Builder() {
            $ = new BatchRuntimeInfoCurrentUsageArgs();
        }

        public Builder(BatchRuntimeInfoCurrentUsageArgs defaults) {
            $ = new BatchRuntimeInfoCurrentUsageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorType (Output)
         * Accelerator type being used, if any.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(@Nullable Output<String> acceleratorType) {
            $.acceleratorType = acceleratorType;
            return this;
        }

        /**
         * @param acceleratorType (Output)
         * Accelerator type being used, if any.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(String acceleratorType) {
            return acceleratorType(Output.of(acceleratorType));
        }

        /**
         * @param milliAccelerator (Output)
         * Milli (one-thousandth) accelerator..
         * 
         * @return builder
         * 
         */
        public Builder milliAccelerator(@Nullable Output<String> milliAccelerator) {
            $.milliAccelerator = milliAccelerator;
            return this;
        }

        /**
         * @param milliAccelerator (Output)
         * Milli (one-thousandth) accelerator..
         * 
         * @return builder
         * 
         */
        public Builder milliAccelerator(String milliAccelerator) {
            return milliAccelerator(Output.of(milliAccelerator));
        }

        /**
         * @param milliDcu (Output)
         * Milli (one-thousandth) Dataproc Compute Units (DCUs).
         * 
         * @return builder
         * 
         */
        public Builder milliDcu(@Nullable Output<String> milliDcu) {
            $.milliDcu = milliDcu;
            return this;
        }

        /**
         * @param milliDcu (Output)
         * Milli (one-thousandth) Dataproc Compute Units (DCUs).
         * 
         * @return builder
         * 
         */
        public Builder milliDcu(String milliDcu) {
            return milliDcu(Output.of(milliDcu));
        }

        /**
         * @param milliDcuPremium (Output)
         * Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier.
         * 
         * @return builder
         * 
         */
        public Builder milliDcuPremium(@Nullable Output<String> milliDcuPremium) {
            $.milliDcuPremium = milliDcuPremium;
            return this;
        }

        /**
         * @param milliDcuPremium (Output)
         * Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier.
         * 
         * @return builder
         * 
         */
        public Builder milliDcuPremium(String milliDcuPremium) {
            return milliDcuPremium(Output.of(milliDcuPremium));
        }

        /**
         * @param shuffleStorageGb (Output)
         * Shuffle Storage in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder shuffleStorageGb(@Nullable Output<String> shuffleStorageGb) {
            $.shuffleStorageGb = shuffleStorageGb;
            return this;
        }

        /**
         * @param shuffleStorageGb (Output)
         * Shuffle Storage in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder shuffleStorageGb(String shuffleStorageGb) {
            return shuffleStorageGb(Output.of(shuffleStorageGb));
        }

        /**
         * @param shuffleStorageGbPremium (Output)
         * Shuffle Storage in gigabytes (GB) charged at premium tier.
         * 
         * @return builder
         * 
         */
        public Builder shuffleStorageGbPremium(@Nullable Output<String> shuffleStorageGbPremium) {
            $.shuffleStorageGbPremium = shuffleStorageGbPremium;
            return this;
        }

        /**
         * @param shuffleStorageGbPremium (Output)
         * Shuffle Storage in gigabytes (GB) charged at premium tier.
         * 
         * @return builder
         * 
         */
        public Builder shuffleStorageGbPremium(String shuffleStorageGbPremium) {
            return shuffleStorageGbPremium(Output.of(shuffleStorageGbPremium));
        }

        /**
         * @param snapshotTime (Output)
         * The timestamp of the usage snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotTime(@Nullable Output<String> snapshotTime) {
            $.snapshotTime = snapshotTime;
            return this;
        }

        /**
         * @param snapshotTime (Output)
         * The timestamp of the usage snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotTime(String snapshotTime) {
            return snapshotTime(Output.of(snapshotTime));
        }

        public BatchRuntimeInfoCurrentUsageArgs build() {
            return $;
        }
    }

}
