// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedZoneForwardingConfigTargetNameServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedZoneForwardingConfigTargetNameServerArgs Empty = new ManagedZoneForwardingConfigTargetNameServerArgs();

    /**
     * Fully qualified domain name for the forwarding target.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Fully qualified domain name for the forwarding target.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are: `default`, `private`.
     * 
     */
    @Import(name="forwardingPath")
    private @Nullable Output<String> forwardingPath;

    /**
     * @return Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are: `default`, `private`.
     * 
     */
    public Optional<Output<String>> forwardingPath() {
        return Optional.ofNullable(this.forwardingPath);
    }

    /**
     * IPv4 address of a target name server.
     * 
     */
    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    /**
     * @return IPv4 address of a target name server.
     * 
     */
    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    private ManagedZoneForwardingConfigTargetNameServerArgs() {}

    private ManagedZoneForwardingConfigTargetNameServerArgs(ManagedZoneForwardingConfigTargetNameServerArgs $) {
        this.domainName = $.domainName;
        this.forwardingPath = $.forwardingPath;
        this.ipv4Address = $.ipv4Address;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZoneForwardingConfigTargetNameServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZoneForwardingConfigTargetNameServerArgs $;

        public Builder() {
            $ = new ManagedZoneForwardingConfigTargetNameServerArgs();
        }

        public Builder(ManagedZoneForwardingConfigTargetNameServerArgs defaults) {
            $ = new ManagedZoneForwardingConfigTargetNameServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName Fully qualified domain name for the forwarding target.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Fully qualified domain name for the forwarding target.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param forwardingPath Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
         * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
         * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
         * Possible values are: `default`, `private`.
         * 
         * @return builder
         * 
         */
        public Builder forwardingPath(@Nullable Output<String> forwardingPath) {
            $.forwardingPath = forwardingPath;
            return this;
        }

        /**
         * @param forwardingPath Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
         * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
         * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
         * Possible values are: `default`, `private`.
         * 
         * @return builder
         * 
         */
        public Builder forwardingPath(String forwardingPath) {
            return forwardingPath(Output.of(forwardingPath));
        }

        /**
         * @param ipv4Address IPv4 address of a target name server.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        /**
         * @param ipv4Address IPv4 address of a target name server.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        public ManagedZoneForwardingConfigTargetNameServerArgs build() {
            return $;
        }
    }

}
