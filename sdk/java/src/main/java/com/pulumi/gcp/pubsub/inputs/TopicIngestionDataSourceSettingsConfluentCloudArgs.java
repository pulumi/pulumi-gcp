// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TopicIngestionDataSourceSettingsConfluentCloudArgs extends com.pulumi.resources.ResourceArgs {

    public static final TopicIngestionDataSourceSettingsConfluentCloudArgs Empty = new TopicIngestionDataSourceSettingsConfluentCloudArgs();

    /**
     * The Confluent Cloud bootstrap server. The format is url:port.
     * 
     */
    @Import(name="bootstrapServer", required=true)
    private Output<String> bootstrapServer;

    /**
     * @return The Confluent Cloud bootstrap server. The format is url:port.
     * 
     */
    public Output<String> bootstrapServer() {
        return this.bootstrapServer;
    }

    /**
     * The Confluent Cloud cluster ID.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The Confluent Cloud cluster ID.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The GCP service account to be used for Federated Identity authentication
     * with Confluent Cloud.
     * 
     */
    @Import(name="gcpServiceAccount", required=true)
    private Output<String> gcpServiceAccount;

    /**
     * @return The GCP service account to be used for Federated Identity authentication
     * with Confluent Cloud.
     * 
     */
    public Output<String> gcpServiceAccount() {
        return this.gcpServiceAccount;
    }

    /**
     * Identity pool ID to be used for Federated Identity authentication with Confluent Cloud.
     * 
     */
    @Import(name="identityPoolId", required=true)
    private Output<String> identityPoolId;

    /**
     * @return Identity pool ID to be used for Federated Identity authentication with Confluent Cloud.
     * 
     */
    public Output<String> identityPoolId() {
        return this.identityPoolId;
    }

    /**
     * Name of the Confluent Cloud topic that Pub/Sub will import from.
     * 
     */
    @Import(name="topic", required=true)
    private Output<String> topic;

    /**
     * @return Name of the Confluent Cloud topic that Pub/Sub will import from.
     * 
     */
    public Output<String> topic() {
        return this.topic;
    }

    private TopicIngestionDataSourceSettingsConfluentCloudArgs() {}

    private TopicIngestionDataSourceSettingsConfluentCloudArgs(TopicIngestionDataSourceSettingsConfluentCloudArgs $) {
        this.bootstrapServer = $.bootstrapServer;
        this.clusterId = $.clusterId;
        this.gcpServiceAccount = $.gcpServiceAccount;
        this.identityPoolId = $.identityPoolId;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TopicIngestionDataSourceSettingsConfluentCloudArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TopicIngestionDataSourceSettingsConfluentCloudArgs $;

        public Builder() {
            $ = new TopicIngestionDataSourceSettingsConfluentCloudArgs();
        }

        public Builder(TopicIngestionDataSourceSettingsConfluentCloudArgs defaults) {
            $ = new TopicIngestionDataSourceSettingsConfluentCloudArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootstrapServer The Confluent Cloud bootstrap server. The format is url:port.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServer(Output<String> bootstrapServer) {
            $.bootstrapServer = bootstrapServer;
            return this;
        }

        /**
         * @param bootstrapServer The Confluent Cloud bootstrap server. The format is url:port.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServer(String bootstrapServer) {
            return bootstrapServer(Output.of(bootstrapServer));
        }

        /**
         * @param clusterId The Confluent Cloud cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The Confluent Cloud cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param gcpServiceAccount The GCP service account to be used for Federated Identity authentication
         * with Confluent Cloud.
         * 
         * @return builder
         * 
         */
        public Builder gcpServiceAccount(Output<String> gcpServiceAccount) {
            $.gcpServiceAccount = gcpServiceAccount;
            return this;
        }

        /**
         * @param gcpServiceAccount The GCP service account to be used for Federated Identity authentication
         * with Confluent Cloud.
         * 
         * @return builder
         * 
         */
        public Builder gcpServiceAccount(String gcpServiceAccount) {
            return gcpServiceAccount(Output.of(gcpServiceAccount));
        }

        /**
         * @param identityPoolId Identity pool ID to be used for Federated Identity authentication with Confluent Cloud.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(Output<String> identityPoolId) {
            $.identityPoolId = identityPoolId;
            return this;
        }

        /**
         * @param identityPoolId Identity pool ID to be used for Federated Identity authentication with Confluent Cloud.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(String identityPoolId) {
            return identityPoolId(Output.of(identityPoolId));
        }

        /**
         * @param topic Name of the Confluent Cloud topic that Pub/Sub will import from.
         * 
         * @return builder
         * 
         */
        public Builder topic(Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic Name of the Confluent Cloud topic that Pub/Sub will import from.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public TopicIngestionDataSourceSettingsConfluentCloudArgs build() {
            if ($.bootstrapServer == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsConfluentCloudArgs", "bootstrapServer");
            }
            if ($.gcpServiceAccount == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsConfluentCloudArgs", "gcpServiceAccount");
            }
            if ($.identityPoolId == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsConfluentCloudArgs", "identityPoolId");
            }
            if ($.topic == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsConfluentCloudArgs", "topic");
            }
            return $;
        }
    }

}
