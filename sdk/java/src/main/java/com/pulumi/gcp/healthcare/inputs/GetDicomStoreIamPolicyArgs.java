// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetDicomStoreIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDicomStoreIamPolicyArgs Empty = new GetDicomStoreIamPolicyArgs();

    /**
     * The DICOM store ID, in the form
     * `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
     * `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider&#39;s
     * project setting will be used as a fallback.
     * 
     */
    @Import(name="dicomStoreId", required=true)
    private Output<String> dicomStoreId;

    /**
     * @return The DICOM store ID, in the form
     * `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
     * `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider&#39;s
     * project setting will be used as a fallback.
     * 
     */
    public Output<String> dicomStoreId() {
        return this.dicomStoreId;
    }

    private GetDicomStoreIamPolicyArgs() {}

    private GetDicomStoreIamPolicyArgs(GetDicomStoreIamPolicyArgs $) {
        this.dicomStoreId = $.dicomStoreId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDicomStoreIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDicomStoreIamPolicyArgs $;

        public Builder() {
            $ = new GetDicomStoreIamPolicyArgs();
        }

        public Builder(GetDicomStoreIamPolicyArgs defaults) {
            $ = new GetDicomStoreIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dicomStoreId The DICOM store ID, in the form
         * `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
         * `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider&#39;s
         * project setting will be used as a fallback.
         * 
         * @return builder
         * 
         */
        public Builder dicomStoreId(Output<String> dicomStoreId) {
            $.dicomStoreId = dicomStoreId;
            return this;
        }

        /**
         * @param dicomStoreId The DICOM store ID, in the form
         * `{project_id}/{location_name}/{dataset_name}/{dicom_store_name}` or
         * `{location_name}/{dataset_name}/{dicom_store_name}`. In the second form, the provider&#39;s
         * project setting will be used as a fallback.
         * 
         * @return builder
         * 
         */
        public Builder dicomStoreId(String dicomStoreId) {
            return dicomStoreId(Output.of(dicomStoreId));
        }

        public GetDicomStoreIamPolicyArgs build() {
            if ($.dicomStoreId == null) {
                throw new MissingRequiredPropertyException("GetDicomStoreIamPolicyArgs", "dicomStoreId");
            }
            return $;
        }
    }

}
