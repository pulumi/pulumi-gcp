// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.redis.outputs.GetClusterAutomatedBackupConfig;
import com.pulumi.gcp.redis.outputs.GetClusterCrossClusterReplicationConfig;
import com.pulumi.gcp.redis.outputs.GetClusterDiscoveryEndpoint;
import com.pulumi.gcp.redis.outputs.GetClusterGcsSource;
import com.pulumi.gcp.redis.outputs.GetClusterMaintenancePolicy;
import com.pulumi.gcp.redis.outputs.GetClusterMaintenanceSchedule;
import com.pulumi.gcp.redis.outputs.GetClusterManagedBackupSource;
import com.pulumi.gcp.redis.outputs.GetClusterManagedServerCa;
import com.pulumi.gcp.redis.outputs.GetClusterPersistenceConfig;
import com.pulumi.gcp.redis.outputs.GetClusterPscConfig;
import com.pulumi.gcp.redis.outputs.GetClusterPscConnection;
import com.pulumi.gcp.redis.outputs.GetClusterPscServiceAttachment;
import com.pulumi.gcp.redis.outputs.GetClusterStateInfo;
import com.pulumi.gcp.redis.outputs.GetClusterZoneDistributionConfig;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    private String authorizationMode;
    private List<GetClusterAutomatedBackupConfig> automatedBackupConfigs;
    private String backupCollection;
    private String createTime;
    private List<GetClusterCrossClusterReplicationConfig> crossClusterReplicationConfigs;
    private Boolean deletionProtectionEnabled;
    private List<GetClusterDiscoveryEndpoint> discoveryEndpoints;
    private List<GetClusterGcsSource> gcsSources;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String kmsKey;
    private List<GetClusterMaintenancePolicy> maintenancePolicies;
    private List<GetClusterMaintenanceSchedule> maintenanceSchedules;
    private List<GetClusterManagedBackupSource> managedBackupSources;
    private List<GetClusterManagedServerCa> managedServerCas;
    private String name;
    private String nodeType;
    private List<GetClusterPersistenceConfig> persistenceConfigs;
    private Double preciseSizeGb;
    private @Nullable String project;
    private List<GetClusterPscConfig> pscConfigs;
    private List<GetClusterPscConnection> pscConnections;
    private List<GetClusterPscServiceAttachment> pscServiceAttachments;
    private Map<String,String> redisConfigs;
    private @Nullable String region;
    private Integer replicaCount;
    private Integer shardCount;
    private Integer sizeGb;
    private String state;
    private List<GetClusterStateInfo> stateInfos;
    private String transitEncryptionMode;
    private String uid;
    private List<GetClusterZoneDistributionConfig> zoneDistributionConfigs;

    private GetClusterResult() {}
    public String authorizationMode() {
        return this.authorizationMode;
    }
    public List<GetClusterAutomatedBackupConfig> automatedBackupConfigs() {
        return this.automatedBackupConfigs;
    }
    public String backupCollection() {
        return this.backupCollection;
    }
    public String createTime() {
        return this.createTime;
    }
    public List<GetClusterCrossClusterReplicationConfig> crossClusterReplicationConfigs() {
        return this.crossClusterReplicationConfigs;
    }
    public Boolean deletionProtectionEnabled() {
        return this.deletionProtectionEnabled;
    }
    public List<GetClusterDiscoveryEndpoint> discoveryEndpoints() {
        return this.discoveryEndpoints;
    }
    public List<GetClusterGcsSource> gcsSources() {
        return this.gcsSources;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kmsKey() {
        return this.kmsKey;
    }
    public List<GetClusterMaintenancePolicy> maintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetClusterMaintenanceSchedule> maintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    public List<GetClusterManagedBackupSource> managedBackupSources() {
        return this.managedBackupSources;
    }
    public List<GetClusterManagedServerCa> managedServerCas() {
        return this.managedServerCas;
    }
    public String name() {
        return this.name;
    }
    public String nodeType() {
        return this.nodeType;
    }
    public List<GetClusterPersistenceConfig> persistenceConfigs() {
        return this.persistenceConfigs;
    }
    public Double preciseSizeGb() {
        return this.preciseSizeGb;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetClusterPscConfig> pscConfigs() {
        return this.pscConfigs;
    }
    public List<GetClusterPscConnection> pscConnections() {
        return this.pscConnections;
    }
    public List<GetClusterPscServiceAttachment> pscServiceAttachments() {
        return this.pscServiceAttachments;
    }
    public Map<String,String> redisConfigs() {
        return this.redisConfigs;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Integer replicaCount() {
        return this.replicaCount;
    }
    public Integer shardCount() {
        return this.shardCount;
    }
    public Integer sizeGb() {
        return this.sizeGb;
    }
    public String state() {
        return this.state;
    }
    public List<GetClusterStateInfo> stateInfos() {
        return this.stateInfos;
    }
    public String transitEncryptionMode() {
        return this.transitEncryptionMode;
    }
    public String uid() {
        return this.uid;
    }
    public List<GetClusterZoneDistributionConfig> zoneDistributionConfigs() {
        return this.zoneDistributionConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorizationMode;
        private List<GetClusterAutomatedBackupConfig> automatedBackupConfigs;
        private String backupCollection;
        private String createTime;
        private List<GetClusterCrossClusterReplicationConfig> crossClusterReplicationConfigs;
        private Boolean deletionProtectionEnabled;
        private List<GetClusterDiscoveryEndpoint> discoveryEndpoints;
        private List<GetClusterGcsSource> gcsSources;
        private String id;
        private String kmsKey;
        private List<GetClusterMaintenancePolicy> maintenancePolicies;
        private List<GetClusterMaintenanceSchedule> maintenanceSchedules;
        private List<GetClusterManagedBackupSource> managedBackupSources;
        private List<GetClusterManagedServerCa> managedServerCas;
        private String name;
        private String nodeType;
        private List<GetClusterPersistenceConfig> persistenceConfigs;
        private Double preciseSizeGb;
        private @Nullable String project;
        private List<GetClusterPscConfig> pscConfigs;
        private List<GetClusterPscConnection> pscConnections;
        private List<GetClusterPscServiceAttachment> pscServiceAttachments;
        private Map<String,String> redisConfigs;
        private @Nullable String region;
        private Integer replicaCount;
        private Integer shardCount;
        private Integer sizeGb;
        private String state;
        private List<GetClusterStateInfo> stateInfos;
        private String transitEncryptionMode;
        private String uid;
        private List<GetClusterZoneDistributionConfig> zoneDistributionConfigs;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationMode = defaults.authorizationMode;
    	      this.automatedBackupConfigs = defaults.automatedBackupConfigs;
    	      this.backupCollection = defaults.backupCollection;
    	      this.createTime = defaults.createTime;
    	      this.crossClusterReplicationConfigs = defaults.crossClusterReplicationConfigs;
    	      this.deletionProtectionEnabled = defaults.deletionProtectionEnabled;
    	      this.discoveryEndpoints = defaults.discoveryEndpoints;
    	      this.gcsSources = defaults.gcsSources;
    	      this.id = defaults.id;
    	      this.kmsKey = defaults.kmsKey;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.maintenanceSchedules = defaults.maintenanceSchedules;
    	      this.managedBackupSources = defaults.managedBackupSources;
    	      this.managedServerCas = defaults.managedServerCas;
    	      this.name = defaults.name;
    	      this.nodeType = defaults.nodeType;
    	      this.persistenceConfigs = defaults.persistenceConfigs;
    	      this.preciseSizeGb = defaults.preciseSizeGb;
    	      this.project = defaults.project;
    	      this.pscConfigs = defaults.pscConfigs;
    	      this.pscConnections = defaults.pscConnections;
    	      this.pscServiceAttachments = defaults.pscServiceAttachments;
    	      this.redisConfigs = defaults.redisConfigs;
    	      this.region = defaults.region;
    	      this.replicaCount = defaults.replicaCount;
    	      this.shardCount = defaults.shardCount;
    	      this.sizeGb = defaults.sizeGb;
    	      this.state = defaults.state;
    	      this.stateInfos = defaults.stateInfos;
    	      this.transitEncryptionMode = defaults.transitEncryptionMode;
    	      this.uid = defaults.uid;
    	      this.zoneDistributionConfigs = defaults.zoneDistributionConfigs;
        }

        @CustomType.Setter
        public Builder authorizationMode(String authorizationMode) {
            if (authorizationMode == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "authorizationMode");
            }
            this.authorizationMode = authorizationMode;
            return this;
        }
        @CustomType.Setter
        public Builder automatedBackupConfigs(List<GetClusterAutomatedBackupConfig> automatedBackupConfigs) {
            if (automatedBackupConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "automatedBackupConfigs");
            }
            this.automatedBackupConfigs = automatedBackupConfigs;
            return this;
        }
        public Builder automatedBackupConfigs(GetClusterAutomatedBackupConfig... automatedBackupConfigs) {
            return automatedBackupConfigs(List.of(automatedBackupConfigs));
        }
        @CustomType.Setter
        public Builder backupCollection(String backupCollection) {
            if (backupCollection == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "backupCollection");
            }
            this.backupCollection = backupCollection;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder crossClusterReplicationConfigs(List<GetClusterCrossClusterReplicationConfig> crossClusterReplicationConfigs) {
            if (crossClusterReplicationConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "crossClusterReplicationConfigs");
            }
            this.crossClusterReplicationConfigs = crossClusterReplicationConfigs;
            return this;
        }
        public Builder crossClusterReplicationConfigs(GetClusterCrossClusterReplicationConfig... crossClusterReplicationConfigs) {
            return crossClusterReplicationConfigs(List.of(crossClusterReplicationConfigs));
        }
        @CustomType.Setter
        public Builder deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
            if (deletionProtectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "deletionProtectionEnabled");
            }
            this.deletionProtectionEnabled = deletionProtectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder discoveryEndpoints(List<GetClusterDiscoveryEndpoint> discoveryEndpoints) {
            if (discoveryEndpoints == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "discoveryEndpoints");
            }
            this.discoveryEndpoints = discoveryEndpoints;
            return this;
        }
        public Builder discoveryEndpoints(GetClusterDiscoveryEndpoint... discoveryEndpoints) {
            return discoveryEndpoints(List.of(discoveryEndpoints));
        }
        @CustomType.Setter
        public Builder gcsSources(List<GetClusterGcsSource> gcsSources) {
            if (gcsSources == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "gcsSources");
            }
            this.gcsSources = gcsSources;
            return this;
        }
        public Builder gcsSources(GetClusterGcsSource... gcsSources) {
            return gcsSources(List.of(gcsSources));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKey(String kmsKey) {
            if (kmsKey == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "kmsKey");
            }
            this.kmsKey = kmsKey;
            return this;
        }
        @CustomType.Setter
        public Builder maintenancePolicies(List<GetClusterMaintenancePolicy> maintenancePolicies) {
            if (maintenancePolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "maintenancePolicies");
            }
            this.maintenancePolicies = maintenancePolicies;
            return this;
        }
        public Builder maintenancePolicies(GetClusterMaintenancePolicy... maintenancePolicies) {
            return maintenancePolicies(List.of(maintenancePolicies));
        }
        @CustomType.Setter
        public Builder maintenanceSchedules(List<GetClusterMaintenanceSchedule> maintenanceSchedules) {
            if (maintenanceSchedules == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "maintenanceSchedules");
            }
            this.maintenanceSchedules = maintenanceSchedules;
            return this;
        }
        public Builder maintenanceSchedules(GetClusterMaintenanceSchedule... maintenanceSchedules) {
            return maintenanceSchedules(List.of(maintenanceSchedules));
        }
        @CustomType.Setter
        public Builder managedBackupSources(List<GetClusterManagedBackupSource> managedBackupSources) {
            if (managedBackupSources == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "managedBackupSources");
            }
            this.managedBackupSources = managedBackupSources;
            return this;
        }
        public Builder managedBackupSources(GetClusterManagedBackupSource... managedBackupSources) {
            return managedBackupSources(List.of(managedBackupSources));
        }
        @CustomType.Setter
        public Builder managedServerCas(List<GetClusterManagedServerCa> managedServerCas) {
            if (managedServerCas == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "managedServerCas");
            }
            this.managedServerCas = managedServerCas;
            return this;
        }
        public Builder managedServerCas(GetClusterManagedServerCa... managedServerCas) {
            return managedServerCas(List.of(managedServerCas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(String nodeType) {
            if (nodeType == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodeType");
            }
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder persistenceConfigs(List<GetClusterPersistenceConfig> persistenceConfigs) {
            if (persistenceConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "persistenceConfigs");
            }
            this.persistenceConfigs = persistenceConfigs;
            return this;
        }
        public Builder persistenceConfigs(GetClusterPersistenceConfig... persistenceConfigs) {
            return persistenceConfigs(List.of(persistenceConfigs));
        }
        @CustomType.Setter
        public Builder preciseSizeGb(Double preciseSizeGb) {
            if (preciseSizeGb == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "preciseSizeGb");
            }
            this.preciseSizeGb = preciseSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pscConfigs(List<GetClusterPscConfig> pscConfigs) {
            if (pscConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "pscConfigs");
            }
            this.pscConfigs = pscConfigs;
            return this;
        }
        public Builder pscConfigs(GetClusterPscConfig... pscConfigs) {
            return pscConfigs(List.of(pscConfigs));
        }
        @CustomType.Setter
        public Builder pscConnections(List<GetClusterPscConnection> pscConnections) {
            if (pscConnections == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "pscConnections");
            }
            this.pscConnections = pscConnections;
            return this;
        }
        public Builder pscConnections(GetClusterPscConnection... pscConnections) {
            return pscConnections(List.of(pscConnections));
        }
        @CustomType.Setter
        public Builder pscServiceAttachments(List<GetClusterPscServiceAttachment> pscServiceAttachments) {
            if (pscServiceAttachments == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "pscServiceAttachments");
            }
            this.pscServiceAttachments = pscServiceAttachments;
            return this;
        }
        public Builder pscServiceAttachments(GetClusterPscServiceAttachment... pscServiceAttachments) {
            return pscServiceAttachments(List.of(pscServiceAttachments));
        }
        @CustomType.Setter
        public Builder redisConfigs(Map<String,String> redisConfigs) {
            if (redisConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "redisConfigs");
            }
            this.redisConfigs = redisConfigs;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder replicaCount(Integer replicaCount) {
            if (replicaCount == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "replicaCount");
            }
            this.replicaCount = replicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder shardCount(Integer shardCount) {
            if (shardCount == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "shardCount");
            }
            this.shardCount = shardCount;
            return this;
        }
        @CustomType.Setter
        public Builder sizeGb(Integer sizeGb) {
            if (sizeGb == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "sizeGb");
            }
            this.sizeGb = sizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateInfos(List<GetClusterStateInfo> stateInfos) {
            if (stateInfos == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "stateInfos");
            }
            this.stateInfos = stateInfos;
            return this;
        }
        public Builder stateInfos(GetClusterStateInfo... stateInfos) {
            return stateInfos(List.of(stateInfos));
        }
        @CustomType.Setter
        public Builder transitEncryptionMode(String transitEncryptionMode) {
            if (transitEncryptionMode == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "transitEncryptionMode");
            }
            this.transitEncryptionMode = transitEncryptionMode;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder zoneDistributionConfigs(List<GetClusterZoneDistributionConfig> zoneDistributionConfigs) {
            if (zoneDistributionConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "zoneDistributionConfigs");
            }
            this.zoneDistributionConfigs = zoneDistributionConfigs;
            return this;
        }
        public Builder zoneDistributionConfigs(GetClusterZoneDistributionConfig... zoneDistributionConfigs) {
            return zoneDistributionConfigs(List.of(zoneDistributionConfigs));
        }
        public GetClusterResult build() {
            final var _resultValue = new GetClusterResult();
            _resultValue.authorizationMode = authorizationMode;
            _resultValue.automatedBackupConfigs = automatedBackupConfigs;
            _resultValue.backupCollection = backupCollection;
            _resultValue.createTime = createTime;
            _resultValue.crossClusterReplicationConfigs = crossClusterReplicationConfigs;
            _resultValue.deletionProtectionEnabled = deletionProtectionEnabled;
            _resultValue.discoveryEndpoints = discoveryEndpoints;
            _resultValue.gcsSources = gcsSources;
            _resultValue.id = id;
            _resultValue.kmsKey = kmsKey;
            _resultValue.maintenancePolicies = maintenancePolicies;
            _resultValue.maintenanceSchedules = maintenanceSchedules;
            _resultValue.managedBackupSources = managedBackupSources;
            _resultValue.managedServerCas = managedServerCas;
            _resultValue.name = name;
            _resultValue.nodeType = nodeType;
            _resultValue.persistenceConfigs = persistenceConfigs;
            _resultValue.preciseSizeGb = preciseSizeGb;
            _resultValue.project = project;
            _resultValue.pscConfigs = pscConfigs;
            _resultValue.pscConnections = pscConnections;
            _resultValue.pscServiceAttachments = pscServiceAttachments;
            _resultValue.redisConfigs = redisConfigs;
            _resultValue.region = region;
            _resultValue.replicaCount = replicaCount;
            _resultValue.shardCount = shardCount;
            _resultValue.sizeGb = sizeGb;
            _resultValue.state = state;
            _resultValue.stateInfos = stateInfos;
            _resultValue.transitEncryptionMode = transitEncryptionMode;
            _resultValue.uid = uid;
            _resultValue.zoneDistributionConfigs = zoneDistributionConfigs;
            return _resultValue;
        }
    }
}
