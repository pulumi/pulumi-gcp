// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionSqlBooleanTest;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionSqlDaily;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionSqlHourly;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionSqlMinutes;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionSqlRowCountTest;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertPolicyConditionConditionSql {
    /**
     * @return A test that uses an alerting result in a boolean column produced by the SQL query.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionSqlBooleanTest booleanTest;
    /**
     * @return Used to schedule the query to run every so many days.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionSqlDaily daily;
    /**
     * @return Used to schedule the query to run every so many hours.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionSqlHourly hourly;
    /**
     * @return Used to schedule the query to run every so many minutes.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionSqlMinutes minutes;
    /**
     * @return The Log Analytics SQL query to run, as a string.  The query must
     * conform to the required shape. Specifically, the query must not try to
     * filter the input by time.  A filter will automatically be applied
     * to filter the input so that the query receives all rows received
     * since the last time the query was run.
     * 
     */
    private String query;
    /**
     * @return A test that checks if the number of rows in the result set violates some threshold.
     * Structure is documented below.
     * 
     */
    private @Nullable AlertPolicyConditionConditionSqlRowCountTest rowCountTest;

    private AlertPolicyConditionConditionSql() {}
    /**
     * @return A test that uses an alerting result in a boolean column produced by the SQL query.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionSqlBooleanTest> booleanTest() {
        return Optional.ofNullable(this.booleanTest);
    }
    /**
     * @return Used to schedule the query to run every so many days.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionSqlDaily> daily() {
        return Optional.ofNullable(this.daily);
    }
    /**
     * @return Used to schedule the query to run every so many hours.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionSqlHourly> hourly() {
        return Optional.ofNullable(this.hourly);
    }
    /**
     * @return Used to schedule the query to run every so many minutes.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionSqlMinutes> minutes() {
        return Optional.ofNullable(this.minutes);
    }
    /**
     * @return The Log Analytics SQL query to run, as a string.  The query must
     * conform to the required shape. Specifically, the query must not try to
     * filter the input by time.  A filter will automatically be applied
     * to filter the input so that the query receives all rows received
     * since the last time the query was run.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return A test that checks if the number of rows in the result set violates some threshold.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionSqlRowCountTest> rowCountTest() {
        return Optional.ofNullable(this.rowCountTest);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyConditionConditionSql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AlertPolicyConditionConditionSqlBooleanTest booleanTest;
        private @Nullable AlertPolicyConditionConditionSqlDaily daily;
        private @Nullable AlertPolicyConditionConditionSqlHourly hourly;
        private @Nullable AlertPolicyConditionConditionSqlMinutes minutes;
        private String query;
        private @Nullable AlertPolicyConditionConditionSqlRowCountTest rowCountTest;
        public Builder() {}
        public Builder(AlertPolicyConditionConditionSql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.booleanTest = defaults.booleanTest;
    	      this.daily = defaults.daily;
    	      this.hourly = defaults.hourly;
    	      this.minutes = defaults.minutes;
    	      this.query = defaults.query;
    	      this.rowCountTest = defaults.rowCountTest;
        }

        @CustomType.Setter
        public Builder booleanTest(@Nullable AlertPolicyConditionConditionSqlBooleanTest booleanTest) {

            this.booleanTest = booleanTest;
            return this;
        }
        @CustomType.Setter
        public Builder daily(@Nullable AlertPolicyConditionConditionSqlDaily daily) {

            this.daily = daily;
            return this;
        }
        @CustomType.Setter
        public Builder hourly(@Nullable AlertPolicyConditionConditionSqlHourly hourly) {

            this.hourly = hourly;
            return this;
        }
        @CustomType.Setter
        public Builder minutes(@Nullable AlertPolicyConditionConditionSqlMinutes minutes) {

            this.minutes = minutes;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSql", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder rowCountTest(@Nullable AlertPolicyConditionConditionSqlRowCountTest rowCountTest) {

            this.rowCountTest = rowCountTest;
            return this;
        }
        public AlertPolicyConditionConditionSql build() {
            final var _resultValue = new AlertPolicyConditionConditionSql();
            _resultValue.booleanTest = booleanTest;
            _resultValue.daily = daily;
            _resultValue.hourly = hourly;
            _resultValue.minutes = minutes;
            _resultValue.query = query;
            _resultValue.rowCountTest = rowCountTest;
            return _resultValue;
        }
    }
}
