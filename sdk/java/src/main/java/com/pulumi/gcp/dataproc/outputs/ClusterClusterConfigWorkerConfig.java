// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dataproc.outputs.ClusterClusterConfigWorkerConfigAccelerator;
import com.pulumi.gcp.dataproc.outputs.ClusterClusterConfigWorkerConfigDiskConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterClusterConfigWorkerConfig {
    /**
     * @return The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
     * 
     */
    private @Nullable List<ClusterClusterConfigWorkerConfigAccelerator> accelerators;
    /**
     * @return Disk Config
     * 
     */
    private @Nullable ClusterClusterConfigWorkerConfigDiskConfig diskConfig;
    /**
     * @return The URI for the image to use for this worker.  See [the guide](https://cloud.google.com/dataproc/docs/guides/dataproc-images)
     * for more information.
     * 
     */
    private @Nullable String imageUri;
    private @Nullable List<String> instanceNames;
    /**
     * @return The name of a Google Compute Engine machine type
     * to create for the worker nodes. If not specified, GCP will default to a predetermined
     * computed value (currently `n1-standard-4`).
     * 
     */
    private @Nullable String machineType;
    /**
     * @return The name of a minimum generation of CPU family
     * for the master. If not specified, GCP will default to a predetermined computed value
     * for each zone. See [the guide](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
     * for details about which CPU families are available (and defaulted) for each zone.
     * 
     */
    private @Nullable String minCpuPlatform;
    /**
     * @return Specifies the number of worker nodes to create.
     * If not specified, GCP will default to a predetermined computed value (currently 2).
     * There is currently a beta feature which allows you to run a
     * [Single Node Cluster](https://cloud.google.com/dataproc/docs/concepts/single-node-clusters).
     * In order to take advantage of this you need to set
     * `&#34;dataproc:dataproc.allow.zero.workers&#34; = &#34;true&#34;` in
     * `cluster_config.software_config.properties`
     * 
     */
    private @Nullable Integer numInstances;

    private ClusterClusterConfigWorkerConfig() {}
    /**
     * @return The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
     * 
     */
    public List<ClusterClusterConfigWorkerConfigAccelerator> accelerators() {
        return this.accelerators == null ? List.of() : this.accelerators;
    }
    /**
     * @return Disk Config
     * 
     */
    public Optional<ClusterClusterConfigWorkerConfigDiskConfig> diskConfig() {
        return Optional.ofNullable(this.diskConfig);
    }
    /**
     * @return The URI for the image to use for this worker.  See [the guide](https://cloud.google.com/dataproc/docs/guides/dataproc-images)
     * for more information.
     * 
     */
    public Optional<String> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }
    public List<String> instanceNames() {
        return this.instanceNames == null ? List.of() : this.instanceNames;
    }
    /**
     * @return The name of a Google Compute Engine machine type
     * to create for the worker nodes. If not specified, GCP will default to a predetermined
     * computed value (currently `n1-standard-4`).
     * 
     */
    public Optional<String> machineType() {
        return Optional.ofNullable(this.machineType);
    }
    /**
     * @return The name of a minimum generation of CPU family
     * for the master. If not specified, GCP will default to a predetermined computed value
     * for each zone. See [the guide](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
     * for details about which CPU families are available (and defaulted) for each zone.
     * 
     */
    public Optional<String> minCpuPlatform() {
        return Optional.ofNullable(this.minCpuPlatform);
    }
    /**
     * @return Specifies the number of worker nodes to create.
     * If not specified, GCP will default to a predetermined computed value (currently 2).
     * There is currently a beta feature which allows you to run a
     * [Single Node Cluster](https://cloud.google.com/dataproc/docs/concepts/single-node-clusters).
     * In order to take advantage of this you need to set
     * `&#34;dataproc:dataproc.allow.zero.workers&#34; = &#34;true&#34;` in
     * `cluster_config.software_config.properties`
     * 
     */
    public Optional<Integer> numInstances() {
        return Optional.ofNullable(this.numInstances);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterClusterConfigWorkerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ClusterClusterConfigWorkerConfigAccelerator> accelerators;
        private @Nullable ClusterClusterConfigWorkerConfigDiskConfig diskConfig;
        private @Nullable String imageUri;
        private @Nullable List<String> instanceNames;
        private @Nullable String machineType;
        private @Nullable String minCpuPlatform;
        private @Nullable Integer numInstances;
        public Builder() {}
        public Builder(ClusterClusterConfigWorkerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.diskConfig = defaults.diskConfig;
    	      this.imageUri = defaults.imageUri;
    	      this.instanceNames = defaults.instanceNames;
    	      this.machineType = defaults.machineType;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.numInstances = defaults.numInstances;
        }

        @CustomType.Setter
        public Builder accelerators(@Nullable List<ClusterClusterConfigWorkerConfigAccelerator> accelerators) {
            this.accelerators = accelerators;
            return this;
        }
        public Builder accelerators(ClusterClusterConfigWorkerConfigAccelerator... accelerators) {
            return accelerators(List.of(accelerators));
        }
        @CustomType.Setter
        public Builder diskConfig(@Nullable ClusterClusterConfigWorkerConfigDiskConfig diskConfig) {
            this.diskConfig = diskConfig;
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(@Nullable String imageUri) {
            this.imageUri = imageUri;
            return this;
        }
        @CustomType.Setter
        public Builder instanceNames(@Nullable List<String> instanceNames) {
            this.instanceNames = instanceNames;
            return this;
        }
        public Builder instanceNames(String... instanceNames) {
            return instanceNames(List.of(instanceNames));
        }
        @CustomType.Setter
        public Builder machineType(@Nullable String machineType) {
            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder minCpuPlatform(@Nullable String minCpuPlatform) {
            this.minCpuPlatform = minCpuPlatform;
            return this;
        }
        @CustomType.Setter
        public Builder numInstances(@Nullable Integer numInstances) {
            this.numInstances = numInstances;
            return this;
        }
        public ClusterClusterConfigWorkerConfig build() {
            final var o = new ClusterClusterConfigWorkerConfig();
            o.accelerators = accelerators;
            o.diskConfig = diskConfig;
            o.imageUri = imageUri;
            o.instanceNames = instanceNames;
            o.machineType = machineType;
            o.minCpuPlatform = minCpuPlatform;
            o.numInstances = numInstances;
            return o;
        }
    }
}
