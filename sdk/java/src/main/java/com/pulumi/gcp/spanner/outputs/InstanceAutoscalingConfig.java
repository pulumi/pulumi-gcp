// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.spanner.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.spanner.outputs.InstanceAutoscalingConfigAutoscalingLimits;
import com.pulumi.gcp.spanner.outputs.InstanceAutoscalingConfigAutoscalingTargets;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceAutoscalingConfig {
    /**
     * @return Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events. Users can define the minimum and
     * maximum compute capacity allocated to the instance, and the autoscaler will
     * only scale within that range. Users can either use nodes or processing
     * units to specify the limits, but should use the same unit to set both the
     * min_limit and max_limit.
     * Structure is documented below.
     * 
     */
    private @Nullable InstanceAutoscalingConfigAutoscalingLimits autoscalingLimits;
    /**
     * @return Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events
     * Structure is documented below.
     * 
     */
    private @Nullable InstanceAutoscalingConfigAutoscalingTargets autoscalingTargets;

    private InstanceAutoscalingConfig() {}
    /**
     * @return Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events. Users can define the minimum and
     * maximum compute capacity allocated to the instance, and the autoscaler will
     * only scale within that range. Users can either use nodes or processing
     * units to specify the limits, but should use the same unit to set both the
     * min_limit and max_limit.
     * Structure is documented below.
     * 
     */
    public Optional<InstanceAutoscalingConfigAutoscalingLimits> autoscalingLimits() {
        return Optional.ofNullable(this.autoscalingLimits);
    }
    /**
     * @return Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events
     * Structure is documented below.
     * 
     */
    public Optional<InstanceAutoscalingConfigAutoscalingTargets> autoscalingTargets() {
        return Optional.ofNullable(this.autoscalingTargets);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceAutoscalingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable InstanceAutoscalingConfigAutoscalingLimits autoscalingLimits;
        private @Nullable InstanceAutoscalingConfigAutoscalingTargets autoscalingTargets;
        public Builder() {}
        public Builder(InstanceAutoscalingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingLimits = defaults.autoscalingLimits;
    	      this.autoscalingTargets = defaults.autoscalingTargets;
        }

        @CustomType.Setter
        public Builder autoscalingLimits(@Nullable InstanceAutoscalingConfigAutoscalingLimits autoscalingLimits) {
            this.autoscalingLimits = autoscalingLimits;
            return this;
        }
        @CustomType.Setter
        public Builder autoscalingTargets(@Nullable InstanceAutoscalingConfigAutoscalingTargets autoscalingTargets) {
            this.autoscalingTargets = autoscalingTargets;
            return this;
        }
        public InstanceAutoscalingConfig build() {
            final var _resultValue = new InstanceAutoscalingConfig();
            _resultValue.autoscalingLimits = autoscalingLimits;
            _resultValue.autoscalingTargets = autoscalingTargets;
            return _resultValue;
        }
    }
}
