// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.inputs.SnapshotSettingsStorageLocationLocationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotSettingsStorageLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotSettingsStorageLocationArgs Empty = new SnapshotSettingsStorageLocationArgs();

    /**
     * When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the
     * locations listed in this field. Keys are Cloud Storage bucket locations.
     * Only one location can be specified.
     * Structure is documented below.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<SnapshotSettingsStorageLocationLocationArgs>> locations;

    /**
     * @return When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the
     * locations listed in this field. Keys are Cloud Storage bucket locations.
     * Only one location can be specified.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<SnapshotSettingsStorageLocationLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * The chosen location policy
     * Possible values are: `NEAREST_MULTI_REGION`, `LOCAL_REGION`, `SPECIFIC_LOCATIONS`.
     * 
     */
    @Import(name="policy", required=true)
    private Output<String> policy;

    /**
     * @return The chosen location policy
     * Possible values are: `NEAREST_MULTI_REGION`, `LOCAL_REGION`, `SPECIFIC_LOCATIONS`.
     * 
     */
    public Output<String> policy() {
        return this.policy;
    }

    private SnapshotSettingsStorageLocationArgs() {}

    private SnapshotSettingsStorageLocationArgs(SnapshotSettingsStorageLocationArgs $) {
        this.locations = $.locations;
        this.policy = $.policy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotSettingsStorageLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotSettingsStorageLocationArgs $;

        public Builder() {
            $ = new SnapshotSettingsStorageLocationArgs();
        }

        public Builder(SnapshotSettingsStorageLocationArgs defaults) {
            $ = new SnapshotSettingsStorageLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param locations When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the
         * locations listed in this field. Keys are Cloud Storage bucket locations.
         * Only one location can be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<SnapshotSettingsStorageLocationLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the
         * locations listed in this field. Keys are Cloud Storage bucket locations.
         * Only one location can be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<SnapshotSettingsStorageLocationLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the
         * locations listed in this field. Keys are Cloud Storage bucket locations.
         * Only one location can be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder locations(SnapshotSettingsStorageLocationLocationArgs... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param policy The chosen location policy
         * Possible values are: `NEAREST_MULTI_REGION`, `LOCAL_REGION`, `SPECIFIC_LOCATIONS`.
         * 
         * @return builder
         * 
         */
        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The chosen location policy
         * Possible values are: `NEAREST_MULTI_REGION`, `LOCAL_REGION`, `SPECIFIC_LOCATIONS`.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public SnapshotSettingsStorageLocationArgs build() {
            if ($.policy == null) {
                throw new MissingRequiredPropertyException("SnapshotSettingsStorageLocationArgs", "policy");
            }
            return $;
        }
    }

}
