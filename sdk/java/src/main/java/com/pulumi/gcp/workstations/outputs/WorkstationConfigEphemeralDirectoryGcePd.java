// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkstationConfigEphemeralDirectoryGcePd {
    /**
     * @return Type of the disk to use. Defaults to `&#34;pd-standard&#34;`.
     * 
     */
    private @Nullable String diskType;
    /**
     * @return Whether the disk is read only. If true, the disk may be shared by multiple VMs and `sourceSnapshot` must be set.
     * 
     */
    private @Nullable Boolean readOnly;
    /**
     * @return Name of the disk image to use as the source for the disk.
     * Must be empty `sourceSnapshot` is set.
     * Updating `sourceImage` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    private @Nullable String sourceImage;
    /**
     * @return Name of the snapshot to use as the source for the disk.
     * Must be empty if `sourceImage` is set.
     * Must be empty if `read_only` is false.
     * Updating `source_snapshot` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    private @Nullable String sourceSnapshot;

    private WorkstationConfigEphemeralDirectoryGcePd() {}
    /**
     * @return Type of the disk to use. Defaults to `&#34;pd-standard&#34;`.
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return Whether the disk is read only. If true, the disk may be shared by multiple VMs and `sourceSnapshot` must be set.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    /**
     * @return Name of the disk image to use as the source for the disk.
     * Must be empty `sourceSnapshot` is set.
     * Updating `sourceImage` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    public Optional<String> sourceImage() {
        return Optional.ofNullable(this.sourceImage);
    }
    /**
     * @return Name of the snapshot to use as the source for the disk.
     * Must be empty if `sourceImage` is set.
     * Must be empty if `read_only` is false.
     * Updating `source_snapshot` will update content in the ephemeral directory after the workstation is restarted.
     * 
     */
    public Optional<String> sourceSnapshot() {
        return Optional.ofNullable(this.sourceSnapshot);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkstationConfigEphemeralDirectoryGcePd defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String diskType;
        private @Nullable Boolean readOnly;
        private @Nullable String sourceImage;
        private @Nullable String sourceSnapshot;
        public Builder() {}
        public Builder(WorkstationConfigEphemeralDirectoryGcePd defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskType = defaults.diskType;
    	      this.readOnly = defaults.readOnly;
    	      this.sourceImage = defaults.sourceImage;
    	      this.sourceSnapshot = defaults.sourceSnapshot;
        }

        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {

            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(@Nullable Boolean readOnly) {

            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder sourceImage(@Nullable String sourceImage) {

            this.sourceImage = sourceImage;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSnapshot(@Nullable String sourceSnapshot) {

            this.sourceSnapshot = sourceSnapshot;
            return this;
        }
        public WorkstationConfigEphemeralDirectoryGcePd build() {
            final var _resultValue = new WorkstationConfigEphemeralDirectoryGcePd();
            _resultValue.diskType = diskType;
            _resultValue.readOnly = readOnly;
            _resultValue.sourceImage = sourceImage;
            _resultValue.sourceSnapshot = sourceSnapshot;
            return _resultValue;
        }
    }
}
