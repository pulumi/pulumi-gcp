// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.container.AwsNodePoolArgs;
import com.pulumi.gcp.container.inputs.AwsNodePoolState;
import com.pulumi.gcp.container.outputs.AwsNodePoolAutoscaling;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfig;
import com.pulumi.gcp.container.outputs.AwsNodePoolManagement;
import com.pulumi.gcp.container.outputs.AwsNodePoolMaxPodsConstraint;
import com.pulumi.gcp.container.outputs.AwsNodePoolUpdateSettings;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An Anthos node pool running on AWS.
 * 
 * For more information, see:
 * * [Multicloud overview](https://cloud.google.com/kubernetes-engine/multi-cloud/docs)
 * ## Example Usage
 * 
 * ### Basic_aws_cluster
 * A basic example of a containeraws node pool
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.ContainerFunctions;
 * import com.pulumi.gcp.container.inputs.GetAwsVersionsArgs;
 * import com.pulumi.gcp.container.AwsCluster;
 * import com.pulumi.gcp.container.AwsClusterArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterAuthorizationArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneAwsServicesAuthenticationArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneConfigEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneDatabaseEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneMainVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterFleetArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterNetworkingArgs;
 * import com.pulumi.gcp.container.AwsNodePool;
 * import com.pulumi.gcp.container.AwsNodePoolArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolAutoscalingArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigConfigEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolMaxPodsConstraintArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolManagementArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var versions = ContainerFunctions.getAwsVersions(GetAwsVersionsArgs.builder()
 *             .project("my-project-name")
 *             .location("us-west1")
 *             .build());
 * 
 *         var primary = new AwsCluster("primary", AwsClusterArgs.builder()
 *             .authorization(AwsClusterAuthorizationArgs.builder()
 *                 .adminUsers(AwsClusterAuthorizationAdminUserArgs.builder()
 *                     .username("my}{@literal @}{@code service-account.com")
 *                     .build())
 *                 .build())
 *             .awsRegion("my-aws-region")
 *             .controlPlane(AwsClusterControlPlaneArgs.builder()
 *                 .awsServicesAuthentication(AwsClusterControlPlaneAwsServicesAuthenticationArgs.builder()
 *                     .roleArn("arn:aws:iam::012345678910:role/my--1p-dev-oneplatform")
 *                     .roleSessionName("my--1p-dev-session")
 *                     .build())
 *                 .configEncryption(AwsClusterControlPlaneConfigEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .databaseEncryption(AwsClusterControlPlaneDatabaseEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .iamInstanceProfile("my--1p-dev-controlplane")
 *                 .subnetIds("subnet-00000000000000000")
 *                 .version(versions.applyValue(getAwsVersionsResult -> getAwsVersionsResult.validVersions()[0]))
 *                 .instanceType("t3.medium")
 *                 .mainVolume(AwsClusterControlPlaneMainVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .proxyConfig(AwsClusterControlPlaneProxyConfigArgs.builder()
 *                     .secretArn("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF")
 *                     .secretVersion("12345678-ABCD-EFGH-IJKL-987654321098")
 *                     .build())
 *                 .rootVolume(AwsClusterControlPlaneRootVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .securityGroupIds("sg-00000000000000000")
 *                 .sshConfig(AwsClusterControlPlaneSshConfigArgs.builder()
 *                     .ec2KeyPair("my--1p-dev-ssh")
 *                     .build())
 *                 .tags(Map.of("owner", "my}{@literal @}{@code service-account.com"))
 *                 .build())
 *             .fleet(AwsClusterFleetArgs.builder()
 *                 .project("my-project-number")
 *                 .build())
 *             .location("us-west1")
 *             .name("name")
 *             .networking(AwsClusterNetworkingArgs.builder()
 *                 .podAddressCidrBlocks("10.2.0.0/16")
 *                 .serviceAddressCidrBlocks("10.1.0.0/16")
 *                 .vpcId("vpc-00000000000000000")
 *                 .build())
 *             .annotations(Map.of("label-one", "value-one"))
 *             .description("A sample aws cluster")
 *             .project("my-project-name")
 *             .build());
 * 
 *         var primaryAwsNodePool = new AwsNodePool("primaryAwsNodePool", AwsNodePoolArgs.builder()
 *             .autoscaling(AwsNodePoolAutoscalingArgs.builder()
 *                 .maxNodeCount(5)
 *                 .minNodeCount(1)
 *                 .build())
 *             .cluster(primary.name())
 *             .config(AwsNodePoolConfigArgs.builder()
 *                 .configEncryption(AwsNodePoolConfigConfigEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .iamInstanceProfile("my--1p-dev-nodepool")
 *                 .instanceType("t3.medium")
 *                 .labels(Map.of("label-one", "value-one"))
 *                 .rootVolume(AwsNodePoolConfigRootVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .securityGroupIds("sg-00000000000000000")
 *                 .proxyConfig(AwsNodePoolConfigProxyConfigArgs.builder()
 *                     .secretArn("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF")
 *                     .secretVersion("12345678-ABCD-EFGH-IJKL-987654321098")
 *                     .build())
 *                 .sshConfig(AwsNodePoolConfigSshConfigArgs.builder()
 *                     .ec2KeyPair("my--1p-dev-ssh")
 *                     .build())
 *                 .tags(Map.of("tag-one", "value-one"))
 *                 .taints(AwsNodePoolConfigTaintArgs.builder()
 *                     .effect("PREFER_NO_SCHEDULE")
 *                     .key("taint-key")
 *                     .value("taint-value")
 *                     .build())
 *                 .build())
 *             .location("us-west1")
 *             .maxPodsConstraint(AwsNodePoolMaxPodsConstraintArgs.builder()
 *                 .maxPodsPerNode(110)
 *                 .build())
 *             .name("node-pool-name")
 *             .subnetId("subnet-00000000000000000")
 *             .version(versions.applyValue(getAwsVersionsResult -> getAwsVersionsResult.validVersions()[0]))
 *             .annotations(Map.of("label-one", "value-one"))
 *             .management(AwsNodePoolManagementArgs.builder()
 *                 .autoRepair(true)
 *                 .build())
 *             .project("my-project-name")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Basic_enum_aws_cluster
 * A basic example of a containeraws node pool with lowercase enums
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.ContainerFunctions;
 * import com.pulumi.gcp.container.inputs.GetAwsVersionsArgs;
 * import com.pulumi.gcp.container.AwsCluster;
 * import com.pulumi.gcp.container.AwsClusterArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterAuthorizationArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneAwsServicesAuthenticationArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneConfigEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneDatabaseEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneMainVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterFleetArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterNetworkingArgs;
 * import com.pulumi.gcp.container.AwsNodePool;
 * import com.pulumi.gcp.container.AwsNodePoolArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolAutoscalingArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigConfigEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolMaxPodsConstraintArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var versions = ContainerFunctions.getAwsVersions(GetAwsVersionsArgs.builder()
 *             .project("my-project-name")
 *             .location("us-west1")
 *             .build());
 * 
 *         var primary = new AwsCluster("primary", AwsClusterArgs.builder()
 *             .authorization(AwsClusterAuthorizationArgs.builder()
 *                 .adminUsers(AwsClusterAuthorizationAdminUserArgs.builder()
 *                     .username("my}{@literal @}{@code service-account.com")
 *                     .build())
 *                 .build())
 *             .awsRegion("my-aws-region")
 *             .controlPlane(AwsClusterControlPlaneArgs.builder()
 *                 .awsServicesAuthentication(AwsClusterControlPlaneAwsServicesAuthenticationArgs.builder()
 *                     .roleArn("arn:aws:iam::012345678910:role/my--1p-dev-oneplatform")
 *                     .roleSessionName("my--1p-dev-session")
 *                     .build())
 *                 .configEncryption(AwsClusterControlPlaneConfigEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .databaseEncryption(AwsClusterControlPlaneDatabaseEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .iamInstanceProfile("my--1p-dev-controlplane")
 *                 .subnetIds("subnet-00000000000000000")
 *                 .version(versions.applyValue(getAwsVersionsResult -> getAwsVersionsResult.validVersions()[0]))
 *                 .instanceType("t3.medium")
 *                 .mainVolume(AwsClusterControlPlaneMainVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .proxyConfig(AwsClusterControlPlaneProxyConfigArgs.builder()
 *                     .secretArn("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF")
 *                     .secretVersion("12345678-ABCD-EFGH-IJKL-987654321098")
 *                     .build())
 *                 .rootVolume(AwsClusterControlPlaneRootVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .securityGroupIds("sg-00000000000000000")
 *                 .sshConfig(AwsClusterControlPlaneSshConfigArgs.builder()
 *                     .ec2KeyPair("my--1p-dev-ssh")
 *                     .build())
 *                 .tags(Map.of("owner", "my}{@literal @}{@code service-account.com"))
 *                 .build())
 *             .fleet(AwsClusterFleetArgs.builder()
 *                 .project("my-project-number")
 *                 .build())
 *             .location("us-west1")
 *             .name("name")
 *             .networking(AwsClusterNetworkingArgs.builder()
 *                 .podAddressCidrBlocks("10.2.0.0/16")
 *                 .serviceAddressCidrBlocks("10.1.0.0/16")
 *                 .vpcId("vpc-00000000000000000")
 *                 .build())
 *             .annotations(Map.of("label-one", "value-one"))
 *             .description("A sample aws cluster")
 *             .project("my-project-name")
 *             .build());
 * 
 *         var primaryAwsNodePool = new AwsNodePool("primaryAwsNodePool", AwsNodePoolArgs.builder()
 *             .autoscaling(AwsNodePoolAutoscalingArgs.builder()
 *                 .maxNodeCount(5)
 *                 .minNodeCount(1)
 *                 .build())
 *             .cluster(primary.name())
 *             .config(AwsNodePoolConfigArgs.builder()
 *                 .configEncryption(AwsNodePoolConfigConfigEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .iamInstanceProfile("my--1p-dev-nodepool")
 *                 .instanceType("t3.medium")
 *                 .labels(Map.of("label-one", "value-one"))
 *                 .rootVolume(AwsNodePoolConfigRootVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("gp3")
 *                     .build())
 *                 .securityGroupIds("sg-00000000000000000")
 *                 .proxyConfig(AwsNodePoolConfigProxyConfigArgs.builder()
 *                     .secretArn("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF")
 *                     .secretVersion("12345678-ABCD-EFGH-IJKL-987654321098")
 *                     .build())
 *                 .sshConfig(AwsNodePoolConfigSshConfigArgs.builder()
 *                     .ec2KeyPair("my--1p-dev-ssh")
 *                     .build())
 *                 .tags(Map.of("tag-one", "value-one"))
 *                 .taints(AwsNodePoolConfigTaintArgs.builder()
 *                     .effect("prefer_no_schedule")
 *                     .key("taint-key")
 *                     .value("taint-value")
 *                     .build())
 *                 .build())
 *             .location("us-west1")
 *             .maxPodsConstraint(AwsNodePoolMaxPodsConstraintArgs.builder()
 *                 .maxPodsPerNode(110)
 *                 .build())
 *             .name("node-pool-name")
 *             .subnetId("subnet-00000000000000000")
 *             .version(versions.applyValue(getAwsVersionsResult -> getAwsVersionsResult.validVersions()[0]))
 *             .annotations(Map.of("label-one", "value-one"))
 *             .project("my-project-name")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Beta_basic_enum_aws_cluster
 * A basic example of a containeraws node pool with lowercase enums (beta)
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.ContainerFunctions;
 * import com.pulumi.gcp.container.inputs.GetAwsVersionsArgs;
 * import com.pulumi.gcp.container.AwsCluster;
 * import com.pulumi.gcp.container.AwsClusterArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterAuthorizationArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneAwsServicesAuthenticationArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneConfigEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneDatabaseEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneMainVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterControlPlaneSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterFleetArgs;
 * import com.pulumi.gcp.container.inputs.AwsClusterNetworkingArgs;
 * import com.pulumi.gcp.container.AwsNodePool;
 * import com.pulumi.gcp.container.AwsNodePoolArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolAutoscalingArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigConfigEncryptionArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolConfigInstancePlacementArgs;
 * import com.pulumi.gcp.container.inputs.AwsNodePoolMaxPodsConstraintArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var versions = ContainerFunctions.getAwsVersions(GetAwsVersionsArgs.builder()
 *             .project("my-project-name")
 *             .location("us-west1")
 *             .build());
 * 
 *         var primary = new AwsCluster("primary", AwsClusterArgs.builder()
 *             .authorization(AwsClusterAuthorizationArgs.builder()
 *                 .adminUsers(AwsClusterAuthorizationAdminUserArgs.builder()
 *                     .username("my}{@literal @}{@code service-account.com")
 *                     .build())
 *                 .build())
 *             .awsRegion("my-aws-region")
 *             .controlPlane(AwsClusterControlPlaneArgs.builder()
 *                 .awsServicesAuthentication(AwsClusterControlPlaneAwsServicesAuthenticationArgs.builder()
 *                     .roleArn("arn:aws:iam::012345678910:role/my--1p-dev-oneplatform")
 *                     .roleSessionName("my--1p-dev-session")
 *                     .build())
 *                 .configEncryption(AwsClusterControlPlaneConfigEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .databaseEncryption(AwsClusterControlPlaneDatabaseEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .iamInstanceProfile("my--1p-dev-controlplane")
 *                 .subnetIds("subnet-00000000000000000")
 *                 .version(versions.applyValue(getAwsVersionsResult -> getAwsVersionsResult.validVersions()[0]))
 *                 .instanceType("t3.medium")
 *                 .mainVolume(AwsClusterControlPlaneMainVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .proxyConfig(AwsClusterControlPlaneProxyConfigArgs.builder()
 *                     .secretArn("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF")
 *                     .secretVersion("12345678-ABCD-EFGH-IJKL-987654321098")
 *                     .build())
 *                 .rootVolume(AwsClusterControlPlaneRootVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("GP3")
 *                     .build())
 *                 .securityGroupIds("sg-00000000000000000")
 *                 .sshConfig(AwsClusterControlPlaneSshConfigArgs.builder()
 *                     .ec2KeyPair("my--1p-dev-ssh")
 *                     .build())
 *                 .tags(Map.of("owner", "my}{@literal @}{@code service-account.com"))
 *                 .build())
 *             .fleet(AwsClusterFleetArgs.builder()
 *                 .project("my-project-number")
 *                 .build())
 *             .location("us-west1")
 *             .name("name")
 *             .networking(AwsClusterNetworkingArgs.builder()
 *                 .podAddressCidrBlocks("10.2.0.0/16")
 *                 .serviceAddressCidrBlocks("10.1.0.0/16")
 *                 .vpcId("vpc-00000000000000000")
 *                 .build())
 *             .annotations(Map.of("label-one", "value-one"))
 *             .description("A sample aws cluster")
 *             .project("my-project-name")
 *             .build());
 * 
 *         var primaryAwsNodePool = new AwsNodePool("primaryAwsNodePool", AwsNodePoolArgs.builder()
 *             .autoscaling(AwsNodePoolAutoscalingArgs.builder()
 *                 .maxNodeCount(5)
 *                 .minNodeCount(1)
 *                 .build())
 *             .cluster(primary.name())
 *             .config(AwsNodePoolConfigArgs.builder()
 *                 .configEncryption(AwsNodePoolConfigConfigEncryptionArgs.builder()
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .build())
 *                 .iamInstanceProfile("my--1p-dev-nodepool")
 *                 .instanceType("t3.medium")
 *                 .labels(Map.of("label-one", "value-one"))
 *                 .rootVolume(AwsNodePoolConfigRootVolumeArgs.builder()
 *                     .iops(3000)
 *                     .kmsKeyArn("arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111")
 *                     .sizeGib(10)
 *                     .volumeType("gp3")
 *                     .build())
 *                 .securityGroupIds("sg-00000000000000000")
 *                 .proxyConfig(AwsNodePoolConfigProxyConfigArgs.builder()
 *                     .secretArn("arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF")
 *                     .secretVersion("12345678-ABCD-EFGH-IJKL-987654321098")
 *                     .build())
 *                 .sshConfig(AwsNodePoolConfigSshConfigArgs.builder()
 *                     .ec2KeyPair("my--1p-dev-ssh")
 *                     .build())
 *                 .tags(Map.of("tag-one", "value-one"))
 *                 .taints(AwsNodePoolConfigTaintArgs.builder()
 *                     .effect("prefer_no_schedule")
 *                     .key("taint-key")
 *                     .value("taint-value")
 *                     .build())
 *                 .instancePlacement(AwsNodePoolConfigInstancePlacementArgs.builder()
 *                     .tenancy("dedicated")
 *                     .build())
 *                 .imageType("ubuntu")
 *                 .build())
 *             .location("us-west1")
 *             .maxPodsConstraint(AwsNodePoolMaxPodsConstraintArgs.builder()
 *                 .maxPodsPerNode(110)
 *                 .build())
 *             .name("node-pool-name")
 *             .subnetId("subnet-00000000000000000")
 *             .version(versions.applyValue(getAwsVersionsResult -> getAwsVersionsResult.validVersions()[0]))
 *             .annotations(Map.of("label-one", "value-one"))
 *             .project("my-project-name")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NodePool can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/awsClusters/{{cluster}}/awsNodePools/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{cluster}}/{{name}}`
 * 
 * * `{{location}}/{{cluster}}/{{name}}`
 * 
 * When using the `pulumi import` command, NodePool can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:container/awsNodePool:AwsNodePool default projects/{{project}}/locations/{{location}}/awsClusters/{{cluster}}/awsNodePools/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:container/awsNodePool:AwsNodePool default {{project}}/{{location}}/{{cluster}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:container/awsNodePool:AwsNodePool default {{location}}/{{cluster}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:container/awsNodePool:AwsNodePool")
public class AwsNodePool extends com.pulumi.resources.CustomResource {
    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Autoscaler configuration for this node pool.
     * 
     */
    @Export(name="autoscaling", refs={AwsNodePoolAutoscaling.class}, tree="[0]")
    private Output<AwsNodePoolAutoscaling> autoscaling;

    /**
     * @return Autoscaler configuration for this node pool.
     * 
     */
    public Output<AwsNodePoolAutoscaling> autoscaling() {
        return this.autoscaling;
    }
    /**
     * The awsCluster for the resource
     * 
     */
    @Export(name="cluster", refs={String.class}, tree="[0]")
    private Output<String> cluster;

    /**
     * @return The awsCluster for the resource
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }
    /**
     * The configuration of the node pool.
     * 
     */
    @Export(name="config", refs={AwsNodePoolConfig.class}, tree="[0]")
    private Output<AwsNodePoolConfig> config;

    /**
     * @return The configuration of the node pool.
     * 
     */
    public Output<AwsNodePoolConfig> config() {
        return this.config;
    }
    /**
     * Output only. The time at which this node pool was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The time at which this node pool was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The Management configuration for this node pool.
     * 
     */
    @Export(name="management", refs={AwsNodePoolManagement.class}, tree="[0]")
    private Output<AwsNodePoolManagement> management;

    /**
     * @return The Management configuration for this node pool.
     * 
     */
    public Output<AwsNodePoolManagement> management() {
        return this.management;
    }
    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Export(name="maxPodsConstraint", refs={AwsNodePoolMaxPodsConstraint.class}, tree="[0]")
    private Output<AwsNodePoolMaxPodsConstraint> maxPodsConstraint;

    /**
     * @return The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    public Output<AwsNodePoolMaxPodsConstraint> maxPodsConstraint() {
        return this.maxPodsConstraint;
    }
    /**
     * The name of this resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project for the resource
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Output only. If set, there are currently changes in flight to the node pool.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return Output only. If set, there are currently changes in flight to the node pool.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Output only. The lifecycle state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. The lifecycle state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The subnet where the node pool node run.
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return The subnet where the node pool node run.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * Output only. A globally unique identifier for the node pool.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. A globally unique identifier for the node pool.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Optional. Update settings control the speed and disruption of the node pool update.
     * 
     */
    @Export(name="updateSettings", refs={AwsNodePoolUpdateSettings.class}, tree="[0]")
    private Output<AwsNodePoolUpdateSettings> updateSettings;

    /**
     * @return Optional. Update settings control the speed and disruption of the node pool update.
     * 
     */
    public Output<AwsNodePoolUpdateSettings> updateSettings() {
        return this.updateSettings;
    }
    /**
     * Output only. The time at which this node pool was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The time at which this node pool was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The Kubernetes version to run on this node pool (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAwsServerConfig.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The Kubernetes version to run on this node pool (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAwsServerConfig.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AwsNodePool(java.lang.String name) {
        this(name, AwsNodePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AwsNodePool(java.lang.String name, AwsNodePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AwsNodePool(java.lang.String name, AwsNodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:container/awsNodePool:AwsNodePool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AwsNodePool(java.lang.String name, Output<java.lang.String> id, @Nullable AwsNodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:container/awsNodePool:AwsNodePool", name, state, makeResourceOptions(options, id), false);
    }

    private static AwsNodePoolArgs makeArgs(AwsNodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AwsNodePoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AwsNodePool get(java.lang.String name, Output<java.lang.String> id, @Nullable AwsNodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AwsNodePool(name, id, state, options);
    }
}
