// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.blockchainnodeengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.blockchainnodeengine.BlockchainNodesArgs;
import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesState;
import com.pulumi.gcp.blockchainnodeengine.outputs.BlockchainNodesConnectionInfo;
import com.pulumi.gcp.blockchainnodeengine.outputs.BlockchainNodesEthereumDetails;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A representation of a blockchain node.
 * 
 * To get more information about BlockchainNodes, see:
 * 
 * * [API documentation](https://cloud.google.com/blockchain-node-engine/docs/reference/rest/v1/projects.locations.blockchainNodes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/blockchain-node-engine)
 * 
 * ## Example Usage
 * 
 * ### Blockchain Nodes Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.blockchainnodeengine.BlockchainNodes;
 * import com.pulumi.gcp.blockchainnodeengine.BlockchainNodesArgs;
 * import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsArgs;
 * import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsValidatorConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultNode = new BlockchainNodes("defaultNode", BlockchainNodesArgs.builder()
 *             .location("us-central1")
 *             .blockchainType("ETHEREUM")
 *             .blockchainNodeId("blockchain_basic_node")
 *             .ethereumDetails(BlockchainNodesEthereumDetailsArgs.builder()
 *                 .apiEnableAdmin(true)
 *                 .apiEnableDebug(true)
 *                 .validatorConfig(BlockchainNodesEthereumDetailsValidatorConfigArgs.builder()
 *                     .mevRelayUrls(                    
 *                         "https://mev1.example.org/",
 *                         "https://mev2.example.org/")
 *                     .build())
 *                 .nodeType("ARCHIVE")
 *                 .consensusClient("LIGHTHOUSE")
 *                 .executionClient("ERIGON")
 *                 .network("MAINNET")
 *                 .build())
 *             .labels(Map.of("environment", "dev"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Blockchain Nodes Geth Details
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.blockchainnodeengine.BlockchainNodes;
 * import com.pulumi.gcp.blockchainnodeengine.BlockchainNodesArgs;
 * import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsArgs;
 * import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsValidatorConfigArgs;
 * import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsGethDetailsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultNodeGeth = new BlockchainNodes("defaultNodeGeth", BlockchainNodesArgs.builder()
 *             .location("us-central1")
 *             .blockchainType("ETHEREUM")
 *             .blockchainNodeId("blockchain_geth_node")
 *             .ethereumDetails(BlockchainNodesEthereumDetailsArgs.builder()
 *                 .apiEnableAdmin(true)
 *                 .apiEnableDebug(true)
 *                 .validatorConfig(BlockchainNodesEthereumDetailsValidatorConfigArgs.builder()
 *                     .mevRelayUrls(                    
 *                         "https://mev1.example.org/",
 *                         "https://mev2.example.org/")
 *                     .build())
 *                 .nodeType("FULL")
 *                 .consensusClient("LIGHTHOUSE")
 *                 .executionClient("GETH")
 *                 .network("MAINNET")
 *                 .gethDetails(BlockchainNodesEthereumDetailsGethDetailsArgs.builder()
 *                     .garbageCollectionMode("FULL")
 *                     .build())
 *                 .build())
 *             .labels(Map.of("environment", "dev"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * BlockchainNodes can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}`
 * 
 * * `{{project}}/{{location}}/{{blockchain_node_id}}`
 * 
 * * `{{location}}/{{blockchain_node_id}}`
 * 
 * When using the `pulumi import` command, BlockchainNodes can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default projects/{{project}}/locations/{{location}}/blockchainNodes/{{blockchain_node_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{project}}/{{location}}/{{blockchain_node_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes default {{location}}/{{blockchain_node_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes")
public class BlockchainNodes extends com.pulumi.resources.CustomResource {
    /**
     * ID of the requesting object.
     * 
     * ***
     * 
     */
    @Export(name="blockchainNodeId", refs={String.class}, tree="[0]")
    private Output<String> blockchainNodeId;

    /**
     * @return ID of the requesting object.
     * 
     * ***
     * 
     */
    public Output<String> blockchainNodeId() {
        return this.blockchainNodeId;
    }
    /**
     * User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     * 
     */
    @Export(name="blockchainType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> blockchainType;

    /**
     * @return User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     * 
     */
    public Output<Optional<String>> blockchainType() {
        return Codegen.optional(this.blockchainType);
    }
    /**
     * The connection information through which to interact with a blockchain node.
     * Structure is documented below.
     * 
     */
    @Export(name="connectionInfos", refs={List.class,BlockchainNodesConnectionInfo.class}, tree="[0,1]")
    private Output<List<BlockchainNodesConnectionInfo>> connectionInfos;

    /**
     * @return The connection information through which to interact with a blockchain node.
     * Structure is documented below.
     * 
     */
    public Output<List<BlockchainNodesConnectionInfo>> connectionInfos() {
        return this.connectionInfos;
    }
    /**
     * The timestamp at which the blockchain node was first created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp at which the blockchain node was first created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * User-provided key-value pairs
     * Structure is documented below.
     * 
     */
    @Export(name="ethereumDetails", refs={BlockchainNodesEthereumDetails.class}, tree="[0]")
    private Output</* @Nullable */ BlockchainNodesEthereumDetails> ethereumDetails;

    /**
     * @return User-provided key-value pairs
     * Structure is documented below.
     * 
     */
    public Output<Optional<BlockchainNodesEthereumDetails>> ethereumDetails() {
        return Codegen.optional(this.ethereumDetails);
    }
    /**
     * User-provided key-value pairs
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return User-provided key-value pairs
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Location of Blockchain Node being created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Location of Blockchain Node being created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The timestamp at which the blockchain node was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp at which the blockchain node was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BlockchainNodes(String name) {
        this(name, BlockchainNodesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BlockchainNodes(String name, BlockchainNodesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BlockchainNodes(String name, BlockchainNodesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private BlockchainNodes(String name, Output<String> id, @Nullable BlockchainNodesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:blockchainnodeengine/blockchainNodes:BlockchainNodes", name, state, makeResourceOptions(options, id));
    }

    private static BlockchainNodesArgs makeArgs(BlockchainNodesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BlockchainNodesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BlockchainNodes get(String name, Output<String> id, @Nullable BlockchainNodesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BlockchainNodes(name, id, state, options);
    }
}
