// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs;
import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringArgs;
import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs Empty = new FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs();

    /**
     * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    @Import(name="auditIntervalSeconds")
    private @Nullable Output<Integer> auditIntervalSeconds;

    /**
     * @return Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    public Optional<Output<Integer>> auditIntervalSeconds() {
        return Optional.ofNullable(this.auditIntervalSeconds);
    }

    /**
     * The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
     * 
     */
    @Import(name="constraintViolationLimit")
    private @Nullable Output<Integer> constraintViolationLimit;

    /**
     * @return The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
     * 
     */
    public Optional<Output<Integer>> constraintViolationLimit() {
        return Optional.ofNullable(this.constraintViolationLimit);
    }

    /**
     * Map of deployment configs to deployments (&#34;admission&#34;, &#34;audit&#34;, &#34;mutation&#34;).
     * 
     */
    @Import(name="deploymentConfigs")
    private @Nullable Output<List<FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs>> deploymentConfigs;

    /**
     * @return Map of deployment configs to deployments (&#34;admission&#34;, &#34;audit&#34;, &#34;mutation&#34;).
     * 
     */
    public Optional<Output<List<FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs>>> deploymentConfigs() {
        return Optional.ofNullable(this.deploymentConfigs);
    }

    /**
     * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    @Import(name="exemptableNamespaces")
    private @Nullable Output<List<String>> exemptableNamespaces;

    /**
     * @return The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    public Optional<Output<List<String>>> exemptableNamespaces() {
        return Optional.ofNullable(this.exemptableNamespaces);
    }

    /**
     * Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
     * 
     */
    @Import(name="installSpec")
    private @Nullable Output<String> installSpec;

    /**
     * @return Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
     * 
     */
    public Optional<Output<String>> installSpec() {
        return Optional.ofNullable(this.installSpec);
    }

    /**
     * Logs all denies and dry run failures.
     * 
     */
    @Import(name="logDeniesEnabled")
    private @Nullable Output<Boolean> logDeniesEnabled;

    /**
     * @return Logs all denies and dry run failures.
     * 
     */
    public Optional<Output<Boolean>> logDeniesEnabled() {
        return Optional.ofNullable(this.logDeniesEnabled);
    }

    /**
     * Specifies the backends Policy Controller should export metrics to. Structure is documented below.
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringArgs> monitoring;

    /**
     * @return Specifies the backends Policy Controller should export metrics to. Structure is documented below.
     * 
     */
    public Optional<Output<FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringArgs>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
     * 
     */
    @Import(name="mutationEnabled")
    private @Nullable Output<Boolean> mutationEnabled;

    /**
     * @return Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
     * 
     */
    public Optional<Output<Boolean>> mutationEnabled() {
        return Optional.ofNullable(this.mutationEnabled);
    }

    /**
     * Specifies the desired policy content on the cluster. Structure is documented below.
     * 
     */
    @Import(name="policyContent")
    private @Nullable Output<FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs> policyContent;

    /**
     * @return Specifies the desired policy content on the cluster. Structure is documented below.
     * 
     */
    public Optional<Output<FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs>> policyContent() {
        return Optional.ofNullable(this.policyContent);
    }

    /**
     * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    @Import(name="referentialRulesEnabled")
    private @Nullable Output<Boolean> referentialRulesEnabled;

    /**
     * @return Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    public Optional<Output<Boolean>> referentialRulesEnabled() {
        return Optional.ofNullable(this.referentialRulesEnabled);
    }

    private FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs() {}

    private FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs(FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs $) {
        this.auditIntervalSeconds = $.auditIntervalSeconds;
        this.constraintViolationLimit = $.constraintViolationLimit;
        this.deploymentConfigs = $.deploymentConfigs;
        this.exemptableNamespaces = $.exemptableNamespaces;
        this.installSpec = $.installSpec;
        this.logDeniesEnabled = $.logDeniesEnabled;
        this.monitoring = $.monitoring;
        this.mutationEnabled = $.mutationEnabled;
        this.policyContent = $.policyContent;
        this.referentialRulesEnabled = $.referentialRulesEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs $;

        public Builder() {
            $ = new FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs();
        }

        public Builder(FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs defaults) {
            $ = new FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditIntervalSeconds Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
         * 
         * @return builder
         * 
         */
        public Builder auditIntervalSeconds(@Nullable Output<Integer> auditIntervalSeconds) {
            $.auditIntervalSeconds = auditIntervalSeconds;
            return this;
        }

        /**
         * @param auditIntervalSeconds Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
         * 
         * @return builder
         * 
         */
        public Builder auditIntervalSeconds(Integer auditIntervalSeconds) {
            return auditIntervalSeconds(Output.of(auditIntervalSeconds));
        }

        /**
         * @param constraintViolationLimit The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
         * 
         * @return builder
         * 
         */
        public Builder constraintViolationLimit(@Nullable Output<Integer> constraintViolationLimit) {
            $.constraintViolationLimit = constraintViolationLimit;
            return this;
        }

        /**
         * @param constraintViolationLimit The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
         * 
         * @return builder
         * 
         */
        public Builder constraintViolationLimit(Integer constraintViolationLimit) {
            return constraintViolationLimit(Output.of(constraintViolationLimit));
        }

        /**
         * @param deploymentConfigs Map of deployment configs to deployments (&#34;admission&#34;, &#34;audit&#34;, &#34;mutation&#34;).
         * 
         * @return builder
         * 
         */
        public Builder deploymentConfigs(@Nullable Output<List<FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs>> deploymentConfigs) {
            $.deploymentConfigs = deploymentConfigs;
            return this;
        }

        /**
         * @param deploymentConfigs Map of deployment configs to deployments (&#34;admission&#34;, &#34;audit&#34;, &#34;mutation&#34;).
         * 
         * @return builder
         * 
         */
        public Builder deploymentConfigs(List<FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs> deploymentConfigs) {
            return deploymentConfigs(Output.of(deploymentConfigs));
        }

        /**
         * @param deploymentConfigs Map of deployment configs to deployments (&#34;admission&#34;, &#34;audit&#34;, &#34;mutation&#34;).
         * 
         * @return builder
         * 
         */
        public Builder deploymentConfigs(FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs... deploymentConfigs) {
            return deploymentConfigs(List.of(deploymentConfigs));
        }

        /**
         * @param exemptableNamespaces The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder exemptableNamespaces(@Nullable Output<List<String>> exemptableNamespaces) {
            $.exemptableNamespaces = exemptableNamespaces;
            return this;
        }

        /**
         * @param exemptableNamespaces The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder exemptableNamespaces(List<String> exemptableNamespaces) {
            return exemptableNamespaces(Output.of(exemptableNamespaces));
        }

        /**
         * @param exemptableNamespaces The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder exemptableNamespaces(String... exemptableNamespaces) {
            return exemptableNamespaces(List.of(exemptableNamespaces));
        }

        /**
         * @param installSpec Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
         * 
         * @return builder
         * 
         */
        public Builder installSpec(@Nullable Output<String> installSpec) {
            $.installSpec = installSpec;
            return this;
        }

        /**
         * @param installSpec Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
         * 
         * @return builder
         * 
         */
        public Builder installSpec(String installSpec) {
            return installSpec(Output.of(installSpec));
        }

        /**
         * @param logDeniesEnabled Logs all denies and dry run failures.
         * 
         * @return builder
         * 
         */
        public Builder logDeniesEnabled(@Nullable Output<Boolean> logDeniesEnabled) {
            $.logDeniesEnabled = logDeniesEnabled;
            return this;
        }

        /**
         * @param logDeniesEnabled Logs all denies and dry run failures.
         * 
         * @return builder
         * 
         */
        public Builder logDeniesEnabled(Boolean logDeniesEnabled) {
            return logDeniesEnabled(Output.of(logDeniesEnabled));
        }

        /**
         * @param monitoring Specifies the backends Policy Controller should export metrics to. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringArgs> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Specifies the backends Policy Controller should export metrics to. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder monitoring(FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringArgs monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param mutationEnabled Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
         * 
         * @return builder
         * 
         */
        public Builder mutationEnabled(@Nullable Output<Boolean> mutationEnabled) {
            $.mutationEnabled = mutationEnabled;
            return this;
        }

        /**
         * @param mutationEnabled Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
         * 
         * @return builder
         * 
         */
        public Builder mutationEnabled(Boolean mutationEnabled) {
            return mutationEnabled(Output.of(mutationEnabled));
        }

        /**
         * @param policyContent Specifies the desired policy content on the cluster. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policyContent(@Nullable Output<FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs> policyContent) {
            $.policyContent = policyContent;
            return this;
        }

        /**
         * @param policyContent Specifies the desired policy content on the cluster. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder policyContent(FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs policyContent) {
            return policyContent(Output.of(policyContent));
        }

        /**
         * @param referentialRulesEnabled Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
         * 
         * @return builder
         * 
         */
        public Builder referentialRulesEnabled(@Nullable Output<Boolean> referentialRulesEnabled) {
            $.referentialRulesEnabled = referentialRulesEnabled;
            return this;
        }

        /**
         * @param referentialRulesEnabled Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
         * 
         * @return builder
         * 
         */
        public Builder referentialRulesEnabled(Boolean referentialRulesEnabled) {
            return referentialRulesEnabled(Output.of(referentialRulesEnabled));
        }

        public FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs build() {
            return $;
        }
    }

}
