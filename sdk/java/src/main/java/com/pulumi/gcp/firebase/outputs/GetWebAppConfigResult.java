// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebAppConfigResult {
    /**
     * @return The API key associated with the web App.
     * 
     */
    private String apiKey;
    /**
     * @return The domain Firebase Auth configures for OAuth redirects, in the format:
     * projectId.firebaseapp.com
     * 
     */
    private String authDomain;
    /**
     * @return The default Firebase Realtime Database URL.
     * 
     */
    private String databaseUrl;
    private String id;
    /**
     * @return The ID of the project&#39;s default GCP resource location. The location is one of the available GCP resource
     * locations.
     * This field is omitted if the default GCP resource location has not been finalized yet. To set your project&#39;s
     * default GCP resource location, call defaultLocation.finalize after you add Firebase services to your project.
     * 
     */
    private String locationId;
    /**
     * @return The unique Google-assigned identifier of the Google Analytics web stream associated with the Firebase Web App.
     * Firebase SDKs use this ID to interact with Google Analytics APIs.
     * This field is only present if the App is linked to a web stream in a Google Analytics App + Web property.
     * Learn more about this ID and Google Analytics web streams in the Analytics documentation.
     * To generate a measurementId and link the Web App with a Google Analytics web stream,
     * call projects.addGoogleAnalytics.
     * 
     */
    private String measurementId;
    /**
     * @return The sender ID for use with Firebase Cloud Messaging.
     * 
     */
    private String messagingSenderId;
    private @Nullable String project;
    /**
     * @return The default Cloud Storage for Firebase storage bucket name.
     * 
     */
    private String storageBucket;
    private String webAppId;

    private GetWebAppConfigResult() {}
    /**
     * @return The API key associated with the web App.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }
    /**
     * @return The domain Firebase Auth configures for OAuth redirects, in the format:
     * projectId.firebaseapp.com
     * 
     */
    public String authDomain() {
        return this.authDomain;
    }
    /**
     * @return The default Firebase Realtime Database URL.
     * 
     */
    public String databaseUrl() {
        return this.databaseUrl;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the project&#39;s default GCP resource location. The location is one of the available GCP resource
     * locations.
     * This field is omitted if the default GCP resource location has not been finalized yet. To set your project&#39;s
     * default GCP resource location, call defaultLocation.finalize after you add Firebase services to your project.
     * 
     */
    public String locationId() {
        return this.locationId;
    }
    /**
     * @return The unique Google-assigned identifier of the Google Analytics web stream associated with the Firebase Web App.
     * Firebase SDKs use this ID to interact with Google Analytics APIs.
     * This field is only present if the App is linked to a web stream in a Google Analytics App + Web property.
     * Learn more about this ID and Google Analytics web streams in the Analytics documentation.
     * To generate a measurementId and link the Web App with a Google Analytics web stream,
     * call projects.addGoogleAnalytics.
     * 
     */
    public String measurementId() {
        return this.measurementId;
    }
    /**
     * @return The sender ID for use with Firebase Cloud Messaging.
     * 
     */
    public String messagingSenderId() {
        return this.messagingSenderId;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return The default Cloud Storage for Firebase storage bucket name.
     * 
     */
    public String storageBucket() {
        return this.storageBucket;
    }
    public String webAppId() {
        return this.webAppId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private String authDomain;
        private String databaseUrl;
        private String id;
        private String locationId;
        private String measurementId;
        private String messagingSenderId;
        private @Nullable String project;
        private String storageBucket;
        private String webAppId;
        public Builder() {}
        public Builder(GetWebAppConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.authDomain = defaults.authDomain;
    	      this.databaseUrl = defaults.databaseUrl;
    	      this.id = defaults.id;
    	      this.locationId = defaults.locationId;
    	      this.measurementId = defaults.measurementId;
    	      this.messagingSenderId = defaults.messagingSenderId;
    	      this.project = defaults.project;
    	      this.storageBucket = defaults.storageBucket;
    	      this.webAppId = defaults.webAppId;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            if (apiKey == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "apiKey");
            }
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder authDomain(String authDomain) {
            if (authDomain == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "authDomain");
            }
            this.authDomain = authDomain;
            return this;
        }
        @CustomType.Setter
        public Builder databaseUrl(String databaseUrl) {
            if (databaseUrl == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "databaseUrl");
            }
            this.databaseUrl = databaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locationId(String locationId) {
            if (locationId == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "locationId");
            }
            this.locationId = locationId;
            return this;
        }
        @CustomType.Setter
        public Builder measurementId(String measurementId) {
            if (measurementId == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "measurementId");
            }
            this.measurementId = measurementId;
            return this;
        }
        @CustomType.Setter
        public Builder messagingSenderId(String messagingSenderId) {
            if (messagingSenderId == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "messagingSenderId");
            }
            this.messagingSenderId = messagingSenderId;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder storageBucket(String storageBucket) {
            if (storageBucket == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "storageBucket");
            }
            this.storageBucket = storageBucket;
            return this;
        }
        @CustomType.Setter
        public Builder webAppId(String webAppId) {
            if (webAppId == null) {
              throw new MissingRequiredPropertyException("GetWebAppConfigResult", "webAppId");
            }
            this.webAppId = webAppId;
            return this;
        }
        public GetWebAppConfigResult build() {
            final var _resultValue = new GetWebAppConfigResult();
            _resultValue.apiKey = apiKey;
            _resultValue.authDomain = authDomain;
            _resultValue.databaseUrl = databaseUrl;
            _resultValue.id = id;
            _resultValue.locationId = locationId;
            _resultValue.measurementId = measurementId;
            _resultValue.messagingSenderId = messagingSenderId;
            _resultValue.project = project;
            _resultValue.storageBucket = storageBucket;
            _resultValue.webAppId = webAppId;
            return _resultValue;
        }
    }
}
