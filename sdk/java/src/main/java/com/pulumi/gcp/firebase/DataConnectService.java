// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.DataConnectServiceArgs;
import com.pulumi.gcp.firebase.inputs.DataConnectServiceState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Firebase Data Connect service.
 * 
 * To get more information about Service, see:
 * 
 * * [API documentation](https://firebase.google.com/docs/reference/data-connect/rest)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/docs/data-connect)
 * 
 * ## Example Usage
 * 
 * ### Firebasedataconnect Service Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.DataConnectService;
 * import com.pulumi.gcp.firebase.DataConnectServiceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Enable Firebase Data Connect API
 *         var fdc = new Service("fdc", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebasedataconnect.googleapis.com")
 *             .disableOnDestroy(false)
 *             .build());
 * 
 *         // Create a Firebase Data Connect service
 *         var default_ = new DataConnectService("default", DataConnectServiceArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .serviceId("example-service")
 *             .deletionPolicy("DEFAULT")
 *             .labels(Map.of("label", "my-label"))
 *             .annotations(Map.ofEntries(
 *                 Map.entry("key1", "value1"),
 *                 Map.entry("key2", "value2")
 *             ))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fdc)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Firebasedataconnect Service With Force Deletion
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.DataConnectService;
 * import com.pulumi.gcp.firebase.DataConnectServiceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Enable Firebase Data Connect API
 *         var fdc = new Service("fdc", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebasedataconnect.googleapis.com")
 *             .disableOnDestroy(false)
 *             .build());
 * 
 *         // Create a Firebase Data Connect service
 *         var default_ = new DataConnectService("default", DataConnectServiceArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .serviceId("example-service")
 *             .deletionPolicy("FORCE")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fdc)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Service can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/services/{{service_id}}`
 * 
 * * `{{project}}/{{location}}/{{service_id}}`
 * 
 * * `{{location}}/{{service_id}}`
 * 
 * When using the `pulumi import` command, Service can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firebase/dataConnectService:DataConnectService default projects/{{project}}/locations/{{location}}/services/{{service_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{project}}/{{location}}/{{service_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/dataConnectService:DataConnectService default {{location}}/{{service_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/dataConnectService:DataConnectService")
public class DataConnectService extends com.pulumi.resources.CustomResource {
    /**
     * Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Output only. [Output only] Create time stamp.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. [Output only] Create time stamp.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     * 
     */
    @Export(name="deletionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deletionPolicy;

    /**
     * @return The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     * 
     */
    public Output<Optional<String>> deletionPolicy() {
        return Codegen.optional(this.deletionPolicy);
    }
    /**
     * Optional. Mutable human-readable name. 63 character limit.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Optional. Mutable human-readable name. 63 character limit.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Output only. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * [AIP-154](https://google.aip.dev/154)
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Output only. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * [AIP-154](https://google.aip.dev/154)
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The region in which the service resides, e.g. &#34;us-central1&#34; or &#34;asia-east1&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The region in which the service resides, e.g. &#34;us-central1&#34; or &#34;asia-east1&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The relative resource name of the Firebase Data Connect service, in the
     * format:
     * 
     * Note that the service ID is specific to Firebase Data Connect and does not
     * correspond to any of the instance IDs of the underlying data source
     * connections.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The relative resource name of the Firebase Data Connect service, in the
     * format:
     * 
     * Note that the service ID is specific to Firebase Data Connect and does not
     * correspond to any of the instance IDs of the underlying data source
     * connections.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. A field that if true, indicates that the system is working update the
     * service.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return Output only. A field that if true, indicates that the system is working update the
     * service.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Required. The ID to use for the service, which will become the final component of the
     * service&#39;s resource name.
     * 
     * ***
     * 
     */
    @Export(name="serviceId", refs={String.class}, tree="[0]")
    private Output<String> serviceId;

    /**
     * @return Required. The ID to use for the service, which will become the final component of the
     * service&#39;s resource name.
     * 
     * ***
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }
    /**
     * Output only. System-assigned, unique identifier.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. System-assigned, unique identifier.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Output only. [Output only] Update time stamp.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. [Output only] Update time stamp.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataConnectService(java.lang.String name) {
        this(name, DataConnectServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataConnectService(java.lang.String name, DataConnectServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataConnectService(java.lang.String name, DataConnectServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/dataConnectService:DataConnectService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DataConnectService(java.lang.String name, Output<java.lang.String> id, @Nullable DataConnectServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/dataConnectService:DataConnectService", name, state, makeResourceOptions(options, id), false);
    }

    private static DataConnectServiceArgs makeArgs(DataConnectServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DataConnectServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataConnectService get(java.lang.String name, Output<java.lang.String> id, @Nullable DataConnectServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataConnectService(name, id, state, options);
    }
}
