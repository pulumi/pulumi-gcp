// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.firebase.outputs.HostingCustomDomainCertVerification;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HostingCustomDomainCert {
    /**
     * @return The state of the certificate. Only the `CERT_ACTIVE` and
     * `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the
     * state is `PROPAGATING` and Hosting had an active cert for the domain name
     * before, that formerly-active cert provides SSL coverage for the domain name
     * until the current cert propagates.
     * 
     */
    private @Nullable String state;
    /**
     * @return The record&#39;s type, which determines what data the record contains.
     * 
     */
    private @Nullable String type;
    /**
     * @return A set of ACME challenges you can add to your DNS records or existing,
     * non-Hosting hosting provider to allow Hosting to create an SSL certificate
     * for your domain name before you point traffic toward hosting. You can use
     * thse challenges as part of a zero downtime transition from your old
     * provider to Hosting.
     * Structure is documented below.
     * 
     */
    private @Nullable HostingCustomDomainCertVerification verification;

    private HostingCustomDomainCert() {}
    /**
     * @return The state of the certificate. Only the `CERT_ACTIVE` and
     * `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the
     * state is `PROPAGATING` and Hosting had an active cert for the domain name
     * before, that formerly-active cert provides SSL coverage for the domain name
     * until the current cert propagates.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The record&#39;s type, which determines what data the record contains.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return A set of ACME challenges you can add to your DNS records or existing,
     * non-Hosting hosting provider to allow Hosting to create an SSL certificate
     * for your domain name before you point traffic toward hosting. You can use
     * thse challenges as part of a zero downtime transition from your old
     * provider to Hosting.
     * Structure is documented below.
     * 
     */
    public Optional<HostingCustomDomainCertVerification> verification() {
        return Optional.ofNullable(this.verification);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostingCustomDomainCert defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String state;
        private @Nullable String type;
        private @Nullable HostingCustomDomainCertVerification verification;
        public Builder() {}
        public Builder(HostingCustomDomainCert defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.verification = defaults.verification;
        }

        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder verification(@Nullable HostingCustomDomainCertVerification verification) {

            this.verification = verification;
            return this;
        }
        public HostingCustomDomainCert build() {
            final var _resultValue = new HostingCustomDomainCert();
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.verification = verification;
            return _resultValue;
        }
    }
}
