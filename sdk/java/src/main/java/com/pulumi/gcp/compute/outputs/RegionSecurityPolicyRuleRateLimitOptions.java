// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.RegionSecurityPolicyRuleRateLimitOptionsBanThreshold;
import com.pulumi.gcp.compute.outputs.RegionSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig;
import com.pulumi.gcp.compute.outputs.RegionSecurityPolicyRuleRateLimitOptionsRateLimitThreshold;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionSecurityPolicyRuleRateLimitOptions {
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    private @Nullable Integer banDurationSec;
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;.
     * If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionSecurityPolicyRuleRateLimitOptionsBanThreshold banThreshold;
    /**
     * @return Action to take for requests that are under the configured rate limit threshold.
     * Valid option is &#34;allow&#34; only.
     * 
     */
    private @Nullable String conformAction;
    /**
     * @return Determines the key to enforce the rateLimitThreshold on. Possible values are:
     * * ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if &#34;enforceOnKey&#34; is not configured.
     * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
     * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
     * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP.
     * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes.
     * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
     * * REGION_CODE: The country/region from which the request originates.
     * * TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * TLS_JA4_FINGERPRINT: JA4 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * USER_IP: The IP address of the originating client, which is resolved based on &#34;userIpRequestHeaders&#34; configured with the security policy. If there is no &#34;userIpRequestHeaders&#34; configuration or an IP address cannot be resolved from it, the key type defaults to IP.
     *   Possible values are: `ALL`, `IP`, `HTTP_HEADER`, `XFF_IP`, `HTTP_COOKIE`, `HTTP_PATH`, `SNI`, `REGION_CODE`, `TLS_JA3_FINGERPRINT`, `TLS_JA4_FINGERPRINT`, `USER_IP`.
     * 
     */
    private @Nullable String enforceOnKey;
    /**
     * @return If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
     * You can specify up to 3 enforceOnKeyConfigs.
     * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
     * Structure is documented below.
     * 
     */
    private @Nullable List<RegionSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs;
    /**
     * @return Rate limit key name applicable only for the following key types:
     * HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value.
     * HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    private @Nullable String enforceOnKeyName;
    /**
     * @return Action to take for requests that are above the configured rate limit threshold, to deny with a specified HTTP response code.
     * Valid options are deny(STATUS), where valid values for STATUS are 403, 404, 429, and 502.
     * 
     */
    private @Nullable String exceedAction;
    /**
     * @return Threshold at which to begin ratelimiting.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionSecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold;

    private RegionSecurityPolicyRuleRateLimitOptions() {}
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    public Optional<Integer> banDurationSec() {
        return Optional.ofNullable(this.banDurationSec);
    }
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;.
     * If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
     * Structure is documented below.
     * 
     */
    public Optional<RegionSecurityPolicyRuleRateLimitOptionsBanThreshold> banThreshold() {
        return Optional.ofNullable(this.banThreshold);
    }
    /**
     * @return Action to take for requests that are under the configured rate limit threshold.
     * Valid option is &#34;allow&#34; only.
     * 
     */
    public Optional<String> conformAction() {
        return Optional.ofNullable(this.conformAction);
    }
    /**
     * @return Determines the key to enforce the rateLimitThreshold on. Possible values are:
     * * ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if &#34;enforceOnKey&#34; is not configured.
     * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
     * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
     * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP.
     * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes.
     * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
     * * REGION_CODE: The country/region from which the request originates.
     * * TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * TLS_JA4_FINGERPRINT: JA4 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * USER_IP: The IP address of the originating client, which is resolved based on &#34;userIpRequestHeaders&#34; configured with the security policy. If there is no &#34;userIpRequestHeaders&#34; configuration or an IP address cannot be resolved from it, the key type defaults to IP.
     *   Possible values are: `ALL`, `IP`, `HTTP_HEADER`, `XFF_IP`, `HTTP_COOKIE`, `HTTP_PATH`, `SNI`, `REGION_CODE`, `TLS_JA3_FINGERPRINT`, `TLS_JA4_FINGERPRINT`, `USER_IP`.
     * 
     */
    public Optional<String> enforceOnKey() {
        return Optional.ofNullable(this.enforceOnKey);
    }
    /**
     * @return If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
     * You can specify up to 3 enforceOnKeyConfigs.
     * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
     * Structure is documented below.
     * 
     */
    public List<RegionSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs() {
        return this.enforceOnKeyConfigs == null ? List.of() : this.enforceOnKeyConfigs;
    }
    /**
     * @return Rate limit key name applicable only for the following key types:
     * HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value.
     * HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    public Optional<String> enforceOnKeyName() {
        return Optional.ofNullable(this.enforceOnKeyName);
    }
    /**
     * @return Action to take for requests that are above the configured rate limit threshold, to deny with a specified HTTP response code.
     * Valid options are deny(STATUS), where valid values for STATUS are 403, 404, 429, and 502.
     * 
     */
    public Optional<String> exceedAction() {
        return Optional.ofNullable(this.exceedAction);
    }
    /**
     * @return Threshold at which to begin ratelimiting.
     * Structure is documented below.
     * 
     */
    public Optional<RegionSecurityPolicyRuleRateLimitOptionsRateLimitThreshold> rateLimitThreshold() {
        return Optional.ofNullable(this.rateLimitThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionSecurityPolicyRuleRateLimitOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer banDurationSec;
        private @Nullable RegionSecurityPolicyRuleRateLimitOptionsBanThreshold banThreshold;
        private @Nullable String conformAction;
        private @Nullable String enforceOnKey;
        private @Nullable List<RegionSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs;
        private @Nullable String enforceOnKeyName;
        private @Nullable String exceedAction;
        private @Nullable RegionSecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold;
        public Builder() {}
        public Builder(RegionSecurityPolicyRuleRateLimitOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banDurationSec = defaults.banDurationSec;
    	      this.banThreshold = defaults.banThreshold;
    	      this.conformAction = defaults.conformAction;
    	      this.enforceOnKey = defaults.enforceOnKey;
    	      this.enforceOnKeyConfigs = defaults.enforceOnKeyConfigs;
    	      this.enforceOnKeyName = defaults.enforceOnKeyName;
    	      this.exceedAction = defaults.exceedAction;
    	      this.rateLimitThreshold = defaults.rateLimitThreshold;
        }

        @CustomType.Setter
        public Builder banDurationSec(@Nullable Integer banDurationSec) {

            this.banDurationSec = banDurationSec;
            return this;
        }
        @CustomType.Setter
        public Builder banThreshold(@Nullable RegionSecurityPolicyRuleRateLimitOptionsBanThreshold banThreshold) {

            this.banThreshold = banThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder conformAction(@Nullable String conformAction) {

            this.conformAction = conformAction;
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKey(@Nullable String enforceOnKey) {

            this.enforceOnKey = enforceOnKey;
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKeyConfigs(@Nullable List<RegionSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig> enforceOnKeyConfigs) {

            this.enforceOnKeyConfigs = enforceOnKeyConfigs;
            return this;
        }
        public Builder enforceOnKeyConfigs(RegionSecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig... enforceOnKeyConfigs) {
            return enforceOnKeyConfigs(List.of(enforceOnKeyConfigs));
        }
        @CustomType.Setter
        public Builder enforceOnKeyName(@Nullable String enforceOnKeyName) {

            this.enforceOnKeyName = enforceOnKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder exceedAction(@Nullable String exceedAction) {

            this.exceedAction = exceedAction;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitThreshold(@Nullable RegionSecurityPolicyRuleRateLimitOptionsRateLimitThreshold rateLimitThreshold) {

            this.rateLimitThreshold = rateLimitThreshold;
            return this;
        }
        public RegionSecurityPolicyRuleRateLimitOptions build() {
            final var _resultValue = new RegionSecurityPolicyRuleRateLimitOptions();
            _resultValue.banDurationSec = banDurationSec;
            _resultValue.banThreshold = banThreshold;
            _resultValue.conformAction = conformAction;
            _resultValue.enforceOnKey = enforceOnKey;
            _resultValue.enforceOnKeyConfigs = enforceOnKeyConfigs;
            _resultValue.enforceOnKeyName = enforceOnKeyName;
            _resultValue.exceedAction = exceedAction;
            _resultValue.rateLimitThreshold = rateLimitThreshold;
            return _resultValue;
        }
    }
}
