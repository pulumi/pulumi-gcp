// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.logging.LogViewArgs;
import com.pulumi.gcp.logging.inputs.LogViewState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The Logging LogView resource
 * 
 * ## Example Usage
 * ### Basic
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var basic = new ProjectBucketConfig(&#34;basic&#34;, ProjectBucketConfigArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .location(&#34;global&#34;)
 *             .retentionDays(30)
 *             .bucketId(&#34;_Default&#34;)
 *             .build());
 * 
 *         var primary = new LogView(&#34;primary&#34;, LogViewArgs.builder()        
 *             .bucket(basic.id())
 *             .description(&#34;A logging view configured with Terraform&#34;)
 *             .filter(&#34;SOURCE(\&#34;projects/myproject\&#34;) AND resource.type = \&#34;gce_instance\&#34; AND LOG_ID(\&#34;stdout\&#34;)&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * LogView can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:logging/logView:LogView default {{parent}}/locations/{{location}}/buckets/{{bucket}}/views/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:logging/logView:LogView")
public class LogView extends com.pulumi.resources.CustomResource {
    /**
     * The bucket of the resource
     * 
     */
    @Export(name="bucket", type=String.class, parameters={})
    private Output<String> bucket;

    /**
     * @return The bucket of the resource
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }
    /**
     * Output only. The creation timestamp of the view.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Output only. The creation timestamp of the view.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Describes this view.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Describes this view.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE(&#34;projects/myproject&#34;) AND resource.type = &#34;gce_instance&#34; AND LOG_ID(&#34;stdout&#34;)
     * 
     */
    @Export(name="filter", type=String.class, parameters={})
    private Output</* @Nullable */ String> filter;

    /**
     * @return Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE(&#34;projects/myproject&#34;) AND resource.type = &#34;gce_instance&#34; AND LOG_ID(&#34;stdout&#34;)
     * 
     */
    public Output<Optional<String>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the view. For example: `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name of the view. For example: `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The parent of the resource.
     * 
     */
    @Export(name="parent", type=String.class, parameters={})
    private Output<String> parent;

    /**
     * @return The parent of the resource.
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }
    /**
     * Output only. The last update timestamp of the view.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Output only. The last update timestamp of the view.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LogView(String name) {
        this(name, LogViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LogView(String name, LogViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LogView(String name, LogViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/logView:LogView", name, args == null ? LogViewArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LogView(String name, Output<String> id, @Nullable LogViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/logView:LogView", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LogView get(String name, Output<String> id, @Nullable LogViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LogView(name, id, state, options);
    }
}
