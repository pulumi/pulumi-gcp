// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTrafficStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTrafficStatusArgs Empty = new ServiceTrafficStatusArgs();

    /**
     * (Output)
     * Specifies percent of the traffic to this Revision.
     * 
     */
    @Import(name="percent")
    private @Nullable Output<Integer> percent;

    /**
     * @return (Output)
     * Specifies percent of the traffic to this Revision.
     * 
     */
    public Optional<Output<Integer>> percent() {
        return Optional.ofNullable(this.percent);
    }

    /**
     * (Output)
     * Revision to which this traffic is sent.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return (Output)
     * Revision to which this traffic is sent.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    /**
     * (Output)
     * Indicates the string used in the URI to exclusively reference this target.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return (Output)
     * Indicates the string used in the URI to exclusively reference this target.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * (Output)
     * The allocation type for this traffic target.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Output)
     * The allocation type for this traffic target.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (Output)
     * Displays the target URI.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return (Output)
     * Displays the target URI.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private ServiceTrafficStatusArgs() {}

    private ServiceTrafficStatusArgs(ServiceTrafficStatusArgs $) {
        this.percent = $.percent;
        this.revision = $.revision;
        this.tag = $.tag;
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTrafficStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTrafficStatusArgs $;

        public Builder() {
            $ = new ServiceTrafficStatusArgs();
        }

        public Builder(ServiceTrafficStatusArgs defaults) {
            $ = new ServiceTrafficStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param percent (Output)
         * Specifies percent of the traffic to this Revision.
         * 
         * @return builder
         * 
         */
        public Builder percent(@Nullable Output<Integer> percent) {
            $.percent = percent;
            return this;
        }

        /**
         * @param percent (Output)
         * Specifies percent of the traffic to this Revision.
         * 
         * @return builder
         * 
         */
        public Builder percent(Integer percent) {
            return percent(Output.of(percent));
        }

        /**
         * @param revision (Output)
         * Revision to which this traffic is sent.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision (Output)
         * Revision to which this traffic is sent.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param tag (Output)
         * Indicates the string used in the URI to exclusively reference this target.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag (Output)
         * Indicates the string used in the URI to exclusively reference this target.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param type (Output)
         * The allocation type for this traffic target.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Output)
         * The allocation type for this traffic target.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri (Output)
         * Displays the target URI.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri (Output)
         * Displays the target URI.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public ServiceTrafficStatusArgs build() {
            return $;
        }
    }

}
