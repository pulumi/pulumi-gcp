// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackupVaultBackupRetentionPolicy {
    /**
     * @return Minimum retention duration in days for backups in the backup vault.
     * 
     */
    private Integer backupMinimumEnforcedRetentionDays;
    /**
     * @return Indicates if the daily backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    private @Nullable Boolean dailyBackupImmutable;
    /**
     * @return Indicates if the manual backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    private @Nullable Boolean manualBackupImmutable;
    /**
     * @return Indicates if the monthly backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    private @Nullable Boolean monthlyBackupImmutable;
    /**
     * @return Indicates if the weekly backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    private @Nullable Boolean weeklyBackupImmutable;

    private BackupVaultBackupRetentionPolicy() {}
    /**
     * @return Minimum retention duration in days for backups in the backup vault.
     * 
     */
    public Integer backupMinimumEnforcedRetentionDays() {
        return this.backupMinimumEnforcedRetentionDays;
    }
    /**
     * @return Indicates if the daily backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    public Optional<Boolean> dailyBackupImmutable() {
        return Optional.ofNullable(this.dailyBackupImmutable);
    }
    /**
     * @return Indicates if the manual backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    public Optional<Boolean> manualBackupImmutable() {
        return Optional.ofNullable(this.manualBackupImmutable);
    }
    /**
     * @return Indicates if the monthly backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    public Optional<Boolean> monthlyBackupImmutable() {
        return Optional.ofNullable(this.monthlyBackupImmutable);
    }
    /**
     * @return Indicates if the weekly backups are immutable. At least one of daily_backup_immutable, weekly_backup_immutable, monthlyBackupImmutable and manualBackupImmutable must be true.
     * 
     */
    public Optional<Boolean> weeklyBackupImmutable() {
        return Optional.ofNullable(this.weeklyBackupImmutable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupVaultBackupRetentionPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer backupMinimumEnforcedRetentionDays;
        private @Nullable Boolean dailyBackupImmutable;
        private @Nullable Boolean manualBackupImmutable;
        private @Nullable Boolean monthlyBackupImmutable;
        private @Nullable Boolean weeklyBackupImmutable;
        public Builder() {}
        public Builder(BackupVaultBackupRetentionPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupMinimumEnforcedRetentionDays = defaults.backupMinimumEnforcedRetentionDays;
    	      this.dailyBackupImmutable = defaults.dailyBackupImmutable;
    	      this.manualBackupImmutable = defaults.manualBackupImmutable;
    	      this.monthlyBackupImmutable = defaults.monthlyBackupImmutable;
    	      this.weeklyBackupImmutable = defaults.weeklyBackupImmutable;
        }

        @CustomType.Setter
        public Builder backupMinimumEnforcedRetentionDays(Integer backupMinimumEnforcedRetentionDays) {
            if (backupMinimumEnforcedRetentionDays == null) {
              throw new MissingRequiredPropertyException("BackupVaultBackupRetentionPolicy", "backupMinimumEnforcedRetentionDays");
            }
            this.backupMinimumEnforcedRetentionDays = backupMinimumEnforcedRetentionDays;
            return this;
        }
        @CustomType.Setter
        public Builder dailyBackupImmutable(@Nullable Boolean dailyBackupImmutable) {

            this.dailyBackupImmutable = dailyBackupImmutable;
            return this;
        }
        @CustomType.Setter
        public Builder manualBackupImmutable(@Nullable Boolean manualBackupImmutable) {

            this.manualBackupImmutable = manualBackupImmutable;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyBackupImmutable(@Nullable Boolean monthlyBackupImmutable) {

            this.monthlyBackupImmutable = monthlyBackupImmutable;
            return this;
        }
        @CustomType.Setter
        public Builder weeklyBackupImmutable(@Nullable Boolean weeklyBackupImmutable) {

            this.weeklyBackupImmutable = weeklyBackupImmutable;
            return this;
        }
        public BackupVaultBackupRetentionPolicy build() {
            final var _resultValue = new BackupVaultBackupRetentionPolicy();
            _resultValue.backupMinimumEnforcedRetentionDays = backupMinimumEnforcedRetentionDays;
            _resultValue.dailyBackupImmutable = dailyBackupImmutable;
            _resultValue.manualBackupImmutable = manualBackupImmutable;
            _resultValue.monthlyBackupImmutable = monthlyBackupImmutable;
            _resultValue.weeklyBackupImmutable = weeklyBackupImmutable;
            return _resultValue;
        }
    }
}
