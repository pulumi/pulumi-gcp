// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetSubnetworkSecondaryIpRange;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubnetworkResult {
    /**
     * @return Description of this subnetwork.
     * 
     */
    private String description;
    /**
     * @return The external IPv6 address range that is assigned to this subnetwork.
     * 
     */
    private String externalIpv6Prefix;
    /**
     * @return The IP address of the gateway.
     * 
     */
    private String gatewayAddress;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The internal IPv6 address range that is assigned to this subnetwork.
     * 
     */
    private String internalIpv6Prefix;
    /**
     * @return The range of IP addresses belonging to this subnetwork
     * secondary range.
     * 
     */
    private String ipCidrRange;
    /**
     * @return The access type of IPv6 address this subnet holds. Possible values are: `EXTERNAL`, `INTERNAL`.
     * 
     */
    private String ipv6AccessType;
    private @Nullable String name;
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    private String network;
    /**
     * @return Whether the VMs in this subnet
     * can access Google services without assigned external IP
     * addresses.
     * 
     */
    private Boolean privateIpGoogleAccess;
    private String project;
    private String region;
    /**
     * @return An array of configurations for secondary IP ranges for
     * VM instances contained in this subnetwork. Structure is documented below.
     * 
     */
    private List<GetSubnetworkSecondaryIpRange> secondaryIpRanges;
    private String selfLink;
    /**
     * @return The stack type for the subnet. Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
     * 
     */
    private String stackType;
    /**
     * @return The numeric ID of the resource.
     * 
     */
    private Integer subnetworkId;

    private GetSubnetworkResult() {}
    /**
     * @return Description of this subnetwork.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The external IPv6 address range that is assigned to this subnetwork.
     * 
     */
    public String externalIpv6Prefix() {
        return this.externalIpv6Prefix;
    }
    /**
     * @return The IP address of the gateway.
     * 
     */
    public String gatewayAddress() {
        return this.gatewayAddress;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The internal IPv6 address range that is assigned to this subnetwork.
     * 
     */
    public String internalIpv6Prefix() {
        return this.internalIpv6Prefix;
    }
    /**
     * @return The range of IP addresses belonging to this subnetwork
     * secondary range.
     * 
     */
    public String ipCidrRange() {
        return this.ipCidrRange;
    }
    /**
     * @return The access type of IPv6 address this subnet holds. Possible values are: `EXTERNAL`, `INTERNAL`.
     * 
     */
    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return Whether the VMs in this subnet
     * can access Google services without assigned external IP
     * addresses.
     * 
     */
    public Boolean privateIpGoogleAccess() {
        return this.privateIpGoogleAccess;
    }
    public String project() {
        return this.project;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return An array of configurations for secondary IP ranges for
     * VM instances contained in this subnetwork. Structure is documented below.
     * 
     */
    public List<GetSubnetworkSecondaryIpRange> secondaryIpRanges() {
        return this.secondaryIpRanges;
    }
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The stack type for the subnet. Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return The numeric ID of the resource.
     * 
     */
    public Integer subnetworkId() {
        return this.subnetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String externalIpv6Prefix;
        private String gatewayAddress;
        private String id;
        private String internalIpv6Prefix;
        private String ipCidrRange;
        private String ipv6AccessType;
        private @Nullable String name;
        private String network;
        private Boolean privateIpGoogleAccess;
        private String project;
        private String region;
        private List<GetSubnetworkSecondaryIpRange> secondaryIpRanges;
        private String selfLink;
        private String stackType;
        private Integer subnetworkId;
        public Builder() {}
        public Builder(GetSubnetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.externalIpv6Prefix = defaults.externalIpv6Prefix;
    	      this.gatewayAddress = defaults.gatewayAddress;
    	      this.id = defaults.id;
    	      this.internalIpv6Prefix = defaults.internalIpv6Prefix;
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.privateIpGoogleAccess = defaults.privateIpGoogleAccess;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.secondaryIpRanges = defaults.secondaryIpRanges;
    	      this.selfLink = defaults.selfLink;
    	      this.stackType = defaults.stackType;
    	      this.subnetworkId = defaults.subnetworkId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalIpv6Prefix(String externalIpv6Prefix) {
            if (externalIpv6Prefix == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "externalIpv6Prefix");
            }
            this.externalIpv6Prefix = externalIpv6Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayAddress(String gatewayAddress) {
            if (gatewayAddress == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "gatewayAddress");
            }
            this.gatewayAddress = gatewayAddress;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalIpv6Prefix(String internalIpv6Prefix) {
            if (internalIpv6Prefix == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "internalIpv6Prefix");
            }
            this.internalIpv6Prefix = internalIpv6Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder ipCidrRange(String ipCidrRange) {
            if (ipCidrRange == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "ipCidrRange");
            }
            this.ipCidrRange = ipCidrRange;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AccessType(String ipv6AccessType) {
            if (ipv6AccessType == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "ipv6AccessType");
            }
            this.ipv6AccessType = ipv6AccessType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpGoogleAccess(Boolean privateIpGoogleAccess) {
            if (privateIpGoogleAccess == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "privateIpGoogleAccess");
            }
            this.privateIpGoogleAccess = privateIpGoogleAccess;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpRanges(List<GetSubnetworkSecondaryIpRange> secondaryIpRanges) {
            if (secondaryIpRanges == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "secondaryIpRanges");
            }
            this.secondaryIpRanges = secondaryIpRanges;
            return this;
        }
        public Builder secondaryIpRanges(GetSubnetworkSecondaryIpRange... secondaryIpRanges) {
            return secondaryIpRanges(List.of(secondaryIpRanges));
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder stackType(String stackType) {
            if (stackType == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "stackType");
            }
            this.stackType = stackType;
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkId(Integer subnetworkId) {
            if (subnetworkId == null) {
              throw new MissingRequiredPropertyException("GetSubnetworkResult", "subnetworkId");
            }
            this.subnetworkId = subnetworkId;
            return this;
        }
        public GetSubnetworkResult build() {
            final var _resultValue = new GetSubnetworkResult();
            _resultValue.description = description;
            _resultValue.externalIpv6Prefix = externalIpv6Prefix;
            _resultValue.gatewayAddress = gatewayAddress;
            _resultValue.id = id;
            _resultValue.internalIpv6Prefix = internalIpv6Prefix;
            _resultValue.ipCidrRange = ipCidrRange;
            _resultValue.ipv6AccessType = ipv6AccessType;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.privateIpGoogleAccess = privateIpGoogleAccess;
            _resultValue.project = project;
            _resultValue.region = region;
            _resultValue.secondaryIpRanges = secondaryIpRanges;
            _resultValue.selfLink = selfLink;
            _resultValue.stackType = stackType;
            _resultValue.subnetworkId = subnetworkId;
            return _resultValue;
        }
    }
}
