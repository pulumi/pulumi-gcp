// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerEnv;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerEnvFrom;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerLivenessProbe;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerPort;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerResource;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerStartupProbe;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainerVolumeMount;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTemplateSpecContainer {
    /**
     * @return Arguments to the entrypoint.
     * The docker image&#39;s CMD is used if this is not provided.
     * 
     */
    private List<String> args;
    /**
     * @return Entrypoint array. Not executed within a shell.
     * The docker image&#39;s ENTRYPOINT is used if this is not provided.
     * 
     */
    private List<String> commands;
    /**
     * @return List of sources to populate environment variables in the container.
     * All invalid keys will be reported as an event when the container is starting.
     * When a key exists in multiple sources, the value associated with the last source will
     * take precedence. Values defined by an Env with a duplicate key will take
     * precedence.
     * 
     */
    private List<GetServiceTemplateSpecContainerEnvFrom> envFroms;
    /**
     * @return List of environment variables to set in the container.
     * 
     */
    private List<GetServiceTemplateSpecContainerEnv> envs;
    /**
     * @return Docker image name. This is most often a reference to a container located
     * in the container registry, such as gcr.io/cloudrun/hello
     * 
     */
    private String image;
    /**
     * @return Periodic probe of container liveness. Container will be restarted if the probe fails.
     * 
     */
    private List<GetServiceTemplateSpecContainerLivenessProbe> livenessProbes;
    /**
     * @return The name of the Cloud Run Service.
     * 
     */
    private String name;
    /**
     * @return List of open ports in the container.
     * 
     */
    private List<GetServiceTemplateSpecContainerPort> ports;
    /**
     * @return Compute Resources required by this container. Used to set values such as max memory
     * 
     */
    private List<GetServiceTemplateSpecContainerResource> resources;
    /**
     * @return Startup probe of application within the container.
     * All other probes are disabled if a startup probe is provided, until it
     * succeeds. Container will not be added to service endpoints if the probe fails.
     * 
     */
    private List<GetServiceTemplateSpecContainerStartupProbe> startupProbes;
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Only supports SecretVolumeSources.
     * 
     */
    private List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts;
    /**
     * @return Container&#39;s working directory.
     * If not specified, the container runtime&#39;s default will be used, which
     * might be configured in the container image.
     * 
     */
    private String workingDir;

    private GetServiceTemplateSpecContainer() {}
    /**
     * @return Arguments to the entrypoint.
     * The docker image&#39;s CMD is used if this is not provided.
     * 
     */
    public List<String> args() {
        return this.args;
    }
    /**
     * @return Entrypoint array. Not executed within a shell.
     * The docker image&#39;s ENTRYPOINT is used if this is not provided.
     * 
     */
    public List<String> commands() {
        return this.commands;
    }
    /**
     * @return List of sources to populate environment variables in the container.
     * All invalid keys will be reported as an event when the container is starting.
     * When a key exists in multiple sources, the value associated with the last source will
     * take precedence. Values defined by an Env with a duplicate key will take
     * precedence.
     * 
     */
    public List<GetServiceTemplateSpecContainerEnvFrom> envFroms() {
        return this.envFroms;
    }
    /**
     * @return List of environment variables to set in the container.
     * 
     */
    public List<GetServiceTemplateSpecContainerEnv> envs() {
        return this.envs;
    }
    /**
     * @return Docker image name. This is most often a reference to a container located
     * in the container registry, such as gcr.io/cloudrun/hello
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return Periodic probe of container liveness. Container will be restarted if the probe fails.
     * 
     */
    public List<GetServiceTemplateSpecContainerLivenessProbe> livenessProbes() {
        return this.livenessProbes;
    }
    /**
     * @return The name of the Cloud Run Service.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of open ports in the container.
     * 
     */
    public List<GetServiceTemplateSpecContainerPort> ports() {
        return this.ports;
    }
    /**
     * @return Compute Resources required by this container. Used to set values such as max memory
     * 
     */
    public List<GetServiceTemplateSpecContainerResource> resources() {
        return this.resources;
    }
    /**
     * @return Startup probe of application within the container.
     * All other probes are disabled if a startup probe is provided, until it
     * succeeds. Container will not be added to service endpoints if the probe fails.
     * 
     */
    public List<GetServiceTemplateSpecContainerStartupProbe> startupProbes() {
        return this.startupProbes;
    }
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Only supports SecretVolumeSources.
     * 
     */
    public List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts() {
        return this.volumeMounts;
    }
    /**
     * @return Container&#39;s working directory.
     * If not specified, the container runtime&#39;s default will be used, which
     * might be configured in the container image.
     * 
     */
    public String workingDir() {
        return this.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTemplateSpecContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> args;
        private List<String> commands;
        private List<GetServiceTemplateSpecContainerEnvFrom> envFroms;
        private List<GetServiceTemplateSpecContainerEnv> envs;
        private String image;
        private List<GetServiceTemplateSpecContainerLivenessProbe> livenessProbes;
        private String name;
        private List<GetServiceTemplateSpecContainerPort> ports;
        private List<GetServiceTemplateSpecContainerResource> resources;
        private List<GetServiceTemplateSpecContainerStartupProbe> startupProbes;
        private List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts;
        private String workingDir;
        public Builder() {}
        public Builder(GetServiceTemplateSpecContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.envFroms = defaults.envFroms;
    	      this.envs = defaults.envs;
    	      this.image = defaults.image;
    	      this.livenessProbes = defaults.livenessProbes;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.resources = defaults.resources;
    	      this.startupProbes = defaults.startupProbes;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder args(List<String> args) {
            if (args == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "args");
            }
            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(List<String> commands) {
            if (commands == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "commands");
            }
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder envFroms(List<GetServiceTemplateSpecContainerEnvFrom> envFroms) {
            if (envFroms == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "envFroms");
            }
            this.envFroms = envFroms;
            return this;
        }
        public Builder envFroms(GetServiceTemplateSpecContainerEnvFrom... envFroms) {
            return envFroms(List.of(envFroms));
        }
        @CustomType.Setter
        public Builder envs(List<GetServiceTemplateSpecContainerEnv> envs) {
            if (envs == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "envs");
            }
            this.envs = envs;
            return this;
        }
        public Builder envs(GetServiceTemplateSpecContainerEnv... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder livenessProbes(List<GetServiceTemplateSpecContainerLivenessProbe> livenessProbes) {
            if (livenessProbes == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "livenessProbes");
            }
            this.livenessProbes = livenessProbes;
            return this;
        }
        public Builder livenessProbes(GetServiceTemplateSpecContainerLivenessProbe... livenessProbes) {
            return livenessProbes(List.of(livenessProbes));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetServiceTemplateSpecContainerPort> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "ports");
            }
            this.ports = ports;
            return this;
        }
        public Builder ports(GetServiceTemplateSpecContainerPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder resources(List<GetServiceTemplateSpecContainerResource> resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "resources");
            }
            this.resources = resources;
            return this;
        }
        public Builder resources(GetServiceTemplateSpecContainerResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder startupProbes(List<GetServiceTemplateSpecContainerStartupProbe> startupProbes) {
            if (startupProbes == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "startupProbes");
            }
            this.startupProbes = startupProbes;
            return this;
        }
        public Builder startupProbes(GetServiceTemplateSpecContainerStartupProbe... startupProbes) {
            return startupProbes(List.of(startupProbes));
        }
        @CustomType.Setter
        public Builder volumeMounts(List<GetServiceTemplateSpecContainerVolumeMount> volumeMounts) {
            if (volumeMounts == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "volumeMounts");
            }
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(GetServiceTemplateSpecContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDir(String workingDir) {
            if (workingDir == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecContainer", "workingDir");
            }
            this.workingDir = workingDir;
            return this;
        }
        public GetServiceTemplateSpecContainer build() {
            final var _resultValue = new GetServiceTemplateSpecContainer();
            _resultValue.args = args;
            _resultValue.commands = commands;
            _resultValue.envFroms = envFroms;
            _resultValue.envs = envs;
            _resultValue.image = image;
            _resultValue.livenessProbes = livenessProbes;
            _resultValue.name = name;
            _resultValue.ports = ports;
            _resultValue.resources = resources;
            _resultValue.startupProbes = startupProbes;
            _resultValue.volumeMounts = volumeMounts;
            _resultValue.workingDir = workingDir;
            return _resultValue;
        }
    }
}
