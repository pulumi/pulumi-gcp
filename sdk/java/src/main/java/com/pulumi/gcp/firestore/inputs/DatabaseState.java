// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseState Empty = new DatabaseState();

    /**
     * The App Engine integration mode to use for this database.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="appEngineIntegrationMode")
    private @Nullable Output<String> appEngineIntegrationMode;

    /**
     * @return The App Engine integration mode to use for this database.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    public Optional<Output<String>> appEngineIntegrationMode() {
        return Optional.ofNullable(this.appEngineIntegrationMode);
    }

    /**
     * The concurrency control mode to use for this database.
     * Possible values are: `OPTIMISTIC`, `PESSIMISTIC`, `OPTIMISTIC_WITH_ENTITY_GROUPS`.
     * 
     */
    @Import(name="concurrencyMode")
    private @Nullable Output<String> concurrencyMode;

    /**
     * @return The concurrency control mode to use for this database.
     * Possible values are: `OPTIMISTIC`, `PESSIMISTIC`, `OPTIMISTIC_WITH_ENTITY_GROUPS`.
     * 
     */
    public Optional<Output<String>> concurrencyMode() {
        return Optional.ofNullable(this.concurrencyMode);
    }

    /**
     * Output only. The timestamp at which this database was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The timestamp at which this database was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * State of delete protection for the database.
     * Possible values are: `DELETE_PROTECTION_STATE_UNSPECIFIED`, `DELETE_PROTECTION_ENABLED`, `DELETE_PROTECTION_DISABLED`.
     * 
     */
    @Import(name="deleteProtectionState")
    private @Nullable Output<String> deleteProtectionState;

    /**
     * @return State of delete protection for the database.
     * Possible values are: `DELETE_PROTECTION_STATE_UNSPECIFIED`, `DELETE_PROTECTION_ENABLED`, `DELETE_PROTECTION_DISABLED`.
     * 
     */
    public Optional<Output<String>> deleteProtectionState() {
        return Optional.ofNullable(this.deleteProtectionState);
    }

    /**
     * Output only. The earliest timestamp at which older versions of the data can be read from the database. See versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod.
     * This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="earliestVersionTime")
    private @Nullable Output<String> earliestVersionTime;

    /**
     * @return Output only. The earliest timestamp at which older versions of the data can be read from the database. See versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod.
     * This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> earliestVersionTime() {
        return Optional.ofNullable(this.earliestVersionTime);
    }

    /**
     * Output only. This checksum is computed by the server based on the value of other fields,
     * and may be sent on update and delete requests to ensure the client has an
     * up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Output only. This checksum is computed by the server based on the value of other fields,
     * and may be sent on update and delete requests to ensure the client has an
     * up-to-date value before proceeding.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Output only. The keyPrefix for this database.
     * This keyPrefix is used, in combination with the project id (&#34;~&#34;) to construct the application id
     * that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes.
     * This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
     * 
     */
    @Import(name="keyPrefix")
    private @Nullable Output<String> keyPrefix;

    /**
     * @return Output only. The keyPrefix for this database.
     * This keyPrefix is used, in combination with the project id (&#34;~&#34;) to construct the application id
     * that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes.
     * This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
     * 
     */
    public Optional<Output<String>> keyPrefix() {
        return Optional.ofNullable(this.keyPrefix);
    }

    /**
     * The location of the database. Available locations are listed at
     * https://cloud.google.com/firestore/docs/locations.
     * 
     */
    @Import(name="locationId")
    private @Nullable Output<String> locationId;

    /**
     * @return The location of the database. Available locations are listed at
     * https://cloud.google.com/firestore/docs/locations.
     * 
     */
    public Optional<Output<String>> locationId() {
        return Optional.ofNullable(this.locationId);
    }

    /**
     * The ID to use for the database, which will become the final
     * component of the database&#39;s resource name. This value should be 4-63
     * characters. Valid characters are /[a-z][0-9]-/ with first character
     * a letter and the last a letter or a number. Must not be
     * UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
     * &#34;(default)&#34; database id is also valid.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ID to use for the database, which will become the final
     * component of the database&#39;s resource name. This value should be 4-63
     * characters. Valid characters are /[a-z][0-9]-/ with first character
     * a letter and the last a letter or a number. Must not be
     * UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
     * &#34;(default)&#34; database id is also valid.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether to enable the PITR feature on this database.
     * If `POINT_IN_TIME_RECOVERY_ENABLED` is selected, reads are supported on selected versions of the data from within the past 7 days.
     * versionRetentionPeriod and earliestVersionTime can be used to determine the supported versions. These include reads against any timestamp within the past hour
     * and reads against 1-minute snapshots beyond 1 hour and within 7 days.
     * If `POINT_IN_TIME_RECOVERY_DISABLED` is selected, reads are supported on any version of the data from within the past 1 hour.
     * Default value is `POINT_IN_TIME_RECOVERY_DISABLED`.
     * Possible values are: `POINT_IN_TIME_RECOVERY_ENABLED`, `POINT_IN_TIME_RECOVERY_DISABLED`.
     * 
     */
    @Import(name="pointInTimeRecoveryEnablement")
    private @Nullable Output<String> pointInTimeRecoveryEnablement;

    /**
     * @return Whether to enable the PITR feature on this database.
     * If `POINT_IN_TIME_RECOVERY_ENABLED` is selected, reads are supported on selected versions of the data from within the past 7 days.
     * versionRetentionPeriod and earliestVersionTime can be used to determine the supported versions. These include reads against any timestamp within the past hour
     * and reads against 1-minute snapshots beyond 1 hour and within 7 days.
     * If `POINT_IN_TIME_RECOVERY_DISABLED` is selected, reads are supported on any version of the data from within the past 1 hour.
     * Default value is `POINT_IN_TIME_RECOVERY_DISABLED`.
     * Possible values are: `POINT_IN_TIME_RECOVERY_ENABLED`, `POINT_IN_TIME_RECOVERY_DISABLED`.
     * 
     */
    public Optional<Output<String>> pointInTimeRecoveryEnablement() {
        return Optional.ofNullable(this.pointInTimeRecoveryEnablement);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The type of the database.
     * See https://cloud.google.com/datastore/docs/firestore-or-datastore
     * for information about how to choose.
     * Possible values are: `FIRESTORE_NATIVE`, `DATASTORE_MODE`.
     * 
     * ***
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the database.
     * See https://cloud.google.com/datastore/docs/firestore-or-datastore
     * for information about how to choose.
     * Possible values are: `FIRESTORE_NATIVE`, `DATASTORE_MODE`.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Output only. The system-generated UUID4 for this Database.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. The system-generated UUID4 for this Database.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. The timestamp at which this database was most recently updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The timestamp at which this database was most recently updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * Output only. The period during which past versions of data are retained in the database.
     * Any read or query can specify a readTime within this window, and will read the state of the database at that time.
     * If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="versionRetentionPeriod")
    private @Nullable Output<String> versionRetentionPeriod;

    /**
     * @return Output only. The period during which past versions of data are retained in the database.
     * Any read or query can specify a readTime within this window, and will read the state of the database at that time.
     * If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> versionRetentionPeriod() {
        return Optional.ofNullable(this.versionRetentionPeriod);
    }

    private DatabaseState() {}

    private DatabaseState(DatabaseState $) {
        this.appEngineIntegrationMode = $.appEngineIntegrationMode;
        this.concurrencyMode = $.concurrencyMode;
        this.createTime = $.createTime;
        this.deleteProtectionState = $.deleteProtectionState;
        this.earliestVersionTime = $.earliestVersionTime;
        this.etag = $.etag;
        this.keyPrefix = $.keyPrefix;
        this.locationId = $.locationId;
        this.name = $.name;
        this.pointInTimeRecoveryEnablement = $.pointInTimeRecoveryEnablement;
        this.project = $.project;
        this.type = $.type;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.versionRetentionPeriod = $.versionRetentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseState $;

        public Builder() {
            $ = new DatabaseState();
        }

        public Builder(DatabaseState defaults) {
            $ = new DatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appEngineIntegrationMode The App Engine integration mode to use for this database.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder appEngineIntegrationMode(@Nullable Output<String> appEngineIntegrationMode) {
            $.appEngineIntegrationMode = appEngineIntegrationMode;
            return this;
        }

        /**
         * @param appEngineIntegrationMode The App Engine integration mode to use for this database.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder appEngineIntegrationMode(String appEngineIntegrationMode) {
            return appEngineIntegrationMode(Output.of(appEngineIntegrationMode));
        }

        /**
         * @param concurrencyMode The concurrency control mode to use for this database.
         * Possible values are: `OPTIMISTIC`, `PESSIMISTIC`, `OPTIMISTIC_WITH_ENTITY_GROUPS`.
         * 
         * @return builder
         * 
         */
        public Builder concurrencyMode(@Nullable Output<String> concurrencyMode) {
            $.concurrencyMode = concurrencyMode;
            return this;
        }

        /**
         * @param concurrencyMode The concurrency control mode to use for this database.
         * Possible values are: `OPTIMISTIC`, `PESSIMISTIC`, `OPTIMISTIC_WITH_ENTITY_GROUPS`.
         * 
         * @return builder
         * 
         */
        public Builder concurrencyMode(String concurrencyMode) {
            return concurrencyMode(Output.of(concurrencyMode));
        }

        /**
         * @param createTime Output only. The timestamp at which this database was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The timestamp at which this database was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deleteProtectionState State of delete protection for the database.
         * Possible values are: `DELETE_PROTECTION_STATE_UNSPECIFIED`, `DELETE_PROTECTION_ENABLED`, `DELETE_PROTECTION_DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionState(@Nullable Output<String> deleteProtectionState) {
            $.deleteProtectionState = deleteProtectionState;
            return this;
        }

        /**
         * @param deleteProtectionState State of delete protection for the database.
         * Possible values are: `DELETE_PROTECTION_STATE_UNSPECIFIED`, `DELETE_PROTECTION_ENABLED`, `DELETE_PROTECTION_DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder deleteProtectionState(String deleteProtectionState) {
            return deleteProtectionState(Output.of(deleteProtectionState));
        }

        /**
         * @param earliestVersionTime Output only. The earliest timestamp at which older versions of the data can be read from the database. See versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod.
         * This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder earliestVersionTime(@Nullable Output<String> earliestVersionTime) {
            $.earliestVersionTime = earliestVersionTime;
            return this;
        }

        /**
         * @param earliestVersionTime Output only. The earliest timestamp at which older versions of the data can be read from the database. See versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod.
         * This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder earliestVersionTime(String earliestVersionTime) {
            return earliestVersionTime(Output.of(earliestVersionTime));
        }

        /**
         * @param etag Output only. This checksum is computed by the server based on the value of other fields,
         * and may be sent on update and delete requests to ensure the client has an
         * up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Output only. This checksum is computed by the server based on the value of other fields,
         * and may be sent on update and delete requests to ensure the client has an
         * up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param keyPrefix Output only. The keyPrefix for this database.
         * This keyPrefix is used, in combination with the project id (&#34;~&#34;) to construct the application id
         * that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes.
         * This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(@Nullable Output<String> keyPrefix) {
            $.keyPrefix = keyPrefix;
            return this;
        }

        /**
         * @param keyPrefix Output only. The keyPrefix for this database.
         * This keyPrefix is used, in combination with the project id (&#34;~&#34;) to construct the application id
         * that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes.
         * This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(String keyPrefix) {
            return keyPrefix(Output.of(keyPrefix));
        }

        /**
         * @param locationId The location of the database. Available locations are listed at
         * https://cloud.google.com/firestore/docs/locations.
         * 
         * @return builder
         * 
         */
        public Builder locationId(@Nullable Output<String> locationId) {
            $.locationId = locationId;
            return this;
        }

        /**
         * @param locationId The location of the database. Available locations are listed at
         * https://cloud.google.com/firestore/docs/locations.
         * 
         * @return builder
         * 
         */
        public Builder locationId(String locationId) {
            return locationId(Output.of(locationId));
        }

        /**
         * @param name The ID to use for the database, which will become the final
         * component of the database&#39;s resource name. This value should be 4-63
         * characters. Valid characters are /[a-z][0-9]-/ with first character
         * a letter and the last a letter or a number. Must not be
         * UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
         * &#34;(default)&#34; database id is also valid.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ID to use for the database, which will become the final
         * component of the database&#39;s resource name. This value should be 4-63
         * characters. Valid characters are /[a-z][0-9]-/ with first character
         * a letter and the last a letter or a number. Must not be
         * UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
         * &#34;(default)&#34; database id is also valid.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pointInTimeRecoveryEnablement Whether to enable the PITR feature on this database.
         * If `POINT_IN_TIME_RECOVERY_ENABLED` is selected, reads are supported on selected versions of the data from within the past 7 days.
         * versionRetentionPeriod and earliestVersionTime can be used to determine the supported versions. These include reads against any timestamp within the past hour
         * and reads against 1-minute snapshots beyond 1 hour and within 7 days.
         * If `POINT_IN_TIME_RECOVERY_DISABLED` is selected, reads are supported on any version of the data from within the past 1 hour.
         * Default value is `POINT_IN_TIME_RECOVERY_DISABLED`.
         * Possible values are: `POINT_IN_TIME_RECOVERY_ENABLED`, `POINT_IN_TIME_RECOVERY_DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecoveryEnablement(@Nullable Output<String> pointInTimeRecoveryEnablement) {
            $.pointInTimeRecoveryEnablement = pointInTimeRecoveryEnablement;
            return this;
        }

        /**
         * @param pointInTimeRecoveryEnablement Whether to enable the PITR feature on this database.
         * If `POINT_IN_TIME_RECOVERY_ENABLED` is selected, reads are supported on selected versions of the data from within the past 7 days.
         * versionRetentionPeriod and earliestVersionTime can be used to determine the supported versions. These include reads against any timestamp within the past hour
         * and reads against 1-minute snapshots beyond 1 hour and within 7 days.
         * If `POINT_IN_TIME_RECOVERY_DISABLED` is selected, reads are supported on any version of the data from within the past 1 hour.
         * Default value is `POINT_IN_TIME_RECOVERY_DISABLED`.
         * Possible values are: `POINT_IN_TIME_RECOVERY_ENABLED`, `POINT_IN_TIME_RECOVERY_DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeRecoveryEnablement(String pointInTimeRecoveryEnablement) {
            return pointInTimeRecoveryEnablement(Output.of(pointInTimeRecoveryEnablement));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param type The type of the database.
         * See https://cloud.google.com/datastore/docs/firestore-or-datastore
         * for information about how to choose.
         * Possible values are: `FIRESTORE_NATIVE`, `DATASTORE_MODE`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the database.
         * See https://cloud.google.com/datastore/docs/firestore-or-datastore
         * for information about how to choose.
         * Possible values are: `FIRESTORE_NATIVE`, `DATASTORE_MODE`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uid Output only. The system-generated UUID4 for this Database.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. The system-generated UUID4 for this Database.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. The timestamp at which this database was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The timestamp at which this database was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param versionRetentionPeriod Output only. The period during which past versions of data are retained in the database.
         * Any read or query can specify a readTime within this window, and will read the state of the database at that time.
         * If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder versionRetentionPeriod(@Nullable Output<String> versionRetentionPeriod) {
            $.versionRetentionPeriod = versionRetentionPeriod;
            return this;
        }

        /**
         * @param versionRetentionPeriod Output only. The period during which past versions of data are retained in the database.
         * Any read or query can specify a readTime within this window, and will read the state of the database at that time.
         * If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder versionRetentionPeriod(String versionRetentionPeriod) {
            return versionRetentionPeriod(Output.of(versionRetentionPeriod));
        }

        public DatabaseState build() {
            return $;
        }
    }

}
