// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.InstanceFromMachineImageBootDiskInitializeParamsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceFromMachineImageBootDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFromMachineImageBootDiskArgs Empty = new InstanceFromMachineImageBootDiskArgs();

    /**
     * Whether the disk will be auto-deleted when the instance is deleted.
     * 
     */
    @Import(name="autoDelete")
    private @Nullable Output<Boolean> autoDelete;

    /**
     * @return Whether the disk will be auto-deleted when the instance is deleted.
     * 
     */
    public Optional<Output<Boolean>> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }

    /**
     * Name with which attached disk will be accessible under /dev/disk/by-id/
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return Name with which attached disk will be accessible under /dev/disk/by-id/
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
     * 
     */
    @Import(name="diskEncryptionKeyRaw")
    private @Nullable Output<String> diskEncryptionKeyRaw;

    /**
     * @return A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
     * 
     */
    public Optional<Output<String>> diskEncryptionKeyRaw() {
        return Optional.ofNullable(this.diskEncryptionKeyRaw);
    }

    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
     * 
     */
    @Import(name="diskEncryptionKeyRsa")
    private @Nullable Output<String> diskEncryptionKeyRsa;

    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
     * 
     */
    public Optional<Output<String>> diskEncryptionKeyRsa() {
        return Optional.ofNullable(this.diskEncryptionKeyRsa);
    }

    /**
     * The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     * 
     */
    @Import(name="diskEncryptionKeySha256")
    private @Nullable Output<String> diskEncryptionKeySha256;

    /**
     * @return The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     * 
     */
    public Optional<Output<String>> diskEncryptionKeySha256() {
        return Optional.ofNullable(this.diskEncryptionKeySha256);
    }

    /**
     * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
     * 
     */
    @Import(name="diskEncryptionServiceAccount")
    private @Nullable Output<String> diskEncryptionServiceAccount;

    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
     * 
     */
    public Optional<Output<String>> diskEncryptionServiceAccount() {
        return Optional.ofNullable(this.diskEncryptionServiceAccount);
    }

    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images.
     * 
     */
    @Import(name="guestOsFeatures")
    private @Nullable Output<List<String>> guestOsFeatures;

    /**
     * @return A list of features to enable on the guest operating system. Applicable only for bootable images.
     * 
     */
    public Optional<Output<List<String>>> guestOsFeatures() {
        return Optional.ofNullable(this.guestOsFeatures);
    }

    /**
     * Parameters with which a disk was created alongside the instance.
     * 
     */
    @Import(name="initializeParams")
    private @Nullable Output<InstanceFromMachineImageBootDiskInitializeParamsArgs> initializeParams;

    /**
     * @return Parameters with which a disk was created alongside the instance.
     * 
     */
    public Optional<Output<InstanceFromMachineImageBootDiskInitializeParamsArgs>> initializeParams() {
        return Optional.ofNullable(this.initializeParams);
    }

    /**
     * The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with attached_disk and only used for specific cases, please don&#39;t specify this field without advice from Google.)
     * 
     */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    /**
     * @return The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with attached_disk and only used for specific cases, please don&#39;t specify this field without advice from Google.)
     * 
     */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
     * 
     */
    @Import(name="kmsKeySelfLink")
    private @Nullable Output<String> kmsKeySelfLink;

    /**
     * @return The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
     * 
     */
    public Optional<Output<String>> kmsKeySelfLink() {
        return Optional.ofNullable(this.kmsKeySelfLink);
    }

    /**
     * Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name or self_link of the disk attached to this instance.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The name or self_link of the disk attached to this instance.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private InstanceFromMachineImageBootDiskArgs() {}

    private InstanceFromMachineImageBootDiskArgs(InstanceFromMachineImageBootDiskArgs $) {
        this.autoDelete = $.autoDelete;
        this.deviceName = $.deviceName;
        this.diskEncryptionKeyRaw = $.diskEncryptionKeyRaw;
        this.diskEncryptionKeyRsa = $.diskEncryptionKeyRsa;
        this.diskEncryptionKeySha256 = $.diskEncryptionKeySha256;
        this.diskEncryptionServiceAccount = $.diskEncryptionServiceAccount;
        this.guestOsFeatures = $.guestOsFeatures;
        this.initializeParams = $.initializeParams;
        this.interface_ = $.interface_;
        this.kmsKeySelfLink = $.kmsKeySelfLink;
        this.mode = $.mode;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceFromMachineImageBootDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceFromMachineImageBootDiskArgs $;

        public Builder() {
            $ = new InstanceFromMachineImageBootDiskArgs();
        }

        public Builder(InstanceFromMachineImageBootDiskArgs defaults) {
            $ = new InstanceFromMachineImageBootDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoDelete Whether the disk will be auto-deleted when the instance is deleted.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(@Nullable Output<Boolean> autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        /**
         * @param autoDelete Whether the disk will be auto-deleted when the instance is deleted.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(Boolean autoDelete) {
            return autoDelete(Output.of(autoDelete));
        }

        /**
         * @param deviceName Name with which attached disk will be accessible under /dev/disk/by-id/
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName Name with which attached disk will be accessible under /dev/disk/by-id/
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param diskEncryptionKeyRaw A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRaw(@Nullable Output<String> diskEncryptionKeyRaw) {
            $.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            return this;
        }

        /**
         * @param diskEncryptionKeyRaw A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRaw(String diskEncryptionKeyRaw) {
            return diskEncryptionKeyRaw(Output.of(diskEncryptionKeyRaw));
        }

        /**
         * @param diskEncryptionKeyRsa Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRsa(@Nullable Output<String> diskEncryptionKeyRsa) {
            $.diskEncryptionKeyRsa = diskEncryptionKeyRsa;
            return this;
        }

        /**
         * @param diskEncryptionKeyRsa Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeyRsa(String diskEncryptionKeyRsa) {
            return diskEncryptionKeyRsa(Output.of(diskEncryptionKeyRsa));
        }

        /**
         * @param diskEncryptionKeySha256 The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeySha256(@Nullable Output<String> diskEncryptionKeySha256) {
            $.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            return this;
        }

        /**
         * @param diskEncryptionKeySha256 The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKeySha256(String diskEncryptionKeySha256) {
            return diskEncryptionKeySha256(Output.of(diskEncryptionKeySha256));
        }

        /**
         * @param diskEncryptionServiceAccount The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionServiceAccount(@Nullable Output<String> diskEncryptionServiceAccount) {
            $.diskEncryptionServiceAccount = diskEncryptionServiceAccount;
            return this;
        }

        /**
         * @param diskEncryptionServiceAccount The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionServiceAccount(String diskEncryptionServiceAccount) {
            return diskEncryptionServiceAccount(Output.of(diskEncryptionServiceAccount));
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system. Applicable only for bootable images.
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(@Nullable Output<List<String>> guestOsFeatures) {
            $.guestOsFeatures = guestOsFeatures;
            return this;
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system. Applicable only for bootable images.
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(List<String> guestOsFeatures) {
            return guestOsFeatures(Output.of(guestOsFeatures));
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system. Applicable only for bootable images.
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(String... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }

        /**
         * @param initializeParams Parameters with which a disk was created alongside the instance.
         * 
         * @return builder
         * 
         */
        public Builder initializeParams(@Nullable Output<InstanceFromMachineImageBootDiskInitializeParamsArgs> initializeParams) {
            $.initializeParams = initializeParams;
            return this;
        }

        /**
         * @param initializeParams Parameters with which a disk was created alongside the instance.
         * 
         * @return builder
         * 
         */
        public Builder initializeParams(InstanceFromMachineImageBootDiskInitializeParamsArgs initializeParams) {
            return initializeParams(Output.of(initializeParams));
        }

        /**
         * @param interface_ The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with attached_disk and only used for specific cases, please don&#39;t specify this field without advice from Google.)
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with attached_disk and only used for specific cases, please don&#39;t specify this field without advice from Google.)
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param kmsKeySelfLink The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeySelfLink(@Nullable Output<String> kmsKeySelfLink) {
            $.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }

        /**
         * @param kmsKeySelfLink The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link, disk_encryption_key_raw and disk_encryption_key_rsa may be set.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeySelfLink(String kmsKeySelfLink) {
            return kmsKeySelfLink(Output.of(kmsKeySelfLink));
        }

        /**
         * @param mode Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Read/write mode for the disk. One of &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param source The name or self_link of the disk attached to this instance.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The name or self_link of the disk attached to this instance.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public InstanceFromMachineImageBootDiskArgs build() {
            return $;
        }
    }

}
