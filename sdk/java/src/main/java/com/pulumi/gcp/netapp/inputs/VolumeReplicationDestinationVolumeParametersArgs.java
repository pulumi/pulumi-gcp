// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeReplicationDestinationVolumeParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeReplicationDestinationVolumeParametersArgs Empty = new VolumeReplicationDestinationVolumeParametersArgs();

    /**
     * Description for the destination volume.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the destination volume.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Share name for destination volume. If not specified, name of source volume&#39;s share name will be used.
     * 
     */
    @Import(name="shareName")
    private @Nullable Output<String> shareName;

    /**
     * @return Share name for destination volume. If not specified, name of source volume&#39;s share name will be used.
     * 
     */
    public Optional<Output<String>> shareName() {
        return Optional.ofNullable(this.shareName);
    }

    /**
     * Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
     * 
     */
    @Import(name="storagePool", required=true)
    private Output<String> storagePool;

    /**
     * @return Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
     * 
     */
    public Output<String> storagePool() {
        return this.storagePool;
    }

    /**
     * Name for the destination volume to be created. If not specified, the name of the source volume will be used.
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<String> volumeId;

    /**
     * @return Name for the destination volume to be created. If not specified, the name of the source volume will be used.
     * 
     */
    public Optional<Output<String>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    private VolumeReplicationDestinationVolumeParametersArgs() {}

    private VolumeReplicationDestinationVolumeParametersArgs(VolumeReplicationDestinationVolumeParametersArgs $) {
        this.description = $.description;
        this.shareName = $.shareName;
        this.storagePool = $.storagePool;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeReplicationDestinationVolumeParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeReplicationDestinationVolumeParametersArgs $;

        public Builder() {
            $ = new VolumeReplicationDestinationVolumeParametersArgs();
        }

        public Builder(VolumeReplicationDestinationVolumeParametersArgs defaults) {
            $ = new VolumeReplicationDestinationVolumeParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description for the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param shareName Share name for destination volume. If not specified, name of source volume&#39;s share name will be used.
         * 
         * @return builder
         * 
         */
        public Builder shareName(@Nullable Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        /**
         * @param shareName Share name for destination volume. If not specified, name of source volume&#39;s share name will be used.
         * 
         * @return builder
         * 
         */
        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        /**
         * @param storagePool Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
         * 
         * @return builder
         * 
         */
        public Builder storagePool(Output<String> storagePool) {
            $.storagePool = storagePool;
            return this;
        }

        /**
         * @param storagePool Name of an existing storage pool for the destination volume with format: `projects/{{project}}/locations/{{location}}/storagePools/{{poolId}}`
         * 
         * @return builder
         * 
         */
        public Builder storagePool(String storagePool) {
            return storagePool(Output.of(storagePool));
        }

        /**
         * @param volumeId Name for the destination volume to be created. If not specified, the name of the source volume will be used.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId Name for the destination volume to be created. If not specified, the name of the source volume will be used.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public VolumeReplicationDestinationVolumeParametersArgs build() {
            if ($.storagePool == null) {
                throw new MissingRequiredPropertyException("VolumeReplicationDestinationVolumeParametersArgs", "storagePool");
            }
            return $;
        }
    }

}
