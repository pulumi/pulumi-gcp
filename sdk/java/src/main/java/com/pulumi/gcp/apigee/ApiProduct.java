// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apigee.ApiProductArgs;
import com.pulumi.gcp.apigee.inputs.ApiProductState;
import com.pulumi.gcp.apigee.outputs.ApiProductAttribute;
import com.pulumi.gcp.apigee.outputs.ApiProductGraphqlOperationGroup;
import com.pulumi.gcp.apigee.outputs.ApiProductGrpcOperationGroup;
import com.pulumi.gcp.apigee.outputs.ApiProductOperationGroup;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An `ApiProduct` in Apigee.
 * 
 * To get more information about ApiProduct, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts#ApiProduct)
 * * How-to Guides
 *     * [Creating an API product](https://cloud.google.com/apigee/docs/api-platform/publish/what-api-product)
 * 
 * ## Example Usage
 * 
 * ### Apigee Api Product Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.gcp.apigee.ApiProduct;
 * import com.pulumi.gcp.apigee.ApiProductArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
 *             .name("apigee-network")
 *             .build());
 * 
 *         var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
 *             .name("apigee-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(16)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
 *             .network(apigeeNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .projectId(current.project())
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeVpcConnection)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .location("us-central1")
 *             .orgId(apigeeOrg.id())
 *             .peeringCidrRange("SLASH_22")
 *             .build());
 * 
 *         var basicApiProduct = new ApiProduct("basicApiProduct", ApiProductArgs.builder()
 *             .orgId(apigeeOrg.id())
 *             .name("my-product")
 *             .displayName("My Basic API Product")
 *             .approvalType("auto")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeInstance)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Apigee Api Product With Legacy Operation
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.gcp.apigee.ApiProduct;
 * import com.pulumi.gcp.apigee.ApiProductArgs;
 * import com.pulumi.gcp.apigee.inputs.ApiProductAttributeArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
 *             .name("apigee-network")
 *             .build());
 * 
 *         var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
 *             .name("apigee-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(16)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
 *             .network(apigeeNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .projectId(current.project())
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeVpcConnection)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .location("us-central1")
 *             .orgId(apigeeOrg.id())
 *             .peeringCidrRange("SLASH_22")
 *             .build());
 * 
 *         var fullApiProduct = new ApiProduct("fullApiProduct", ApiProductArgs.builder()
 *             .orgId(apigeeOrg.id())
 *             .name("my-product")
 *             .displayName("My full API Product")
 *             .approvalType("auto")
 *             .description("This is a sample API Product created with Terraform.")
 *             .attributes(ApiProductAttributeArgs.builder()
 *                 .name("access")
 *                 .value("private")
 *                 .build())
 *             .environments(            
 *                 "dev",
 *                 "hom")
 *             .proxies("hello-world")
 *             .apiResources(            
 *                 "/",
 *                 "/weather/**")
 *             .scopes(            
 *                 "read:weather",
 *                 "write:reports")
 *             .quota("10000")
 *             .quotaInterval("1")
 *             .quotaTimeUnit("day")
 *             .quotaCounterScope("PROXY")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeInstance)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Apigee Api Product With Attributes
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.gcp.apigee.ApiProduct;
 * import com.pulumi.gcp.apigee.ApiProductArgs;
 * import com.pulumi.gcp.apigee.inputs.ApiProductAttributeArgs;
 * import com.pulumi.gcp.apigee.inputs.ApiProductOperationGroupArgs;
 * import com.pulumi.gcp.apigee.inputs.ApiProductGraphqlOperationGroupArgs;
 * import com.pulumi.gcp.apigee.inputs.ApiProductGrpcOperationGroupArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
 *             .name("apigee-network")
 *             .build());
 * 
 *         var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
 *             .name("apigee-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(16)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
 *             .network(apigeeNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .projectId(current.project())
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeVpcConnection)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .location("us-central1")
 *             .orgId(apigeeOrg.id())
 *             .peeringCidrRange("SLASH_22")
 *             .build());
 * 
 *         var fullApiProduct = new ApiProduct("fullApiProduct", ApiProductArgs.builder()
 *             .orgId(apigeeOrg.id())
 *             .name("my-product")
 *             .displayName("My full API Product")
 *             .approvalType("auto")
 *             .description("This is a sample API Product created with Terraform.")
 *             .quota("10000")
 *             .quotaInterval("1")
 *             .quotaTimeUnit("day")
 *             .quotaCounterScope("PROXY")
 *             .environments(            
 *                 "dev",
 *                 "hom")
 *             .scopes(            
 *                 "read:weather",
 *                 "write:reports")
 *             .attributes(            
 *                 ApiProductAttributeArgs.builder()
 *                     .name("access")
 *                     .value("private")
 *                     .build(),
 *                 ApiProductAttributeArgs.builder()
 *                     .name("custom")
 *                     .value("value")
 *                     .build())
 *             .operationGroup(ApiProductOperationGroupArgs.builder()
 *                 .operationConfigType("proxy")
 *                 .operationConfigs(                
 *                     ApiProductOperationGroupOperationConfigArgs.builder()
 *                         .apiSource("anoter-proxy")
 *                         .operations(ApiProductOperationGroupOperationConfigOperationArgs.builder()
 *                             .resource("/")
 *                             .methods(                            
 *                                 "POST",
 *                                 "GET")
 *                             .build())
 *                         .quota(ApiProductOperationGroupOperationConfigQuotaArgs.builder()
 *                             .limit("1000")
 *                             .interval("5")
 *                             .timeUnit("minute")
 *                             .build())
 *                         .attributes(ApiProductOperationGroupOperationConfigAttributeArgs.builder()
 *                             .name("custom")
 *                             .value("value")
 *                             .build())
 *                         .build(),
 *                     ApiProductOperationGroupOperationConfigArgs.builder()
 *                         .apiSource("hello-world")
 *                         .operations(ApiProductOperationGroupOperationConfigOperationArgs.builder()
 *                             .resource("/test")
 *                             .methods(                            
 *                                 "POST",
 *                                 "GET")
 *                             .build())
 *                         .quota(ApiProductOperationGroupOperationConfigQuotaArgs.builder()
 *                             .limit("10")
 *                             .interval("30")
 *                             .timeUnit("second")
 *                             .build())
 *                         .attributes(ApiProductOperationGroupOperationConfigAttributeArgs.builder()
 *                             .name("custom")
 *                             .value("value")
 *                             .build())
 *                         .build())
 *                 .build())
 *             .graphqlOperationGroup(ApiProductGraphqlOperationGroupArgs.builder()
 *                 .operationConfigType("proxy")
 *                 .operationConfigs(                
 *                     ApiProductGraphqlOperationGroupOperationConfigArgs.builder()
 *                         .apiSource("hello-world")
 *                         .quota(ApiProductGraphqlOperationGroupOperationConfigQuotaArgs.builder()
 *                             .limit("30")
 *                             .interval("50")
 *                             .timeUnit("second")
 *                             .build())
 *                         .operations(ApiProductGraphqlOperationGroupOperationConfigOperationArgs.builder()
 *                             .operationTypes("QUERY")
 *                             .operation("test")
 *                             .build())
 *                         .attributes(ApiProductGraphqlOperationGroupOperationConfigAttributeArgs.builder()
 *                             .name("custom")
 *                             .value("value")
 *                             .build())
 *                         .build(),
 *                     ApiProductGraphqlOperationGroupOperationConfigArgs.builder()
 *                         .apiSource("another-proxy")
 *                         .quota(ApiProductGraphqlOperationGroupOperationConfigQuotaArgs.builder()
 *                             .limit("50000")
 *                             .interval("12")
 *                             .timeUnit("hour")
 *                             .build())
 *                         .operations(ApiProductGraphqlOperationGroupOperationConfigOperationArgs.builder()
 *                             .operationTypes("MUTATION")
 *                             .operation("test")
 *                             .build())
 *                         .attributes(ApiProductGraphqlOperationGroupOperationConfigAttributeArgs.builder()
 *                             .name("custom")
 *                             .value("value")
 *                             .build())
 *                         .build())
 *                 .build())
 *             .grpcOperationGroup(ApiProductGrpcOperationGroupArgs.builder()
 *                 .operationConfigs(                
 *                     ApiProductGrpcOperationGroupOperationConfigArgs.builder()
 *                         .apiSource("another-proxy")
 *                         .service("grpc another test")
 *                         .methods(                        
 *                             "method3",
 *                             "method4")
 *                         .quota(ApiProductGrpcOperationGroupOperationConfigQuotaArgs.builder()
 *                             .limit("1000000")
 *                             .interval("1")
 *                             .timeUnit("month")
 *                             .build())
 *                         .attributes(ApiProductGrpcOperationGroupOperationConfigAttributeArgs.builder()
 *                             .name("graph")
 *                             .value("value")
 *                             .build())
 *                         .build(),
 *                     ApiProductGrpcOperationGroupOperationConfigArgs.builder()
 *                         .apiSource("hello-world")
 *                         .service("grpc test")
 *                         .methods(                        
 *                             "method1",
 *                             "method2")
 *                         .quota(ApiProductGrpcOperationGroupOperationConfigQuotaArgs.builder()
 *                             .limit("5")
 *                             .interval("1")
 *                             .timeUnit("second")
 *                             .build())
 *                         .attributes(ApiProductGrpcOperationGroupOperationConfigAttributeArgs.builder()
 *                             .name("graph")
 *                             .value("value")
 *                             .build())
 *                         .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeInstance)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ApiProduct can be imported using any of these accepted formats:
 * 
 * * `{{org_id}}/apiproducts/{{name}}`
 * 
 * * `{{org_id}}/{{name}}`
 * 
 * When using the `pulumi import` command, ApiProduct can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:apigee/apiProduct:ApiProduct default {{org_id}}/apiproducts/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apigee/apiProduct:ApiProduct default {{org_id}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:apigee/apiProduct:ApiProduct")
public class ApiProduct extends com.pulumi.resources.CustomResource {
    /**
     * Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
     * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
     * 
     */
    @Export(name="apiResources", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> apiResources;

    /**
     * @return Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the proxy.pathsuffix variable.
     * The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the apiResources element is defined to be /forecastrss and the base path defined for the API proxy is /weather, then only requests to /weather/forecastrss are permitted by the API product.
     * 
     */
    public Output<Optional<List<String>>> apiResources() {
        return Codegen.optional(this.apiResources);
    }
    /**
     * Flag that specifies how API keys are approved to access the APIs defined by the API product.
     * Valid values are `auto` or `manual`.
     * Possible values are: `auto`, `manual`.
     * 
     */
    @Export(name="approvalType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> approvalType;

    /**
     * @return Flag that specifies how API keys are approved to access the APIs defined by the API product.
     * Valid values are `auto` or `manual`.
     * Possible values are: `auto`, `manual`.
     * 
     */
    public Output<Optional<String>> approvalType() {
        return Codegen.optional(this.approvalType);
    }
    /**
     * Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
     * Use this property to specify the access level of the API product as either public, private, or internal.
     * Structure is documented below.
     * 
     */
    @Export(name="attributes", refs={List.class,ApiProductAttribute.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ApiProductAttribute>> attributes;

    /**
     * @return Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.
     * Use this property to specify the access level of the API product as either public, private, or internal.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<ApiProductAttribute>>> attributes() {
        return Codegen.optional(this.attributes);
    }
    /**
     * Response only. Creation time of this environment as milliseconds since epoch.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Response only. Creation time of this environment as milliseconds since epoch.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Description of the API product. Include key information about the API product that is not captured by other fields.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the API product. Include key information about the API product that is not captured by other fields.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Name displayed in the UI or developer portal to developers registering for API access.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Name displayed in the UI or developer portal to developers registering for API access.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
     * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
     * 
     */
    @Export(name="environments", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> environments;

    /**
     * @return Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.
     * By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.
     * 
     */
    public Output<Optional<List<String>>> environments() {
        return Codegen.optional(this.environments);
    }
    /**
     * Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
     * Structure is documented below.
     * 
     */
    @Export(name="graphqlOperationGroup", refs={ApiProductGraphqlOperationGroup.class}, tree="[0]")
    private Output</* @Nullable */ ApiProductGraphqlOperationGroup> graphqlOperationGroup;

    /**
     * @return Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ApiProductGraphqlOperationGroup>> graphqlOperationGroup() {
        return Codegen.optional(this.graphqlOperationGroup);
    }
    /**
     * Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
     * Structure is documented below.
     * 
     */
    @Export(name="grpcOperationGroup", refs={ApiProductGrpcOperationGroup.class}, tree="[0]")
    private Output</* @Nullable */ ApiProductGrpcOperationGroup> grpcOperationGroup;

    /**
     * @return Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ApiProductGrpcOperationGroup>> grpcOperationGroup() {
        return Codegen.optional(this.grpcOperationGroup);
    }
    /**
     * Response only. Modified time of this environment as milliseconds since epoch.
     * 
     */
    @Export(name="lastModifiedAt", refs={String.class}, tree="[0]")
    private Output<String> lastModifiedAt;

    /**
     * @return Response only. Modified time of this environment as milliseconds since epoch.
     * 
     */
    public Output<String> lastModifiedAt() {
        return this.lastModifiedAt;
    }
    /**
     * Internal name of the API product.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Internal name of the API product.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
     * Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
     * Structure is documented below.
     * 
     */
    @Export(name="operationGroup", refs={ApiProductOperationGroup.class}, tree="[0]")
    private Output</* @Nullable */ ApiProductOperationGroup> operationGroup;

    /**
     * @return Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the quota setting).
     * Note: The apiResources setting cannot be specified for both the API product and operation group; otherwise the call will fail.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ApiProductOperationGroup>> operationGroup() {
        return Codegen.optional(this.operationGroup);
    }
    /**
     * The Apigee Organization associated with the Apigee API product,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee API product,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
     * Apigee rejects requests to API proxies that are not listed.
     * 
     */
    @Export(name="proxies", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> proxies;

    /**
     * @return Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.
     * Apigee rejects requests to API proxies that are not listed.
     * 
     */
    public Output<Optional<List<String>>> proxies() {
        return Codegen.optional(this.proxies);
    }
    /**
     * Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
     * For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
     * 
     */
    @Export(name="quota", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> quota;

    /**
     * @return Number of request messages permitted per app by this API product for the specified quotaInterval and quotaTimeUnit.
     * For example, a quota of 50, for a quotaInterval of 12 and a quotaTimeUnit of hours means 50 requests are allowed every 12 hours.
     * 
     */
    public Output<Optional<String>> quota() {
        return Codegen.optional(this.quota);
    }
    /**
     * Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
     * Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
     * 
     */
    @Export(name="quotaCounterScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> quotaCounterScope;

    /**
     * @return Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
     * Possible values are: `QUOTA_COUNTER_SCOPE_UNSPECIFIED`, `PROXY`, `OPERATION`.
     * 
     */
    public Output<Optional<String>> quotaCounterScope() {
        return Codegen.optional(this.quotaCounterScope);
    }
    /**
     * Time interval over which the number of request messages is calculated.
     * 
     */
    @Export(name="quotaInterval", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> quotaInterval;

    /**
     * @return Time interval over which the number of request messages is calculated.
     * 
     */
    public Output<Optional<String>> quotaInterval() {
        return Codegen.optional(this.quotaInterval);
    }
    /**
     * Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
     * 
     */
    @Export(name="quotaTimeUnit", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> quotaTimeUnit;

    /**
     * @return Time unit defined for the quotaInterval. Valid values include second, minute, hour, day, month or year.
     * 
     */
    public Output<Optional<String>> quotaTimeUnit() {
        return Codegen.optional(this.quotaTimeUnit);
    }
    /**
     * Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
     * 
     */
    @Export(name="scopes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> scopes;

    /**
     * @return Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
     * 
     */
    public Output<Optional<List<String>>> scopes() {
        return Codegen.optional(this.scopes);
    }
    /**
     * Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
     * 
     */
    @Export(name="space", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> space;

    /**
     * @return Optional. The resource ID of the parent Space. If not set, the parent resource will be the Organization.
     * 
     */
    public Output<Optional<String>> space() {
        return Codegen.optional(this.space);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApiProduct(java.lang.String name) {
        this(name, ApiProductArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApiProduct(java.lang.String name, ApiProductArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApiProduct(java.lang.String name, ApiProductArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/apiProduct:ApiProduct", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ApiProduct(java.lang.String name, Output<java.lang.String> id, @Nullable ApiProductState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/apiProduct:ApiProduct", name, state, makeResourceOptions(options, id), false);
    }

    private static ApiProductArgs makeArgs(ApiProductArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApiProductArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApiProduct get(java.lang.String name, Output<java.lang.String> id, @Nullable ApiProductState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApiProduct(name, id, state, options);
    }
}
