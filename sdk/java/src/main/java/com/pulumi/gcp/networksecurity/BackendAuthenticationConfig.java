// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networksecurity.BackendAuthenticationConfigArgs;
import com.pulumi.gcp.networksecurity.inputs.BackendAuthenticationConfigState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * BackendAuthenticationConfig groups the TrustConfig together with other settings that control how the load balancer authenticates, and expresses its identity to the backend.
 * 
 * To get more information about BackendAuthenticationConfig, see:
 * * How-to Guides
 *     * [Backend mTLS](https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#backend-authentication-config)
 * 
 * ## Example Usage
 * 
 * ### Network Security Backend Authentication Config Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfig;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new BackendAuthenticationConfig("default", BackendAuthenticationConfigArgs.builder()
 *             .name("my-backend-authentication-config")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .wellKnownRoots("PUBLIC_ROOTS")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Network Security Backend Authentication Config Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificatemanager.Certificate;
 * import com.pulumi.gcp.certificatemanager.CertificateArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.CertificateSelfManagedArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.certificatemanager.TrustConfig;
 * import com.pulumi.gcp.certificatemanager.TrustConfigArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.TrustConfigTrustStoreArgs;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfig;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var certificate = new Certificate("certificate", CertificateArgs.builder()
 *             .name("my-certificate")
 *             .labels(Map.of("foo", "bar"))
 *             .location("global")
 *             .selfManaged(CertificateSelfManagedArgs.builder()
 *                 .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/cert.pem")
 *                     .build()).result())
 *                 .pemPrivateKey(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/key.pem")
 *                     .build()).result())
 *                 .build())
 *             .scope("CLIENT_AUTH")
 *             .build());
 * 
 *         var trustConfig = new TrustConfig("trustConfig", TrustConfigArgs.builder()
 *             .name("my-trust-config")
 *             .description("sample description for the trust config")
 *             .location("global")
 *             .trustStores(TrustConfigTrustStoreArgs.builder()
 *                 .trustAnchors(TrustConfigTrustStoreTrustAnchorArgs.builder()
 *                     .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                         .input("test-fixtures/cert.pem")
 *                         .build()).result())
 *                     .build())
 *                 .intermediateCas(TrustConfigTrustStoreIntermediateCaArgs.builder()
 *                     .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                         .input("test-fixtures/cert.pem")
 *                         .build()).result())
 *                     .build())
 *                 .build())
 *             .labels(Map.of("foo", "bar"))
 *             .build());
 * 
 *         var default_ = new BackendAuthenticationConfig("default", BackendAuthenticationConfigArgs.builder()
 *             .name("my-backend-authentication-config")
 *             .labels(Map.of("bar", "foo"))
 *             .location("global")
 *             .description("my description")
 *             .wellKnownRoots("PUBLIC_ROOTS")
 *             .clientCertificate(certificate.id())
 *             .trustConfig(trustConfig.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Backend Service Tls Settings
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfig;
 * import com.pulumi.gcp.networksecurity.BackendAuthenticationConfigArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceTlsSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHealthCheck = new HealthCheck("defaultHealthCheck", HealthCheckArgs.builder()
 *             .name("health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultBackendAuthenticationConfig = new BackendAuthenticationConfig("defaultBackendAuthenticationConfig", BackendAuthenticationConfigArgs.builder()
 *             .name("authentication")
 *             .wellKnownRoots("PUBLIC_ROOTS")
 *             .build());
 * 
 *         var default_ = new BackendService("default", BackendServiceArgs.builder()
 *             .name("backend-service")
 *             .healthChecks(defaultHealthCheck.id())
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .protocol("HTTPS")
 *             .tlsSettings(BackendServiceTlsSettingsArgs.builder()
 *                 .sni("example.com")
 *                 .subjectAltNames(                
 *                     BackendServiceTlsSettingsSubjectAltNameArgs.builder()
 *                         .dnsName("example.com")
 *                         .build(),
 *                     BackendServiceTlsSettingsSubjectAltNameArgs.builder()
 *                         .uniformResourceIdentifier("https://example.com")
 *                         .build())
 *                 .authenticationConfig(defaultBackendAuthenticationConfig.id().applyValue(_id -> String.format("//networksecurity.googleapis.com/%s", _id)))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * BackendAuthenticationConfig can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, BackendAuthenticationConfig can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default projects/{{project}}/locations/{{location}}/backendAuthenticationConfigs/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig")
public class BackendAuthenticationConfig extends com.pulumi.resources.CustomResource {
    /**
     * Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
     * Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
     * 
     */
    @Export(name="clientCertificate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificate;

    /**
     * @return Reference to a Certificate resource from the certificatemanager.googleapis.com namespace.
     * Used by a BackendService to negotiate mTLS when the backend connection uses TLS and the backend requests a client certificate. Must have a CLIENT_AUTH scope.
     * 
     */
    public Output<Optional<String>> clientCertificate() {
        return Codegen.optional(this.clientCertificate);
    }
    /**
     * Time the BackendAuthenticationConfig was created in UTC.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the BackendAuthenticationConfig was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Set of label tags associated with the BackendAuthenticationConfig resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the BackendAuthenticationConfig resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the backend authentication config.
     * The default value is `global`.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the backend authentication config.
     * The default value is `global`.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Name of the BackendAuthenticationConfig resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the BackendAuthenticationConfig resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
     * A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
     * 
     */
    @Export(name="trustConfig", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trustConfig;

    /**
     * @return Reference to a TrustConfig resource from the certificatemanager.googleapis.com namespace.
     * A BackendService uses the chain of trust represented by this TrustConfig, if specified, to validate the server certificates presented by the backend. Required unless wellKnownRoots is set to PUBLIC_ROOTS.
     * 
     */
    public Output<Optional<String>> trustConfig() {
        return Codegen.optional(this.trustConfig);
    }
    /**
     * Time the BackendAuthenticationConfig was updated in UTC.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the BackendAuthenticationConfig was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
     * If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
     * Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
     * Possible values are: `NONE`, `PUBLIC_ROOTS`.
     * 
     */
    @Export(name="wellKnownRoots", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> wellKnownRoots;

    /**
     * @return Well known roots to use for server certificate validation. If set to NONE, the BackendService will only validate server certificates against roots specified in TrustConfig.
     * If set to PUBLIC_ROOTS, the BackendService uses a set of well-known public roots, in addition to any roots specified in the trustConfig field, when validating the server certificates presented by the backend.
     * Validation with these roots is only considered when the TlsSettings.sni field in the BackendService is set. The well-known roots are a set of root CAs managed by Google. CAs in this set can be added or removed without notice.
     * Possible values are: `NONE`, `PUBLIC_ROOTS`.
     * 
     */
    public Output<Optional<String>> wellKnownRoots() {
        return Codegen.optional(this.wellKnownRoots);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendAuthenticationConfig(java.lang.String name) {
        this(name, BackendAuthenticationConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendAuthenticationConfig(java.lang.String name, @Nullable BackendAuthenticationConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendAuthenticationConfig(java.lang.String name, @Nullable BackendAuthenticationConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendAuthenticationConfig(java.lang.String name, Output<java.lang.String> id, @Nullable BackendAuthenticationConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networksecurity/backendAuthenticationConfig:BackendAuthenticationConfig", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendAuthenticationConfigArgs makeArgs(@Nullable BackendAuthenticationConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendAuthenticationConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendAuthenticationConfig get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendAuthenticationConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendAuthenticationConfig(name, id, state, options);
    }
}
