// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretCiphertextState extends com.pulumi.resources.ResourceArgs {

    public static final SecretCiphertextState Empty = new SecretCiphertextState();

    /**
     * The additional authenticated data used for integrity checks during encryption and decryption.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="additionalAuthenticatedData")
    private @Nullable Output<String> additionalAuthenticatedData;

    /**
     * @return The additional authenticated data used for integrity checks during encryption and decryption.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> additionalAuthenticatedData() {
        return Optional.ofNullable(this.additionalAuthenticatedData);
    }

    /**
     * Contains the result of encrypting the provided plaintext, encoded in base64.
     * 
     */
    @Import(name="ciphertext")
    private @Nullable Output<String> ciphertext;

    /**
     * @return Contains the result of encrypting the provided plaintext, encoded in base64.
     * 
     */
    public Optional<Output<String>> ciphertext() {
        return Optional.ofNullable(this.ciphertext);
    }

    /**
     * The full name of the CryptoKey that will be used to encrypt the provided plaintext.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    @Import(name="cryptoKey")
    private @Nullable Output<String> cryptoKey;

    /**
     * @return The full name of the CryptoKey that will be used to encrypt the provided plaintext.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    public Optional<Output<String>> cryptoKey() {
        return Optional.ofNullable(this.cryptoKey);
    }

    /**
     * The plaintext to be encrypted.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="plaintext")
    private @Nullable Output<String> plaintext;

    /**
     * @return The plaintext to be encrypted.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> plaintext() {
        return Optional.ofNullable(this.plaintext);
    }

    private SecretCiphertextState() {}

    private SecretCiphertextState(SecretCiphertextState $) {
        this.additionalAuthenticatedData = $.additionalAuthenticatedData;
        this.ciphertext = $.ciphertext;
        this.cryptoKey = $.cryptoKey;
        this.plaintext = $.plaintext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretCiphertextState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretCiphertextState $;

        public Builder() {
            $ = new SecretCiphertextState();
        }

        public Builder(SecretCiphertextState defaults) {
            $ = new SecretCiphertextState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalAuthenticatedData The additional authenticated data used for integrity checks during encryption and decryption.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalAuthenticatedData(@Nullable Output<String> additionalAuthenticatedData) {
            $.additionalAuthenticatedData = additionalAuthenticatedData;
            return this;
        }

        /**
         * @param additionalAuthenticatedData The additional authenticated data used for integrity checks during encryption and decryption.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalAuthenticatedData(String additionalAuthenticatedData) {
            return additionalAuthenticatedData(Output.of(additionalAuthenticatedData));
        }

        /**
         * @param ciphertext Contains the result of encrypting the provided plaintext, encoded in base64.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(@Nullable Output<String> ciphertext) {
            $.ciphertext = ciphertext;
            return this;
        }

        /**
         * @param ciphertext Contains the result of encrypting the provided plaintext, encoded in base64.
         * 
         * @return builder
         * 
         */
        public Builder ciphertext(String ciphertext) {
            return ciphertext(Output.of(ciphertext));
        }

        /**
         * @param cryptoKey The full name of the CryptoKey that will be used to encrypt the provided plaintext.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(@Nullable Output<String> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey The full name of the CryptoKey that will be used to encrypt the provided plaintext.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        /**
         * @param plaintext The plaintext to be encrypted.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(@Nullable Output<String> plaintext) {
            $.plaintext = plaintext;
            return this;
        }

        /**
         * @param plaintext The plaintext to be encrypted.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(String plaintext) {
            return plaintext(Output.of(plaintext));
        }

        public SecretCiphertextState build() {
            return $;
        }
    }

}
