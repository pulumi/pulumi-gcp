// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    private Boolean autoCreateNetwork;
    private String billingAccount;
    private String folderId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String name;
    /**
     * @return The numeric identifier of the project.
     * 
     */
    private String number;
    private String orgId;
    private @Nullable String projectId;
    private Boolean skipDelete;

    private GetProjectResult() {}
    public Boolean autoCreateNetwork() {
        return this.autoCreateNetwork;
    }
    public String billingAccount() {
        return this.billingAccount;
    }
    public String folderId() {
        return this.folderId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The numeric identifier of the project.
     * 
     */
    public String number() {
        return this.number;
    }
    public String orgId() {
        return this.orgId;
    }
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    public Boolean skipDelete() {
        return this.skipDelete;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoCreateNetwork;
        private String billingAccount;
        private String folderId;
        private String id;
        private Map<String,String> labels;
        private String name;
        private String number;
        private String orgId;
        private @Nullable String projectId;
        private Boolean skipDelete;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoCreateNetwork = defaults.autoCreateNetwork;
    	      this.billingAccount = defaults.billingAccount;
    	      this.folderId = defaults.folderId;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.skipDelete = defaults.skipDelete;
        }

        @CustomType.Setter
        public Builder autoCreateNetwork(Boolean autoCreateNetwork) {
            this.autoCreateNetwork = Objects.requireNonNull(autoCreateNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder billingAccount(String billingAccount) {
            this.billingAccount = Objects.requireNonNull(billingAccount);
            return this;
        }
        @CustomType.Setter
        public Builder folderId(String folderId) {
            this.folderId = Objects.requireNonNull(folderId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder number(String number) {
            this.number = Objects.requireNonNull(number);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            this.orgId = Objects.requireNonNull(orgId);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder skipDelete(Boolean skipDelete) {
            this.skipDelete = Objects.requireNonNull(skipDelete);
            return this;
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.autoCreateNetwork = autoCreateNetwork;
            o.billingAccount = billingAccount;
            o.folderId = folderId;
            o.id = id;
            o.labels = labels;
            o.name = name;
            o.number = number;
            o.orgId = orgId;
            o.projectId = projectId;
            o.skipDelete = skipDelete;
            return o;
        }
    }
}
