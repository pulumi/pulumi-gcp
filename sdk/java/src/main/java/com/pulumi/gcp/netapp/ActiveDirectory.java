// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.netapp.ActiveDirectoryArgs;
import com.pulumi.gcp.netapp.inputs.ActiveDirectoryState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ActiveDirectory is the public representation of the active directory config.
 * 
 * To get more information about ActiveDirectory, see:
 * 
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.activeDirectories)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/active-directory/about-ad)
 * 
 * ## Example Usage
 * 
 * ### Netapp Active Directory Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.netapp.ActiveDirectory;
 * import com.pulumi.gcp.netapp.ActiveDirectoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testActiveDirectoryFull = new ActiveDirectory("testActiveDirectoryFull", ActiveDirectoryArgs.builder()
 *             .name("test-active-directory-full")
 *             .location("us-central1")
 *             .domain("ad.internal")
 *             .dns("172.30.64.3")
 *             .netBiosPrefix("smbserver")
 *             .username("user")
 *             .password("pass")
 *             .aesEncryption(false)
 *             .backupOperators(            
 *                 "test1",
 *                 "test2")
 *             .administrators(            
 *                 "test1",
 *                 "test2")
 *             .description("ActiveDirectory is the public representation of the active directory config.")
 *             .encryptDcConnections(false)
 *             .kdcHostname("hostname")
 *             .kdcIp("10.10.0.11")
 *             .labels(Map.of("foo", "bar"))
 *             .ldapSigning(false)
 *             .nfsUsersWithLdap(false)
 *             .organizationalUnit("CN=Computers")
 *             .securityOperators(            
 *                 "test1",
 *                 "test2")
 *             .site("test-site")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ActiveDirectory can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, ActiveDirectory can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/activeDirectory:ActiveDirectory default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:netapp/activeDirectory:ActiveDirectory")
public class ActiveDirectory extends com.pulumi.resources.CustomResource {
    /**
     * Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     * 
     */
    @Export(name="administrators", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> administrators;

    /**
     * @return Domain user accounts to be added to the local Administrators group of the SMB service. Comma-separated list of domain users or groups. The Domain Admin group is automatically added when the service joins your domain as a hidden group.
     * 
     */
    public Output<Optional<List<String>>> administrators() {
        return Codegen.optional(this.administrators);
    }
    /**
     * Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     * 
     */
    @Export(name="aesEncryption", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> aesEncryption;

    /**
     * @return Enables AES-128 and AES-256 encryption for Kerberos-based communication with Active Directory.
     * 
     */
    public Output<Optional<Boolean>> aesEncryption() {
        return Codegen.optional(this.aesEncryption);
    }
    /**
     * Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     * 
     */
    @Export(name="backupOperators", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> backupOperators;

    /**
     * @return Domain user/group accounts to be added to the Backup Operators group of the SMB service. The Backup Operators group allows members to backup and restore files regardless of whether they have read or write access to the files. Comma-separated list.
     * 
     */
    public Output<Optional<List<String>>> backupOperators() {
        return Codegen.optional(this.backupOperators);
    }
    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Comma separated list of DNS server IP addresses for the Active Directory domain.
     * 
     */
    @Export(name="dns", refs={String.class}, tree="[0]")
    private Output<String> dns;

    /**
     * @return Comma separated list of DNS server IP addresses for the Active Directory domain.
     * 
     */
    public Output<String> dns() {
        return this.dns;
    }
    /**
     * Fully qualified domain name for the Active Directory domain.
     * 
     */
    @Export(name="domain", refs={String.class}, tree="[0]")
    private Output<String> domain;

    /**
     * @return Fully qualified domain name for the Active Directory domain.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     * 
     */
    @Export(name="encryptDcConnections", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> encryptDcConnections;

    /**
     * @return If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
     * 
     */
    public Output<Optional<Boolean>> encryptDcConnections() {
        return Codegen.optional(this.encryptDcConnections);
    }
    /**
     * Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     * 
     */
    @Export(name="kdcHostname", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kdcHostname;

    /**
     * @return Hostname of the Active Directory server used as Kerberos Key Distribution Center. Only required for volumes using kerberized NFSv4.1
     * 
     */
    public Output<Optional<String>> kdcHostname() {
        return Codegen.optional(this.kdcHostname);
    }
    /**
     * IP address of the Active Directory server used as Kerberos Key Distribution Center.
     * 
     */
    @Export(name="kdcIp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kdcIp;

    /**
     * @return IP address of the Active Directory server used as Kerberos Key Distribution Center.
     * 
     */
    public Output<Optional<String>> kdcIp() {
        return Codegen.optional(this.kdcIp);
    }
    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    @Export(name="ldapSigning", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ldapSigning;

    /**
     * @return Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    public Output<Optional<Boolean>> ldapSigning() {
        return Codegen.optional(this.ldapSigning);
    }
    /**
     * Name of the region for the policy to apply to.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Name of the region for the policy to apply to.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the Active Directory pool. Needs to be unique per location.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the Active Directory pool. Needs to be unique per location.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     * 
     */
    @Export(name="netBiosPrefix", refs={String.class}, tree="[0]")
    private Output<String> netBiosPrefix;

    /**
     * @return NetBIOS name prefix of the server to be created.
     * A five-character random ID is generated automatically, for example, -6f9a, and appended to the prefix. The full UNC share path will have the following format:
     * `\\NetBIOS_PREFIX-ABCD.DOMAIN_NAME\SHARE_NAME`
     * 
     */
    public Output<String> netBiosPrefix() {
        return this.netBiosPrefix;
    }
    /**
     * Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     * 
     */
    @Export(name="nfsUsersWithLdap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> nfsUsersWithLdap;

    /**
     * @return Local UNIX users on clients without valid user information in Active Directory are blocked from access to LDAP enabled volumes.
     * This option can be used to temporarily switch such volumes to AUTH_SYS authentication (user ID + 1-16 groups).
     * 
     */
    public Output<Optional<Boolean>> nfsUsersWithLdap() {
        return Codegen.optional(this.nfsUsersWithLdap);
    }
    /**
     * Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     * 
     */
    @Export(name="organizationalUnit", refs={String.class}, tree="[0]")
    private Output<String> organizationalUnit;

    /**
     * @return Name of the Organizational Unit where you intend to create the computer account for NetApp Volumes.
     * Defaults to `CN=Computers` if left empty.
     * 
     */
    public Output<String> organizationalUnit() {
        return this.organizationalUnit;
    }
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    public Output<String> password() {
        return this.password;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     * 
     */
    @Export(name="securityOperators", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> securityOperators;

    /**
     * @return Domain accounts that require elevated privileges such as `SeSecurityPrivilege` to manage security logs. Comma-separated list.
     * 
     */
    public Output<Optional<List<String>>> securityOperators() {
        return Codegen.optional(this.securityOperators);
    }
    /**
     * Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     * 
     */
    @Export(name="site", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> site;

    /**
     * @return Specifies an Active Directory site to manage domain controller selection.
     * Use when Active Directory domain controllers in multiple regions are configured. Defaults to `Default-First-Site-Name` if left empty.
     * 
     */
    public Output<Optional<String>> site() {
        return Codegen.optional(this.site);
    }
    /**
     * The state of the Active Directory policy (not the Active Directory itself).
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of the Active Directory policy (not the Active Directory itself).
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The state details of the Active Directory.
     * 
     */
    @Export(name="stateDetails", refs={String.class}, tree="[0]")
    private Output<String> stateDetails;

    /**
     * @return The state details of the Active Directory.
     * 
     */
    public Output<String> stateDetails() {
        return this.stateDetails;
    }
    /**
     * Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return Username for the Active Directory account with permissions to create the compute account within the specified organizational unit.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ActiveDirectory(java.lang.String name) {
        this(name, ActiveDirectoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ActiveDirectory(java.lang.String name, ActiveDirectoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ActiveDirectory(java.lang.String name, ActiveDirectoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/activeDirectory:ActiveDirectory", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ActiveDirectory(java.lang.String name, Output<java.lang.String> id, @Nullable ActiveDirectoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/activeDirectory:ActiveDirectory", name, state, makeResourceOptions(options, id), false);
    }

    private static ActiveDirectoryArgs makeArgs(ActiveDirectoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ActiveDirectoryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "password",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ActiveDirectory get(java.lang.String name, Output<java.lang.String> id, @Nullable ActiveDirectoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ActiveDirectory(name, id, state, options);
    }
}
