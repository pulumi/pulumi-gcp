// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs Empty = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs();

    /**
     * Type of archive files in this repository.
     * Possible values are: `DEB`, `DEB_SRC`.
     * 
     */
    @Import(name="archiveType", required=true)
    private Output<String> archiveType;

    /**
     * @return Type of archive files in this repository.
     * Possible values are: `DEB`, `DEB_SRC`.
     * 
     */
    public Output<String> archiveType() {
        return this.archiveType;
    }

    /**
     * List of components for this repository. Must contain at least one
     * item.
     * 
     */
    @Import(name="components", required=true)
    private Output<List<String>> components;

    /**
     * @return List of components for this repository. Must contain at least one
     * item.
     * 
     */
    public Output<List<String>> components() {
        return this.components;
    }

    /**
     * Distribution of this repository.
     * 
     */
    @Import(name="distribution", required=true)
    private Output<String> distribution;

    /**
     * @return Distribution of this repository.
     * 
     */
    public Output<String> distribution() {
        return this.distribution;
    }

    /**
     * URI of the key file for this repository. The agent maintains a
     * keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
     * 
     */
    @Import(name="gpgKey")
    private @Nullable Output<String> gpgKey;

    /**
     * @return URI of the key file for this repository. The agent maintains a
     * keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
     * 
     */
    public Optional<Output<String>> gpgKey() {
        return Optional.ofNullable(this.gpgKey);
    }

    /**
     * URI for this repository.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return URI for this repository.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs() {}

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs $) {
        this.archiveType = $.archiveType;
        this.components = $.components;
        this.distribution = $.distribution;
        this.gpgKey = $.gpgKey;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveType Type of archive files in this repository.
         * Possible values are: `DEB`, `DEB_SRC`.
         * 
         * @return builder
         * 
         */
        public Builder archiveType(Output<String> archiveType) {
            $.archiveType = archiveType;
            return this;
        }

        /**
         * @param archiveType Type of archive files in this repository.
         * Possible values are: `DEB`, `DEB_SRC`.
         * 
         * @return builder
         * 
         */
        public Builder archiveType(String archiveType) {
            return archiveType(Output.of(archiveType));
        }

        /**
         * @param components List of components for this repository. Must contain at least one
         * item.
         * 
         * @return builder
         * 
         */
        public Builder components(Output<List<String>> components) {
            $.components = components;
            return this;
        }

        /**
         * @param components List of components for this repository. Must contain at least one
         * item.
         * 
         * @return builder
         * 
         */
        public Builder components(List<String> components) {
            return components(Output.of(components));
        }

        /**
         * @param components List of components for this repository. Must contain at least one
         * item.
         * 
         * @return builder
         * 
         */
        public Builder components(String... components) {
            return components(List.of(components));
        }

        /**
         * @param distribution Distribution of this repository.
         * 
         * @return builder
         * 
         */
        public Builder distribution(Output<String> distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param distribution Distribution of this repository.
         * 
         * @return builder
         * 
         */
        public Builder distribution(String distribution) {
            return distribution(Output.of(distribution));
        }

        /**
         * @param gpgKey URI of the key file for this repository. The agent maintains a
         * keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
         * 
         * @return builder
         * 
         */
        public Builder gpgKey(@Nullable Output<String> gpgKey) {
            $.gpgKey = gpgKey;
            return this;
        }

        /**
         * @param gpgKey URI of the key file for this repository. The agent maintains a
         * keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
         * 
         * @return builder
         * 
         */
        public Builder gpgKey(String gpgKey) {
            return gpgKey(Output.of(gpgKey));
        }

        /**
         * @param uri URI for this repository.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI for this repository.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs build() {
            if ($.archiveType == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs", "archiveType");
            }
            if ($.components == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs", "components");
            }
            if ($.distribution == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs", "distribution");
            }
            if ($.uri == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceRepositoryAptArgs", "uri");
            }
            return $;
        }
    }

}
