// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.monitoring.SloArgs;
import com.pulumi.gcp.monitoring.inputs.SloState;
import com.pulumi.gcp.monitoring.outputs.SloBasicSli;
import com.pulumi.gcp.monitoring.outputs.SloRequestBasedSli;
import com.pulumi.gcp.monitoring.outputs.SloWindowsBasedSli;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Service-Level Objective (SLO) describes the level of desired good
 * service. It consists of a service-level indicator (SLI), a performance
 * goal, and a period over which the objective is to be evaluated against
 * that goal. The SLO can use SLIs defined in a number of different manners.
 * Typical SLOs might include &#34;99% of requests in each rolling week have
 * latency below 200 milliseconds&#34; or &#34;99.5% of requests in each calendar
 * month return successfully.&#34;
 * 
 * To get more information about Slo, see:
 * 
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives)
 * * How-to Guides
 *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
 *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
 * 
 * ## Example Usage
 * 
 * ### Monitoring Slo Appengine
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.MonitoringFunctions;
 * import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
 * import com.pulumi.gcp.monitoring.Slo;
 * import com.pulumi.gcp.monitoring.SloArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloBasicSliArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloBasicSliLatencyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = MonitoringFunctions.getAppEngineService(GetAppEngineServiceArgs.builder()
 *             .moduleId("default")
 *             .build());
 * 
 *         var appengSlo = new Slo("appengSlo", SloArgs.builder()        
 *             .service(default_.serviceId())
 *             .sloId("ae-slo")
 *             .displayName("Test SLO for App Engine")
 *             .goal(0.9)
 *             .calendarPeriod("DAY")
 *             .basicSli(SloBasicSliArgs.builder()
 *                 .latency(SloBasicSliLatencyArgs.builder()
 *                     .threshold("1s")
 *                     .build())
 *                 .build())
 *             .userLabels(Map.ofEntries(
 *                 Map.entry("my_key", "my_value"),
 *                 Map.entry("my_other_key", "my_other_value")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Monitoring Slo Request Based
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.CustomService;
 * import com.pulumi.gcp.monitoring.CustomServiceArgs;
 * import com.pulumi.gcp.monitoring.Slo;
 * import com.pulumi.gcp.monitoring.SloArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloRequestBasedSliArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloRequestBasedSliDistributionCutArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloRequestBasedSliDistributionCutRangeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customsrv = new CustomService("customsrv", CustomServiceArgs.builder()        
 *             .serviceId("custom-srv-request-slos")
 *             .displayName("My Custom Service")
 *             .build());
 * 
 *         var requestBasedSlo = new Slo("requestBasedSlo", SloArgs.builder()        
 *             .service(customsrv.serviceId())
 *             .sloId("consumed-api-slo")
 *             .displayName("Test SLO with request based SLI (good total ratio)")
 *             .goal(0.9)
 *             .rollingPeriodDays(30)
 *             .requestBasedSli(SloRequestBasedSliArgs.builder()
 *                 .distributionCut(SloRequestBasedSliDistributionCutArgs.builder()
 *                     .distributionFilter("metric.type=\"serviceruntime.googleapis.com/api/request_latencies\" resource.type=\"api\"  ")
 *                     .range(SloRequestBasedSliDistributionCutRangeArgs.builder()
 *                         .max(0.5)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Monitoring Slo Windows Based Good Bad Metric Filter
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.CustomService;
 * import com.pulumi.gcp.monitoring.CustomServiceArgs;
 * import com.pulumi.gcp.monitoring.Slo;
 * import com.pulumi.gcp.monitoring.SloArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customsrv = new CustomService("customsrv", CustomServiceArgs.builder()        
 *             .serviceId("custom-srv-windows-slos")
 *             .displayName("My Custom Service")
 *             .build());
 * 
 *         var windowsBased = new Slo("windowsBased", SloArgs.builder()        
 *             .service(customsrv.serviceId())
 *             .displayName("Test SLO with window based SLI")
 *             .goal(0.95)
 *             .calendarPeriod("FORTNIGHT")
 *             .windowsBasedSli(SloWindowsBasedSliArgs.builder()
 *                 .windowPeriod("400s")
 *                 .goodBadMetricFilter(StdFunctions.join(JoinArgs.builder()
 *                     .separator(" AND ")
 *                     .input(                    
 *                         "metric.type=\"monitoring.googleapis.com/uptime_check/check_passed\"",
 *                         "resource.type=\"uptime_url\"")
 *                     .build()).result())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Monitoring Slo Windows Based Metric Mean
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.CustomService;
 * import com.pulumi.gcp.monitoring.CustomServiceArgs;
 * import com.pulumi.gcp.monitoring.Slo;
 * import com.pulumi.gcp.monitoring.SloArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricMeanInRangeArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricMeanInRangeRangeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customsrv = new CustomService("customsrv", CustomServiceArgs.builder()        
 *             .serviceId("custom-srv-windows-slos")
 *             .displayName("My Custom Service")
 *             .build());
 * 
 *         var windowsBased = new Slo("windowsBased", SloArgs.builder()        
 *             .service(customsrv.serviceId())
 *             .displayName("Test SLO with window based SLI")
 *             .goal(0.9)
 *             .rollingPeriodDays(20)
 *             .windowsBasedSli(SloWindowsBasedSliArgs.builder()
 *                 .windowPeriod("600s")
 *                 .metricMeanInRange(SloWindowsBasedSliMetricMeanInRangeArgs.builder()
 *                     .timeSeries(StdFunctions.join(JoinArgs.builder()
 *                         .separator(" AND ")
 *                         .input(                        
 *                             "metric.type=\"agent.googleapis.com/cassandra/client_request/latency/95p\"",
 *                             "resource.type=\"gce_instance\"")
 *                         .build()).result())
 *                     .range(SloWindowsBasedSliMetricMeanInRangeRangeArgs.builder()
 *                         .max(5)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Monitoring Slo Windows Based Metric Sum
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.CustomService;
 * import com.pulumi.gcp.monitoring.CustomServiceArgs;
 * import com.pulumi.gcp.monitoring.Slo;
 * import com.pulumi.gcp.monitoring.SloArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricSumInRangeArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliMetricSumInRangeRangeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customsrv = new CustomService("customsrv", CustomServiceArgs.builder()        
 *             .serviceId("custom-srv-windows-slos")
 *             .displayName("My Custom Service")
 *             .build());
 * 
 *         var windowsBased = new Slo("windowsBased", SloArgs.builder()        
 *             .service(customsrv.serviceId())
 *             .displayName("Test SLO with window based SLI")
 *             .goal(0.9)
 *             .rollingPeriodDays(20)
 *             .windowsBasedSli(SloWindowsBasedSliArgs.builder()
 *                 .windowPeriod("400s")
 *                 .metricSumInRange(SloWindowsBasedSliMetricSumInRangeArgs.builder()
 *                     .timeSeries(StdFunctions.join(JoinArgs.builder()
 *                         .separator(" AND ")
 *                         .input(                        
 *                             "metric.type=\"monitoring.googleapis.com/uptime_check/request_latency\"",
 *                             "resource.type=\"uptime_url\"")
 *                         .build()).result())
 *                     .range(SloWindowsBasedSliMetricSumInRangeRangeArgs.builder()
 *                         .max(5000)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Monitoring Slo Windows Based Ratio Threshold
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.monitoring.CustomService;
 * import com.pulumi.gcp.monitoring.CustomServiceArgs;
 * import com.pulumi.gcp.monitoring.Slo;
 * import com.pulumi.gcp.monitoring.SloArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs;
 * import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var customsrv = new CustomService("customsrv", CustomServiceArgs.builder()        
 *             .serviceId("custom-srv-windows-slos")
 *             .displayName("My Custom Service")
 *             .build());
 * 
 *         var windowsBased = new Slo("windowsBased", SloArgs.builder()        
 *             .service(customsrv.serviceId())
 *             .displayName("Test SLO with window based SLI")
 *             .goal(0.9)
 *             .rollingPeriodDays(20)
 *             .windowsBasedSli(SloWindowsBasedSliArgs.builder()
 *                 .windowPeriod("100s")
 *                 .goodTotalRatioThreshold(SloWindowsBasedSliGoodTotalRatioThresholdArgs.builder()
 *                     .threshold(0.1)
 *                     .performance(SloWindowsBasedSliGoodTotalRatioThresholdPerformanceArgs.builder()
 *                         .distributionCut(SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutArgs.builder()
 *                             .distributionFilter(StdFunctions.join(JoinArgs.builder()
 *                                 .separator(" AND ")
 *                                 .input(                                
 *                                     "metric.type=\"serviceruntime.googleapis.com/api/request_latencies\"",
 *                                     "resource.type=\"consumed_api\"")
 *                                 .build()).result())
 *                             .range(SloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeArgs.builder()
 *                                 .min(1)
 *                                 .max(9)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Slo can be imported using any of these accepted formats:
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Slo can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:monitoring/slo:Slo default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:monitoring/slo:Slo")
public class Slo extends com.pulumi.resources.CustomResource {
    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Export(name="basicSli", refs={SloBasicSli.class}, tree="[0]")
    private Output</* @Nullable */ SloBasicSli> basicSli;

    /**
     * @return Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Output<Optional<SloBasicSli>> basicSli() {
        return Codegen.optional(this.basicSli);
    }
    /**
     * A calendar period, semantically &#34;since the start of the current
     * &lt;calendarPeriod&gt;&#34;.
     * Possible values are: `DAY`, `WEEK`, `FORTNIGHT`, `MONTH`.
     * 
     */
    @Export(name="calendarPeriod", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> calendarPeriod;

    /**
     * @return A calendar period, semantically &#34;since the start of the current
     * &lt;calendarPeriod&gt;&#34;.
     * Possible values are: `DAY`, `WEEK`, `FORTNIGHT`, `MONTH`.
     * 
     */
    public Output<Optional<String>> calendarPeriod() {
        return Codegen.optional(this.calendarPeriod);
    }
    /**
     * Name used for UI elements listing this SLO.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Name used for UI elements listing this SLO.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * The fraction of service that must be good in order for this objective
     * to be met. 0 &lt; goal &lt;= 0.999
     * 
     */
    @Export(name="goal", refs={Double.class}, tree="[0]")
    private Output<Double> goal;

    /**
     * @return The fraction of service that must be good in order for this objective
     * to be met. 0 &lt; goal &lt;= 0.999
     * 
     */
    public Output<Double> goal() {
        return this.goal;
    }
    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Export(name="requestBasedSli", refs={SloRequestBasedSli.class}, tree="[0]")
    private Output</* @Nullable */ SloRequestBasedSli> requestBasedSli;

    /**
     * @return A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Output<Optional<SloRequestBasedSli>> requestBasedSli() {
        return Codegen.optional(this.requestBasedSli);
    }
    /**
     * A rolling time period, semantically &#34;in the past X days&#34;.
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    @Export(name="rollingPeriodDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> rollingPeriodDays;

    /**
     * @return A rolling time period, semantically &#34;in the past X days&#34;.
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    public Output<Optional<Integer>> rollingPeriodDays() {
        return Codegen.optional(this.rollingPeriodDays);
    }
    /**
     * ID of the service to which this SLO belongs.
     * 
     * ***
     * 
     */
    @Export(name="service", refs={String.class}, tree="[0]")
    private Output<String> service;

    /**
     * @return ID of the service to which this SLO belongs.
     * 
     * ***
     * 
     */
    public Output<String> service() {
        return this.service;
    }
    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    @Export(name="sloId", refs={String.class}, tree="[0]")
    private Output<String> sloId;

    /**
     * @return The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    public Output<String> sloId() {
        return this.sloId;
    }
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy
     * objects.The field can contain up to 64 entries. Each key and value is limited
     * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys
     * must begin with a letter.
     * 
     */
    @Export(name="userLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> userLabels;

    /**
     * @return This field is intended to be used for organizing and identifying the AlertPolicy
     * objects.The field can contain up to 64 entries. Each key and value is limited
     * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys
     * must begin with a letter.
     * 
     */
    public Output<Optional<Map<String,String>>> userLabels() {
        return Codegen.optional(this.userLabels);
    }
    /**
     * A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service&#39;s performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Export(name="windowsBasedSli", refs={SloWindowsBasedSli.class}, tree="[0]")
    private Output</* @Nullable */ SloWindowsBasedSli> windowsBasedSli;

    /**
     * @return A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service&#39;s performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Output<Optional<SloWindowsBasedSli>> windowsBasedSli() {
        return Codegen.optional(this.windowsBasedSli);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Slo(String name) {
        this(name, SloArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Slo(String name, SloArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Slo(String name, SloArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/slo:Slo", name, args == null ? SloArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Slo(String name, Output<String> id, @Nullable SloState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:monitoring/slo:Slo", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Slo get(String name, Output<String> id, @Nullable SloState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Slo(name, id, state, options);
    }
}
