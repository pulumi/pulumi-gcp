// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDockerImageResult {
    /**
     * @return The time, as a RFC 3339 string, this image was built.
     * 
     */
    private String buildTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String imageName;
    /**
     * @return Calculated size of the image in bytes.
     * 
     */
    private String imageSizeBytes;
    private String location;
    /**
     * @return Media type of this image, e.g. `application/vnd.docker.distribution.manifest.v2+json`.
     * 
     */
    private String mediaType;
    /**
     * @return The fully qualified name of the fetched image.  This name has the form: `projects/{{project}}/locations/{{location}}/repository/{{repository_id}}/dockerImages/{{docker_image}}`. For example,
     * 
     */
    private String name;
    private @Nullable String project;
    private String repositoryId;
    /**
     * @return The URI to access the image.  For example,
     * 
     */
    private String selfLink;
    /**
     * @return A list of all tags associated with the image.
     * 
     */
    private List<String> tags;
    /**
     * @return The time, as a RFC 3339 string, this image was updated.
     * 
     */
    private String updateTime;
    /**
     * @return The time, as a RFC 3339 string, the image was uploaded. For example, `2014-10-02T15:01:23.045123456Z`.
     * 
     */
    private String uploadTime;

    private GetDockerImageResult() {}
    /**
     * @return The time, as a RFC 3339 string, this image was built.
     * 
     */
    public String buildTime() {
        return this.buildTime;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return Calculated size of the image in bytes.
     * 
     */
    public String imageSizeBytes() {
        return this.imageSizeBytes;
    }
    public String location() {
        return this.location;
    }
    /**
     * @return Media type of this image, e.g. `application/vnd.docker.distribution.manifest.v2+json`.
     * 
     */
    public String mediaType() {
        return this.mediaType;
    }
    /**
     * @return The fully qualified name of the fetched image.  This name has the form: `projects/{{project}}/locations/{{location}}/repository/{{repository_id}}/dockerImages/{{docker_image}}`. For example,
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    /**
     * @return The URI to access the image.  For example,
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return A list of all tags associated with the image.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The time, as a RFC 3339 string, this image was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The time, as a RFC 3339 string, the image was uploaded. For example, `2014-10-02T15:01:23.045123456Z`.
     * 
     */
    public String uploadTime() {
        return this.uploadTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDockerImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String buildTime;
        private String id;
        private String imageName;
        private String imageSizeBytes;
        private String location;
        private String mediaType;
        private String name;
        private @Nullable String project;
        private String repositoryId;
        private String selfLink;
        private List<String> tags;
        private String updateTime;
        private String uploadTime;
        public Builder() {}
        public Builder(GetDockerImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildTime = defaults.buildTime;
    	      this.id = defaults.id;
    	      this.imageName = defaults.imageName;
    	      this.imageSizeBytes = defaults.imageSizeBytes;
    	      this.location = defaults.location;
    	      this.mediaType = defaults.mediaType;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.repositoryId = defaults.repositoryId;
    	      this.selfLink = defaults.selfLink;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
    	      this.uploadTime = defaults.uploadTime;
        }

        @CustomType.Setter
        public Builder buildTime(String buildTime) {
            if (buildTime == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "buildTime");
            }
            this.buildTime = buildTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder imageSizeBytes(String imageSizeBytes) {
            if (imageSizeBytes == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "imageSizeBytes");
            }
            this.imageSizeBytes = imageSizeBytes;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder mediaType(String mediaType) {
            if (mediaType == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "mediaType");
            }
            this.mediaType = mediaType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder uploadTime(String uploadTime) {
            if (uploadTime == null) {
              throw new MissingRequiredPropertyException("GetDockerImageResult", "uploadTime");
            }
            this.uploadTime = uploadTime;
            return this;
        }
        public GetDockerImageResult build() {
            final var _resultValue = new GetDockerImageResult();
            _resultValue.buildTime = buildTime;
            _resultValue.id = id;
            _resultValue.imageName = imageName;
            _resultValue.imageSizeBytes = imageSizeBytes;
            _resultValue.location = location;
            _resultValue.mediaType = mediaType;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.repositoryId = repositoryId;
            _resultValue.selfLink = selfLink;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            _resultValue.uploadTime = uploadTime;
            return _resultValue;
        }
    }
}
