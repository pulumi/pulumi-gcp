// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.ConversationProfileTtsConfigVoiceArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConversationProfileTtsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConversationProfileTtsConfigArgs Empty = new ConversationProfileTtsConfigArgs();

    /**
     * An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
     * 
     */
    @Import(name="effectsProfileIds")
    private @Nullable Output<List<String>> effectsProfileIds;

    /**
     * @return An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
     * 
     */
    public Optional<Output<List<String>>> effectsProfileIds() {
        return Optional.ofNullable(this.effectsProfileIds);
    }

    /**
     * Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
     * 
     */
    @Import(name="pitch")
    private @Nullable Output<Double> pitch;

    /**
     * @return Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
     * 
     */
    public Optional<Output<Double>> pitch() {
        return Optional.ofNullable(this.pitch);
    }

    /**
     * Speaking rate/speed, in the range [0.25, 4.0].
     * 
     */
    @Import(name="speakingRate")
    private @Nullable Output<Double> speakingRate;

    /**
     * @return Speaking rate/speed, in the range [0.25, 4.0].
     * 
     */
    public Optional<Output<Double>> speakingRate() {
        return Optional.ofNullable(this.speakingRate);
    }

    /**
     * The desired voice of the synthesized audio.
     * Structure is documented below.
     * 
     */
    @Import(name="voice")
    private @Nullable Output<ConversationProfileTtsConfigVoiceArgs> voice;

    /**
     * @return The desired voice of the synthesized audio.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConversationProfileTtsConfigVoiceArgs>> voice() {
        return Optional.ofNullable(this.voice);
    }

    /**
     * Volume gain (in dB) of the normal native volume supported by the specific voice.
     * 
     */
    @Import(name="volumeGainDb")
    private @Nullable Output<Double> volumeGainDb;

    /**
     * @return Volume gain (in dB) of the normal native volume supported by the specific voice.
     * 
     */
    public Optional<Output<Double>> volumeGainDb() {
        return Optional.ofNullable(this.volumeGainDb);
    }

    private ConversationProfileTtsConfigArgs() {}

    private ConversationProfileTtsConfigArgs(ConversationProfileTtsConfigArgs $) {
        this.effectsProfileIds = $.effectsProfileIds;
        this.pitch = $.pitch;
        this.speakingRate = $.speakingRate;
        this.voice = $.voice;
        this.volumeGainDb = $.volumeGainDb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConversationProfileTtsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConversationProfileTtsConfigArgs $;

        public Builder() {
            $ = new ConversationProfileTtsConfigArgs();
        }

        public Builder(ConversationProfileTtsConfigArgs defaults) {
            $ = new ConversationProfileTtsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param effectsProfileIds An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
         * 
         * @return builder
         * 
         */
        public Builder effectsProfileIds(@Nullable Output<List<String>> effectsProfileIds) {
            $.effectsProfileIds = effectsProfileIds;
            return this;
        }

        /**
         * @param effectsProfileIds An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
         * 
         * @return builder
         * 
         */
        public Builder effectsProfileIds(List<String> effectsProfileIds) {
            return effectsProfileIds(Output.of(effectsProfileIds));
        }

        /**
         * @param effectsProfileIds An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
         * 
         * @return builder
         * 
         */
        public Builder effectsProfileIds(String... effectsProfileIds) {
            return effectsProfileIds(List.of(effectsProfileIds));
        }

        /**
         * @param pitch Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
         * 
         * @return builder
         * 
         */
        public Builder pitch(@Nullable Output<Double> pitch) {
            $.pitch = pitch;
            return this;
        }

        /**
         * @param pitch Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
         * 
         * @return builder
         * 
         */
        public Builder pitch(Double pitch) {
            return pitch(Output.of(pitch));
        }

        /**
         * @param speakingRate Speaking rate/speed, in the range [0.25, 4.0].
         * 
         * @return builder
         * 
         */
        public Builder speakingRate(@Nullable Output<Double> speakingRate) {
            $.speakingRate = speakingRate;
            return this;
        }

        /**
         * @param speakingRate Speaking rate/speed, in the range [0.25, 4.0].
         * 
         * @return builder
         * 
         */
        public Builder speakingRate(Double speakingRate) {
            return speakingRate(Output.of(speakingRate));
        }

        /**
         * @param voice The desired voice of the synthesized audio.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder voice(@Nullable Output<ConversationProfileTtsConfigVoiceArgs> voice) {
            $.voice = voice;
            return this;
        }

        /**
         * @param voice The desired voice of the synthesized audio.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder voice(ConversationProfileTtsConfigVoiceArgs voice) {
            return voice(Output.of(voice));
        }

        /**
         * @param volumeGainDb Volume gain (in dB) of the normal native volume supported by the specific voice.
         * 
         * @return builder
         * 
         */
        public Builder volumeGainDb(@Nullable Output<Double> volumeGainDb) {
            $.volumeGainDb = volumeGainDb;
            return this;
        }

        /**
         * @param volumeGainDb Volume gain (in dB) of the normal native volume supported by the specific voice.
         * 
         * @return builder
         * 
         */
        public Builder volumeGainDb(Double volumeGainDb) {
            return volumeGainDb(Output.of(volumeGainDb));
        }

        public ConversationProfileTtsConfigArgs build() {
            return $;
        }
    }

}
