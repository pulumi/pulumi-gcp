// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class V2PolicyOrchestratorForFolderOrchestratedResource {
    /**
     * @return ID of the resource to be used while generating set of affected resources.
     * For UPSERT action the value is auto-generated during PolicyOrchestrator
     * creation when not set. When the value is set it should following next
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     *   For DELETE action, ID must be specified explicitly during
     *   PolicyOrchestrator creation.
     * 
     * &lt;a name=&#34;nestedOrchestratedResourceOsPolicyAssignmentV1Payload&#34;&gt;&lt;/a&gt;The `osPolicyAssignmentV1Payload` block supports:
     * 
     */
    private @Nullable String id;
    /**
     * @return OS policy assignment is an API resource that is used to
     * apply a set of OS policies to a dynamically targeted group of Compute Engine
     * VM instances.
     * An OS policy is used to define the desired state configuration for a
     * Compute Engine VM instance through a set of configuration resources that
     * provide capabilities such as installing or removing software packages, or
     * executing a script.
     * For more information about the OS policy resource definitions and examples,
     * see
     * [OS policy and OS policy
     * assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
     * Structure is documented below.
     * 
     */
    private @Nullable V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload osPolicyAssignmentV1Payload;

    private V2PolicyOrchestratorForFolderOrchestratedResource() {}
    /**
     * @return ID of the resource to be used while generating set of affected resources.
     * For UPSERT action the value is auto-generated during PolicyOrchestrator
     * creation when not set. When the value is set it should following next
     * restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     *   For DELETE action, ID must be specified explicitly during
     *   PolicyOrchestrator creation.
     * 
     * &lt;a name=&#34;nestedOrchestratedResourceOsPolicyAssignmentV1Payload&#34;&gt;&lt;/a&gt;The `osPolicyAssignmentV1Payload` block supports:
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return OS policy assignment is an API resource that is used to
     * apply a set of OS policies to a dynamically targeted group of Compute Engine
     * VM instances.
     * An OS policy is used to define the desired state configuration for a
     * Compute Engine VM instance through a set of configuration resources that
     * provide capabilities such as installing or removing software packages, or
     * executing a script.
     * For more information about the OS policy resource definitions and examples,
     * see
     * [OS policy and OS policy
     * assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
     * Structure is documented below.
     * 
     */
    public Optional<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload> osPolicyAssignmentV1Payload() {
        return Optional.ofNullable(this.osPolicyAssignmentV1Payload);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload osPolicyAssignmentV1Payload;
        public Builder() {}
        public Builder(V2PolicyOrchestratorForFolderOrchestratedResource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.osPolicyAssignmentV1Payload = defaults.osPolicyAssignmentV1Payload;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder osPolicyAssignmentV1Payload(@Nullable V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload osPolicyAssignmentV1Payload) {

            this.osPolicyAssignmentV1Payload = osPolicyAssignmentV1Payload;
            return this;
        }
        public V2PolicyOrchestratorForFolderOrchestratedResource build() {
            final var _resultValue = new V2PolicyOrchestratorForFolderOrchestratedResource();
            _resultValue.id = id;
            _resultValue.osPolicyAssignmentV1Payload = osPolicyAssignmentV1Payload;
            return _resultValue;
        }
    }
}
