// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableExternalDataConfigurationBigtableOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableExternalDataConfigurationBigtableOptionsArgs Empty = new TableExternalDataConfigurationBigtableOptionsArgs();

    /**
     * A list of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.  Structure is documented below.
     * 
     */
    @Import(name="columnFamilies")
    private @Nullable Output<List<TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs>> columnFamilies;

    /**
     * @return A list of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.  Structure is documented below.
     * 
     */
    public Optional<Output<List<TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs>>> columnFamilies() {
        return Optional.ofNullable(this.columnFamilies);
    }

    /**
     * If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
     */
    @Import(name="ignoreUnspecifiedColumnFamilies")
    private @Nullable Output<Boolean> ignoreUnspecifiedColumnFamilies;

    /**
     * @return If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
     * 
     */
    public Optional<Output<Boolean>> ignoreUnspecifiedColumnFamilies() {
        return Optional.ofNullable(this.ignoreUnspecifiedColumnFamilies);
    }

    /**
     * If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
     * 
     */
    @Import(name="outputColumnFamiliesAsJson")
    private @Nullable Output<Boolean> outputColumnFamiliesAsJson;

    /**
     * @return If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
     * 
     */
    public Optional<Output<Boolean>> outputColumnFamiliesAsJson() {
        return Optional.ofNullable(this.outputColumnFamiliesAsJson);
    }

    /**
     * If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
     */
    @Import(name="readRowkeyAsString")
    private @Nullable Output<Boolean> readRowkeyAsString;

    /**
     * @return If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
     * 
     */
    public Optional<Output<Boolean>> readRowkeyAsString() {
        return Optional.ofNullable(this.readRowkeyAsString);
    }

    private TableExternalDataConfigurationBigtableOptionsArgs() {}

    private TableExternalDataConfigurationBigtableOptionsArgs(TableExternalDataConfigurationBigtableOptionsArgs $) {
        this.columnFamilies = $.columnFamilies;
        this.ignoreUnspecifiedColumnFamilies = $.ignoreUnspecifiedColumnFamilies;
        this.outputColumnFamiliesAsJson = $.outputColumnFamiliesAsJson;
        this.readRowkeyAsString = $.readRowkeyAsString;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableExternalDataConfigurationBigtableOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableExternalDataConfigurationBigtableOptionsArgs $;

        public Builder() {
            $ = new TableExternalDataConfigurationBigtableOptionsArgs();
        }

        public Builder(TableExternalDataConfigurationBigtableOptionsArgs defaults) {
            $ = new TableExternalDataConfigurationBigtableOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnFamilies A list of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.  Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columnFamilies(@Nullable Output<List<TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs>> columnFamilies) {
            $.columnFamilies = columnFamilies;
            return this;
        }

        /**
         * @param columnFamilies A list of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.  Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columnFamilies(List<TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs> columnFamilies) {
            return columnFamilies(Output.of(columnFamilies));
        }

        /**
         * @param columnFamilies A list of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the &#39;type&#39; field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.  Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columnFamilies(TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs... columnFamilies) {
            return columnFamilies(List.of(columnFamilies));
        }

        /**
         * @param ignoreUnspecifiedColumnFamilies If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreUnspecifiedColumnFamilies(@Nullable Output<Boolean> ignoreUnspecifiedColumnFamilies) {
            $.ignoreUnspecifiedColumnFamilies = ignoreUnspecifiedColumnFamilies;
            return this;
        }

        /**
         * @param ignoreUnspecifiedColumnFamilies If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreUnspecifiedColumnFamilies(Boolean ignoreUnspecifiedColumnFamilies) {
            return ignoreUnspecifiedColumnFamilies(Output.of(ignoreUnspecifiedColumnFamilies));
        }

        /**
         * @param outputColumnFamiliesAsJson If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder outputColumnFamiliesAsJson(@Nullable Output<Boolean> outputColumnFamiliesAsJson) {
            $.outputColumnFamiliesAsJson = outputColumnFamiliesAsJson;
            return this;
        }

        /**
         * @param outputColumnFamiliesAsJson If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder outputColumnFamiliesAsJson(Boolean outputColumnFamiliesAsJson) {
            return outputColumnFamiliesAsJson(Output.of(outputColumnFamiliesAsJson));
        }

        /**
         * @param readRowkeyAsString If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder readRowkeyAsString(@Nullable Output<Boolean> readRowkeyAsString) {
            $.readRowkeyAsString = readRowkeyAsString;
            return this;
        }

        /**
         * @param readRowkeyAsString If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder readRowkeyAsString(Boolean readRowkeyAsString) {
            return readRowkeyAsString(Output.of(readRowkeyAsString));
        }

        public TableExternalDataConfigurationBigtableOptionsArgs build() {
            return $;
        }
    }

}
