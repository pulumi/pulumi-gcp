// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository {
    /**
     * @return A common public repository base for Yum.
     * Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
     * 
     */
    private String repositoryBase;
    /**
     * @return Specific repository from the base, e.g. `&#34;pub/rocky/9/BaseOS/x86_64/os&#34;`
     * 
     */
    private String repositoryPath;

    private RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository() {}
    /**
     * @return A common public repository base for Yum.
     * Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
     * 
     */
    public String repositoryBase() {
        return this.repositoryBase;
    }
    /**
     * @return Specific repository from the base, e.g. `&#34;pub/rocky/9/BaseOS/x86_64/os&#34;`
     * 
     */
    public String repositoryPath() {
        return this.repositoryPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String repositoryBase;
        private String repositoryPath;
        public Builder() {}
        public Builder(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.repositoryBase = defaults.repositoryBase;
    	      this.repositoryPath = defaults.repositoryPath;
        }

        @CustomType.Setter
        public Builder repositoryBase(String repositoryBase) {
            if (repositoryBase == null) {
              throw new MissingRequiredPropertyException("RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository", "repositoryBase");
            }
            this.repositoryBase = repositoryBase;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryPath(String repositoryPath) {
            if (repositoryPath == null) {
              throw new MissingRequiredPropertyException("RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository", "repositoryPath");
            }
            this.repositoryPath = repositoryPath;
            return this;
        }
        public RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository build() {
            final var _resultValue = new RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository();
            _resultValue.repositoryBase = repositoryBase;
            _resultValue.repositoryPath = repositoryPath;
            return _resultValue;
        }
    }
}
