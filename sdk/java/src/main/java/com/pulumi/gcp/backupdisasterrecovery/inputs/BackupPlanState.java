// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.backupdisasterrecovery.inputs.BackupPlanBackupRuleArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanState extends com.pulumi.resources.ResourceArgs {

    public static final BackupPlanState Empty = new BackupPlanState();

    /**
     * The ID of the backup plan
     * 
     */
    @Import(name="backupPlanId")
    private @Nullable Output<String> backupPlanId;

    /**
     * @return The ID of the backup plan
     * 
     */
    public Optional<Output<String>> backupPlanId() {
        return Optional.ofNullable(this.backupPlanId);
    }

    /**
     * The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
     * Structure is documented below.
     * 
     */
    @Import(name="backupRules")
    private @Nullable Output<List<BackupPlanBackupRuleArgs>> backupRules;

    /**
     * @return The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BackupPlanBackupRuleArgs>>> backupRules() {
        return Optional.ofNullable(this.backupRules);
    }

    /**
     * Backup vault where the backups gets stored using this Backup plan.
     * 
     */
    @Import(name="backupVault")
    private @Nullable Output<String> backupVault;

    /**
     * @return Backup vault where the backups gets stored using this Backup plan.
     * 
     */
    public Optional<Output<String>> backupVault() {
        return Optional.ofNullable(this.backupVault);
    }

    /**
     * The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
     * 
     */
    @Import(name="backupVaultServiceAccount")
    private @Nullable Output<String> backupVaultServiceAccount;

    /**
     * @return The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
     * 
     */
    public Optional<Output<String>> backupVaultServiceAccount() {
        return Optional.ofNullable(this.backupVaultServiceAccount);
    }

    /**
     * When the `BackupPlan` was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return When the `BackupPlan` was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The description allows for additional details about `BackupPlan` and its use cases to be provided.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description allows for additional details about `BackupPlan` and its use cases to be provided.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The location for the backup plan
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the backup plan
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * This is only applicable for CloudSql resource. Days for which logs will be stored. This value should be greater than or equal to minimum enforced log retention duration of the backup vault.
     * 
     */
    @Import(name="logRetentionDays")
    private @Nullable Output<Integer> logRetentionDays;

    /**
     * @return This is only applicable for CloudSql resource. Days for which logs will be stored. This value should be greater than or equal to minimum enforced log retention duration of the backup vault.
     * 
     */
    public Optional<Output<Integer>> logRetentionDays() {
        return Optional.ofNullable(this.logRetentionDays);
    }

    /**
     * The name of backup plan resource created
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of backup plan resource created
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The resource type to which the `BackupPlan` will be applied.
     * Examples include, &#34;compute.googleapis.com/Instance&#34;, &#34;compute.googleapis.com/Disk&#34;, &#34;sqladmin.googleapis.com/Instance&#34; and &#34;storage.googleapis.com/Bucket&#34;.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return The resource type to which the `BackupPlan` will be applied.
     * Examples include, &#34;compute.googleapis.com/Instance&#34;, &#34;compute.googleapis.com/Disk&#34;, &#34;sqladmin.googleapis.com/Instance&#34; and &#34;storage.googleapis.com/Bucket&#34;.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * The list of all resource types to which the &#39;BackupPlan&#39; can be applied.
     * 
     */
    @Import(name="supportedResourceTypes")
    private @Nullable Output<List<String>> supportedResourceTypes;

    /**
     * @return The list of all resource types to which the &#39;BackupPlan&#39; can be applied.
     * 
     */
    public Optional<Output<List<String>>> supportedResourceTypes() {
        return Optional.ofNullable(this.supportedResourceTypes);
    }

    /**
     * When the `BackupPlan` was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return When the `BackupPlan` was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private BackupPlanState() {}

    private BackupPlanState(BackupPlanState $) {
        this.backupPlanId = $.backupPlanId;
        this.backupRules = $.backupRules;
        this.backupVault = $.backupVault;
        this.backupVaultServiceAccount = $.backupVaultServiceAccount;
        this.createTime = $.createTime;
        this.description = $.description;
        this.location = $.location;
        this.logRetentionDays = $.logRetentionDays;
        this.name = $.name;
        this.project = $.project;
        this.resourceType = $.resourceType;
        this.supportedResourceTypes = $.supportedResourceTypes;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanState $;

        public Builder() {
            $ = new BackupPlanState();
        }

        public Builder(BackupPlanState defaults) {
            $ = new BackupPlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupPlanId The ID of the backup plan
         * 
         * @return builder
         * 
         */
        public Builder backupPlanId(@Nullable Output<String> backupPlanId) {
            $.backupPlanId = backupPlanId;
            return this;
        }

        /**
         * @param backupPlanId The ID of the backup plan
         * 
         * @return builder
         * 
         */
        public Builder backupPlanId(String backupPlanId) {
            return backupPlanId(Output.of(backupPlanId));
        }

        /**
         * @param backupRules The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupRules(@Nullable Output<List<BackupPlanBackupRuleArgs>> backupRules) {
            $.backupRules = backupRules;
            return this;
        }

        /**
         * @param backupRules The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupRules(List<BackupPlanBackupRuleArgs> backupRules) {
            return backupRules(Output.of(backupRules));
        }

        /**
         * @param backupRules The backup rules for this `BackupPlan`. There must be at least one `BackupRule` message.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupRules(BackupPlanBackupRuleArgs... backupRules) {
            return backupRules(List.of(backupRules));
        }

        /**
         * @param backupVault Backup vault where the backups gets stored using this Backup plan.
         * 
         * @return builder
         * 
         */
        public Builder backupVault(@Nullable Output<String> backupVault) {
            $.backupVault = backupVault;
            return this;
        }

        /**
         * @param backupVault Backup vault where the backups gets stored using this Backup plan.
         * 
         * @return builder
         * 
         */
        public Builder backupVault(String backupVault) {
            return backupVault(Output.of(backupVault));
        }

        /**
         * @param backupVaultServiceAccount The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultServiceAccount(@Nullable Output<String> backupVaultServiceAccount) {
            $.backupVaultServiceAccount = backupVaultServiceAccount;
            return this;
        }

        /**
         * @param backupVaultServiceAccount The Google Cloud Platform Service Account to be used by the BackupVault for taking backups.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultServiceAccount(String backupVaultServiceAccount) {
            return backupVaultServiceAccount(Output.of(backupVaultServiceAccount));
        }

        /**
         * @param createTime When the `BackupPlan` was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime When the `BackupPlan` was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description The description allows for additional details about `BackupPlan` and its use cases to be provided.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description allows for additional details about `BackupPlan` and its use cases to be provided.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param location The location for the backup plan
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the backup plan
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logRetentionDays This is only applicable for CloudSql resource. Days for which logs will be stored. This value should be greater than or equal to minimum enforced log retention duration of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder logRetentionDays(@Nullable Output<Integer> logRetentionDays) {
            $.logRetentionDays = logRetentionDays;
            return this;
        }

        /**
         * @param logRetentionDays This is only applicable for CloudSql resource. Days for which logs will be stored. This value should be greater than or equal to minimum enforced log retention duration of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder logRetentionDays(Integer logRetentionDays) {
            return logRetentionDays(Output.of(logRetentionDays));
        }

        /**
         * @param name The name of backup plan resource created
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of backup plan resource created
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param resourceType The resource type to which the `BackupPlan` will be applied.
         * Examples include, &#34;compute.googleapis.com/Instance&#34;, &#34;compute.googleapis.com/Disk&#34;, &#34;sqladmin.googleapis.com/Instance&#34; and &#34;storage.googleapis.com/Bucket&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type to which the `BackupPlan` will be applied.
         * Examples include, &#34;compute.googleapis.com/Instance&#34;, &#34;compute.googleapis.com/Disk&#34;, &#34;sqladmin.googleapis.com/Instance&#34; and &#34;storage.googleapis.com/Bucket&#34;.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param supportedResourceTypes The list of all resource types to which the &#39;BackupPlan&#39; can be applied.
         * 
         * @return builder
         * 
         */
        public Builder supportedResourceTypes(@Nullable Output<List<String>> supportedResourceTypes) {
            $.supportedResourceTypes = supportedResourceTypes;
            return this;
        }

        /**
         * @param supportedResourceTypes The list of all resource types to which the &#39;BackupPlan&#39; can be applied.
         * 
         * @return builder
         * 
         */
        public Builder supportedResourceTypes(List<String> supportedResourceTypes) {
            return supportedResourceTypes(Output.of(supportedResourceTypes));
        }

        /**
         * @param supportedResourceTypes The list of all resource types to which the &#39;BackupPlan&#39; can be applied.
         * 
         * @return builder
         * 
         */
        public Builder supportedResourceTypes(String... supportedResourceTypes) {
            return supportedResourceTypes(List.of(supportedResourceTypes));
        }

        /**
         * @param updateTime When the `BackupPlan` was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime When the `BackupPlan` was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public BackupPlanState build() {
            return $;
        }
    }

}
