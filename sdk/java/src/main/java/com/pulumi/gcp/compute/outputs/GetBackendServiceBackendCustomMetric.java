// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackendServiceBackendCustomMetric {
    /**
     * @return If true, the metric data is collected and reported to Cloud
     * Monitoring, but is not used for load balancing.
     * 
     */
    private Boolean dryRun;
    /**
     * @return Optional parameter to define a target utilization for the Custom Metrics
     * balancing mode. The valid range is &lt;code&gt;[0.0, 1.0]&lt;/code&gt;.
     * 
     */
    private Double maxUtilization;
    /**
     * @return The name of the Backend Service.
     * 
     * ***
     * 
     */
    private String name;

    private GetBackendServiceBackendCustomMetric() {}
    /**
     * @return If true, the metric data is collected and reported to Cloud
     * Monitoring, but is not used for load balancing.
     * 
     */
    public Boolean dryRun() {
        return this.dryRun;
    }
    /**
     * @return Optional parameter to define a target utilization for the Custom Metrics
     * balancing mode. The valid range is &lt;code&gt;[0.0, 1.0]&lt;/code&gt;.
     * 
     */
    public Double maxUtilization() {
        return this.maxUtilization;
    }
    /**
     * @return The name of the Backend Service.
     * 
     * ***
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceBackendCustomMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean dryRun;
        private Double maxUtilization;
        private String name;
        public Builder() {}
        public Builder(GetBackendServiceBackendCustomMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dryRun = defaults.dryRun;
    	      this.maxUtilization = defaults.maxUtilization;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder dryRun(Boolean dryRun) {
            if (dryRun == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackendCustomMetric", "dryRun");
            }
            this.dryRun = dryRun;
            return this;
        }
        @CustomType.Setter
        public Builder maxUtilization(Double maxUtilization) {
            if (maxUtilization == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackendCustomMetric", "maxUtilization");
            }
            this.maxUtilization = maxUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackendCustomMetric", "name");
            }
            this.name = name;
            return this;
        }
        public GetBackendServiceBackendCustomMetric build() {
            final var _resultValue = new GetBackendServiceBackendCustomMetric();
            _resultValue.dryRun = dryRun;
            _resultValue.maxUtilization = maxUtilization;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
