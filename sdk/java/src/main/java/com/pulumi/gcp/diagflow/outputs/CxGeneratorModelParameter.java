// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxGeneratorModelParameter {
    /**
     * @return The maximum number of tokens to generate.
     * 
     */
    private @Nullable Integer maxDecodeSteps;
    /**
     * @return The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
     * Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
     * 
     */
    private @Nullable Double temperature;
    /**
     * @return If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
     * Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
     * 
     */
    private @Nullable Integer topK;
    /**
     * @return If set, only the tokens comprising the top topP probability mass are considered.
     * If both topP and topK are set, topP will be used for further refining candidates selected with topK.
     * Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
     * 
     */
    private @Nullable Double topP;

    private CxGeneratorModelParameter() {}
    /**
     * @return The maximum number of tokens to generate.
     * 
     */
    public Optional<Integer> maxDecodeSteps() {
        return Optional.ofNullable(this.maxDecodeSteps);
    }
    /**
     * @return The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
     * Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
     * 
     */
    public Optional<Double> temperature() {
        return Optional.ofNullable(this.temperature);
    }
    /**
     * @return If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
     * Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
     * 
     */
    public Optional<Integer> topK() {
        return Optional.ofNullable(this.topK);
    }
    /**
     * @return If set, only the tokens comprising the top topP probability mass are considered.
     * If both topP and topK are set, topP will be used for further refining candidates selected with topK.
     * Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
     * 
     */
    public Optional<Double> topP() {
        return Optional.ofNullable(this.topP);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxGeneratorModelParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer maxDecodeSteps;
        private @Nullable Double temperature;
        private @Nullable Integer topK;
        private @Nullable Double topP;
        public Builder() {}
        public Builder(CxGeneratorModelParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxDecodeSteps = defaults.maxDecodeSteps;
    	      this.temperature = defaults.temperature;
    	      this.topK = defaults.topK;
    	      this.topP = defaults.topP;
        }

        @CustomType.Setter
        public Builder maxDecodeSteps(@Nullable Integer maxDecodeSteps) {

            this.maxDecodeSteps = maxDecodeSteps;
            return this;
        }
        @CustomType.Setter
        public Builder temperature(@Nullable Double temperature) {

            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder topK(@Nullable Integer topK) {

            this.topK = topK;
            return this;
        }
        @CustomType.Setter
        public Builder topP(@Nullable Double topP) {

            this.topP = topP;
            return this;
        }
        public CxGeneratorModelParameter build() {
            final var _resultValue = new CxGeneratorModelParameter();
            _resultValue.maxDecodeSteps = maxDecodeSteps;
            _resultValue.temperature = temperature;
            _resultValue.topK = topK;
            _resultValue.topP = topP;
            return _resultValue;
        }
    }
}
