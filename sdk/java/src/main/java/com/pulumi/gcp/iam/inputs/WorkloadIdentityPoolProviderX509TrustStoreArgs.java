// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.iam.inputs.WorkloadIdentityPoolProviderX509TrustStoreIntermediateCaArgs;
import com.pulumi.gcp.iam.inputs.WorkloadIdentityPoolProviderX509TrustStoreTrustAnchorArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadIdentityPoolProviderX509TrustStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadIdentityPoolProviderX509TrustStoreArgs Empty = new WorkloadIdentityPoolProviderX509TrustStoreArgs();

    /**
     * Set of intermediate CA certificates used for building the trust chain to
     * trust anchor.
     * IMPORTANT: Intermediate CAs are only supported when configuring x509 federation.
     * Structure is documented below.
     * 
     */
    @Import(name="intermediateCas")
    private @Nullable Output<List<WorkloadIdentityPoolProviderX509TrustStoreIntermediateCaArgs>> intermediateCas;

    /**
     * @return Set of intermediate CA certificates used for building the trust chain to
     * trust anchor.
     * IMPORTANT: Intermediate CAs are only supported when configuring x509 federation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WorkloadIdentityPoolProviderX509TrustStoreIntermediateCaArgs>>> intermediateCas() {
        return Optional.ofNullable(this.intermediateCas);
    }

    /**
     * List of Trust Anchors to be used while performing validation
     * against a given TrustStore. The incoming end entity&#39;s certificate
     * must be chained up to one of the trust anchors here.
     * Structure is documented below.
     * 
     */
    @Import(name="trustAnchors", required=true)
    private Output<List<WorkloadIdentityPoolProviderX509TrustStoreTrustAnchorArgs>> trustAnchors;

    /**
     * @return List of Trust Anchors to be used while performing validation
     * against a given TrustStore. The incoming end entity&#39;s certificate
     * must be chained up to one of the trust anchors here.
     * Structure is documented below.
     * 
     */
    public Output<List<WorkloadIdentityPoolProviderX509TrustStoreTrustAnchorArgs>> trustAnchors() {
        return this.trustAnchors;
    }

    private WorkloadIdentityPoolProviderX509TrustStoreArgs() {}

    private WorkloadIdentityPoolProviderX509TrustStoreArgs(WorkloadIdentityPoolProviderX509TrustStoreArgs $) {
        this.intermediateCas = $.intermediateCas;
        this.trustAnchors = $.trustAnchors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadIdentityPoolProviderX509TrustStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadIdentityPoolProviderX509TrustStoreArgs $;

        public Builder() {
            $ = new WorkloadIdentityPoolProviderX509TrustStoreArgs();
        }

        public Builder(WorkloadIdentityPoolProviderX509TrustStoreArgs defaults) {
            $ = new WorkloadIdentityPoolProviderX509TrustStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intermediateCas Set of intermediate CA certificates used for building the trust chain to
         * trust anchor.
         * IMPORTANT: Intermediate CAs are only supported when configuring x509 federation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder intermediateCas(@Nullable Output<List<WorkloadIdentityPoolProviderX509TrustStoreIntermediateCaArgs>> intermediateCas) {
            $.intermediateCas = intermediateCas;
            return this;
        }

        /**
         * @param intermediateCas Set of intermediate CA certificates used for building the trust chain to
         * trust anchor.
         * IMPORTANT: Intermediate CAs are only supported when configuring x509 federation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder intermediateCas(List<WorkloadIdentityPoolProviderX509TrustStoreIntermediateCaArgs> intermediateCas) {
            return intermediateCas(Output.of(intermediateCas));
        }

        /**
         * @param intermediateCas Set of intermediate CA certificates used for building the trust chain to
         * trust anchor.
         * IMPORTANT: Intermediate CAs are only supported when configuring x509 federation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder intermediateCas(WorkloadIdentityPoolProviderX509TrustStoreIntermediateCaArgs... intermediateCas) {
            return intermediateCas(List.of(intermediateCas));
        }

        /**
         * @param trustAnchors List of Trust Anchors to be used while performing validation
         * against a given TrustStore. The incoming end entity&#39;s certificate
         * must be chained up to one of the trust anchors here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustAnchors(Output<List<WorkloadIdentityPoolProviderX509TrustStoreTrustAnchorArgs>> trustAnchors) {
            $.trustAnchors = trustAnchors;
            return this;
        }

        /**
         * @param trustAnchors List of Trust Anchors to be used while performing validation
         * against a given TrustStore. The incoming end entity&#39;s certificate
         * must be chained up to one of the trust anchors here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustAnchors(List<WorkloadIdentityPoolProviderX509TrustStoreTrustAnchorArgs> trustAnchors) {
            return trustAnchors(Output.of(trustAnchors));
        }

        /**
         * @param trustAnchors List of Trust Anchors to be used while performing validation
         * against a given TrustStore. The incoming end entity&#39;s certificate
         * must be chained up to one of the trust anchors here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder trustAnchors(WorkloadIdentityPoolProviderX509TrustStoreTrustAnchorArgs... trustAnchors) {
            return trustAnchors(List.of(trustAnchors));
        }

        public WorkloadIdentityPoolProviderX509TrustStoreArgs build() {
            if ($.trustAnchors == null) {
                throw new MissingRequiredPropertyException("WorkloadIdentityPoolProviderX509TrustStoreArgs", "trustAnchors");
            }
            return $;
        }
    }

}
