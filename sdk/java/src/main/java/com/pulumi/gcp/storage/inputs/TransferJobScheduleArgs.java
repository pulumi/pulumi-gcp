// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleEndDateArgs;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleStartDateArgs;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleStartTimeOfDayArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobScheduleArgs Empty = new TransferJobScheduleArgs();

    /**
     * Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="repeatInterval")
    private @Nullable Output<String> repeatInterval;

    /**
     * @return Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> repeatInterval() {
        return Optional.ofNullable(this.repeatInterval);
    }

    /**
     * The last day the recurring transfer will be run. If `schedule_end_date` is the same as `schedule_start_date`, the transfer will be executed only once. Structure documented below.
     * 
     */
    @Import(name="scheduleEndDate")
    private @Nullable Output<TransferJobScheduleScheduleEndDateArgs> scheduleEndDate;

    /**
     * @return The last day the recurring transfer will be run. If `schedule_end_date` is the same as `schedule_start_date`, the transfer will be executed only once. Structure documented below.
     * 
     */
    public Optional<Output<TransferJobScheduleScheduleEndDateArgs>> scheduleEndDate() {
        return Optional.ofNullable(this.scheduleEndDate);
    }

    /**
     * The first day the recurring transfer is scheduled to run. If `schedule_start_date` is in the past, the transfer will run for the first time on the following day. Structure documented below.
     * 
     */
    @Import(name="scheduleStartDate", required=true)
    private Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate;

    /**
     * @return The first day the recurring transfer is scheduled to run. If `schedule_start_date` is in the past, the transfer will run for the first time on the following day. Structure documented below.
     * 
     */
    public Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate() {
        return this.scheduleStartDate;
    }

    /**
     * The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer&#39;s start time in a day is specified in your local timezone. Structure documented below.
     * 
     */
    @Import(name="startTimeOfDay")
    private @Nullable Output<TransferJobScheduleStartTimeOfDayArgs> startTimeOfDay;

    /**
     * @return The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer&#39;s start time in a day is specified in your local timezone. Structure documented below.
     * 
     */
    public Optional<Output<TransferJobScheduleStartTimeOfDayArgs>> startTimeOfDay() {
        return Optional.ofNullable(this.startTimeOfDay);
    }

    private TransferJobScheduleArgs() {}

    private TransferJobScheduleArgs(TransferJobScheduleArgs $) {
        this.repeatInterval = $.repeatInterval;
        this.scheduleEndDate = $.scheduleEndDate;
        this.scheduleStartDate = $.scheduleStartDate;
        this.startTimeOfDay = $.startTimeOfDay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobScheduleArgs $;

        public Builder() {
            $ = new TransferJobScheduleArgs();
        }

        public Builder(TransferJobScheduleArgs defaults) {
            $ = new TransferJobScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repeatInterval Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(@Nullable Output<String> repeatInterval) {
            $.repeatInterval = repeatInterval;
            return this;
        }

        /**
         * @param repeatInterval Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(String repeatInterval) {
            return repeatInterval(Output.of(repeatInterval));
        }

        /**
         * @param scheduleEndDate The last day the recurring transfer will be run. If `schedule_end_date` is the same as `schedule_start_date`, the transfer will be executed only once. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder scheduleEndDate(@Nullable Output<TransferJobScheduleScheduleEndDateArgs> scheduleEndDate) {
            $.scheduleEndDate = scheduleEndDate;
            return this;
        }

        /**
         * @param scheduleEndDate The last day the recurring transfer will be run. If `schedule_end_date` is the same as `schedule_start_date`, the transfer will be executed only once. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder scheduleEndDate(TransferJobScheduleScheduleEndDateArgs scheduleEndDate) {
            return scheduleEndDate(Output.of(scheduleEndDate));
        }

        /**
         * @param scheduleStartDate The first day the recurring transfer is scheduled to run. If `schedule_start_date` is in the past, the transfer will run for the first time on the following day. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder scheduleStartDate(Output<TransferJobScheduleScheduleStartDateArgs> scheduleStartDate) {
            $.scheduleStartDate = scheduleStartDate;
            return this;
        }

        /**
         * @param scheduleStartDate The first day the recurring transfer is scheduled to run. If `schedule_start_date` is in the past, the transfer will run for the first time on the following day. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder scheduleStartDate(TransferJobScheduleScheduleStartDateArgs scheduleStartDate) {
            return scheduleStartDate(Output.of(scheduleStartDate));
        }

        /**
         * @param startTimeOfDay The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer&#39;s start time in a day is specified in your local timezone. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder startTimeOfDay(@Nullable Output<TransferJobScheduleStartTimeOfDayArgs> startTimeOfDay) {
            $.startTimeOfDay = startTimeOfDay;
            return this;
        }

        /**
         * @param startTimeOfDay The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer&#39;s start time in a day is specified in your local timezone. Structure documented below.
         * 
         * @return builder
         * 
         */
        public Builder startTimeOfDay(TransferJobScheduleStartTimeOfDayArgs startTimeOfDay) {
            return startTimeOfDay(Output.of(startTimeOfDay));
        }

        public TransferJobScheduleArgs build() {
            $.scheduleStartDate = Objects.requireNonNull($.scheduleStartDate, "expected parameter 'scheduleStartDate' to be non-null");
            return $;
        }
    }

}
