// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.LakeAssetStatusArgs;
import com.pulumi.gcp.dataplex.inputs.LakeMetastoreArgs;
import com.pulumi.gcp.dataplex.inputs.LakeMetastoreStatusArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LakeState extends com.pulumi.resources.ResourceArgs {

    public static final LakeState Empty = new LakeState();

    /**
     * Output only. Aggregated status of the underlying assets of the lake.
     * 
     */
    @Import(name="assetStatuses")
    private @Nullable Output<List<LakeAssetStatusArgs>> assetStatuses;

    /**
     * @return Output only. Aggregated status of the underlying assets of the lake.
     * 
     */
    public Optional<Output<List<LakeAssetStatusArgs>>> assetStatuses() {
        return Optional.ofNullable(this.assetStatuses);
    }

    /**
     * Output only. The time when the lake was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The time when the lake was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Optional. Description of the lake.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. Description of the lake.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. User friendly display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. User friendly display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Optional. User-defined labels for the lake.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. User-defined labels for the lake.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Settings to manage lake and Dataproc Metastore service instance association.
     * 
     */
    @Import(name="metastore")
    private @Nullable Output<LakeMetastoreArgs> metastore;

    /**
     * @return Optional. Settings to manage lake and Dataproc Metastore service instance association.
     * 
     */
    public Optional<Output<LakeMetastoreArgs>> metastore() {
        return Optional.ofNullable(this.metastore);
    }

    /**
     * Output only. Metastore status of the lake.
     * 
     */
    @Import(name="metastoreStatuses")
    private @Nullable Output<List<LakeMetastoreStatusArgs>> metastoreStatuses;

    /**
     * @return Output only. Metastore status of the lake.
     * 
     */
    public Optional<Output<List<LakeMetastoreStatusArgs>>> metastoreStatuses() {
        return Optional.ofNullable(this.metastoreStatuses);
    }

    /**
     * The name of the lake.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the lake.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. Service account associated with this lake. This service account must be authorized to access or operate on
     * resources managed by the lake.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Output only. Service account associated with this lake. This service account must be authorized to access or operate on
     * resources managed by the lake.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
     * re-created with the same name.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
     * re-created with the same name.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. The time when the lake was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The time when the lake was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private LakeState() {}

    private LakeState(LakeState $) {
        this.assetStatuses = $.assetStatuses;
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.metastore = $.metastore;
        this.metastoreStatuses = $.metastoreStatuses;
        this.name = $.name;
        this.project = $.project;
        this.serviceAccount = $.serviceAccount;
        this.state = $.state;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LakeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LakeState $;

        public Builder() {
            $ = new LakeState();
        }

        public Builder(LakeState defaults) {
            $ = new LakeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetStatuses Output only. Aggregated status of the underlying assets of the lake.
         * 
         * @return builder
         * 
         */
        public Builder assetStatuses(@Nullable Output<List<LakeAssetStatusArgs>> assetStatuses) {
            $.assetStatuses = assetStatuses;
            return this;
        }

        /**
         * @param assetStatuses Output only. Aggregated status of the underlying assets of the lake.
         * 
         * @return builder
         * 
         */
        public Builder assetStatuses(List<LakeAssetStatusArgs> assetStatuses) {
            return assetStatuses(Output.of(assetStatuses));
        }

        /**
         * @param assetStatuses Output only. Aggregated status of the underlying assets of the lake.
         * 
         * @return builder
         * 
         */
        public Builder assetStatuses(LakeAssetStatusArgs... assetStatuses) {
            return assetStatuses(List.of(assetStatuses));
        }

        /**
         * @param createTime Output only. The time when the lake was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The time when the lake was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Optional. Description of the lake.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. Description of the lake.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Optional. User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Optional. User-defined labels for the lake.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. User-defined labels for the lake.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param metastore Optional. Settings to manage lake and Dataproc Metastore service instance association.
         * 
         * @return builder
         * 
         */
        public Builder metastore(@Nullable Output<LakeMetastoreArgs> metastore) {
            $.metastore = metastore;
            return this;
        }

        /**
         * @param metastore Optional. Settings to manage lake and Dataproc Metastore service instance association.
         * 
         * @return builder
         * 
         */
        public Builder metastore(LakeMetastoreArgs metastore) {
            return metastore(Output.of(metastore));
        }

        /**
         * @param metastoreStatuses Output only. Metastore status of the lake.
         * 
         * @return builder
         * 
         */
        public Builder metastoreStatuses(@Nullable Output<List<LakeMetastoreStatusArgs>> metastoreStatuses) {
            $.metastoreStatuses = metastoreStatuses;
            return this;
        }

        /**
         * @param metastoreStatuses Output only. Metastore status of the lake.
         * 
         * @return builder
         * 
         */
        public Builder metastoreStatuses(List<LakeMetastoreStatusArgs> metastoreStatuses) {
            return metastoreStatuses(Output.of(metastoreStatuses));
        }

        /**
         * @param metastoreStatuses Output only. Metastore status of the lake.
         * 
         * @return builder
         * 
         */
        public Builder metastoreStatuses(LakeMetastoreStatusArgs... metastoreStatuses) {
            return metastoreStatuses(List.of(metastoreStatuses));
        }

        /**
         * @param name The name of the lake.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the lake.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceAccount Output only. Service account associated with this lake. This service account must be authorized to access or operate on
         * resources managed by the lake.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Output only. Service account associated with this lake. This service account must be authorized to access or operate on
         * resources managed by the lake.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param state Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
         * re-created with the same name.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and
         * re-created with the same name.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. The time when the lake was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The time when the lake was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public LakeState build() {
            return $;
        }
    }

}
