// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleNonNullExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleRangeExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleRegexExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleRowConditionExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleSetExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleSqlAssertion;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleStatisticRangeExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleTableConditionExpectation;
import com.pulumi.gcp.dataplex.outputs.GetDataQualityRulesRuleUniquenessExpectation;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataQualityRulesRule {
    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    private String column;
    /**
     * @return Description of the rule. (The maximum length is 1,024 characters.)
     * 
     */
    private String description;
    /**
     * @return The dimension a rule belongs to. Supported dimensions are &#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;FRESHNESS&#34;, &#34;VOLUME&#34;
     * 
     */
    private String dimension;
    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing.
     * 											This field is only valid for the following type of rules: RangeExpectation, RegexExpectation, SetExpectation, UniquenessExpectation
     * 
     */
    private Boolean ignoreNull;
    /**
     * @return A mutable name for the rule.
     * 											The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
     * 											The maximum length is 63 characters.
     * 											Must start with a letter.
     * 											Must end with a number or a letter.
     * 
     */
    private String name;
    /**
     * @return Row-level rule which evaluates whether each column value is null.
     * 
     */
    private List<GetDataQualityRulesRuleNonNullExpectation> nonNullExpectations;
    /**
     * @return Row-level rule which evaluates whether each column value lies between a specified range.
     * 
     */
    private List<GetDataQualityRulesRuleRangeExpectation> rangeExpectations;
    /**
     * @return Row-level rule which evaluates whether each column value matches a specified regex.
     * 
     */
    private List<GetDataQualityRulesRuleRegexExpectation> regexExpectations;
    /**
     * @return Row-level rule which evaluates whether each row in a table passes the specified condition.
     * 
     */
    private List<GetDataQualityRulesRuleRowConditionExpectation> rowConditionExpectations;
    /**
     * @return Row-level rule which evaluates whether each column value is contained by a specified set.
     * 
     */
    private List<GetDataQualityRulesRuleSetExpectation> setExpectations;
    /**
     * @return Aggregate rule which evaluates the number of rows returned for the provided statement. If any rows are returned, this rule fails.
     * 
     */
    private List<GetDataQualityRulesRuleSqlAssertion> sqlAssertions;
    /**
     * @return Aggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * 
     */
    private List<GetDataQualityRulesRuleStatisticRangeExpectation> statisticRangeExpectations;
    /**
     * @return Whether the Rule is active or suspended. Default is false.
     * 
     */
    private Boolean suspended;
    /**
     * @return Aggregate rule which evaluates whether the provided expression is true for a table.
     * 
     */
    private List<GetDataQualityRulesRuleTableConditionExpectation> tableConditionExpectations;
    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0). This field is only valid for row-level type rules.
     * 
     */
    private Double threshold;
    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    private List<GetDataQualityRulesRuleUniquenessExpectation> uniquenessExpectations;

    private GetDataQualityRulesRule() {}
    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    public String column() {
        return this.column;
    }
    /**
     * @return Description of the rule. (The maximum length is 1,024 characters.)
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The dimension a rule belongs to. Supported dimensions are &#34;COMPLETENESS&#34;, &#34;ACCURACY&#34;, &#34;CONSISTENCY&#34;, &#34;VALIDITY&#34;, &#34;UNIQUENESS&#34;, &#34;FRESHNESS&#34;, &#34;VOLUME&#34;
     * 
     */
    public String dimension() {
        return this.dimension;
    }
    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing.
     * 											This field is only valid for the following type of rules: RangeExpectation, RegexExpectation, SetExpectation, UniquenessExpectation
     * 
     */
    public Boolean ignoreNull() {
        return this.ignoreNull;
    }
    /**
     * @return A mutable name for the rule.
     * 											The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
     * 											The maximum length is 63 characters.
     * 											Must start with a letter.
     * 											Must end with a number or a letter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Row-level rule which evaluates whether each column value is null.
     * 
     */
    public List<GetDataQualityRulesRuleNonNullExpectation> nonNullExpectations() {
        return this.nonNullExpectations;
    }
    /**
     * @return Row-level rule which evaluates whether each column value lies between a specified range.
     * 
     */
    public List<GetDataQualityRulesRuleRangeExpectation> rangeExpectations() {
        return this.rangeExpectations;
    }
    /**
     * @return Row-level rule which evaluates whether each column value matches a specified regex.
     * 
     */
    public List<GetDataQualityRulesRuleRegexExpectation> regexExpectations() {
        return this.regexExpectations;
    }
    /**
     * @return Row-level rule which evaluates whether each row in a table passes the specified condition.
     * 
     */
    public List<GetDataQualityRulesRuleRowConditionExpectation> rowConditionExpectations() {
        return this.rowConditionExpectations;
    }
    /**
     * @return Row-level rule which evaluates whether each column value is contained by a specified set.
     * 
     */
    public List<GetDataQualityRulesRuleSetExpectation> setExpectations() {
        return this.setExpectations;
    }
    /**
     * @return Aggregate rule which evaluates the number of rows returned for the provided statement. If any rows are returned, this rule fails.
     * 
     */
    public List<GetDataQualityRulesRuleSqlAssertion> sqlAssertions() {
        return this.sqlAssertions;
    }
    /**
     * @return Aggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * 
     */
    public List<GetDataQualityRulesRuleStatisticRangeExpectation> statisticRangeExpectations() {
        return this.statisticRangeExpectations;
    }
    /**
     * @return Whether the Rule is active or suspended. Default is false.
     * 
     */
    public Boolean suspended() {
        return this.suspended;
    }
    /**
     * @return Aggregate rule which evaluates whether the provided expression is true for a table.
     * 
     */
    public List<GetDataQualityRulesRuleTableConditionExpectation> tableConditionExpectations() {
        return this.tableConditionExpectations;
    }
    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0). This field is only valid for row-level type rules.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    public List<GetDataQualityRulesRuleUniquenessExpectation> uniquenessExpectations() {
        return this.uniquenessExpectations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataQualityRulesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String column;
        private String description;
        private String dimension;
        private Boolean ignoreNull;
        private String name;
        private List<GetDataQualityRulesRuleNonNullExpectation> nonNullExpectations;
        private List<GetDataQualityRulesRuleRangeExpectation> rangeExpectations;
        private List<GetDataQualityRulesRuleRegexExpectation> regexExpectations;
        private List<GetDataQualityRulesRuleRowConditionExpectation> rowConditionExpectations;
        private List<GetDataQualityRulesRuleSetExpectation> setExpectations;
        private List<GetDataQualityRulesRuleSqlAssertion> sqlAssertions;
        private List<GetDataQualityRulesRuleStatisticRangeExpectation> statisticRangeExpectations;
        private Boolean suspended;
        private List<GetDataQualityRulesRuleTableConditionExpectation> tableConditionExpectations;
        private Double threshold;
        private List<GetDataQualityRulesRuleUniquenessExpectation> uniquenessExpectations;
        public Builder() {}
        public Builder(GetDataQualityRulesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.description = defaults.description;
    	      this.dimension = defaults.dimension;
    	      this.ignoreNull = defaults.ignoreNull;
    	      this.name = defaults.name;
    	      this.nonNullExpectations = defaults.nonNullExpectations;
    	      this.rangeExpectations = defaults.rangeExpectations;
    	      this.regexExpectations = defaults.regexExpectations;
    	      this.rowConditionExpectations = defaults.rowConditionExpectations;
    	      this.setExpectations = defaults.setExpectations;
    	      this.sqlAssertions = defaults.sqlAssertions;
    	      this.statisticRangeExpectations = defaults.statisticRangeExpectations;
    	      this.suspended = defaults.suspended;
    	      this.tableConditionExpectations = defaults.tableConditionExpectations;
    	      this.threshold = defaults.threshold;
    	      this.uniquenessExpectations = defaults.uniquenessExpectations;
        }

        @CustomType.Setter
        public Builder column(String column) {
            if (column == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "column");
            }
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dimension(String dimension) {
            if (dimension == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "dimension");
            }
            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreNull(Boolean ignoreNull) {
            if (ignoreNull == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "ignoreNull");
            }
            this.ignoreNull = ignoreNull;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nonNullExpectations(List<GetDataQualityRulesRuleNonNullExpectation> nonNullExpectations) {
            if (nonNullExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "nonNullExpectations");
            }
            this.nonNullExpectations = nonNullExpectations;
            return this;
        }
        public Builder nonNullExpectations(GetDataQualityRulesRuleNonNullExpectation... nonNullExpectations) {
            return nonNullExpectations(List.of(nonNullExpectations));
        }
        @CustomType.Setter
        public Builder rangeExpectations(List<GetDataQualityRulesRuleRangeExpectation> rangeExpectations) {
            if (rangeExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "rangeExpectations");
            }
            this.rangeExpectations = rangeExpectations;
            return this;
        }
        public Builder rangeExpectations(GetDataQualityRulesRuleRangeExpectation... rangeExpectations) {
            return rangeExpectations(List.of(rangeExpectations));
        }
        @CustomType.Setter
        public Builder regexExpectations(List<GetDataQualityRulesRuleRegexExpectation> regexExpectations) {
            if (regexExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "regexExpectations");
            }
            this.regexExpectations = regexExpectations;
            return this;
        }
        public Builder regexExpectations(GetDataQualityRulesRuleRegexExpectation... regexExpectations) {
            return regexExpectations(List.of(regexExpectations));
        }
        @CustomType.Setter
        public Builder rowConditionExpectations(List<GetDataQualityRulesRuleRowConditionExpectation> rowConditionExpectations) {
            if (rowConditionExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "rowConditionExpectations");
            }
            this.rowConditionExpectations = rowConditionExpectations;
            return this;
        }
        public Builder rowConditionExpectations(GetDataQualityRulesRuleRowConditionExpectation... rowConditionExpectations) {
            return rowConditionExpectations(List.of(rowConditionExpectations));
        }
        @CustomType.Setter
        public Builder setExpectations(List<GetDataQualityRulesRuleSetExpectation> setExpectations) {
            if (setExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "setExpectations");
            }
            this.setExpectations = setExpectations;
            return this;
        }
        public Builder setExpectations(GetDataQualityRulesRuleSetExpectation... setExpectations) {
            return setExpectations(List.of(setExpectations));
        }
        @CustomType.Setter
        public Builder sqlAssertions(List<GetDataQualityRulesRuleSqlAssertion> sqlAssertions) {
            if (sqlAssertions == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "sqlAssertions");
            }
            this.sqlAssertions = sqlAssertions;
            return this;
        }
        public Builder sqlAssertions(GetDataQualityRulesRuleSqlAssertion... sqlAssertions) {
            return sqlAssertions(List.of(sqlAssertions));
        }
        @CustomType.Setter
        public Builder statisticRangeExpectations(List<GetDataQualityRulesRuleStatisticRangeExpectation> statisticRangeExpectations) {
            if (statisticRangeExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "statisticRangeExpectations");
            }
            this.statisticRangeExpectations = statisticRangeExpectations;
            return this;
        }
        public Builder statisticRangeExpectations(GetDataQualityRulesRuleStatisticRangeExpectation... statisticRangeExpectations) {
            return statisticRangeExpectations(List.of(statisticRangeExpectations));
        }
        @CustomType.Setter
        public Builder suspended(Boolean suspended) {
            if (suspended == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "suspended");
            }
            this.suspended = suspended;
            return this;
        }
        @CustomType.Setter
        public Builder tableConditionExpectations(List<GetDataQualityRulesRuleTableConditionExpectation> tableConditionExpectations) {
            if (tableConditionExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "tableConditionExpectations");
            }
            this.tableConditionExpectations = tableConditionExpectations;
            return this;
        }
        public Builder tableConditionExpectations(GetDataQualityRulesRuleTableConditionExpectation... tableConditionExpectations) {
            return tableConditionExpectations(List.of(tableConditionExpectations));
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder uniquenessExpectations(List<GetDataQualityRulesRuleUniquenessExpectation> uniquenessExpectations) {
            if (uniquenessExpectations == null) {
              throw new MissingRequiredPropertyException("GetDataQualityRulesRule", "uniquenessExpectations");
            }
            this.uniquenessExpectations = uniquenessExpectations;
            return this;
        }
        public Builder uniquenessExpectations(GetDataQualityRulesRuleUniquenessExpectation... uniquenessExpectations) {
            return uniquenessExpectations(List.of(uniquenessExpectations));
        }
        public GetDataQualityRulesRule build() {
            final var _resultValue = new GetDataQualityRulesRule();
            _resultValue.column = column;
            _resultValue.description = description;
            _resultValue.dimension = dimension;
            _resultValue.ignoreNull = ignoreNull;
            _resultValue.name = name;
            _resultValue.nonNullExpectations = nonNullExpectations;
            _resultValue.rangeExpectations = rangeExpectations;
            _resultValue.regexExpectations = regexExpectations;
            _resultValue.rowConditionExpectations = rowConditionExpectations;
            _resultValue.setExpectations = setExpectations;
            _resultValue.sqlAssertions = sqlAssertions;
            _resultValue.statisticRangeExpectations = statisticRangeExpectations;
            _resultValue.suspended = suspended;
            _resultValue.tableConditionExpectations = tableConditionExpectations;
            _resultValue.threshold = threshold;
            _resultValue.uniquenessExpectations = uniquenessExpectations;
            return _resultValue;
        }
    }
}
