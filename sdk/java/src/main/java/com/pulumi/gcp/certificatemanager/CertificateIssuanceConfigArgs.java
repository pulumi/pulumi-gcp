// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificatemanager.inputs.CertificateIssuanceConfigCertificateAuthorityConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateIssuanceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateIssuanceConfigArgs Empty = new CertificateIssuanceConfigArgs();

    /**
     * The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
     * Structure is documented below.
     * 
     */
    @Import(name="certificateAuthorityConfig", required=true)
    private Output<CertificateIssuanceConfigCertificateAuthorityConfigArgs> certificateAuthorityConfig;

    /**
     * @return The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
     * Structure is documented below.
     * 
     */
    public Output<CertificateIssuanceConfigCertificateAuthorityConfigArgs> certificateAuthorityConfig() {
        return this.certificateAuthorityConfig;
    }

    /**
     * One or more paragraphs of text description of a CertificateIssuanceConfig.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return One or more paragraphs of text description of a CertificateIssuanceConfig.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Key algorithm to use when generating the private key.
     * Possible values are: `RSA_2048`, `ECDSA_P256`.
     * 
     */
    @Import(name="keyAlgorithm", required=true)
    private Output<String> keyAlgorithm;

    /**
     * @return Key algorithm to use when generating the private key.
     * Possible values are: `RSA_2048`, `ECDSA_P256`.
     * 
     */
    public Output<String> keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * &#39;Set of label tags associated with the CertificateIssuanceConfig resource.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return &#39;Set of label tags associated with the CertificateIssuanceConfig resource.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
     * Example: &#34;1814400s&#34;. Valid values are from 21 days (1814400s) to 30 days (2592000s)
     * 
     */
    @Import(name="lifetime", required=true)
    private Output<String> lifetime;

    /**
     * @return Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
     * Example: &#34;1814400s&#34;. Valid values are from 21 days (1814400s) to 30 days (2592000s)
     * 
     */
    public Output<String> lifetime() {
        return this.lifetime;
    }

    /**
     * The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A user-defined name of the certificate issuance config.
     * CertificateIssuanceConfig names must be unique globally.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-defined name of the certificate issuance config.
     * CertificateIssuanceConfig names must be unique globally.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
     * Must be a number between 1-99, inclusive.
     * You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
     * the certificate has been issued and at least 7 days before it expires.
     * 
     */
    @Import(name="rotationWindowPercentage", required=true)
    private Output<Integer> rotationWindowPercentage;

    /**
     * @return It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
     * Must be a number between 1-99, inclusive.
     * You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
     * the certificate has been issued and at least 7 days before it expires.
     * 
     */
    public Output<Integer> rotationWindowPercentage() {
        return this.rotationWindowPercentage;
    }

    private CertificateIssuanceConfigArgs() {}

    private CertificateIssuanceConfigArgs(CertificateIssuanceConfigArgs $) {
        this.certificateAuthorityConfig = $.certificateAuthorityConfig;
        this.description = $.description;
        this.keyAlgorithm = $.keyAlgorithm;
        this.labels = $.labels;
        this.lifetime = $.lifetime;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.rotationWindowPercentage = $.rotationWindowPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateIssuanceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateIssuanceConfigArgs $;

        public Builder() {
            $ = new CertificateIssuanceConfigArgs();
        }

        public Builder(CertificateIssuanceConfigArgs defaults) {
            $ = new CertificateIssuanceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthorityConfig The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityConfig(Output<CertificateIssuanceConfigCertificateAuthorityConfigArgs> certificateAuthorityConfig) {
            $.certificateAuthorityConfig = certificateAuthorityConfig;
            return this;
        }

        /**
         * @param certificateAuthorityConfig The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityConfig(CertificateIssuanceConfigCertificateAuthorityConfigArgs certificateAuthorityConfig) {
            return certificateAuthorityConfig(Output.of(certificateAuthorityConfig));
        }

        /**
         * @param description One or more paragraphs of text description of a CertificateIssuanceConfig.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description One or more paragraphs of text description of a CertificateIssuanceConfig.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param keyAlgorithm Key algorithm to use when generating the private key.
         * Possible values are: `RSA_2048`, `ECDSA_P256`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm Key algorithm to use when generating the private key.
         * Possible values are: `RSA_2048`, `ECDSA_P256`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param labels &#39;Set of label tags associated with the CertificateIssuanceConfig resource.
         * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels &#39;Set of label tags associated with the CertificateIssuanceConfig resource.
         * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lifetime Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
         * Example: &#34;1814400s&#34;. Valid values are from 21 days (1814400s) to 30 days (2592000s)
         * 
         * @return builder
         * 
         */
        public Builder lifetime(Output<String> lifetime) {
            $.lifetime = lifetime;
            return this;
        }

        /**
         * @param lifetime Lifetime of issued certificates. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
         * Example: &#34;1814400s&#34;. Valid values are from 21 days (1814400s) to 30 days (2592000s)
         * 
         * @return builder
         * 
         */
        public Builder lifetime(String lifetime) {
            return lifetime(Output.of(lifetime));
        }

        /**
         * @param location The Certificate Manager location. If not specified, &#34;global&#34; is used.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Certificate Manager location. If not specified, &#34;global&#34; is used.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name A user-defined name of the certificate issuance config.
         * CertificateIssuanceConfig names must be unique globally.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-defined name of the certificate issuance config.
         * CertificateIssuanceConfig names must be unique globally.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rotationWindowPercentage It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
         * Must be a number between 1-99, inclusive.
         * You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
         * the certificate has been issued and at least 7 days before it expires.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindowPercentage(Output<Integer> rotationWindowPercentage) {
            $.rotationWindowPercentage = rotationWindowPercentage;
            return this;
        }

        /**
         * @param rotationWindowPercentage It specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate.
         * Must be a number between 1-99, inclusive.
         * You must set the rotation window percentage in relation to the certificate lifetime so that certificate renewal occurs at least 7 days after
         * the certificate has been issued and at least 7 days before it expires.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindowPercentage(Integer rotationWindowPercentage) {
            return rotationWindowPercentage(Output.of(rotationWindowPercentage));
        }

        public CertificateIssuanceConfigArgs build() {
            if ($.certificateAuthorityConfig == null) {
                throw new MissingRequiredPropertyException("CertificateIssuanceConfigArgs", "certificateAuthorityConfig");
            }
            if ($.keyAlgorithm == null) {
                throw new MissingRequiredPropertyException("CertificateIssuanceConfigArgs", "keyAlgorithm");
            }
            if ($.lifetime == null) {
                throw new MissingRequiredPropertyException("CertificateIssuanceConfigArgs", "lifetime");
            }
            if ($.rotationWindowPercentage == null) {
                throw new MissingRequiredPropertyException("CertificateIssuanceConfigArgs", "rotationWindowPercentage");
            }
            return $;
        }
    }

}
