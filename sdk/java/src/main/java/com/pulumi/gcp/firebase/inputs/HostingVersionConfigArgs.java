// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebase.inputs.HostingVersionConfigRedirectArgs;
import com.pulumi.gcp.firebase.inputs.HostingVersionConfigRewriteArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostingVersionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostingVersionConfigArgs Empty = new HostingVersionConfigArgs();

    /**
     * An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path,
     * triggers Hosting to respond with a redirect to the specified destination path.
     * Structure is documented below.
     * 
     */
    @Import(name="redirects")
    private @Nullable Output<List<HostingVersionConfigRedirectArgs>> redirects;

    /**
     * @return An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path,
     * triggers Hosting to respond with a redirect to the specified destination path.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HostingVersionConfigRedirectArgs>>> redirects() {
        return Optional.ofNullable(this.redirects);
    }

    /**
     * An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the
     * request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     * Structure is documented below.
     * 
     */
    @Import(name="rewrites")
    private @Nullable Output<List<HostingVersionConfigRewriteArgs>> rewrites;

    /**
     * @return An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the
     * request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HostingVersionConfigRewriteArgs>>> rewrites() {
        return Optional.ofNullable(this.rewrites);
    }

    private HostingVersionConfigArgs() {}

    private HostingVersionConfigArgs(HostingVersionConfigArgs $) {
        this.redirects = $.redirects;
        this.rewrites = $.rewrites;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostingVersionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostingVersionConfigArgs $;

        public Builder() {
            $ = new HostingVersionConfigArgs();
        }

        public Builder(HostingVersionConfigArgs defaults) {
            $ = new HostingVersionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param redirects An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path,
         * triggers Hosting to respond with a redirect to the specified destination path.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redirects(@Nullable Output<List<HostingVersionConfigRedirectArgs>> redirects) {
            $.redirects = redirects;
            return this;
        }

        /**
         * @param redirects An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path,
         * triggers Hosting to respond with a redirect to the specified destination path.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redirects(List<HostingVersionConfigRedirectArgs> redirects) {
            return redirects(Output.of(redirects));
        }

        /**
         * @param redirects An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path,
         * triggers Hosting to respond with a redirect to the specified destination path.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redirects(HostingVersionConfigRedirectArgs... redirects) {
            return redirects(List.of(redirects));
        }

        /**
         * @param rewrites An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the
         * request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rewrites(@Nullable Output<List<HostingVersionConfigRewriteArgs>> rewrites) {
            $.rewrites = rewrites;
            return this;
        }

        /**
         * @param rewrites An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the
         * request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rewrites(List<HostingVersionConfigRewriteArgs> rewrites) {
            return rewrites(Output.of(rewrites));
        }

        /**
         * @param rewrites An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the
         * request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rewrites(HostingVersionConfigRewriteArgs... rewrites) {
            return rewrites(List.of(rewrites));
        }

        public HostingVersionConfigArgs build() {
            return $;
        }
    }

}
