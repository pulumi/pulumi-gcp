// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionSecurityPolicyUserDefinedFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionSecurityPolicyUserDefinedFieldArgs Empty = new RegionSecurityPolicyUserDefinedFieldArgs();

    /**
     * The base relative to which &#39;offset&#39; is measured. Possible values are:
     * - IPV4: Points to the beginning of the IPv4 header.
     * - IPV6: Points to the beginning of the IPv6 header.
     * - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
     * - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
     *   Possible values are: `IPV4`, `IPV6`, `TCP`, `UDP`.
     * 
     */
    @Import(name="base", required=true)
    private Output<String> base;

    /**
     * @return The base relative to which &#39;offset&#39; is measured. Possible values are:
     * - IPV4: Points to the beginning of the IPv4 header.
     * - IPV6: Points to the beginning of the IPv6 header.
     * - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
     * - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
     *   Possible values are: `IPV4`, `IPV6`, `TCP`, `UDP`.
     * 
     */
    public Output<String> base() {
        return this.base;
    }

    /**
     * If specified, apply this mask (bitwise AND) to the field to ignore bits before matching.
     * Encoded as a hexadecimal number (starting with &#34;0x&#34;).
     * The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
     * 
     */
    @Import(name="mask")
    private @Nullable Output<String> mask;

    /**
     * @return If specified, apply this mask (bitwise AND) to the field to ignore bits before matching.
     * Encoded as a hexadecimal number (starting with &#34;0x&#34;).
     * The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
     * 
     */
    public Optional<Output<String>> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * The name of this field. Must be unique within the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this field. Must be unique within the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Offset of the first byte of the field (in network byte order) relative to &#39;base&#39;.
     * 
     */
    @Import(name="offset")
    private @Nullable Output<Integer> offset;

    /**
     * @return Offset of the first byte of the field (in network byte order) relative to &#39;base&#39;.
     * 
     */
    public Optional<Output<Integer>> offset() {
        return Optional.ofNullable(this.offset);
    }

    /**
     * Size of the field in bytes. Valid values: 1-4.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Size of the field in bytes. Valid values: 1-4.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    private RegionSecurityPolicyUserDefinedFieldArgs() {}

    private RegionSecurityPolicyUserDefinedFieldArgs(RegionSecurityPolicyUserDefinedFieldArgs $) {
        this.base = $.base;
        this.mask = $.mask;
        this.name = $.name;
        this.offset = $.offset;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionSecurityPolicyUserDefinedFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionSecurityPolicyUserDefinedFieldArgs $;

        public Builder() {
            $ = new RegionSecurityPolicyUserDefinedFieldArgs();
        }

        public Builder(RegionSecurityPolicyUserDefinedFieldArgs defaults) {
            $ = new RegionSecurityPolicyUserDefinedFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param base The base relative to which &#39;offset&#39; is measured. Possible values are:
         * - IPV4: Points to the beginning of the IPv4 header.
         * - IPV6: Points to the beginning of the IPv6 header.
         * - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
         * - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
         *   Possible values are: `IPV4`, `IPV6`, `TCP`, `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder base(Output<String> base) {
            $.base = base;
            return this;
        }

        /**
         * @param base The base relative to which &#39;offset&#39; is measured. Possible values are:
         * - IPV4: Points to the beginning of the IPv4 header.
         * - IPV6: Points to the beginning of the IPv6 header.
         * - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
         * - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments.
         *   Possible values are: `IPV4`, `IPV6`, `TCP`, `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder base(String base) {
            return base(Output.of(base));
        }

        /**
         * @param mask If specified, apply this mask (bitwise AND) to the field to ignore bits before matching.
         * Encoded as a hexadecimal number (starting with &#34;0x&#34;).
         * The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
         * 
         * @return builder
         * 
         */
        public Builder mask(@Nullable Output<String> mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param mask If specified, apply this mask (bitwise AND) to the field to ignore bits before matching.
         * Encoded as a hexadecimal number (starting with &#34;0x&#34;).
         * The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
         * 
         * @return builder
         * 
         */
        public Builder mask(String mask) {
            return mask(Output.of(mask));
        }

        /**
         * @param name The name of this field. Must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this field. Must be unique within the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param offset Offset of the first byte of the field (in network byte order) relative to &#39;base&#39;.
         * 
         * @return builder
         * 
         */
        public Builder offset(@Nullable Output<Integer> offset) {
            $.offset = offset;
            return this;
        }

        /**
         * @param offset Offset of the first byte of the field (in network byte order) relative to &#39;base&#39;.
         * 
         * @return builder
         * 
         */
        public Builder offset(Integer offset) {
            return offset(Output.of(offset));
        }

        /**
         * @param size Size of the field in bytes. Valid values: 1-4.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the field in bytes. Valid values: 1-4.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public RegionSecurityPolicyUserDefinedFieldArgs build() {
            $.base = Objects.requireNonNull($.base, "expected parameter 'base' to be non-null");
            return $;
        }
    }

}
