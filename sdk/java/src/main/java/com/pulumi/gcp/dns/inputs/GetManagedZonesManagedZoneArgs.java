// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetManagedZonesManagedZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetManagedZonesManagedZoneArgs Empty = new GetManagedZonesManagedZoneArgs();

    /**
     * A textual description field.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A textual description field.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The fully qualified DNS name of this zone.
     * 
     */
    @Import(name="dnsName", required=true)
    private Output<String> dnsName;

    /**
     * @return The fully qualified DNS name of this zone.
     * 
     */
    public Output<String> dnsName() {
        return this.dnsName;
    }

    /**
     * DNS managed zone identifier
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return DNS managed zone identifier
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Unique identifier for the resource; defined by the server.
     * 
     */
    @Import(name="managedZoneId", required=true)
    private Output<Integer> managedZoneId;

    /**
     * @return Unique identifier for the resource; defined by the server.
     * 
     */
    public Output<Integer> managedZoneId() {
        return this.managedZoneId;
    }

    /**
     * A unique name for the resource.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name for the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
     * 
     */
    @Import(name="nameServers", required=true)
    private Output<List<String>> nameServers;

    /**
     * @return The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
     * 
     */
    public Output<List<String>> nameServers() {
        return this.nameServers;
    }

    /**
     * The ID of the project for the Google Cloud.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID of the project for the Google Cloud.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
     * 
     */
    @Import(name="visibility", required=true)
    private Output<String> visibility;

    /**
     * @return The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
     * 
     */
    public Output<String> visibility() {
        return this.visibility;
    }

    private GetManagedZonesManagedZoneArgs() {}

    private GetManagedZonesManagedZoneArgs(GetManagedZonesManagedZoneArgs $) {
        this.description = $.description;
        this.dnsName = $.dnsName;
        this.id = $.id;
        this.managedZoneId = $.managedZoneId;
        this.name = $.name;
        this.nameServers = $.nameServers;
        this.project = $.project;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedZonesManagedZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedZonesManagedZoneArgs $;

        public Builder() {
            $ = new GetManagedZonesManagedZoneArgs();
        }

        public Builder(GetManagedZonesManagedZoneArgs defaults) {
            $ = new GetManagedZonesManagedZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A textual description field.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A textual description field.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnsName The fully qualified DNS name of this zone.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName The fully qualified DNS name of this zone.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param id DNS managed zone identifier
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id DNS managed zone identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param managedZoneId Unique identifier for the resource; defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder managedZoneId(Output<Integer> managedZoneId) {
            $.managedZoneId = managedZoneId;
            return this;
        }

        /**
         * @param managedZoneId Unique identifier for the resource; defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder managedZoneId(Integer managedZoneId) {
            return managedZoneId(Output.of(managedZoneId));
        }

        /**
         * @param name A unique name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameServers The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(Output<List<String>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        /**
         * @param nameServers The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(List<String> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        /**
         * @param nameServers The list of nameservers that will be authoritative for this domain. Use NS records to redirect from your DNS provider to these names, thus making Google Cloud DNS authoritative for this zone.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        /**
         * @param project The ID of the project for the Google Cloud.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project for the Google Cloud.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param visibility The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder visibility(Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public GetManagedZonesManagedZoneArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "description");
            }
            if ($.dnsName == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "dnsName");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "id");
            }
            if ($.managedZoneId == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "managedZoneId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "name");
            }
            if ($.nameServers == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "nameServers");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "project");
            }
            if ($.visibility == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "visibility");
            }
            return $;
        }
    }

}
