// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetManagedZonesManagedZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetManagedZonesManagedZoneArgs Empty = new GetManagedZonesManagedZoneArgs();

    @Import(name="description", required=true)
    private Output<String> description;

    public Output<String> description() {
        return this.description;
    }

    @Import(name="dnsName", required=true)
    private Output<String> dnsName;

    public Output<String> dnsName() {
        return this.dnsName;
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="managedZoneId", required=true)
    private Output<Integer> managedZoneId;

    public Output<Integer> managedZoneId() {
        return this.managedZoneId;
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="nameServers", required=true)
    private Output<List<String>> nameServers;

    public Output<List<String>> nameServers() {
        return this.nameServers;
    }

    @Import(name="project", required=true)
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }

    @Import(name="visibility", required=true)
    private Output<String> visibility;

    public Output<String> visibility() {
        return this.visibility;
    }

    private GetManagedZonesManagedZoneArgs() {}

    private GetManagedZonesManagedZoneArgs(GetManagedZonesManagedZoneArgs $) {
        this.description = $.description;
        this.dnsName = $.dnsName;
        this.id = $.id;
        this.managedZoneId = $.managedZoneId;
        this.name = $.name;
        this.nameServers = $.nameServers;
        this.project = $.project;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedZonesManagedZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedZonesManagedZoneArgs $;

        public Builder() {
            $ = new GetManagedZonesManagedZoneArgs();
        }

        public Builder(GetManagedZonesManagedZoneArgs defaults) {
            $ = new GetManagedZonesManagedZoneArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder dnsName(Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder managedZoneId(Output<Integer> managedZoneId) {
            $.managedZoneId = managedZoneId;
            return this;
        }

        public Builder managedZoneId(Integer managedZoneId) {
            return managedZoneId(Output.of(managedZoneId));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nameServers(Output<List<String>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        public Builder nameServers(List<String> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder visibility(Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public GetManagedZonesManagedZoneArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "description");
            }
            if ($.dnsName == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "dnsName");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "id");
            }
            if ($.managedZoneId == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "managedZoneId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "name");
            }
            if ($.nameServers == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "nameServers");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "project");
            }
            if ($.visibility == null) {
                throw new MissingRequiredPropertyException("GetManagedZonesManagedZoneArgs", "visibility");
            }
            return $;
        }
    }

}
