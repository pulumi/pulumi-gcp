// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataplex.outputs.EntryAspectAspect;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class EntryAspect {
    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    private EntryAspectAspect aspect;
    /**
     * @return Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
     * If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
     * If the aspect is attached to an entry&#39;s path: {project_number}.{locationId}.{aspectTypeId}{@literal @}{path}
     * 
     */
    private String aspectKey;

    private EntryAspect() {}
    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public EntryAspectAspect aspect() {
        return this.aspect;
    }
    /**
     * @return Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
     * If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
     * If the aspect is attached to an entry&#39;s path: {project_number}.{locationId}.{aspectTypeId}{@literal @}{path}
     * 
     */
    public String aspectKey() {
        return this.aspectKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EntryAspect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private EntryAspectAspect aspect;
        private String aspectKey;
        public Builder() {}
        public Builder(EntryAspect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aspect = defaults.aspect;
    	      this.aspectKey = defaults.aspectKey;
        }

        @CustomType.Setter
        public Builder aspect(EntryAspectAspect aspect) {
            if (aspect == null) {
              throw new MissingRequiredPropertyException("EntryAspect", "aspect");
            }
            this.aspect = aspect;
            return this;
        }
        @CustomType.Setter
        public Builder aspectKey(String aspectKey) {
            if (aspectKey == null) {
              throw new MissingRequiredPropertyException("EntryAspect", "aspectKey");
            }
            this.aspectKey = aspectKey;
            return this;
        }
        public EntryAspect build() {
            final var _resultValue = new EntryAspect();
            _resultValue.aspect = aspect;
            _resultValue.aspectKey = aspectKey;
            return _resultValue;
        }
    }
}
