// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleMonthlyArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeOfDayArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleTimeZoneArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleWeeklyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PatchDeploymentRecurringScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PatchDeploymentRecurringScheduleArgs Empty = new PatchDeploymentRecurringScheduleArgs();

    /**
     * The end time at which a recurring patch deployment schedule is no longer active.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time at which a recurring patch deployment schedule is no longer active.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The time the last patch job ran successfully.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="lastExecuteTime")
    private @Nullable Output<String> lastExecuteTime;

    /**
     * @return The time the last patch job ran successfully.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> lastExecuteTime() {
        return Optional.ofNullable(this.lastExecuteTime);
    }

    /**
     * Schedule with monthly executions.
     * Structure is documented below.
     * 
     */
    @Import(name="monthly")
    private @Nullable Output<PatchDeploymentRecurringScheduleMonthlyArgs> monthly;

    /**
     * @return Schedule with monthly executions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentRecurringScheduleMonthlyArgs>> monthly() {
        return Optional.ofNullable(this.monthly);
    }

    /**
     * The time the next patch job is scheduled to run.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="nextExecuteTime")
    private @Nullable Output<String> nextExecuteTime;

    /**
     * @return The time the next patch job is scheduled to run.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> nextExecuteTime() {
        return Optional.ofNullable(this.nextExecuteTime);
    }

    /**
     * The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Time of the day to run a recurring deployment.
     * Structure is documented below.
     * 
     */
    @Import(name="timeOfDay", required=true)
    private Output<PatchDeploymentRecurringScheduleTimeOfDayArgs> timeOfDay;

    /**
     * @return Time of the day to run a recurring deployment.
     * Structure is documented below.
     * 
     */
    public Output<PatchDeploymentRecurringScheduleTimeOfDayArgs> timeOfDay() {
        return this.timeOfDay;
    }

    /**
     * Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
     * determined by the chosen time zone.
     * Structure is documented below.
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<PatchDeploymentRecurringScheduleTimeZoneArgs> timeZone;

    /**
     * @return Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
     * determined by the chosen time zone.
     * Structure is documented below.
     * 
     */
    public Output<PatchDeploymentRecurringScheduleTimeZoneArgs> timeZone() {
        return this.timeZone;
    }

    /**
     * Schedule with weekly executions.
     * Structure is documented below.
     * 
     */
    @Import(name="weekly")
    private @Nullable Output<PatchDeploymentRecurringScheduleWeeklyArgs> weekly;

    /**
     * @return Schedule with weekly executions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentRecurringScheduleWeeklyArgs>> weekly() {
        return Optional.ofNullable(this.weekly);
    }

    private PatchDeploymentRecurringScheduleArgs() {}

    private PatchDeploymentRecurringScheduleArgs(PatchDeploymentRecurringScheduleArgs $) {
        this.endTime = $.endTime;
        this.lastExecuteTime = $.lastExecuteTime;
        this.monthly = $.monthly;
        this.nextExecuteTime = $.nextExecuteTime;
        this.startTime = $.startTime;
        this.timeOfDay = $.timeOfDay;
        this.timeZone = $.timeZone;
        this.weekly = $.weekly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PatchDeploymentRecurringScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PatchDeploymentRecurringScheduleArgs $;

        public Builder() {
            $ = new PatchDeploymentRecurringScheduleArgs();
        }

        public Builder(PatchDeploymentRecurringScheduleArgs defaults) {
            $ = new PatchDeploymentRecurringScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time at which a recurring patch deployment schedule is no longer active.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time at which a recurring patch deployment schedule is no longer active.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param lastExecuteTime The time the last patch job ran successfully.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder lastExecuteTime(@Nullable Output<String> lastExecuteTime) {
            $.lastExecuteTime = lastExecuteTime;
            return this;
        }

        /**
         * @param lastExecuteTime The time the last patch job ran successfully.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder lastExecuteTime(String lastExecuteTime) {
            return lastExecuteTime(Output.of(lastExecuteTime));
        }

        /**
         * @param monthly Schedule with monthly executions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder monthly(@Nullable Output<PatchDeploymentRecurringScheduleMonthlyArgs> monthly) {
            $.monthly = monthly;
            return this;
        }

        /**
         * @param monthly Schedule with monthly executions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder monthly(PatchDeploymentRecurringScheduleMonthlyArgs monthly) {
            return monthly(Output.of(monthly));
        }

        /**
         * @param nextExecuteTime The time the next patch job is scheduled to run.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder nextExecuteTime(@Nullable Output<String> nextExecuteTime) {
            $.nextExecuteTime = nextExecuteTime;
            return this;
        }

        /**
         * @param nextExecuteTime The time the next patch job is scheduled to run.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder nextExecuteTime(String nextExecuteTime) {
            return nextExecuteTime(Output.of(nextExecuteTime));
        }

        /**
         * @param startTime The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeOfDay Time of the day to run a recurring deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeOfDay(Output<PatchDeploymentRecurringScheduleTimeOfDayArgs> timeOfDay) {
            $.timeOfDay = timeOfDay;
            return this;
        }

        /**
         * @param timeOfDay Time of the day to run a recurring deployment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeOfDay(PatchDeploymentRecurringScheduleTimeOfDayArgs timeOfDay) {
            return timeOfDay(Output.of(timeOfDay));
        }

        /**
         * @param timeZone Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
         * determined by the chosen time zone.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<PatchDeploymentRecurringScheduleTimeZoneArgs> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
         * determined by the chosen time zone.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(PatchDeploymentRecurringScheduleTimeZoneArgs timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param weekly Schedule with weekly executions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder weekly(@Nullable Output<PatchDeploymentRecurringScheduleWeeklyArgs> weekly) {
            $.weekly = weekly;
            return this;
        }

        /**
         * @param weekly Schedule with weekly executions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder weekly(PatchDeploymentRecurringScheduleWeeklyArgs weekly) {
            return weekly(Output.of(weekly));
        }

        public PatchDeploymentRecurringScheduleArgs build() {
            $.timeOfDay = Objects.requireNonNull($.timeOfDay, "expected parameter 'timeOfDay' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            return $;
        }
    }

}
