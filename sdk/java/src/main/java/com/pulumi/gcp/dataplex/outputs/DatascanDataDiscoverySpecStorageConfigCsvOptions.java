// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatascanDataDiscoverySpecStorageConfigCsvOptions {
    /**
     * @return The delimiter that is used to separate values. The default is `,` (comma).
     * 
     */
    private @Nullable String delimiter;
    /**
     * @return The character encoding of the data. The default is UTF-8.
     * 
     */
    private @Nullable String encoding;
    /**
     * @return The number of rows to interpret as header rows that should be skipped when reading data rows.
     * 
     */
    private @Nullable Integer headerRows;
    /**
     * @return The character used to quote column values. Accepts `&#34;` (double quotation mark) or `&#39;` (single quotation mark). If unspecified, defaults to `&#34;` (double quotation mark).
     * 
     */
    private @Nullable String quote;
    /**
     * @return Whether to disable the inference of data types for CSV data. If true, all columns are registered as strings.
     * 
     */
    private @Nullable Boolean typeInferenceDisabled;

    private DatascanDataDiscoverySpecStorageConfigCsvOptions() {}
    /**
     * @return The delimiter that is used to separate values. The default is `,` (comma).
     * 
     */
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    /**
     * @return The character encoding of the data. The default is UTF-8.
     * 
     */
    public Optional<String> encoding() {
        return Optional.ofNullable(this.encoding);
    }
    /**
     * @return The number of rows to interpret as header rows that should be skipped when reading data rows.
     * 
     */
    public Optional<Integer> headerRows() {
        return Optional.ofNullable(this.headerRows);
    }
    /**
     * @return The character used to quote column values. Accepts `&#34;` (double quotation mark) or `&#39;` (single quotation mark). If unspecified, defaults to `&#34;` (double quotation mark).
     * 
     */
    public Optional<String> quote() {
        return Optional.ofNullable(this.quote);
    }
    /**
     * @return Whether to disable the inference of data types for CSV data. If true, all columns are registered as strings.
     * 
     */
    public Optional<Boolean> typeInferenceDisabled() {
        return Optional.ofNullable(this.typeInferenceDisabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatascanDataDiscoverySpecStorageConfigCsvOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String delimiter;
        private @Nullable String encoding;
        private @Nullable Integer headerRows;
        private @Nullable String quote;
        private @Nullable Boolean typeInferenceDisabled;
        public Builder() {}
        public Builder(DatascanDataDiscoverySpecStorageConfigCsvOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delimiter = defaults.delimiter;
    	      this.encoding = defaults.encoding;
    	      this.headerRows = defaults.headerRows;
    	      this.quote = defaults.quote;
    	      this.typeInferenceDisabled = defaults.typeInferenceDisabled;
        }

        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {

            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(@Nullable String encoding) {

            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder headerRows(@Nullable Integer headerRows) {

            this.headerRows = headerRows;
            return this;
        }
        @CustomType.Setter
        public Builder quote(@Nullable String quote) {

            this.quote = quote;
            return this;
        }
        @CustomType.Setter
        public Builder typeInferenceDisabled(@Nullable Boolean typeInferenceDisabled) {

            this.typeInferenceDisabled = typeInferenceDisabled;
            return this;
        }
        public DatascanDataDiscoverySpecStorageConfigCsvOptions build() {
            final var _resultValue = new DatascanDataDiscoverySpecStorageConfigCsvOptions();
            _resultValue.delimiter = delimiter;
            _resultValue.encoding = encoding;
            _resultValue.headerRows = headerRows;
            _resultValue.quote = quote;
            _resultValue.typeInferenceDisabled = typeInferenceDisabled;
            return _resultValue;
        }
    }
}
