// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.GdcServiceInstanceGdceClusterArgs;
import com.pulumi.gcp.dataproc.inputs.GdcServiceInstanceSparkServiceInstanceConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GdcServiceInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final GdcServiceInstanceState Empty = new GdcServiceInstanceState();

    /**
     * The timestamp when the resource was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * User-provided human-readable name to be used in user interfaces.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-provided human-readable name to be used in user interfaces.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
     * 
     */
    @Import(name="effectiveServiceAccount")
    private @Nullable Output<String> effectiveServiceAccount;

    /**
     * @return Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
     * 
     */
    public Optional<Output<String>> effectiveServiceAccount() {
        return Optional.ofNullable(this.effectiveServiceAccount);
    }

    /**
     * Gdce cluster information.
     * Structure is documented below.
     * 
     */
    @Import(name="gdceCluster")
    private @Nullable Output<GdcServiceInstanceGdceClusterArgs> gdceCluster;

    /**
     * @return Gdce cluster information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcServiceInstanceGdceClusterArgs>> gdceCluster() {
        return Optional.ofNullable(this.gdceCluster);
    }

    /**
     * The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The name of the service instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The name of the service instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * The intended state to which the service instance is reconciling. Possible values:
     * * `CREATING`
     * * `ACTIVE`
     * * `DISCONNECTED`
     * * `DELETING`
     * * `STOPPING`
     * * `STOPPED`
     * * `STARTING`
     * * `UPDATING`
     * * `FAILED`
     * 
     */
    @Import(name="requestedState")
    private @Nullable Output<String> requestedState;

    /**
     * @return The intended state to which the service instance is reconciling. Possible values:
     * * `CREATING`
     * * `ACTIVE`
     * * `DISCONNECTED`
     * * `DELETING`
     * * `STOPPING`
     * * `STOPPED`
     * * `STARTING`
     * * `UPDATING`
     * * `FAILED`
     * 
     */
    public Optional<Output<String>> requestedState() {
        return Optional.ofNullable(this.requestedState);
    }

    /**
     * Requested service account to associate with ServiceInstance.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Requested service account to associate with ServiceInstance.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Id of the service instance.
     * 
     */
    @Import(name="serviceInstanceId")
    private @Nullable Output<String> serviceInstanceId;

    /**
     * @return Id of the service instance.
     * 
     */
    public Optional<Output<String>> serviceInstanceId() {
        return Optional.ofNullable(this.serviceInstanceId);
    }

    /**
     * Spark-specific service instance configuration.
     * 
     */
    @Import(name="sparkServiceInstanceConfig")
    private @Nullable Output<GdcServiceInstanceSparkServiceInstanceConfigArgs> sparkServiceInstanceConfig;

    /**
     * @return Spark-specific service instance configuration.
     * 
     */
    public Optional<Output<GdcServiceInstanceSparkServiceInstanceConfigArgs>> sparkServiceInstanceConfig() {
        return Optional.ofNullable(this.sparkServiceInstanceConfig);
    }

    /**
     * The current state. Possible values:
     * * `CREATING`
     * * `ACTIVE`
     * * `DISCONNECTED`
     * * `DELETING`
     * * `STOPPING`
     * * `STOPPED`
     * * `STARTING`
     * * `UPDATING`
     * * `FAILED`
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state. Possible values:
     * * `CREATING`
     * * `ACTIVE`
     * * `DISCONNECTED`
     * * `DELETING`
     * * `STOPPING`
     * * `STOPPED`
     * * `STARTING`
     * * `UPDATING`
     * * `FAILED`
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A message explaining the current state.
     * 
     */
    @Import(name="stateMessage")
    private @Nullable Output<String> stateMessage;

    /**
     * @return A message explaining the current state.
     * 
     */
    public Optional<Output<String>> stateMessage() {
        return Optional.ofNullable(this.stateMessage);
    }

    /**
     * System generated unique identifier for this service instance, formatted as UUID4.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System generated unique identifier for this service instance, formatted as UUID4.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The timestamp when the resource was most recently updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The timestamp when the resource was most recently updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private GdcServiceInstanceState() {}

    private GdcServiceInstanceState(GdcServiceInstanceState $) {
        this.createTime = $.createTime;
        this.displayName = $.displayName;
        this.effectiveLabels = $.effectiveLabels;
        this.effectiveServiceAccount = $.effectiveServiceAccount;
        this.gdceCluster = $.gdceCluster;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.reconciling = $.reconciling;
        this.requestedState = $.requestedState;
        this.serviceAccount = $.serviceAccount;
        this.serviceInstanceId = $.serviceInstanceId;
        this.sparkServiceInstanceConfig = $.sparkServiceInstanceConfig;
        this.state = $.state;
        this.stateMessage = $.stateMessage;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GdcServiceInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GdcServiceInstanceState $;

        public Builder() {
            $ = new GdcServiceInstanceState();
        }

        public Builder(GdcServiceInstanceState defaults) {
            $ = new GdcServiceInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param effectiveServiceAccount Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
         * 
         * @return builder
         * 
         */
        public Builder effectiveServiceAccount(@Nullable Output<String> effectiveServiceAccount) {
            $.effectiveServiceAccount = effectiveServiceAccount;
            return this;
        }

        /**
         * @param effectiveServiceAccount Effective service account associated with ServiceInstance. This will be the service_account if specified. Otherwise, it will be an automatically created per-resource P4SA that also automatically has Fleet Workload. Identity bindings applied.
         * 
         * @return builder
         * 
         */
        public Builder effectiveServiceAccount(String effectiveServiceAccount) {
            return effectiveServiceAccount(Output.of(effectiveServiceAccount));
        }

        /**
         * @param gdceCluster Gdce cluster information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gdceCluster(@Nullable Output<GdcServiceInstanceGdceClusterArgs> gdceCluster) {
            $.gdceCluster = gdceCluster;
            return this;
        }

        /**
         * @param gdceCluster Gdce cluster information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gdceCluster(GdcServiceInstanceGdceClusterArgs gdceCluster) {
            return gdceCluster(Output.of(gdceCluster));
        }

        /**
         * @param labels The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The name of the service instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The name of the service instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param reconciling Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling Whether the service instance is currently reconciling. True if the current state of the resource does not match the intended state, and the system is working to reconcile them, whether or not the change was user initiated.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param requestedState The intended state to which the service instance is reconciling. Possible values:
         * * `CREATING`
         * * `ACTIVE`
         * * `DISCONNECTED`
         * * `DELETING`
         * * `STOPPING`
         * * `STOPPED`
         * * `STARTING`
         * * `UPDATING`
         * * `FAILED`
         * 
         * @return builder
         * 
         */
        public Builder requestedState(@Nullable Output<String> requestedState) {
            $.requestedState = requestedState;
            return this;
        }

        /**
         * @param requestedState The intended state to which the service instance is reconciling. Possible values:
         * * `CREATING`
         * * `ACTIVE`
         * * `DISCONNECTED`
         * * `DELETING`
         * * `STOPPING`
         * * `STOPPED`
         * * `STARTING`
         * * `UPDATING`
         * * `FAILED`
         * 
         * @return builder
         * 
         */
        public Builder requestedState(String requestedState) {
            return requestedState(Output.of(requestedState));
        }

        /**
         * @param serviceAccount Requested service account to associate with ServiceInstance.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Requested service account to associate with ServiceInstance.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param serviceInstanceId Id of the service instance.
         * 
         * @return builder
         * 
         */
        public Builder serviceInstanceId(@Nullable Output<String> serviceInstanceId) {
            $.serviceInstanceId = serviceInstanceId;
            return this;
        }

        /**
         * @param serviceInstanceId Id of the service instance.
         * 
         * @return builder
         * 
         */
        public Builder serviceInstanceId(String serviceInstanceId) {
            return serviceInstanceId(Output.of(serviceInstanceId));
        }

        /**
         * @param sparkServiceInstanceConfig Spark-specific service instance configuration.
         * 
         * @return builder
         * 
         */
        public Builder sparkServiceInstanceConfig(@Nullable Output<GdcServiceInstanceSparkServiceInstanceConfigArgs> sparkServiceInstanceConfig) {
            $.sparkServiceInstanceConfig = sparkServiceInstanceConfig;
            return this;
        }

        /**
         * @param sparkServiceInstanceConfig Spark-specific service instance configuration.
         * 
         * @return builder
         * 
         */
        public Builder sparkServiceInstanceConfig(GdcServiceInstanceSparkServiceInstanceConfigArgs sparkServiceInstanceConfig) {
            return sparkServiceInstanceConfig(Output.of(sparkServiceInstanceConfig));
        }

        /**
         * @param state The current state. Possible values:
         * * `CREATING`
         * * `ACTIVE`
         * * `DISCONNECTED`
         * * `DELETING`
         * * `STOPPING`
         * * `STOPPED`
         * * `STARTING`
         * * `UPDATING`
         * * `FAILED`
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state. Possible values:
         * * `CREATING`
         * * `ACTIVE`
         * * `DISCONNECTED`
         * * `DELETING`
         * * `STOPPING`
         * * `STOPPED`
         * * `STARTING`
         * * `UPDATING`
         * * `FAILED`
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateMessage A message explaining the current state.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(@Nullable Output<String> stateMessage) {
            $.stateMessage = stateMessage;
            return this;
        }

        /**
         * @param stateMessage A message explaining the current state.
         * 
         * @return builder
         * 
         */
        public Builder stateMessage(String stateMessage) {
            return stateMessage(Output.of(stateMessage));
        }

        /**
         * @param uid System generated unique identifier for this service instance, formatted as UUID4.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System generated unique identifier for this service instance, formatted as UUID4.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime The timestamp when the resource was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The timestamp when the resource was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public GdcServiceInstanceState build() {
            return $;
        }
    }

}
