// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleArgs Empty = new RuleArgs();

    /**
     * Policy to determine if the rule should be deleted forcefully.
     * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
     * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
     * rule has no associated retrohunts, including completed retrohunts, and no
     * associated detections. Regardless of this field&#39;s value, the rule
     * deployment associated with this rule will also be deleted.
     * Possible values: DEFAULT, FORCE
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return Policy to determine if the rule should be deleted forcefully.
     * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
     * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
     * rule has no associated retrohunts, including completed retrohunts, and no
     * associated detections. Regardless of this field&#39;s value, the rule
     * deployment associated with this rule will also be deleted.
     * Possible values: DEFAULT, FORCE
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * The etag for this rule.
     * If this is provided on update, the request will succeed if and only if it
     * matches the server-computed value, and will fail with an ABORTED error
     * otherwise.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return The etag for this rule.
     * If this is provided on update, the request will succeed if and only if it
     * matches the server-computed value, and will fail with an ABORTED error
     * otherwise.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Rule Id is the ID of the Rule.
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return Rule Id is the ID of the Rule.
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * Resource name of the DataAccessScope bound to this rule.
     * Populated in BASIC view and FULL view.
     * If reference lists are used in the rule, validations will be performed
     * against this scope to ensure that the reference lists are compatible with
     * both the user&#39;s and the rule&#39;s scopes.
     * The scope should be in the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Resource name of the DataAccessScope bound to this rule.
     * Populated in BASIC view and FULL view.
     * If reference lists are used in the rule, validations will be performed
     * against this scope to ensure that the reference lists are compatible with
     * both the user&#39;s and the rule&#39;s scopes.
     * The scope should be in the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The YARA-L content of the rule.
     * Populated in FULL view.
     * 
     */
    @Import(name="text")
    private @Nullable Output<String> text;

    /**
     * @return The YARA-L content of the rule.
     * Populated in FULL view.
     * 
     */
    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    private RuleArgs() {}

    private RuleArgs(RuleArgs $) {
        this.deletionPolicy = $.deletionPolicy;
        this.etag = $.etag;
        this.instance = $.instance;
        this.location = $.location;
        this.project = $.project;
        this.ruleId = $.ruleId;
        this.scope = $.scope;
        this.text = $.text;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleArgs $;

        public Builder() {
            $ = new RuleArgs();
        }

        public Builder(RuleArgs defaults) {
            $ = new RuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deletionPolicy Policy to determine if the rule should be deleted forcefully.
         * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
         * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
         * rule has no associated retrohunts, including completed retrohunts, and no
         * associated detections. Regardless of this field&#39;s value, the rule
         * deployment associated with this rule will also be deleted.
         * Possible values: DEFAULT, FORCE
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy Policy to determine if the rule should be deleted forcefully.
         * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
         * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
         * rule has no associated retrohunts, including completed retrohunts, and no
         * associated detections. Regardless of this field&#39;s value, the rule
         * deployment associated with this rule will also be deleted.
         * Possible values: DEFAULT, FORCE
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param etag The etag for this rule.
         * If this is provided on update, the request will succeed if and only if it
         * matches the server-computed value, and will fail with an ABORTED error
         * otherwise.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag The etag for this rule.
         * If this is provided on update, the request will succeed if and only if it
         * matches the server-computed value, and will fail with an ABORTED error
         * otherwise.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param ruleId Rule Id is the ID of the Rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId Rule Id is the ID of the Rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param scope Resource name of the DataAccessScope bound to this rule.
         * Populated in BASIC view and FULL view.
         * If reference lists are used in the rule, validations will be performed
         * against this scope to ensure that the reference lists are compatible with
         * both the user&#39;s and the rule&#39;s scopes.
         * The scope should be in the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Resource name of the DataAccessScope bound to this rule.
         * Populated in BASIC view and FULL view.
         * If reference lists are used in the rule, validations will be performed
         * against this scope to ensure that the reference lists are compatible with
         * both the user&#39;s and the rule&#39;s scopes.
         * The scope should be in the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param text The YARA-L content of the rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The YARA-L content of the rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        public RuleArgs build() {
            if ($.instance == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "instance");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "location");
            }
            return $;
        }
    }

}
