// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EdgeCacheOriginTimeoutArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdgeCacheOriginTimeoutArgs Empty = new EdgeCacheOriginTimeoutArgs();

    /**
     * The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
     * Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
     * The connectTimeout capped by the deadline set by the request&#39;s maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<String> connectTimeout;

    /**
     * @return The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
     * Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
     * The connectTimeout capped by the deadline set by the request&#39;s maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
     * 
     */
    public Optional<Output<String>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
     * Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
     * If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
     * 
     */
    @Import(name="maxAttemptsTimeout")
    private @Nullable Output<String> maxAttemptsTimeout;

    /**
     * @return The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
     * Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
     * If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
     * 
     */
    public Optional<Output<String>> maxAttemptsTimeout() {
        return Optional.ofNullable(this.maxAttemptsTimeout);
    }

    /**
     * The maximum duration to wait between reads of a single HTTP connection/stream.
     * Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
     * The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
     * If the response headers have already been written to the connection, the response will be truncated and logged.
     * 
     */
    @Import(name="readTimeout")
    private @Nullable Output<String> readTimeout;

    /**
     * @return The maximum duration to wait between reads of a single HTTP connection/stream.
     * Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
     * The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
     * If the response headers have already been written to the connection, the response will be truncated and logged.
     * 
     */
    public Optional<Output<String>> readTimeout() {
        return Optional.ofNullable(this.readTimeout);
    }

    /**
     * The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
     * Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
     * The responseTimeout starts after the connection has been established.
     * This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
     * If the response headers have already been written to the connection, the response will be truncated and logged.
     * 
     */
    @Import(name="responseTimeout")
    private @Nullable Output<String> responseTimeout;

    /**
     * @return The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
     * Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
     * The responseTimeout starts after the connection has been established.
     * This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
     * If the response headers have already been written to the connection, the response will be truncated and logged.
     * 
     */
    public Optional<Output<String>> responseTimeout() {
        return Optional.ofNullable(this.responseTimeout);
    }

    private EdgeCacheOriginTimeoutArgs() {}

    private EdgeCacheOriginTimeoutArgs(EdgeCacheOriginTimeoutArgs $) {
        this.connectTimeout = $.connectTimeout;
        this.maxAttemptsTimeout = $.maxAttemptsTimeout;
        this.readTimeout = $.readTimeout;
        this.responseTimeout = $.responseTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdgeCacheOriginTimeoutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdgeCacheOriginTimeoutArgs $;

        public Builder() {
            $ = new EdgeCacheOriginTimeoutArgs();
        }

        public Builder(EdgeCacheOriginTimeoutArgs defaults) {
            $ = new EdgeCacheOriginTimeoutArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectTimeout The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
         * Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
         * The connectTimeout capped by the deadline set by the request&#39;s maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<String> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
         * Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
         * The connectTimeout capped by the deadline set by the request&#39;s maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(String connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param maxAttemptsTimeout The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
         * Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
         * If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
         * 
         * @return builder
         * 
         */
        public Builder maxAttemptsTimeout(@Nullable Output<String> maxAttemptsTimeout) {
            $.maxAttemptsTimeout = maxAttemptsTimeout;
            return this;
        }

        /**
         * @param maxAttemptsTimeout The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
         * Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
         * If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
         * 
         * @return builder
         * 
         */
        public Builder maxAttemptsTimeout(String maxAttemptsTimeout) {
            return maxAttemptsTimeout(Output.of(maxAttemptsTimeout));
        }

        /**
         * @param readTimeout The maximum duration to wait between reads of a single HTTP connection/stream.
         * Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
         * The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
         * If the response headers have already been written to the connection, the response will be truncated and logged.
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(@Nullable Output<String> readTimeout) {
            $.readTimeout = readTimeout;
            return this;
        }

        /**
         * @param readTimeout The maximum duration to wait between reads of a single HTTP connection/stream.
         * Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
         * The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
         * If the response headers have already been written to the connection, the response will be truncated and logged.
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(String readTimeout) {
            return readTimeout(Output.of(readTimeout));
        }

        /**
         * @param responseTimeout The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
         * Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
         * The responseTimeout starts after the connection has been established.
         * This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
         * If the response headers have already been written to the connection, the response will be truncated and logged.
         * 
         * @return builder
         * 
         */
        public Builder responseTimeout(@Nullable Output<String> responseTimeout) {
            $.responseTimeout = responseTimeout;
            return this;
        }

        /**
         * @param responseTimeout The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
         * Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
         * The responseTimeout starts after the connection has been established.
         * This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
         * If the response headers have already been written to the connection, the response will be truncated and logged.
         * 
         * @return builder
         * 
         */
        public Builder responseTimeout(String responseTimeout) {
            return responseTimeout(Output.of(responseTimeout));
        }

        public EdgeCacheOriginTimeoutArgs build() {
            return $;
        }
    }

}
