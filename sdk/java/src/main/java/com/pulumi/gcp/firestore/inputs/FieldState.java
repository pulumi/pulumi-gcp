// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firestore.inputs.FieldIndexConfigArgs;
import com.pulumi.gcp.firestore.inputs.FieldTtlConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FieldState extends com.pulumi.resources.ResourceArgs {

    public static final FieldState Empty = new FieldState();

    /**
     * The id of the collection group to configure.
     * 
     */
    @Import(name="collection")
    private @Nullable Output<String> collection;

    /**
     * @return The id of the collection group to configure.
     * 
     */
    public Optional<Output<String>> collection() {
        return Optional.ofNullable(this.collection);
    }

    /**
     * The Firestore database id. Defaults to `&#34;(default)&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The Firestore database id. Defaults to `&#34;(default)&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The id of the field to configure.
     * 
     * ***
     * 
     */
    @Import(name="field")
    private @Nullable Output<String> field;

    /**
     * @return The id of the field to configure.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> field() {
        return Optional.ofNullable(this.field);
    }

    /**
     * The single field index configuration for this field.
     * Creating an index configuration for this field will override any inherited configuration with the
     * indexes specified. Configuring the index configuration with an empty block disables all indexes on
     * the field.
     * Structure is documented below.
     * 
     */
    @Import(name="indexConfig")
    private @Nullable Output<FieldIndexConfigArgs> indexConfig;

    /**
     * @return The single field index configuration for this field.
     * Creating an index configuration for this field will override any inherited configuration with the
     * indexes specified. Configuring the index configuration with an empty block disables all indexes on
     * the field.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FieldIndexConfigArgs>> indexConfig() {
        return Optional.ofNullable(this.indexConfig);
    }

    /**
     * The name of this field. Format:
     * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this field. Format:
     * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * If set, this field is configured for TTL deletion.
     * Structure is documented below.
     * 
     */
    @Import(name="ttlConfig")
    private @Nullable Output<FieldTtlConfigArgs> ttlConfig;

    /**
     * @return If set, this field is configured for TTL deletion.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FieldTtlConfigArgs>> ttlConfig() {
        return Optional.ofNullable(this.ttlConfig);
    }

    private FieldState() {}

    private FieldState(FieldState $) {
        this.collection = $.collection;
        this.database = $.database;
        this.field = $.field;
        this.indexConfig = $.indexConfig;
        this.name = $.name;
        this.project = $.project;
        this.ttlConfig = $.ttlConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldState $;

        public Builder() {
            $ = new FieldState();
        }

        public Builder(FieldState defaults) {
            $ = new FieldState(Objects.requireNonNull(defaults));
        }

        /**
         * @param collection The id of the collection group to configure.
         * 
         * @return builder
         * 
         */
        public Builder collection(@Nullable Output<String> collection) {
            $.collection = collection;
            return this;
        }

        /**
         * @param collection The id of the collection group to configure.
         * 
         * @return builder
         * 
         */
        public Builder collection(String collection) {
            return collection(Output.of(collection));
        }

        /**
         * @param database The Firestore database id. Defaults to `&#34;(default)&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The Firestore database id. Defaults to `&#34;(default)&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param field The id of the field to configure.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder field(@Nullable Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field The id of the field to configure.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param indexConfig The single field index configuration for this field.
         * Creating an index configuration for this field will override any inherited configuration with the
         * indexes specified. Configuring the index configuration with an empty block disables all indexes on
         * the field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder indexConfig(@Nullable Output<FieldIndexConfigArgs> indexConfig) {
            $.indexConfig = indexConfig;
            return this;
        }

        /**
         * @param indexConfig The single field index configuration for this field.
         * Creating an index configuration for this field will override any inherited configuration with the
         * indexes specified. Configuring the index configuration with an empty block disables all indexes on
         * the field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder indexConfig(FieldIndexConfigArgs indexConfig) {
            return indexConfig(Output.of(indexConfig));
        }

        /**
         * @param name The name of this field. Format:
         * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this field. Format:
         * `projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{field}}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param ttlConfig If set, this field is configured for TTL deletion.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ttlConfig(@Nullable Output<FieldTtlConfigArgs> ttlConfig) {
            $.ttlConfig = ttlConfig;
            return this;
        }

        /**
         * @param ttlConfig If set, this field is configured for TTL deletion.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ttlConfig(FieldTtlConfigArgs ttlConfig) {
            return ttlConfig(Output.of(ttlConfig));
        }

        public FieldState build() {
            return $;
        }
    }

}
