// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.colab.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuntimeTemplateDataPersistentDiskSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuntimeTemplateDataPersistentDiskSpecArgs Empty = new RuntimeTemplateDataPersistentDiskSpecArgs();

    /**
     * The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<String> diskSizeGb;

    /**
     * @return The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
     * 
     */
    public Optional<Output<String>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * The type of the persistent disk.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return The type of the persistent disk.
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    private RuntimeTemplateDataPersistentDiskSpecArgs() {}

    private RuntimeTemplateDataPersistentDiskSpecArgs(RuntimeTemplateDataPersistentDiskSpecArgs $) {
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuntimeTemplateDataPersistentDiskSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuntimeTemplateDataPersistentDiskSpecArgs $;

        public Builder() {
            $ = new RuntimeTemplateDataPersistentDiskSpecArgs();
        }

        public Builder(RuntimeTemplateDataPersistentDiskSpecArgs defaults) {
            $ = new RuntimeTemplateDataPersistentDiskSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskSizeGb The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(@Nullable Output<String> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(String diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param diskType The type of the persistent disk.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType The type of the persistent disk.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        public RuntimeTemplateDataPersistentDiskSpecArgs build() {
            return $;
        }
    }

}
