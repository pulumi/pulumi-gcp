// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs Empty = new ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs();

    /**
     * The number of hours between snapshots.
     * 
     */
    @Import(name="hoursInCycle", required=true)
    private Output<Integer> hoursInCycle;

    /**
     * @return The number of hours between snapshots.
     * 
     */
    public Output<Integer> hoursInCycle() {
        return this.hoursInCycle;
    }

    /**
     * Time within the window to start the operations.
     * It must be in an hourly format &#34;HH:MM&#34;,
     * where HH : [00-23] and MM : [00] GMT.
     * eg: 21:00
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    /**
     * @return Time within the window to start the operations.
     * It must be in an hourly format &#34;HH:MM&#34;,
     * where HH : [00-23] and MM : [00] GMT.
     * eg: 21:00
     * 
     */
    public Output<String> startTime() {
        return this.startTime;
    }

    private ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs() {}

    private ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs $) {
        this.hoursInCycle = $.hoursInCycle;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs $;

        public Builder() {
            $ = new ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs();
        }

        public Builder(ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs defaults) {
            $ = new ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hoursInCycle The number of hours between snapshots.
         * 
         * @return builder
         * 
         */
        public Builder hoursInCycle(Output<Integer> hoursInCycle) {
            $.hoursInCycle = hoursInCycle;
            return this;
        }

        /**
         * @param hoursInCycle The number of hours between snapshots.
         * 
         * @return builder
         * 
         */
        public Builder hoursInCycle(Integer hoursInCycle) {
            return hoursInCycle(Output.of(hoursInCycle));
        }

        /**
         * @param startTime Time within the window to start the operations.
         * It must be in an hourly format &#34;HH:MM&#34;,
         * where HH : [00-23] and MM : [00] GMT.
         * eg: 21:00
         * 
         * @return builder
         * 
         */
        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Time within the window to start the operations.
         * It must be in an hourly format &#34;HH:MM&#34;,
         * where HH : [00-23] and MM : [00] GMT.
         * eg: 21:00
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public ResourcePolicySnapshotSchedulePolicyScheduleHourlyScheduleArgs build() {
            $.hoursInCycle = Objects.requireNonNull($.hoursInCycle, "expected parameter 'hoursInCycle' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
