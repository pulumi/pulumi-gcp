// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherPathRuleRouteActionArgs;
import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherPathRuleUrlRedirectArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionUrlMapPathMatcherPathRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionUrlMapPathMatcherPathRuleArgs Empty = new RegionUrlMapPathMatcherPathRuleArgs();

    /**
     * The list of path patterns to match. Each must start with / and the only place a
     * \* is allowed is at the end following a /. The string fed to the path matcher
     * does not include any text after the first ? or #, and those chars are not
     * allowed here.
     * 
     */
    @Import(name="paths", required=true)
    private Output<List<String>> paths;

    /**
     * @return The list of path patterns to match. Each must start with / and the only place a
     * \* is allowed is at the end following a /. The string fed to the path matcher
     * does not include any text after the first ? or #, and those chars are not
     * allowed here.
     * 
     */
    public Output<List<String>> paths() {
        return this.paths;
    }

    /**
     * In response to a matching path, the load balancer performs advanced routing
     * actions like URL rewrites, header transformations, etc. prior to forwarding the
     * request to the selected backend. If routeAction specifies any
     * weightedBackendServices, service must not be set. Conversely if service is set,
     * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
     * or urlRedirect must be set.
     * Structure is documented below.
     * 
     */
    @Import(name="routeAction")
    private @Nullable Output<RegionUrlMapPathMatcherPathRuleRouteActionArgs> routeAction;

    /**
     * @return In response to a matching path, the load balancer performs advanced routing
     * actions like URL rewrites, header transformations, etc. prior to forwarding the
     * request to the selected backend. If routeAction specifies any
     * weightedBackendServices, service must not be set. Conversely if service is set,
     * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
     * or urlRedirect must be set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionUrlMapPathMatcherPathRuleRouteActionArgs>> routeAction() {
        return Optional.ofNullable(this.routeAction);
    }

    /**
     * The region backend service resource to which traffic is
     * directed if this rule is matched. If routeAction is additionally specified,
     * advanced routing actions like URL Rewrites, etc. take effect prior to sending
     * the request to the backend. However, if service is specified, routeAction cannot
     * contain any weightedBackendService s. Conversely, if routeAction specifies any
     * weightedBackendServices, service must not be specified. Only one of urlRedirect,
     * service or routeAction.weightedBackendService must be set.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The region backend service resource to which traffic is
     * directed if this rule is matched. If routeAction is additionally specified,
     * advanced routing actions like URL Rewrites, etc. take effect prior to sending
     * the request to the backend. However, if service is specified, routeAction cannot
     * contain any weightedBackendService s. Conversely, if routeAction specifies any
     * weightedBackendServices, service must not be specified. Only one of urlRedirect,
     * service or routeAction.weightedBackendService must be set.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * When a path pattern is matched, the request is redirected to a URL specified
     * by urlRedirect. If urlRedirect is specified, service or routeAction must not
     * be set.
     * Structure is documented below.
     * 
     */
    @Import(name="urlRedirect")
    private @Nullable Output<RegionUrlMapPathMatcherPathRuleUrlRedirectArgs> urlRedirect;

    /**
     * @return When a path pattern is matched, the request is redirected to a URL specified
     * by urlRedirect. If urlRedirect is specified, service or routeAction must not
     * be set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionUrlMapPathMatcherPathRuleUrlRedirectArgs>> urlRedirect() {
        return Optional.ofNullable(this.urlRedirect);
    }

    private RegionUrlMapPathMatcherPathRuleArgs() {}

    private RegionUrlMapPathMatcherPathRuleArgs(RegionUrlMapPathMatcherPathRuleArgs $) {
        this.paths = $.paths;
        this.routeAction = $.routeAction;
        this.service = $.service;
        this.urlRedirect = $.urlRedirect;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionUrlMapPathMatcherPathRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionUrlMapPathMatcherPathRuleArgs $;

        public Builder() {
            $ = new RegionUrlMapPathMatcherPathRuleArgs();
        }

        public Builder(RegionUrlMapPathMatcherPathRuleArgs defaults) {
            $ = new RegionUrlMapPathMatcherPathRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param paths The list of path patterns to match. Each must start with / and the only place a
         * \* is allowed is at the end following a /. The string fed to the path matcher
         * does not include any text after the first ? or #, and those chars are not
         * allowed here.
         * 
         * @return builder
         * 
         */
        public Builder paths(Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths The list of path patterns to match. Each must start with / and the only place a
         * \* is allowed is at the end following a /. The string fed to the path matcher
         * does not include any text after the first ? or #, and those chars are not
         * allowed here.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths The list of path patterns to match. Each must start with / and the only place a
         * \* is allowed is at the end following a /. The string fed to the path matcher
         * does not include any text after the first ? or #, and those chars are not
         * allowed here.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param routeAction In response to a matching path, the load balancer performs advanced routing
         * actions like URL rewrites, header transformations, etc. prior to forwarding the
         * request to the selected backend. If routeAction specifies any
         * weightedBackendServices, service must not be set. Conversely if service is set,
         * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
         * or urlRedirect must be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder routeAction(@Nullable Output<RegionUrlMapPathMatcherPathRuleRouteActionArgs> routeAction) {
            $.routeAction = routeAction;
            return this;
        }

        /**
         * @param routeAction In response to a matching path, the load balancer performs advanced routing
         * actions like URL rewrites, header transformations, etc. prior to forwarding the
         * request to the selected backend. If routeAction specifies any
         * weightedBackendServices, service must not be set. Conversely if service is set,
         * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
         * or urlRedirect must be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder routeAction(RegionUrlMapPathMatcherPathRuleRouteActionArgs routeAction) {
            return routeAction(Output.of(routeAction));
        }

        /**
         * @param service The region backend service resource to which traffic is
         * directed if this rule is matched. If routeAction is additionally specified,
         * advanced routing actions like URL Rewrites, etc. take effect prior to sending
         * the request to the backend. However, if service is specified, routeAction cannot
         * contain any weightedBackendService s. Conversely, if routeAction specifies any
         * weightedBackendServices, service must not be specified. Only one of urlRedirect,
         * service or routeAction.weightedBackendService must be set.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The region backend service resource to which traffic is
         * directed if this rule is matched. If routeAction is additionally specified,
         * advanced routing actions like URL Rewrites, etc. take effect prior to sending
         * the request to the backend. However, if service is specified, routeAction cannot
         * contain any weightedBackendService s. Conversely, if routeAction specifies any
         * weightedBackendServices, service must not be specified. Only one of urlRedirect,
         * service or routeAction.weightedBackendService must be set.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param urlRedirect When a path pattern is matched, the request is redirected to a URL specified
         * by urlRedirect. If urlRedirect is specified, service or routeAction must not
         * be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder urlRedirect(@Nullable Output<RegionUrlMapPathMatcherPathRuleUrlRedirectArgs> urlRedirect) {
            $.urlRedirect = urlRedirect;
            return this;
        }

        /**
         * @param urlRedirect When a path pattern is matched, the request is redirected to a URL specified
         * by urlRedirect. If urlRedirect is specified, service or routeAction must not
         * be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder urlRedirect(RegionUrlMapPathMatcherPathRuleUrlRedirectArgs urlRedirect) {
            return urlRedirect(Output.of(urlRedirect));
        }

        public RegionUrlMapPathMatcherPathRuleArgs build() {
            $.paths = Objects.requireNonNull($.paths, "expected parameter 'paths' to be non-null");
            return $;
        }
    }

}
