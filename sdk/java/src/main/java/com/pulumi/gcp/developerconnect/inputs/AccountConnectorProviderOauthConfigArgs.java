// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountConnectorProviderOauthConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountConnectorProviderOauthConfigArgs Empty = new AccountConnectorProviderOauthConfigArgs();

    /**
     * Required. User selected scopes to apply to the Oauth config
     * In the event of changing scopes, user records under AccountConnector will
     * be deleted and users will re-auth again.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return Required. User selected scopes to apply to the Oauth config
     * In the event of changing scopes, user records under AccountConnector will
     * be deleted and users will re-auth again.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    /**
     * List of providers that are owned by Developer Connect.
     * Possible values:
     * GITHUB
     * GITLAB
     * GOOGLE
     * SENTRY
     * ROVO
     * NEW_RELIC
     * DATASTAX
     * 
     */
    @Import(name="systemProviderId")
    private @Nullable Output<String> systemProviderId;

    /**
     * @return List of providers that are owned by Developer Connect.
     * Possible values:
     * GITHUB
     * GITLAB
     * GOOGLE
     * SENTRY
     * ROVO
     * NEW_RELIC
     * DATASTAX
     * 
     */
    public Optional<Output<String>> systemProviderId() {
        return Optional.ofNullable(this.systemProviderId);
    }

    private AccountConnectorProviderOauthConfigArgs() {}

    private AccountConnectorProviderOauthConfigArgs(AccountConnectorProviderOauthConfigArgs $) {
        this.scopes = $.scopes;
        this.systemProviderId = $.systemProviderId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountConnectorProviderOauthConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountConnectorProviderOauthConfigArgs $;

        public Builder() {
            $ = new AccountConnectorProviderOauthConfigArgs();
        }

        public Builder(AccountConnectorProviderOauthConfigArgs defaults) {
            $ = new AccountConnectorProviderOauthConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scopes Required. User selected scopes to apply to the Oauth config
         * In the event of changing scopes, user records under AccountConnector will
         * be deleted and users will re-auth again.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Required. User selected scopes to apply to the Oauth config
         * In the event of changing scopes, user records under AccountConnector will
         * be deleted and users will re-auth again.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Required. User selected scopes to apply to the Oauth config
         * In the event of changing scopes, user records under AccountConnector will
         * be deleted and users will re-auth again.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param systemProviderId List of providers that are owned by Developer Connect.
         * Possible values:
         * GITHUB
         * GITLAB
         * GOOGLE
         * SENTRY
         * ROVO
         * NEW_RELIC
         * DATASTAX
         * 
         * @return builder
         * 
         */
        public Builder systemProviderId(@Nullable Output<String> systemProviderId) {
            $.systemProviderId = systemProviderId;
            return this;
        }

        /**
         * @param systemProviderId List of providers that are owned by Developer Connect.
         * Possible values:
         * GITHUB
         * GITLAB
         * GOOGLE
         * SENTRY
         * ROVO
         * NEW_RELIC
         * DATASTAX
         * 
         * @return builder
         * 
         */
        public Builder systemProviderId(String systemProviderId) {
            return systemProviderId(Output.of(systemProviderId));
        }

        public AccountConnectorProviderOauthConfigArgs build() {
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("AccountConnectorProviderOauthConfigArgs", "scopes");
            }
            return $;
        }
    }

}
