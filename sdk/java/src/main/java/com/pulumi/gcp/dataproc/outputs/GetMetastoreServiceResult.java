// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceEncryptionConfig;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceHiveMetastoreConfig;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceMaintenanceWindow;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceMetadataIntegration;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceNetworkConfig;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceScalingConfig;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceScheduledBackup;
import com.pulumi.gcp.dataproc.outputs.GetMetastoreServiceTelemetryConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMetastoreServiceResult {
    private String artifactGcsUri;
    private String createTime;
    private String databaseType;
    private Boolean deletionProtection;
    private Map<String,String> effectiveLabels;
    private List<GetMetastoreServiceEncryptionConfig> encryptionConfigs;
    private String endpointUri;
    private List<GetMetastoreServiceHiveMetastoreConfig> hiveMetastoreConfigs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String location;
    private List<GetMetastoreServiceMaintenanceWindow> maintenanceWindows;
    private List<GetMetastoreServiceMetadataIntegration> metadataIntegrations;
    private String name;
    private String network;
    private List<GetMetastoreServiceNetworkConfig> networkConfigs;
    private Integer port;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String releaseChannel;
    private List<GetMetastoreServiceScalingConfig> scalingConfigs;
    private List<GetMetastoreServiceScheduledBackup> scheduledBackups;
    private String serviceId;
    private String state;
    private String stateMessage;
    private List<GetMetastoreServiceTelemetryConfig> telemetryConfigs;
    private String tier;
    private String uid;
    private String updateTime;

    private GetMetastoreServiceResult() {}
    public String artifactGcsUri() {
        return this.artifactGcsUri;
    }
    public String createTime() {
        return this.createTime;
    }
    public String databaseType() {
        return this.databaseType;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public List<GetMetastoreServiceEncryptionConfig> encryptionConfigs() {
        return this.encryptionConfigs;
    }
    public String endpointUri() {
        return this.endpointUri;
    }
    public List<GetMetastoreServiceHiveMetastoreConfig> hiveMetastoreConfigs() {
        return this.hiveMetastoreConfigs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public List<GetMetastoreServiceMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    public List<GetMetastoreServiceMetadataIntegration> metadataIntegrations() {
        return this.metadataIntegrations;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public List<GetMetastoreServiceNetworkConfig> networkConfigs() {
        return this.networkConfigs;
    }
    public Integer port() {
        return this.port;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String releaseChannel() {
        return this.releaseChannel;
    }
    public List<GetMetastoreServiceScalingConfig> scalingConfigs() {
        return this.scalingConfigs;
    }
    public List<GetMetastoreServiceScheduledBackup> scheduledBackups() {
        return this.scheduledBackups;
    }
    public String serviceId() {
        return this.serviceId;
    }
    public String state() {
        return this.state;
    }
    public String stateMessage() {
        return this.stateMessage;
    }
    public List<GetMetastoreServiceTelemetryConfig> telemetryConfigs() {
        return this.telemetryConfigs;
    }
    public String tier() {
        return this.tier;
    }
    public String uid() {
        return this.uid;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetastoreServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactGcsUri;
        private String createTime;
        private String databaseType;
        private Boolean deletionProtection;
        private Map<String,String> effectiveLabels;
        private List<GetMetastoreServiceEncryptionConfig> encryptionConfigs;
        private String endpointUri;
        private List<GetMetastoreServiceHiveMetastoreConfig> hiveMetastoreConfigs;
        private String id;
        private Map<String,String> labels;
        private String location;
        private List<GetMetastoreServiceMaintenanceWindow> maintenanceWindows;
        private List<GetMetastoreServiceMetadataIntegration> metadataIntegrations;
        private String name;
        private String network;
        private List<GetMetastoreServiceNetworkConfig> networkConfigs;
        private Integer port;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String releaseChannel;
        private List<GetMetastoreServiceScalingConfig> scalingConfigs;
        private List<GetMetastoreServiceScheduledBackup> scheduledBackups;
        private String serviceId;
        private String state;
        private String stateMessage;
        private List<GetMetastoreServiceTelemetryConfig> telemetryConfigs;
        private String tier;
        private String uid;
        private String updateTime;
        public Builder() {}
        public Builder(GetMetastoreServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactGcsUri = defaults.artifactGcsUri;
    	      this.createTime = defaults.createTime;
    	      this.databaseType = defaults.databaseType;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.encryptionConfigs = defaults.encryptionConfigs;
    	      this.endpointUri = defaults.endpointUri;
    	      this.hiveMetastoreConfigs = defaults.hiveMetastoreConfigs;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.metadataIntegrations = defaults.metadataIntegrations;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkConfigs = defaults.networkConfigs;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.releaseChannel = defaults.releaseChannel;
    	      this.scalingConfigs = defaults.scalingConfigs;
    	      this.scheduledBackups = defaults.scheduledBackups;
    	      this.serviceId = defaults.serviceId;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.telemetryConfigs = defaults.telemetryConfigs;
    	      this.tier = defaults.tier;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder artifactGcsUri(String artifactGcsUri) {
            if (artifactGcsUri == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "artifactGcsUri");
            }
            this.artifactGcsUri = artifactGcsUri;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(String databaseType) {
            if (databaseType == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "databaseType");
            }
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfigs(List<GetMetastoreServiceEncryptionConfig> encryptionConfigs) {
            if (encryptionConfigs == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "encryptionConfigs");
            }
            this.encryptionConfigs = encryptionConfigs;
            return this;
        }
        public Builder encryptionConfigs(GetMetastoreServiceEncryptionConfig... encryptionConfigs) {
            return encryptionConfigs(List.of(encryptionConfigs));
        }
        @CustomType.Setter
        public Builder endpointUri(String endpointUri) {
            if (endpointUri == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "endpointUri");
            }
            this.endpointUri = endpointUri;
            return this;
        }
        @CustomType.Setter
        public Builder hiveMetastoreConfigs(List<GetMetastoreServiceHiveMetastoreConfig> hiveMetastoreConfigs) {
            if (hiveMetastoreConfigs == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "hiveMetastoreConfigs");
            }
            this.hiveMetastoreConfigs = hiveMetastoreConfigs;
            return this;
        }
        public Builder hiveMetastoreConfigs(GetMetastoreServiceHiveMetastoreConfig... hiveMetastoreConfigs) {
            return hiveMetastoreConfigs(List.of(hiveMetastoreConfigs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetMetastoreServiceMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetMetastoreServiceMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder metadataIntegrations(List<GetMetastoreServiceMetadataIntegration> metadataIntegrations) {
            if (metadataIntegrations == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "metadataIntegrations");
            }
            this.metadataIntegrations = metadataIntegrations;
            return this;
        }
        public Builder metadataIntegrations(GetMetastoreServiceMetadataIntegration... metadataIntegrations) {
            return metadataIntegrations(List.of(metadataIntegrations));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigs(List<GetMetastoreServiceNetworkConfig> networkConfigs) {
            if (networkConfigs == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "networkConfigs");
            }
            this.networkConfigs = networkConfigs;
            return this;
        }
        public Builder networkConfigs(GetMetastoreServiceNetworkConfig... networkConfigs) {
            return networkConfigs(List.of(networkConfigs));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder releaseChannel(String releaseChannel) {
            if (releaseChannel == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "releaseChannel");
            }
            this.releaseChannel = releaseChannel;
            return this;
        }
        @CustomType.Setter
        public Builder scalingConfigs(List<GetMetastoreServiceScalingConfig> scalingConfigs) {
            if (scalingConfigs == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "scalingConfigs");
            }
            this.scalingConfigs = scalingConfigs;
            return this;
        }
        public Builder scalingConfigs(GetMetastoreServiceScalingConfig... scalingConfigs) {
            return scalingConfigs(List.of(scalingConfigs));
        }
        @CustomType.Setter
        public Builder scheduledBackups(List<GetMetastoreServiceScheduledBackup> scheduledBackups) {
            if (scheduledBackups == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "scheduledBackups");
            }
            this.scheduledBackups = scheduledBackups;
            return this;
        }
        public Builder scheduledBackups(GetMetastoreServiceScheduledBackup... scheduledBackups) {
            return scheduledBackups(List.of(scheduledBackups));
        }
        @CustomType.Setter
        public Builder serviceId(String serviceId) {
            if (serviceId == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "serviceId");
            }
            this.serviceId = serviceId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateMessage(String stateMessage) {
            if (stateMessage == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "stateMessage");
            }
            this.stateMessage = stateMessage;
            return this;
        }
        @CustomType.Setter
        public Builder telemetryConfigs(List<GetMetastoreServiceTelemetryConfig> telemetryConfigs) {
            if (telemetryConfigs == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "telemetryConfigs");
            }
            this.telemetryConfigs = telemetryConfigs;
            return this;
        }
        public Builder telemetryConfigs(GetMetastoreServiceTelemetryConfig... telemetryConfigs) {
            return telemetryConfigs(List.of(telemetryConfigs));
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            if (tier == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "tier");
            }
            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetMetastoreServiceResult build() {
            final var _resultValue = new GetMetastoreServiceResult();
            _resultValue.artifactGcsUri = artifactGcsUri;
            _resultValue.createTime = createTime;
            _resultValue.databaseType = databaseType;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.encryptionConfigs = encryptionConfigs;
            _resultValue.endpointUri = endpointUri;
            _resultValue.hiveMetastoreConfigs = hiveMetastoreConfigs;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.metadataIntegrations = metadataIntegrations;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkConfigs = networkConfigs;
            _resultValue.port = port;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.releaseChannel = releaseChannel;
            _resultValue.scalingConfigs = scalingConfigs;
            _resultValue.scheduledBackups = scheduledBackups;
            _resultValue.serviceId = serviceId;
            _resultValue.state = state;
            _resultValue.stateMessage = stateMessage;
            _resultValue.telemetryConfigs = telemetryConfigs;
            _resultValue.tier = tier;
            _resultValue.uid = uid;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
