// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleNonNullExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleRangeExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleRegexExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleRowConditionExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleSetExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleSqlAssertion;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleStatisticRangeExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleTableConditionExpectation;
import com.pulumi.gcp.dataplex.outputs.DatascanDataQualitySpecRuleUniquenessExpectation;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatascanDataQualitySpecRule {
    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    private @Nullable String column;
    /**
     * @return Description of the rule.
     * The maximum length is 1,024 characters.
     * 
     */
    private @Nullable String description;
    /**
     * @return The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
     * 
     */
    private String dimension;
    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    private @Nullable Boolean ignoreNull;
    /**
     * @return A mutable name for the rule.
     * The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
     * The maximum length is 63 characters.
     * Must start with a letter.
     * Must end with a number or a letter.
     * 
     */
    private @Nullable String name;
    /**
     * @return ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleNonNullExpectation nonNullExpectation;
    /**
     * @return ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleRangeExpectation rangeExpectation;
    /**
     * @return ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleRegexExpectation regexExpectation;
    /**
     * @return Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleRowConditionExpectation rowConditionExpectation;
    /**
     * @return ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleSetExpectation setExpectation;
    /**
     * @return Table rule which evaluates whether any row matches invalid state.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleSqlAssertion sqlAssertion;
    /**
     * @return ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleStatisticRangeExpectation statisticRangeExpectation;
    /**
     * @return Whether the Rule is active or suspended. Default = false.
     * 
     */
    private @Nullable Boolean suspended;
    /**
     * @return Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleTableConditionExpectation tableConditionExpectation;
    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    private @Nullable Double threshold;
    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    private @Nullable DatascanDataQualitySpecRuleUniquenessExpectation uniquenessExpectation;

    private DatascanDataQualitySpecRule() {}
    /**
     * @return The unnested column which this rule is evaluated against.
     * 
     */
    public Optional<String> column() {
        return Optional.ofNullable(this.column);
    }
    /**
     * @return Description of the rule.
     * The maximum length is 1,024 characters.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The dimension name a rule belongs to. Custom dimension name is supported with all uppercase letters and maximum length of 30 characters.
     * 
     */
    public String dimension() {
        return this.dimension;
    }
    /**
     * @return Rows with null values will automatically fail a rule, unless ignoreNull is true. In that case, such null rows are trivially considered passing. Only applicable to ColumnMap rules.
     * 
     */
    public Optional<Boolean> ignoreNull() {
        return Optional.ofNullable(this.ignoreNull);
    }
    /**
     * @return A mutable name for the rule.
     * The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-).
     * The maximum length is 63 characters.
     * Must start with a letter.
     * Must end with a number or a letter.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value is null.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleNonNullExpectation> nonNullExpectation() {
        return Optional.ofNullable(this.nonNullExpectation);
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value lies between a specified range.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleRangeExpectation> rangeExpectation() {
        return Optional.ofNullable(this.rangeExpectation);
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value matches a specified regex.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleRegexExpectation> regexExpectation() {
        return Optional.ofNullable(this.regexExpectation);
    }
    /**
     * @return Table rule which evaluates whether each row passes the specified condition.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleRowConditionExpectation> rowConditionExpectation() {
        return Optional.ofNullable(this.rowConditionExpectation);
    }
    /**
     * @return ColumnMap rule which evaluates whether each column value is contained by a specified set.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleSetExpectation> setExpectation() {
        return Optional.ofNullable(this.setExpectation);
    }
    /**
     * @return Table rule which evaluates whether any row matches invalid state.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleSqlAssertion> sqlAssertion() {
        return Optional.ofNullable(this.sqlAssertion);
    }
    /**
     * @return ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleStatisticRangeExpectation> statisticRangeExpectation() {
        return Optional.ofNullable(this.statisticRangeExpectation);
    }
    /**
     * @return Whether the Rule is active or suspended. Default = false.
     * 
     */
    public Optional<Boolean> suspended() {
        return Optional.ofNullable(this.suspended);
    }
    /**
     * @return Table rule which evaluates whether the provided expression is true.
     * Structure is documented below.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleTableConditionExpectation> tableConditionExpectation() {
        return Optional.ofNullable(this.tableConditionExpectation);
    }
    /**
     * @return The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of [0.0, 1.0]. 0 indicates default value (i.e. 1.0).
     * 
     */
    public Optional<Double> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Row-level rule which evaluates whether each column value is unique.
     * 
     */
    public Optional<DatascanDataQualitySpecRuleUniquenessExpectation> uniquenessExpectation() {
        return Optional.ofNullable(this.uniquenessExpectation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatascanDataQualitySpecRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String column;
        private @Nullable String description;
        private String dimension;
        private @Nullable Boolean ignoreNull;
        private @Nullable String name;
        private @Nullable DatascanDataQualitySpecRuleNonNullExpectation nonNullExpectation;
        private @Nullable DatascanDataQualitySpecRuleRangeExpectation rangeExpectation;
        private @Nullable DatascanDataQualitySpecRuleRegexExpectation regexExpectation;
        private @Nullable DatascanDataQualitySpecRuleRowConditionExpectation rowConditionExpectation;
        private @Nullable DatascanDataQualitySpecRuleSetExpectation setExpectation;
        private @Nullable DatascanDataQualitySpecRuleSqlAssertion sqlAssertion;
        private @Nullable DatascanDataQualitySpecRuleStatisticRangeExpectation statisticRangeExpectation;
        private @Nullable Boolean suspended;
        private @Nullable DatascanDataQualitySpecRuleTableConditionExpectation tableConditionExpectation;
        private @Nullable Double threshold;
        private @Nullable DatascanDataQualitySpecRuleUniquenessExpectation uniquenessExpectation;
        public Builder() {}
        public Builder(DatascanDataQualitySpecRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.column = defaults.column;
    	      this.description = defaults.description;
    	      this.dimension = defaults.dimension;
    	      this.ignoreNull = defaults.ignoreNull;
    	      this.name = defaults.name;
    	      this.nonNullExpectation = defaults.nonNullExpectation;
    	      this.rangeExpectation = defaults.rangeExpectation;
    	      this.regexExpectation = defaults.regexExpectation;
    	      this.rowConditionExpectation = defaults.rowConditionExpectation;
    	      this.setExpectation = defaults.setExpectation;
    	      this.sqlAssertion = defaults.sqlAssertion;
    	      this.statisticRangeExpectation = defaults.statisticRangeExpectation;
    	      this.suspended = defaults.suspended;
    	      this.tableConditionExpectation = defaults.tableConditionExpectation;
    	      this.threshold = defaults.threshold;
    	      this.uniquenessExpectation = defaults.uniquenessExpectation;
        }

        @CustomType.Setter
        public Builder column(@Nullable String column) {

            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dimension(String dimension) {
            if (dimension == null) {
              throw new MissingRequiredPropertyException("DatascanDataQualitySpecRule", "dimension");
            }
            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreNull(@Nullable Boolean ignoreNull) {

            this.ignoreNull = ignoreNull;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nonNullExpectation(@Nullable DatascanDataQualitySpecRuleNonNullExpectation nonNullExpectation) {

            this.nonNullExpectation = nonNullExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder rangeExpectation(@Nullable DatascanDataQualitySpecRuleRangeExpectation rangeExpectation) {

            this.rangeExpectation = rangeExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder regexExpectation(@Nullable DatascanDataQualitySpecRuleRegexExpectation regexExpectation) {

            this.regexExpectation = regexExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder rowConditionExpectation(@Nullable DatascanDataQualitySpecRuleRowConditionExpectation rowConditionExpectation) {

            this.rowConditionExpectation = rowConditionExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder setExpectation(@Nullable DatascanDataQualitySpecRuleSetExpectation setExpectation) {

            this.setExpectation = setExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder sqlAssertion(@Nullable DatascanDataQualitySpecRuleSqlAssertion sqlAssertion) {

            this.sqlAssertion = sqlAssertion;
            return this;
        }
        @CustomType.Setter
        public Builder statisticRangeExpectation(@Nullable DatascanDataQualitySpecRuleStatisticRangeExpectation statisticRangeExpectation) {

            this.statisticRangeExpectation = statisticRangeExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder suspended(@Nullable Boolean suspended) {

            this.suspended = suspended;
            return this;
        }
        @CustomType.Setter
        public Builder tableConditionExpectation(@Nullable DatascanDataQualitySpecRuleTableConditionExpectation tableConditionExpectation) {

            this.tableConditionExpectation = tableConditionExpectation;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Double threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder uniquenessExpectation(@Nullable DatascanDataQualitySpecRuleUniquenessExpectation uniquenessExpectation) {

            this.uniquenessExpectation = uniquenessExpectation;
            return this;
        }
        public DatascanDataQualitySpecRule build() {
            final var _resultValue = new DatascanDataQualitySpecRule();
            _resultValue.column = column;
            _resultValue.description = description;
            _resultValue.dimension = dimension;
            _resultValue.ignoreNull = ignoreNull;
            _resultValue.name = name;
            _resultValue.nonNullExpectation = nonNullExpectation;
            _resultValue.rangeExpectation = rangeExpectation;
            _resultValue.regexExpectation = regexExpectation;
            _resultValue.rowConditionExpectation = rowConditionExpectation;
            _resultValue.setExpectation = setExpectation;
            _resultValue.sqlAssertion = sqlAssertion;
            _resultValue.statisticRangeExpectation = statisticRangeExpectation;
            _resultValue.suspended = suspended;
            _resultValue.tableConditionExpectation = tableConditionExpectation;
            _resultValue.threshold = threshold;
            _resultValue.uniquenessExpectation = uniquenessExpectation;
            return _resultValue;
        }
    }
}
