// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkstationConfigPersistentDirectoryGcePdArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkstationConfigPersistentDirectoryGcePdArgs Empty = new WorkstationConfigPersistentDirectoryGcePdArgs();

    /**
     * Type of the disk to use.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return Type of the disk to use.
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if sourceSnapshot is set.
     * 
     */
    @Import(name="fsType")
    private @Nullable Output<String> fsType;

    /**
     * @return Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if sourceSnapshot is set.
     * 
     */
    public Optional<Output<String>> fsType() {
        return Optional.ofNullable(this.fsType);
    }

    /**
     * What should happen to the disk after the workstation is deleted. Defaults to DELETE.
     * Possible values are `RECLAIM_POLICY_UNSPECIFIED`, `DELETE`, and `RETAIN`.
     * 
     */
    @Import(name="reclaimPolicy")
    private @Nullable Output<String> reclaimPolicy;

    /**
     * @return What should happen to the disk after the workstation is deleted. Defaults to DELETE.
     * Possible values are `RECLAIM_POLICY_UNSPECIFIED`, `DELETE`, and `RETAIN`.
     * 
     */
    public Optional<Output<String>> reclaimPolicy() {
        return Optional.ofNullable(this.reclaimPolicy);
    }

    /**
     * Size of the disk in GB. Must be empty if sourceSnapshot is set.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<Integer> sizeGb;

    /**
     * @return Size of the disk in GB. Must be empty if sourceSnapshot is set.
     * 
     */
    public Optional<Output<Integer>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    private WorkstationConfigPersistentDirectoryGcePdArgs() {}

    private WorkstationConfigPersistentDirectoryGcePdArgs(WorkstationConfigPersistentDirectoryGcePdArgs $) {
        this.diskType = $.diskType;
        this.fsType = $.fsType;
        this.reclaimPolicy = $.reclaimPolicy;
        this.sizeGb = $.sizeGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkstationConfigPersistentDirectoryGcePdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkstationConfigPersistentDirectoryGcePdArgs $;

        public Builder() {
            $ = new WorkstationConfigPersistentDirectoryGcePdArgs();
        }

        public Builder(WorkstationConfigPersistentDirectoryGcePdArgs defaults) {
            $ = new WorkstationConfigPersistentDirectoryGcePdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskType Type of the disk to use.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Type of the disk to use.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param fsType Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if sourceSnapshot is set.
         * 
         * @return builder
         * 
         */
        public Builder fsType(@Nullable Output<String> fsType) {
            $.fsType = fsType;
            return this;
        }

        /**
         * @param fsType Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if sourceSnapshot is set.
         * 
         * @return builder
         * 
         */
        public Builder fsType(String fsType) {
            return fsType(Output.of(fsType));
        }

        /**
         * @param reclaimPolicy What should happen to the disk after the workstation is deleted. Defaults to DELETE.
         * Possible values are `RECLAIM_POLICY_UNSPECIFIED`, `DELETE`, and `RETAIN`.
         * 
         * @return builder
         * 
         */
        public Builder reclaimPolicy(@Nullable Output<String> reclaimPolicy) {
            $.reclaimPolicy = reclaimPolicy;
            return this;
        }

        /**
         * @param reclaimPolicy What should happen to the disk after the workstation is deleted. Defaults to DELETE.
         * Possible values are `RECLAIM_POLICY_UNSPECIFIED`, `DELETE`, and `RETAIN`.
         * 
         * @return builder
         * 
         */
        public Builder reclaimPolicy(String reclaimPolicy) {
            return reclaimPolicy(Output.of(reclaimPolicy));
        }

        /**
         * @param sizeGb Size of the disk in GB. Must be empty if sourceSnapshot is set.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(@Nullable Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb Size of the disk in GB. Must be empty if sourceSnapshot is set.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        public WorkstationConfigPersistentDirectoryGcePdArgs build() {
            return $;
        }
    }

}
