// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datafusion.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class InstanceCryptoKeyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceCryptoKeyConfigArgs Empty = new InstanceCryptoKeyConfigArgs();

    /**
     * The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*.
     * 
     */
    @Import(name="keyReference", required=true)
    private Output<String> keyReference;

    /**
     * @return The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*.
     * 
     */
    public Output<String> keyReference() {
        return this.keyReference;
    }

    private InstanceCryptoKeyConfigArgs() {}

    private InstanceCryptoKeyConfigArgs(InstanceCryptoKeyConfigArgs $) {
        this.keyReference = $.keyReference;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceCryptoKeyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceCryptoKeyConfigArgs $;

        public Builder() {
            $ = new InstanceCryptoKeyConfigArgs();
        }

        public Builder(InstanceCryptoKeyConfigArgs defaults) {
            $ = new InstanceCryptoKeyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyReference The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*.
         * 
         * @return builder
         * 
         */
        public Builder keyReference(Output<String> keyReference) {
            $.keyReference = keyReference;
            return this;
        }

        /**
         * @param keyReference The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*.
         * 
         * @return builder
         * 
         */
        public Builder keyReference(String keyReference) {
            return keyReference(Output.of(keyReference));
        }

        public InstanceCryptoKeyConfigArgs build() {
            $.keyReference = Objects.requireNonNull($.keyReference, "expected parameter 'keyReference' to be non-null");
            return $;
        }
    }

}
