// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.healthcare.inputs.FhirStoreConsentConfigAccessDeterminationLogConfigArgs;
import com.pulumi.gcp.healthcare.inputs.FhirStoreConsentConfigConsentHeaderHandlingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FhirStoreConsentConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FhirStoreConsentConfigArgs Empty = new FhirStoreConsentConfigArgs();

    /**
     * Specifies how the server logs the consent-aware requests. If not specified, the AccessDeterminationLogConfig.LogLevel.MINIMUM option is used.
     * Structure is documented below.
     * 
     */
    @Import(name="accessDeterminationLogConfig")
    private @Nullable Output<FhirStoreConsentConfigAccessDeterminationLogConfigArgs> accessDeterminationLogConfig;

    /**
     * @return Specifies how the server logs the consent-aware requests. If not specified, the AccessDeterminationLogConfig.LogLevel.MINIMUM option is used.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FhirStoreConsentConfigAccessDeterminationLogConfigArgs>> accessDeterminationLogConfig() {
        return Optional.ofNullable(this.accessDeterminationLogConfig);
    }

    /**
     * The default value is false. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
     * 
     */
    @Import(name="accessEnforced")
    private @Nullable Output<Boolean> accessEnforced;

    /**
     * @return The default value is false. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
     * 
     */
    public Optional<Output<Boolean>> accessEnforced() {
        return Optional.ofNullable(this.accessEnforced);
    }

    /**
     * Different options to configure the behaviour of the server when handling the X-Consent-Scope header.
     * Structure is documented below.
     * 
     */
    @Import(name="consentHeaderHandling")
    private @Nullable Output<FhirStoreConsentConfigConsentHeaderHandlingArgs> consentHeaderHandling;

    /**
     * @return Different options to configure the behaviour of the server when handling the X-Consent-Scope header.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FhirStoreConsentConfigConsentHeaderHandlingArgs>> consentHeaderHandling() {
        return Optional.ofNullable(this.consentHeaderHandling);
    }

    /**
     * (Output)
     * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
     * 
     */
    @Import(name="enforcedAdminConsents")
    private @Nullable Output<List<String>> enforcedAdminConsents;

    /**
     * @return (Output)
     * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
     * 
     */
    public Optional<Output<List<String>>> enforcedAdminConsents() {
        return Optional.ofNullable(this.enforcedAdminConsents);
    }

    /**
     * Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either [fhirStores.create][] or [fhirStores.patch][]. After that, you must call [fhirStores.applyConsents][] to change the version.
     * Possible values are: `CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED`, `V1`.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either [fhirStores.create][] or [fhirStores.patch][]. After that, you must call [fhirStores.applyConsents][] to change the version.
     * Possible values are: `CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED`, `V1`.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private FhirStoreConsentConfigArgs() {}

    private FhirStoreConsentConfigArgs(FhirStoreConsentConfigArgs $) {
        this.accessDeterminationLogConfig = $.accessDeterminationLogConfig;
        this.accessEnforced = $.accessEnforced;
        this.consentHeaderHandling = $.consentHeaderHandling;
        this.enforcedAdminConsents = $.enforcedAdminConsents;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FhirStoreConsentConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FhirStoreConsentConfigArgs $;

        public Builder() {
            $ = new FhirStoreConsentConfigArgs();
        }

        public Builder(FhirStoreConsentConfigArgs defaults) {
            $ = new FhirStoreConsentConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessDeterminationLogConfig Specifies how the server logs the consent-aware requests. If not specified, the AccessDeterminationLogConfig.LogLevel.MINIMUM option is used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accessDeterminationLogConfig(@Nullable Output<FhirStoreConsentConfigAccessDeterminationLogConfigArgs> accessDeterminationLogConfig) {
            $.accessDeterminationLogConfig = accessDeterminationLogConfig;
            return this;
        }

        /**
         * @param accessDeterminationLogConfig Specifies how the server logs the consent-aware requests. If not specified, the AccessDeterminationLogConfig.LogLevel.MINIMUM option is used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accessDeterminationLogConfig(FhirStoreConsentConfigAccessDeterminationLogConfigArgs accessDeterminationLogConfig) {
            return accessDeterminationLogConfig(Output.of(accessDeterminationLogConfig));
        }

        /**
         * @param accessEnforced The default value is false. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
         * 
         * @return builder
         * 
         */
        public Builder accessEnforced(@Nullable Output<Boolean> accessEnforced) {
            $.accessEnforced = accessEnforced;
            return this;
        }

        /**
         * @param accessEnforced The default value is false. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
         * 
         * @return builder
         * 
         */
        public Builder accessEnforced(Boolean accessEnforced) {
            return accessEnforced(Output.of(accessEnforced));
        }

        /**
         * @param consentHeaderHandling Different options to configure the behaviour of the server when handling the X-Consent-Scope header.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder consentHeaderHandling(@Nullable Output<FhirStoreConsentConfigConsentHeaderHandlingArgs> consentHeaderHandling) {
            $.consentHeaderHandling = consentHeaderHandling;
            return this;
        }

        /**
         * @param consentHeaderHandling Different options to configure the behaviour of the server when handling the X-Consent-Scope header.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder consentHeaderHandling(FhirStoreConsentConfigConsentHeaderHandlingArgs consentHeaderHandling) {
            return consentHeaderHandling(Output.of(consentHeaderHandling));
        }

        /**
         * @param enforcedAdminConsents (Output)
         * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
         * 
         * @return builder
         * 
         */
        public Builder enforcedAdminConsents(@Nullable Output<List<String>> enforcedAdminConsents) {
            $.enforcedAdminConsents = enforcedAdminConsents;
            return this;
        }

        /**
         * @param enforcedAdminConsents (Output)
         * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
         * 
         * @return builder
         * 
         */
        public Builder enforcedAdminConsents(List<String> enforcedAdminConsents) {
            return enforcedAdminConsents(Output.of(enforcedAdminConsents));
        }

        /**
         * @param enforcedAdminConsents (Output)
         * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
         * 
         * @return builder
         * 
         */
        public Builder enforcedAdminConsents(String... enforcedAdminConsents) {
            return enforcedAdminConsents(List.of(enforcedAdminConsents));
        }

        /**
         * @param version Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either [fhirStores.create][] or [fhirStores.patch][]. After that, you must call [fhirStores.applyConsents][] to change the version.
         * Possible values are: `CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED`, `V1`.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either [fhirStores.create][] or [fhirStores.patch][]. After that, you must call [fhirStores.applyConsents][] to change the version.
         * Possible values are: `CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED`, `V1`.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public FhirStoreConsentConfigArgs build() {
            if ($.version == null) {
                throw new MissingRequiredPropertyException("FhirStoreConsentConfigArgs", "version");
            }
            return $;
        }
    }

}
