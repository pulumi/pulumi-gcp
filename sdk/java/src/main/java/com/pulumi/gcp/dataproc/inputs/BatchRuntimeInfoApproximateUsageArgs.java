// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BatchRuntimeInfoApproximateUsageArgs extends com.pulumi.resources.ResourceArgs {

    public static final BatchRuntimeInfoApproximateUsageArgs Empty = new BatchRuntimeInfoApproximateUsageArgs();

    /**
     * (Output)
     * Accelerator type being used, if any.
     * 
     */
    @Import(name="acceleratorType")
    private @Nullable Output<String> acceleratorType;

    /**
     * @return (Output)
     * Accelerator type being used, if any.
     * 
     */
    public Optional<Output<String>> acceleratorType() {
        return Optional.ofNullable(this.acceleratorType);
    }

    /**
     * (Output)
     * Accelerator usage in (milliAccelerator x seconds)
     * 
     */
    @Import(name="milliAcceleratorSeconds")
    private @Nullable Output<String> milliAcceleratorSeconds;

    /**
     * @return (Output)
     * Accelerator usage in (milliAccelerator x seconds)
     * 
     */
    public Optional<Output<String>> milliAcceleratorSeconds() {
        return Optional.ofNullable(this.milliAcceleratorSeconds);
    }

    /**
     * (Output)
     * DCU (Dataproc Compute Units) usage in (milliDCU x seconds)
     * 
     */
    @Import(name="milliDcuSeconds")
    private @Nullable Output<String> milliDcuSeconds;

    /**
     * @return (Output)
     * DCU (Dataproc Compute Units) usage in (milliDCU x seconds)
     * 
     */
    public Optional<Output<String>> milliDcuSeconds() {
        return Optional.ofNullable(this.milliDcuSeconds);
    }

    /**
     * (Output)
     * Shuffle storage usage in (GB x seconds)
     * 
     */
    @Import(name="shuffleStorageGbSeconds")
    private @Nullable Output<String> shuffleStorageGbSeconds;

    /**
     * @return (Output)
     * Shuffle storage usage in (GB x seconds)
     * 
     */
    public Optional<Output<String>> shuffleStorageGbSeconds() {
        return Optional.ofNullable(this.shuffleStorageGbSeconds);
    }

    private BatchRuntimeInfoApproximateUsageArgs() {}

    private BatchRuntimeInfoApproximateUsageArgs(BatchRuntimeInfoApproximateUsageArgs $) {
        this.acceleratorType = $.acceleratorType;
        this.milliAcceleratorSeconds = $.milliAcceleratorSeconds;
        this.milliDcuSeconds = $.milliDcuSeconds;
        this.shuffleStorageGbSeconds = $.shuffleStorageGbSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchRuntimeInfoApproximateUsageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchRuntimeInfoApproximateUsageArgs $;

        public Builder() {
            $ = new BatchRuntimeInfoApproximateUsageArgs();
        }

        public Builder(BatchRuntimeInfoApproximateUsageArgs defaults) {
            $ = new BatchRuntimeInfoApproximateUsageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorType (Output)
         * Accelerator type being used, if any.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(@Nullable Output<String> acceleratorType) {
            $.acceleratorType = acceleratorType;
            return this;
        }

        /**
         * @param acceleratorType (Output)
         * Accelerator type being used, if any.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(String acceleratorType) {
            return acceleratorType(Output.of(acceleratorType));
        }

        /**
         * @param milliAcceleratorSeconds (Output)
         * Accelerator usage in (milliAccelerator x seconds)
         * 
         * @return builder
         * 
         */
        public Builder milliAcceleratorSeconds(@Nullable Output<String> milliAcceleratorSeconds) {
            $.milliAcceleratorSeconds = milliAcceleratorSeconds;
            return this;
        }

        /**
         * @param milliAcceleratorSeconds (Output)
         * Accelerator usage in (milliAccelerator x seconds)
         * 
         * @return builder
         * 
         */
        public Builder milliAcceleratorSeconds(String milliAcceleratorSeconds) {
            return milliAcceleratorSeconds(Output.of(milliAcceleratorSeconds));
        }

        /**
         * @param milliDcuSeconds (Output)
         * DCU (Dataproc Compute Units) usage in (milliDCU x seconds)
         * 
         * @return builder
         * 
         */
        public Builder milliDcuSeconds(@Nullable Output<String> milliDcuSeconds) {
            $.milliDcuSeconds = milliDcuSeconds;
            return this;
        }

        /**
         * @param milliDcuSeconds (Output)
         * DCU (Dataproc Compute Units) usage in (milliDCU x seconds)
         * 
         * @return builder
         * 
         */
        public Builder milliDcuSeconds(String milliDcuSeconds) {
            return milliDcuSeconds(Output.of(milliDcuSeconds));
        }

        /**
         * @param shuffleStorageGbSeconds (Output)
         * Shuffle storage usage in (GB x seconds)
         * 
         * @return builder
         * 
         */
        public Builder shuffleStorageGbSeconds(@Nullable Output<String> shuffleStorageGbSeconds) {
            $.shuffleStorageGbSeconds = shuffleStorageGbSeconds;
            return this;
        }

        /**
         * @param shuffleStorageGbSeconds (Output)
         * Shuffle storage usage in (GB x seconds)
         * 
         * @return builder
         * 
         */
        public Builder shuffleStorageGbSeconds(String shuffleStorageGbSeconds) {
            return shuffleStorageGbSeconds(Output.of(shuffleStorageGbSeconds));
        }

        public BatchRuntimeInfoApproximateUsageArgs build() {
            return $;
        }
    }

}
