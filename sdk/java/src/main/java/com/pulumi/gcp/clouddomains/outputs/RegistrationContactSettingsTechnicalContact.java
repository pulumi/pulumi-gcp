// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddomains.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.clouddomains.outputs.RegistrationContactSettingsTechnicalContactPostalAddress;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistrationContactSettingsTechnicalContact {
    /**
     * @return Required. Email address of the contact.
     * 
     */
    private String email;
    /**
     * @return Fax number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    private @Nullable String faxNumber;
    /**
     * @return Required. Phone number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    private String phoneNumber;
    /**
     * @return Required. Postal address of the contact.
     * Structure is documented below.
     * 
     */
    private RegistrationContactSettingsTechnicalContactPostalAddress postalAddress;

    private RegistrationContactSettingsTechnicalContact() {}
    /**
     * @return Required. Email address of the contact.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Fax number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    public Optional<String> faxNumber() {
        return Optional.ofNullable(this.faxNumber);
    }
    /**
     * @return Required. Phone number of the contact in international format. For example, &#34;+1-800-555-0123&#34;.
     * 
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }
    /**
     * @return Required. Postal address of the contact.
     * Structure is documented below.
     * 
     */
    public RegistrationContactSettingsTechnicalContactPostalAddress postalAddress() {
        return this.postalAddress;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistrationContactSettingsTechnicalContact defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String email;
        private @Nullable String faxNumber;
        private String phoneNumber;
        private RegistrationContactSettingsTechnicalContactPostalAddress postalAddress;
        public Builder() {}
        public Builder(RegistrationContactSettingsTechnicalContact defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.faxNumber = defaults.faxNumber;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.postalAddress = defaults.postalAddress;
        }

        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("RegistrationContactSettingsTechnicalContact", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder faxNumber(@Nullable String faxNumber) {

            this.faxNumber = faxNumber;
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(String phoneNumber) {
            if (phoneNumber == null) {
              throw new MissingRequiredPropertyException("RegistrationContactSettingsTechnicalContact", "phoneNumber");
            }
            this.phoneNumber = phoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder postalAddress(RegistrationContactSettingsTechnicalContactPostalAddress postalAddress) {
            if (postalAddress == null) {
              throw new MissingRequiredPropertyException("RegistrationContactSettingsTechnicalContact", "postalAddress");
            }
            this.postalAddress = postalAddress;
            return this;
        }
        public RegistrationContactSettingsTechnicalContact build() {
            final var _resultValue = new RegistrationContactSettingsTechnicalContact();
            _resultValue.email = email;
            _resultValue.faxNumber = faxNumber;
            _resultValue.phoneNumber = phoneNumber;
            _resultValue.postalAddress = postalAddress;
            return _resultValue;
        }
    }
}
