// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EdgeCacheServiceLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdgeCacheServiceLogConfigArgs Empty = new EdgeCacheServiceLogConfigArgs();

    /**
     * Specifies whether to enable logging for traffic served by this service.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Specifies whether to enable logging for traffic served by this service.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
     * This field can only be specified if logging is enabled for this service.
     * 
     */
    @Import(name="sampleRate")
    private @Nullable Output<Double> sampleRate;

    /**
     * @return Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
     * This field can only be specified if logging is enabled for this service.
     * 
     */
    public Optional<Output<Double>> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    private EdgeCacheServiceLogConfigArgs() {}

    private EdgeCacheServiceLogConfigArgs(EdgeCacheServiceLogConfigArgs $) {
        this.enable = $.enable;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdgeCacheServiceLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdgeCacheServiceLogConfigArgs $;

        public Builder() {
            $ = new EdgeCacheServiceLogConfigArgs();
        }

        public Builder(EdgeCacheServiceLogConfigArgs defaults) {
            $ = new EdgeCacheServiceLogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enable Specifies whether to enable logging for traffic served by this service.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Specifies whether to enable logging for traffic served by this service.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param sampleRate Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
         * This field can only be specified if logging is enabled for this service.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(@Nullable Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        /**
         * @param sampleRate Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
         * This field can only be specified if logging is enabled for this service.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public EdgeCacheServiceLogConfigArgs build() {
            return $;
        }
    }

}
