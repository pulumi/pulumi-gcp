// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memorystore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceZoneDistributionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceZoneDistributionConfigArgs Empty = new InstanceZoneDistributionConfigArgs();

    /**
     * Optional. Current zone distribution mode. Defaults to MULTI_ZONE.
     * Possible values:
     * MULTI_ZONE
     * SINGLE_ZONE
     * Possible values are: `MULTI_ZONE`, `SINGLE_ZONE`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Optional. Current zone distribution mode. Defaults to MULTI_ZONE.
     * Possible values:
     * MULTI_ZONE
     * SINGLE_ZONE
     * Possible values are: `MULTI_ZONE`, `SINGLE_ZONE`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Optional. Defines zone where all resources will be allocated with SINGLE_ZONE mode.
     * Ignored for MULTI_ZONE mode.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Optional. Defines zone where all resources will be allocated with SINGLE_ZONE mode.
     * Ignored for MULTI_ZONE mode.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private InstanceZoneDistributionConfigArgs() {}

    private InstanceZoneDistributionConfigArgs(InstanceZoneDistributionConfigArgs $) {
        this.mode = $.mode;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceZoneDistributionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceZoneDistributionConfigArgs $;

        public Builder() {
            $ = new InstanceZoneDistributionConfigArgs();
        }

        public Builder(InstanceZoneDistributionConfigArgs defaults) {
            $ = new InstanceZoneDistributionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Optional. Current zone distribution mode. Defaults to MULTI_ZONE.
         * Possible values:
         * MULTI_ZONE
         * SINGLE_ZONE
         * Possible values are: `MULTI_ZONE`, `SINGLE_ZONE`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Optional. Current zone distribution mode. Defaults to MULTI_ZONE.
         * Possible values:
         * MULTI_ZONE
         * SINGLE_ZONE
         * Possible values are: `MULTI_ZONE`, `SINGLE_ZONE`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param zone Optional. Defines zone where all resources will be allocated with SINGLE_ZONE mode.
         * Ignored for MULTI_ZONE mode.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Optional. Defines zone where all resources will be allocated with SINGLE_ZONE mode.
         * Ignored for MULTI_ZONE mode.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public InstanceZoneDistributionConfigArgs build() {
            return $;
        }
    }

}
