// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gkebackup.outputs.BackupPlanBackupScheduleRpoConfigExclusionWindow;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class BackupPlanBackupScheduleRpoConfig {
    /**
     * @return User specified time windows during which backup can NOT happen for this BackupPlan.
     * Backups should start and finish outside of any given exclusion window. Note: backup
     * jobs will be scheduled to start and finish outside the duration of the window as
     * much as possible, but running jobs will not get canceled when it runs into the window.
     * All the time and date values in exclusionWindows entry in the API are in UTC. We
     * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
     * restriction on number of single occurrence windows.
     * Structure is documented below.
     * 
     */
    private @Nullable List<BackupPlanBackupScheduleRpoConfigExclusionWindow> exclusionWindows;
    /**
     * @return Defines the target RPO for the BackupPlan in minutes, which means the target
     * maximum data loss in time that is acceptable for this BackupPlan. This must be
     * at least 60, i.e., 1 hour, and at most 86400, i.e., 60 days.
     * 
     */
    private Integer targetRpoMinutes;

    private BackupPlanBackupScheduleRpoConfig() {}
    /**
     * @return User specified time windows during which backup can NOT happen for this BackupPlan.
     * Backups should start and finish outside of any given exclusion window. Note: backup
     * jobs will be scheduled to start and finish outside the duration of the window as
     * much as possible, but running jobs will not get canceled when it runs into the window.
     * All the time and date values in exclusionWindows entry in the API are in UTC. We
     * only allow &lt;=1 recurrence (daily or weekly) exclusion window for a BackupPlan while no
     * restriction on number of single occurrence windows.
     * Structure is documented below.
     * 
     */
    public List<BackupPlanBackupScheduleRpoConfigExclusionWindow> exclusionWindows() {
        return this.exclusionWindows == null ? List.of() : this.exclusionWindows;
    }
    /**
     * @return Defines the target RPO for the BackupPlan in minutes, which means the target
     * maximum data loss in time that is acceptable for this BackupPlan. This must be
     * at least 60, i.e., 1 hour, and at most 86400, i.e., 60 days.
     * 
     */
    public Integer targetRpoMinutes() {
        return this.targetRpoMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupPlanBackupScheduleRpoConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<BackupPlanBackupScheduleRpoConfigExclusionWindow> exclusionWindows;
        private Integer targetRpoMinutes;
        public Builder() {}
        public Builder(BackupPlanBackupScheduleRpoConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclusionWindows = defaults.exclusionWindows;
    	      this.targetRpoMinutes = defaults.targetRpoMinutes;
        }

        @CustomType.Setter
        public Builder exclusionWindows(@Nullable List<BackupPlanBackupScheduleRpoConfigExclusionWindow> exclusionWindows) {

            this.exclusionWindows = exclusionWindows;
            return this;
        }
        public Builder exclusionWindows(BackupPlanBackupScheduleRpoConfigExclusionWindow... exclusionWindows) {
            return exclusionWindows(List.of(exclusionWindows));
        }
        @CustomType.Setter
        public Builder targetRpoMinutes(Integer targetRpoMinutes) {
            if (targetRpoMinutes == null) {
              throw new MissingRequiredPropertyException("BackupPlanBackupScheduleRpoConfig", "targetRpoMinutes");
            }
            this.targetRpoMinutes = targetRpoMinutes;
            return this;
        }
        public BackupPlanBackupScheduleRpoConfig build() {
            final var _resultValue = new BackupPlanBackupScheduleRpoConfig();
            _resultValue.exclusionWindows = exclusionWindows;
            _resultValue.targetRpoMinutes = targetRpoMinutes;
            return _resultValue;
        }
    }
}
