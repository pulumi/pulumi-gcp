// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstancesInstanceSettingBackupConfiguration {
    private List<GetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting> backupRetentionSettings;
    private Boolean binaryLogEnabled;
    private Boolean enabled;
    private String location;
    private Boolean pointInTimeRecoveryEnabled;
    private String startTime;
    private Integer transactionLogRetentionDays;

    private GetDatabaseInstancesInstanceSettingBackupConfiguration() {}
    public List<GetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting> backupRetentionSettings() {
        return this.backupRetentionSettings;
    }
    public Boolean binaryLogEnabled() {
        return this.binaryLogEnabled;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public String location() {
        return this.location;
    }
    public Boolean pointInTimeRecoveryEnabled() {
        return this.pointInTimeRecoveryEnabled;
    }
    public String startTime() {
        return this.startTime;
    }
    public Integer transactionLogRetentionDays() {
        return this.transactionLogRetentionDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstancesInstanceSettingBackupConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting> backupRetentionSettings;
        private Boolean binaryLogEnabled;
        private Boolean enabled;
        private String location;
        private Boolean pointInTimeRecoveryEnabled;
        private String startTime;
        private Integer transactionLogRetentionDays;
        public Builder() {}
        public Builder(GetDatabaseInstancesInstanceSettingBackupConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupRetentionSettings = defaults.backupRetentionSettings;
    	      this.binaryLogEnabled = defaults.binaryLogEnabled;
    	      this.enabled = defaults.enabled;
    	      this.location = defaults.location;
    	      this.pointInTimeRecoveryEnabled = defaults.pointInTimeRecoveryEnabled;
    	      this.startTime = defaults.startTime;
    	      this.transactionLogRetentionDays = defaults.transactionLogRetentionDays;
        }

        @CustomType.Setter
        public Builder backupRetentionSettings(List<GetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting> backupRetentionSettings) {
            if (backupRetentionSettings == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "backupRetentionSettings");
            }
            this.backupRetentionSettings = backupRetentionSettings;
            return this;
        }
        public Builder backupRetentionSettings(GetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting... backupRetentionSettings) {
            return backupRetentionSettings(List.of(backupRetentionSettings));
        }
        @CustomType.Setter
        public Builder binaryLogEnabled(Boolean binaryLogEnabled) {
            if (binaryLogEnabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "binaryLogEnabled");
            }
            this.binaryLogEnabled = binaryLogEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder pointInTimeRecoveryEnabled(Boolean pointInTimeRecoveryEnabled) {
            if (pointInTimeRecoveryEnabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "pointInTimeRecoveryEnabled");
            }
            this.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder transactionLogRetentionDays(Integer transactionLogRetentionDays) {
            if (transactionLogRetentionDays == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingBackupConfiguration", "transactionLogRetentionDays");
            }
            this.transactionLogRetentionDays = transactionLogRetentionDays;
            return this;
        }
        public GetDatabaseInstancesInstanceSettingBackupConfiguration build() {
            final var _resultValue = new GetDatabaseInstancesInstanceSettingBackupConfiguration();
            _resultValue.backupRetentionSettings = backupRetentionSettings;
            _resultValue.binaryLogEnabled = binaryLogEnabled;
            _resultValue.enabled = enabled;
            _resultValue.location = location;
            _resultValue.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
            _resultValue.startTime = startTime;
            _resultValue.transactionLogRetentionDays = transactionLogRetentionDays;
            return _resultValue;
        }
    }
}
