// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workbench;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.workbench.inputs.InstanceGceSetupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * Optional. If true, the workbench instance will not register with the proxy.
     * 
     */
    @Import(name="disableProxyAccess")
    private @Nullable Output<Boolean> disableProxyAccess;

    /**
     * @return Optional. If true, the workbench instance will not register with the proxy.
     * 
     */
    public Optional<Output<Boolean>> disableProxyAccess() {
        return Optional.ofNullable(this.disableProxyAccess);
    }

    /**
     * Flag to enable managed end user credentials for the instance.
     * 
     */
    @Import(name="enableManagedEuc")
    private @Nullable Output<Boolean> enableManagedEuc;

    /**
     * @return Flag to enable managed end user credentials for the instance.
     * 
     */
    public Optional<Output<Boolean>> enableManagedEuc() {
        return Optional.ofNullable(this.enableManagedEuc);
    }

    /**
     * Flag that specifies that a notebook can be accessed with third party
     * identity provider.
     * 
     */
    @Import(name="enableThirdPartyIdentity")
    private @Nullable Output<Boolean> enableThirdPartyIdentity;

    /**
     * @return Flag that specifies that a notebook can be accessed with third party
     * identity provider.
     * 
     */
    public Optional<Output<Boolean>> enableThirdPartyIdentity() {
        return Optional.ofNullable(this.enableThirdPartyIdentity);
    }

    /**
     * The definition of how to configure a VM instance outside of Resources and Identity.
     * Structure is documented below.
     * 
     */
    @Import(name="gceSetup")
    private @Nullable Output<InstanceGceSetupArgs> gceSetup;

    /**
     * @return The definition of how to configure a VM instance outside of Resources and Identity.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceGceSetupArgs>> gceSetup() {
        return Optional.ofNullable(this.gceSetup);
    }

    /**
     * Required. User-defined unique ID of this instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return Required. User-defined unique ID of this instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * &#39;Optional. Input only. The owner of this instance after creation. Format:
     * `alias{@literal @}example.com` Currently supports one owner only. If not specified, all of
     * the service account users of your VM instance&#39;&#39;s service account can use the instance.
     * If specified, sets the access mode to `Single user`. For more details, see
     * https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab&#39;
     * 
     */
    @Import(name="instanceOwners")
    private @Nullable Output<List<String>> instanceOwners;

    /**
     * @return &#39;Optional. Input only. The owner of this instance after creation. Format:
     * `alias{@literal @}example.com` Currently supports one owner only. If not specified, all of
     * the service account users of your VM instance&#39;&#39;s service account can use the instance.
     * If specified, sets the access mode to `Single user`. For more details, see
     * https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab&#39;
     * 
     */
    public Optional<Output<List<String>>> instanceOwners() {
        return Optional.ofNullable(this.instanceOwners);
    }

    /**
     * Optional. Labels to apply to this instance. These can be later modified
     * by the UpdateInstance method.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels to apply to this instance. These can be later modified
     * by the UpdateInstance method.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Part of `parent`. See documentation of `projectsId`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Part of `parent`. See documentation of `projectsId`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.desiredState = $.desiredState;
        this.disableProxyAccess = $.disableProxyAccess;
        this.enableManagedEuc = $.enableManagedEuc;
        this.enableThirdPartyIdentity = $.enableThirdPartyIdentity;
        this.gceSetup = $.gceSetup;
        this.instanceId = $.instanceId;
        this.instanceOwners = $.instanceOwners;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param desiredState Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState Desired state of the Workbench Instance. Set this field to `ACTIVE` to start the Instance, and `STOPPED` to stop the Instance.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param disableProxyAccess Optional. If true, the workbench instance will not register with the proxy.
         * 
         * @return builder
         * 
         */
        public Builder disableProxyAccess(@Nullable Output<Boolean> disableProxyAccess) {
            $.disableProxyAccess = disableProxyAccess;
            return this;
        }

        /**
         * @param disableProxyAccess Optional. If true, the workbench instance will not register with the proxy.
         * 
         * @return builder
         * 
         */
        public Builder disableProxyAccess(Boolean disableProxyAccess) {
            return disableProxyAccess(Output.of(disableProxyAccess));
        }

        /**
         * @param enableManagedEuc Flag to enable managed end user credentials for the instance.
         * 
         * @return builder
         * 
         */
        public Builder enableManagedEuc(@Nullable Output<Boolean> enableManagedEuc) {
            $.enableManagedEuc = enableManagedEuc;
            return this;
        }

        /**
         * @param enableManagedEuc Flag to enable managed end user credentials for the instance.
         * 
         * @return builder
         * 
         */
        public Builder enableManagedEuc(Boolean enableManagedEuc) {
            return enableManagedEuc(Output.of(enableManagedEuc));
        }

        /**
         * @param enableThirdPartyIdentity Flag that specifies that a notebook can be accessed with third party
         * identity provider.
         * 
         * @return builder
         * 
         */
        public Builder enableThirdPartyIdentity(@Nullable Output<Boolean> enableThirdPartyIdentity) {
            $.enableThirdPartyIdentity = enableThirdPartyIdentity;
            return this;
        }

        /**
         * @param enableThirdPartyIdentity Flag that specifies that a notebook can be accessed with third party
         * identity provider.
         * 
         * @return builder
         * 
         */
        public Builder enableThirdPartyIdentity(Boolean enableThirdPartyIdentity) {
            return enableThirdPartyIdentity(Output.of(enableThirdPartyIdentity));
        }

        /**
         * @param gceSetup The definition of how to configure a VM instance outside of Resources and Identity.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gceSetup(@Nullable Output<InstanceGceSetupArgs> gceSetup) {
            $.gceSetup = gceSetup;
            return this;
        }

        /**
         * @param gceSetup The definition of how to configure a VM instance outside of Resources and Identity.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gceSetup(InstanceGceSetupArgs gceSetup) {
            return gceSetup(Output.of(gceSetup));
        }

        /**
         * @param instanceId Required. User-defined unique ID of this instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Required. User-defined unique ID of this instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceOwners &#39;Optional. Input only. The owner of this instance after creation. Format:
         * `alias{@literal @}example.com` Currently supports one owner only. If not specified, all of
         * the service account users of your VM instance&#39;&#39;s service account can use the instance.
         * If specified, sets the access mode to `Single user`. For more details, see
         * https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab&#39;
         * 
         * @return builder
         * 
         */
        public Builder instanceOwners(@Nullable Output<List<String>> instanceOwners) {
            $.instanceOwners = instanceOwners;
            return this;
        }

        /**
         * @param instanceOwners &#39;Optional. Input only. The owner of this instance after creation. Format:
         * `alias{@literal @}example.com` Currently supports one owner only. If not specified, all of
         * the service account users of your VM instance&#39;&#39;s service account can use the instance.
         * If specified, sets the access mode to `Single user`. For more details, see
         * https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab&#39;
         * 
         * @return builder
         * 
         */
        public Builder instanceOwners(List<String> instanceOwners) {
            return instanceOwners(Output.of(instanceOwners));
        }

        /**
         * @param instanceOwners &#39;Optional. Input only. The owner of this instance after creation. Format:
         * `alias{@literal @}example.com` Currently supports one owner only. If not specified, all of
         * the service account users of your VM instance&#39;&#39;s service account can use the instance.
         * If specified, sets the access mode to `Single user`. For more details, see
         * https://cloud.google.com/vertex-ai/docs/workbench/instances/manage-access-jupyterlab&#39;
         * 
         * @return builder
         * 
         */
        public Builder instanceOwners(String... instanceOwners) {
            return instanceOwners(List.of(instanceOwners));
        }

        /**
         * @param labels Optional. Labels to apply to this instance. These can be later modified
         * by the UpdateInstance method.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels to apply to this instance. These can be later modified
         * by the UpdateInstance method.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Part of `parent`. See documentation of `projectsId`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Part of `parent`. See documentation of `projectsId`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public InstanceArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "location");
            }
            return $;
        }
    }

}
