// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iam.inputs.FoldersPolicyBindingConditionArgs;
import com.pulumi.gcp.iam.inputs.FoldersPolicyBindingTargetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FoldersPolicyBindingState extends com.pulumi.resources.ResourceArgs {

    public static final FoldersPolicyBindingState Empty = new FoldersPolicyBindingState();

    /**
     * Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Represents a textual expression in the Common Expression Language
     * (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
     * CEL are documented at https://github.com/google/cel-spec.
     * Example (Comparison):
     * title: \&#34;Summary size limit\&#34;
     * description: \&#34;Determines if a summary is less than 100 chars\&#34;
     * expression: \&#34;document.summary.size() &lt; 100\&#34;
     * Example
     * (Equality):
     * title: \&#34;Requestor is owner\&#34;
     * description: \&#34;Determines if requestor is the document owner\&#34;
     * expression: \&#34;document.owner == request.auth.claims.email\&#34;  Example
     * (Logic):
     * title: \&#34;Public documents\&#34;
     * description: \&#34;Determine whether the document should be publicly visible\&#34;
     * expression: \&#34;document.type != &#39;private&#39; &amp;&amp; document.type != &#39;internal&#39;\&#34;
     * Example (Data Manipulation):
     * title: \&#34;Notification string\&#34;
     * description: \&#34;Create a notification string with a timestamp.\&#34;
     * expression: \&#34;&#39;New message received at &#39; + string(document.create_time)\&#34;
     * The exact variables and functions that may be referenced within an expression are
     * determined by the service that evaluates it. See the service documentation for
     * additional information.
     * Structure is documented below.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<FoldersPolicyBindingConditionArgs> condition;

    /**
     * @return Represents a textual expression in the Common Expression Language
     * (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
     * CEL are documented at https://github.com/google/cel-spec.
     * Example (Comparison):
     * title: \&#34;Summary size limit\&#34;
     * description: \&#34;Determines if a summary is less than 100 chars\&#34;
     * expression: \&#34;document.summary.size() &lt; 100\&#34;
     * Example
     * (Equality):
     * title: \&#34;Requestor is owner\&#34;
     * description: \&#34;Determines if requestor is the document owner\&#34;
     * expression: \&#34;document.owner == request.auth.claims.email\&#34;  Example
     * (Logic):
     * title: \&#34;Public documents\&#34;
     * description: \&#34;Determine whether the document should be publicly visible\&#34;
     * expression: \&#34;document.type != &#39;private&#39; &amp;&amp; document.type != &#39;internal&#39;\&#34;
     * Example (Data Manipulation):
     * title: \&#34;Notification string\&#34;
     * description: \&#34;Create a notification string with a timestamp.\&#34;
     * expression: \&#34;&#39;New message received at &#39; + string(document.create_time)\&#34;
     * The exact variables and functions that may be referenced within an expression are
     * determined by the service that evaluates it. See the service documentation for
     * additional information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FoldersPolicyBindingConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * Output only. The time when the policy binding was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The time when the policy binding was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Optional. The description of the policy binding. Must be less than or equal to 63 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. The description of the policy binding. Must be less than or equal to 63 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * Optional. The etag for the policy binding. If this is provided on update, it must match the server&#39;s etag.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Optional. The etag for the policy binding. If this is provided on update, it must match the server&#39;s etag.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The parent folder for the PolicyBinding.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The parent folder for the PolicyBinding.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The location of the PolicyBinding.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the PolicyBinding.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The Policy Binding ID.
     * 
     */
    @Import(name="policyBindingId")
    private @Nullable Output<String> policyBindingId;

    /**
     * @return The Policy Binding ID.
     * 
     */
    public Optional<Output<String>> policyBindingId() {
        return Optional.ofNullable(this.policyBindingId);
    }

    /**
     * Immutable. The kind of the policy to attach in this binding. This
     * field must be one of the following:  - Left empty (will be automatically set
     * to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
     * 
     */
    @Import(name="policyKind")
    private @Nullable Output<String> policyKind;

    /**
     * @return Immutable. The kind of the policy to attach in this binding. This
     * field must be one of the following:  - Left empty (will be automatically set
     * to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
     * 
     */
    public Optional<Output<String>> policyKind() {
        return Optional.ofNullable(this.policyKind);
    }

    /**
     * Output only. The globally unique ID of the policy to be bound.
     * 
     */
    @Import(name="policyUid")
    private @Nullable Output<String> policyUid;

    /**
     * @return Output only. The globally unique ID of the policy to be bound.
     * 
     */
    public Optional<Output<String>> policyUid() {
        return Optional.ofNullable(this.policyUid);
    }

    /**
     * Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
     * Structure is documented below.
     * 
     */
    @Import(name="target")
    private @Nullable Output<FoldersPolicyBindingTargetArgs> target;

    /**
     * @return Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FoldersPolicyBindingTargetArgs>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. The time when the policy binding was most recently updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The time when the policy binding was most recently updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private FoldersPolicyBindingState() {}

    private FoldersPolicyBindingState(FoldersPolicyBindingState $) {
        this.annotations = $.annotations;
        this.condition = $.condition;
        this.createTime = $.createTime;
        this.displayName = $.displayName;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.etag = $.etag;
        this.folder = $.folder;
        this.location = $.location;
        this.name = $.name;
        this.policy = $.policy;
        this.policyBindingId = $.policyBindingId;
        this.policyKind = $.policyKind;
        this.policyUid = $.policyUid;
        this.target = $.target;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FoldersPolicyBindingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FoldersPolicyBindingState $;

        public Builder() {
            $ = new FoldersPolicyBindingState();
        }

        public Builder(FoldersPolicyBindingState defaults) {
            $ = new FoldersPolicyBindingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
         * 
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. User defined annotations. See https://google.aip.dev/148#annotations for more details such as format and size limitations
         * 
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param condition Represents a textual expression in the Common Expression Language
         * (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
         * CEL are documented at https://github.com/google/cel-spec.
         * Example (Comparison):
         * title: \&#34;Summary size limit\&#34;
         * description: \&#34;Determines if a summary is less than 100 chars\&#34;
         * expression: \&#34;document.summary.size() &lt; 100\&#34;
         * Example
         * (Equality):
         * title: \&#34;Requestor is owner\&#34;
         * description: \&#34;Determines if requestor is the document owner\&#34;
         * expression: \&#34;document.owner == request.auth.claims.email\&#34;  Example
         * (Logic):
         * title: \&#34;Public documents\&#34;
         * description: \&#34;Determine whether the document should be publicly visible\&#34;
         * expression: \&#34;document.type != &#39;private&#39; &amp;&amp; document.type != &#39;internal&#39;\&#34;
         * Example (Data Manipulation):
         * title: \&#34;Notification string\&#34;
         * description: \&#34;Create a notification string with a timestamp.\&#34;
         * expression: \&#34;&#39;New message received at &#39; + string(document.create_time)\&#34;
         * The exact variables and functions that may be referenced within an expression are
         * determined by the service that evaluates it. See the service documentation for
         * additional information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<FoldersPolicyBindingConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition Represents a textual expression in the Common Expression Language
         * (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of
         * CEL are documented at https://github.com/google/cel-spec.
         * Example (Comparison):
         * title: \&#34;Summary size limit\&#34;
         * description: \&#34;Determines if a summary is less than 100 chars\&#34;
         * expression: \&#34;document.summary.size() &lt; 100\&#34;
         * Example
         * (Equality):
         * title: \&#34;Requestor is owner\&#34;
         * description: \&#34;Determines if requestor is the document owner\&#34;
         * expression: \&#34;document.owner == request.auth.claims.email\&#34;  Example
         * (Logic):
         * title: \&#34;Public documents\&#34;
         * description: \&#34;Determine whether the document should be publicly visible\&#34;
         * expression: \&#34;document.type != &#39;private&#39; &amp;&amp; document.type != &#39;internal&#39;\&#34;
         * Example (Data Manipulation):
         * title: \&#34;Notification string\&#34;
         * description: \&#34;Create a notification string with a timestamp.\&#34;
         * expression: \&#34;&#39;New message received at &#39; + string(document.create_time)\&#34;
         * The exact variables and functions that may be referenced within an expression are
         * determined by the service that evaluates it. See the service documentation for
         * additional information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder condition(FoldersPolicyBindingConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param createTime Output only. The time when the policy binding was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The time when the policy binding was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param displayName Optional. The description of the policy binding. Must be less than or equal to 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. The description of the policy binding. Must be less than or equal to 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param etag Optional. The etag for the policy binding. If this is provided on update, it must match the server&#39;s etag.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Optional. The etag for the policy binding. If this is provided on update, it must match the server&#39;s etag.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param folder The parent folder for the PolicyBinding.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The parent folder for the PolicyBinding.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param location The location of the PolicyBinding.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the PolicyBinding.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy binding in the format `{binding_parent/locations/{location}/policyBindings/{policy_binding_id}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policy Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Required. Immutable. The resource name of the policy to be bound. The binding parent and policy must belong to the same Organization (or Project).
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param policyBindingId The Policy Binding ID.
         * 
         * @return builder
         * 
         */
        public Builder policyBindingId(@Nullable Output<String> policyBindingId) {
            $.policyBindingId = policyBindingId;
            return this;
        }

        /**
         * @param policyBindingId The Policy Binding ID.
         * 
         * @return builder
         * 
         */
        public Builder policyBindingId(String policyBindingId) {
            return policyBindingId(Output.of(policyBindingId));
        }

        /**
         * @param policyKind Immutable. The kind of the policy to attach in this binding. This
         * field must be one of the following:  - Left empty (will be automatically set
         * to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
         * 
         * @return builder
         * 
         */
        public Builder policyKind(@Nullable Output<String> policyKind) {
            $.policyKind = policyKind;
            return this;
        }

        /**
         * @param policyKind Immutable. The kind of the policy to attach in this binding. This
         * field must be one of the following:  - Left empty (will be automatically set
         * to the policy kind) - The input policy kind   Possible values:  POLICY_KIND_UNSPECIFIED PRINCIPAL_ACCESS_BOUNDARY ACCESS
         * 
         * @return builder
         * 
         */
        public Builder policyKind(String policyKind) {
            return policyKind(Output.of(policyKind));
        }

        /**
         * @param policyUid Output only. The globally unique ID of the policy to be bound.
         * 
         * @return builder
         * 
         */
        public Builder policyUid(@Nullable Output<String> policyUid) {
            $.policyUid = policyUid;
            return this;
        }

        /**
         * @param policyUid Output only. The globally unique ID of the policy to be bound.
         * 
         * @return builder
         * 
         */
        public Builder policyUid(String policyUid) {
            return policyUid(Output.of(policyUid));
        }

        /**
         * @param target Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<FoldersPolicyBindingTargetArgs> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Target is the full resource name of the resource to which the policy will be bound. Immutable once set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder target(FoldersPolicyBindingTargetArgs target) {
            return target(Output.of(target));
        }

        /**
         * @param uid Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. The globally unique ID of the policy binding. Assigned when the policy binding is created.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. The time when the policy binding was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The time when the policy binding was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public FoldersPolicyBindingState build() {
            return $;
        }
    }

}
