// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretVersionArgs Empty = new SecretVersionArgs();

    /**
     * The deletion policy for the secret version. Setting `ABANDON` allows the resource
     * to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
     * disabled rather than deleted. Default is `DELETE`. Possible values are:
     * * DELETE
     * * DISABLE
     * * ABANDON
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return The deletion policy for the secret version. Setting `ABANDON` allows the resource
     * to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
     * disabled rather than deleted. Default is `DELETE`. Possible values are:
     * * DELETE
     * * DISABLE
     * * ABANDON
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * The current state of the SecretVersion.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return The current state of the SecretVersion.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * If set to &#39;true&#39;, the secret data is expected to be base64-encoded string and would be sent as is.
     * 
     */
    @Import(name="isSecretDataBase64")
    private @Nullable Output<Boolean> isSecretDataBase64;

    /**
     * @return If set to &#39;true&#39;, the secret data is expected to be base64-encoded string and would be sent as is.
     * 
     */
    public Optional<Output<Boolean>> isSecretDataBase64() {
        return Optional.ofNullable(this.isSecretDataBase64);
    }

    /**
     * Secret Manager secret resource
     * 
     * ***
     * 
     */
    @Import(name="secret", required=true)
    private Output<String> secret;

    /**
     * @return Secret Manager secret resource
     * 
     * ***
     * 
     */
    public Output<String> secret() {
        return this.secret;
    }

    /**
     * The secret data. Must be no larger than 64KiB.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="secretData", required=true)
    private Output<String> secretData;

    /**
     * @return The secret data. Must be no larger than 64KiB.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> secretData() {
        return this.secretData;
    }

    private SecretVersionArgs() {}

    private SecretVersionArgs(SecretVersionArgs $) {
        this.deletionPolicy = $.deletionPolicy;
        this.enabled = $.enabled;
        this.isSecretDataBase64 = $.isSecretDataBase64;
        this.secret = $.secret;
        this.secretData = $.secretData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretVersionArgs $;

        public Builder() {
            $ = new SecretVersionArgs();
        }

        public Builder(SecretVersionArgs defaults) {
            $ = new SecretVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deletionPolicy The deletion policy for the secret version. Setting `ABANDON` allows the resource
         * to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
         * disabled rather than deleted. Default is `DELETE`. Possible values are:
         * * DELETE
         * * DISABLE
         * * ABANDON
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy The deletion policy for the secret version. Setting `ABANDON` allows the resource
         * to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
         * disabled rather than deleted. Default is `DELETE`. Possible values are:
         * * DELETE
         * * DISABLE
         * * ABANDON
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param enabled The current state of the SecretVersion.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The current state of the SecretVersion.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param isSecretDataBase64 If set to &#39;true&#39;, the secret data is expected to be base64-encoded string and would be sent as is.
         * 
         * @return builder
         * 
         */
        public Builder isSecretDataBase64(@Nullable Output<Boolean> isSecretDataBase64) {
            $.isSecretDataBase64 = isSecretDataBase64;
            return this;
        }

        /**
         * @param isSecretDataBase64 If set to &#39;true&#39;, the secret data is expected to be base64-encoded string and would be sent as is.
         * 
         * @return builder
         * 
         */
        public Builder isSecretDataBase64(Boolean isSecretDataBase64) {
            return isSecretDataBase64(Output.of(isSecretDataBase64));
        }

        /**
         * @param secret Secret Manager secret resource
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Secret Manager secret resource
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param secretData The secret data. Must be no larger than 64KiB.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder secretData(Output<String> secretData) {
            $.secretData = secretData;
            return this;
        }

        /**
         * @param secretData The secret data. Must be no larger than 64KiB.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder secretData(String secretData) {
            return secretData(Output.of(secretData));
        }

        public SecretVersionArgs build() {
            $.secret = Objects.requireNonNull($.secret, "expected parameter 'secret' to be non-null");
            $.secretData = Objects.requireNonNull($.secretData, "expected parameter 'secretData' to be non-null");
            return $;
        }
    }

}
