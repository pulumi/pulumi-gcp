// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeConfigAdvancedMachineFeaturesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigAdvancedMachineFeaturesArgs Empty = new NodePoolNodeConfigAdvancedMachineFeaturesArgs();

    /**
     * Whether the node should have nested virtualization enabled.
     * 
     */
    @Import(name="enableNestedVirtualization")
    private @Nullable Output<Boolean> enableNestedVirtualization;

    /**
     * @return Whether the node should have nested virtualization enabled.
     * 
     */
    public Optional<Output<Boolean>> enableNestedVirtualization() {
        return Optional.ofNullable(this.enableNestedVirtualization);
    }

    /**
     * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    @Import(name="threadsPerCore", required=true)
    private Output<Integer> threadsPerCore;

    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    public Output<Integer> threadsPerCore() {
        return this.threadsPerCore;
    }

    private NodePoolNodeConfigAdvancedMachineFeaturesArgs() {}

    private NodePoolNodeConfigAdvancedMachineFeaturesArgs(NodePoolNodeConfigAdvancedMachineFeaturesArgs $) {
        this.enableNestedVirtualization = $.enableNestedVirtualization;
        this.threadsPerCore = $.threadsPerCore;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigAdvancedMachineFeaturesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigAdvancedMachineFeaturesArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigAdvancedMachineFeaturesArgs();
        }

        public Builder(NodePoolNodeConfigAdvancedMachineFeaturesArgs defaults) {
            $ = new NodePoolNodeConfigAdvancedMachineFeaturesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableNestedVirtualization Whether the node should have nested virtualization enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableNestedVirtualization(@Nullable Output<Boolean> enableNestedVirtualization) {
            $.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }

        /**
         * @param enableNestedVirtualization Whether the node should have nested virtualization enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableNestedVirtualization(Boolean enableNestedVirtualization) {
            return enableNestedVirtualization(Output.of(enableNestedVirtualization));
        }

        /**
         * @param threadsPerCore The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCore(Output<Integer> threadsPerCore) {
            $.threadsPerCore = threadsPerCore;
            return this;
        }

        /**
         * @param threadsPerCore The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
         * 
         * @return builder
         * 
         */
        public Builder threadsPerCore(Integer threadsPerCore) {
            return threadsPerCore(Output.of(threadsPerCore));
        }

        public NodePoolNodeConfigAdvancedMachineFeaturesArgs build() {
            if ($.threadsPerCore == null) {
                throw new MissingRequiredPropertyException("NodePoolNodeConfigAdvancedMachineFeaturesArgs", "threadsPerCore");
            }
            return $;
        }
    }

}
