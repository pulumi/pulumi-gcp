// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apigee.NatAddressArgs;
import com.pulumi.gcp.apigee.inputs.NatAddressState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Apigee NAT (network address translation) address. A NAT address is a static external IP address used for Internet egress traffic. This is not avaible for Apigee hybrid.
 * 
 * To get more information about NatAddress, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.natAddresses)
 * * How-to Guides
 *     * [Provisioning NAT IPs](https://cloud.google.com/apigee/docs/api-platform/security/nat-provisioning)
 * 
 * ## Example Usage
 * 
 * ### Apigee Nat Address Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.kms.KeyRing;
 * import com.pulumi.gcp.kms.KeyRingArgs;
 * import com.pulumi.gcp.kms.CryptoKey;
 * import com.pulumi.gcp.kms.CryptoKeyArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.gcp.apigee.NatAddress;
 * import com.pulumi.gcp.apigee.NatAddressArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
 *             .name("apigee-network")
 *             .build());
 * 
 *         var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
 *             .name("apigee-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(21)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
 *             .network(apigeeNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
 *             .name("apigee-keyring")
 *             .location("us-central1")
 *             .build());
 * 
 *         var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
 *             .name("apigee-key")
 *             .keyRing(apigeeKeyring.id())
 *             .build());
 * 
 *         var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
 *             .project(project.projectId())
 *             .service(apigee.service())
 *             .build());
 * 
 *         var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId(apigeeKey.id())
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(apigeeSa.member())
 *             .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .displayName("apigee-org")
 *             .description("Terraform-provisioned Apigee Org.")
 *             .projectId(current.project())
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     apigeeVpcConnection,
 *                     apigeeSaKeyuser)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
 *             .name("apigee-instance")
 *             .location("us-central1")
 *             .description("Terraform-managed Apigee Runtime Instance")
 *             .displayName("apigee-instance")
 *             .orgId(apigeeOrg.id())
 *             .diskEncryptionKeyName(apigeeKey.id())
 *             .build());
 * 
 *         var apigee_nat = new NatAddress("apigee-nat", NatAddressArgs.builder()
 *             .name("my-nat-address")
 *             .instanceId(apigeeInstance.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Apigee Nat Address With Activate
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.kms.KeyRing;
 * import com.pulumi.gcp.kms.KeyRingArgs;
 * import com.pulumi.gcp.kms.CryptoKey;
 * import com.pulumi.gcp.kms.CryptoKeyArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.gcp.apigee.NatAddress;
 * import com.pulumi.gcp.apigee.NatAddressArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
 *             .name("apigee-network")
 *             .build());
 * 
 *         var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
 *             .name("apigee-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(21)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
 *             .network(apigeeNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
 *             .name("apigee-keyring")
 *             .location("us-central1")
 *             .build());
 * 
 *         var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
 *             .name("apigee-key")
 *             .keyRing(apigeeKeyring.id())
 *             .build());
 * 
 *         var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
 *             .project(project.projectId())
 *             .service(apigee.service())
 *             .build());
 * 
 *         var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId(apigeeKey.id())
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(apigeeSa.member())
 *             .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .displayName("apigee-org")
 *             .description("Terraform-provisioned Apigee Org.")
 *             .projectId(current.project())
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     apigeeVpcConnection,
 *                     apigeeSaKeyuser)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
 *             .name("apigee-instance")
 *             .location("us-central1")
 *             .description("Terraform-managed Apigee Runtime Instance")
 *             .displayName("apigee-instance")
 *             .orgId(apigeeOrg.id())
 *             .diskEncryptionKeyName(apigeeKey.id())
 *             .build());
 * 
 *         var apigee_nat = new NatAddress("apigee-nat", NatAddressArgs.builder()
 *             .name("my-nat-address")
 *             .activate(true)
 *             .instanceId(apigeeInstance.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NatAddress can be imported using any of these accepted formats:
 * 
 * * `{{instance_id}}/natAddresses/{{name}}`
 * 
 * * `{{instance_id}}/{{name}}`
 * 
 * When using the `pulumi import` command, NatAddress can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/natAddresses/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:apigee/natAddress:NatAddress")
public class NatAddress extends com.pulumi.resources.CustomResource {
    /**
     * Flag that specifies whether the reserved NAT address should be activate.
     * 
     */
    @Export(name="activate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> activate;

    /**
     * @return Flag that specifies whether the reserved NAT address should be activate.
     * 
     */
    public Output<Optional<Boolean>> activate() {
        return Codegen.optional(this.activate);
    }
    /**
     * The Apigee instance associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/instances/{{instance_name}}`.
     * 
     * ***
     * 
     */
    @Export(name="instanceId", refs={String.class}, tree="[0]")
    private Output<String> instanceId;

    /**
     * @return The Apigee instance associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/instances/{{instance_name}}`.
     * 
     * ***
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }
    /**
     * The allocated NAT IP address.
     * 
     */
    @Export(name="ipAddress", refs={String.class}, tree="[0]")
    private Output<String> ipAddress;

    /**
     * @return The allocated NAT IP address.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }
    /**
     * Resource ID of the NAT address.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Resource ID of the NAT address.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * State of the NAT IP address.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State of the NAT IP address.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NatAddress(java.lang.String name) {
        this(name, NatAddressArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NatAddress(java.lang.String name, NatAddressArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NatAddress(java.lang.String name, NatAddressArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/natAddress:NatAddress", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NatAddress(java.lang.String name, Output<java.lang.String> id, @Nullable NatAddressState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/natAddress:NatAddress", name, state, makeResourceOptions(options, id), false);
    }

    private static NatAddressArgs makeArgs(NatAddressArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NatAddressArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NatAddress get(java.lang.String name, Output<java.lang.String> id, @Nullable NatAddressState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NatAddress(name, id, state, options);
    }
}
