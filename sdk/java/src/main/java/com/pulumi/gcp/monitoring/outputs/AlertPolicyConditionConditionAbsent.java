// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionAbsentAggregation;
import com.pulumi.gcp.monitoring.outputs.AlertPolicyConditionConditionAbsentTrigger;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertPolicyConditionConditionAbsent {
    /**
     * @return Specifies the alignment of data points in
     * individual time series as well as how to
     * combine the retrieved time series together
     * (such as when aggregating multiple streams
     * on each resource to a single stream for each
     * resource or when aggregating streams across
     * all members of a group of resources).
     * Multiple aggregations are applied in the
     * order specified.This field is similar to the
     * one in the MetricService.ListTimeSeries
     * request. It is advisable to use the
     * ListTimeSeries method when debugging this
     * field.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<AlertPolicyConditionConditionAbsentAggregation> aggregations;
    /**
     * @return The amount of time that a time series must
     * violate the threshold to be considered
     * failing. Currently, only values that are a
     * multiple of a minute--e.g., 0, 60, 120, or
     * 300 seconds--are supported. If an invalid
     * value is given, an error will be returned.
     * When choosing a duration, it is useful to
     * keep in mind the frequency of the underlying
     * time series data (which may also be affected
     * by any alignments specified in the
     * aggregations field); a good duration is long
     * enough so that a single outlier does not
     * generate spurious alerts, but short enough
     * that unhealthy states are detected and
     * alerted on quickly.
     * 
     */
    private final String duration;
    /**
     * @return A logs-based filter.
     * 
     */
    private final @Nullable String filter;
    /**
     * @return The number/percent of time series for which
     * the comparison must hold in order for the
     * condition to trigger. If unspecified, then
     * the condition will trigger if the comparison
     * is true for any of the time series that have
     * been identified by filter and aggregations,
     * or by the ratio, if denominator_filter and
     * denominator_aggregations are specified.
     * Structure is documented below.
     * 
     */
    private final @Nullable AlertPolicyConditionConditionAbsentTrigger trigger;

    @CustomType.Constructor
    private AlertPolicyConditionConditionAbsent(
        @CustomType.Parameter("aggregations") @Nullable List<AlertPolicyConditionConditionAbsentAggregation> aggregations,
        @CustomType.Parameter("duration") String duration,
        @CustomType.Parameter("filter") @Nullable String filter,
        @CustomType.Parameter("trigger") @Nullable AlertPolicyConditionConditionAbsentTrigger trigger) {
        this.aggregations = aggregations;
        this.duration = duration;
        this.filter = filter;
        this.trigger = trigger;
    }

    /**
     * @return Specifies the alignment of data points in
     * individual time series as well as how to
     * combine the retrieved time series together
     * (such as when aggregating multiple streams
     * on each resource to a single stream for each
     * resource or when aggregating streams across
     * all members of a group of resources).
     * Multiple aggregations are applied in the
     * order specified.This field is similar to the
     * one in the MetricService.ListTimeSeries
     * request. It is advisable to use the
     * ListTimeSeries method when debugging this
     * field.
     * Structure is documented below.
     * 
     */
    public List<AlertPolicyConditionConditionAbsentAggregation> aggregations() {
        return this.aggregations == null ? List.of() : this.aggregations;
    }
    /**
     * @return The amount of time that a time series must
     * violate the threshold to be considered
     * failing. Currently, only values that are a
     * multiple of a minute--e.g., 0, 60, 120, or
     * 300 seconds--are supported. If an invalid
     * value is given, an error will be returned.
     * When choosing a duration, it is useful to
     * keep in mind the frequency of the underlying
     * time series data (which may also be affected
     * by any alignments specified in the
     * aggregations field); a good duration is long
     * enough so that a single outlier does not
     * generate spurious alerts, but short enough
     * that unhealthy states are detected and
     * alerted on quickly.
     * 
     */
    public String duration() {
        return this.duration;
    }
    /**
     * @return A logs-based filter.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The number/percent of time series for which
     * the comparison must hold in order for the
     * condition to trigger. If unspecified, then
     * the condition will trigger if the comparison
     * is true for any of the time series that have
     * been identified by filter and aggregations,
     * or by the ratio, if denominator_filter and
     * denominator_aggregations are specified.
     * Structure is documented below.
     * 
     */
    public Optional<AlertPolicyConditionConditionAbsentTrigger> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertPolicyConditionConditionAbsent defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<AlertPolicyConditionConditionAbsentAggregation> aggregations;
        private String duration;
        private @Nullable String filter;
        private @Nullable AlertPolicyConditionConditionAbsentTrigger trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(AlertPolicyConditionConditionAbsent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregations = defaults.aggregations;
    	      this.duration = defaults.duration;
    	      this.filter = defaults.filter;
    	      this.trigger = defaults.trigger;
        }

        public Builder aggregations(@Nullable List<AlertPolicyConditionConditionAbsentAggregation> aggregations) {
            this.aggregations = aggregations;
            return this;
        }
        public Builder aggregations(AlertPolicyConditionConditionAbsentAggregation... aggregations) {
            return aggregations(List.of(aggregations));
        }
        public Builder duration(String duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        public Builder trigger(@Nullable AlertPolicyConditionConditionAbsentTrigger trigger) {
            this.trigger = trigger;
            return this;
        }        public AlertPolicyConditionConditionAbsent build() {
            return new AlertPolicyConditionConditionAbsent(aggregations, duration, filter, trigger);
        }
    }
}
