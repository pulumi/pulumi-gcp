// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.firebase.outputs.AppHostingBuildSourceCodebaseAuthor;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppHostingBuildSourceCodebase {
    /**
     * @return (Output)
     * Version control metadata for a user associated with a resolved codebase.
     * Currently assumes a Git user.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AppHostingBuildSourceCodebaseAuthor> authors;
    /**
     * @return The branch in the codebase to build from, using the latest commit.
     * 
     */
    private @Nullable String branch;
    /**
     * @return The commit in the codebase to build from.
     * 
     * &lt;a name=&#34;nested_source_codebase_author&#34;&gt;&lt;/a&gt;The `author` block contains:
     * 
     */
    private @Nullable String commit;
    /**
     * @return (Output)
     * The message of a codebase change.
     * 
     */
    private @Nullable String commitMessage;
    /**
     * @return (Output)
     * The time the change was made.
     * 
     */
    private @Nullable String commitTime;
    /**
     * @return (Output)
     * The &#39;name&#39; field in a Git user&#39;s git.config. Required by Git.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return (Output)
     * The full SHA-1 hash of a Git commit, if available.
     * 
     */
    private @Nullable String hash;
    /**
     * @return (Output)
     * A URI linking to the codebase on an hosting provider&#39;s website. May
     * not be valid if the commit has been rebased or force-pushed out of
     * existence in the linked repository.
     * 
     */
    private @Nullable String uri;

    private AppHostingBuildSourceCodebase() {}
    /**
     * @return (Output)
     * Version control metadata for a user associated with a resolved codebase.
     * Currently assumes a Git user.
     * Structure is documented below.
     * 
     */
    public List<AppHostingBuildSourceCodebaseAuthor> authors() {
        return this.authors == null ? List.of() : this.authors;
    }
    /**
     * @return The branch in the codebase to build from, using the latest commit.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return The commit in the codebase to build from.
     * 
     * &lt;a name=&#34;nested_source_codebase_author&#34;&gt;&lt;/a&gt;The `author` block contains:
     * 
     */
    public Optional<String> commit() {
        return Optional.ofNullable(this.commit);
    }
    /**
     * @return (Output)
     * The message of a codebase change.
     * 
     */
    public Optional<String> commitMessage() {
        return Optional.ofNullable(this.commitMessage);
    }
    /**
     * @return (Output)
     * The time the change was made.
     * 
     */
    public Optional<String> commitTime() {
        return Optional.ofNullable(this.commitTime);
    }
    /**
     * @return (Output)
     * The &#39;name&#39; field in a Git user&#39;s git.config. Required by Git.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return (Output)
     * The full SHA-1 hash of a Git commit, if available.
     * 
     */
    public Optional<String> hash() {
        return Optional.ofNullable(this.hash);
    }
    /**
     * @return (Output)
     * A URI linking to the codebase on an hosting provider&#39;s website. May
     * not be valid if the commit has been rebased or force-pushed out of
     * existence in the linked repository.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppHostingBuildSourceCodebase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AppHostingBuildSourceCodebaseAuthor> authors;
        private @Nullable String branch;
        private @Nullable String commit;
        private @Nullable String commitMessage;
        private @Nullable String commitTime;
        private @Nullable String displayName;
        private @Nullable String hash;
        private @Nullable String uri;
        public Builder() {}
        public Builder(AppHostingBuildSourceCodebase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authors = defaults.authors;
    	      this.branch = defaults.branch;
    	      this.commit = defaults.commit;
    	      this.commitMessage = defaults.commitMessage;
    	      this.commitTime = defaults.commitTime;
    	      this.displayName = defaults.displayName;
    	      this.hash = defaults.hash;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder authors(@Nullable List<AppHostingBuildSourceCodebaseAuthor> authors) {

            this.authors = authors;
            return this;
        }
        public Builder authors(AppHostingBuildSourceCodebaseAuthor... authors) {
            return authors(List.of(authors));
        }
        @CustomType.Setter
        public Builder branch(@Nullable String branch) {

            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder commit(@Nullable String commit) {

            this.commit = commit;
            return this;
        }
        @CustomType.Setter
        public Builder commitMessage(@Nullable String commitMessage) {

            this.commitMessage = commitMessage;
            return this;
        }
        @CustomType.Setter
        public Builder commitTime(@Nullable String commitTime) {

            this.commitTime = commitTime;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder hash(@Nullable String hash) {

            this.hash = hash;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        public AppHostingBuildSourceCodebase build() {
            final var _resultValue = new AppHostingBuildSourceCodebase();
            _resultValue.authors = authors;
            _resultValue.branch = branch;
            _resultValue.commit = commit;
            _resultValue.commitMessage = commitMessage;
            _resultValue.commitTime = commitTime;
            _resultValue.displayName = displayName;
            _resultValue.hash = hash;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
