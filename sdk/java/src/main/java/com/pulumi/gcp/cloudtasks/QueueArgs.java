// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudtasks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudtasks.inputs.QueueAppEngineRoutingOverrideArgs;
import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetArgs;
import com.pulumi.gcp.cloudtasks.inputs.QueueRateLimitsArgs;
import com.pulumi.gcp.cloudtasks.inputs.QueueRetryConfigArgs;
import com.pulumi.gcp.cloudtasks.inputs.QueueStackdriverLoggingConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueArgs Empty = new QueueArgs();

    /**
     * Overrides for task-level appEngineRouting. These settings apply only
     * to App Engine tasks in this queue
     * Structure is documented below.
     * 
     */
    @Import(name="appEngineRoutingOverride")
    private @Nullable Output<QueueAppEngineRoutingOverrideArgs> appEngineRoutingOverride;

    /**
     * @return Overrides for task-level appEngineRouting. These settings apply only
     * to App Engine tasks in this queue
     * Structure is documented below.
     * 
     */
    public Optional<Output<QueueAppEngineRoutingOverrideArgs>> appEngineRoutingOverride() {
        return Optional.ofNullable(this.appEngineRoutingOverride);
    }

    /**
     * Modifies HTTP target for HTTP tasks.
     * Structure is documented below.
     * 
     */
    @Import(name="httpTarget")
    private @Nullable Output<QueueHttpTargetArgs> httpTarget;

    /**
     * @return Modifies HTTP target for HTTP tasks.
     * Structure is documented below.
     * 
     */
    public Optional<Output<QueueHttpTargetArgs>> httpTarget() {
        return Optional.ofNullable(this.httpTarget);
    }

    /**
     * The location of the queue
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the queue
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The queue name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The queue name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Rate limits for task dispatches.
     * The queue&#39;s actual dispatch rate is the result of:
     * * Number of tasks in the queue
     * * User-specified throttling: rateLimits, retryConfig, and the queue&#39;s state.
     * * System throttling due to 429 (Too Many Requests) or 503 (Service
     *   Unavailable) responses from the worker, high error rates, or to
     *   smooth sudden large traffic spikes.
     *   Structure is documented below.
     * 
     */
    @Import(name="rateLimits")
    private @Nullable Output<QueueRateLimitsArgs> rateLimits;

    /**
     * @return Rate limits for task dispatches.
     * The queue&#39;s actual dispatch rate is the result of:
     * * Number of tasks in the queue
     * * User-specified throttling: rateLimits, retryConfig, and the queue&#39;s state.
     * * System throttling due to 429 (Too Many Requests) or 503 (Service
     *   Unavailable) responses from the worker, high error rates, or to
     *   smooth sudden large traffic spikes.
     *   Structure is documented below.
     * 
     */
    public Optional<Output<QueueRateLimitsArgs>> rateLimits() {
        return Optional.ofNullable(this.rateLimits);
    }

    /**
     * Settings that determine the retry behavior.
     * Structure is documented below.
     * 
     */
    @Import(name="retryConfig")
    private @Nullable Output<QueueRetryConfigArgs> retryConfig;

    /**
     * @return Settings that determine the retry behavior.
     * Structure is documented below.
     * 
     */
    public Optional<Output<QueueRetryConfigArgs>> retryConfig() {
        return Optional.ofNullable(this.retryConfig);
    }

    /**
     * Configuration options for writing logs to Stackdriver Logging.
     * Structure is documented below.
     * 
     */
    @Import(name="stackdriverLoggingConfig")
    private @Nullable Output<QueueStackdriverLoggingConfigArgs> stackdriverLoggingConfig;

    /**
     * @return Configuration options for writing logs to Stackdriver Logging.
     * Structure is documented below.
     * 
     */
    public Optional<Output<QueueStackdriverLoggingConfigArgs>> stackdriverLoggingConfig() {
        return Optional.ofNullable(this.stackdriverLoggingConfig);
    }

    private QueueArgs() {}

    private QueueArgs(QueueArgs $) {
        this.appEngineRoutingOverride = $.appEngineRoutingOverride;
        this.httpTarget = $.httpTarget;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.rateLimits = $.rateLimits;
        this.retryConfig = $.retryConfig;
        this.stackdriverLoggingConfig = $.stackdriverLoggingConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueArgs $;

        public Builder() {
            $ = new QueueArgs();
        }

        public Builder(QueueArgs defaults) {
            $ = new QueueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appEngineRoutingOverride Overrides for task-level appEngineRouting. These settings apply only
         * to App Engine tasks in this queue
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder appEngineRoutingOverride(@Nullable Output<QueueAppEngineRoutingOverrideArgs> appEngineRoutingOverride) {
            $.appEngineRoutingOverride = appEngineRoutingOverride;
            return this;
        }

        /**
         * @param appEngineRoutingOverride Overrides for task-level appEngineRouting. These settings apply only
         * to App Engine tasks in this queue
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder appEngineRoutingOverride(QueueAppEngineRoutingOverrideArgs appEngineRoutingOverride) {
            return appEngineRoutingOverride(Output.of(appEngineRoutingOverride));
        }

        /**
         * @param httpTarget Modifies HTTP target for HTTP tasks.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpTarget(@Nullable Output<QueueHttpTargetArgs> httpTarget) {
            $.httpTarget = httpTarget;
            return this;
        }

        /**
         * @param httpTarget Modifies HTTP target for HTTP tasks.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder httpTarget(QueueHttpTargetArgs httpTarget) {
            return httpTarget(Output.of(httpTarget));
        }

        /**
         * @param location The location of the queue
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the queue
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The queue name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The queue name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rateLimits Rate limits for task dispatches.
         * The queue&#39;s actual dispatch rate is the result of:
         * * Number of tasks in the queue
         * * User-specified throttling: rateLimits, retryConfig, and the queue&#39;s state.
         * * System throttling due to 429 (Too Many Requests) or 503 (Service
         *   Unavailable) responses from the worker, high error rates, or to
         *   smooth sudden large traffic spikes.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimits(@Nullable Output<QueueRateLimitsArgs> rateLimits) {
            $.rateLimits = rateLimits;
            return this;
        }

        /**
         * @param rateLimits Rate limits for task dispatches.
         * The queue&#39;s actual dispatch rate is the result of:
         * * Number of tasks in the queue
         * * User-specified throttling: rateLimits, retryConfig, and the queue&#39;s state.
         * * System throttling due to 429 (Too Many Requests) or 503 (Service
         *   Unavailable) responses from the worker, high error rates, or to
         *   smooth sudden large traffic spikes.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimits(QueueRateLimitsArgs rateLimits) {
            return rateLimits(Output.of(rateLimits));
        }

        /**
         * @param retryConfig Settings that determine the retry behavior.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder retryConfig(@Nullable Output<QueueRetryConfigArgs> retryConfig) {
            $.retryConfig = retryConfig;
            return this;
        }

        /**
         * @param retryConfig Settings that determine the retry behavior.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder retryConfig(QueueRetryConfigArgs retryConfig) {
            return retryConfig(Output.of(retryConfig));
        }

        /**
         * @param stackdriverLoggingConfig Configuration options for writing logs to Stackdriver Logging.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stackdriverLoggingConfig(@Nullable Output<QueueStackdriverLoggingConfigArgs> stackdriverLoggingConfig) {
            $.stackdriverLoggingConfig = stackdriverLoggingConfig;
            return this;
        }

        /**
         * @param stackdriverLoggingConfig Configuration options for writing logs to Stackdriver Logging.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder stackdriverLoggingConfig(QueueStackdriverLoggingConfigArgs stackdriverLoggingConfig) {
            return stackdriverLoggingConfig(Output.of(stackdriverLoggingConfig));
        }

        public QueueArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("QueueArgs", "location");
            }
            return $;
        }
    }

}
