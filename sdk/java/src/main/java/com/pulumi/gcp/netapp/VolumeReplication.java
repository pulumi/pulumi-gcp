// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.netapp.VolumeReplicationArgs;
import com.pulumi.gcp.netapp.inputs.VolumeReplicationState;
import com.pulumi.gcp.netapp.outputs.VolumeReplicationDestinationVolumeParameters;
import com.pulumi.gcp.netapp.outputs.VolumeReplicationTransferStat;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Netapp Volume Replication Create
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
 * import com.pulumi.gcp.netapp.StoragePool;
 * import com.pulumi.gcp.netapp.StoragePoolArgs;
 * import com.pulumi.gcp.netapp.Volume;
 * import com.pulumi.gcp.netapp.VolumeArgs;
 * import com.pulumi.gcp.netapp.VolumeReplication;
 * import com.pulumi.gcp.netapp.VolumeReplicationArgs;
 * import com.pulumi.gcp.netapp.inputs.VolumeReplicationDestinationVolumeParametersArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("test-network")
 *             .build());
 * 
 *         var sourcePool = new StoragePool("sourcePool", StoragePoolArgs.builder()
 *             .name("source-pool")
 *             .location("us-central1")
 *             .serviceLevel("PREMIUM")
 *             .capacityGib("2048")
 *             .network(default_.id())
 *             .build());
 * 
 *         var destinationPool = new StoragePool("destinationPool", StoragePoolArgs.builder()
 *             .name("destination-pool")
 *             .location("us-west2")
 *             .serviceLevel("PREMIUM")
 *             .capacityGib("2048")
 *             .network(default_.id())
 *             .build());
 * 
 *         var sourceVolume = new Volume("sourceVolume", VolumeArgs.builder()
 *             .location(sourcePool.location())
 *             .name("source-volume")
 *             .capacityGib("100")
 *             .shareName("source-volume")
 *             .storagePool(sourcePool.name())
 *             .protocols("NFSV3")
 *             .deletionPolicy("FORCE")
 *             .build());
 * 
 *         var testReplication = new VolumeReplication("testReplication", VolumeReplicationArgs.builder()
 *             .location(sourceVolume.location())
 *             .volumeName(sourceVolume.name())
 *             .name("test-replication")
 *             .replicationSchedule("EVERY_10_MINUTES")
 *             .description("This is a replication resource")
 *             .destinationVolumeParameters(VolumeReplicationDestinationVolumeParametersArgs.builder()
 *                 .storagePool(destinationPool.id())
 *                 .volumeId("destination-volume")
 *                 .shareName("source-volume")
 *                 .description("This is a replicated volume")
 *                 .build())
 *             .deleteDestinationVolume(true)
 *             .waitForMirror(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceVolume)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * VolumeReplication can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{volume_name}}/{{name}}`
 * 
 * * `{{location}}/{{volume_name}}/{{name}}`
 * 
 * When using the `pulumi import` command, VolumeReplication can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{project}}/{{location}}/{{volume_name}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/volumeReplication:VolumeReplication default {{location}}/{{volume_name}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:netapp/volumeReplication:VolumeReplication")
public class VolumeReplication extends com.pulumi.resources.CustomResource {
    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="deleteDestinationVolume", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteDestinationVolume;

    public Output<Optional<Boolean>> deleteDestinationVolume() {
        return Codegen.optional(this.deleteDestinationVolume);
    }
    /**
     * An description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    @Export(name="destinationVolume", refs={String.class}, tree="[0]")
    private Output<String> destinationVolume;

    /**
     * @return Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    public Output<String> destinationVolume() {
        return this.destinationVolume;
    }
    /**
     * Destination volume parameters.
     * Structure is documented below.
     * 
     */
    @Export(name="destinationVolumeParameters", refs={VolumeReplicationDestinationVolumeParameters.class}, tree="[0]")
    private Output</* @Nullable */ VolumeReplicationDestinationVolumeParameters> destinationVolumeParameters;

    /**
     * @return Destination volume parameters.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VolumeReplicationDestinationVolumeParameters>> destinationVolumeParameters() {
        return Codegen.optional(this.destinationVolumeParameters);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     * 
     */
    @Export(name="forceStopping", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceStopping;

    /**
     * @return Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     * 
     */
    public Output<Optional<Boolean>> forceStopping() {
        return Codegen.optional(this.forceStopping);
    }
    /**
     * Condition of the relationship. Can be one of the following:
     * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
     * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
     * 
     */
    @Export(name="healthy", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> healthy;

    /**
     * @return Condition of the relationship. Can be one of the following:
     * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
     * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
     * 
     */
    public Output<Boolean> healthy() {
        return this.healthy;
    }
    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Name of region for this resource. The resource needs to be created in the region of the destination volume.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Name of region for this resource. The resource needs to be created in the region of the destination volume.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
     * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
     * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
     * currently receives an update. Updated every 5 minutes.
     * 
     */
    @Export(name="mirrorState", refs={String.class}, tree="[0]")
    private Output<String> mirrorState;

    /**
     * @return Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
     * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
     * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
     * currently receives an update. Updated every 5 minutes.
     * 
     */
    public Output<String> mirrorState() {
        return this.mirrorState;
    }
    /**
     * The name of the replication. Needs to be unique per location.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the replication. Needs to be unique per location.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     * 
     */
    @Export(name="replicationEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> replicationEnabled;

    /**
     * @return Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     * 
     */
    public Output<Optional<Boolean>> replicationEnabled() {
        return Codegen.optional(this.replicationEnabled);
    }
    /**
     * Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     * 
     */
    @Export(name="replicationSchedule", refs={String.class}, tree="[0]")
    private Output<String> replicationSchedule;

    /**
     * @return Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     * 
     */
    public Output<String> replicationSchedule() {
        return this.replicationSchedule;
    }
    /**
     * Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
     * the source or destination volume. For resume and revert and resume operations it is critical to understand
     * which volume is the source volume, since it will overwrite changes done to the destination volume.
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output<String> role;

    /**
     * @return Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
     * the source or destination volume. For resume and revert and resume operations it is critical to understand
     * which volume is the source volume, since it will overwrite changes done to the destination volume.
     * 
     */
    public Output<String> role() {
        return this.role;
    }
    /**
     * Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    @Export(name="sourceVolume", refs={String.class}, tree="[0]")
    private Output<String> sourceVolume;

    /**
     * @return Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    public Output<String> sourceVolume() {
        return this.sourceVolume;
    }
    /**
     * Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * State details of the replication resource.
     * 
     */
    @Export(name="stateDetails", refs={String.class}, tree="[0]")
    private Output<String> stateDetails;

    /**
     * @return State details of the replication resource.
     * 
     */
    public Output<String> stateDetails() {
        return this.stateDetails;
    }
    /**
     * Replication transfer statistics. All statistics are updated every 5 minutes.
     * Structure is documented below.
     * 
     */
    @Export(name="transferStats", refs={List.class,VolumeReplicationTransferStat.class}, tree="[0,1]")
    private Output<List<VolumeReplicationTransferStat>> transferStats;

    /**
     * @return Replication transfer statistics. All statistics are updated every 5 minutes.
     * Structure is documented below.
     * 
     */
    public Output<List<VolumeReplicationTransferStat>> transferStats() {
        return this.transferStats;
    }
    /**
     * The name of the existing source volume.
     * 
     */
    @Export(name="volumeName", refs={String.class}, tree="[0]")
    private Output<String> volumeName;

    /**
     * @return The name of the existing source volume.
     * 
     */
    public Output<String> volumeName() {
        return this.volumeName;
    }
    @Export(name="waitForMirror", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitForMirror;

    public Output<Optional<Boolean>> waitForMirror() {
        return Codegen.optional(this.waitForMirror);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VolumeReplication(java.lang.String name) {
        this(name, VolumeReplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VolumeReplication(java.lang.String name, VolumeReplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VolumeReplication(java.lang.String name, VolumeReplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/volumeReplication:VolumeReplication", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VolumeReplication(java.lang.String name, Output<java.lang.String> id, @Nullable VolumeReplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/volumeReplication:VolumeReplication", name, state, makeResourceOptions(options, id), false);
    }

    private static VolumeReplicationArgs makeArgs(VolumeReplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VolumeReplicationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VolumeReplication get(java.lang.String name, Output<java.lang.String> id, @Nullable VolumeReplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VolumeReplication(name, id, state, options);
    }
}
