// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.networksecurity.outputs.ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance;
import com.pulumi.gcp.networksecurity.outputs.ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerTlsPolicyMtlsPolicyClientValidationCa {
    /**
     * @return Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
     * Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
     * Structure is documented below.
     * 
     */
    private @Nullable ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance certificateProviderInstance;
    /**
     * @return gRPC specific configuration to access the gRPC server to obtain the cert and private key.
     * Structure is documented below.
     * 
     */
    private @Nullable ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint grpcEndpoint;

    private ServerTlsPolicyMtlsPolicyClientValidationCa() {}
    /**
     * @return Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
     * Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
     * Structure is documented below.
     * 
     */
    public Optional<ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance> certificateProviderInstance() {
        return Optional.ofNullable(this.certificateProviderInstance);
    }
    /**
     * @return gRPC specific configuration to access the gRPC server to obtain the cert and private key.
     * Structure is documented below.
     * 
     */
    public Optional<ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint> grpcEndpoint() {
        return Optional.ofNullable(this.grpcEndpoint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerTlsPolicyMtlsPolicyClientValidationCa defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance certificateProviderInstance;
        private @Nullable ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint grpcEndpoint;
        public Builder() {}
        public Builder(ServerTlsPolicyMtlsPolicyClientValidationCa defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateProviderInstance = defaults.certificateProviderInstance;
    	      this.grpcEndpoint = defaults.grpcEndpoint;
        }

        @CustomType.Setter
        public Builder certificateProviderInstance(@Nullable ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance certificateProviderInstance) {
            this.certificateProviderInstance = certificateProviderInstance;
            return this;
        }
        @CustomType.Setter
        public Builder grpcEndpoint(@Nullable ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint grpcEndpoint) {
            this.grpcEndpoint = grpcEndpoint;
            return this;
        }
        public ServerTlsPolicyMtlsPolicyClientValidationCa build() {
            final var o = new ServerTlsPolicyMtlsPolicyClientValidationCa();
            o.certificateProviderInstance = certificateProviderInstance;
            o.grpcEndpoint = grpcEndpoint;
            return o;
        }
    }
}
