// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.tpu.V2VmArgs;
import com.pulumi.gcp.tpu.inputs.V2VmState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### Tpu V2 Vm Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.tpu.TpuFunctions;
 * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
 * import com.pulumi.gcp.tpu.V2Vm;
 * import com.pulumi.gcp.tpu.V2VmArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var available = TpuFunctions.getV2RuntimeVersions();
 * 
 *         var tpu = new V2Vm(&#34;tpu&#34;, V2VmArgs.builder()        
 *             .zone(&#34;us-central1-c&#34;)
 *             .runtimeVersion(&#34;tpu-vm-tf-2.13.0&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Tpu V2 Vm Full
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.tpu.TpuFunctions;
 * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
 * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
 * import com.pulumi.gcp.tpu.V2Vm;
 * import com.pulumi.gcp.tpu.V2VmArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var availableV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions();
 * 
 *         final var availableV2AcceleratorTypes = TpuFunctions.getV2AcceleratorTypes();
 * 
 *         var tpu = new V2Vm(&#34;tpu&#34;, V2VmArgs.builder()        
 *             .zone(&#34;us-central1-c&#34;)
 *             .description(&#34;Text description of the TPU.&#34;)
 *             .runtimeVersion(&#34;tpu-vm-tf-2.13.0&#34;)
 *             .acceleratorType(&#34;v2-8&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Vm can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:tpu/v2Vm:V2Vm default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:tpu/v2Vm:V2Vm default {{project}}/{{zone}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:tpu/v2Vm:V2Vm default {{zone}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:tpu/v2Vm:V2Vm default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:tpu/v2Vm:V2Vm")
public class V2Vm extends com.pulumi.resources.CustomResource {
    /**
     * TPU accelerator type for the TPU. If not specified, this defaults to &#39;v2-8&#39;.
     * 
     */
    @Export(name="acceleratorType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> acceleratorType;

    /**
     * @return TPU accelerator type for the TPU. If not specified, this defaults to &#39;v2-8&#39;.
     * 
     */
    public Output<Optional<String>> acceleratorType() {
        return Codegen.optional(this.acceleratorType);
    }
    /**
     * Text description of the TPU.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Text description of the TPU.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The immutable name of the TPU.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The immutable name of the TPU.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Runtime version for the TPU.
     * 
     * ***
     * 
     */
    @Export(name="runtimeVersion", refs={String.class}, tree="[0]")
    private Output<String> runtimeVersion;

    /**
     * @return Runtime version for the TPU.
     * 
     * ***
     * 
     */
    public Output<String> runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public V2Vm(String name) {
        this(name, V2VmArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public V2Vm(String name, V2VmArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public V2Vm(String name, V2VmArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:tpu/v2Vm:V2Vm", name, args == null ? V2VmArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private V2Vm(String name, Output<String> id, @Nullable V2VmState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:tpu/v2Vm:V2Vm", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static V2Vm get(String name, Output<String> id, @Nullable V2VmState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new V2Vm(name, id, state, options);
    }
}
