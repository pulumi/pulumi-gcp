// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.tpu.V2VmArgs;
import com.pulumi.gcp.tpu.inputs.V2VmState;
import com.pulumi.gcp.tpu.outputs.V2VmAcceleratorConfig;
import com.pulumi.gcp.tpu.outputs.V2VmDataDisk;
import com.pulumi.gcp.tpu.outputs.V2VmNetworkConfig;
import com.pulumi.gcp.tpu.outputs.V2VmNetworkEndpoint;
import com.pulumi.gcp.tpu.outputs.V2VmSchedulingConfig;
import com.pulumi.gcp.tpu.outputs.V2VmServiceAccount;
import com.pulumi.gcp.tpu.outputs.V2VmShieldedInstanceConfig;
import com.pulumi.gcp.tpu.outputs.V2VmSymptom;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Vm can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{zone}}/nodes/{{name}}`
 * 
 * * `{{project}}/{{zone}}/{{name}}`
 * 
 * * `{{zone}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Vm can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:tpu/v2Vm:V2Vm default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:tpu/v2Vm:V2Vm default {{project}}/{{zone}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:tpu/v2Vm:V2Vm default {{zone}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:tpu/v2Vm:V2Vm default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:tpu/v2Vm:V2Vm")
public class V2Vm extends com.pulumi.resources.CustomResource {
    /**
     * The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
     * as `accelerator_type`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * Structure is documented below.
     * 
     */
    @Export(name="acceleratorConfig", refs={V2VmAcceleratorConfig.class}, tree="[0]")
    private Output<V2VmAcceleratorConfig> acceleratorConfig;

    /**
     * @return The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
     * as `accelerator_type`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * Structure is documented below.
     * 
     */
    public Output<V2VmAcceleratorConfig> acceleratorConfig() {
        return this.acceleratorConfig;
    }
    /**
     * TPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
     * `accelerator_config`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * 
     */
    @Export(name="acceleratorType", refs={String.class}, tree="[0]")
    private Output<String> acceleratorType;

    /**
     * @return TPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
     * `accelerator_config`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * 
     */
    public Output<String> acceleratorType() {
        return this.acceleratorType;
    }
    /**
     * The API version that created this Node.
     * 
     */
    @Export(name="apiVersion", refs={String.class}, tree="[0]")
    private Output<String> apiVersion;

    /**
     * @return The API version that created this Node.
     * 
     */
    public Output<String> apiVersion() {
        return this.apiVersion;
    }
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
     * be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
     * block would be wasteful (a node can only consume one IP address). Errors will occur if the
     * CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
     * with any subnetworks in the user&#39;s provided network, or the provided network is peered with
     * another network that is using that CIDR block.
     * 
     */
    @Export(name="cidrBlock", refs={String.class}, tree="[0]")
    private Output<String> cidrBlock;

    /**
     * @return The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
     * be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
     * block would be wasteful (a node can only consume one IP address). Errors will occur if the
     * CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
     * with any subnetworks in the user&#39;s provided network, or the provided network is peered with
     * another network that is using that CIDR block.
     * 
     */
    public Output<String> cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * The additional data disks for the Node.
     * Structure is documented below.
     * 
     */
    @Export(name="dataDisks", refs={List.class,V2VmDataDisk.class}, tree="[0,1]")
    private Output</* @Nullable */ List<V2VmDataDisk>> dataDisks;

    /**
     * @return The additional data disks for the Node.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<V2VmDataDisk>>> dataDisks() {
        return Codegen.optional(this.dataDisks);
    }
    /**
     * Text description of the TPU.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Text description of the TPU.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The health status of the TPU node.
     * 
     */
    @Export(name="health", refs={String.class}, tree="[0]")
    private Output<String> health;

    /**
     * @return The health status of the TPU node.
     * 
     */
    public Output<String> health() {
        return this.health;
    }
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    @Export(name="healthDescription", refs={String.class}, tree="[0]")
    private Output<String> healthDescription;

    /**
     * @return If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    public Output<String> healthDescription() {
        return this.healthDescription;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     * 
     */
    @Export(name="metadata", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> metadata;

    /**
     * @return Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     * 
     */
    public Output<Optional<Map<String,String>>> metadata() {
        return Codegen.optional(this.metadata);
    }
    /**
     * Whether the Node belongs to a Multislice group.
     * 
     */
    @Export(name="multisliceNode", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> multisliceNode;

    /**
     * @return Whether the Node belongs to a Multislice group.
     * 
     */
    public Output<Boolean> multisliceNode() {
        return this.multisliceNode;
    }
    /**
     * The immutable name of the TPU.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The immutable name of the TPU.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Network configurations for the TPU node.
     * Structure is documented below.
     * 
     */
    @Export(name="networkConfig", refs={V2VmNetworkConfig.class}, tree="[0]")
    private Output<V2VmNetworkConfig> networkConfig;

    /**
     * @return Network configurations for the TPU node.
     * Structure is documented below.
     * 
     */
    public Output<V2VmNetworkConfig> networkConfig() {
        return this.networkConfig;
    }
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that
     * runtime clients of the node reach out to the 0th entry in this map first.
     * Structure is documented below.
     * 
     */
    @Export(name="networkEndpoints", refs={List.class,V2VmNetworkEndpoint.class}, tree="[0,1]")
    private Output<List<V2VmNetworkEndpoint>> networkEndpoints;

    /**
     * @return The network endpoints where TPU workers can be accessed and sent work. It is recommended that
     * runtime clients of the node reach out to the 0th entry in this map first.
     * Structure is documented below.
     * 
     */
    public Output<List<V2VmNetworkEndpoint>> networkEndpoints() {
        return this.networkEndpoints;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The qualified name of the QueuedResource that requested this Node.
     * 
     */
    @Export(name="queuedResource", refs={String.class}, tree="[0]")
    private Output<String> queuedResource;

    /**
     * @return The qualified name of the QueuedResource that requested this Node.
     * 
     */
    public Output<String> queuedResource() {
        return this.queuedResource;
    }
    /**
     * Runtime version for the TPU.
     * 
     */
    @Export(name="runtimeVersion", refs={String.class}, tree="[0]")
    private Output<String> runtimeVersion;

    /**
     * @return Runtime version for the TPU.
     * 
     */
    public Output<String> runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * The scheduling options for this node.
     * Structure is documented below.
     * 
     */
    @Export(name="schedulingConfig", refs={V2VmSchedulingConfig.class}, tree="[0]")
    private Output</* @Nullable */ V2VmSchedulingConfig> schedulingConfig;

    /**
     * @return The scheduling options for this node.
     * Structure is documented below.
     * 
     */
    public Output<Optional<V2VmSchedulingConfig>> schedulingConfig() {
        return Codegen.optional(this.schedulingConfig);
    }
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
     * specified, the default compute service account will be used.
     * Structure is documented below.
     * 
     */
    @Export(name="serviceAccount", refs={V2VmServiceAccount.class}, tree="[0]")
    private Output<V2VmServiceAccount> serviceAccount;

    /**
     * @return The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
     * specified, the default compute service account will be used.
     * Structure is documented below.
     * 
     */
    public Output<V2VmServiceAccount> serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * Shielded Instance options.
     * Structure is documented below.
     * 
     */
    @Export(name="shieldedInstanceConfig", refs={V2VmShieldedInstanceConfig.class}, tree="[0]")
    private Output</* @Nullable */ V2VmShieldedInstanceConfig> shieldedInstanceConfig;

    /**
     * @return Shielded Instance options.
     * Structure is documented below.
     * 
     */
    public Output<Optional<V2VmShieldedInstanceConfig>> shieldedInstanceConfig() {
        return Codegen.optional(this.shieldedInstanceConfig);
    }
    /**
     * The current state for the TPU Node.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state for the TPU Node.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The Symptoms that have occurred to the TPU Node.
     * Structure is documented below.
     * 
     */
    @Export(name="symptoms", refs={List.class,V2VmSymptom.class}, tree="[0,1]")
    private Output<List<V2VmSymptom>> symptoms;

    /**
     * @return The Symptoms that have occurred to the TPU Node.
     * Structure is documented below.
     * 
     */
    public Output<List<V2VmSymptom>> symptoms() {
        return this.symptoms;
    }
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public V2Vm(java.lang.String name) {
        this(name, V2VmArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public V2Vm(java.lang.String name, V2VmArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public V2Vm(java.lang.String name, V2VmArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:tpu/v2Vm:V2Vm", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private V2Vm(java.lang.String name, Output<java.lang.String> id, @Nullable V2VmState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:tpu/v2Vm:V2Vm", name, state, makeResourceOptions(options, id), false);
    }

    private static V2VmArgs makeArgs(V2VmArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? V2VmArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static V2Vm get(java.lang.String name, Output<java.lang.String> id, @Nullable V2VmState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new V2Vm(name, id, state, options);
    }
}
