// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AutoscalingPolicyBasicAlgorithmYarnConfig {
    /**
     * @return Timeout for YARN graceful decommissioning of Node Managers. Specifies the
     * duration to wait for jobs to complete before forcefully removing workers
     * (and potentially interrupting jobs). Only applicable to downscaling operations.
     * Bounds: [0s, 1d].
     * 
     */
    private final String gracefulDecommissionTimeout;
    /**
     * @return Fraction of average pending memory in the last cooldown period for which to
     * remove workers. A scale-down factor of 1 will result in scaling down so that there
     * is no available memory remaining after the update (more aggressive scaling).
     * A scale-down factor of 0 disables removing workers, which can be beneficial for
     * autoscaling a single job.
     * Bounds: [0.0, 1.0].
     * 
     */
    private final Double scaleDownFactor;
    /**
     * @return Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
     * For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
     * recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
     * means the autoscaler will scale down on any recommended change.
     * Bounds: [0.0, 1.0]. Default: 0.0.
     * 
     */
    private final @Nullable Double scaleDownMinWorkerFraction;
    /**
     * @return Fraction of average pending memory in the last cooldown period for which to
     * add workers. A scale-up factor of 1.0 will result in scaling up so that there
     * is no pending memory remaining after the update (more aggressive scaling).
     * A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
     * (less aggressive scaling).
     * Bounds: [0.0, 1.0].
     * 
     */
    private final Double scaleUpFactor;
    /**
     * @return Minimum scale-up threshold as a fraction of total cluster size before scaling
     * occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
     * must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
     * 0 means the autoscaler will scale up on any recommended change.
     * Bounds: [0.0, 1.0]. Default: 0.0.
     * 
     */
    private final @Nullable Double scaleUpMinWorkerFraction;

    @CustomType.Constructor
    private AutoscalingPolicyBasicAlgorithmYarnConfig(
        @CustomType.Parameter("gracefulDecommissionTimeout") String gracefulDecommissionTimeout,
        @CustomType.Parameter("scaleDownFactor") Double scaleDownFactor,
        @CustomType.Parameter("scaleDownMinWorkerFraction") @Nullable Double scaleDownMinWorkerFraction,
        @CustomType.Parameter("scaleUpFactor") Double scaleUpFactor,
        @CustomType.Parameter("scaleUpMinWorkerFraction") @Nullable Double scaleUpMinWorkerFraction) {
        this.gracefulDecommissionTimeout = gracefulDecommissionTimeout;
        this.scaleDownFactor = scaleDownFactor;
        this.scaleDownMinWorkerFraction = scaleDownMinWorkerFraction;
        this.scaleUpFactor = scaleUpFactor;
        this.scaleUpMinWorkerFraction = scaleUpMinWorkerFraction;
    }

    /**
     * @return Timeout for YARN graceful decommissioning of Node Managers. Specifies the
     * duration to wait for jobs to complete before forcefully removing workers
     * (and potentially interrupting jobs). Only applicable to downscaling operations.
     * Bounds: [0s, 1d].
     * 
     */
    public String gracefulDecommissionTimeout() {
        return this.gracefulDecommissionTimeout;
    }
    /**
     * @return Fraction of average pending memory in the last cooldown period for which to
     * remove workers. A scale-down factor of 1 will result in scaling down so that there
     * is no available memory remaining after the update (more aggressive scaling).
     * A scale-down factor of 0 disables removing workers, which can be beneficial for
     * autoscaling a single job.
     * Bounds: [0.0, 1.0].
     * 
     */
    public Double scaleDownFactor() {
        return this.scaleDownFactor;
    }
    /**
     * @return Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
     * For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
     * recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
     * means the autoscaler will scale down on any recommended change.
     * Bounds: [0.0, 1.0]. Default: 0.0.
     * 
     */
    public Optional<Double> scaleDownMinWorkerFraction() {
        return Optional.ofNullable(this.scaleDownMinWorkerFraction);
    }
    /**
     * @return Fraction of average pending memory in the last cooldown period for which to
     * add workers. A scale-up factor of 1.0 will result in scaling up so that there
     * is no pending memory remaining after the update (more aggressive scaling).
     * A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
     * (less aggressive scaling).
     * Bounds: [0.0, 1.0].
     * 
     */
    public Double scaleUpFactor() {
        return this.scaleUpFactor;
    }
    /**
     * @return Minimum scale-up threshold as a fraction of total cluster size before scaling
     * occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
     * must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
     * 0 means the autoscaler will scale up on any recommended change.
     * Bounds: [0.0, 1.0]. Default: 0.0.
     * 
     */
    public Optional<Double> scaleUpMinWorkerFraction() {
        return Optional.ofNullable(this.scaleUpMinWorkerFraction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscalingPolicyBasicAlgorithmYarnConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String gracefulDecommissionTimeout;
        private Double scaleDownFactor;
        private @Nullable Double scaleDownMinWorkerFraction;
        private Double scaleUpFactor;
        private @Nullable Double scaleUpMinWorkerFraction;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoscalingPolicyBasicAlgorithmYarnConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gracefulDecommissionTimeout = defaults.gracefulDecommissionTimeout;
    	      this.scaleDownFactor = defaults.scaleDownFactor;
    	      this.scaleDownMinWorkerFraction = defaults.scaleDownMinWorkerFraction;
    	      this.scaleUpFactor = defaults.scaleUpFactor;
    	      this.scaleUpMinWorkerFraction = defaults.scaleUpMinWorkerFraction;
        }

        public Builder gracefulDecommissionTimeout(String gracefulDecommissionTimeout) {
            this.gracefulDecommissionTimeout = Objects.requireNonNull(gracefulDecommissionTimeout);
            return this;
        }
        public Builder scaleDownFactor(Double scaleDownFactor) {
            this.scaleDownFactor = Objects.requireNonNull(scaleDownFactor);
            return this;
        }
        public Builder scaleDownMinWorkerFraction(@Nullable Double scaleDownMinWorkerFraction) {
            this.scaleDownMinWorkerFraction = scaleDownMinWorkerFraction;
            return this;
        }
        public Builder scaleUpFactor(Double scaleUpFactor) {
            this.scaleUpFactor = Objects.requireNonNull(scaleUpFactor);
            return this;
        }
        public Builder scaleUpMinWorkerFraction(@Nullable Double scaleUpMinWorkerFraction) {
            this.scaleUpMinWorkerFraction = scaleUpMinWorkerFraction;
            return this;
        }        public AutoscalingPolicyBasicAlgorithmYarnConfig build() {
            return new AutoscalingPolicyBasicAlgorithmYarnConfig(gracefulDecommissionTimeout, scaleDownFactor, scaleDownMinWorkerFraction, scaleUpFactor, scaleUpMinWorkerFraction);
        }
    }
}
