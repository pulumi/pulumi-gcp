// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs Empty = new AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs();

    /**
     * (Output)
     * The domain the record pertains to, e.g. `foo.bar.com.`.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return (Output)
     * The domain the record pertains to, e.g. `foo.bar.com.`.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * (Output)
     * The data of the record. The meaning of the value depends on record type:
     * - A and AAAA: IP addresses for the domain.
     * - CNAME: Another domain to check for records.
     * - TXT: Arbitrary text strings associated with the domain. App Hosting
     *   uses TXT records to determine which Firebase projects have
     *   permission to act on the domain&#39;s behalf.
     * - CAA: The record&#39;s flags, tag, and value, e.g. `0 issue &#34;pki.goog&#34;`.
     * 
     */
    @Import(name="rdata")
    private @Nullable Output<String> rdata;

    /**
     * @return (Output)
     * The data of the record. The meaning of the value depends on record type:
     * - A and AAAA: IP addresses for the domain.
     * - CNAME: Another domain to check for records.
     * - TXT: Arbitrary text strings associated with the domain. App Hosting
     *   uses TXT records to determine which Firebase projects have
     *   permission to act on the domain&#39;s behalf.
     * - CAA: The record&#39;s flags, tag, and value, e.g. `0 issue &#34;pki.goog&#34;`.
     * 
     */
    public Optional<Output<String>> rdata() {
        return Optional.ofNullable(this.rdata);
    }

    /**
     * (Output)
     * An enum that indicates which state(s) this DNS record applies to. Populated
     * for all records with an `ADD` or `REMOVE` required action.
     * 
     */
    @Import(name="relevantStates")
    private @Nullable Output<List<String>> relevantStates;

    /**
     * @return (Output)
     * An enum that indicates which state(s) this DNS record applies to. Populated
     * for all records with an `ADD` or `REMOVE` required action.
     * 
     */
    public Optional<Output<List<String>>> relevantStates() {
        return Optional.ofNullable(this.relevantStates);
    }

    /**
     * (Output)
     * An enum that indicates the a required action for this record. Populated
     * when the record is part of a required change in a  `DnsUpdates`
     * `discovered` or `desired` record set.
     * Possible values:
     * NONE
     * ADD
     * REMOVE
     * 
     */
    @Import(name="requiredAction")
    private @Nullable Output<String> requiredAction;

    /**
     * @return (Output)
     * An enum that indicates the a required action for this record. Populated
     * when the record is part of a required change in a  `DnsUpdates`
     * `discovered` or `desired` record set.
     * Possible values:
     * NONE
     * ADD
     * REMOVE
     * 
     */
    public Optional<Output<String>> requiredAction() {
        return Optional.ofNullable(this.requiredAction);
    }

    /**
     * (Output)
     * The record&#39;s type, which determines what data the record contains.
     * Possible values:
     * A
     * CNAME
     * TXT
     * AAAA
     * CAA
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Output)
     * The record&#39;s type, which determines what data the record contains.
     * Possible values:
     * A
     * CNAME
     * TXT
     * AAAA
     * CAA
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs() {}

    private AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs(AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs $) {
        this.domainName = $.domainName;
        this.rdata = $.rdata;
        this.relevantStates = $.relevantStates;
        this.requiredAction = $.requiredAction;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs $;

        public Builder() {
            $ = new AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs();
        }

        public Builder(AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs defaults) {
            $ = new AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName (Output)
         * The domain the record pertains to, e.g. `foo.bar.com.`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName (Output)
         * The domain the record pertains to, e.g. `foo.bar.com.`.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param rdata (Output)
         * The data of the record. The meaning of the value depends on record type:
         * - A and AAAA: IP addresses for the domain.
         * - CNAME: Another domain to check for records.
         * - TXT: Arbitrary text strings associated with the domain. App Hosting
         *   uses TXT records to determine which Firebase projects have
         *   permission to act on the domain&#39;s behalf.
         * - CAA: The record&#39;s flags, tag, and value, e.g. `0 issue &#34;pki.goog&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder rdata(@Nullable Output<String> rdata) {
            $.rdata = rdata;
            return this;
        }

        /**
         * @param rdata (Output)
         * The data of the record. The meaning of the value depends on record type:
         * - A and AAAA: IP addresses for the domain.
         * - CNAME: Another domain to check for records.
         * - TXT: Arbitrary text strings associated with the domain. App Hosting
         *   uses TXT records to determine which Firebase projects have
         *   permission to act on the domain&#39;s behalf.
         * - CAA: The record&#39;s flags, tag, and value, e.g. `0 issue &#34;pki.goog&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder rdata(String rdata) {
            return rdata(Output.of(rdata));
        }

        /**
         * @param relevantStates (Output)
         * An enum that indicates which state(s) this DNS record applies to. Populated
         * for all records with an `ADD` or `REMOVE` required action.
         * 
         * @return builder
         * 
         */
        public Builder relevantStates(@Nullable Output<List<String>> relevantStates) {
            $.relevantStates = relevantStates;
            return this;
        }

        /**
         * @param relevantStates (Output)
         * An enum that indicates which state(s) this DNS record applies to. Populated
         * for all records with an `ADD` or `REMOVE` required action.
         * 
         * @return builder
         * 
         */
        public Builder relevantStates(List<String> relevantStates) {
            return relevantStates(Output.of(relevantStates));
        }

        /**
         * @param relevantStates (Output)
         * An enum that indicates which state(s) this DNS record applies to. Populated
         * for all records with an `ADD` or `REMOVE` required action.
         * 
         * @return builder
         * 
         */
        public Builder relevantStates(String... relevantStates) {
            return relevantStates(List.of(relevantStates));
        }

        /**
         * @param requiredAction (Output)
         * An enum that indicates the a required action for this record. Populated
         * when the record is part of a required change in a  `DnsUpdates`
         * `discovered` or `desired` record set.
         * Possible values:
         * NONE
         * ADD
         * REMOVE
         * 
         * @return builder
         * 
         */
        public Builder requiredAction(@Nullable Output<String> requiredAction) {
            $.requiredAction = requiredAction;
            return this;
        }

        /**
         * @param requiredAction (Output)
         * An enum that indicates the a required action for this record. Populated
         * when the record is part of a required change in a  `DnsUpdates`
         * `discovered` or `desired` record set.
         * Possible values:
         * NONE
         * ADD
         * REMOVE
         * 
         * @return builder
         * 
         */
        public Builder requiredAction(String requiredAction) {
            return requiredAction(Output.of(requiredAction));
        }

        /**
         * @param type (Output)
         * The record&#39;s type, which determines what data the record contains.
         * Possible values:
         * A
         * CNAME
         * TXT
         * AAAA
         * CAA
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Output)
         * The record&#39;s type, which determines what data the record contains.
         * Possible values:
         * A
         * CNAME
         * TXT
         * AAAA
         * CAA
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AppHostingDomainCustomDomainStatusRequiredDnsUpdateDiscoveredRecordArgs build() {
            return $;
        }
    }

}
