// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.GetDiskDiskEncryptionKey;
import com.pulumi.gcp.compute.outputs.GetDiskSourceImageEncryptionKey;
import com.pulumi.gcp.compute.outputs.GetDiskSourceSnapshotEncryptionKey;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiskResult {
    private final String creationTimestamp;
    private final String description;
    private final List<GetDiskDiskEncryptionKey> diskEncryptionKeys;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String image;
    private final String interface_;
    private final String labelFingerprint;
    /**
     * @return A map of labels applied to this disk.
     * 
     */
    private final Map<String,String> labels;
    private final String lastAttachTimestamp;
    private final String lastDetachTimestamp;
    private final Boolean multiWriter;
    private final String name;
    private final Integer physicalBlockSizeBytes;
    private final @Nullable String project;
    private final Integer provisionedIops;
    private final List<String> resourcePolicies;
    /**
     * @return The URI of the created resource.
     * 
     */
    private final String selfLink;
    private final Integer size;
    private final String snapshot;
    private final List<GetDiskSourceImageEncryptionKey> sourceImageEncryptionKeys;
    private final String sourceImageId;
    private final List<GetDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys;
    private final String sourceSnapshotId;
    private final String type;
    private final List<String> users;
    private final @Nullable String zone;

    @CustomType.Constructor
    private GetDiskResult(
        @CustomType.Parameter("creationTimestamp") String creationTimestamp,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("diskEncryptionKeys") List<GetDiskDiskEncryptionKey> diskEncryptionKeys,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("image") String image,
        @CustomType.Parameter("interface") String interface_,
        @CustomType.Parameter("labelFingerprint") String labelFingerprint,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("lastAttachTimestamp") String lastAttachTimestamp,
        @CustomType.Parameter("lastDetachTimestamp") String lastDetachTimestamp,
        @CustomType.Parameter("multiWriter") Boolean multiWriter,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("physicalBlockSizeBytes") Integer physicalBlockSizeBytes,
        @CustomType.Parameter("project") @Nullable String project,
        @CustomType.Parameter("provisionedIops") Integer provisionedIops,
        @CustomType.Parameter("resourcePolicies") List<String> resourcePolicies,
        @CustomType.Parameter("selfLink") String selfLink,
        @CustomType.Parameter("size") Integer size,
        @CustomType.Parameter("snapshot") String snapshot,
        @CustomType.Parameter("sourceImageEncryptionKeys") List<GetDiskSourceImageEncryptionKey> sourceImageEncryptionKeys,
        @CustomType.Parameter("sourceImageId") String sourceImageId,
        @CustomType.Parameter("sourceSnapshotEncryptionKeys") List<GetDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys,
        @CustomType.Parameter("sourceSnapshotId") String sourceSnapshotId,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("users") List<String> users,
        @CustomType.Parameter("zone") @Nullable String zone) {
        this.creationTimestamp = creationTimestamp;
        this.description = description;
        this.diskEncryptionKeys = diskEncryptionKeys;
        this.id = id;
        this.image = image;
        this.interface_ = interface_;
        this.labelFingerprint = labelFingerprint;
        this.labels = labels;
        this.lastAttachTimestamp = lastAttachTimestamp;
        this.lastDetachTimestamp = lastDetachTimestamp;
        this.multiWriter = multiWriter;
        this.name = name;
        this.physicalBlockSizeBytes = physicalBlockSizeBytes;
        this.project = project;
        this.provisionedIops = provisionedIops;
        this.resourcePolicies = resourcePolicies;
        this.selfLink = selfLink;
        this.size = size;
        this.snapshot = snapshot;
        this.sourceImageEncryptionKeys = sourceImageEncryptionKeys;
        this.sourceImageId = sourceImageId;
        this.sourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
        this.sourceSnapshotId = sourceSnapshotId;
        this.type = type;
        this.users = users;
        this.zone = zone;
    }

    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public List<GetDiskDiskEncryptionKey> diskEncryptionKeys() {
        return this.diskEncryptionKeys;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String image() {
        return this.image;
    }
    public String interface_() {
        return this.interface_;
    }
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    /**
     * @return A map of labels applied to this disk.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    public String lastAttachTimestamp() {
        return this.lastAttachTimestamp;
    }
    public String lastDetachTimestamp() {
        return this.lastDetachTimestamp;
    }
    public Boolean multiWriter() {
        return this.multiWriter;
    }
    public String name() {
        return this.name;
    }
    public Integer physicalBlockSizeBytes() {
        return this.physicalBlockSizeBytes;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Integer provisionedIops() {
        return this.provisionedIops;
    }
    public List<String> resourcePolicies() {
        return this.resourcePolicies;
    }
    /**
     * @return The URI of the created resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    public Integer size() {
        return this.size;
    }
    public String snapshot() {
        return this.snapshot;
    }
    public List<GetDiskSourceImageEncryptionKey> sourceImageEncryptionKeys() {
        return this.sourceImageEncryptionKeys;
    }
    public String sourceImageId() {
        return this.sourceImageId;
    }
    public List<GetDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys() {
        return this.sourceSnapshotEncryptionKeys;
    }
    public String sourceSnapshotId() {
        return this.sourceSnapshotId;
    }
    public String type() {
        return this.type;
    }
    public List<String> users() {
        return this.users;
    }
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String creationTimestamp;
        private String description;
        private List<GetDiskDiskEncryptionKey> diskEncryptionKeys;
        private String id;
        private String image;
        private String interface_;
        private String labelFingerprint;
        private Map<String,String> labels;
        private String lastAttachTimestamp;
        private String lastDetachTimestamp;
        private Boolean multiWriter;
        private String name;
        private Integer physicalBlockSizeBytes;
        private @Nullable String project;
        private Integer provisionedIops;
        private List<String> resourcePolicies;
        private String selfLink;
        private Integer size;
        private String snapshot;
        private List<GetDiskSourceImageEncryptionKey> sourceImageEncryptionKeys;
        private String sourceImageId;
        private List<GetDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys;
        private String sourceSnapshotId;
        private String type;
        private List<String> users;
        private @Nullable String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskEncryptionKeys = defaults.diskEncryptionKeys;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.interface_ = defaults.interface_;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.lastAttachTimestamp = defaults.lastAttachTimestamp;
    	      this.lastDetachTimestamp = defaults.lastDetachTimestamp;
    	      this.multiWriter = defaults.multiWriter;
    	      this.name = defaults.name;
    	      this.physicalBlockSizeBytes = defaults.physicalBlockSizeBytes;
    	      this.project = defaults.project;
    	      this.provisionedIops = defaults.provisionedIops;
    	      this.resourcePolicies = defaults.resourcePolicies;
    	      this.selfLink = defaults.selfLink;
    	      this.size = defaults.size;
    	      this.snapshot = defaults.snapshot;
    	      this.sourceImageEncryptionKeys = defaults.sourceImageEncryptionKeys;
    	      this.sourceImageId = defaults.sourceImageId;
    	      this.sourceSnapshotEncryptionKeys = defaults.sourceSnapshotEncryptionKeys;
    	      this.sourceSnapshotId = defaults.sourceSnapshotId;
    	      this.type = defaults.type;
    	      this.users = defaults.users;
    	      this.zone = defaults.zone;
        }

        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder diskEncryptionKeys(List<GetDiskDiskEncryptionKey> diskEncryptionKeys) {
            this.diskEncryptionKeys = Objects.requireNonNull(diskEncryptionKeys);
            return this;
        }
        public Builder diskEncryptionKeys(GetDiskDiskEncryptionKey... diskEncryptionKeys) {
            return diskEncryptionKeys(List.of(diskEncryptionKeys));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public Builder interface_(String interface_) {
            this.interface_ = Objects.requireNonNull(interface_);
            return this;
        }
        public Builder labelFingerprint(String labelFingerprint) {
            this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
            return this;
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder lastAttachTimestamp(String lastAttachTimestamp) {
            this.lastAttachTimestamp = Objects.requireNonNull(lastAttachTimestamp);
            return this;
        }
        public Builder lastDetachTimestamp(String lastDetachTimestamp) {
            this.lastDetachTimestamp = Objects.requireNonNull(lastDetachTimestamp);
            return this;
        }
        public Builder multiWriter(Boolean multiWriter) {
            this.multiWriter = Objects.requireNonNull(multiWriter);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder physicalBlockSizeBytes(Integer physicalBlockSizeBytes) {
            this.physicalBlockSizeBytes = Objects.requireNonNull(physicalBlockSizeBytes);
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        public Builder provisionedIops(Integer provisionedIops) {
            this.provisionedIops = Objects.requireNonNull(provisionedIops);
            return this;
        }
        public Builder resourcePolicies(List<String> resourcePolicies) {
            this.resourcePolicies = Objects.requireNonNull(resourcePolicies);
            return this;
        }
        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder snapshot(String snapshot) {
            this.snapshot = Objects.requireNonNull(snapshot);
            return this;
        }
        public Builder sourceImageEncryptionKeys(List<GetDiskSourceImageEncryptionKey> sourceImageEncryptionKeys) {
            this.sourceImageEncryptionKeys = Objects.requireNonNull(sourceImageEncryptionKeys);
            return this;
        }
        public Builder sourceImageEncryptionKeys(GetDiskSourceImageEncryptionKey... sourceImageEncryptionKeys) {
            return sourceImageEncryptionKeys(List.of(sourceImageEncryptionKeys));
        }
        public Builder sourceImageId(String sourceImageId) {
            this.sourceImageId = Objects.requireNonNull(sourceImageId);
            return this;
        }
        public Builder sourceSnapshotEncryptionKeys(List<GetDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys) {
            this.sourceSnapshotEncryptionKeys = Objects.requireNonNull(sourceSnapshotEncryptionKeys);
            return this;
        }
        public Builder sourceSnapshotEncryptionKeys(GetDiskSourceSnapshotEncryptionKey... sourceSnapshotEncryptionKeys) {
            return sourceSnapshotEncryptionKeys(List.of(sourceSnapshotEncryptionKeys));
        }
        public Builder sourceSnapshotId(String sourceSnapshotId) {
            this.sourceSnapshotId = Objects.requireNonNull(sourceSnapshotId);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder users(List<String> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public Builder zone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }        public GetDiskResult build() {
            return new GetDiskResult(creationTimestamp, description, diskEncryptionKeys, id, image, interface_, labelFingerprint, labels, lastAttachTimestamp, lastDetachTimestamp, multiWriter, name, physicalBlockSizeBytes, project, provisionedIops, resourcePolicies, selfLink, size, snapshot, sourceImageEncryptionKeys, sourceImageId, sourceSnapshotEncryptionKeys, sourceSnapshotId, type, users, zone);
        }
    }
}
