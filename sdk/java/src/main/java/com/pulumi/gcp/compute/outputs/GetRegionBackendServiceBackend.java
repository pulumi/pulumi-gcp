// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceBackendCustomMetric;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegionBackendServiceBackend {
    /**
     * @return Specifies the balancing mode for this backend.
     * 
     * See the [Backend Services Overview](https://cloud.google.com/load-balancing/docs/backend-service#balancing-mode)
     * for an explanation of load balancing modes. Default value: &#34;UTILIZATION&#34; Possible values: [&#34;UTILIZATION&#34;, &#34;RATE&#34;, &#34;CONNECTION&#34;, &#34;CUSTOM_METRICS&#34;]
     * 
     */
    private String balancingMode;
    /**
     * @return A multiplier applied to the group&#39;s maximum servicing capacity
     * (based on UTILIZATION, RATE or CONNECTION).
     * 
     * ~&gt;**NOTE**: This field cannot be set for
     * INTERNAL region backend services (default loadBalancingScheme),
     * but is required for non-INTERNAL backend service. The total
     * capacityScaler for all backends must be non-zero.
     * 
     * A setting of 0 means the group is completely drained, offering
     * 0% of its available Capacity. Valid range is [0.0,1.0].
     * 
     */
    private Double capacityScaler;
    /**
     * @return The set of custom metrics that are used for &lt;code&gt;CUSTOM_METRICS&lt;/code&gt; BalancingMode.
     * 
     */
    private List<GetRegionBackendServiceBackendCustomMetric> customMetrics;
    /**
     * @return An optional description of this resource.
     * Provide this property when you create the resource.
     * 
     */
    private String description;
    /**
     * @return This field designates whether this is a failover backend. More
     * than one failover backend can be configured for a given RegionBackendService.
     * 
     */
    private Boolean failover;
    /**
     * @return The fully-qualified URL of an Instance Group or Network Endpoint
     * Group resource. In case of instance group this defines the list
     * of instances that serve traffic. Member virtual machine
     * instances from each instance group must live in the same zone as
     * the instance group itself. No two backends in a backend service
     * are allowed to use same Instance Group resource.
     * 
     * For Network Endpoint Groups this defines list of endpoints. All
     * endpoints of Network Endpoint Group must be hosted on instances
     * located in the same zone as the Network Endpoint Group.
     * 
     * Backend services cannot mix Instance Group and
     * Network Endpoint Group backends.
     * 
     * When the &#39;load_balancing_scheme&#39; is INTERNAL, only instance groups
     * are supported.
     * 
     * Note that you must specify an Instance Group or Network Endpoint
     * Group resource using the fully-qualified URL, rather than a
     * partial URL.
     * 
     */
    private String group;
    /**
     * @return The max number of simultaneous connections for the group. Can
     * be used with either CONNECTION or UTILIZATION balancing modes.
     * Cannot be set for INTERNAL backend services.
     * 
     * For CONNECTION mode, either maxConnections or one
     * of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
     * as appropriate for group type, must be set.
     * 
     */
    private Integer maxConnections;
    /**
     * @return The max number of simultaneous connections that a single backend
     * network endpoint can handle. Cannot be set
     * for INTERNAL backend services.
     * 
     * This is used to calculate the capacity of the group. Can be
     * used in either CONNECTION or UTILIZATION balancing modes. For
     * CONNECTION mode, either maxConnections or
     * maxConnectionsPerEndpoint must be set.
     * 
     */
    private Integer maxConnectionsPerEndpoint;
    /**
     * @return The max number of simultaneous connections that a single
     * backend instance can handle. Cannot be set for INTERNAL backend
     * services.
     * 
     * This is used to calculate the capacity of the group.
     * Can be used in either CONNECTION or UTILIZATION balancing modes.
     * For CONNECTION mode, either maxConnections or
     * maxConnectionsPerInstance must be set.
     * 
     */
    private Integer maxConnectionsPerInstance;
    /**
     * @return The max requests per second (RPS) of the group. Cannot be set
     * for INTERNAL backend services.
     * 
     * Can be used with either RATE or UTILIZATION balancing modes,
     * but required if RATE mode. Either maxRate or one
     * of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
     * group type, must be set.
     * 
     */
    private Integer maxRate;
    /**
     * @return The max requests per second (RPS) that a single backend network
     * endpoint can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerEndpoint must be set. Cannot be set
     * for INTERNAL backend services.
     * 
     */
    private Double maxRatePerEndpoint;
    /**
     * @return The max requests per second (RPS) that a single backend
     * instance can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerInstance must be set. Cannot be set
     * for INTERNAL backend services.
     * 
     */
    private Double maxRatePerInstance;
    /**
     * @return Used when balancingMode is UTILIZATION. This ratio defines the
     * CPU utilization target for the group. Valid range is [0.0, 1.0].
     * Cannot be set for INTERNAL backend services.
     * 
     */
    private Double maxUtilization;

    private GetRegionBackendServiceBackend() {}
    /**
     * @return Specifies the balancing mode for this backend.
     * 
     * See the [Backend Services Overview](https://cloud.google.com/load-balancing/docs/backend-service#balancing-mode)
     * for an explanation of load balancing modes. Default value: &#34;UTILIZATION&#34; Possible values: [&#34;UTILIZATION&#34;, &#34;RATE&#34;, &#34;CONNECTION&#34;, &#34;CUSTOM_METRICS&#34;]
     * 
     */
    public String balancingMode() {
        return this.balancingMode;
    }
    /**
     * @return A multiplier applied to the group&#39;s maximum servicing capacity
     * (based on UTILIZATION, RATE or CONNECTION).
     * 
     * ~&gt;**NOTE**: This field cannot be set for
     * INTERNAL region backend services (default loadBalancingScheme),
     * but is required for non-INTERNAL backend service. The total
     * capacityScaler for all backends must be non-zero.
     * 
     * A setting of 0 means the group is completely drained, offering
     * 0% of its available Capacity. Valid range is [0.0,1.0].
     * 
     */
    public Double capacityScaler() {
        return this.capacityScaler;
    }
    /**
     * @return The set of custom metrics that are used for &lt;code&gt;CUSTOM_METRICS&lt;/code&gt; BalancingMode.
     * 
     */
    public List<GetRegionBackendServiceBackendCustomMetric> customMetrics() {
        return this.customMetrics;
    }
    /**
     * @return An optional description of this resource.
     * Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return This field designates whether this is a failover backend. More
     * than one failover backend can be configured for a given RegionBackendService.
     * 
     */
    public Boolean failover() {
        return this.failover;
    }
    /**
     * @return The fully-qualified URL of an Instance Group or Network Endpoint
     * Group resource. In case of instance group this defines the list
     * of instances that serve traffic. Member virtual machine
     * instances from each instance group must live in the same zone as
     * the instance group itself. No two backends in a backend service
     * are allowed to use same Instance Group resource.
     * 
     * For Network Endpoint Groups this defines list of endpoints. All
     * endpoints of Network Endpoint Group must be hosted on instances
     * located in the same zone as the Network Endpoint Group.
     * 
     * Backend services cannot mix Instance Group and
     * Network Endpoint Group backends.
     * 
     * When the &#39;load_balancing_scheme&#39; is INTERNAL, only instance groups
     * are supported.
     * 
     * Note that you must specify an Instance Group or Network Endpoint
     * Group resource using the fully-qualified URL, rather than a
     * partial URL.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return The max number of simultaneous connections for the group. Can
     * be used with either CONNECTION or UTILIZATION balancing modes.
     * Cannot be set for INTERNAL backend services.
     * 
     * For CONNECTION mode, either maxConnections or one
     * of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
     * as appropriate for group type, must be set.
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return The max number of simultaneous connections that a single backend
     * network endpoint can handle. Cannot be set
     * for INTERNAL backend services.
     * 
     * This is used to calculate the capacity of the group. Can be
     * used in either CONNECTION or UTILIZATION balancing modes. For
     * CONNECTION mode, either maxConnections or
     * maxConnectionsPerEndpoint must be set.
     * 
     */
    public Integer maxConnectionsPerEndpoint() {
        return this.maxConnectionsPerEndpoint;
    }
    /**
     * @return The max number of simultaneous connections that a single
     * backend instance can handle. Cannot be set for INTERNAL backend
     * services.
     * 
     * This is used to calculate the capacity of the group.
     * Can be used in either CONNECTION or UTILIZATION balancing modes.
     * For CONNECTION mode, either maxConnections or
     * maxConnectionsPerInstance must be set.
     * 
     */
    public Integer maxConnectionsPerInstance() {
        return this.maxConnectionsPerInstance;
    }
    /**
     * @return The max requests per second (RPS) of the group. Cannot be set
     * for INTERNAL backend services.
     * 
     * Can be used with either RATE or UTILIZATION balancing modes,
     * but required if RATE mode. Either maxRate or one
     * of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
     * group type, must be set.
     * 
     */
    public Integer maxRate() {
        return this.maxRate;
    }
    /**
     * @return The max requests per second (RPS) that a single backend network
     * endpoint can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerEndpoint must be set. Cannot be set
     * for INTERNAL backend services.
     * 
     */
    public Double maxRatePerEndpoint() {
        return this.maxRatePerEndpoint;
    }
    /**
     * @return The max requests per second (RPS) that a single backend
     * instance can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerInstance must be set. Cannot be set
     * for INTERNAL backend services.
     * 
     */
    public Double maxRatePerInstance() {
        return this.maxRatePerInstance;
    }
    /**
     * @return Used when balancingMode is UTILIZATION. This ratio defines the
     * CPU utilization target for the group. Valid range is [0.0, 1.0].
     * Cannot be set for INTERNAL backend services.
     * 
     */
    public Double maxUtilization() {
        return this.maxUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionBackendServiceBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String balancingMode;
        private Double capacityScaler;
        private List<GetRegionBackendServiceBackendCustomMetric> customMetrics;
        private String description;
        private Boolean failover;
        private String group;
        private Integer maxConnections;
        private Integer maxConnectionsPerEndpoint;
        private Integer maxConnectionsPerInstance;
        private Integer maxRate;
        private Double maxRatePerEndpoint;
        private Double maxRatePerInstance;
        private Double maxUtilization;
        public Builder() {}
        public Builder(GetRegionBackendServiceBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balancingMode = defaults.balancingMode;
    	      this.capacityScaler = defaults.capacityScaler;
    	      this.customMetrics = defaults.customMetrics;
    	      this.description = defaults.description;
    	      this.failover = defaults.failover;
    	      this.group = defaults.group;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxConnectionsPerEndpoint = defaults.maxConnectionsPerEndpoint;
    	      this.maxConnectionsPerInstance = defaults.maxConnectionsPerInstance;
    	      this.maxRate = defaults.maxRate;
    	      this.maxRatePerEndpoint = defaults.maxRatePerEndpoint;
    	      this.maxRatePerInstance = defaults.maxRatePerInstance;
    	      this.maxUtilization = defaults.maxUtilization;
        }

        @CustomType.Setter
        public Builder balancingMode(String balancingMode) {
            if (balancingMode == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "balancingMode");
            }
            this.balancingMode = balancingMode;
            return this;
        }
        @CustomType.Setter
        public Builder capacityScaler(Double capacityScaler) {
            if (capacityScaler == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "capacityScaler");
            }
            this.capacityScaler = capacityScaler;
            return this;
        }
        @CustomType.Setter
        public Builder customMetrics(List<GetRegionBackendServiceBackendCustomMetric> customMetrics) {
            if (customMetrics == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "customMetrics");
            }
            this.customMetrics = customMetrics;
            return this;
        }
        public Builder customMetrics(GetRegionBackendServiceBackendCustomMetric... customMetrics) {
            return customMetrics(List.of(customMetrics));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder failover(Boolean failover) {
            if (failover == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "failover");
            }
            this.failover = failover;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionsPerEndpoint(Integer maxConnectionsPerEndpoint) {
            if (maxConnectionsPerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxConnectionsPerEndpoint");
            }
            this.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionsPerInstance(Integer maxConnectionsPerInstance) {
            if (maxConnectionsPerInstance == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxConnectionsPerInstance");
            }
            this.maxConnectionsPerInstance = maxConnectionsPerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxRate(Integer maxRate) {
            if (maxRate == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxRate");
            }
            this.maxRate = maxRate;
            return this;
        }
        @CustomType.Setter
        public Builder maxRatePerEndpoint(Double maxRatePerEndpoint) {
            if (maxRatePerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxRatePerEndpoint");
            }
            this.maxRatePerEndpoint = maxRatePerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxRatePerInstance(Double maxRatePerInstance) {
            if (maxRatePerInstance == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxRatePerInstance");
            }
            this.maxRatePerInstance = maxRatePerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxUtilization(Double maxUtilization) {
            if (maxUtilization == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceBackend", "maxUtilization");
            }
            this.maxUtilization = maxUtilization;
            return this;
        }
        public GetRegionBackendServiceBackend build() {
            final var _resultValue = new GetRegionBackendServiceBackend();
            _resultValue.balancingMode = balancingMode;
            _resultValue.capacityScaler = capacityScaler;
            _resultValue.customMetrics = customMetrics;
            _resultValue.description = description;
            _resultValue.failover = failover;
            _resultValue.group = group;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            _resultValue.maxConnectionsPerInstance = maxConnectionsPerInstance;
            _resultValue.maxRate = maxRate;
            _resultValue.maxRatePerEndpoint = maxRatePerEndpoint;
            _resultValue.maxRatePerInstance = maxRatePerInstance;
            _resultValue.maxUtilization = maxUtilization;
            return _resultValue;
        }
    }
}
