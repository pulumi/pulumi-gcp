// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxToolOpenApiSpecAuthenticationOauthConfig {
    /**
     * @return The client ID from the OAuth provider.
     * 
     */
    private String clientId;
    /**
     * @return Optional. The client secret from the OAuth provider. If the `secretVersionForClientSecret` field is set, this field will be ignored.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return OAuth grant types.
     * See [OauthGrantType](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools#oauthgranttype) for valid values
     * 
     */
    private String oauthGrantType;
    /**
     * @return Optional. The OAuth scopes to grant.
     * 
     */
    private @Nullable List<String> scopes;
    /**
     * @return Optional. The name of the SecretManager secret version resource storing the client secret.
     * If this field is set, the clientSecret field will be ignored.
     * Format: projects/{project}/secrets/{secret}/versions/{version}
     * 
     */
    private @Nullable String secretVersionForClientSecret;
    /**
     * @return The token endpoint in the OAuth provider to exchange for an access token.
     * 
     */
    private String tokenEndpoint;

    private CxToolOpenApiSpecAuthenticationOauthConfig() {}
    /**
     * @return The client ID from the OAuth provider.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Optional. The client secret from the OAuth provider. If the `secretVersionForClientSecret` field is set, this field will be ignored.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return OAuth grant types.
     * See [OauthGrantType](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools#oauthgranttype) for valid values
     * 
     */
    public String oauthGrantType() {
        return this.oauthGrantType;
    }
    /**
     * @return Optional. The OAuth scopes to grant.
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return Optional. The name of the SecretManager secret version resource storing the client secret.
     * If this field is set, the clientSecret field will be ignored.
     * Format: projects/{project}/secrets/{secret}/versions/{version}
     * 
     */
    public Optional<String> secretVersionForClientSecret() {
        return Optional.ofNullable(this.secretVersionForClientSecret);
    }
    /**
     * @return The token endpoint in the OAuth provider to exchange for an access token.
     * 
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxToolOpenApiSpecAuthenticationOauthConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientId;
        private @Nullable String clientSecret;
        private String oauthGrantType;
        private @Nullable List<String> scopes;
        private @Nullable String secretVersionForClientSecret;
        private String tokenEndpoint;
        public Builder() {}
        public Builder(CxToolOpenApiSpecAuthenticationOauthConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.oauthGrantType = defaults.oauthGrantType;
    	      this.scopes = defaults.scopes;
    	      this.secretVersionForClientSecret = defaults.secretVersionForClientSecret;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
        }

        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("CxToolOpenApiSpecAuthenticationOauthConfig", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder oauthGrantType(String oauthGrantType) {
            if (oauthGrantType == null) {
              throw new MissingRequiredPropertyException("CxToolOpenApiSpecAuthenticationOauthConfig", "oauthGrantType");
            }
            this.oauthGrantType = oauthGrantType;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {

            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder secretVersionForClientSecret(@Nullable String secretVersionForClientSecret) {

            this.secretVersionForClientSecret = secretVersionForClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpoint(String tokenEndpoint) {
            if (tokenEndpoint == null) {
              throw new MissingRequiredPropertyException("CxToolOpenApiSpecAuthenticationOauthConfig", "tokenEndpoint");
            }
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        public CxToolOpenApiSpecAuthenticationOauthConfig build() {
            final var _resultValue = new CxToolOpenApiSpecAuthenticationOauthConfig();
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.oauthGrantType = oauthGrantType;
            _resultValue.scopes = scopes;
            _resultValue.secretVersionForClientSecret = secretVersionForClientSecret;
            _resultValue.tokenEndpoint = tokenEndpoint;
            return _resultValue;
        }
    }
}
