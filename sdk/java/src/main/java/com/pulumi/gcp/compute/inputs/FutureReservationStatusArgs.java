// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.FutureReservationStatusLastKnownGoodStateArgs;
import com.pulumi.gcp.compute.inputs.FutureReservationStatusSpecificSkuPropertiesArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FutureReservationStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final FutureReservationStatusArgs Empty = new FutureReservationStatusArgs();

    /**
     * The current status of the requested amendment.
     * Possible values are: .
     * 
     */
    @Import(name="amendmentStatus")
    private @Nullable Output<String> amendmentStatus;

    /**
     * @return The current status of the requested amendment.
     * Possible values are: .
     * 
     */
    public Optional<Output<String>> amendmentStatus() {
        return Optional.ofNullable(this.amendmentStatus);
    }

    /**
     * Fully qualified urls of the automatically created reservations at startTime.
     * 
     */
    @Import(name="autoCreatedReservations")
    private @Nullable Output<List<String>> autoCreatedReservations;

    /**
     * @return Fully qualified urls of the automatically created reservations at startTime.
     * 
     */
    public Optional<Output<List<String>>> autoCreatedReservations() {
        return Optional.ofNullable(this.autoCreatedReservations);
    }

    /**
     * This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
     * 
     */
    @Import(name="fulfilledCount")
    private @Nullable Output<String> fulfilledCount;

    /**
     * @return This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
     * 
     */
    public Optional<Output<String>> fulfilledCount() {
        return Optional.ofNullable(this.fulfilledCount);
    }

    /**
     * This field represents the future reservation before an amendment was requested. If the amendment is declined, the Future Reservation will be reverted to the last known good state. The last known good state is not set when updating a future reservation whose Procurement Status is DRAFTING.
     * Structure is documented below.
     * 
     */
    @Import(name="lastKnownGoodState")
    private @Nullable Output<FutureReservationStatusLastKnownGoodStateArgs> lastKnownGoodState;

    /**
     * @return This field represents the future reservation before an amendment was requested. If the amendment is declined, the Future Reservation will be reverted to the last known good state. The last known good state is not set when updating a future reservation whose Procurement Status is DRAFTING.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationStatusLastKnownGoodStateArgs>> lastKnownGoodState() {
        return Optional.ofNullable(this.lastKnownGoodState);
    }

    /**
     * The lock time of the FutureReservation before an amendment was requested.
     * 
     */
    @Import(name="lockTime")
    private @Nullable Output<String> lockTime;

    /**
     * @return The lock time of the FutureReservation before an amendment was requested.
     * 
     */
    public Optional<Output<String>> lockTime() {
        return Optional.ofNullable(this.lockTime);
    }

    /**
     * The status of the last known good state for the Future Reservation
     * Possible values are: .
     * 
     */
    @Import(name="procurementStatus")
    private @Nullable Output<String> procurementStatus;

    /**
     * @return The status of the last known good state for the Future Reservation
     * Possible values are: .
     * 
     */
    public Optional<Output<String>> procurementStatus() {
        return Optional.ofNullable(this.procurementStatus);
    }

    /**
     * Future Reservation configuration to indicate instance properties and total count.
     * Structure is documented below.
     * 
     */
    @Import(name="specificSkuProperties")
    private @Nullable Output<FutureReservationStatusSpecificSkuPropertiesArgs> specificSkuProperties;

    /**
     * @return Future Reservation configuration to indicate instance properties and total count.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FutureReservationStatusSpecificSkuPropertiesArgs>> specificSkuProperties() {
        return Optional.ofNullable(this.specificSkuProperties);
    }

    private FutureReservationStatusArgs() {}

    private FutureReservationStatusArgs(FutureReservationStatusArgs $) {
        this.amendmentStatus = $.amendmentStatus;
        this.autoCreatedReservations = $.autoCreatedReservations;
        this.fulfilledCount = $.fulfilledCount;
        this.lastKnownGoodState = $.lastKnownGoodState;
        this.lockTime = $.lockTime;
        this.procurementStatus = $.procurementStatus;
        this.specificSkuProperties = $.specificSkuProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FutureReservationStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FutureReservationStatusArgs $;

        public Builder() {
            $ = new FutureReservationStatusArgs();
        }

        public Builder(FutureReservationStatusArgs defaults) {
            $ = new FutureReservationStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amendmentStatus The current status of the requested amendment.
         * Possible values are: .
         * 
         * @return builder
         * 
         */
        public Builder amendmentStatus(@Nullable Output<String> amendmentStatus) {
            $.amendmentStatus = amendmentStatus;
            return this;
        }

        /**
         * @param amendmentStatus The current status of the requested amendment.
         * Possible values are: .
         * 
         * @return builder
         * 
         */
        public Builder amendmentStatus(String amendmentStatus) {
            return amendmentStatus(Output.of(amendmentStatus));
        }

        /**
         * @param autoCreatedReservations Fully qualified urls of the automatically created reservations at startTime.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservations(@Nullable Output<List<String>> autoCreatedReservations) {
            $.autoCreatedReservations = autoCreatedReservations;
            return this;
        }

        /**
         * @param autoCreatedReservations Fully qualified urls of the automatically created reservations at startTime.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservations(List<String> autoCreatedReservations) {
            return autoCreatedReservations(Output.of(autoCreatedReservations));
        }

        /**
         * @param autoCreatedReservations Fully qualified urls of the automatically created reservations at startTime.
         * 
         * @return builder
         * 
         */
        public Builder autoCreatedReservations(String... autoCreatedReservations) {
            return autoCreatedReservations(List.of(autoCreatedReservations));
        }

        /**
         * @param fulfilledCount This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
         * 
         * @return builder
         * 
         */
        public Builder fulfilledCount(@Nullable Output<String> fulfilledCount) {
            $.fulfilledCount = fulfilledCount;
            return this;
        }

        /**
         * @param fulfilledCount This count indicates the fulfilled capacity so far. This is set during &#34;PROVISIONING&#34; state. This count also includes capacity delivered as part of existing matching reservations.
         * 
         * @return builder
         * 
         */
        public Builder fulfilledCount(String fulfilledCount) {
            return fulfilledCount(Output.of(fulfilledCount));
        }

        /**
         * @param lastKnownGoodState This field represents the future reservation before an amendment was requested. If the amendment is declined, the Future Reservation will be reverted to the last known good state. The last known good state is not set when updating a future reservation whose Procurement Status is DRAFTING.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastKnownGoodState(@Nullable Output<FutureReservationStatusLastKnownGoodStateArgs> lastKnownGoodState) {
            $.lastKnownGoodState = lastKnownGoodState;
            return this;
        }

        /**
         * @param lastKnownGoodState This field represents the future reservation before an amendment was requested. If the amendment is declined, the Future Reservation will be reverted to the last known good state. The last known good state is not set when updating a future reservation whose Procurement Status is DRAFTING.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lastKnownGoodState(FutureReservationStatusLastKnownGoodStateArgs lastKnownGoodState) {
            return lastKnownGoodState(Output.of(lastKnownGoodState));
        }

        /**
         * @param lockTime The lock time of the FutureReservation before an amendment was requested.
         * 
         * @return builder
         * 
         */
        public Builder lockTime(@Nullable Output<String> lockTime) {
            $.lockTime = lockTime;
            return this;
        }

        /**
         * @param lockTime The lock time of the FutureReservation before an amendment was requested.
         * 
         * @return builder
         * 
         */
        public Builder lockTime(String lockTime) {
            return lockTime(Output.of(lockTime));
        }

        /**
         * @param procurementStatus The status of the last known good state for the Future Reservation
         * Possible values are: .
         * 
         * @return builder
         * 
         */
        public Builder procurementStatus(@Nullable Output<String> procurementStatus) {
            $.procurementStatus = procurementStatus;
            return this;
        }

        /**
         * @param procurementStatus The status of the last known good state for the Future Reservation
         * Possible values are: .
         * 
         * @return builder
         * 
         */
        public Builder procurementStatus(String procurementStatus) {
            return procurementStatus(Output.of(procurementStatus));
        }

        /**
         * @param specificSkuProperties Future Reservation configuration to indicate instance properties and total count.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder specificSkuProperties(@Nullable Output<FutureReservationStatusSpecificSkuPropertiesArgs> specificSkuProperties) {
            $.specificSkuProperties = specificSkuProperties;
            return this;
        }

        /**
         * @param specificSkuProperties Future Reservation configuration to indicate instance properties and total count.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder specificSkuProperties(FutureReservationStatusSpecificSkuPropertiesArgs specificSkuProperties) {
            return specificSkuProperties(Output.of(specificSkuProperties));
        }

        public FutureReservationStatusArgs build() {
            return $;
        }
    }

}
