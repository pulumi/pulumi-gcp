// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.identityplatform.inputs.ConfigMfaProviderConfigTotpProviderConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigMfaProviderConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigMfaProviderConfigArgs Empty = new ConfigMfaProviderConfigArgs();

    /**
     * Whether MultiFactor Authentication has been enabled for this project.
     * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Whether MultiFactor Authentication has been enabled for this project.
     * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * TOTP MFA provider config for this project.
     * Structure is documented below.
     * 
     */
    @Import(name="totpProviderConfig")
    private @Nullable Output<ConfigMfaProviderConfigTotpProviderConfigArgs> totpProviderConfig;

    /**
     * @return TOTP MFA provider config for this project.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConfigMfaProviderConfigTotpProviderConfigArgs>> totpProviderConfig() {
        return Optional.ofNullable(this.totpProviderConfig);
    }

    private ConfigMfaProviderConfigArgs() {}

    private ConfigMfaProviderConfigArgs(ConfigMfaProviderConfigArgs $) {
        this.state = $.state;
        this.totpProviderConfig = $.totpProviderConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigMfaProviderConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigMfaProviderConfigArgs $;

        public Builder() {
            $ = new ConfigMfaProviderConfigArgs();
        }

        public Builder(ConfigMfaProviderConfigArgs defaults) {
            $ = new ConfigMfaProviderConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param state Whether MultiFactor Authentication has been enabled for this project.
         * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Whether MultiFactor Authentication has been enabled for this project.
         * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param totpProviderConfig TOTP MFA provider config for this project.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder totpProviderConfig(@Nullable Output<ConfigMfaProviderConfigTotpProviderConfigArgs> totpProviderConfig) {
            $.totpProviderConfig = totpProviderConfig;
            return this;
        }

        /**
         * @param totpProviderConfig TOTP MFA provider config for this project.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder totpProviderConfig(ConfigMfaProviderConfigTotpProviderConfigArgs totpProviderConfig) {
            return totpProviderConfig(Output.of(totpProviderConfig));
        }

        public ConfigMfaProviderConfigArgs build() {
            return $;
        }
    }

}
