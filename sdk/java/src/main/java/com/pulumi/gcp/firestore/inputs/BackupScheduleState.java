// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firestore.inputs.BackupScheduleDailyRecurrenceArgs;
import com.pulumi.gcp.firestore.inputs.BackupScheduleWeeklyRecurrenceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupScheduleState extends com.pulumi.resources.ResourceArgs {

    public static final BackupScheduleState Empty = new BackupScheduleState();

    /**
     * For a schedule that runs daily.
     * 
     */
    @Import(name="dailyRecurrence")
    private @Nullable Output<BackupScheduleDailyRecurrenceArgs> dailyRecurrence;

    /**
     * @return For a schedule that runs daily.
     * 
     */
    public Optional<Output<BackupScheduleDailyRecurrenceArgs>> dailyRecurrence() {
        return Optional.ofNullable(this.dailyRecurrence);
    }

    /**
     * The Firestore database id. Defaults to `&#34;(default)&#34;`.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The Firestore database id. Defaults to `&#34;(default)&#34;`.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The unique backup schedule identifier across all locations and databases for the given project. Format:
     * `projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique backup schedule identifier across all locations and databases for the given project. Format:
     * `projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * You can set this to a value up to 14 weeks.
     * 
     */
    @Import(name="retention")
    private @Nullable Output<String> retention;

    /**
     * @return At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * You can set this to a value up to 14 weeks.
     * 
     */
    public Optional<Output<String>> retention() {
        return Optional.ofNullable(this.retention);
    }

    /**
     * For a schedule that runs weekly on a specific day.
     * Structure is documented below.
     * 
     */
    @Import(name="weeklyRecurrence")
    private @Nullable Output<BackupScheduleWeeklyRecurrenceArgs> weeklyRecurrence;

    /**
     * @return For a schedule that runs weekly on a specific day.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackupScheduleWeeklyRecurrenceArgs>> weeklyRecurrence() {
        return Optional.ofNullable(this.weeklyRecurrence);
    }

    private BackupScheduleState() {}

    private BackupScheduleState(BackupScheduleState $) {
        this.dailyRecurrence = $.dailyRecurrence;
        this.database = $.database;
        this.name = $.name;
        this.project = $.project;
        this.retention = $.retention;
        this.weeklyRecurrence = $.weeklyRecurrence;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupScheduleState $;

        public Builder() {
            $ = new BackupScheduleState();
        }

        public Builder(BackupScheduleState defaults) {
            $ = new BackupScheduleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyRecurrence For a schedule that runs daily.
         * 
         * @return builder
         * 
         */
        public Builder dailyRecurrence(@Nullable Output<BackupScheduleDailyRecurrenceArgs> dailyRecurrence) {
            $.dailyRecurrence = dailyRecurrence;
            return this;
        }

        /**
         * @param dailyRecurrence For a schedule that runs daily.
         * 
         * @return builder
         * 
         */
        public Builder dailyRecurrence(BackupScheduleDailyRecurrenceArgs dailyRecurrence) {
            return dailyRecurrence(Output.of(dailyRecurrence));
        }

        /**
         * @param database The Firestore database id. Defaults to `&#34;(default)&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The Firestore database id. Defaults to `&#34;(default)&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param name The unique backup schedule identifier across all locations and databases for the given project. Format:
         * `projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique backup schedule identifier across all locations and databases for the given project. Format:
         * `projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param retention At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * You can set this to a value up to 14 weeks.
         * 
         * @return builder
         * 
         */
        public Builder retention(@Nullable Output<String> retention) {
            $.retention = retention;
            return this;
        }

        /**
         * @param retention At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * You can set this to a value up to 14 weeks.
         * 
         * @return builder
         * 
         */
        public Builder retention(String retention) {
            return retention(Output.of(retention));
        }

        /**
         * @param weeklyRecurrence For a schedule that runs weekly on a specific day.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder weeklyRecurrence(@Nullable Output<BackupScheduleWeeklyRecurrenceArgs> weeklyRecurrence) {
            $.weeklyRecurrence = weeklyRecurrence;
            return this;
        }

        /**
         * @param weeklyRecurrence For a schedule that runs weekly on a specific day.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder weeklyRecurrence(BackupScheduleWeeklyRecurrenceArgs weeklyRecurrence) {
            return weeklyRecurrence(Output.of(weeklyRecurrence));
        }

        public BackupScheduleState build() {
            return $;
        }
    }

}
