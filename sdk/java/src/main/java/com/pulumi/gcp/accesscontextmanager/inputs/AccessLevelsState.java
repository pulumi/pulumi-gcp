// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.accesscontextmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelsAccessLevelArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessLevelsState extends com.pulumi.resources.ResourceArgs {

    public static final AccessLevelsState Empty = new AccessLevelsState();

    /**
     * The desired Access Levels that should replace all existing Access Levels in the Access Policy.
     * Structure is documented below.
     * 
     */
    @Import(name="accessLevels")
    private @Nullable Output<List<AccessLevelsAccessLevelArgs>> accessLevels;

    /**
     * @return The desired Access Levels that should replace all existing Access Levels in the Access Policy.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AccessLevelsAccessLevelArgs>>> accessLevels() {
        return Optional.ofNullable(this.accessLevels);
    }

    /**
     * The AccessPolicy this AccessLevel lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The AccessPolicy this AccessLevel lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    private AccessLevelsState() {}

    private AccessLevelsState(AccessLevelsState $) {
        this.accessLevels = $.accessLevels;
        this.parent = $.parent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessLevelsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessLevelsState $;

        public Builder() {
            $ = new AccessLevelsState();
        }

        public Builder(AccessLevelsState defaults) {
            $ = new AccessLevelsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevels The desired Access Levels that should replace all existing Access Levels in the Access Policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accessLevels(@Nullable Output<List<AccessLevelsAccessLevelArgs>> accessLevels) {
            $.accessLevels = accessLevels;
            return this;
        }

        /**
         * @param accessLevels The desired Access Levels that should replace all existing Access Levels in the Access Policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accessLevels(List<AccessLevelsAccessLevelArgs> accessLevels) {
            return accessLevels(Output.of(accessLevels));
        }

        /**
         * @param accessLevels The desired Access Levels that should replace all existing Access Levels in the Access Policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder accessLevels(AccessLevelsAccessLevelArgs... accessLevels) {
            return accessLevels(List.of(accessLevels));
        }

        /**
         * @param parent The AccessPolicy this AccessLevel lives in.
         * Format: accessPolicies/{policy_id}
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The AccessPolicy this AccessLevel lives in.
         * Format: accessPolicies/{policy_id}
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public AccessLevelsState build() {
            return $;
        }
    }

}
