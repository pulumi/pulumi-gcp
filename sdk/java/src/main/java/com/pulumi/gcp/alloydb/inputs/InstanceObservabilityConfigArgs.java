// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceObservabilityConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceObservabilityConfigArgs Empty = new InstanceObservabilityConfigArgs();

    /**
     * Whether assistive experiences are enabled for this AlloyDB instance.
     * 
     */
    @Import(name="assistiveExperiencesEnabled")
    private @Nullable Output<Boolean> assistiveExperiencesEnabled;

    /**
     * @return Whether assistive experiences are enabled for this AlloyDB instance.
     * 
     */
    public Optional<Output<Boolean>> assistiveExperiencesEnabled() {
        return Optional.ofNullable(this.assistiveExperiencesEnabled);
    }

    /**
     * Observability feature status for an instance.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Observability feature status for an instance.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Query string length. The default value is 10240. Any integer between 1024 and 100000 is considered valid.
     * 
     */
    @Import(name="maxQueryStringLength")
    private @Nullable Output<Integer> maxQueryStringLength;

    /**
     * @return Query string length. The default value is 10240. Any integer between 1024 and 100000 is considered valid.
     * 
     */
    public Optional<Output<Integer>> maxQueryStringLength() {
        return Optional.ofNullable(this.maxQueryStringLength);
    }

    /**
     * Preserve comments in the query string.
     * 
     */
    @Import(name="preserveComments")
    private @Nullable Output<Boolean> preserveComments;

    /**
     * @return Preserve comments in the query string.
     * 
     */
    public Optional<Output<Boolean>> preserveComments() {
        return Optional.ofNullable(this.preserveComments);
    }

    /**
     * Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 200 is considered valid.
     * 
     */
    @Import(name="queryPlansPerMinute")
    private @Nullable Output<Integer> queryPlansPerMinute;

    /**
     * @return Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 200 is considered valid.
     * 
     */
    public Optional<Output<Integer>> queryPlansPerMinute() {
        return Optional.ofNullable(this.queryPlansPerMinute);
    }

    /**
     * Record application tags for an instance. This flag is turned &#34;on&#34; by default.
     * 
     */
    @Import(name="recordApplicationTags")
    private @Nullable Output<Boolean> recordApplicationTags;

    /**
     * @return Record application tags for an instance. This flag is turned &#34;on&#34; by default.
     * 
     */
    public Optional<Output<Boolean>> recordApplicationTags() {
        return Optional.ofNullable(this.recordApplicationTags);
    }

    /**
     * Track actively running queries. If not set, default value is &#34;off&#34;.
     * 
     */
    @Import(name="trackActiveQueries")
    private @Nullable Output<Boolean> trackActiveQueries;

    /**
     * @return Track actively running queries. If not set, default value is &#34;off&#34;.
     * 
     */
    public Optional<Output<Boolean>> trackActiveQueries() {
        return Optional.ofNullable(this.trackActiveQueries);
    }

    /**
     * Record wait event types during query execution for an instance.
     * 
     */
    @Import(name="trackWaitEventTypes")
    private @Nullable Output<Boolean> trackWaitEventTypes;

    /**
     * @return Record wait event types during query execution for an instance.
     * 
     */
    public Optional<Output<Boolean>> trackWaitEventTypes() {
        return Optional.ofNullable(this.trackWaitEventTypes);
    }

    /**
     * Record wait events during query execution for an instance.
     * 
     */
    @Import(name="trackWaitEvents")
    private @Nullable Output<Boolean> trackWaitEvents;

    /**
     * @return Record wait events during query execution for an instance.
     * 
     */
    public Optional<Output<Boolean>> trackWaitEvents() {
        return Optional.ofNullable(this.trackWaitEvents);
    }

    private InstanceObservabilityConfigArgs() {}

    private InstanceObservabilityConfigArgs(InstanceObservabilityConfigArgs $) {
        this.assistiveExperiencesEnabled = $.assistiveExperiencesEnabled;
        this.enabled = $.enabled;
        this.maxQueryStringLength = $.maxQueryStringLength;
        this.preserveComments = $.preserveComments;
        this.queryPlansPerMinute = $.queryPlansPerMinute;
        this.recordApplicationTags = $.recordApplicationTags;
        this.trackActiveQueries = $.trackActiveQueries;
        this.trackWaitEventTypes = $.trackWaitEventTypes;
        this.trackWaitEvents = $.trackWaitEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceObservabilityConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceObservabilityConfigArgs $;

        public Builder() {
            $ = new InstanceObservabilityConfigArgs();
        }

        public Builder(InstanceObservabilityConfigArgs defaults) {
            $ = new InstanceObservabilityConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assistiveExperiencesEnabled Whether assistive experiences are enabled for this AlloyDB instance.
         * 
         * @return builder
         * 
         */
        public Builder assistiveExperiencesEnabled(@Nullable Output<Boolean> assistiveExperiencesEnabled) {
            $.assistiveExperiencesEnabled = assistiveExperiencesEnabled;
            return this;
        }

        /**
         * @param assistiveExperiencesEnabled Whether assistive experiences are enabled for this AlloyDB instance.
         * 
         * @return builder
         * 
         */
        public Builder assistiveExperiencesEnabled(Boolean assistiveExperiencesEnabled) {
            return assistiveExperiencesEnabled(Output.of(assistiveExperiencesEnabled));
        }

        /**
         * @param enabled Observability feature status for an instance.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Observability feature status for an instance.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param maxQueryStringLength Query string length. The default value is 10240. Any integer between 1024 and 100000 is considered valid.
         * 
         * @return builder
         * 
         */
        public Builder maxQueryStringLength(@Nullable Output<Integer> maxQueryStringLength) {
            $.maxQueryStringLength = maxQueryStringLength;
            return this;
        }

        /**
         * @param maxQueryStringLength Query string length. The default value is 10240. Any integer between 1024 and 100000 is considered valid.
         * 
         * @return builder
         * 
         */
        public Builder maxQueryStringLength(Integer maxQueryStringLength) {
            return maxQueryStringLength(Output.of(maxQueryStringLength));
        }

        /**
         * @param preserveComments Preserve comments in the query string.
         * 
         * @return builder
         * 
         */
        public Builder preserveComments(@Nullable Output<Boolean> preserveComments) {
            $.preserveComments = preserveComments;
            return this;
        }

        /**
         * @param preserveComments Preserve comments in the query string.
         * 
         * @return builder
         * 
         */
        public Builder preserveComments(Boolean preserveComments) {
            return preserveComments(Output.of(preserveComments));
        }

        /**
         * @param queryPlansPerMinute Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 200 is considered valid.
         * 
         * @return builder
         * 
         */
        public Builder queryPlansPerMinute(@Nullable Output<Integer> queryPlansPerMinute) {
            $.queryPlansPerMinute = queryPlansPerMinute;
            return this;
        }

        /**
         * @param queryPlansPerMinute Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 200 is considered valid.
         * 
         * @return builder
         * 
         */
        public Builder queryPlansPerMinute(Integer queryPlansPerMinute) {
            return queryPlansPerMinute(Output.of(queryPlansPerMinute));
        }

        /**
         * @param recordApplicationTags Record application tags for an instance. This flag is turned &#34;on&#34; by default.
         * 
         * @return builder
         * 
         */
        public Builder recordApplicationTags(@Nullable Output<Boolean> recordApplicationTags) {
            $.recordApplicationTags = recordApplicationTags;
            return this;
        }

        /**
         * @param recordApplicationTags Record application tags for an instance. This flag is turned &#34;on&#34; by default.
         * 
         * @return builder
         * 
         */
        public Builder recordApplicationTags(Boolean recordApplicationTags) {
            return recordApplicationTags(Output.of(recordApplicationTags));
        }

        /**
         * @param trackActiveQueries Track actively running queries. If not set, default value is &#34;off&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trackActiveQueries(@Nullable Output<Boolean> trackActiveQueries) {
            $.trackActiveQueries = trackActiveQueries;
            return this;
        }

        /**
         * @param trackActiveQueries Track actively running queries. If not set, default value is &#34;off&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trackActiveQueries(Boolean trackActiveQueries) {
            return trackActiveQueries(Output.of(trackActiveQueries));
        }

        /**
         * @param trackWaitEventTypes Record wait event types during query execution for an instance.
         * 
         * @return builder
         * 
         */
        public Builder trackWaitEventTypes(@Nullable Output<Boolean> trackWaitEventTypes) {
            $.trackWaitEventTypes = trackWaitEventTypes;
            return this;
        }

        /**
         * @param trackWaitEventTypes Record wait event types during query execution for an instance.
         * 
         * @return builder
         * 
         */
        public Builder trackWaitEventTypes(Boolean trackWaitEventTypes) {
            return trackWaitEventTypes(Output.of(trackWaitEventTypes));
        }

        /**
         * @param trackWaitEvents Record wait events during query execution for an instance.
         * 
         * @return builder
         * 
         */
        public Builder trackWaitEvents(@Nullable Output<Boolean> trackWaitEvents) {
            $.trackWaitEvents = trackWaitEvents;
            return this;
        }

        /**
         * @param trackWaitEvents Record wait events during query execution for an instance.
         * 
         * @return builder
         * 
         */
        public Builder trackWaitEvents(Boolean trackWaitEvents) {
            return trackWaitEvents(Output.of(trackWaitEvents));
        }

        public InstanceObservabilityConfigArgs build() {
            return $;
        }
    }

}
