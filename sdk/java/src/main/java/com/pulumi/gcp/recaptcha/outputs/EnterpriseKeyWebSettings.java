// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.recaptcha.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EnterpriseKeyWebSettings {
    /**
     * @return If set to true, it means allowed_domains will not be enforced.
     * 
     */
    private @Nullable Boolean allowAllDomains;
    /**
     * @return If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
     * 
     */
    private @Nullable Boolean allowAmpTraffic;
    /**
     * @return Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: &#39;example.com&#39; or &#39;subdomain.example.com&#39;
     * 
     */
    private @Nullable List<String> allowedDomains;
    /**
     * @return Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
     * 
     */
    private @Nullable String challengeSecurityPreference;
    /**
     * @return Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
     * 
     */
    private String integrationType;

    private EnterpriseKeyWebSettings() {}
    /**
     * @return If set to true, it means allowed_domains will not be enforced.
     * 
     */
    public Optional<Boolean> allowAllDomains() {
        return Optional.ofNullable(this.allowAllDomains);
    }
    /**
     * @return If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
     * 
     */
    public Optional<Boolean> allowAmpTraffic() {
        return Optional.ofNullable(this.allowAmpTraffic);
    }
    /**
     * @return Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: &#39;example.com&#39; or &#39;subdomain.example.com&#39;
     * 
     */
    public List<String> allowedDomains() {
        return this.allowedDomains == null ? List.of() : this.allowedDomains;
    }
    /**
     * @return Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
     * 
     */
    public Optional<String> challengeSecurityPreference() {
        return Optional.ofNullable(this.challengeSecurityPreference);
    }
    /**
     * @return Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
     * 
     */
    public String integrationType() {
        return this.integrationType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnterpriseKeyWebSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowAllDomains;
        private @Nullable Boolean allowAmpTraffic;
        private @Nullable List<String> allowedDomains;
        private @Nullable String challengeSecurityPreference;
        private String integrationType;
        public Builder() {}
        public Builder(EnterpriseKeyWebSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowAllDomains = defaults.allowAllDomains;
    	      this.allowAmpTraffic = defaults.allowAmpTraffic;
    	      this.allowedDomains = defaults.allowedDomains;
    	      this.challengeSecurityPreference = defaults.challengeSecurityPreference;
    	      this.integrationType = defaults.integrationType;
        }

        @CustomType.Setter
        public Builder allowAllDomains(@Nullable Boolean allowAllDomains) {
            this.allowAllDomains = allowAllDomains;
            return this;
        }
        @CustomType.Setter
        public Builder allowAmpTraffic(@Nullable Boolean allowAmpTraffic) {
            this.allowAmpTraffic = allowAmpTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder allowedDomains(@Nullable List<String> allowedDomains) {
            this.allowedDomains = allowedDomains;
            return this;
        }
        public Builder allowedDomains(String... allowedDomains) {
            return allowedDomains(List.of(allowedDomains));
        }
        @CustomType.Setter
        public Builder challengeSecurityPreference(@Nullable String challengeSecurityPreference) {
            this.challengeSecurityPreference = challengeSecurityPreference;
            return this;
        }
        @CustomType.Setter
        public Builder integrationType(String integrationType) {
            this.integrationType = Objects.requireNonNull(integrationType);
            return this;
        }
        public EnterpriseKeyWebSettings build() {
            final var o = new EnterpriseKeyWebSettings();
            o.allowAllDomains = allowAllDomains;
            o.allowAmpTraffic = allowAmpTraffic;
            o.allowedDomains = allowedDomains;
            o.challengeSecurityPreference = challengeSecurityPreference;
            o.integrationType = integrationType;
            return o;
        }
    }
}
