// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvReferencesArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvReferencesArgs Empty = new EnvReferencesArgs();

    /**
     * Optional. A human-readable description of this reference.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A human-readable description of this reference.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     * 
     */
    @Import(name="envId", required=true)
    private Output<String> envId;

    /**
     * @return The Apigee environment group associated with the Apigee environment,
     * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
     * 
     */
    public Output<String> envId() {
        return this.envId;
    }

    /**
     * Required. The resource id of this reference. Values must match the regular expression [\w\s-.]+.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Required. The resource id of this reference. Values must match the regular expression [\w\s-.]+.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resourceType.
     * 
     */
    @Import(name="refers", required=true)
    private Output<String> refers;

    /**
     * @return Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resourceType.
     * 
     */
    public Output<String> refers() {
        return this.refers;
    }

    /**
     * The type of resource referred to by this reference. Valid values are &#39;KeyStore&#39; or &#39;TrustStore&#39;.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The type of resource referred to by this reference. Valid values are &#39;KeyStore&#39; or &#39;TrustStore&#39;.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private EnvReferencesArgs() {}

    private EnvReferencesArgs(EnvReferencesArgs $) {
        this.description = $.description;
        this.envId = $.envId;
        this.name = $.name;
        this.refers = $.refers;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvReferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvReferencesArgs $;

        public Builder() {
            $ = new EnvReferencesArgs();
        }

        public Builder(EnvReferencesArgs defaults) {
            $ = new EnvReferencesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. A human-readable description of this reference.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A human-readable description of this reference.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param envId The Apigee environment group associated with the Apigee environment,
         * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder envId(Output<String> envId) {
            $.envId = envId;
            return this;
        }

        /**
         * @param envId The Apigee environment group associated with the Apigee environment,
         * in the format `organizations/{{org_name}}/environments/{{env_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder envId(String envId) {
            return envId(Output.of(envId));
        }

        /**
         * @param name Required. The resource id of this reference. Values must match the regular expression [\w\s-.]+.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required. The resource id of this reference. Values must match the regular expression [\w\s-.]+.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param refers Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resourceType.
         * 
         * @return builder
         * 
         */
        public Builder refers(Output<String> refers) {
            $.refers = refers;
            return this;
        }

        /**
         * @param refers Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resourceType.
         * 
         * @return builder
         * 
         */
        public Builder refers(String refers) {
            return refers(Output.of(refers));
        }

        /**
         * @param resourceType The type of resource referred to by this reference. Valid values are &#39;KeyStore&#39; or &#39;TrustStore&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The type of resource referred to by this reference. Valid values are &#39;KeyStore&#39; or &#39;TrustStore&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public EnvReferencesArgs build() {
            $.envId = Objects.requireNonNull($.envId, "expected parameter 'envId' to be non-null");
            $.refers = Objects.requireNonNull($.refers, "expected parameter 'refers' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
