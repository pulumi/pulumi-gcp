// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs Empty = new RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs();

    /**
     * Before forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite.
     * The value must be from 1 to 255 characters.
     * 
     */
    @Import(name="hostRewrite")
    private @Nullable Output<String> hostRewrite;

    /**
     * @return Before forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite.
     * The value must be from 1 to 255 characters.
     * 
     */
    public Optional<Output<String>> hostRewrite() {
        return Optional.ofNullable(this.hostRewrite);
    }

    /**
     * Before forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
     * The value must be from 1 to 1024 characters.
     * 
     */
    @Import(name="pathPrefixRewrite")
    private @Nullable Output<String> pathPrefixRewrite;

    /**
     * @return Before forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
     * The value must be from 1 to 1024 characters.
     * 
     */
    public Optional<Output<String>> pathPrefixRewrite() {
        return Optional.ofNullable(this.pathPrefixRewrite);
    }

    /**
     * If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
     * A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
     * * At least one variable must be specified in the pathTemplateMatch field
     * * You can omit variables from the rewritten URL
     * * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
     *   For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
     *   /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
     *   rewritten as /content/{format}/{country}/{suffix}.
     *   At least one non-empty routeRules[].matchRules[].path_template_match is required.
     *   Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
     * 
     */
    @Import(name="pathTemplateRewrite")
    private @Nullable Output<String> pathTemplateRewrite;

    /**
     * @return If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
     * A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
     * * At least one variable must be specified in the pathTemplateMatch field
     * * You can omit variables from the rewritten URL
     * * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
     *   For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
     *   /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
     *   rewritten as /content/{format}/{country}/{suffix}.
     *   At least one non-empty routeRules[].matchRules[].path_template_match is required.
     *   Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
     * 
     */
    public Optional<Output<String>> pathTemplateRewrite() {
        return Optional.ofNullable(this.pathTemplateRewrite);
    }

    private RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs() {}

    private RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs(RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs $) {
        this.hostRewrite = $.hostRewrite;
        this.pathPrefixRewrite = $.pathPrefixRewrite;
        this.pathTemplateRewrite = $.pathTemplateRewrite;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs $;

        public Builder() {
            $ = new RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs();
        }

        public Builder(RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs defaults) {
            $ = new RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostRewrite Before forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite.
         * The value must be from 1 to 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder hostRewrite(@Nullable Output<String> hostRewrite) {
            $.hostRewrite = hostRewrite;
            return this;
        }

        /**
         * @param hostRewrite Before forwarding the request to the selected service, the request&#39;s host header is replaced with contents of hostRewrite.
         * The value must be from 1 to 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder hostRewrite(String hostRewrite) {
            return hostRewrite(Output.of(hostRewrite));
        }

        /**
         * @param pathPrefixRewrite Before forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
         * The value must be from 1 to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefixRewrite(@Nullable Output<String> pathPrefixRewrite) {
            $.pathPrefixRewrite = pathPrefixRewrite;
            return this;
        }

        /**
         * @param pathPrefixRewrite Before forwarding the request to the selected backend service, the matching portion of the request&#39;s path is replaced by pathPrefixRewrite.
         * The value must be from 1 to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder pathPrefixRewrite(String pathPrefixRewrite) {
            return pathPrefixRewrite(Output.of(pathPrefixRewrite));
        }

        /**
         * @param pathTemplateRewrite If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
         * A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
         * * At least one variable must be specified in the pathTemplateMatch field
         * * You can omit variables from the rewritten URL
         * * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
         *   For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
         *   /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
         *   rewritten as /content/{format}/{country}/{suffix}.
         *   At least one non-empty routeRules[].matchRules[].path_template_match is required.
         *   Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
         * 
         * @return builder
         * 
         */
        public Builder pathTemplateRewrite(@Nullable Output<String> pathTemplateRewrite) {
            $.pathTemplateRewrite = pathTemplateRewrite;
            return this;
        }

        /**
         * @param pathTemplateRewrite If specified, the pattern rewrites the URL path (based on the :path header) using the HTTP template syntax.
         * A corresponding pathTemplateMatch must be specified. Any template variables must exist in the pathTemplateMatch field.
         * * At least one variable must be specified in the pathTemplateMatch field
         * * You can omit variables from the rewritten URL
         * * The * and ** operators cannot be matched unless they have a corresponding variable name - e.g. {format=*} or {var=**}.
         *   For example, a pathTemplateMatch of /static/{format=**} could be rewritten as /static/content/{format} to prefix
         *   /content to the URL. Variables can also be re-ordered in a rewrite, so that /{country}/{format}/{suffix=**} can be
         *   rewritten as /content/{format}/{country}/{suffix}.
         *   At least one non-empty routeRules[].matchRules[].path_template_match is required.
         *   Only one of pathPrefixRewrite or pathTemplateRewrite may be specified.
         * 
         * @return builder
         * 
         */
        public Builder pathTemplateRewrite(String pathTemplateRewrite) {
            return pathTemplateRewrite(Output.of(pathTemplateRewrite));
        }

        public RegionUrlMapPathMatcherDefaultRouteActionUrlRewriteArgs build() {
            return $;
        }
    }

}
