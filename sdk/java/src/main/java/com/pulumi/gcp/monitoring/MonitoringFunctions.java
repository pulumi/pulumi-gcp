// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
import com.pulumi.gcp.monitoring.inputs.GetAppEngineServicePlainArgs;
import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServiceArgs;
import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServicePlainArgs;
import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServiceArgs;
import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServicePlainArgs;
import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServiceArgs;
import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServicePlainArgs;
import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelPlainArgs;
import com.pulumi.gcp.monitoring.inputs.GetSecretVersionArgs;
import com.pulumi.gcp.monitoring.inputs.GetSecretVersionPlainArgs;
import com.pulumi.gcp.monitoring.outputs.GetAppEngineServiceResult;
import com.pulumi.gcp.monitoring.outputs.GetClusterIstioServiceResult;
import com.pulumi.gcp.monitoring.outputs.GetIstioCanonicalServiceResult;
import com.pulumi.gcp.monitoring.outputs.GetMeshIstioServiceResult;
import com.pulumi.gcp.monitoring.outputs.GetNotificationChannelResult;
import com.pulumi.gcp.monitoring.outputs.GetSecretVersionResult;
import com.pulumi.gcp.monitoring.outputs.GetUptimeCheckIPsResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class MonitoringFunctions {
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An App Engine monitoring service is automatically created by GCP to monitor
     * App Engine services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring App Engine Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.BucketObject;
     * import com.pulumi.gcp.storage.BucketObjectArgs;
     * import com.pulumi.gcp.appengine.StandardAppVersion;
     * import com.pulumi.gcp.appengine.StandardAppVersionArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
     * import com.pulumi.asset.FileAsset;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var bucket = new Bucket("bucket", BucketArgs.builder()
     *             .name("appengine-static-content")
     *             .location("US")
     *             .build());
     * 
     *         var object = new BucketObject("object", BucketObjectArgs.builder()
     *             .name("hello-world.zip")
     *             .bucket(bucket.name())
     *             .source(new FileAsset("./test-fixtures/hello-world.zip"))
     *             .build());
     * 
     *         var myapp = new StandardAppVersion("myapp", StandardAppVersionArgs.builder()
     *             .versionId("v1")
     *             .service("myapp")
     *             .runtime("nodejs20")
     *             .entrypoint(StandardAppVersionEntrypointArgs.builder()
     *                 .shell("node ./app.js")
     *                 .build())
     *             .deployment(StandardAppVersionDeploymentArgs.builder()
     *                 .zip(StandardAppVersionDeploymentZipArgs.builder()
     *                     .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
     *                         var bucketName = values.t1;
     *                         var objectName = values.t2;
     *                         return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
     *                     }))
     *                     .build())
     *                 .build())
     *             .envVariables(Map.of("port", "8080"))
     *             .deleteServiceOnDestroy(false)
     *             .build());
     * 
     *         // Monitors the default AppEngine service
     *         final var srv = MonitoringFunctions.getAppEngineService(GetAppEngineServiceArgs.builder()
     *             .moduleId(myapp.service())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppEngineServiceResult> getAppEngineService(GetAppEngineServiceArgs args) {
        return getAppEngineService(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An App Engine monitoring service is automatically created by GCP to monitor
     * App Engine services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring App Engine Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.BucketObject;
     * import com.pulumi.gcp.storage.BucketObjectArgs;
     * import com.pulumi.gcp.appengine.StandardAppVersion;
     * import com.pulumi.gcp.appengine.StandardAppVersionArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
     * import com.pulumi.asset.FileAsset;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var bucket = new Bucket("bucket", BucketArgs.builder()
     *             .name("appengine-static-content")
     *             .location("US")
     *             .build());
     * 
     *         var object = new BucketObject("object", BucketObjectArgs.builder()
     *             .name("hello-world.zip")
     *             .bucket(bucket.name())
     *             .source(new FileAsset("./test-fixtures/hello-world.zip"))
     *             .build());
     * 
     *         var myapp = new StandardAppVersion("myapp", StandardAppVersionArgs.builder()
     *             .versionId("v1")
     *             .service("myapp")
     *             .runtime("nodejs20")
     *             .entrypoint(StandardAppVersionEntrypointArgs.builder()
     *                 .shell("node ./app.js")
     *                 .build())
     *             .deployment(StandardAppVersionDeploymentArgs.builder()
     *                 .zip(StandardAppVersionDeploymentZipArgs.builder()
     *                     .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
     *                         var bucketName = values.t1;
     *                         var objectName = values.t2;
     *                         return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
     *                     }))
     *                     .build())
     *                 .build())
     *             .envVariables(Map.of("port", "8080"))
     *             .deleteServiceOnDestroy(false)
     *             .build());
     * 
     *         // Monitors the default AppEngine service
     *         final var srv = MonitoringFunctions.getAppEngineService(GetAppEngineServiceArgs.builder()
     *             .moduleId(myapp.service())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAppEngineServiceResult> getAppEngineServicePlain(GetAppEngineServicePlainArgs args) {
        return getAppEngineServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An App Engine monitoring service is automatically created by GCP to monitor
     * App Engine services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring App Engine Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.BucketObject;
     * import com.pulumi.gcp.storage.BucketObjectArgs;
     * import com.pulumi.gcp.appengine.StandardAppVersion;
     * import com.pulumi.gcp.appengine.StandardAppVersionArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
     * import com.pulumi.asset.FileAsset;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var bucket = new Bucket("bucket", BucketArgs.builder()
     *             .name("appengine-static-content")
     *             .location("US")
     *             .build());
     * 
     *         var object = new BucketObject("object", BucketObjectArgs.builder()
     *             .name("hello-world.zip")
     *             .bucket(bucket.name())
     *             .source(new FileAsset("./test-fixtures/hello-world.zip"))
     *             .build());
     * 
     *         var myapp = new StandardAppVersion("myapp", StandardAppVersionArgs.builder()
     *             .versionId("v1")
     *             .service("myapp")
     *             .runtime("nodejs20")
     *             .entrypoint(StandardAppVersionEntrypointArgs.builder()
     *                 .shell("node ./app.js")
     *                 .build())
     *             .deployment(StandardAppVersionDeploymentArgs.builder()
     *                 .zip(StandardAppVersionDeploymentZipArgs.builder()
     *                     .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
     *                         var bucketName = values.t1;
     *                         var objectName = values.t2;
     *                         return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
     *                     }))
     *                     .build())
     *                 .build())
     *             .envVariables(Map.of("port", "8080"))
     *             .deleteServiceOnDestroy(false)
     *             .build());
     * 
     *         // Monitors the default AppEngine service
     *         final var srv = MonitoringFunctions.getAppEngineService(GetAppEngineServiceArgs.builder()
     *             .moduleId(myapp.service())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppEngineServiceResult> getAppEngineService(GetAppEngineServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getAppEngineService:getAppEngineService", TypeShape.of(GetAppEngineServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An App Engine monitoring service is automatically created by GCP to monitor
     * App Engine services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring App Engine Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.BucketObject;
     * import com.pulumi.gcp.storage.BucketObjectArgs;
     * import com.pulumi.gcp.appengine.StandardAppVersion;
     * import com.pulumi.gcp.appengine.StandardAppVersionArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
     * import com.pulumi.asset.FileAsset;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var bucket = new Bucket("bucket", BucketArgs.builder()
     *             .name("appengine-static-content")
     *             .location("US")
     *             .build());
     * 
     *         var object = new BucketObject("object", BucketObjectArgs.builder()
     *             .name("hello-world.zip")
     *             .bucket(bucket.name())
     *             .source(new FileAsset("./test-fixtures/hello-world.zip"))
     *             .build());
     * 
     *         var myapp = new StandardAppVersion("myapp", StandardAppVersionArgs.builder()
     *             .versionId("v1")
     *             .service("myapp")
     *             .runtime("nodejs20")
     *             .entrypoint(StandardAppVersionEntrypointArgs.builder()
     *                 .shell("node ./app.js")
     *                 .build())
     *             .deployment(StandardAppVersionDeploymentArgs.builder()
     *                 .zip(StandardAppVersionDeploymentZipArgs.builder()
     *                     .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
     *                         var bucketName = values.t1;
     *                         var objectName = values.t2;
     *                         return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
     *                     }))
     *                     .build())
     *                 .build())
     *             .envVariables(Map.of("port", "8080"))
     *             .deleteServiceOnDestroy(false)
     *             .build());
     * 
     *         // Monitors the default AppEngine service
     *         final var srv = MonitoringFunctions.getAppEngineService(GetAppEngineServiceArgs.builder()
     *             .moduleId(myapp.service())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppEngineServiceResult> getAppEngineService(GetAppEngineServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getAppEngineService:getAppEngineService", TypeShape.of(GetAppEngineServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An App Engine monitoring service is automatically created by GCP to monitor
     * App Engine services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring App Engine Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.BucketObject;
     * import com.pulumi.gcp.storage.BucketObjectArgs;
     * import com.pulumi.gcp.appengine.StandardAppVersion;
     * import com.pulumi.gcp.appengine.StandardAppVersionArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
     * import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetAppEngineServiceArgs;
     * import com.pulumi.asset.FileAsset;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var bucket = new Bucket("bucket", BucketArgs.builder()
     *             .name("appengine-static-content")
     *             .location("US")
     *             .build());
     * 
     *         var object = new BucketObject("object", BucketObjectArgs.builder()
     *             .name("hello-world.zip")
     *             .bucket(bucket.name())
     *             .source(new FileAsset("./test-fixtures/hello-world.zip"))
     *             .build());
     * 
     *         var myapp = new StandardAppVersion("myapp", StandardAppVersionArgs.builder()
     *             .versionId("v1")
     *             .service("myapp")
     *             .runtime("nodejs20")
     *             .entrypoint(StandardAppVersionEntrypointArgs.builder()
     *                 .shell("node ./app.js")
     *                 .build())
     *             .deployment(StandardAppVersionDeploymentArgs.builder()
     *                 .zip(StandardAppVersionDeploymentZipArgs.builder()
     *                     .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
     *                         var bucketName = values.t1;
     *                         var objectName = values.t2;
     *                         return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
     *                     }))
     *                     .build())
     *                 .build())
     *             .envVariables(Map.of("port", "8080"))
     *             .deleteServiceOnDestroy(false)
     *             .build());
     * 
     *         // Monitors the default AppEngine service
     *         final var srv = MonitoringFunctions.getAppEngineService(GetAppEngineServiceArgs.builder()
     *             .moduleId(myapp.service())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAppEngineServiceResult> getAppEngineServicePlain(GetAppEngineServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getAppEngineService:getAppEngineService", TypeShape.of(GetAppEngineServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Cluster Istio monitoring service is automatically created by GCP to monitor
     * Cluster Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Cluster Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default ClusterIstio service
     *         final var default = MonitoringFunctions.getClusterIstioService(GetClusterIstioServiceArgs.builder()
     *             .location("us-west2-a")
     *             .clusterName("west")
     *             .serviceNamespace("istio-system")
     *             .serviceName("istio-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterIstioServiceResult> getClusterIstioService(GetClusterIstioServiceArgs args) {
        return getClusterIstioService(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Cluster Istio monitoring service is automatically created by GCP to monitor
     * Cluster Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Cluster Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default ClusterIstio service
     *         final var default = MonitoringFunctions.getClusterIstioService(GetClusterIstioServiceArgs.builder()
     *             .location("us-west2-a")
     *             .clusterName("west")
     *             .serviceNamespace("istio-system")
     *             .serviceName("istio-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterIstioServiceResult> getClusterIstioServicePlain(GetClusterIstioServicePlainArgs args) {
        return getClusterIstioServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Cluster Istio monitoring service is automatically created by GCP to monitor
     * Cluster Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Cluster Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default ClusterIstio service
     *         final var default = MonitoringFunctions.getClusterIstioService(GetClusterIstioServiceArgs.builder()
     *             .location("us-west2-a")
     *             .clusterName("west")
     *             .serviceNamespace("istio-system")
     *             .serviceName("istio-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterIstioServiceResult> getClusterIstioService(GetClusterIstioServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getClusterIstioService:getClusterIstioService", TypeShape.of(GetClusterIstioServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Cluster Istio monitoring service is automatically created by GCP to monitor
     * Cluster Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Cluster Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default ClusterIstio service
     *         final var default = MonitoringFunctions.getClusterIstioService(GetClusterIstioServiceArgs.builder()
     *             .location("us-west2-a")
     *             .clusterName("west")
     *             .serviceNamespace("istio-system")
     *             .serviceName("istio-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterIstioServiceResult> getClusterIstioService(GetClusterIstioServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getClusterIstioService:getClusterIstioService", TypeShape.of(GetClusterIstioServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Cluster Istio monitoring service is automatically created by GCP to monitor
     * Cluster Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Cluster Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetClusterIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default ClusterIstio service
     *         final var default = MonitoringFunctions.getClusterIstioService(GetClusterIstioServiceArgs.builder()
     *             .location("us-west2-a")
     *             .clusterName("west")
     *             .serviceNamespace("istio-system")
     *             .serviceName("istio-policy")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterIstioServiceResult> getClusterIstioServicePlain(GetClusterIstioServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getClusterIstioService:getClusterIstioService", TypeShape.of(GetClusterIstioServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * A monitoring Istio Canonical Service is automatically created by GCP to monitor
     * Istio Canonical Services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Istio Canonical Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getIstioCanonicalService(GetIstioCanonicalServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .canonicalServiceNamespace("istio-system")
     *             .canonicalService("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIstioCanonicalServiceResult> getIstioCanonicalService(GetIstioCanonicalServiceArgs args) {
        return getIstioCanonicalService(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * A monitoring Istio Canonical Service is automatically created by GCP to monitor
     * Istio Canonical Services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Istio Canonical Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getIstioCanonicalService(GetIstioCanonicalServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .canonicalServiceNamespace("istio-system")
     *             .canonicalService("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIstioCanonicalServiceResult> getIstioCanonicalServicePlain(GetIstioCanonicalServicePlainArgs args) {
        return getIstioCanonicalServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * A monitoring Istio Canonical Service is automatically created by GCP to monitor
     * Istio Canonical Services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Istio Canonical Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getIstioCanonicalService(GetIstioCanonicalServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .canonicalServiceNamespace("istio-system")
     *             .canonicalService("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIstioCanonicalServiceResult> getIstioCanonicalService(GetIstioCanonicalServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService", TypeShape.of(GetIstioCanonicalServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * A monitoring Istio Canonical Service is automatically created by GCP to monitor
     * Istio Canonical Services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Istio Canonical Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getIstioCanonicalService(GetIstioCanonicalServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .canonicalServiceNamespace("istio-system")
     *             .canonicalService("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIstioCanonicalServiceResult> getIstioCanonicalService(GetIstioCanonicalServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService", TypeShape.of(GetIstioCanonicalServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * A monitoring Istio Canonical Service is automatically created by GCP to monitor
     * Istio Canonical Services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Istio Canonical Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetIstioCanonicalServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getIstioCanonicalService(GetIstioCanonicalServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .canonicalServiceNamespace("istio-system")
     *             .canonicalService("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIstioCanonicalServiceResult> getIstioCanonicalServicePlain(GetIstioCanonicalServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getIstioCanonicalService:getIstioCanonicalService", TypeShape.of(GetIstioCanonicalServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Mesh Istio monitoring service is automatically created by GCP to monitor
     * Mesh Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Mesh Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getMeshIstioService(GetMeshIstioServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .serviceNamespace("istio-system")
     *             .serviceName("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMeshIstioServiceResult> getMeshIstioService(GetMeshIstioServiceArgs args) {
        return getMeshIstioService(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Mesh Istio monitoring service is automatically created by GCP to monitor
     * Mesh Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Mesh Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getMeshIstioService(GetMeshIstioServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .serviceNamespace("istio-system")
     *             .serviceName("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMeshIstioServiceResult> getMeshIstioServicePlain(GetMeshIstioServicePlainArgs args) {
        return getMeshIstioServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Mesh Istio monitoring service is automatically created by GCP to monitor
     * Mesh Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Mesh Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getMeshIstioService(GetMeshIstioServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .serviceNamespace("istio-system")
     *             .serviceName("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMeshIstioServiceResult> getMeshIstioService(GetMeshIstioServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getMeshIstioService:getMeshIstioService", TypeShape.of(GetMeshIstioServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Mesh Istio monitoring service is automatically created by GCP to monitor
     * Mesh Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Mesh Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getMeshIstioService(GetMeshIstioServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .serviceNamespace("istio-system")
     *             .serviceName("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMeshIstioServiceResult> getMeshIstioService(GetMeshIstioServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getMeshIstioService:getMeshIstioService", TypeShape.of(GetMeshIstioServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A Monitoring Service is the root resource under which operational aspects of a
     * generic service are accessible. A service is some discrete, autonomous, and
     * network-accessible unit, designed to solve an individual concern
     * 
     * An Mesh Istio monitoring service is automatically created by GCP to monitor
     * Mesh Istio services.
     * 
     * To get more information about Service, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
     * * How-to Guides
     *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Monitoring Mesh Istio Service
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetMeshIstioServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Monitors the default MeshIstio service
     *         final var default = MonitoringFunctions.getMeshIstioService(GetMeshIstioServiceArgs.builder()
     *             .meshUid("proj-573164786102")
     *             .serviceNamespace("istio-system")
     *             .serviceName("prometheus")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMeshIstioServiceResult> getMeshIstioServicePlain(GetMeshIstioServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getMeshIstioService:getMeshIstioService", TypeShape.of(GetMeshIstioServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationChannelResult> getNotificationChannel() {
        return getNotificationChannel(GetNotificationChannelArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationChannelResult> getNotificationChannelPlain() {
        return getNotificationChannelPlain(GetNotificationChannelPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationChannelResult> getNotificationChannel(GetNotificationChannelArgs args) {
        return getNotificationChannel(args, InvokeOptions.Empty);
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationChannelResult> getNotificationChannelPlain(GetNotificationChannelPlainArgs args) {
        return getNotificationChannelPlain(args, InvokeOptions.Empty);
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationChannelResult> getNotificationChannel(GetNotificationChannelArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getNotificationChannel:getNotificationChannel", TypeShape.of(GetNotificationChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNotificationChannelResult> getNotificationChannel(GetNotificationChannelArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getNotificationChannel:getNotificationChannel", TypeShape.of(GetNotificationChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * A NotificationChannel is a medium through which an alert is delivered
     * when a policy violation is detected. Examples of channels include email, SMS,
     * and third-party messaging applications. Fields containing sensitive information
     * like authentication tokens or contact info are only partially populated on retrieval.
     * 
     * To get more information about NotificationChannel, see:
     * 
     * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannels)
     * * How-to Guides
     *     * [Notification Options](https://cloud.google.com/monitoring/support/notification-options)
     *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
     * 
     * ## Example Usage
     * 
     * ### Notification Channel Basic
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import com.pulumi.gcp.monitoring.inputs.GetNotificationChannelArgs;
     * import com.pulumi.gcp.monitoring.AlertPolicy;
     * import com.pulumi.gcp.monitoring.AlertPolicyArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionArgs;
     * import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionThresholdArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = MonitoringFunctions.getNotificationChannel(GetNotificationChannelArgs.builder()
     *             .displayName("Test Notification Channel")
     *             .build());
     * 
     *         var alertPolicy = new AlertPolicy("alertPolicy", AlertPolicyArgs.builder()
     *             .displayName("My Alert Policy")
     *             .notificationChannels(basic.name())
     *             .combiner("OR")
     *             .conditions(AlertPolicyConditionArgs.builder()
     *                 .displayName("test condition")
     *                 .conditionThreshold(AlertPolicyConditionConditionThresholdArgs.builder()
     *                     .filter("metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\" AND resource.type=\"gce_instance\"")
     *                     .duration("60s")
     *                     .comparison("COMPARISON_GT")
     *                     .aggregations(AlertPolicyConditionConditionThresholdAggregationArgs.builder()
     *                         .alignmentPeriod("60s")
     *                         .perSeriesAligner("ALIGN_RATE")
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNotificationChannelResult> getNotificationChannelPlain(GetNotificationChannelPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getNotificationChannel:getNotificationChannel", TypeShape.of(GetNotificationChannelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the value and metadata from a Secret Manager secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions). If you don&#39;t need the metadata (i.e., if you want to use a more limited role to access the secret version only), see also the gcp.secretmanager.getSecretVersionAccess datasource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
     * import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = SecretmanagerFunctions.getSecretVersion(GetSecretVersionArgs.builder()
     *             .secret("my-secret")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion
     * 
     */
    @Deprecated /* gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion */
    public static Output<GetSecretVersionResult> getSecretVersion(GetSecretVersionArgs args) {
        return getSecretVersion(args, InvokeOptions.Empty);
    }
    /**
     * Get the value and metadata from a Secret Manager secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions). If you don&#39;t need the metadata (i.e., if you want to use a more limited role to access the secret version only), see also the gcp.secretmanager.getSecretVersionAccess datasource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
     * import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = SecretmanagerFunctions.getSecretVersion(GetSecretVersionArgs.builder()
     *             .secret("my-secret")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion
     * 
     */
    @Deprecated /* gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion */
    public static CompletableFuture<GetSecretVersionResult> getSecretVersionPlain(GetSecretVersionPlainArgs args) {
        return getSecretVersionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the value and metadata from a Secret Manager secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions). If you don&#39;t need the metadata (i.e., if you want to use a more limited role to access the secret version only), see also the gcp.secretmanager.getSecretVersionAccess datasource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
     * import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = SecretmanagerFunctions.getSecretVersion(GetSecretVersionArgs.builder()
     *             .secret("my-secret")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion
     * 
     */
    @Deprecated /* gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion */
    public static Output<GetSecretVersionResult> getSecretVersion(GetSecretVersionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getSecretVersion:getSecretVersion", TypeShape.of(GetSecretVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the value and metadata from a Secret Manager secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions). If you don&#39;t need the metadata (i.e., if you want to use a more limited role to access the secret version only), see also the gcp.secretmanager.getSecretVersionAccess datasource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
     * import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = SecretmanagerFunctions.getSecretVersion(GetSecretVersionArgs.builder()
     *             .secret("my-secret")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion
     * 
     */
    @Deprecated /* gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion */
    public static Output<GetSecretVersionResult> getSecretVersion(GetSecretVersionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getSecretVersion:getSecretVersion", TypeShape.of(GetSecretVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the value and metadata from a Secret Manager secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions). If you don&#39;t need the metadata (i.e., if you want to use a more limited role to access the secret version only), see also the gcp.secretmanager.getSecretVersionAccess datasource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
     * import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var basic = SecretmanagerFunctions.getSecretVersion(GetSecretVersionArgs.builder()
     *             .secret("my-secret")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion
     * 
     */
    @Deprecated /* gcp.monitoring.getSecretVersion has been deprecated in favor of gcp.secretmanager.getSecretVersion */
    public static CompletableFuture<GetSecretVersionResult> getSecretVersionPlain(GetSecretVersionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getSecretVersion:getSecretVersion", TypeShape.of(GetSecretVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUptimeCheckIPsResult> getUptimeCheckIPs() {
        return getUptimeCheckIPs(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUptimeCheckIPsResult> getUptimeCheckIPsPlain() {
        return getUptimeCheckIPsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUptimeCheckIPsResult> getUptimeCheckIPs(InvokeArgs args) {
        return getUptimeCheckIPs(args, InvokeOptions.Empty);
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUptimeCheckIPsResult> getUptimeCheckIPsPlain(InvokeArgs args) {
        return getUptimeCheckIPsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUptimeCheckIPsResult> getUptimeCheckIPs(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs", TypeShape.of(GetUptimeCheckIPsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUptimeCheckIPsResult> getUptimeCheckIPs(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs", TypeShape.of(GetUptimeCheckIPsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns the list of IP addresses that checkers run from. For more information see
     * the [official documentation](https://cloud.google.com/monitoring/uptime-checks#get-ips).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.monitoring.MonitoringFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ips = MonitoringFunctions.getUptimeCheckIPs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("ipList", ips.uptimeCheckIps());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUptimeCheckIPsResult> getUptimeCheckIPsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:monitoring/getUptimeCheckIPs:getUptimeCheckIPs", TypeShape.of(GetUptimeCheckIPsResult.class), args, Utilities.withVersion(options));
    }
}
