// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.composer.outputs.GetImageVersionsImageVersion;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageVersionsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of composer image versions available in the given project and location. Each `image_version` contains:
     * 
     */
    private List<GetImageVersionsImageVersion> imageVersions;
    private String project;
    private String region;

    private GetImageVersionsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of composer image versions available in the given project and location. Each `image_version` contains:
     * 
     */
    public List<GetImageVersionsImageVersion> imageVersions() {
        return this.imageVersions;
    }
    public String project() {
        return this.project;
    }
    public String region() {
        return this.region;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<GetImageVersionsImageVersion> imageVersions;
        private String project;
        private String region;
        public Builder() {}
        public Builder(GetImageVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.imageVersions = defaults.imageVersions;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageVersions(List<GetImageVersionsImageVersion> imageVersions) {
            if (imageVersions == null) {
              throw new MissingRequiredPropertyException("GetImageVersionsResult", "imageVersions");
            }
            this.imageVersions = imageVersions;
            return this;
        }
        public Builder imageVersions(GetImageVersionsImageVersion... imageVersions) {
            return imageVersions(List.of(imageVersions));
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetImageVersionsResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetImageVersionsResult", "region");
            }
            this.region = region;
            return this;
        }
        public GetImageVersionsResult build() {
            final var _resultValue = new GetImageVersionsResult();
            _resultValue.id = id;
            _resultValue.imageVersions = imageVersions;
            _resultValue.project = project;
            _resultValue.region = region;
            return _resultValue;
        }
    }
}
