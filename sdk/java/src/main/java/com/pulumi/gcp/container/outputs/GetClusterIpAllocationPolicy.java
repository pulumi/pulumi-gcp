// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterIpAllocationPolicyAdditionalPodRangesConfig;
import com.pulumi.gcp.container.outputs.GetClusterIpAllocationPolicyPodCidrOverprovisionConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterIpAllocationPolicy {
    private List<GetClusterIpAllocationPolicyAdditionalPodRangesConfig> additionalPodRangesConfigs;
    private String clusterIpv4CidrBlock;
    private String clusterSecondaryRangeName;
    private List<GetClusterIpAllocationPolicyPodCidrOverprovisionConfig> podCidrOverprovisionConfigs;
    private String servicesIpv4CidrBlock;
    private String servicesSecondaryRangeName;
    private String stackType;

    private GetClusterIpAllocationPolicy() {}
    public List<GetClusterIpAllocationPolicyAdditionalPodRangesConfig> additionalPodRangesConfigs() {
        return this.additionalPodRangesConfigs;
    }
    public String clusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock;
    }
    public String clusterSecondaryRangeName() {
        return this.clusterSecondaryRangeName;
    }
    public List<GetClusterIpAllocationPolicyPodCidrOverprovisionConfig> podCidrOverprovisionConfigs() {
        return this.podCidrOverprovisionConfigs;
    }
    public String servicesIpv4CidrBlock() {
        return this.servicesIpv4CidrBlock;
    }
    public String servicesSecondaryRangeName() {
        return this.servicesSecondaryRangeName;
    }
    public String stackType() {
        return this.stackType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterIpAllocationPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterIpAllocationPolicyAdditionalPodRangesConfig> additionalPodRangesConfigs;
        private String clusterIpv4CidrBlock;
        private String clusterSecondaryRangeName;
        private List<GetClusterIpAllocationPolicyPodCidrOverprovisionConfig> podCidrOverprovisionConfigs;
        private String servicesIpv4CidrBlock;
        private String servicesSecondaryRangeName;
        private String stackType;
        public Builder() {}
        public Builder(GetClusterIpAllocationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalPodRangesConfigs = defaults.additionalPodRangesConfigs;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.clusterSecondaryRangeName = defaults.clusterSecondaryRangeName;
    	      this.podCidrOverprovisionConfigs = defaults.podCidrOverprovisionConfigs;
    	      this.servicesIpv4CidrBlock = defaults.servicesIpv4CidrBlock;
    	      this.servicesSecondaryRangeName = defaults.servicesSecondaryRangeName;
    	      this.stackType = defaults.stackType;
        }

        @CustomType.Setter
        public Builder additionalPodRangesConfigs(List<GetClusterIpAllocationPolicyAdditionalPodRangesConfig> additionalPodRangesConfigs) {
            if (additionalPodRangesConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "additionalPodRangesConfigs");
            }
            this.additionalPodRangesConfigs = additionalPodRangesConfigs;
            return this;
        }
        public Builder additionalPodRangesConfigs(GetClusterIpAllocationPolicyAdditionalPodRangesConfig... additionalPodRangesConfigs) {
            return additionalPodRangesConfigs(List.of(additionalPodRangesConfigs));
        }
        @CustomType.Setter
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            if (clusterIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "clusterIpv4CidrBlock");
            }
            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder clusterSecondaryRangeName(String clusterSecondaryRangeName) {
            if (clusterSecondaryRangeName == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "clusterSecondaryRangeName");
            }
            this.clusterSecondaryRangeName = clusterSecondaryRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder podCidrOverprovisionConfigs(List<GetClusterIpAllocationPolicyPodCidrOverprovisionConfig> podCidrOverprovisionConfigs) {
            if (podCidrOverprovisionConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "podCidrOverprovisionConfigs");
            }
            this.podCidrOverprovisionConfigs = podCidrOverprovisionConfigs;
            return this;
        }
        public Builder podCidrOverprovisionConfigs(GetClusterIpAllocationPolicyPodCidrOverprovisionConfig... podCidrOverprovisionConfigs) {
            return podCidrOverprovisionConfigs(List.of(podCidrOverprovisionConfigs));
        }
        @CustomType.Setter
        public Builder servicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
            if (servicesIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "servicesIpv4CidrBlock");
            }
            this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder servicesSecondaryRangeName(String servicesSecondaryRangeName) {
            if (servicesSecondaryRangeName == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "servicesSecondaryRangeName");
            }
            this.servicesSecondaryRangeName = servicesSecondaryRangeName;
            return this;
        }
        @CustomType.Setter
        public Builder stackType(String stackType) {
            if (stackType == null) {
              throw new MissingRequiredPropertyException("GetClusterIpAllocationPolicy", "stackType");
            }
            this.stackType = stackType;
            return this;
        }
        public GetClusterIpAllocationPolicy build() {
            final var _resultValue = new GetClusterIpAllocationPolicy();
            _resultValue.additionalPodRangesConfigs = additionalPodRangesConfigs;
            _resultValue.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            _resultValue.clusterSecondaryRangeName = clusterSecondaryRangeName;
            _resultValue.podCidrOverprovisionConfigs = podCidrOverprovisionConfigs;
            _resultValue.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            _resultValue.servicesSecondaryRangeName = servicesSecondaryRangeName;
            _resultValue.stackType = stackType;
            return _resultValue;
        }
    }
}
