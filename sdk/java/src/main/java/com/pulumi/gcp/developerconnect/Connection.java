// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.developerconnect.ConnectionArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionState;
import com.pulumi.gcp.developerconnect.outputs.ConnectionBitbucketCloudConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionBitbucketDataCenterConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionCryptoKeyConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGithubConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGithubEnterpriseConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGitlabConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGitlabEnterpriseConfig;
import com.pulumi.gcp.developerconnect.outputs.ConnectionInstallationState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A connection for GitHub, GitHub Enterprise, GitLab, and GitLab Enterprise.
 * 
 * To get more information about Connection, see:
 * 
 * * [API documentation](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/developer-connect/docs/overview)
 * 
 * ## Example Usage
 * 
 * ### Developer Connect Connection New
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Setup permissions. Only needed once per project
 *         var devconnect_p4sa = new ServiceIdentity("devconnect-p4sa", ServiceIdentityArgs.builder()
 *             .service("developerconnect.googleapis.com")
 *             .build());
 * 
 *         var devconnect_secret = new IAMMember("devconnect-secret", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/secretmanager.admin")
 *             .member(devconnect_p4sa.member())
 *             .build());
 * 
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection-new")
 *             .githubConfig(ConnectionGithubConfigArgs.builder()
 *                 .githubApp("FIREBASE")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(devconnect_secret)
 *                 .build());
 * 
 *         ctx.export("nextSteps", my_connection.installationStates());
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Existing Credentials
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection-cred")
 *             .githubConfig(ConnectionGithubConfigArgs.builder()
 *                 .githubApp("DEVELOPER_CONNECT")
 *                 .authorizerCredential(ConnectionGithubConfigAuthorizerCredentialArgs.builder()
 *                     .oauthTokenSecretVersion("projects/your-project/secrets/your-secret-id/versions/latest")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         ctx.export("nextSteps", my_connection.installationStates());
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Existing Installation
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamPolicy;
 * import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var github_token_secret = new Secret("github-token-secret", SecretArgs.builder()
 *             .secretId("github-token-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto()
 *                 .build())
 *             .build());
 * 
 *         var github_token_secret_version = new SecretVersion("github-token-secret-version", SecretVersionArgs.builder()
 *             .secret(github_token_secret.id())
 *             .secretData(StdFunctions.file(FileArgs.builder()
 *                 .input("my-github-token.txt")
 *                 .build()).result())
 *             .build());
 * 
 *         var devconnect_p4sa = new ServiceIdentity("devconnect-p4sa", ServiceIdentityArgs.builder()
 *             .service("developerconnect.googleapis.com")
 *             .build());
 * 
 *         final var p4sa-secretAccessor = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
 *             .bindings(GetIAMPolicyBindingArgs.builder()
 *                 .role("roles/secretmanager.secretAccessor")
 *                 .members(devconnect_p4sa.member())
 *                 .build())
 *             .build());
 * 
 *         var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
 *             .secretId(github_token_secret.secretId())
 *             .policyData(p4sa_secretAccessor.applyValue(p4sa_secretAccessor -> p4sa_secretAccessor.policyData()))
 *             .build());
 * 
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("my-connection")
 *             .githubConfig(ConnectionGithubConfigArgs.builder()
 *                 .githubApp("DEVELOPER_CONNECT")
 *                 .appInstallationId(123123)
 *                 .authorizerCredential(ConnectionGithubConfigAuthorizerCredentialArgs.builder()
 *                     .oauthTokenSecretVersion(github_token_secret_version.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Github
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection")
 *             .githubConfig(ConnectionGithubConfigArgs.builder()
 *                 .githubApp("DEVELOPER_CONNECT")
 *                 .authorizerCredential(ConnectionGithubConfigAuthorizerCredentialArgs.builder()
 *                     .oauthTokenSecretVersion("projects/devconnect-terraform-creds/secrets/tf-test-do-not-change-github-oauthtoken-e0b9e7/versions/1")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Github Doc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamPolicy;
 * import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var github_token_secret = new Secret("github-token-secret", SecretArgs.builder()
 *             .secretId("github-token-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto()
 *                 .build())
 *             .build());
 * 
 *         var github_token_secret_version = new SecretVersion("github-token-secret-version", SecretVersionArgs.builder()
 *             .secret(github_token_secret.id())
 *             .secretData(StdFunctions.file(FileArgs.builder()
 *                 .input("my-github-token.txt")
 *                 .build()).result())
 *             .build());
 * 
 *         final var p4sa-secretAccessor = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
 *             .bindings(GetIAMPolicyBindingArgs.builder()
 *                 .role("roles/secretmanager.secretAccessor")
 *                 .members("serviceAccount:service-123456789}{@literal @}{@code gcp-sa-devconnect.iam.gserviceaccount.com")
 *                 .build())
 *             .build());
 * 
 *         var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
 *             .secretId(github_token_secret.secretId())
 *             .policyData(p4sa_secretAccessor.policyData())
 *             .build());
 * 
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("my-connection")
 *             .githubConfig(ConnectionGithubConfigArgs.builder()
 *                 .githubApp("DEVELOPER_CONNECT")
 *                 .appInstallationId(123123)
 *                 .authorizerCredential(ConnectionGithubConfigAuthorizerCredentialArgs.builder()
 *                     .oauthTokenSecretVersion(github_token_secret_version.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Github Enterprise
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubEnterpriseConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection")
 *             .githubEnterpriseConfig(ConnectionGithubEnterpriseConfigArgs.builder()
 *                 .hostUri("https://ghe.proctor-staging-test.com")
 *                 .appId(864434)
 *                 .privateKeySecretVersion("projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-private-key-f522d2/versions/latest")
 *                 .webhookSecretSecretVersion("projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-webhook-secret-3c806f/versions/latest")
 *                 .appInstallationId(837537)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Github Enterprise Doc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamPolicy;
 * import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubEnterpriseConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var private_key_secret = new Secret("private-key-secret", SecretArgs.builder()
 *             .secretId("ghe-pk-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto()
 *                 .build())
 *             .build());
 * 
 *         var private_key_secret_version = new SecretVersion("private-key-secret-version", SecretVersionArgs.builder()
 *             .secret(private_key_secret.id())
 *             .secretData(StdFunctions.file(FileArgs.builder()
 *                 .input("private-key.pem")
 *                 .build()).result())
 *             .build());
 * 
 *         var webhook_secret_secret = new Secret("webhook-secret-secret", SecretArgs.builder()
 *             .secretId("ghe-token-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto()
 *                 .build())
 *             .build());
 * 
 *         var webhook_secret_secret_version = new SecretVersion("webhook-secret-secret-version", SecretVersionArgs.builder()
 *             .secret(webhook_secret_secret.id())
 *             .secretData("<webhook-secret-data>")
 *             .build());
 * 
 *         final var p4sa-secretAccessor = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
 *             .bindings(GetIAMPolicyBindingArgs.builder()
 *                 .role("roles/secretmanager.secretAccessor")
 *                 .members("serviceAccount:service-123456789}{@literal @}{@code gcp-sa-devconnect.iam.gserviceaccount.com")
 *                 .build())
 *             .build());
 * 
 *         var policy_pk = new SecretIamPolicy("policy-pk", SecretIamPolicyArgs.builder()
 *             .secretId(private_key_secret.secretId())
 *             .policyData(p4sa_secretAccessor.policyData())
 *             .build());
 * 
 *         var policy_whs = new SecretIamPolicy("policy-whs", SecretIamPolicyArgs.builder()
 *             .secretId(webhook_secret_secret.secretId())
 *             .policyData(p4sa_secretAccessor.policyData())
 *             .build());
 * 
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("my-connection")
 *             .githubEnterpriseConfig(ConnectionGithubEnterpriseConfigArgs.builder()
 *                 .hostUri("https://ghe.com")
 *                 .privateKeySecretVersion(private_key_secret_version.id())
 *                 .webhookSecretSecretVersion(webhook_secret_secret_version.id())
 *                 .appId(100)
 *                 .appInstallationId(123123)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     policy_pk,
 *                     policy_whs)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Gitlab
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabConfigReadAuthorizerCredentialArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection")
 *             .gitlabConfig(ConnectionGitlabConfigArgs.builder()
 *                 .webhookSecretSecretVersion("projects/devconnect-terraform-creds/secrets/gitlab-webhook/versions/latest")
 *                 .readAuthorizerCredential(ConnectionGitlabConfigReadAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/gitlab-read-cred/versions/latest")
 *                     .build())
 *                 .authorizerCredential(ConnectionGitlabConfigAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/gitlab-auth-cred/versions/latest")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Gitlab Enterprise
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabEnterpriseConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection")
 *             .gitlabEnterpriseConfig(ConnectionGitlabEnterpriseConfigArgs.builder()
 *                 .hostUri("https://gle-us-central1.gcb-test.com")
 *                 .webhookSecretSecretVersion("projects/devconnect-terraform-creds/secrets/gitlab-enterprise-webhook/versions/latest")
 *                 .readAuthorizerCredential(ConnectionGitlabEnterpriseConfigReadAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/gitlab-enterprise-read-cred/versions/latest")
 *                     .build())
 *                 .authorizerCredential(ConnectionGitlabEnterpriseConfigAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/gitlab-enterprise-auth-cred/versions/latest")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Bbc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketCloudConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketCloudConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection")
 *             .bitbucketCloudConfig(ConnectionBitbucketCloudConfigArgs.builder()
 *                 .workspace("proctor-test")
 *                 .webhookSecretSecretVersion("projects/devconnect-terraform-creds/secrets/bbc-webhook/versions/latest")
 *                 .readAuthorizerCredential(ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/bbc-read-token/versions/latest")
 *                     .build())
 *                 .authorizerCredential(ConnectionBitbucketCloudConfigAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/bbc-auth-token/versions/latest")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Connection Bbdc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.Connection;
 * import com.pulumi.gcp.developerconnect.ConnectionArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs;
 * import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_connection = new Connection("my-connection", ConnectionArgs.builder()
 *             .location("us-central1")
 *             .connectionId("tf-test-connection")
 *             .bitbucketDataCenterConfig(ConnectionBitbucketDataCenterConfigArgs.builder()
 *                 .hostUri("https://bitbucket-us-central.gcb-test.com")
 *                 .webhookSecretSecretVersion("projects/devconnect-terraform-creds/secrets/bbdc-webhook/versions/latest")
 *                 .readAuthorizerCredential(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/bbdc-read-token/versions/latest")
 *                     .build())
 *                 .authorizerCredential(ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs.builder()
 *                     .userTokenSecretVersion("projects/devconnect-terraform-creds/secrets/bbdc-auth-token/versions/latest")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ## Import
 * 
 * Connection can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/connections/{{connection_id}}`
 * 
 * * `{{project}}/{{location}}/{{connection_id}}`
 * 
 * * `{{location}}/{{connection_id}}`
 * 
 * When using the `pulumi import` command, Connection can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:developerconnect/connection:Connection default projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:developerconnect/connection:Connection default {{project}}/{{location}}/{{connection_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:developerconnect/connection:Connection default {{location}}/{{connection_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:developerconnect/connection:Connection")
public class Connection extends com.pulumi.resources.CustomResource {
    /**
     * Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Configuration for connections to an instance of Bitbucket Cloud.
     * Structure is documented below.
     * 
     */
    @Export(name="bitbucketCloudConfig", refs={ConnectionBitbucketCloudConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionBitbucketCloudConfig> bitbucketCloudConfig;

    /**
     * @return Configuration for connections to an instance of Bitbucket Cloud.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionBitbucketCloudConfig>> bitbucketCloudConfig() {
        return Codegen.optional(this.bitbucketCloudConfig);
    }
    /**
     * Configuration for connections to an instance of Bitbucket Data Center.
     * Structure is documented below.
     * 
     */
    @Export(name="bitbucketDataCenterConfig", refs={ConnectionBitbucketDataCenterConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionBitbucketDataCenterConfig> bitbucketDataCenterConfig;

    /**
     * @return Configuration for connections to an instance of Bitbucket Data Center.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionBitbucketDataCenterConfig>> bitbucketDataCenterConfig() {
        return Codegen.optional(this.bitbucketDataCenterConfig);
    }
    /**
     * Required. Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * connection_id from the method_signature of Create RPC
     * 
     * ***
     * 
     */
    @Export(name="connectionId", refs={String.class}, tree="[0]")
    private Output<String> connectionId;

    /**
     * @return Required. Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * connection_id from the method_signature of Create RPC
     * 
     * ***
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }
    /**
     * Output only. [Output only] Create timestamp
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. [Output only] Create timestamp
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The crypto key configuration. This field is used by the Customer-managed
     * encryption keys (CMEK) feature.
     * Structure is documented below.
     * 
     */
    @Export(name="cryptoKeyConfig", refs={ConnectionCryptoKeyConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionCryptoKeyConfig> cryptoKeyConfig;

    /**
     * @return The crypto key configuration. This field is used by the Customer-managed
     * encryption keys (CMEK) feature.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionCryptoKeyConfig>> cryptoKeyConfig() {
        return Codegen.optional(this.cryptoKeyConfig);
    }
    /**
     * Output only. [Output only] Delete timestamp
     * 
     */
    @Export(name="deleteTime", refs={String.class}, tree="[0]")
    private Output<String> deleteTime;

    /**
     * @return Output only. [Output only] Delete timestamp
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    /**
     * Optional. If disabled is set to true, functionality is disabled for this connection.
     * Repository based API methods and webhooks processing for repositories in
     * this connection will be disabled.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Optional. If disabled is set to true, functionality is disabled for this connection.
     * Repository based API methods and webhooks processing for repositories in
     * this connection will be disabled.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> etag;

    /**
     * @return Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    public Output<Optional<String>> etag() {
        return Codegen.optional(this.etag);
    }
    /**
     * Configuration for connections to github.com.
     * Structure is documented below.
     * 
     */
    @Export(name="githubConfig", refs={ConnectionGithubConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionGithubConfig> githubConfig;

    /**
     * @return Configuration for connections to github.com.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionGithubConfig>> githubConfig() {
        return Codegen.optional(this.githubConfig);
    }
    /**
     * Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     * 
     */
    @Export(name="githubEnterpriseConfig", refs={ConnectionGithubEnterpriseConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionGithubEnterpriseConfig> githubEnterpriseConfig;

    /**
     * @return Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionGithubEnterpriseConfig>> githubEnterpriseConfig() {
        return Codegen.optional(this.githubEnterpriseConfig);
    }
    /**
     * Configuration for connections to gitlab.com.
     * Structure is documented below.
     * 
     */
    @Export(name="gitlabConfig", refs={ConnectionGitlabConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionGitlabConfig> gitlabConfig;

    /**
     * @return Configuration for connections to gitlab.com.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionGitlabConfig>> gitlabConfig() {
        return Codegen.optional(this.gitlabConfig);
    }
    /**
     * Configuration for connections to an instance of GitLab Enterprise.
     * Structure is documented below.
     * 
     */
    @Export(name="gitlabEnterpriseConfig", refs={ConnectionGitlabEnterpriseConfig.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionGitlabEnterpriseConfig> gitlabEnterpriseConfig;

    /**
     * @return Configuration for connections to an instance of GitLab Enterprise.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ConnectionGitlabEnterpriseConfig>> gitlabEnterpriseConfig() {
        return Codegen.optional(this.gitlabEnterpriseConfig);
    }
    /**
     * Describes stage and necessary actions to be taken by the
     * user to complete the installation. Used for GitHub and GitHub Enterprise
     * based connections.
     * Structure is documented below.
     * 
     */
    @Export(name="installationStates", refs={List.class,ConnectionInstallationState.class}, tree="[0,1]")
    private Output<List<ConnectionInstallationState>> installationStates;

    /**
     * @return Describes stage and necessary actions to be taken by the
     * user to complete the installation. Used for GitHub and GitHub Enterprise
     * based connections.
     * Structure is documented below.
     * 
     */
    public Output<List<ConnectionInstallationState>> installationStates() {
        return this.installationStates;
    }
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name of the connection, in the format
     * `projects/{project}/locations/{location}/connections/{connection_id}`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of the connection, in the format
     * `projects/{project}/locations/{location}/connections/{connection_id}`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. Set to true when the connection is being set up or updated in the
     * background.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return Output only. Set to true when the connection is being set up or updated in the
     * background.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Output only. A system-assigned unique identifier for a the GitRepositoryLink.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. A system-assigned unique identifier for a the GitRepositoryLink.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Output only. [Output only] Update timestamp
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. [Output only] Update timestamp
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(java.lang.String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(java.lang.String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(java.lang.String name, ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:developerconnect/connection:Connection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Connection(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:developerconnect/connection:Connection", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectionArgs makeArgs(ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
