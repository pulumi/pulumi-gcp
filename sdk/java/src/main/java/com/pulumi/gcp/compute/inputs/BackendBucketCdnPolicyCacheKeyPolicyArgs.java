// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendBucketCdnPolicyCacheKeyPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendBucketCdnPolicyCacheKeyPolicyArgs Empty = new BackendBucketCdnPolicyCacheKeyPolicyArgs();

    /**
     * Allows HTTP request headers (by name) to be used in the
     * cache key.
     * 
     */
    @Import(name="includeHttpHeaders")
    private @Nullable Output<List<String>> includeHttpHeaders;

    /**
     * @return Allows HTTP request headers (by name) to be used in the
     * cache key.
     * 
     */
    public Optional<Output<List<String>>> includeHttpHeaders() {
        return Optional.ofNullable(this.includeHttpHeaders);
    }

    /**
     * Names of query string parameters to include in cache keys.
     * Default parameters are always included. &#39;&amp;&#39; and &#39;=&#39; will
     * be percent encoded and not treated as delimiters.
     * 
     */
    @Import(name="queryStringWhitelists")
    private @Nullable Output<List<String>> queryStringWhitelists;

    /**
     * @return Names of query string parameters to include in cache keys.
     * Default parameters are always included. &#39;&amp;&#39; and &#39;=&#39; will
     * be percent encoded and not treated as delimiters.
     * 
     */
    public Optional<Output<List<String>>> queryStringWhitelists() {
        return Optional.ofNullable(this.queryStringWhitelists);
    }

    private BackendBucketCdnPolicyCacheKeyPolicyArgs() {}

    private BackendBucketCdnPolicyCacheKeyPolicyArgs(BackendBucketCdnPolicyCacheKeyPolicyArgs $) {
        this.includeHttpHeaders = $.includeHttpHeaders;
        this.queryStringWhitelists = $.queryStringWhitelists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendBucketCdnPolicyCacheKeyPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendBucketCdnPolicyCacheKeyPolicyArgs $;

        public Builder() {
            $ = new BackendBucketCdnPolicyCacheKeyPolicyArgs();
        }

        public Builder(BackendBucketCdnPolicyCacheKeyPolicyArgs defaults) {
            $ = new BackendBucketCdnPolicyCacheKeyPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeHttpHeaders Allows HTTP request headers (by name) to be used in the
         * cache key.
         * 
         * @return builder
         * 
         */
        public Builder includeHttpHeaders(@Nullable Output<List<String>> includeHttpHeaders) {
            $.includeHttpHeaders = includeHttpHeaders;
            return this;
        }

        /**
         * @param includeHttpHeaders Allows HTTP request headers (by name) to be used in the
         * cache key.
         * 
         * @return builder
         * 
         */
        public Builder includeHttpHeaders(List<String> includeHttpHeaders) {
            return includeHttpHeaders(Output.of(includeHttpHeaders));
        }

        /**
         * @param includeHttpHeaders Allows HTTP request headers (by name) to be used in the
         * cache key.
         * 
         * @return builder
         * 
         */
        public Builder includeHttpHeaders(String... includeHttpHeaders) {
            return includeHttpHeaders(List.of(includeHttpHeaders));
        }

        /**
         * @param queryStringWhitelists Names of query string parameters to include in cache keys.
         * Default parameters are always included. &#39;&amp;&#39; and &#39;=&#39; will
         * be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringWhitelists(@Nullable Output<List<String>> queryStringWhitelists) {
            $.queryStringWhitelists = queryStringWhitelists;
            return this;
        }

        /**
         * @param queryStringWhitelists Names of query string parameters to include in cache keys.
         * Default parameters are always included. &#39;&amp;&#39; and &#39;=&#39; will
         * be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringWhitelists(List<String> queryStringWhitelists) {
            return queryStringWhitelists(Output.of(queryStringWhitelists));
        }

        /**
         * @param queryStringWhitelists Names of query string parameters to include in cache keys.
         * Default parameters are always included. &#39;&amp;&#39; and &#39;=&#39; will
         * be percent encoded and not treated as delimiters.
         * 
         * @return builder
         * 
         */
        public Builder queryStringWhitelists(String... queryStringWhitelists) {
            return queryStringWhitelists(List.of(queryStringWhitelists));
        }

        public BackendBucketCdnPolicyCacheKeyPolicyArgs build() {
            return $;
        }
    }

}
