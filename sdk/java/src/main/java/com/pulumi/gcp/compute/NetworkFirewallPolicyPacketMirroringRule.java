// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.NetworkFirewallPolicyPacketMirroringRuleArgs;
import com.pulumi.gcp.compute.inputs.NetworkFirewallPolicyPacketMirroringRuleState;
import com.pulumi.gcp.compute.outputs.NetworkFirewallPolicyPacketMirroringRuleMatch;
import com.pulumi.gcp.compute.outputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Compute Network Firewall Policy Packet Mirroring Rule
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.NetworkFirewallPolicy;
 * import com.pulumi.gcp.compute.NetworkFirewallPolicyArgs;
 * import com.pulumi.gcp.networksecurity.MirroringDeploymentGroup;
 * import com.pulumi.gcp.networksecurity.MirroringDeploymentGroupArgs;
 * import com.pulumi.gcp.networksecurity.MirroringEndpointGroup;
 * import com.pulumi.gcp.networksecurity.MirroringEndpointGroupArgs;
 * import com.pulumi.gcp.networksecurity.SecurityProfile;
 * import com.pulumi.gcp.networksecurity.SecurityProfileArgs;
 * import com.pulumi.gcp.networksecurity.inputs.SecurityProfileCustomMirroringProfileArgs;
 * import com.pulumi.gcp.networksecurity.SecurityProfileGroup;
 * import com.pulumi.gcp.networksecurity.SecurityProfileGroupArgs;
 * import com.pulumi.gcp.tags.TagKey;
 * import com.pulumi.gcp.tags.TagKeyArgs;
 * import com.pulumi.gcp.tags.TagValue;
 * import com.pulumi.gcp.tags.TagValueArgs;
 * import com.pulumi.gcp.compute.NetworkFirewallPolicyPacketMirroringRule;
 * import com.pulumi.gcp.compute.NetworkFirewallPolicyPacketMirroringRuleArgs;
 * import com.pulumi.gcp.compute.inputs.NetworkFirewallPolicyPacketMirroringRuleMatchArgs;
 * import com.pulumi.gcp.compute.inputs.NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("fw-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var basicNetworkFirewallPolicy = new NetworkFirewallPolicy("basicNetworkFirewallPolicy", NetworkFirewallPolicyArgs.builder()
 *             .name("fw-policy")
 *             .description("Sample global network firewall policy")
 *             .project("my-project-name")
 *             .build());
 * 
 *         var defaultMirroringDeploymentGroup = new MirroringDeploymentGroup("defaultMirroringDeploymentGroup", MirroringDeploymentGroupArgs.builder()
 *             .mirroringDeploymentGroupId("deployment-group")
 *             .location("global")
 *             .network(default_.id())
 *             .build());
 * 
 *         var defaultMirroringEndpointGroup = new MirroringEndpointGroup("defaultMirroringEndpointGroup", MirroringEndpointGroupArgs.builder()
 *             .mirroringEndpointGroupId("endpoint-group")
 *             .location("global")
 *             .mirroringDeploymentGroup(defaultMirroringDeploymentGroup.id())
 *             .build());
 * 
 *         var defaultSecurityProfile = new SecurityProfile("defaultSecurityProfile", SecurityProfileArgs.builder()
 *             .name("sec-profile")
 *             .parent("organizations/123456789")
 *             .description("my description")
 *             .type("CUSTOM_MIRRORING")
 *             .customMirroringProfile(SecurityProfileCustomMirroringProfileArgs.builder()
 *                 .mirroringEndpointGroup(defaultMirroringEndpointGroup.id())
 *                 .build())
 *             .build());
 * 
 *         var securityProfileGroup1 = new SecurityProfileGroup("securityProfileGroup1", SecurityProfileGroupArgs.builder()
 *             .name("sec-profile-group")
 *             .parent("organizations/123456789")
 *             .description("my description")
 *             .customMirroringProfile(defaultSecurityProfile.id())
 *             .build());
 * 
 *         var secureTagKey1 = new TagKey("secureTagKey1", TagKeyArgs.builder()
 *             .description("Test tag key description")
 *             .parent("organizations/123456789")
 *             .purpose("GCE_FIREWALL")
 *             .shortName("tag-key")
 *             .purposeData(Map.of("network", default_.name().applyValue(_name -> String.format("my-project-name/%s", _name))))
 *             .build());
 * 
 *         var secureTagValue1 = new TagValue("secureTagValue1", TagValueArgs.builder()
 *             .description("Test tag value description.")
 *             .parent(secureTagKey1.id())
 *             .shortName("tag-value")
 *             .build());
 * 
 *         var primary = new NetworkFirewallPolicyPacketMirroringRule("primary", NetworkFirewallPolicyPacketMirroringRuleArgs.builder()
 *             .action("mirror")
 *             .description("This is a simple packet mirroring rule description")
 *             .direction("INGRESS")
 *             .disabled(false)
 *             .firewallPolicy(basicNetworkFirewallPolicy.name())
 *             .priority(1000)
 *             .ruleName("test-rule")
 *             .match(NetworkFirewallPolicyPacketMirroringRuleMatchArgs.builder()
 *                 .srcIpRanges("10.100.0.1/32")
 *                 .layer4Configs(NetworkFirewallPolicyPacketMirroringRuleMatchLayer4ConfigArgs.builder()
 *                     .ipProtocol("all")
 *                     .build())
 *                 .build())
 *             .securityProfileGroup(securityProfileGroup1.id().applyValue(_id -> String.format("//networksecurity.googleapis.com/%s", _id)))
 *             .targetSecureTags(NetworkFirewallPolicyPacketMirroringRuleTargetSecureTagArgs.builder()
 *                 .name(secureTagValue1.name().applyValue(_name -> String.format("tagValues/%s", _name)))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NetworkFirewallPolicyPacketMirroringRule can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}`
 * 
 * * `{{project}}/{{firewall_policy}}/{{priority}}`
 * 
 * * `{{firewall_policy}}/{{priority}}`
 * 
 * When using the `pulumi import` command, NetworkFirewallPolicyPacketMirroringRule can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/packetMirroringRules/{{priority}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{project}}/{{firewall_policy}}/{{priority}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule default {{firewall_policy}}/{{priority}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule")
public class NetworkFirewallPolicyPacketMirroringRule extends com.pulumi.resources.CustomResource {
    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are &#34;mirror&#34;, &#34;do_not_mirror&#34;, &#34;goto_next&#34;.
     * 
     */
    @Export(name="action", refs={String.class}, tree="[0]")
    private Output<String> action;

    /**
     * @return The Action to perform when the client connection triggers the rule. Valid actions are &#34;mirror&#34;, &#34;do_not_mirror&#34;, &#34;goto_next&#34;.
     * 
     */
    public Output<String> action() {
        return this.action;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description for this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description for this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The direction in which this rule applies.
     * Possible values are: `INGRESS`, `EGRESS`.
     * 
     */
    @Export(name="direction", refs={String.class}, tree="[0]")
    private Output<String> direction;

    /**
     * @return The direction in which this rule applies.
     * Possible values are: `INGRESS`, `EGRESS`.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }
    /**
     * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and
     * traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and
     * traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * The firewall policy of the resource.
     * 
     */
    @Export(name="firewallPolicy", refs={String.class}, tree="[0]")
    private Output<String> firewallPolicy;

    /**
     * @return The firewall policy of the resource.
     * 
     */
    public Output<String> firewallPolicy() {
        return this.firewallPolicy;
    }
    /**
     * Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return Type of the resource. Always `compute#packetMirroringRule` for firewall policy packet mirroring rules
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * Structure is documented below.
     * 
     */
    @Export(name="match", refs={NetworkFirewallPolicyPacketMirroringRuleMatch.class}, tree="[0]")
    private Output<NetworkFirewallPolicyPacketMirroringRuleMatch> match;

    /**
     * @return A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * Structure is documented below.
     * 
     */
    public Output<NetworkFirewallPolicyPacketMirroringRuleMatch> match() {
        return this.match;
    }
    /**
     * An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output<Integer> priority;

    /**
     * @return An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * An optional name for the rule. This field is not a unique identifier and can be updated.
     * 
     */
    @Export(name="ruleName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ruleName;

    /**
     * @return An optional name for the rule. This field is not a unique identifier and can be updated.
     * 
     */
    public Output<Optional<String>> ruleName() {
        return Codegen.optional(this.ruleName);
    }
    /**
     * Calculation of the complexity of a single firewall policy rule.
     * 
     */
    @Export(name="ruleTupleCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> ruleTupleCount;

    /**
     * @return Calculation of the complexity of a single firewall policy rule.
     * 
     */
    public Output<Integer> ruleTupleCount() {
        return this.ruleTupleCount;
    }
    /**
     * A fully-qualified URL of a SecurityProfile resource instance. Example:
     * https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
     * Must be specified if action = &#39;mirror&#39; and cannot be specified for other actions.
     * 
     */
    @Export(name="securityProfileGroup", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> securityProfileGroup;

    /**
     * @return A fully-qualified URL of a SecurityProfile resource instance. Example:
     * https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group
     * Must be specified if action = &#39;mirror&#39; and cannot be specified for other actions.
     * 
     */
    public Output<Optional<String>> securityProfileGroup() {
        return Codegen.optional(this.securityProfileGroup);
    }
    /**
     * A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then
     * the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the
     * targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same
     * time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule
     * applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * 
     */
    @Export(name="targetSecureTags", refs={List.class,NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag>> targetSecureTags;

    /**
     * @return A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then
     * the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the
     * targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same
     * time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule
     * applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * 
     */
    public Output<Optional<List<NetworkFirewallPolicyPacketMirroringRuleTargetSecureTag>>> targetSecureTags() {
        return Codegen.optional(this.targetSecureTags);
    }
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted. Can be set only if action = &#39;mirror&#39; and cannot be set
     * for other actions.
     * 
     */
    @Export(name="tlsInspect", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tlsInspect;

    /**
     * @return Boolean flag indicating if the traffic should be TLS decrypted. Can be set only if action = &#39;mirror&#39; and cannot be set
     * for other actions.
     * 
     */
    public Output<Optional<Boolean>> tlsInspect() {
        return Codegen.optional(this.tlsInspect);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkFirewallPolicyPacketMirroringRule(java.lang.String name) {
        this(name, NetworkFirewallPolicyPacketMirroringRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkFirewallPolicyPacketMirroringRule(java.lang.String name, NetworkFirewallPolicyPacketMirroringRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkFirewallPolicyPacketMirroringRule(java.lang.String name, NetworkFirewallPolicyPacketMirroringRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NetworkFirewallPolicyPacketMirroringRule(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkFirewallPolicyPacketMirroringRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/networkFirewallPolicyPacketMirroringRule:NetworkFirewallPolicyPacketMirroringRule", name, state, makeResourceOptions(options, id), false);
    }

    private static NetworkFirewallPolicyPacketMirroringRuleArgs makeArgs(NetworkFirewallPolicyPacketMirroringRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NetworkFirewallPolicyPacketMirroringRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkFirewallPolicyPacketMirroringRule get(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkFirewallPolicyPacketMirroringRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkFirewallPolicyPacketMirroringRule(name, id, state, options);
    }
}
