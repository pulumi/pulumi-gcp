// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMavenArtifactPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMavenArtifactPlainArgs Empty = new GetMavenArtifactPlainArgs();

    /**
     * The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
     * 
     */
    @Import(name="artifactId", required=true)
    private String artifactId;

    /**
     * @return The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
     * 
     */
    public String artifactId() {
        return this.artifactId;
    }

    /**
     * Group ID for the artifact. Example: `com.google.guava`
     * 
     */
    @Import(name="groupId", required=true)
    private String groupId;

    /**
     * @return Group ID for the artifact. Example: `com.google.guava`
     * 
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * The location of the Artifact Registry repository.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location of the Artifact Registry repository.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * The ID of the project that owns the repository. If not provided, the provider-level project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project that owns the repository. If not provided, the provider-level project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID of the repository containing the Maven artifact.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return The ID of the repository containing the Maven artifact.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    private GetMavenArtifactPlainArgs() {}

    private GetMavenArtifactPlainArgs(GetMavenArtifactPlainArgs $) {
        this.artifactId = $.artifactId;
        this.groupId = $.groupId;
        this.location = $.location;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMavenArtifactPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMavenArtifactPlainArgs $;

        public Builder() {
            $ = new GetMavenArtifactPlainArgs();
        }

        public Builder(GetMavenArtifactPlainArgs defaults) {
            $ = new GetMavenArtifactPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactId The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
         * 
         * @return builder
         * 
         */
        public Builder artifactId(String artifactId) {
            $.artifactId = artifactId;
            return this;
        }

        /**
         * @param groupId Group ID for the artifact. Example: `com.google.guava`
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param location The location of the Artifact Registry repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param project The ID of the project that owns the repository. If not provided, the provider-level project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repositoryId The ID of the repository containing the Maven artifact.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        public GetMavenArtifactPlainArgs build() {
            if ($.artifactId == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactPlainArgs", "artifactId");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactPlainArgs", "groupId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactPlainArgs", "location");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactPlainArgs", "repositoryId");
            }
            return $;
        }
    }

}
