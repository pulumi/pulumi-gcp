// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CapacityCommitmentState extends com.pulumi.resources.ResourceArgs {

    public static final CapacityCommitmentState Empty = new CapacityCommitmentState();

    /**
     * The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
     * empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
     * cannot be a dash. Max length is 64 characters. NOTE: this ID won&#39;t be kept if the capacity commitment is split
     * or merged.
     * 
     */
    @Import(name="capacityCommitmentId")
    private @Nullable Output<String> capacityCommitmentId;

    /**
     * @return The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
     * empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
     * cannot be a dash. Max length is 64 characters. NOTE: this ID won&#39;t be kept if the capacity commitment is split
     * or merged.
     * 
     */
    public Optional<Output<String>> capacityCommitmentId() {
        return Optional.ofNullable(this.capacityCommitmentId);
    }

    /**
     * The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
     * 
     */
    @Import(name="commitmentEndTime")
    private @Nullable Output<String> commitmentEndTime;

    /**
     * @return The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
     * 
     */
    public Optional<Output<String>> commitmentEndTime() {
        return Optional.ofNullable(this.commitmentEndTime);
    }

    /**
     * The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
     * 
     */
    @Import(name="commitmentStartTime")
    private @Nullable Output<String> commitmentStartTime;

    /**
     * @return The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
     * 
     */
    public Optional<Output<String>> commitmentStartTime() {
        return Optional.ofNullable(this.commitmentStartTime);
    }

    /**
     * If true, fail the request if another project in the organization has a capacity commitment.
     * 
     */
    @Import(name="enforceSingleAdminProjectPerOrg")
    private @Nullable Output<String> enforceSingleAdminProjectPerOrg;

    /**
     * @return If true, fail the request if another project in the organization has a capacity commitment.
     * 
     */
    public Optional<Output<String>> enforceSingleAdminProjectPerOrg() {
        return Optional.ofNullable(this.enforceSingleAdminProjectPerOrg);
    }

    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Capacity commitment plan. Valid values are FLEX, TRIAL, MONTHLY, ANNUAL
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return Capacity commitment plan. Valid values are FLEX, TRIAL, MONTHLY, ANNUAL
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
     * 
     */
    @Import(name="renewalPlan")
    private @Nullable Output<String> renewalPlan;

    /**
     * @return The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
     * 
     */
    public Optional<Output<String>> renewalPlan() {
        return Optional.ofNullable(this.renewalPlan);
    }

    /**
     * Number of slots in this commitment.
     * 
     */
    @Import(name="slotCount")
    private @Nullable Output<Integer> slotCount;

    /**
     * @return Number of slots in this commitment.
     * 
     */
    public Optional<Output<Integer>> slotCount() {
        return Optional.ofNullable(this.slotCount);
    }

    /**
     * State of the commitment
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the commitment
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private CapacityCommitmentState() {}

    private CapacityCommitmentState(CapacityCommitmentState $) {
        this.capacityCommitmentId = $.capacityCommitmentId;
        this.commitmentEndTime = $.commitmentEndTime;
        this.commitmentStartTime = $.commitmentStartTime;
        this.enforceSingleAdminProjectPerOrg = $.enforceSingleAdminProjectPerOrg;
        this.location = $.location;
        this.name = $.name;
        this.plan = $.plan;
        this.project = $.project;
        this.renewalPlan = $.renewalPlan;
        this.slotCount = $.slotCount;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CapacityCommitmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CapacityCommitmentState $;

        public Builder() {
            $ = new CapacityCommitmentState();
        }

        public Builder(CapacityCommitmentState defaults) {
            $ = new CapacityCommitmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityCommitmentId The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
         * empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
         * cannot be a dash. Max length is 64 characters. NOTE: this ID won&#39;t be kept if the capacity commitment is split
         * or merged.
         * 
         * @return builder
         * 
         */
        public Builder capacityCommitmentId(@Nullable Output<String> capacityCommitmentId) {
            $.capacityCommitmentId = capacityCommitmentId;
            return this;
        }

        /**
         * @param capacityCommitmentId The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is
         * empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character
         * cannot be a dash. Max length is 64 characters. NOTE: this ID won&#39;t be kept if the capacity commitment is split
         * or merged.
         * 
         * @return builder
         * 
         */
        public Builder capacityCommitmentId(String capacityCommitmentId) {
            return capacityCommitmentId(Output.of(capacityCommitmentId));
        }

        /**
         * @param commitmentEndTime The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
         * 
         * @return builder
         * 
         */
        public Builder commitmentEndTime(@Nullable Output<String> commitmentEndTime) {
            $.commitmentEndTime = commitmentEndTime;
            return this;
        }

        /**
         * @param commitmentEndTime The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
         * 
         * @return builder
         * 
         */
        public Builder commitmentEndTime(String commitmentEndTime) {
            return commitmentEndTime(Output.of(commitmentEndTime));
        }

        /**
         * @param commitmentStartTime The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
         * 
         * @return builder
         * 
         */
        public Builder commitmentStartTime(@Nullable Output<String> commitmentStartTime) {
            $.commitmentStartTime = commitmentStartTime;
            return this;
        }

        /**
         * @param commitmentStartTime The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
         * 
         * @return builder
         * 
         */
        public Builder commitmentStartTime(String commitmentStartTime) {
            return commitmentStartTime(Output.of(commitmentStartTime));
        }

        /**
         * @param enforceSingleAdminProjectPerOrg If true, fail the request if another project in the organization has a capacity commitment.
         * 
         * @return builder
         * 
         */
        public Builder enforceSingleAdminProjectPerOrg(@Nullable Output<String> enforceSingleAdminProjectPerOrg) {
            $.enforceSingleAdminProjectPerOrg = enforceSingleAdminProjectPerOrg;
            return this;
        }

        /**
         * @param enforceSingleAdminProjectPerOrg If true, fail the request if another project in the organization has a capacity commitment.
         * 
         * @return builder
         * 
         */
        public Builder enforceSingleAdminProjectPerOrg(String enforceSingleAdminProjectPerOrg) {
            return enforceSingleAdminProjectPerOrg(Output.of(enforceSingleAdminProjectPerOrg));
        }

        /**
         * @param location The geographic location where the transfer config should reside.
         * Examples: US, EU, asia-northeast1. The default value is US.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the transfer config should reside.
         * Examples: US, EU, asia-northeast1. The default value is US.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the capacity commitment, e.g., projects/myproject/locations/US/capacityCommitments/123
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plan Capacity commitment plan. Valid values are FLEX, TRIAL, MONTHLY, ANNUAL
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Capacity commitment plan. Valid values are FLEX, TRIAL, MONTHLY, ANNUAL
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param renewalPlan The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
         * 
         * @return builder
         * 
         */
        public Builder renewalPlan(@Nullable Output<String> renewalPlan) {
            $.renewalPlan = renewalPlan;
            return this;
        }

        /**
         * @param renewalPlan The plan this capacity commitment is converted to after commitmentEndTime passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
         * 
         * @return builder
         * 
         */
        public Builder renewalPlan(String renewalPlan) {
            return renewalPlan(Output.of(renewalPlan));
        }

        /**
         * @param slotCount Number of slots in this commitment.
         * 
         * @return builder
         * 
         */
        public Builder slotCount(@Nullable Output<Integer> slotCount) {
            $.slotCount = slotCount;
            return this;
        }

        /**
         * @param slotCount Number of slots in this commitment.
         * 
         * @return builder
         * 
         */
        public Builder slotCount(Integer slotCount) {
            return slotCount(Output.of(slotCount));
        }

        /**
         * @param state State of the commitment
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the commitment
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public CapacityCommitmentState build() {
            return $;
        }
    }

}
