// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTriggerGitFileSource {
    private String bitbucketServerConfig;
    private String githubEnterpriseConfig;
    private String path;
    private String repoType;
    private String repository;
    private String revision;
    private String uri;

    private GetTriggerGitFileSource() {}
    public String bitbucketServerConfig() {
        return this.bitbucketServerConfig;
    }
    public String githubEnterpriseConfig() {
        return this.githubEnterpriseConfig;
    }
    public String path() {
        return this.path;
    }
    public String repoType() {
        return this.repoType;
    }
    public String repository() {
        return this.repository;
    }
    public String revision() {
        return this.revision;
    }
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerGitFileSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bitbucketServerConfig;
        private String githubEnterpriseConfig;
        private String path;
        private String repoType;
        private String repository;
        private String revision;
        private String uri;
        public Builder() {}
        public Builder(GetTriggerGitFileSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitbucketServerConfig = defaults.bitbucketServerConfig;
    	      this.githubEnterpriseConfig = defaults.githubEnterpriseConfig;
    	      this.path = defaults.path;
    	      this.repoType = defaults.repoType;
    	      this.repository = defaults.repository;
    	      this.revision = defaults.revision;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder bitbucketServerConfig(String bitbucketServerConfig) {
            if (bitbucketServerConfig == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "bitbucketServerConfig");
            }
            this.bitbucketServerConfig = bitbucketServerConfig;
            return this;
        }
        @CustomType.Setter
        public Builder githubEnterpriseConfig(String githubEnterpriseConfig) {
            if (githubEnterpriseConfig == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "githubEnterpriseConfig");
            }
            this.githubEnterpriseConfig = githubEnterpriseConfig;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder repoType(String repoType) {
            if (repoType == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "repoType");
            }
            this.repoType = repoType;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder revision(String revision) {
            if (revision == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "revision");
            }
            this.revision = revision;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetTriggerGitFileSource", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetTriggerGitFileSource build() {
            final var _resultValue = new GetTriggerGitFileSource();
            _resultValue.bitbucketServerConfig = bitbucketServerConfig;
            _resultValue.githubEnterpriseConfig = githubEnterpriseConfig;
            _resultValue.path = path;
            _resultValue.repoType = repoType;
            _resultValue.repository = repository;
            _resultValue.revision = revision;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
