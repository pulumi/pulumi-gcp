// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.gkebackup.outputs.BackupPlanBackupConfigEncryptionKey;
import com.pulumi.gcp.gkebackup.outputs.BackupPlanBackupConfigSelectedApplications;
import com.pulumi.gcp.gkebackup.outputs.BackupPlanBackupConfigSelectedNamespaces;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackupPlanBackupConfig {
    /**
     * @return If True, include all namespaced resources.
     * 
     */
    private @Nullable Boolean allNamespaces;
    /**
     * @return This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34;
     * portion (the Kubernetes resources) of Backups created via this plan.
     * Structure is documented below.
     * 
     */
    private @Nullable BackupPlanBackupConfigEncryptionKey encryptionKey;
    /**
     * @return This flag specifies whether Kubernetes Secret resources should be included
     * when they fall into the scope of Backups.
     * 
     */
    private @Nullable Boolean includeSecrets;
    /**
     * @return This flag specifies whether volume data should be backed up when PVCs are
     * included in the scope of a Backup.
     * 
     */
    private @Nullable Boolean includeVolumeData;
    /**
     * @return A list of namespaced Kubernetes Resources.
     * Structure is documented below.
     * 
     */
    private @Nullable BackupPlanBackupConfigSelectedApplications selectedApplications;
    /**
     * @return If set, include just the resources in the listed namespaces.
     * Structure is documented below.
     * 
     */
    private @Nullable BackupPlanBackupConfigSelectedNamespaces selectedNamespaces;

    private BackupPlanBackupConfig() {}
    /**
     * @return If True, include all namespaced resources.
     * 
     */
    public Optional<Boolean> allNamespaces() {
        return Optional.ofNullable(this.allNamespaces);
    }
    /**
     * @return This defines a customer managed encryption key that will be used to encrypt the &#34;config&#34;
     * portion (the Kubernetes resources) of Backups created via this plan.
     * Structure is documented below.
     * 
     */
    public Optional<BackupPlanBackupConfigEncryptionKey> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }
    /**
     * @return This flag specifies whether Kubernetes Secret resources should be included
     * when they fall into the scope of Backups.
     * 
     */
    public Optional<Boolean> includeSecrets() {
        return Optional.ofNullable(this.includeSecrets);
    }
    /**
     * @return This flag specifies whether volume data should be backed up when PVCs are
     * included in the scope of a Backup.
     * 
     */
    public Optional<Boolean> includeVolumeData() {
        return Optional.ofNullable(this.includeVolumeData);
    }
    /**
     * @return A list of namespaced Kubernetes Resources.
     * Structure is documented below.
     * 
     */
    public Optional<BackupPlanBackupConfigSelectedApplications> selectedApplications() {
        return Optional.ofNullable(this.selectedApplications);
    }
    /**
     * @return If set, include just the resources in the listed namespaces.
     * Structure is documented below.
     * 
     */
    public Optional<BackupPlanBackupConfigSelectedNamespaces> selectedNamespaces() {
        return Optional.ofNullable(this.selectedNamespaces);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupPlanBackupConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allNamespaces;
        private @Nullable BackupPlanBackupConfigEncryptionKey encryptionKey;
        private @Nullable Boolean includeSecrets;
        private @Nullable Boolean includeVolumeData;
        private @Nullable BackupPlanBackupConfigSelectedApplications selectedApplications;
        private @Nullable BackupPlanBackupConfigSelectedNamespaces selectedNamespaces;
        public Builder() {}
        public Builder(BackupPlanBackupConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allNamespaces = defaults.allNamespaces;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.includeSecrets = defaults.includeSecrets;
    	      this.includeVolumeData = defaults.includeVolumeData;
    	      this.selectedApplications = defaults.selectedApplications;
    	      this.selectedNamespaces = defaults.selectedNamespaces;
        }

        @CustomType.Setter
        public Builder allNamespaces(@Nullable Boolean allNamespaces) {
            this.allNamespaces = allNamespaces;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(@Nullable BackupPlanBackupConfigEncryptionKey encryptionKey) {
            this.encryptionKey = encryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder includeSecrets(@Nullable Boolean includeSecrets) {
            this.includeSecrets = includeSecrets;
            return this;
        }
        @CustomType.Setter
        public Builder includeVolumeData(@Nullable Boolean includeVolumeData) {
            this.includeVolumeData = includeVolumeData;
            return this;
        }
        @CustomType.Setter
        public Builder selectedApplications(@Nullable BackupPlanBackupConfigSelectedApplications selectedApplications) {
            this.selectedApplications = selectedApplications;
            return this;
        }
        @CustomType.Setter
        public Builder selectedNamespaces(@Nullable BackupPlanBackupConfigSelectedNamespaces selectedNamespaces) {
            this.selectedNamespaces = selectedNamespaces;
            return this;
        }
        public BackupPlanBackupConfig build() {
            final var o = new BackupPlanBackupConfig();
            o.allNamespaces = allNamespaces;
            o.encryptionKey = encryptionKey;
            o.includeSecrets = includeSecrets;
            o.includeVolumeData = includeVolumeData;
            o.selectedApplications = selectedApplications;
            o.selectedNamespaces = selectedNamespaces;
            return o;
        }
    }
}
