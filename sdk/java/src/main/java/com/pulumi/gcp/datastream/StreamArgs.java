// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
import com.pulumi.gcp.datastream.inputs.StreamBackfillNoneArgs;
import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamArgs Empty = new StreamArgs();

    /**
     * Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * 
     */
    @Import(name="backfillAll")
    private @Nullable Output<StreamBackfillAllArgs> backfillAll;

    /**
     * @return Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * 
     */
    public Optional<Output<StreamBackfillAllArgs>> backfillAll() {
        return Optional.ofNullable(this.backfillAll);
    }

    /**
     * Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    @Import(name="backfillNone")
    private @Nullable Output<StreamBackfillNoneArgs> backfillNone;

    /**
     * @return Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    public Optional<Output<StreamBackfillNoneArgs>> backfillNone() {
        return Optional.ofNullable(this.backfillNone);
    }

    /**
     * Create the stream without validating it.
     * 
     */
    @Import(name="createWithoutValidation")
    private @Nullable Output<Boolean> createWithoutValidation;

    /**
     * @return Create the stream without validating it.
     * 
     */
    public Optional<Output<Boolean>> createWithoutValidation() {
        return Optional.ofNullable(this.createWithoutValidation);
    }

    /**
     * A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be
     * encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Import(name="customerManagedEncryptionKey")
    private @Nullable Output<String> customerManagedEncryptionKey;

    /**
     * @return A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be
     * encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    public Optional<Output<String>> customerManagedEncryptionKey() {
        return Optional.ofNullable(this.customerManagedEncryptionKey);
    }

    /**
     * Desired state of the Stream. Set this field to &#39;RUNNING&#39; to start the stream, and &#39;PAUSED&#39; to pause the stream.
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return Desired state of the Stream. Set this field to &#39;RUNNING&#39; to start the stream, and &#39;PAUSED&#39; to pause the stream.
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationConfig", required=true)
    private Output<StreamDestinationConfigArgs> destinationConfig;

    /**
     * @return Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Output<StreamDestinationConfigArgs> destinationConfig() {
        return this.destinationConfig;
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the location this stream is located in.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The name of the location this stream is located in.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceConfig", required=true)
    private Output<StreamSourceConfigArgs> sourceConfig;

    /**
     * @return Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Output<StreamSourceConfigArgs> sourceConfig() {
        return this.sourceConfig;
    }

    /**
     * The stream identifier.
     * 
     */
    @Import(name="streamId", required=true)
    private Output<String> streamId;

    /**
     * @return The stream identifier.
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    private StreamArgs() {}

    private StreamArgs(StreamArgs $) {
        this.backfillAll = $.backfillAll;
        this.backfillNone = $.backfillNone;
        this.createWithoutValidation = $.createWithoutValidation;
        this.customerManagedEncryptionKey = $.customerManagedEncryptionKey;
        this.desiredState = $.desiredState;
        this.destinationConfig = $.destinationConfig;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.sourceConfig = $.sourceConfig;
        this.streamId = $.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamArgs $;

        public Builder() {
            $ = new StreamArgs();
        }

        public Builder(StreamArgs defaults) {
            $ = new StreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backfillAll Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
         * 
         * @return builder
         * 
         */
        public Builder backfillAll(@Nullable Output<StreamBackfillAllArgs> backfillAll) {
            $.backfillAll = backfillAll;
            return this;
        }

        /**
         * @param backfillAll Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
         * 
         * @return builder
         * 
         */
        public Builder backfillAll(StreamBackfillAllArgs backfillAll) {
            return backfillAll(Output.of(backfillAll));
        }

        /**
         * @param backfillNone Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
         * 
         * @return builder
         * 
         */
        public Builder backfillNone(@Nullable Output<StreamBackfillNoneArgs> backfillNone) {
            $.backfillNone = backfillNone;
            return this;
        }

        /**
         * @param backfillNone Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
         * 
         * @return builder
         * 
         */
        public Builder backfillNone(StreamBackfillNoneArgs backfillNone) {
            return backfillNone(Output.of(backfillNone));
        }

        /**
         * @param createWithoutValidation Create the stream without validating it.
         * 
         * @return builder
         * 
         */
        public Builder createWithoutValidation(@Nullable Output<Boolean> createWithoutValidation) {
            $.createWithoutValidation = createWithoutValidation;
            return this;
        }

        /**
         * @param createWithoutValidation Create the stream without validating it.
         * 
         * @return builder
         * 
         */
        public Builder createWithoutValidation(Boolean createWithoutValidation) {
            return createWithoutValidation(Output.of(createWithoutValidation));
        }

        /**
         * @param customerManagedEncryptionKey A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be
         * encrypted using an internal Stream-specific encryption key provisioned through KMS.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryptionKey(@Nullable Output<String> customerManagedEncryptionKey) {
            $.customerManagedEncryptionKey = customerManagedEncryptionKey;
            return this;
        }

        /**
         * @param customerManagedEncryptionKey A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be
         * encrypted using an internal Stream-specific encryption key provisioned through KMS.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryptionKey(String customerManagedEncryptionKey) {
            return customerManagedEncryptionKey(Output.of(customerManagedEncryptionKey));
        }

        /**
         * @param desiredState Desired state of the Stream. Set this field to &#39;RUNNING&#39; to start the stream, and &#39;PAUSED&#39; to pause the stream.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState Desired state of the Stream. Set this field to &#39;RUNNING&#39; to start the stream, and &#39;PAUSED&#39; to pause the stream.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param destinationConfig Destination connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(Output<StreamDestinationConfigArgs> destinationConfig) {
            $.destinationConfig = destinationConfig;
            return this;
        }

        /**
         * @param destinationConfig Destination connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(StreamDestinationConfigArgs destinationConfig) {
            return destinationConfig(Output.of(destinationConfig));
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
         * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
         * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The name of the location this stream is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this stream is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceConfig Source connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceConfig(Output<StreamSourceConfigArgs> sourceConfig) {
            $.sourceConfig = sourceConfig;
            return this;
        }

        /**
         * @param sourceConfig Source connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceConfig(StreamSourceConfigArgs sourceConfig) {
            return sourceConfig(Output.of(sourceConfig));
        }

        /**
         * @param streamId The stream identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The stream identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public StreamArgs build() {
            if ($.destinationConfig == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "destinationConfig");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "displayName");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "location");
            }
            if ($.sourceConfig == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "sourceConfig");
            }
            if ($.streamId == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "streamId");
            }
            return $;
        }
    }

}
