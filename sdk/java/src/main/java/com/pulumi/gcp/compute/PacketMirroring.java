// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.PacketMirroringArgs;
import com.pulumi.gcp.compute.inputs.PacketMirroringState;
import com.pulumi.gcp.compute.outputs.PacketMirroringCollectorIlb;
import com.pulumi.gcp.compute.outputs.PacketMirroringFilter;
import com.pulumi.gcp.compute.outputs.PacketMirroringMirroredResources;
import com.pulumi.gcp.compute.outputs.PacketMirroringNetwork;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Packet Mirroring mirrors traffic to and from particular VM instances.
 * You can use the collected traffic to help you detect security threats
 * and monitor application performance.
 * 
 * To get more information about PacketMirroring, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/packetMirrorings)
 * * How-to Guides
 *     * [Using Packet Mirroring](https://cloud.google.com/vpc/docs/using-packet-mirroring#creating)
 * 
 * ## Example Usage
 * ### Compute Packet Mirroring Full
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.compute.PacketMirroring;
 * import com.pulumi.gcp.compute.PacketMirroringArgs;
 * import com.pulumi.gcp.compute.inputs.PacketMirroringNetworkArgs;
 * import com.pulumi.gcp.compute.inputs.PacketMirroringCollectorIlbArgs;
 * import com.pulumi.gcp.compute.inputs.PacketMirroringMirroredResourcesArgs;
 * import com.pulumi.gcp.compute.inputs.PacketMirroringFilterArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;);
 * 
 *         var mirror = new Instance(&#34;mirror&#34;, InstanceArgs.builder()        
 *             .machineType(&#34;e2-medium&#34;)
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(&#34;debian-cloud/debian-11&#34;)
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(defaultNetwork.id())
 *                 .accessConfigs()
 *                 .build())
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .network(defaultNetwork.id())
 *             .ipCidrRange(&#34;10.2.0.0/16&#34;)
 *             .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService(&#34;defaultRegionBackendService&#34;, RegionBackendServiceArgs.builder()        
 *             .healthChecks(defaultHealthCheck.id())
 *             .build());
 * 
 *         var defaultForwardingRule = new ForwardingRule(&#34;defaultForwardingRule&#34;, ForwardingRuleArgs.builder()        
 *             .isMirroringCollector(true)
 *             .ipProtocol(&#34;TCP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL&#34;)
 *             .backendService(defaultRegionBackendService.id())
 *             .allPorts(true)
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .networkTier(&#34;PREMIUM&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(defaultSubnetwork)
 *                 .build());
 * 
 *         var foobar = new PacketMirroring(&#34;foobar&#34;, PacketMirroringArgs.builder()        
 *             .description(&#34;bar&#34;)
 *             .network(PacketMirroringNetworkArgs.builder()
 *                 .url(defaultNetwork.id())
 *                 .build())
 *             .collectorIlb(PacketMirroringCollectorIlbArgs.builder()
 *                 .url(defaultForwardingRule.id())
 *                 .build())
 *             .mirroredResources(PacketMirroringMirroredResourcesArgs.builder()
 *                 .tags(&#34;foo&#34;)
 *                 .instances(PacketMirroringMirroredResourcesInstanceArgs.builder()
 *                     .url(mirror.id())
 *                     .build())
 *                 .build())
 *             .filter(PacketMirroringFilterArgs.builder()
 *                 .ipProtocols(&#34;tcp&#34;)
 *                 .cidrRanges(&#34;0.0.0.0/0&#34;)
 *                 .direction(&#34;BOTH&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * PacketMirroring can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/packetMirroring:PacketMirroring default projects/{{project}}/regions/{{region}}/packetMirrorings/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/packetMirroring:PacketMirroring default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/packetMirroring:PacketMirroring default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/packetMirroring:PacketMirroring default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/packetMirroring:PacketMirroring")
public class PacketMirroring extends com.pulumi.resources.CustomResource {
    /**
     * The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
     * that will be used as collector for mirrored traffic. The
     * specified forwarding rule must have is_mirroring_collector
     * set to true.
     * Structure is documented below.
     * 
     */
    @Export(name="collectorIlb", type=PacketMirroringCollectorIlb.class, parameters={})
    private Output<PacketMirroringCollectorIlb> collectorIlb;

    /**
     * @return The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
     * that will be used as collector for mirrored traffic. The
     * specified forwarding rule must have is_mirroring_collector
     * set to true.
     * Structure is documented below.
     * 
     */
    public Output<PacketMirroringCollectorIlb> collectorIlb() {
        return this.collectorIlb;
    }
    /**
     * A human-readable description of the rule.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A human-readable description of the rule.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A filter for mirrored traffic.  If unset, all traffic is mirrored.
     * Structure is documented below.
     * 
     */
    @Export(name="filter", type=PacketMirroringFilter.class, parameters={})
    private Output</* @Nullable */ PacketMirroringFilter> filter;

    /**
     * @return A filter for mirrored traffic.  If unset, all traffic is mirrored.
     * Structure is documented below.
     * 
     */
    public Output<Optional<PacketMirroringFilter>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * A means of specifying which resources to mirror.
     * Structure is documented below.
     * 
     */
    @Export(name="mirroredResources", type=PacketMirroringMirroredResources.class, parameters={})
    private Output<PacketMirroringMirroredResources> mirroredResources;

    /**
     * @return A means of specifying which resources to mirror.
     * Structure is documented below.
     * 
     */
    public Output<PacketMirroringMirroredResources> mirroredResources() {
        return this.mirroredResources;
    }
    /**
     * The name of the packet mirroring rule
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the packet mirroring rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the mirrored VPC network. Only packets in this network
     * will be mirrored. All mirrored VMs should have a NIC in the given
     * network. All mirrored subnetworks should belong to the given network.
     * Structure is documented below.
     * 
     */
    @Export(name="network", type=PacketMirroringNetwork.class, parameters={})
    private Output<PacketMirroringNetwork> network;

    /**
     * @return Specifies the mirrored VPC network. Only packets in this network
     * will be mirrored. All mirrored VMs should have a NIC in the given
     * network. All mirrored subnetworks should belong to the given network.
     * Structure is documented below.
     * 
     */
    public Output<PacketMirroringNetwork> network() {
        return this.network;
    }
    /**
     * Since only one rule can be active at a time, priority is
     * used to break ties in the case of two rules that apply to
     * the same instances.
     * 
     */
    @Export(name="priority", type=Integer.class, parameters={})
    private Output<Integer> priority;

    /**
     * @return Since only one rule can be active at a time, priority is
     * used to break ties in the case of two rules that apply to
     * the same instances.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The Region in which the created address should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The Region in which the created address should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PacketMirroring(String name) {
        this(name, PacketMirroringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PacketMirroring(String name, PacketMirroringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PacketMirroring(String name, PacketMirroringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/packetMirroring:PacketMirroring", name, args == null ? PacketMirroringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PacketMirroring(String name, Output<String> id, @Nullable PacketMirroringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/packetMirroring:PacketMirroring", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PacketMirroring get(String name, Output<String> id, @Nullable PacketMirroringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PacketMirroring(name, id, state, options);
    }
}
