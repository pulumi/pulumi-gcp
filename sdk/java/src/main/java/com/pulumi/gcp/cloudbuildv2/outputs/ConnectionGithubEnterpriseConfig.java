// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudbuildv2.outputs.ConnectionGithubEnterpriseConfigServiceDirectoryConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionGithubEnterpriseConfig {
    /**
     * @return Id of the GitHub App created from the manifest.
     * 
     */
    private @Nullable Integer appId;
    /**
     * @return ID of the installation of the GitHub App.
     * 
     */
    private @Nullable Integer appInstallationId;
    /**
     * @return The URL-friendly name of the GitHub App.
     * 
     */
    private @Nullable String appSlug;
    /**
     * @return Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    private String hostUri;
    /**
     * @return SecretManager resource containing the private key of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    private @Nullable String privateKeySecretVersion;
    /**
     * @return Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
     * 
     */
    private @Nullable ConnectionGithubEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig;
    /**
     * @return SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    private @Nullable String sslCa;
    /**
     * @return SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    private @Nullable String webhookSecretSecretVersion;

    private ConnectionGithubEnterpriseConfig() {}
    /**
     * @return Id of the GitHub App created from the manifest.
     * 
     */
    public Optional<Integer> appId() {
        return Optional.ofNullable(this.appId);
    }
    /**
     * @return ID of the installation of the GitHub App.
     * 
     */
    public Optional<Integer> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }
    /**
     * @return The URL-friendly name of the GitHub App.
     * 
     */
    public Optional<String> appSlug() {
        return Optional.ofNullable(this.appSlug);
    }
    /**
     * @return Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    public String hostUri() {
        return this.hostUri;
    }
    /**
     * @return SecretManager resource containing the private key of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Optional<String> privateKeySecretVersion() {
        return Optional.ofNullable(this.privateKeySecretVersion);
    }
    /**
     * @return Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
     * 
     */
    public Optional<ConnectionGithubEnterpriseConfigServiceDirectoryConfig> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }
    /**
     * @return SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    public Optional<String> sslCa() {
        return Optional.ofNullable(this.sslCa);
    }
    /**
     * @return SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Optional<String> webhookSecretSecretVersion() {
        return Optional.ofNullable(this.webhookSecretSecretVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionGithubEnterpriseConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer appId;
        private @Nullable Integer appInstallationId;
        private @Nullable String appSlug;
        private String hostUri;
        private @Nullable String privateKeySecretVersion;
        private @Nullable ConnectionGithubEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig;
        private @Nullable String sslCa;
        private @Nullable String webhookSecretSecretVersion;
        public Builder() {}
        public Builder(ConnectionGithubEnterpriseConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.appInstallationId = defaults.appInstallationId;
    	      this.appSlug = defaults.appSlug;
    	      this.hostUri = defaults.hostUri;
    	      this.privateKeySecretVersion = defaults.privateKeySecretVersion;
    	      this.serviceDirectoryConfig = defaults.serviceDirectoryConfig;
    	      this.sslCa = defaults.sslCa;
    	      this.webhookSecretSecretVersion = defaults.webhookSecretSecretVersion;
        }

        @CustomType.Setter
        public Builder appId(@Nullable Integer appId) {
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder appInstallationId(@Nullable Integer appInstallationId) {
            this.appInstallationId = appInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder appSlug(@Nullable String appSlug) {
            this.appSlug = appSlug;
            return this;
        }
        @CustomType.Setter
        public Builder hostUri(String hostUri) {
            this.hostUri = Objects.requireNonNull(hostUri);
            return this;
        }
        @CustomType.Setter
        public Builder privateKeySecretVersion(@Nullable String privateKeySecretVersion) {
            this.privateKeySecretVersion = privateKeySecretVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDirectoryConfig(@Nullable ConnectionGithubEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig) {
            this.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sslCa(@Nullable String sslCa) {
            this.sslCa = sslCa;
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecretSecretVersion(@Nullable String webhookSecretSecretVersion) {
            this.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }
        public ConnectionGithubEnterpriseConfig build() {
            final var o = new ConnectionGithubEnterpriseConfig();
            o.appId = appId;
            o.appInstallationId = appInstallationId;
            o.appSlug = appSlug;
            o.hostUri = hostUri;
            o.privateKeySecretVersion = privateKeySecretVersion;
            o.serviceDirectoryConfig = serviceDirectoryConfig;
            o.sslCa = sslCa;
            o.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return o;
        }
    }
}
