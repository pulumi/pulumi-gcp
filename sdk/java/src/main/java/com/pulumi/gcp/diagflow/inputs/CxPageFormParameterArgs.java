// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxPageFormParameterFillBehaviorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxPageFormParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxPageFormParameterArgs Empty = new CxPageFormParameterArgs();

    /**
     * The human-readable name of the parameter, unique within the form.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The human-readable name of the parameter, unique within the form.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The entity type of the parameter.
     * Format: projects/-/locations/-/agents/-/entityTypes/&lt;System Entity Type ID&gt; for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt; for developer entity types.
     * 
     */
    @Import(name="entityType")
    private @Nullable Output<String> entityType;

    /**
     * @return The entity type of the parameter.
     * Format: projects/-/locations/-/agents/-/entityTypes/&lt;System Entity Type ID&gt; for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt; for developer entity types.
     * 
     */
    public Optional<Output<String>> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    /**
     * Defines fill behavior for the parameter.
     * Structure is documented below.
     * 
     */
    @Import(name="fillBehavior")
    private @Nullable Output<CxPageFormParameterFillBehaviorArgs> fillBehavior;

    /**
     * @return Defines fill behavior for the parameter.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxPageFormParameterFillBehaviorArgs>> fillBehavior() {
        return Optional.ofNullable(this.fillBehavior);
    }

    /**
     * Indicates whether the parameter represents a list of values.
     * 
     */
    @Import(name="isList")
    private @Nullable Output<Boolean> isList;

    /**
     * @return Indicates whether the parameter represents a list of values.
     * 
     */
    public Optional<Output<Boolean>> isList() {
        return Optional.ofNullable(this.isList);
    }

    /**
     * Indicates whether the parameter content should be redacted in log.
     * If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
     * 
     */
    @Import(name="redact")
    private @Nullable Output<Boolean> redact;

    /**
     * @return Indicates whether the parameter content should be redacted in log.
     * If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
     * 
     */
    public Optional<Output<Boolean>> redact() {
        return Optional.ofNullable(this.redact);
    }

    /**
     * Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
     * Required parameters must be filled before form filling concludes.
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
     * Required parameters must be filled before form filling concludes.
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    private CxPageFormParameterArgs() {}

    private CxPageFormParameterArgs(CxPageFormParameterArgs $) {
        this.displayName = $.displayName;
        this.entityType = $.entityType;
        this.fillBehavior = $.fillBehavior;
        this.isList = $.isList;
        this.redact = $.redact;
        this.required = $.required;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxPageFormParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxPageFormParameterArgs $;

        public Builder() {
            $ = new CxPageFormParameterArgs();
        }

        public Builder(CxPageFormParameterArgs defaults) {
            $ = new CxPageFormParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The human-readable name of the parameter, unique within the form.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the parameter, unique within the form.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param entityType The entity type of the parameter.
         * Format: projects/-/locations/-/agents/-/entityTypes/&lt;System Entity Type ID&gt; for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt; for developer entity types.
         * 
         * @return builder
         * 
         */
        public Builder entityType(@Nullable Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType The entity type of the parameter.
         * Format: projects/-/locations/-/agents/-/entityTypes/&lt;System Entity Type ID&gt; for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/entityTypes/&lt;Entity Type ID&gt; for developer entity types.
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        /**
         * @param fillBehavior Defines fill behavior for the parameter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fillBehavior(@Nullable Output<CxPageFormParameterFillBehaviorArgs> fillBehavior) {
            $.fillBehavior = fillBehavior;
            return this;
        }

        /**
         * @param fillBehavior Defines fill behavior for the parameter.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fillBehavior(CxPageFormParameterFillBehaviorArgs fillBehavior) {
            return fillBehavior(Output.of(fillBehavior));
        }

        /**
         * @param isList Indicates whether the parameter represents a list of values.
         * 
         * @return builder
         * 
         */
        public Builder isList(@Nullable Output<Boolean> isList) {
            $.isList = isList;
            return this;
        }

        /**
         * @param isList Indicates whether the parameter represents a list of values.
         * 
         * @return builder
         * 
         */
        public Builder isList(Boolean isList) {
            return isList(Output.of(isList));
        }

        /**
         * @param redact Indicates whether the parameter content should be redacted in log.
         * If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
         * 
         * @return builder
         * 
         */
        public Builder redact(@Nullable Output<Boolean> redact) {
            $.redact = redact;
            return this;
        }

        /**
         * @param redact Indicates whether the parameter content should be redacted in log.
         * If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
         * 
         * @return builder
         * 
         */
        public Builder redact(Boolean redact) {
            return redact(Output.of(redact));
        }

        /**
         * @param required Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
         * Required parameters must be filled before form filling concludes.
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
         * Required parameters must be filled before form filling concludes.
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        public CxPageFormParameterArgs build() {
            return $;
        }
    }

}
