// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs Empty = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs();

    /**
     * Command is the command line to execute inside the container, the working
     * directory for the command is root (&#39;/&#39;) in the container&#39;s filesystem.
     * The command is simply exec&#39;d, it is not run inside a shell, so
     * traditional shell instructions (&#39;|&#39;, etc) won&#39;t work. To use a shell, you
     * need to explicitly call out to that shell. Exit status of 0 is treated as
     * live/healthy and non-zero is unhealthy.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return Command is the command line to execute inside the container, the working
     * directory for the command is root (&#39;/&#39;) in the container&#39;s filesystem.
     * The command is simply exec&#39;d, it is not run inside a shell, so
     * traditional shell instructions (&#39;|&#39;, etc) won&#39;t work. To use a shell, you
     * need to explicitly call out to that shell. Exit status of 0 is treated as
     * live/healthy and non-zero is unhealthy.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs() {}

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs $) {
        this.commands = $.commands;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs();
        }

        public Builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs defaults) {
            $ = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commands Command is the command line to execute inside the container, the working
         * directory for the command is root (&#39;/&#39;) in the container&#39;s filesystem.
         * The command is simply exec&#39;d, it is not run inside a shell, so
         * traditional shell instructions (&#39;|&#39;, etc) won&#39;t work. To use a shell, you
         * need to explicitly call out to that shell. Exit status of 0 is treated as
         * live/healthy and non-zero is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands Command is the command line to execute inside the container, the working
         * directory for the command is root (&#39;/&#39;) in the container&#39;s filesystem.
         * The command is simply exec&#39;d, it is not run inside a shell, so
         * traditional shell instructions (&#39;|&#39;, etc) won&#39;t work. To use a shell, you
         * need to explicitly call out to that shell. Exit status of 0 is treated as
         * live/healthy and non-zero is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands Command is the command line to execute inside the container, the working
         * directory for the command is root (&#39;/&#39;) in the container&#39;s filesystem.
         * The command is simply exec&#39;d, it is not run inside a shell, so
         * traditional shell instructions (&#39;|&#39;, etc) won&#39;t work. To use a shell, you
         * need to explicitly call out to that shell. Exit status of 0 is treated as
         * live/healthy and non-zero is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs build() {
            return $;
        }
    }

}
