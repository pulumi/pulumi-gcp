// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apigee.inputs.SecurityActionAllowArgs;
import com.pulumi.gcp.apigee.inputs.SecurityActionConditionConfigArgs;
import com.pulumi.gcp.apigee.inputs.SecurityActionDenyArgs;
import com.pulumi.gcp.apigee.inputs.SecurityActionFlagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityActionArgs Empty = new SecurityActionArgs();

    /**
     * Allow a request through if it matches this SecurityAction.
     * 
     */
    @Import(name="allow")
    private @Nullable Output<SecurityActionAllowArgs> allow;

    /**
     * @return Allow a request through if it matches this SecurityAction.
     * 
     */
    public Optional<Output<SecurityActionAllowArgs>> allow() {
        return Optional.ofNullable(this.allow);
    }

    /**
     * If unset, this would apply to all proxies in the environment.
     * If set, this action is enforced only if at least one proxy in the repeated
     * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
     * There can be at most 100 enabled actions with proxies set in an env.
     * Several other restrictions apply on conditions and are detailed later.
     * 
     */
    @Import(name="apiProxies")
    private @Nullable Output<List<String>> apiProxies;

    /**
     * @return If unset, this would apply to all proxies in the environment.
     * If set, this action is enforced only if at least one proxy in the repeated
     * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
     * There can be at most 100 enabled actions with proxies set in an env.
     * Several other restrictions apply on conditions and are detailed later.
     * 
     */
    public Optional<Output<List<String>>> apiProxies() {
        return Optional.ofNullable(this.apiProxies);
    }

    /**
     * A valid SecurityAction must contain at least one condition.
     * Structure is documented below.
     * 
     */
    @Import(name="conditionConfig", required=true)
    private Output<SecurityActionConditionConfigArgs> conditionConfig;

    /**
     * @return A valid SecurityAction must contain at least one condition.
     * Structure is documented below.
     * 
     */
    public Output<SecurityActionConditionConfigArgs> conditionConfig() {
        return this.conditionConfig;
    }

    /**
     * Deny a request through if it matches this SecurityAction.
     * Structure is documented below.
     * 
     */
    @Import(name="deny")
    private @Nullable Output<SecurityActionDenyArgs> deny;

    /**
     * @return Deny a request through if it matches this SecurityAction.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SecurityActionDenyArgs>> deny() {
        return Optional.ofNullable(this.deny);
    }

    /**
     * An optional user provided description of the SecurityAction.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional user provided description of the SecurityAction.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Apigee environment that this security action applies to.
     * 
     */
    @Import(name="envId", required=true)
    private Output<String> envId;

    /**
     * @return The Apigee environment that this security action applies to.
     * 
     */
    public Output<String> envId() {
        return this.envId;
    }

    /**
     * The expiration for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
     * fractional digits. Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return The expiration for this SecurityAction.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
     * fractional digits. Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * Flag a request through if it matches this SecurityAction.
     * Structure is documented below.
     * 
     */
    @Import(name="flag")
    private @Nullable Output<SecurityActionFlagArgs> flag;

    /**
     * @return Flag a request through if it matches this SecurityAction.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SecurityActionFlagArgs>> flag() {
        return Optional.ofNullable(this.flag);
    }

    /**
     * The organization that this security action applies to.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The organization that this security action applies to.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * The ID to use for the SecurityAction, which will become the final component of the action&#39;s resource name.
     * This value should be 0-61 characters, and valid format is (^a-z?$).
     * 
     */
    @Import(name="securityActionId", required=true)
    private Output<String> securityActionId;

    /**
     * @return The ID to use for the SecurityAction, which will become the final component of the action&#39;s resource name.
     * This value should be 0-61 characters, and valid format is (^a-z?$).
     * 
     */
    public Output<String> securityActionId() {
        return this.securityActionId;
    }

    /**
     * Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     * The TTL for this SecurityAction.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return The TTL for this SecurityAction.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private SecurityActionArgs() {}

    private SecurityActionArgs(SecurityActionArgs $) {
        this.allow = $.allow;
        this.apiProxies = $.apiProxies;
        this.conditionConfig = $.conditionConfig;
        this.deny = $.deny;
        this.description = $.description;
        this.envId = $.envId;
        this.expireTime = $.expireTime;
        this.flag = $.flag;
        this.orgId = $.orgId;
        this.securityActionId = $.securityActionId;
        this.state = $.state;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityActionArgs $;

        public Builder() {
            $ = new SecurityActionArgs();
        }

        public Builder(SecurityActionArgs defaults) {
            $ = new SecurityActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allow Allow a request through if it matches this SecurityAction.
         * 
         * @return builder
         * 
         */
        public Builder allow(@Nullable Output<SecurityActionAllowArgs> allow) {
            $.allow = allow;
            return this;
        }

        /**
         * @param allow Allow a request through if it matches this SecurityAction.
         * 
         * @return builder
         * 
         */
        public Builder allow(SecurityActionAllowArgs allow) {
            return allow(Output.of(allow));
        }

        /**
         * @param apiProxies If unset, this would apply to all proxies in the environment.
         * If set, this action is enforced only if at least one proxy in the repeated
         * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
         * There can be at most 100 enabled actions with proxies set in an env.
         * Several other restrictions apply on conditions and are detailed later.
         * 
         * @return builder
         * 
         */
        public Builder apiProxies(@Nullable Output<List<String>> apiProxies) {
            $.apiProxies = apiProxies;
            return this;
        }

        /**
         * @param apiProxies If unset, this would apply to all proxies in the environment.
         * If set, this action is enforced only if at least one proxy in the repeated
         * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
         * There can be at most 100 enabled actions with proxies set in an env.
         * Several other restrictions apply on conditions and are detailed later.
         * 
         * @return builder
         * 
         */
        public Builder apiProxies(List<String> apiProxies) {
            return apiProxies(Output.of(apiProxies));
        }

        /**
         * @param apiProxies If unset, this would apply to all proxies in the environment.
         * If set, this action is enforced only if at least one proxy in the repeated
         * list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions.
         * There can be at most 100 enabled actions with proxies set in an env.
         * Several other restrictions apply on conditions and are detailed later.
         * 
         * @return builder
         * 
         */
        public Builder apiProxies(String... apiProxies) {
            return apiProxies(List.of(apiProxies));
        }

        /**
         * @param conditionConfig A valid SecurityAction must contain at least one condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionConfig(Output<SecurityActionConditionConfigArgs> conditionConfig) {
            $.conditionConfig = conditionConfig;
            return this;
        }

        /**
         * @param conditionConfig A valid SecurityAction must contain at least one condition.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditionConfig(SecurityActionConditionConfigArgs conditionConfig) {
            return conditionConfig(Output.of(conditionConfig));
        }

        /**
         * @param deny Deny a request through if it matches this SecurityAction.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deny(@Nullable Output<SecurityActionDenyArgs> deny) {
            $.deny = deny;
            return this;
        }

        /**
         * @param deny Deny a request through if it matches this SecurityAction.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deny(SecurityActionDenyArgs deny) {
            return deny(Output.of(deny));
        }

        /**
         * @param description An optional user provided description of the SecurityAction.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional user provided description of the SecurityAction.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param envId The Apigee environment that this security action applies to.
         * 
         * @return builder
         * 
         */
        public Builder envId(Output<String> envId) {
            $.envId = envId;
            return this;
        }

        /**
         * @param envId The Apigee environment that this security action applies to.
         * 
         * @return builder
         * 
         */
        public Builder envId(String envId) {
            return envId(Output.of(envId));
        }

        /**
         * @param expireTime The expiration for this SecurityAction.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
         * fractional digits. Offsets other than &#34;Z&#34; are also accepted.
         * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The expiration for this SecurityAction.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9
         * fractional digits. Offsets other than &#34;Z&#34; are also accepted.
         * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param flag Flag a request through if it matches this SecurityAction.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder flag(@Nullable Output<SecurityActionFlagArgs> flag) {
            $.flag = flag;
            return this;
        }

        /**
         * @param flag Flag a request through if it matches this SecurityAction.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder flag(SecurityActionFlagArgs flag) {
            return flag(Output.of(flag));
        }

        /**
         * @param orgId The organization that this security action applies to.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The organization that this security action applies to.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param securityActionId The ID to use for the SecurityAction, which will become the final component of the action&#39;s resource name.
         * This value should be 0-61 characters, and valid format is (^a-z?$).
         * 
         * @return builder
         * 
         */
        public Builder securityActionId(Output<String> securityActionId) {
            $.securityActionId = securityActionId;
            return this;
        }

        /**
         * @param securityActionId The ID to use for the SecurityAction, which will become the final component of the action&#39;s resource name.
         * This value should be 0-61 characters, and valid format is (^a-z?$).
         * 
         * @return builder
         * 
         */
        public Builder securityActionId(String securityActionId) {
            return securityActionId(Output.of(securityActionId));
        }

        /**
         * @param state Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param ttl The TTL for this SecurityAction.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The TTL for this SecurityAction.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public SecurityActionArgs build() {
            if ($.conditionConfig == null) {
                throw new MissingRequiredPropertyException("SecurityActionArgs", "conditionConfig");
            }
            if ($.envId == null) {
                throw new MissingRequiredPropertyException("SecurityActionArgs", "envId");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("SecurityActionArgs", "orgId");
            }
            if ($.securityActionId == null) {
                throw new MissingRequiredPropertyException("SecurityActionArgs", "securityActionId");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("SecurityActionArgs", "state");
            }
            return $;
        }
    }

}
