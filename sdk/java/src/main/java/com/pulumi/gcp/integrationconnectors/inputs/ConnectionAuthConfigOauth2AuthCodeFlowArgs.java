// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionAuthConfigOauth2AuthCodeFlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionAuthConfigOauth2AuthCodeFlowArgs Empty = new ConnectionAuthConfigOauth2AuthCodeFlowArgs();

    /**
     * Auth URL for Authorization Code Flow.
     * 
     */
    @Import(name="authUri")
    private @Nullable Output<String> authUri;

    /**
     * @return Auth URL for Authorization Code Flow.
     * 
     */
    public Optional<Output<String>> authUri() {
        return Optional.ofNullable(this.authUri);
    }

    /**
     * Client ID for user-provided OAuth app.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Client ID for user-provided OAuth app.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Client secret for user-provided OAuth app.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArgs> clientSecret;

    /**
     * @return Client secret for user-provided OAuth app.
     * 
     */
    public Optional<Output<ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArgs>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Whether to enable PKCE when the user performs the auth code flow.
     * 
     */
    @Import(name="enablePkce")
    private @Nullable Output<Boolean> enablePkce;

    /**
     * @return Whether to enable PKCE when the user performs the auth code flow.
     * 
     */
    public Optional<Output<Boolean>> enablePkce() {
        return Optional.ofNullable(this.enablePkce);
    }

    /**
     * Scopes the connection will request when the user performs the auth code flow.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return Scopes the connection will request when the user performs the auth code flow.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    private ConnectionAuthConfigOauth2AuthCodeFlowArgs() {}

    private ConnectionAuthConfigOauth2AuthCodeFlowArgs(ConnectionAuthConfigOauth2AuthCodeFlowArgs $) {
        this.authUri = $.authUri;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.enablePkce = $.enablePkce;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionAuthConfigOauth2AuthCodeFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionAuthConfigOauth2AuthCodeFlowArgs $;

        public Builder() {
            $ = new ConnectionAuthConfigOauth2AuthCodeFlowArgs();
        }

        public Builder(ConnectionAuthConfigOauth2AuthCodeFlowArgs defaults) {
            $ = new ConnectionAuthConfigOauth2AuthCodeFlowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authUri Auth URL for Authorization Code Flow.
         * 
         * @return builder
         * 
         */
        public Builder authUri(@Nullable Output<String> authUri) {
            $.authUri = authUri;
            return this;
        }

        /**
         * @param authUri Auth URL for Authorization Code Flow.
         * 
         * @return builder
         * 
         */
        public Builder authUri(String authUri) {
            return authUri(Output.of(authUri));
        }

        /**
         * @param clientId Client ID for user-provided OAuth app.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client ID for user-provided OAuth app.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Client secret for user-provided OAuth app.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArgs> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Client secret for user-provided OAuth app.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(ConnectionAuthConfigOauth2AuthCodeFlowClientSecretArgs clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param enablePkce Whether to enable PKCE when the user performs the auth code flow.
         * 
         * @return builder
         * 
         */
        public Builder enablePkce(@Nullable Output<Boolean> enablePkce) {
            $.enablePkce = enablePkce;
            return this;
        }

        /**
         * @param enablePkce Whether to enable PKCE when the user performs the auth code flow.
         * 
         * @return builder
         * 
         */
        public Builder enablePkce(Boolean enablePkce) {
            return enablePkce(Output.of(enablePkce));
        }

        /**
         * @param scopes Scopes the connection will request when the user performs the auth code flow.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Scopes the connection will request when the user performs the auth code flow.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Scopes the connection will request when the user performs the auth code flow.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ConnectionAuthConfigOauth2AuthCodeFlowArgs build() {
            return $;
        }
    }

}
