// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.outputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig;
import com.pulumi.gcp.vertex.outputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AiFeatureOnlineStoreFeatureviewVectorSearchConfig {
    /**
     * @return Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
     * 
     */
    private @Nullable AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig bruteForceConfig;
    /**
     * @return Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k&#39; of the k neighbors returned have the same value of crowdingAttribute.
     * 
     */
    private @Nullable String crowdingColumn;
    /**
     * @return The distance measure used in nearest neighbor search.
     * For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
     * Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
     * 
     */
    private @Nullable String distanceMeasureType;
    /**
     * @return Column of embedding. This column contains the source data to create index for vector search.
     * 
     */
    private String embeddingColumn;
    /**
     * @return The number of dimensions of the input embedding.
     * 
     */
    private @Nullable Integer embeddingDimension;
    /**
     * @return Columns of features that are used to filter vector search results.
     * 
     */
    private @Nullable List<String> filterColumns;
    /**
     * @return Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: &lt;https://arxiv.org/abs/1908.10396&gt;
     * Structure is documented below.
     * 
     */
    private @Nullable AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig treeAhConfig;

    private AiFeatureOnlineStoreFeatureviewVectorSearchConfig() {}
    /**
     * @return Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
     * 
     */
    public Optional<AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig> bruteForceConfig() {
        return Optional.ofNullable(this.bruteForceConfig);
    }
    /**
     * @return Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k&#39; of the k neighbors returned have the same value of crowdingAttribute.
     * 
     */
    public Optional<String> crowdingColumn() {
        return Optional.ofNullable(this.crowdingColumn);
    }
    /**
     * @return The distance measure used in nearest neighbor search.
     * For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
     * Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
     * 
     */
    public Optional<String> distanceMeasureType() {
        return Optional.ofNullable(this.distanceMeasureType);
    }
    /**
     * @return Column of embedding. This column contains the source data to create index for vector search.
     * 
     */
    public String embeddingColumn() {
        return this.embeddingColumn;
    }
    /**
     * @return The number of dimensions of the input embedding.
     * 
     */
    public Optional<Integer> embeddingDimension() {
        return Optional.ofNullable(this.embeddingDimension);
    }
    /**
     * @return Columns of features that are used to filter vector search results.
     * 
     */
    public List<String> filterColumns() {
        return this.filterColumns == null ? List.of() : this.filterColumns;
    }
    /**
     * @return Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: &lt;https://arxiv.org/abs/1908.10396&gt;
     * Structure is documented below.
     * 
     */
    public Optional<AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig> treeAhConfig() {
        return Optional.ofNullable(this.treeAhConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiFeatureOnlineStoreFeatureviewVectorSearchConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig bruteForceConfig;
        private @Nullable String crowdingColumn;
        private @Nullable String distanceMeasureType;
        private String embeddingColumn;
        private @Nullable Integer embeddingDimension;
        private @Nullable List<String> filterColumns;
        private @Nullable AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig treeAhConfig;
        public Builder() {}
        public Builder(AiFeatureOnlineStoreFeatureviewVectorSearchConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bruteForceConfig = defaults.bruteForceConfig;
    	      this.crowdingColumn = defaults.crowdingColumn;
    	      this.distanceMeasureType = defaults.distanceMeasureType;
    	      this.embeddingColumn = defaults.embeddingColumn;
    	      this.embeddingDimension = defaults.embeddingDimension;
    	      this.filterColumns = defaults.filterColumns;
    	      this.treeAhConfig = defaults.treeAhConfig;
        }

        @CustomType.Setter
        public Builder bruteForceConfig(@Nullable AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig bruteForceConfig) {

            this.bruteForceConfig = bruteForceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder crowdingColumn(@Nullable String crowdingColumn) {

            this.crowdingColumn = crowdingColumn;
            return this;
        }
        @CustomType.Setter
        public Builder distanceMeasureType(@Nullable String distanceMeasureType) {

            this.distanceMeasureType = distanceMeasureType;
            return this;
        }
        @CustomType.Setter
        public Builder embeddingColumn(String embeddingColumn) {
            if (embeddingColumn == null) {
              throw new MissingRequiredPropertyException("AiFeatureOnlineStoreFeatureviewVectorSearchConfig", "embeddingColumn");
            }
            this.embeddingColumn = embeddingColumn;
            return this;
        }
        @CustomType.Setter
        public Builder embeddingDimension(@Nullable Integer embeddingDimension) {

            this.embeddingDimension = embeddingDimension;
            return this;
        }
        @CustomType.Setter
        public Builder filterColumns(@Nullable List<String> filterColumns) {

            this.filterColumns = filterColumns;
            return this;
        }
        public Builder filterColumns(String... filterColumns) {
            return filterColumns(List.of(filterColumns));
        }
        @CustomType.Setter
        public Builder treeAhConfig(@Nullable AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig treeAhConfig) {

            this.treeAhConfig = treeAhConfig;
            return this;
        }
        public AiFeatureOnlineStoreFeatureviewVectorSearchConfig build() {
            final var _resultValue = new AiFeatureOnlineStoreFeatureviewVectorSearchConfig();
            _resultValue.bruteForceConfig = bruteForceConfig;
            _resultValue.crowdingColumn = crowdingColumn;
            _resultValue.distanceMeasureType = distanceMeasureType;
            _resultValue.embeddingColumn = embeddingColumn;
            _resultValue.embeddingDimension = embeddingDimension;
            _resultValue.filterColumns = filterColumns;
            _resultValue.treeAhConfig = treeAhConfig;
            return _resultValue;
        }
    }
}
