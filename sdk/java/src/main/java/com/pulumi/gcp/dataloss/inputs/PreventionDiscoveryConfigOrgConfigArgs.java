// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDiscoveryConfigOrgConfigLocationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigOrgConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigOrgConfigArgs Empty = new PreventionDiscoveryConfigOrgConfigArgs();

    /**
     * The data to scan folder org or project
     * Structure is documented below.
     * 
     */
    @Import(name="location")
    private @Nullable Output<PreventionDiscoveryConfigOrgConfigLocationArgs> location;

    /**
     * @return The data to scan folder org or project
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDiscoveryConfigOrgConfigLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the cloud DLP API must be enabled.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the cloud DLP API must be enabled.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private PreventionDiscoveryConfigOrgConfigArgs() {}

    private PreventionDiscoveryConfigOrgConfigArgs(PreventionDiscoveryConfigOrgConfigArgs $) {
        this.location = $.location;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigOrgConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigOrgConfigArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigOrgConfigArgs();
        }

        public Builder(PreventionDiscoveryConfigOrgConfigArgs defaults) {
            $ = new PreventionDiscoveryConfigOrgConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The data to scan folder org or project
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<PreventionDiscoveryConfigOrgConfigLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The data to scan folder org or project
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder location(PreventionDiscoveryConfigOrgConfigLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param projectId The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the cloud DLP API must be enabled.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the cloud DLP API must be enabled.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public PreventionDiscoveryConfigOrgConfigArgs build() {
            return $;
        }
    }

}
