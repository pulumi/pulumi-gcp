// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceBuildConfig {
    /**
     * @return The base image used to build the function.
     * 
     */
    private String baseImage;
    /**
     * @return Sets whether the function will receive automatic base image updates.
     * 
     */
    private Boolean enableAutomaticUpdates;
    /**
     * @return User-provided build-time environment variables for the function.
     * 
     */
    private Map<String,String> environmentVariables;
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
     * 
     */
    private String functionTarget;
    /**
     * @return Artifact Registry URI to store the built image.
     * 
     */
    private String imageUri;
    /**
     * @return The name of the Cloud Run v2 Service.
     * 
     */
    private String name;
    /**
     * @return Service account to be used for building the container. The format of this field is &#39;projects/{projectId}/serviceAccounts/{serviceAccountEmail}&#39;.
     * 
     */
    private String serviceAccount;
    /**
     * @return The Cloud Storage bucket URI where the function source code is located.
     * 
     */
    private String sourceLocation;
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is &#39;projects/{project}/locations/{region}/workerPools/{workerPool}&#39; where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
     * 
     */
    private String workerPool;

    private GetServiceBuildConfig() {}
    /**
     * @return The base image used to build the function.
     * 
     */
    public String baseImage() {
        return this.baseImage;
    }
    /**
     * @return Sets whether the function will receive automatic base image updates.
     * 
     */
    public Boolean enableAutomaticUpdates() {
        return this.enableAutomaticUpdates;
    }
    /**
     * @return User-provided build-time environment variables for the function.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
     * 
     */
    public String functionTarget() {
        return this.functionTarget;
    }
    /**
     * @return Artifact Registry URI to store the built image.
     * 
     */
    public String imageUri() {
        return this.imageUri;
    }
    /**
     * @return The name of the Cloud Run v2 Service.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Service account to be used for building the container. The format of this field is &#39;projects/{projectId}/serviceAccounts/{serviceAccountEmail}&#39;.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The Cloud Storage bucket URI where the function source code is located.
     * 
     */
    public String sourceLocation() {
        return this.sourceLocation;
    }
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is &#39;projects/{project}/locations/{region}/workerPools/{workerPool}&#39; where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
     * 
     */
    public String workerPool() {
        return this.workerPool;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceBuildConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baseImage;
        private Boolean enableAutomaticUpdates;
        private Map<String,String> environmentVariables;
        private String functionTarget;
        private String imageUri;
        private String name;
        private String serviceAccount;
        private String sourceLocation;
        private String workerPool;
        public Builder() {}
        public Builder(GetServiceBuildConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseImage = defaults.baseImage;
    	      this.enableAutomaticUpdates = defaults.enableAutomaticUpdates;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.functionTarget = defaults.functionTarget;
    	      this.imageUri = defaults.imageUri;
    	      this.name = defaults.name;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.sourceLocation = defaults.sourceLocation;
    	      this.workerPool = defaults.workerPool;
        }

        @CustomType.Setter
        public Builder baseImage(String baseImage) {
            if (baseImage == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "baseImage");
            }
            this.baseImage = baseImage;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutomaticUpdates(Boolean enableAutomaticUpdates) {
            if (enableAutomaticUpdates == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "enableAutomaticUpdates");
            }
            this.enableAutomaticUpdates = enableAutomaticUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            if (environmentVariables == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "environmentVariables");
            }
            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder functionTarget(String functionTarget) {
            if (functionTarget == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "functionTarget");
            }
            this.functionTarget = functionTarget;
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(String imageUri) {
            if (imageUri == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "imageUri");
            }
            this.imageUri = imageUri;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder sourceLocation(String sourceLocation) {
            if (sourceLocation == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "sourceLocation");
            }
            this.sourceLocation = sourceLocation;
            return this;
        }
        @CustomType.Setter
        public Builder workerPool(String workerPool) {
            if (workerPool == null) {
              throw new MissingRequiredPropertyException("GetServiceBuildConfig", "workerPool");
            }
            this.workerPool = workerPool;
            return this;
        }
        public GetServiceBuildConfig build() {
            final var _resultValue = new GetServiceBuildConfig();
            _resultValue.baseImage = baseImage;
            _resultValue.enableAutomaticUpdates = enableAutomaticUpdates;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.functionTarget = functionTarget;
            _resultValue.imageUri = imageUri;
            _resultValue.name = name;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.sourceLocation = sourceLocation;
            _resultValue.workerPool = workerPool;
            return _resultValue;
        }
    }
}
