// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memorystore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceEndpointConnectionPscAutoConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceEndpointConnectionPscAutoConnectionArgs Empty = new InstanceEndpointConnectionPscAutoConnectionArgs();

    /**
     * (Output)
     * Output Only. Type of a PSC Connection.
     * Possible values:
     * CONNECTION_TYPE_DISCOVERY
     * CONNECTION_TYPE_PRIMARY
     * CONNECTION_TYPE_READER
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    /**
     * @return (Output)
     * Output Only. Type of a PSC Connection.
     * Possible values:
     * CONNECTION_TYPE_DISCOVERY
     * CONNECTION_TYPE_PRIMARY
     * CONNECTION_TYPE_READER
     * 
     */
    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * (Output)
     * Output only. The URI of the consumer side forwarding rule.
     * Format:
     * projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}
     * 
     */
    @Import(name="forwardingRule")
    private @Nullable Output<String> forwardingRule;

    /**
     * @return (Output)
     * Output only. The URI of the consumer side forwarding rule.
     * Format:
     * projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}
     * 
     */
    public Optional<Output<String>> forwardingRule() {
        return Optional.ofNullable(this.forwardingRule);
    }

    /**
     * (Output)
     * Output only. The IP allocated on the consumer network for the PSC forwarding rule.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return (Output)
     * Output only. The IP allocated on the consumer network for the PSC forwarding rule.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * (Output)
     * Output only. The consumer network where the IP address resides, in the form of
     * projects/{project_id}/global/networks/{network_id}.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return (Output)
     * Output only. The consumer network where the IP address resides, in the form of
     * projects/{project_id}/global/networks/{network_id}.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * (Output)
     * Output only. Ports of the exposed endpoint.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return (Output)
     * Output only. Ports of the exposed endpoint.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Output)
     * Output only. The consumer project_id where the forwarding rule is created from.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return (Output)
     * Output only. The consumer project_id where the forwarding rule is created from.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * (Output)
     * Output only. The PSC connection id of the forwarding rule connected to the
     * service attachment.
     * 
     */
    @Import(name="pscConnectionId")
    private @Nullable Output<String> pscConnectionId;

    /**
     * @return (Output)
     * Output only. The PSC connection id of the forwarding rule connected to the
     * service attachment.
     * 
     */
    public Optional<Output<String>> pscConnectionId() {
        return Optional.ofNullable(this.pscConnectionId);
    }

    /**
     * (Output)
     * Output only. The service attachment which is the target of the PSC connection, in the form of projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.
     * 
     */
    @Import(name="serviceAttachment")
    private @Nullable Output<String> serviceAttachment;

    /**
     * @return (Output)
     * Output only. The service attachment which is the target of the PSC connection, in the form of projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.
     * 
     */
    public Optional<Output<String>> serviceAttachment() {
        return Optional.ofNullable(this.serviceAttachment);
    }

    private InstanceEndpointConnectionPscAutoConnectionArgs() {}

    private InstanceEndpointConnectionPscAutoConnectionArgs(InstanceEndpointConnectionPscAutoConnectionArgs $) {
        this.connectionType = $.connectionType;
        this.forwardingRule = $.forwardingRule;
        this.ipAddress = $.ipAddress;
        this.network = $.network;
        this.port = $.port;
        this.projectId = $.projectId;
        this.pscConnectionId = $.pscConnectionId;
        this.serviceAttachment = $.serviceAttachment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceEndpointConnectionPscAutoConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceEndpointConnectionPscAutoConnectionArgs $;

        public Builder() {
            $ = new InstanceEndpointConnectionPscAutoConnectionArgs();
        }

        public Builder(InstanceEndpointConnectionPscAutoConnectionArgs defaults) {
            $ = new InstanceEndpointConnectionPscAutoConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionType (Output)
         * Output Only. Type of a PSC Connection.
         * Possible values:
         * CONNECTION_TYPE_DISCOVERY
         * CONNECTION_TYPE_PRIMARY
         * CONNECTION_TYPE_READER
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType (Output)
         * Output Only. Type of a PSC Connection.
         * Possible values:
         * CONNECTION_TYPE_DISCOVERY
         * CONNECTION_TYPE_PRIMARY
         * CONNECTION_TYPE_READER
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param forwardingRule (Output)
         * Output only. The URI of the consumer side forwarding rule.
         * Format:
         * projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}
         * 
         * @return builder
         * 
         */
        public Builder forwardingRule(@Nullable Output<String> forwardingRule) {
            $.forwardingRule = forwardingRule;
            return this;
        }

        /**
         * @param forwardingRule (Output)
         * Output only. The URI of the consumer side forwarding rule.
         * Format:
         * projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}
         * 
         * @return builder
         * 
         */
        public Builder forwardingRule(String forwardingRule) {
            return forwardingRule(Output.of(forwardingRule));
        }

        /**
         * @param ipAddress (Output)
         * Output only. The IP allocated on the consumer network for the PSC forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress (Output)
         * Output only. The IP allocated on the consumer network for the PSC forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param network (Output)
         * Output only. The consumer network where the IP address resides, in the form of
         * projects/{project_id}/global/networks/{network_id}.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network (Output)
         * Output only. The consumer network where the IP address resides, in the form of
         * projects/{project_id}/global/networks/{network_id}.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param port (Output)
         * Output only. Ports of the exposed endpoint.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (Output)
         * Output only. Ports of the exposed endpoint.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param projectId (Output)
         * Output only. The consumer project_id where the forwarding rule is created from.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId (Output)
         * Output only. The consumer project_id where the forwarding rule is created from.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param pscConnectionId (Output)
         * Output only. The PSC connection id of the forwarding rule connected to the
         * service attachment.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(@Nullable Output<String> pscConnectionId) {
            $.pscConnectionId = pscConnectionId;
            return this;
        }

        /**
         * @param pscConnectionId (Output)
         * Output only. The PSC connection id of the forwarding rule connected to the
         * service attachment.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(String pscConnectionId) {
            return pscConnectionId(Output.of(pscConnectionId));
        }

        /**
         * @param serviceAttachment (Output)
         * Output only. The service attachment which is the target of the PSC connection, in the form of projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.
         * 
         * @return builder
         * 
         */
        public Builder serviceAttachment(@Nullable Output<String> serviceAttachment) {
            $.serviceAttachment = serviceAttachment;
            return this;
        }

        /**
         * @param serviceAttachment (Output)
         * Output only. The service attachment which is the target of the PSC connection, in the form of projects/{project-id}/regions/{region}/serviceAttachments/{service-attachment-id}.
         * 
         * @return builder
         * 
         */
        public Builder serviceAttachment(String serviceAttachment) {
            return serviceAttachment(Output.of(serviceAttachment));
        }

        public InstanceEndpointConnectionPscAutoConnectionArgs build() {
            return $;
        }
    }

}
