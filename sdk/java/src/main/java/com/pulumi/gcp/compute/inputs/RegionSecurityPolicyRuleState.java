// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionSecurityPolicyRuleMatchArgs;
import com.pulumi.gcp.compute.inputs.RegionSecurityPolicyRuleNetworkMatchArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionSecurityPolicyRuleState extends com.pulumi.resources.ResourceArgs {

    public static final RegionSecurityPolicyRuleState Empty = new RegionSecurityPolicyRuleState();

    /**
     * The Action to perform when the rule is matched. The following are the valid actions:
     * * allow: allow access to target.
     * * deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for STATUS are 403, 404, and 502.
     * * rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. This action is only supported in Global Security Policies of type CLOUD_ARMOR.
     * * throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return The Action to perform when the rule is matched. The following are the valid actions:
     * * allow: allow access to target.
     * * deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for STATUS are 403, 404, and 502.
     * * rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. This action is only supported in Global Security Policies of type CLOUD_ARMOR.
     * * throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * Structure is documented below.
     * 
     */
    @Import(name="match")
    private @Nullable Output<RegionSecurityPolicyRuleMatchArgs> match;

    /**
     * @return A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionSecurityPolicyRuleMatchArgs>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * A match condition that incoming packets are evaluated against for CLOUD_ARMOR_NETWORK security policies. If it matches, the corresponding &#39;action&#39; is enforced.
     * The match criteria for a rule consists of built-in match fields (like &#39;srcIpRanges&#39;) and potentially multiple user-defined match fields (&#39;userDefinedFields&#39;).
     * Field values may be extracted directly from the packet or derived from it (e.g. &#39;srcRegionCodes&#39;). Some fields may not be present in every packet (e.g. &#39;srcPorts&#39;). A user-defined field is only present if the base header is found in the packet and the entire field is in bounds.
     * Each match field may specify which values can match it, listing one or more ranges, prefixes, or exact values that are considered a match for the field. A field value must be present in order to match a specified match field. If no match values are specified for a match field, then any field value is considered to match it, and it&#39;s not required to be present. For strings specifying &#39;*&#39; is also equivalent to match all.
     * For a packet to match a rule, all specified match fields must match the corresponding field values derived from the packet.
     * Example:
     * networkMatch: srcIpRanges: - &#34;192.0.2.0/24&#34; - &#34;198.51.100.0/24&#34; userDefinedFields: - name: &#34;ipv4_fragment_offset&#34; values: - &#34;1-0x1fff&#34;
     * The above match condition matches packets with a source IP in 192.0.2.0/24 or 198.51.100.0/24 and a user-defined field named &#34;ipv4_fragment_offset&#34; with a value between 1 and 0x1fff inclusive
     * Structure is documented below.
     * 
     */
    @Import(name="networkMatch")
    private @Nullable Output<RegionSecurityPolicyRuleNetworkMatchArgs> networkMatch;

    /**
     * @return A match condition that incoming packets are evaluated against for CLOUD_ARMOR_NETWORK security policies. If it matches, the corresponding &#39;action&#39; is enforced.
     * The match criteria for a rule consists of built-in match fields (like &#39;srcIpRanges&#39;) and potentially multiple user-defined match fields (&#39;userDefinedFields&#39;).
     * Field values may be extracted directly from the packet or derived from it (e.g. &#39;srcRegionCodes&#39;). Some fields may not be present in every packet (e.g. &#39;srcPorts&#39;). A user-defined field is only present if the base header is found in the packet and the entire field is in bounds.
     * Each match field may specify which values can match it, listing one or more ranges, prefixes, or exact values that are considered a match for the field. A field value must be present in order to match a specified match field. If no match values are specified for a match field, then any field value is considered to match it, and it&#39;s not required to be present. For strings specifying &#39;*&#39; is also equivalent to match all.
     * For a packet to match a rule, all specified match fields must match the corresponding field values derived from the packet.
     * Example:
     * networkMatch: srcIpRanges: - &#34;192.0.2.0/24&#34; - &#34;198.51.100.0/24&#34; userDefinedFields: - name: &#34;ipv4_fragment_offset&#34; values: - &#34;1-0x1fff&#34;
     * The above match condition matches packets with a source IP in 192.0.2.0/24 or 198.51.100.0/24 and a user-defined field named &#34;ipv4_fragment_offset&#34; with a value between 1 and 0x1fff inclusive
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionSecurityPolicyRuleNetworkMatchArgs>> networkMatch() {
        return Optional.ofNullable(this.networkMatch);
    }

    /**
     * If set to true, the specified action is not enforced.
     * 
     */
    @Import(name="preview")
    private @Nullable Output<Boolean> preview;

    /**
     * @return If set to true, the specified action is not enforced.
     * 
     */
    public Optional<Output<Boolean>> preview() {
        return Optional.ofNullable(this.preview);
    }

    /**
     * An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return An integer indicating the priority of a rule in the list.
     * The priority must be a positive value between 0 and 2147483647.
     * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Region in which the created Region Security Policy rule should reside.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Region in which the created Region Security Policy rule should reside.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the security policy this rule belongs to.
     * 
     * ***
     * 
     */
    @Import(name="securityPolicy")
    private @Nullable Output<String> securityPolicy;

    /**
     * @return The name of the security policy this rule belongs to.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> securityPolicy() {
        return Optional.ofNullable(this.securityPolicy);
    }

    private RegionSecurityPolicyRuleState() {}

    private RegionSecurityPolicyRuleState(RegionSecurityPolicyRuleState $) {
        this.action = $.action;
        this.description = $.description;
        this.match = $.match;
        this.networkMatch = $.networkMatch;
        this.preview = $.preview;
        this.priority = $.priority;
        this.project = $.project;
        this.region = $.region;
        this.securityPolicy = $.securityPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionSecurityPolicyRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionSecurityPolicyRuleState $;

        public Builder() {
            $ = new RegionSecurityPolicyRuleState();
        }

        public Builder(RegionSecurityPolicyRuleState defaults) {
            $ = new RegionSecurityPolicyRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The Action to perform when the rule is matched. The following are the valid actions:
         * * allow: allow access to target.
         * * deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for STATUS are 403, 404, and 502.
         * * rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
         * * redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. This action is only supported in Global Security Policies of type CLOUD_ARMOR.
         * * throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The Action to perform when the rule is matched. The following are the valid actions:
         * * allow: allow access to target.
         * * deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for STATUS are 403, 404, and 502.
         * * rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
         * * redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. This action is only supported in Global Security Policies of type CLOUD_ARMOR.
         * * throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param match A match condition that incoming traffic is evaluated against.
         * If it evaluates to true, the corresponding &#39;action&#39; is enforced.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<RegionSecurityPolicyRuleMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match A match condition that incoming traffic is evaluated against.
         * If it evaluates to true, the corresponding &#39;action&#39; is enforced.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder match(RegionSecurityPolicyRuleMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param networkMatch A match condition that incoming packets are evaluated against for CLOUD_ARMOR_NETWORK security policies. If it matches, the corresponding &#39;action&#39; is enforced.
         * The match criteria for a rule consists of built-in match fields (like &#39;srcIpRanges&#39;) and potentially multiple user-defined match fields (&#39;userDefinedFields&#39;).
         * Field values may be extracted directly from the packet or derived from it (e.g. &#39;srcRegionCodes&#39;). Some fields may not be present in every packet (e.g. &#39;srcPorts&#39;). A user-defined field is only present if the base header is found in the packet and the entire field is in bounds.
         * Each match field may specify which values can match it, listing one or more ranges, prefixes, or exact values that are considered a match for the field. A field value must be present in order to match a specified match field. If no match values are specified for a match field, then any field value is considered to match it, and it&#39;s not required to be present. For strings specifying &#39;*&#39; is also equivalent to match all.
         * For a packet to match a rule, all specified match fields must match the corresponding field values derived from the packet.
         * Example:
         * networkMatch: srcIpRanges: - &#34;192.0.2.0/24&#34; - &#34;198.51.100.0/24&#34; userDefinedFields: - name: &#34;ipv4_fragment_offset&#34; values: - &#34;1-0x1fff&#34;
         * The above match condition matches packets with a source IP in 192.0.2.0/24 or 198.51.100.0/24 and a user-defined field named &#34;ipv4_fragment_offset&#34; with a value between 1 and 0x1fff inclusive
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkMatch(@Nullable Output<RegionSecurityPolicyRuleNetworkMatchArgs> networkMatch) {
            $.networkMatch = networkMatch;
            return this;
        }

        /**
         * @param networkMatch A match condition that incoming packets are evaluated against for CLOUD_ARMOR_NETWORK security policies. If it matches, the corresponding &#39;action&#39; is enforced.
         * The match criteria for a rule consists of built-in match fields (like &#39;srcIpRanges&#39;) and potentially multiple user-defined match fields (&#39;userDefinedFields&#39;).
         * Field values may be extracted directly from the packet or derived from it (e.g. &#39;srcRegionCodes&#39;). Some fields may not be present in every packet (e.g. &#39;srcPorts&#39;). A user-defined field is only present if the base header is found in the packet and the entire field is in bounds.
         * Each match field may specify which values can match it, listing one or more ranges, prefixes, or exact values that are considered a match for the field. A field value must be present in order to match a specified match field. If no match values are specified for a match field, then any field value is considered to match it, and it&#39;s not required to be present. For strings specifying &#39;*&#39; is also equivalent to match all.
         * For a packet to match a rule, all specified match fields must match the corresponding field values derived from the packet.
         * Example:
         * networkMatch: srcIpRanges: - &#34;192.0.2.0/24&#34; - &#34;198.51.100.0/24&#34; userDefinedFields: - name: &#34;ipv4_fragment_offset&#34; values: - &#34;1-0x1fff&#34;
         * The above match condition matches packets with a source IP in 192.0.2.0/24 or 198.51.100.0/24 and a user-defined field named &#34;ipv4_fragment_offset&#34; with a value between 1 and 0x1fff inclusive
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkMatch(RegionSecurityPolicyRuleNetworkMatchArgs networkMatch) {
            return networkMatch(Output.of(networkMatch));
        }

        /**
         * @param preview If set to true, the specified action is not enforced.
         * 
         * @return builder
         * 
         */
        public Builder preview(@Nullable Output<Boolean> preview) {
            $.preview = preview;
            return this;
        }

        /**
         * @param preview If set to true, the specified action is not enforced.
         * 
         * @return builder
         * 
         */
        public Builder preview(Boolean preview) {
            return preview(Output.of(preview));
        }

        /**
         * @param priority An integer indicating the priority of a rule in the list.
         * The priority must be a positive value between 0 and 2147483647.
         * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority An integer indicating the priority of a rule in the list.
         * The priority must be a positive value between 0 and 2147483647.
         * Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The Region in which the created Region Security Policy rule should reside.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region in which the created Region Security Policy rule should reside.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param securityPolicy The name of the security policy this rule belongs to.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder securityPolicy(@Nullable Output<String> securityPolicy) {
            $.securityPolicy = securityPolicy;
            return this;
        }

        /**
         * @param securityPolicy The name of the security policy this rule belongs to.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder securityPolicy(String securityPolicy) {
            return securityPolicy(Output.of(securityPolicy));
        }

        public RegionSecurityPolicyRuleState build() {
            return $;
        }
    }

}
