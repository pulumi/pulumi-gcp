// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAuthorityArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAuthorityArgs Empty = new GetAuthorityArgs();

    /**
     * ID of the certificate authority.
     * 
     */
    @Import(name="certificateAuthorityId")
    private @Nullable Output<String> certificateAuthorityId;

    /**
     * @return ID of the certificate authority.
     * 
     */
    public Optional<Output<String>> certificateAuthorityId() {
        return Optional.ofNullable(this.certificateAuthorityId);
    }

    /**
     * The location the certificate authority exists in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location the certificate authority exists in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the pool the certificate authority belongs to.
     * 
     */
    @Import(name="pool")
    private @Nullable Output<String> pool;

    /**
     * @return The name of the pool the certificate authority belongs to.
     * 
     */
    public Optional<Output<String>> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetAuthorityArgs() {}

    private GetAuthorityArgs(GetAuthorityArgs $) {
        this.certificateAuthorityId = $.certificateAuthorityId;
        this.location = $.location;
        this.pool = $.pool;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAuthorityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAuthorityArgs $;

        public Builder() {
            $ = new GetAuthorityArgs();
        }

        public Builder(GetAuthorityArgs defaults) {
            $ = new GetAuthorityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthorityId ID of the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityId(@Nullable Output<String> certificateAuthorityId) {
            $.certificateAuthorityId = certificateAuthorityId;
            return this;
        }

        /**
         * @param certificateAuthorityId ID of the certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityId(String certificateAuthorityId) {
            return certificateAuthorityId(Output.of(certificateAuthorityId));
        }

        /**
         * @param location The location the certificate authority exists in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location the certificate authority exists in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param pool The name of the pool the certificate authority belongs to.
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable Output<String> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool The name of the pool the certificate authority belongs to.
         * 
         * @return builder
         * 
         */
        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetAuthorityArgs build() {
            return $;
        }
    }

}
