// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudbuild.outputs.TriggerBitbucketServerTriggerConfigPullRequest;
import com.pulumi.gcp.cloudbuild.outputs.TriggerBitbucketServerTriggerConfigPush;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TriggerBitbucketServerTriggerConfig {
    /**
     * @return The Bitbucket server config resource that this trigger config maps to.
     * 
     */
    private String bitbucketServerConfigResource;
    /**
     * @return Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is &#34;TEST&#34;.
     * 
     */
    private String projectKey;
    /**
     * @return Filter to match changes in pull requests.
     * Structure is documented below.
     * 
     */
    private @Nullable TriggerBitbucketServerTriggerConfigPullRequest pullRequest;
    /**
     * @return Filter to match changes in refs like branches, tags.
     * Structure is documented below.
     * 
     */
    private @Nullable TriggerBitbucketServerTriggerConfigPush push;
    /**
     * @return Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
     * For example, if the repository name is &#39;test repo&#39;, in the URL it would become &#39;test-repo&#39; as in https://mybitbucket.server/projects/TEST/repos/test-repo.
     * 
     */
    private String repoSlug;

    private TriggerBitbucketServerTriggerConfig() {}
    /**
     * @return The Bitbucket server config resource that this trigger config maps to.
     * 
     */
    public String bitbucketServerConfigResource() {
        return this.bitbucketServerConfigResource;
    }
    /**
     * @return Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is &#34;TEST&#34;.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }
    /**
     * @return Filter to match changes in pull requests.
     * Structure is documented below.
     * 
     */
    public Optional<TriggerBitbucketServerTriggerConfigPullRequest> pullRequest() {
        return Optional.ofNullable(this.pullRequest);
    }
    /**
     * @return Filter to match changes in refs like branches, tags.
     * Structure is documented below.
     * 
     */
    public Optional<TriggerBitbucketServerTriggerConfigPush> push() {
        return Optional.ofNullable(this.push);
    }
    /**
     * @return Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
     * For example, if the repository name is &#39;test repo&#39;, in the URL it would become &#39;test-repo&#39; as in https://mybitbucket.server/projects/TEST/repos/test-repo.
     * 
     */
    public String repoSlug() {
        return this.repoSlug;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TriggerBitbucketServerTriggerConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bitbucketServerConfigResource;
        private String projectKey;
        private @Nullable TriggerBitbucketServerTriggerConfigPullRequest pullRequest;
        private @Nullable TriggerBitbucketServerTriggerConfigPush push;
        private String repoSlug;
        public Builder() {}
        public Builder(TriggerBitbucketServerTriggerConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitbucketServerConfigResource = defaults.bitbucketServerConfigResource;
    	      this.projectKey = defaults.projectKey;
    	      this.pullRequest = defaults.pullRequest;
    	      this.push = defaults.push;
    	      this.repoSlug = defaults.repoSlug;
        }

        @CustomType.Setter
        public Builder bitbucketServerConfigResource(String bitbucketServerConfigResource) {
            this.bitbucketServerConfigResource = Objects.requireNonNull(bitbucketServerConfigResource);
            return this;
        }
        @CustomType.Setter
        public Builder projectKey(String projectKey) {
            this.projectKey = Objects.requireNonNull(projectKey);
            return this;
        }
        @CustomType.Setter
        public Builder pullRequest(@Nullable TriggerBitbucketServerTriggerConfigPullRequest pullRequest) {
            this.pullRequest = pullRequest;
            return this;
        }
        @CustomType.Setter
        public Builder push(@Nullable TriggerBitbucketServerTriggerConfigPush push) {
            this.push = push;
            return this;
        }
        @CustomType.Setter
        public Builder repoSlug(String repoSlug) {
            this.repoSlug = Objects.requireNonNull(repoSlug);
            return this;
        }
        public TriggerBitbucketServerTriggerConfig build() {
            final var o = new TriggerBitbucketServerTriggerConfig();
            o.bitbucketServerConfigResource = bitbucketServerConfigResource;
            o.projectKey = projectKey;
            o.pullRequest = pullRequest;
            o.push = push;
            o.repoSlug = repoSlug;
            return o;
        }
    }
}
