// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.certificatemanager.outputs.CertificateManagedAuthorizationAttemptInfo;
import com.pulumi.gcp.certificatemanager.outputs.CertificateManagedProvisioningIssue;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificateManaged {
    /**
     * @return Detailed state of the latest authorization attempt for each domain
     * specified for this Managed Certificate.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos;
    /**
     * @return Authorizations that will be used for performing domain authorization
     * 
     */
    private @Nullable List<String> dnsAuthorizations;
    /**
     * @return The domains for which a managed SSL certificate will be generated.
     * Wildcard domains are only supported with DNS challenge resolution
     * 
     */
    private @Nullable List<String> domains;
    /**
     * @return Information about issues with provisioning this Managed Certificate.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CertificateManagedProvisioningIssue> provisioningIssues;
    /**
     * @return State of the domain for managed certificate issuance.
     * 
     */
    private @Nullable String state;

    private CertificateManaged() {}
    /**
     * @return Detailed state of the latest authorization attempt for each domain
     * specified for this Managed Certificate.
     * Structure is documented below.
     * 
     */
    public List<CertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos() {
        return this.authorizationAttemptInfos == null ? List.of() : this.authorizationAttemptInfos;
    }
    /**
     * @return Authorizations that will be used for performing domain authorization
     * 
     */
    public List<String> dnsAuthorizations() {
        return this.dnsAuthorizations == null ? List.of() : this.dnsAuthorizations;
    }
    /**
     * @return The domains for which a managed SSL certificate will be generated.
     * Wildcard domains are only supported with DNS challenge resolution
     * 
     */
    public List<String> domains() {
        return this.domains == null ? List.of() : this.domains;
    }
    /**
     * @return Information about issues with provisioning this Managed Certificate.
     * Structure is documented below.
     * 
     */
    public List<CertificateManagedProvisioningIssue> provisioningIssues() {
        return this.provisioningIssues == null ? List.of() : this.provisioningIssues;
    }
    /**
     * @return State of the domain for managed certificate issuance.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateManaged defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<CertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos;
        private @Nullable List<String> dnsAuthorizations;
        private @Nullable List<String> domains;
        private @Nullable List<CertificateManagedProvisioningIssue> provisioningIssues;
        private @Nullable String state;
        public Builder() {}
        public Builder(CertificateManaged defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationAttemptInfos = defaults.authorizationAttemptInfos;
    	      this.dnsAuthorizations = defaults.dnsAuthorizations;
    	      this.domains = defaults.domains;
    	      this.provisioningIssues = defaults.provisioningIssues;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder authorizationAttemptInfos(@Nullable List<CertificateManagedAuthorizationAttemptInfo> authorizationAttemptInfos) {
            this.authorizationAttemptInfos = authorizationAttemptInfos;
            return this;
        }
        public Builder authorizationAttemptInfos(CertificateManagedAuthorizationAttemptInfo... authorizationAttemptInfos) {
            return authorizationAttemptInfos(List.of(authorizationAttemptInfos));
        }
        @CustomType.Setter
        public Builder dnsAuthorizations(@Nullable List<String> dnsAuthorizations) {
            this.dnsAuthorizations = dnsAuthorizations;
            return this;
        }
        public Builder dnsAuthorizations(String... dnsAuthorizations) {
            return dnsAuthorizations(List.of(dnsAuthorizations));
        }
        @CustomType.Setter
        public Builder domains(@Nullable List<String> domains) {
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder provisioningIssues(@Nullable List<CertificateManagedProvisioningIssue> provisioningIssues) {
            this.provisioningIssues = provisioningIssues;
            return this;
        }
        public Builder provisioningIssues(CertificateManagedProvisioningIssue... provisioningIssues) {
            return provisioningIssues(List.of(provisioningIssues));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public CertificateManaged build() {
            final var o = new CertificateManaged();
            o.authorizationAttemptInfos = authorizationAttemptInfos;
            o.dnsAuthorizations = dnsAuthorizations;
            o.domains = domains;
            o.provisioningIssues = provisioningIssues;
            o.state = state;
            return o;
        }
    }
}
