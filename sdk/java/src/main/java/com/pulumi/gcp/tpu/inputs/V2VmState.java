// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.tpu.inputs.V2VmAcceleratorConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmDataDiskArgs;
import com.pulumi.gcp.tpu.inputs.V2VmNetworkConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmNetworkEndpointArgs;
import com.pulumi.gcp.tpu.inputs.V2VmSchedulingConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmServiceAccountArgs;
import com.pulumi.gcp.tpu.inputs.V2VmShieldedInstanceConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmSymptomArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2VmState extends com.pulumi.resources.ResourceArgs {

    public static final V2VmState Empty = new V2VmState();

    /**
     * The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
     * as `accelerator_type`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * Structure is documented below.
     * 
     */
    @Import(name="acceleratorConfig")
    private @Nullable Output<V2VmAcceleratorConfigArgs> acceleratorConfig;

    /**
     * @return The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
     * as `accelerator_type`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2VmAcceleratorConfigArgs>> acceleratorConfig() {
        return Optional.ofNullable(this.acceleratorConfig);
    }

    /**
     * TPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
     * `accelerator_config`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * 
     */
    @Import(name="acceleratorType")
    private @Nullable Output<String> acceleratorType;

    /**
     * @return TPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
     * `accelerator_config`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
     * 
     */
    public Optional<Output<String>> acceleratorType() {
        return Optional.ofNullable(this.acceleratorType);
    }

    /**
     * The API version that created this Node.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return The API version that created this Node.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
     * be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
     * block would be wasteful (a node can only consume one IP address). Errors will occur if the
     * CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
     * with any subnetworks in the user&#39;s provided network, or the provided network is peered with
     * another network that is using that CIDR block.
     * 
     */
    @Import(name="cidrBlock")
    private @Nullable Output<String> cidrBlock;

    /**
     * @return The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
     * be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
     * block would be wasteful (a node can only consume one IP address). Errors will occur if the
     * CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
     * with any subnetworks in the user&#39;s provided network, or the provided network is peered with
     * another network that is using that CIDR block.
     * 
     */
    public Optional<Output<String>> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }

    /**
     * The additional data disks for the Node.
     * Structure is documented below.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<V2VmDataDiskArgs>> dataDisks;

    /**
     * @return The additional data disks for the Node.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2VmDataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * Text description of the TPU.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Text description of the TPU.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * The health status of the TPU node.
     * 
     */
    @Import(name="health")
    private @Nullable Output<String> health;

    /**
     * @return The health status of the TPU node.
     * 
     */
    public Optional<Output<String>> health() {
        return Optional.ofNullable(this.health);
    }

    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    @Import(name="healthDescription")
    private @Nullable Output<String> healthDescription;

    /**
     * @return If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    public Optional<Output<String>> healthDescription() {
        return Optional.ofNullable(this.healthDescription);
    }

    /**
     * Resource labels to represent user-provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Whether the Node belongs to a Multislice group.
     * 
     */
    @Import(name="multisliceNode")
    private @Nullable Output<Boolean> multisliceNode;

    /**
     * @return Whether the Node belongs to a Multislice group.
     * 
     */
    public Optional<Output<Boolean>> multisliceNode() {
        return Optional.ofNullable(this.multisliceNode);
    }

    /**
     * The immutable name of the TPU.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The immutable name of the TPU.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network configurations for the TPU node.
     * Structure is documented below.
     * 
     */
    @Import(name="networkConfig")
    private @Nullable Output<V2VmNetworkConfigArgs> networkConfig;

    /**
     * @return Network configurations for the TPU node.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2VmNetworkConfigArgs>> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }

    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that
     * runtime clients of the node reach out to the 0th entry in this map first.
     * Structure is documented below.
     * 
     */
    @Import(name="networkEndpoints")
    private @Nullable Output<List<V2VmNetworkEndpointArgs>> networkEndpoints;

    /**
     * @return The network endpoints where TPU workers can be accessed and sent work. It is recommended that
     * runtime clients of the node reach out to the 0th entry in this map first.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2VmNetworkEndpointArgs>>> networkEndpoints() {
        return Optional.ofNullable(this.networkEndpoints);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * The qualified name of the QueuedResource that requested this Node.
     * 
     */
    @Import(name="queuedResource")
    private @Nullable Output<String> queuedResource;

    /**
     * @return The qualified name of the QueuedResource that requested this Node.
     * 
     */
    public Optional<Output<String>> queuedResource() {
        return Optional.ofNullable(this.queuedResource);
    }

    /**
     * Runtime version for the TPU.
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    /**
     * @return Runtime version for the TPU.
     * 
     */
    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * The scheduling options for this node.
     * Structure is documented below.
     * 
     */
    @Import(name="schedulingConfig")
    private @Nullable Output<V2VmSchedulingConfigArgs> schedulingConfig;

    /**
     * @return The scheduling options for this node.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2VmSchedulingConfigArgs>> schedulingConfig() {
        return Optional.ofNullable(this.schedulingConfig);
    }

    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
     * specified, the default compute service account will be used.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<V2VmServiceAccountArgs> serviceAccount;

    /**
     * @return The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
     * specified, the default compute service account will be used.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2VmServiceAccountArgs>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Shielded Instance options.
     * Structure is documented below.
     * 
     */
    @Import(name="shieldedInstanceConfig")
    private @Nullable Output<V2VmShieldedInstanceConfigArgs> shieldedInstanceConfig;

    /**
     * @return Shielded Instance options.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2VmShieldedInstanceConfigArgs>> shieldedInstanceConfig() {
        return Optional.ofNullable(this.shieldedInstanceConfig);
    }

    /**
     * The current state for the TPU Node.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state for the TPU Node.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The Symptoms that have occurred to the TPU Node.
     * Structure is documented below.
     * 
     */
    @Import(name="symptoms")
    private @Nullable Output<List<V2VmSymptomArgs>> symptoms;

    /**
     * @return The Symptoms that have occurred to the TPU Node.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2VmSymptomArgs>>> symptoms() {
        return Optional.ofNullable(this.symptoms);
    }

    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private V2VmState() {}

    private V2VmState(V2VmState $) {
        this.acceleratorConfig = $.acceleratorConfig;
        this.acceleratorType = $.acceleratorType;
        this.apiVersion = $.apiVersion;
        this.cidrBlock = $.cidrBlock;
        this.dataDisks = $.dataDisks;
        this.description = $.description;
        this.effectiveLabels = $.effectiveLabels;
        this.health = $.health;
        this.healthDescription = $.healthDescription;
        this.labels = $.labels;
        this.metadata = $.metadata;
        this.multisliceNode = $.multisliceNode;
        this.name = $.name;
        this.networkConfig = $.networkConfig;
        this.networkEndpoints = $.networkEndpoints;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.queuedResource = $.queuedResource;
        this.runtimeVersion = $.runtimeVersion;
        this.schedulingConfig = $.schedulingConfig;
        this.serviceAccount = $.serviceAccount;
        this.shieldedInstanceConfig = $.shieldedInstanceConfig;
        this.state = $.state;
        this.symptoms = $.symptoms;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2VmState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2VmState $;

        public Builder() {
            $ = new V2VmState();
        }

        public Builder(V2VmState defaults) {
            $ = new V2VmState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorConfig The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
         * as `accelerator_type`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorConfig(@Nullable Output<V2VmAcceleratorConfigArgs> acceleratorConfig) {
            $.acceleratorConfig = acceleratorConfig;
            return this;
        }

        /**
         * @param acceleratorConfig The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
         * as `accelerator_type`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorConfig(V2VmAcceleratorConfigArgs acceleratorConfig) {
            return acceleratorConfig(Output.of(acceleratorConfig));
        }

        /**
         * @param acceleratorType TPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
         * `accelerator_config`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(@Nullable Output<String> acceleratorType) {
            $.acceleratorType = acceleratorType;
            return this;
        }

        /**
         * @param acceleratorType TPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
         * `accelerator_config`. If neither is specified, `accelerator_type` defaults to &#39;v2-8&#39;.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(String acceleratorType) {
            return acceleratorType(Output.of(acceleratorType));
        }

        /**
         * @param apiVersion The API version that created this Node.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion The API version that created this Node.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param cidrBlock The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
         * be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
         * block would be wasteful (a node can only consume one IP address). Errors will occur if the
         * CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
         * with any subnetworks in the user&#39;s provided network, or the provided network is peered with
         * another network that is using that CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(@Nullable Output<String> cidrBlock) {
            $.cidrBlock = cidrBlock;
            return this;
        }

        /**
         * @param cidrBlock The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
         * be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
         * block would be wasteful (a node can only consume one IP address). Errors will occur if the
         * CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
         * with any subnetworks in the user&#39;s provided network, or the provided network is peered with
         * another network that is using that CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(String cidrBlock) {
            return cidrBlock(Output.of(cidrBlock));
        }

        /**
         * @param dataDisks The additional data disks for the Node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<V2VmDataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks The additional data disks for the Node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<V2VmDataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks The additional data disks for the Node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(V2VmDataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param description Text description of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Text description of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param health The health status of the TPU node.
         * 
         * @return builder
         * 
         */
        public Builder health(@Nullable Output<String> health) {
            $.health = health;
            return this;
        }

        /**
         * @param health The health status of the TPU node.
         * 
         * @return builder
         * 
         */
        public Builder health(String health) {
            return health(Output.of(health));
        }

        /**
         * @param healthDescription If this field is populated, it contains a description of why the TPU Node is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder healthDescription(@Nullable Output<String> healthDescription) {
            $.healthDescription = healthDescription;
            return this;
        }

        /**
         * @param healthDescription If this field is populated, it contains a description of why the TPU Node is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder healthDescription(String healthDescription) {
            return healthDescription(Output.of(healthDescription));
        }

        /**
         * @param labels Resource labels to represent user-provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user-provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param metadata Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param multisliceNode Whether the Node belongs to a Multislice group.
         * 
         * @return builder
         * 
         */
        public Builder multisliceNode(@Nullable Output<Boolean> multisliceNode) {
            $.multisliceNode = multisliceNode;
            return this;
        }

        /**
         * @param multisliceNode Whether the Node belongs to a Multislice group.
         * 
         * @return builder
         * 
         */
        public Builder multisliceNode(Boolean multisliceNode) {
            return multisliceNode(Output.of(multisliceNode));
        }

        /**
         * @param name The immutable name of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The immutable name of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConfig Network configurations for the TPU node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(@Nullable Output<V2VmNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig Network configurations for the TPU node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(V2VmNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param networkEndpoints The network endpoints where TPU workers can be accessed and sent work. It is recommended that
         * runtime clients of the node reach out to the 0th entry in this map first.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkEndpoints(@Nullable Output<List<V2VmNetworkEndpointArgs>> networkEndpoints) {
            $.networkEndpoints = networkEndpoints;
            return this;
        }

        /**
         * @param networkEndpoints The network endpoints where TPU workers can be accessed and sent work. It is recommended that
         * runtime clients of the node reach out to the 0th entry in this map first.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkEndpoints(List<V2VmNetworkEndpointArgs> networkEndpoints) {
            return networkEndpoints(Output.of(networkEndpoints));
        }

        /**
         * @param networkEndpoints The network endpoints where TPU workers can be accessed and sent work. It is recommended that
         * runtime clients of the node reach out to the 0th entry in this map first.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkEndpoints(V2VmNetworkEndpointArgs... networkEndpoints) {
            return networkEndpoints(List.of(networkEndpoints));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param queuedResource The qualified name of the QueuedResource that requested this Node.
         * 
         * @return builder
         * 
         */
        public Builder queuedResource(@Nullable Output<String> queuedResource) {
            $.queuedResource = queuedResource;
            return this;
        }

        /**
         * @param queuedResource The qualified name of the QueuedResource that requested this Node.
         * 
         * @return builder
         * 
         */
        public Builder queuedResource(String queuedResource) {
            return queuedResource(Output.of(queuedResource));
        }

        /**
         * @param runtimeVersion Runtime version for the TPU.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion Runtime version for the TPU.
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param schedulingConfig The scheduling options for this node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedulingConfig(@Nullable Output<V2VmSchedulingConfigArgs> schedulingConfig) {
            $.schedulingConfig = schedulingConfig;
            return this;
        }

        /**
         * @param schedulingConfig The scheduling options for this node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedulingConfig(V2VmSchedulingConfigArgs schedulingConfig) {
            return schedulingConfig(Output.of(schedulingConfig));
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
         * specified, the default compute service account will be used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<V2VmServiceAccountArgs> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
         * specified, the default compute service account will be used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(V2VmServiceAccountArgs serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param shieldedInstanceConfig Shielded Instance options.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shieldedInstanceConfig(@Nullable Output<V2VmShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            $.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        /**
         * @param shieldedInstanceConfig Shielded Instance options.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder shieldedInstanceConfig(V2VmShieldedInstanceConfigArgs shieldedInstanceConfig) {
            return shieldedInstanceConfig(Output.of(shieldedInstanceConfig));
        }

        /**
         * @param state The current state for the TPU Node.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state for the TPU Node.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param symptoms The Symptoms that have occurred to the TPU Node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder symptoms(@Nullable Output<List<V2VmSymptomArgs>> symptoms) {
            $.symptoms = symptoms;
            return this;
        }

        /**
         * @param symptoms The Symptoms that have occurred to the TPU Node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder symptoms(List<V2VmSymptomArgs> symptoms) {
            return symptoms(Output.of(symptoms));
        }

        /**
         * @param symptoms The Symptoms that have occurred to the TPU Node.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder symptoms(V2VmSymptomArgs... symptoms) {
            return symptoms(List.of(symptoms));
        }

        /**
         * @param tags Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zone The GCP location for the TPU. If it is not provided, the provider zone is used.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The GCP location for the TPU. If it is not provided, the provider zone is used.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public V2VmState build() {
            return $;
        }
    }

}
