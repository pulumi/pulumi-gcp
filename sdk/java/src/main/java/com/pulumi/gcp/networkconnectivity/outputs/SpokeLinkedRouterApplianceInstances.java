// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedRouterApplianceInstancesInstance;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class SpokeLinkedRouterApplianceInstances {
    /**
     * @return IP ranges allowed to be included during import from hub (does not control transit connectivity).
     * The only allowed value for now is &#34;ALL_IPV4_RANGES&#34;.
     * 
     */
    private @Nullable List<String> includeImportRanges;
    /**
     * @return The list of router appliance instances
     * Structure is documented below.
     * 
     */
    private List<SpokeLinkedRouterApplianceInstancesInstance> instances;
    /**
     * @return A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
     * 
     */
    private Boolean siteToSiteDataTransfer;

    private SpokeLinkedRouterApplianceInstances() {}
    /**
     * @return IP ranges allowed to be included during import from hub (does not control transit connectivity).
     * The only allowed value for now is &#34;ALL_IPV4_RANGES&#34;.
     * 
     */
    public List<String> includeImportRanges() {
        return this.includeImportRanges == null ? List.of() : this.includeImportRanges;
    }
    /**
     * @return The list of router appliance instances
     * Structure is documented below.
     * 
     */
    public List<SpokeLinkedRouterApplianceInstancesInstance> instances() {
        return this.instances;
    }
    /**
     * @return A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
     * 
     */
    public Boolean siteToSiteDataTransfer() {
        return this.siteToSiteDataTransfer;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpokeLinkedRouterApplianceInstances defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> includeImportRanges;
        private List<SpokeLinkedRouterApplianceInstancesInstance> instances;
        private Boolean siteToSiteDataTransfer;
        public Builder() {}
        public Builder(SpokeLinkedRouterApplianceInstances defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeImportRanges = defaults.includeImportRanges;
    	      this.instances = defaults.instances;
    	      this.siteToSiteDataTransfer = defaults.siteToSiteDataTransfer;
        }

        @CustomType.Setter
        public Builder includeImportRanges(@Nullable List<String> includeImportRanges) {

            this.includeImportRanges = includeImportRanges;
            return this;
        }
        public Builder includeImportRanges(String... includeImportRanges) {
            return includeImportRanges(List.of(includeImportRanges));
        }
        @CustomType.Setter
        public Builder instances(List<SpokeLinkedRouterApplianceInstancesInstance> instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("SpokeLinkedRouterApplianceInstances", "instances");
            }
            this.instances = instances;
            return this;
        }
        public Builder instances(SpokeLinkedRouterApplianceInstancesInstance... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder siteToSiteDataTransfer(Boolean siteToSiteDataTransfer) {
            if (siteToSiteDataTransfer == null) {
              throw new MissingRequiredPropertyException("SpokeLinkedRouterApplianceInstances", "siteToSiteDataTransfer");
            }
            this.siteToSiteDataTransfer = siteToSiteDataTransfer;
            return this;
        }
        public SpokeLinkedRouterApplianceInstances build() {
            final var _resultValue = new SpokeLinkedRouterApplianceInstances();
            _resultValue.includeImportRanges = includeImportRanges;
            _resultValue.instances = instances;
            _resultValue.siteToSiteDataTransfer = siteToSiteDataTransfer;
            return _resultValue;
        }
    }
}
