// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigCloudrunConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigConfigConnectorConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigDnsCacheConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigGcePersistentDiskCsiDriverConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigGcpFilestoreCsiDriverConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigGcsFuseCsiDriverConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigGkeBackupAgentConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigHorizontalPodAutoscaling;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigHttpLoadBalancing;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigIstioConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigKalmConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigNetworkPolicyConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigParallelstoreCsiDriverConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigRayOperatorConfig;
import com.pulumi.gcp.container.outputs.ClusterAddonsConfigStatefulHaConfig;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterAddonsConfig {
    /**
     * @return . Structure is documented below.
     * 
     */
    private @Nullable ClusterAddonsConfigCloudrunConfig cloudrunConfig;
    /**
     * @return .
     * The status of the ConfigConnector addon. It is disabled by default; Set `enabled = true` to enable.
     * 
     */
    private @Nullable ClusterAddonsConfigConfigConnectorConfig configConnectorConfig;
    /**
     * @return .
     * The status of the NodeLocal DNSCache addon. It is disabled by default.
     * Set `enabled = true` to enable.
     * 
     * **Enabling/Disabling NodeLocal DNSCache in an existing cluster is a disruptive operation.
     * All cluster nodes running GKE 1.15 and higher are recreated.**
     * 
     */
    private @Nullable ClusterAddonsConfigDnsCacheConfig dnsCacheConfig;
    /**
     * @return .
     * Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Set `enabled = true` to enable.
     * 
     * **Note:** The Compute Engine persistent disk CSI Driver is enabled by default on newly created clusters for the following versions: Linux clusters: GKE version 1.18.10-gke.2100 or later, or 1.19.3-gke.2100 or later.
     * 
     */
    private @Nullable ClusterAddonsConfigGcePersistentDiskCsiDriverConfig gcePersistentDiskCsiDriverConfig;
    /**
     * @return The status of the Filestore CSI driver addon,
     * which allows the usage of filestore instance as volumes.
     * It is disabled by default; set `enabled = true` to enable.
     * 
     */
    private @Nullable ClusterAddonsConfigGcpFilestoreCsiDriverConfig gcpFilestoreCsiDriverConfig;
    /**
     * @return The status of the GCSFuse CSI driver addon,
     * which allows the usage of a gcs bucket as volumes.
     * It is disabled by default for Standard clusters; set `enabled = true` to enable.
     * It is enabled by default for Autopilot clusters with version 1.24 or later; set `enabled = true` to enable it explicitly.
     * See [Enable the Cloud Storage FUSE CSI driver](https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/cloud-storage-fuse-csi-driver#enable) for more information.
     * 
     */
    private @Nullable ClusterAddonsConfigGcsFuseCsiDriverConfig gcsFuseCsiDriverConfig;
    /**
     * @return .
     * The status of the Backup for GKE agent addon. It is disabled by default; Set `enabled = true` to enable.
     * 
     */
    private @Nullable ClusterAddonsConfigGkeBackupAgentConfig gkeBackupAgentConfig;
    /**
     * @return The status of the Horizontal Pod Autoscaling
     * addon, which increases or decreases the number of replica pods a replication controller
     * has based on the resource usage of the existing pods.
     * It is enabled by default;
     * set `disabled = true` to disable.
     * 
     */
    private @Nullable ClusterAddonsConfigHorizontalPodAutoscaling horizontalPodAutoscaling;
    /**
     * @return The status of the HTTP (L7) load balancing
     * controller addon, which makes it easy to set up HTTP load balancers for services in a
     * cluster. It is enabled by default; set `disabled = true` to disable.
     * 
     */
    private @Nullable ClusterAddonsConfigHttpLoadBalancing httpLoadBalancing;
    /**
     * @return .
     * Structure is documented below.
     * 
     */
    private @Nullable ClusterAddonsConfigIstioConfig istioConfig;
    /**
     * @return .
     * Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set `enabled = true` to enable.
     * 
     */
    private @Nullable ClusterAddonsConfigKalmConfig kalmConfig;
    /**
     * @return Whether we should enable the network policy addon
     * for the master.  This must be enabled in order to enable network policy for the nodes.
     * To enable this, you must also define a `network_policy` block,
     * otherwise nothing will happen.
     * It can only be disabled if the nodes already do not have network policies enabled.
     * Defaults to disabled; set `disabled = false` to enable.
     * 
     */
    private @Nullable ClusterAddonsConfigNetworkPolicyConfig networkPolicyConfig;
    /**
     * @return The status of the Parallelstore CSI driver addon,
     * which allows the usage of a Parallelstore instances as volumes.
     * It is disabled by default for Standard clusters; set `enabled = true` to enable.
     * It is enabled by default for Autopilot clusters with version 1.29 or later; set `enabled = true` to enable it explicitly.
     * See [Enable the Parallelstore CSI driver](https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/parallelstore-csi-new-volume#enable) for more information.
     * 
     * This example `addons_config` disables two addons:
     * 
     */
    private @Nullable ClusterAddonsConfigParallelstoreCsiDriverConfig parallelstoreCsiDriverConfig;
    /**
     * @return . The status of the [Ray Operator
     * addon](https://cloud.google.com/kubernetes-engine/docs/add-on/ray-on-gke/concepts/overview).
     * It is disabled by default. Set `enabled = true` to enable. The minimum
     * cluster version to enable Ray is 1.30.0-gke.1747000.
     * 
     * Ray Operator config has optional subfields
     * `ray_cluster_logging_config.enabled` and
     * `ray_cluster_monitoring_config.enabled` which control Ray Cluster logging
     * and monitoring respectively. See [Collect and view logs and metrics for Ray
     * clusters on
     * GKE](https://cloud.google.com/kubernetes-engine/docs/add-on/ray-on-gke/how-to/collect-view-logs-metrics)
     * for more information.
     * 
     */
    private @Nullable List<ClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs;
    /**
     * @return .
     * The status of the Stateful HA addon, which provides automatic configurable failover for stateful applications.
     * It is disabled by default for Standard clusters. Set `enabled = true` to enable.
     * 
     */
    private @Nullable ClusterAddonsConfigStatefulHaConfig statefulHaConfig;

    private ClusterAddonsConfig() {}
    /**
     * @return . Structure is documented below.
     * 
     */
    public Optional<ClusterAddonsConfigCloudrunConfig> cloudrunConfig() {
        return Optional.ofNullable(this.cloudrunConfig);
    }
    /**
     * @return .
     * The status of the ConfigConnector addon. It is disabled by default; Set `enabled = true` to enable.
     * 
     */
    public Optional<ClusterAddonsConfigConfigConnectorConfig> configConnectorConfig() {
        return Optional.ofNullable(this.configConnectorConfig);
    }
    /**
     * @return .
     * The status of the NodeLocal DNSCache addon. It is disabled by default.
     * Set `enabled = true` to enable.
     * 
     * **Enabling/Disabling NodeLocal DNSCache in an existing cluster is a disruptive operation.
     * All cluster nodes running GKE 1.15 and higher are recreated.**
     * 
     */
    public Optional<ClusterAddonsConfigDnsCacheConfig> dnsCacheConfig() {
        return Optional.ofNullable(this.dnsCacheConfig);
    }
    /**
     * @return .
     * Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Set `enabled = true` to enable.
     * 
     * **Note:** The Compute Engine persistent disk CSI Driver is enabled by default on newly created clusters for the following versions: Linux clusters: GKE version 1.18.10-gke.2100 or later, or 1.19.3-gke.2100 or later.
     * 
     */
    public Optional<ClusterAddonsConfigGcePersistentDiskCsiDriverConfig> gcePersistentDiskCsiDriverConfig() {
        return Optional.ofNullable(this.gcePersistentDiskCsiDriverConfig);
    }
    /**
     * @return The status of the Filestore CSI driver addon,
     * which allows the usage of filestore instance as volumes.
     * It is disabled by default; set `enabled = true` to enable.
     * 
     */
    public Optional<ClusterAddonsConfigGcpFilestoreCsiDriverConfig> gcpFilestoreCsiDriverConfig() {
        return Optional.ofNullable(this.gcpFilestoreCsiDriverConfig);
    }
    /**
     * @return The status of the GCSFuse CSI driver addon,
     * which allows the usage of a gcs bucket as volumes.
     * It is disabled by default for Standard clusters; set `enabled = true` to enable.
     * It is enabled by default for Autopilot clusters with version 1.24 or later; set `enabled = true` to enable it explicitly.
     * See [Enable the Cloud Storage FUSE CSI driver](https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/cloud-storage-fuse-csi-driver#enable) for more information.
     * 
     */
    public Optional<ClusterAddonsConfigGcsFuseCsiDriverConfig> gcsFuseCsiDriverConfig() {
        return Optional.ofNullable(this.gcsFuseCsiDriverConfig);
    }
    /**
     * @return .
     * The status of the Backup for GKE agent addon. It is disabled by default; Set `enabled = true` to enable.
     * 
     */
    public Optional<ClusterAddonsConfigGkeBackupAgentConfig> gkeBackupAgentConfig() {
        return Optional.ofNullable(this.gkeBackupAgentConfig);
    }
    /**
     * @return The status of the Horizontal Pod Autoscaling
     * addon, which increases or decreases the number of replica pods a replication controller
     * has based on the resource usage of the existing pods.
     * It is enabled by default;
     * set `disabled = true` to disable.
     * 
     */
    public Optional<ClusterAddonsConfigHorizontalPodAutoscaling> horizontalPodAutoscaling() {
        return Optional.ofNullable(this.horizontalPodAutoscaling);
    }
    /**
     * @return The status of the HTTP (L7) load balancing
     * controller addon, which makes it easy to set up HTTP load balancers for services in a
     * cluster. It is enabled by default; set `disabled = true` to disable.
     * 
     */
    public Optional<ClusterAddonsConfigHttpLoadBalancing> httpLoadBalancing() {
        return Optional.ofNullable(this.httpLoadBalancing);
    }
    /**
     * @return .
     * Structure is documented below.
     * 
     */
    public Optional<ClusterAddonsConfigIstioConfig> istioConfig() {
        return Optional.ofNullable(this.istioConfig);
    }
    /**
     * @return .
     * Configuration for the KALM addon, which manages the lifecycle of k8s. It is disabled by default; Set `enabled = true` to enable.
     * 
     */
    public Optional<ClusterAddonsConfigKalmConfig> kalmConfig() {
        return Optional.ofNullable(this.kalmConfig);
    }
    /**
     * @return Whether we should enable the network policy addon
     * for the master.  This must be enabled in order to enable network policy for the nodes.
     * To enable this, you must also define a `network_policy` block,
     * otherwise nothing will happen.
     * It can only be disabled if the nodes already do not have network policies enabled.
     * Defaults to disabled; set `disabled = false` to enable.
     * 
     */
    public Optional<ClusterAddonsConfigNetworkPolicyConfig> networkPolicyConfig() {
        return Optional.ofNullable(this.networkPolicyConfig);
    }
    /**
     * @return The status of the Parallelstore CSI driver addon,
     * which allows the usage of a Parallelstore instances as volumes.
     * It is disabled by default for Standard clusters; set `enabled = true` to enable.
     * It is enabled by default for Autopilot clusters with version 1.29 or later; set `enabled = true` to enable it explicitly.
     * See [Enable the Parallelstore CSI driver](https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/parallelstore-csi-new-volume#enable) for more information.
     * 
     * This example `addons_config` disables two addons:
     * 
     */
    public Optional<ClusterAddonsConfigParallelstoreCsiDriverConfig> parallelstoreCsiDriverConfig() {
        return Optional.ofNullable(this.parallelstoreCsiDriverConfig);
    }
    /**
     * @return . The status of the [Ray Operator
     * addon](https://cloud.google.com/kubernetes-engine/docs/add-on/ray-on-gke/concepts/overview).
     * It is disabled by default. Set `enabled = true` to enable. The minimum
     * cluster version to enable Ray is 1.30.0-gke.1747000.
     * 
     * Ray Operator config has optional subfields
     * `ray_cluster_logging_config.enabled` and
     * `ray_cluster_monitoring_config.enabled` which control Ray Cluster logging
     * and monitoring respectively. See [Collect and view logs and metrics for Ray
     * clusters on
     * GKE](https://cloud.google.com/kubernetes-engine/docs/add-on/ray-on-gke/how-to/collect-view-logs-metrics)
     * for more information.
     * 
     */
    public List<ClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs() {
        return this.rayOperatorConfigs == null ? List.of() : this.rayOperatorConfigs;
    }
    /**
     * @return .
     * The status of the Stateful HA addon, which provides automatic configurable failover for stateful applications.
     * It is disabled by default for Standard clusters. Set `enabled = true` to enable.
     * 
     */
    public Optional<ClusterAddonsConfigStatefulHaConfig> statefulHaConfig() {
        return Optional.ofNullable(this.statefulHaConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterAddonsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterAddonsConfigCloudrunConfig cloudrunConfig;
        private @Nullable ClusterAddonsConfigConfigConnectorConfig configConnectorConfig;
        private @Nullable ClusterAddonsConfigDnsCacheConfig dnsCacheConfig;
        private @Nullable ClusterAddonsConfigGcePersistentDiskCsiDriverConfig gcePersistentDiskCsiDriverConfig;
        private @Nullable ClusterAddonsConfigGcpFilestoreCsiDriverConfig gcpFilestoreCsiDriverConfig;
        private @Nullable ClusterAddonsConfigGcsFuseCsiDriverConfig gcsFuseCsiDriverConfig;
        private @Nullable ClusterAddonsConfigGkeBackupAgentConfig gkeBackupAgentConfig;
        private @Nullable ClusterAddonsConfigHorizontalPodAutoscaling horizontalPodAutoscaling;
        private @Nullable ClusterAddonsConfigHttpLoadBalancing httpLoadBalancing;
        private @Nullable ClusterAddonsConfigIstioConfig istioConfig;
        private @Nullable ClusterAddonsConfigKalmConfig kalmConfig;
        private @Nullable ClusterAddonsConfigNetworkPolicyConfig networkPolicyConfig;
        private @Nullable ClusterAddonsConfigParallelstoreCsiDriverConfig parallelstoreCsiDriverConfig;
        private @Nullable List<ClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs;
        private @Nullable ClusterAddonsConfigStatefulHaConfig statefulHaConfig;
        public Builder() {}
        public Builder(ClusterAddonsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudrunConfig = defaults.cloudrunConfig;
    	      this.configConnectorConfig = defaults.configConnectorConfig;
    	      this.dnsCacheConfig = defaults.dnsCacheConfig;
    	      this.gcePersistentDiskCsiDriverConfig = defaults.gcePersistentDiskCsiDriverConfig;
    	      this.gcpFilestoreCsiDriverConfig = defaults.gcpFilestoreCsiDriverConfig;
    	      this.gcsFuseCsiDriverConfig = defaults.gcsFuseCsiDriverConfig;
    	      this.gkeBackupAgentConfig = defaults.gkeBackupAgentConfig;
    	      this.horizontalPodAutoscaling = defaults.horizontalPodAutoscaling;
    	      this.httpLoadBalancing = defaults.httpLoadBalancing;
    	      this.istioConfig = defaults.istioConfig;
    	      this.kalmConfig = defaults.kalmConfig;
    	      this.networkPolicyConfig = defaults.networkPolicyConfig;
    	      this.parallelstoreCsiDriverConfig = defaults.parallelstoreCsiDriverConfig;
    	      this.rayOperatorConfigs = defaults.rayOperatorConfigs;
    	      this.statefulHaConfig = defaults.statefulHaConfig;
        }

        @CustomType.Setter
        public Builder cloudrunConfig(@Nullable ClusterAddonsConfigCloudrunConfig cloudrunConfig) {

            this.cloudrunConfig = cloudrunConfig;
            return this;
        }
        @CustomType.Setter
        public Builder configConnectorConfig(@Nullable ClusterAddonsConfigConfigConnectorConfig configConnectorConfig) {

            this.configConnectorConfig = configConnectorConfig;
            return this;
        }
        @CustomType.Setter
        public Builder dnsCacheConfig(@Nullable ClusterAddonsConfigDnsCacheConfig dnsCacheConfig) {

            this.dnsCacheConfig = dnsCacheConfig;
            return this;
        }
        @CustomType.Setter
        public Builder gcePersistentDiskCsiDriverConfig(@Nullable ClusterAddonsConfigGcePersistentDiskCsiDriverConfig gcePersistentDiskCsiDriverConfig) {

            this.gcePersistentDiskCsiDriverConfig = gcePersistentDiskCsiDriverConfig;
            return this;
        }
        @CustomType.Setter
        public Builder gcpFilestoreCsiDriverConfig(@Nullable ClusterAddonsConfigGcpFilestoreCsiDriverConfig gcpFilestoreCsiDriverConfig) {

            this.gcpFilestoreCsiDriverConfig = gcpFilestoreCsiDriverConfig;
            return this;
        }
        @CustomType.Setter
        public Builder gcsFuseCsiDriverConfig(@Nullable ClusterAddonsConfigGcsFuseCsiDriverConfig gcsFuseCsiDriverConfig) {

            this.gcsFuseCsiDriverConfig = gcsFuseCsiDriverConfig;
            return this;
        }
        @CustomType.Setter
        public Builder gkeBackupAgentConfig(@Nullable ClusterAddonsConfigGkeBackupAgentConfig gkeBackupAgentConfig) {

            this.gkeBackupAgentConfig = gkeBackupAgentConfig;
            return this;
        }
        @CustomType.Setter
        public Builder horizontalPodAutoscaling(@Nullable ClusterAddonsConfigHorizontalPodAutoscaling horizontalPodAutoscaling) {

            this.horizontalPodAutoscaling = horizontalPodAutoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder httpLoadBalancing(@Nullable ClusterAddonsConfigHttpLoadBalancing httpLoadBalancing) {

            this.httpLoadBalancing = httpLoadBalancing;
            return this;
        }
        @CustomType.Setter
        public Builder istioConfig(@Nullable ClusterAddonsConfigIstioConfig istioConfig) {

            this.istioConfig = istioConfig;
            return this;
        }
        @CustomType.Setter
        public Builder kalmConfig(@Nullable ClusterAddonsConfigKalmConfig kalmConfig) {

            this.kalmConfig = kalmConfig;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicyConfig(@Nullable ClusterAddonsConfigNetworkPolicyConfig networkPolicyConfig) {

            this.networkPolicyConfig = networkPolicyConfig;
            return this;
        }
        @CustomType.Setter
        public Builder parallelstoreCsiDriverConfig(@Nullable ClusterAddonsConfigParallelstoreCsiDriverConfig parallelstoreCsiDriverConfig) {

            this.parallelstoreCsiDriverConfig = parallelstoreCsiDriverConfig;
            return this;
        }
        @CustomType.Setter
        public Builder rayOperatorConfigs(@Nullable List<ClusterAddonsConfigRayOperatorConfig> rayOperatorConfigs) {

            this.rayOperatorConfigs = rayOperatorConfigs;
            return this;
        }
        public Builder rayOperatorConfigs(ClusterAddonsConfigRayOperatorConfig... rayOperatorConfigs) {
            return rayOperatorConfigs(List.of(rayOperatorConfigs));
        }
        @CustomType.Setter
        public Builder statefulHaConfig(@Nullable ClusterAddonsConfigStatefulHaConfig statefulHaConfig) {

            this.statefulHaConfig = statefulHaConfig;
            return this;
        }
        public ClusterAddonsConfig build() {
            final var _resultValue = new ClusterAddonsConfig();
            _resultValue.cloudrunConfig = cloudrunConfig;
            _resultValue.configConnectorConfig = configConnectorConfig;
            _resultValue.dnsCacheConfig = dnsCacheConfig;
            _resultValue.gcePersistentDiskCsiDriverConfig = gcePersistentDiskCsiDriverConfig;
            _resultValue.gcpFilestoreCsiDriverConfig = gcpFilestoreCsiDriverConfig;
            _resultValue.gcsFuseCsiDriverConfig = gcsFuseCsiDriverConfig;
            _resultValue.gkeBackupAgentConfig = gkeBackupAgentConfig;
            _resultValue.horizontalPodAutoscaling = horizontalPodAutoscaling;
            _resultValue.httpLoadBalancing = httpLoadBalancing;
            _resultValue.istioConfig = istioConfig;
            _resultValue.kalmConfig = kalmConfig;
            _resultValue.networkPolicyConfig = networkPolicyConfig;
            _resultValue.parallelstoreCsiDriverConfig = parallelstoreCsiDriverConfig;
            _resultValue.rayOperatorConfigs = rayOperatorConfigs;
            _resultValue.statefulHaConfig = statefulHaConfig;
            return _resultValue;
        }
    }
}
