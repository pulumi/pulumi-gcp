// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAddressesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAddressesArgs Empty = new GetAddressesArgs();

    /**
     * A filter expression that
     * filters resources listed in the response. The expression must specify
     * the field name, an operator, and the value that you want to use for
     * filtering. The value must be a string, a number, or a boolean. The
     * operator must be either &#34;=&#34;, &#34;!=&#34;, &#34;&gt;&#34;, &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;=&#34; or &#34;:&#34;. For
     * example, if you are filtering Compute Engine instances, you can
     * exclude instances named &#34;example-instance&#34; by specifying &#34;name !=
     * example-instance&#34;. The &#34;:&#34; operator can be used with string fields to
     * match substrings. For non-string fields it is equivalent to the &#34;=&#34;
     * operator. The &#34;:*&#34; comparison can be used to test whether a key has
     * been defined. For example, to find all objects with &#34;owner&#34; label
     * use: &#34;&#34;&#34; labels.owner:* &#34;&#34;&#34; You can also filter nested fields. For
     * example, you could specify &#34;scheduling.automaticRestart = false&#34; to
     * include instances only if they are not scheduled for automatic
     * restarts. You can use filtering on nested fields to filter based on
     * resource labels. To filter on multiple expressions, provide each
     * separate expression within parentheses. For example: &#34;&#34;&#34;
     * (scheduling.automaticRestart = true) (cpuPlatform = &#34;Intel Skylake&#34;)
     * &#34;&#34;&#34; By default, each expression is an &#34;AND&#34; expression. However, you
     * can include &#34;AND&#34; and &#34;OR&#34; expressions explicitly. For example: &#34;&#34;&#34;
     * (cpuPlatform = &#34;Intel Skylake&#34;) OR (cpuPlatform = &#34;Intel Broadwell&#34;)
     * AND (scheduling.automaticRestart = true)
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return A filter expression that
     * filters resources listed in the response. The expression must specify
     * the field name, an operator, and the value that you want to use for
     * filtering. The value must be a string, a number, or a boolean. The
     * operator must be either &#34;=&#34;, &#34;!=&#34;, &#34;&gt;&#34;, &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;=&#34; or &#34;:&#34;. For
     * example, if you are filtering Compute Engine instances, you can
     * exclude instances named &#34;example-instance&#34; by specifying &#34;name !=
     * example-instance&#34;. The &#34;:&#34; operator can be used with string fields to
     * match substrings. For non-string fields it is equivalent to the &#34;=&#34;
     * operator. The &#34;:*&#34; comparison can be used to test whether a key has
     * been defined. For example, to find all objects with &#34;owner&#34; label
     * use: &#34;&#34;&#34; labels.owner:* &#34;&#34;&#34; You can also filter nested fields. For
     * example, you could specify &#34;scheduling.automaticRestart = false&#34; to
     * include instances only if they are not scheduled for automatic
     * restarts. You can use filtering on nested fields to filter based on
     * resource labels. To filter on multiple expressions, provide each
     * separate expression within parentheses. For example: &#34;&#34;&#34;
     * (scheduling.automaticRestart = true) (cpuPlatform = &#34;Intel Skylake&#34;)
     * &#34;&#34;&#34; By default, each expression is an &#34;AND&#34; expression. However, you
     * can include &#34;AND&#34; and &#34;OR&#34; expressions explicitly. For example: &#34;&#34;&#34;
     * (cpuPlatform = &#34;Intel Skylake&#34;) OR (cpuPlatform = &#34;Intel Broadwell&#34;)
     * AND (scheduling.automaticRestart = true)
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The google project in which addresses are listed.
     * Defaults to provider&#39;s configuration if missing.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The google project in which addresses are listed.
     * Defaults to provider&#39;s configuration if missing.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Region that should be considered to search addresses.
     * All regions are considered if missing.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region that should be considered to search addresses.
     * All regions are considered if missing.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private GetAddressesArgs() {}

    private GetAddressesArgs(GetAddressesArgs $) {
        this.filter = $.filter;
        this.project = $.project;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAddressesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAddressesArgs $;

        public Builder() {
            $ = new GetAddressesArgs();
        }

        public Builder(GetAddressesArgs defaults) {
            $ = new GetAddressesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter A filter expression that
         * filters resources listed in the response. The expression must specify
         * the field name, an operator, and the value that you want to use for
         * filtering. The value must be a string, a number, or a boolean. The
         * operator must be either &#34;=&#34;, &#34;!=&#34;, &#34;&gt;&#34;, &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;=&#34; or &#34;:&#34;. For
         * example, if you are filtering Compute Engine instances, you can
         * exclude instances named &#34;example-instance&#34; by specifying &#34;name !=
         * example-instance&#34;. The &#34;:&#34; operator can be used with string fields to
         * match substrings. For non-string fields it is equivalent to the &#34;=&#34;
         * operator. The &#34;:*&#34; comparison can be used to test whether a key has
         * been defined. For example, to find all objects with &#34;owner&#34; label
         * use: &#34;&#34;&#34; labels.owner:* &#34;&#34;&#34; You can also filter nested fields. For
         * example, you could specify &#34;scheduling.automaticRestart = false&#34; to
         * include instances only if they are not scheduled for automatic
         * restarts. You can use filtering on nested fields to filter based on
         * resource labels. To filter on multiple expressions, provide each
         * separate expression within parentheses. For example: &#34;&#34;&#34;
         * (scheduling.automaticRestart = true) (cpuPlatform = &#34;Intel Skylake&#34;)
         * &#34;&#34;&#34; By default, each expression is an &#34;AND&#34; expression. However, you
         * can include &#34;AND&#34; and &#34;OR&#34; expressions explicitly. For example: &#34;&#34;&#34;
         * (cpuPlatform = &#34;Intel Skylake&#34;) OR (cpuPlatform = &#34;Intel Broadwell&#34;)
         * AND (scheduling.automaticRestart = true)
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A filter expression that
         * filters resources listed in the response. The expression must specify
         * the field name, an operator, and the value that you want to use for
         * filtering. The value must be a string, a number, or a boolean. The
         * operator must be either &#34;=&#34;, &#34;!=&#34;, &#34;&gt;&#34;, &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;=&#34; or &#34;:&#34;. For
         * example, if you are filtering Compute Engine instances, you can
         * exclude instances named &#34;example-instance&#34; by specifying &#34;name !=
         * example-instance&#34;. The &#34;:&#34; operator can be used with string fields to
         * match substrings. For non-string fields it is equivalent to the &#34;=&#34;
         * operator. The &#34;:*&#34; comparison can be used to test whether a key has
         * been defined. For example, to find all objects with &#34;owner&#34; label
         * use: &#34;&#34;&#34; labels.owner:* &#34;&#34;&#34; You can also filter nested fields. For
         * example, you could specify &#34;scheduling.automaticRestart = false&#34; to
         * include instances only if they are not scheduled for automatic
         * restarts. You can use filtering on nested fields to filter based on
         * resource labels. To filter on multiple expressions, provide each
         * separate expression within parentheses. For example: &#34;&#34;&#34;
         * (scheduling.automaticRestart = true) (cpuPlatform = &#34;Intel Skylake&#34;)
         * &#34;&#34;&#34; By default, each expression is an &#34;AND&#34; expression. However, you
         * can include &#34;AND&#34; and &#34;OR&#34; expressions explicitly. For example: &#34;&#34;&#34;
         * (cpuPlatform = &#34;Intel Skylake&#34;) OR (cpuPlatform = &#34;Intel Broadwell&#34;)
         * AND (scheduling.automaticRestart = true)
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param project The google project in which addresses are listed.
         * Defaults to provider&#39;s configuration if missing.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The google project in which addresses are listed.
         * Defaults to provider&#39;s configuration if missing.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Region that should be considered to search addresses.
         * All regions are considered if missing.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region that should be considered to search addresses.
         * All regions are considered if missing.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public GetAddressesArgs build() {
            return $;
        }
    }

}
