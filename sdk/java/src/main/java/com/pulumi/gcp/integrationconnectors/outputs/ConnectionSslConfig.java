// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionSslConfigAdditionalVariable;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionSslConfigClientCertificate;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionSslConfigClientPrivateKey;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionSslConfigClientPrivateKeyPass;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionSslConfigPrivateServerCertificate;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionSslConfig {
    /**
     * @return Additional SSL related field values.
     * Structure is documented below.
     * 
     */
    private @Nullable List<ConnectionSslConfigAdditionalVariable> additionalVariables;
    /**
     * @return Type of Client Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    private @Nullable String clientCertType;
    /**
     * @return Client Certificate
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionSslConfigClientCertificate clientCertificate;
    /**
     * @return Client Private Key
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionSslConfigClientPrivateKey clientPrivateKey;
    /**
     * @return Secret containing the passphrase protecting the Client Private Key
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionSslConfigClientPrivateKeyPass clientPrivateKeyPass;
    /**
     * @return Private Server Certificate. Needs to be specified if trust model is PRIVATE.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionSslConfigPrivateServerCertificate privateServerCertificate;
    /**
     * @return Type of Server Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    private @Nullable String serverCertType;
    /**
     * @return Enum for Trust Model
     * Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
     * 
     */
    private @Nullable String trustModel;
    /**
     * @return Enum for controlling the SSL Type (TLS/MTLS)
     * Possible values are: `TLS`, `MTLS`.
     * 
     */
    private String type;
    /**
     * @return Bool for enabling SSL
     * 
     */
    private @Nullable Boolean useSsl;

    private ConnectionSslConfig() {}
    /**
     * @return Additional SSL related field values.
     * Structure is documented below.
     * 
     */
    public List<ConnectionSslConfigAdditionalVariable> additionalVariables() {
        return this.additionalVariables == null ? List.of() : this.additionalVariables;
    }
    /**
     * @return Type of Client Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    public Optional<String> clientCertType() {
        return Optional.ofNullable(this.clientCertType);
    }
    /**
     * @return Client Certificate
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionSslConfigClientCertificate> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }
    /**
     * @return Client Private Key
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionSslConfigClientPrivateKey> clientPrivateKey() {
        return Optional.ofNullable(this.clientPrivateKey);
    }
    /**
     * @return Secret containing the passphrase protecting the Client Private Key
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionSslConfigClientPrivateKeyPass> clientPrivateKeyPass() {
        return Optional.ofNullable(this.clientPrivateKeyPass);
    }
    /**
     * @return Private Server Certificate. Needs to be specified if trust model is PRIVATE.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionSslConfigPrivateServerCertificate> privateServerCertificate() {
        return Optional.ofNullable(this.privateServerCertificate);
    }
    /**
     * @return Type of Server Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    public Optional<String> serverCertType() {
        return Optional.ofNullable(this.serverCertType);
    }
    /**
     * @return Enum for Trust Model
     * Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
     * 
     */
    public Optional<String> trustModel() {
        return Optional.ofNullable(this.trustModel);
    }
    /**
     * @return Enum for controlling the SSL Type (TLS/MTLS)
     * Possible values are: `TLS`, `MTLS`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Bool for enabling SSL
     * 
     */
    public Optional<Boolean> useSsl() {
        return Optional.ofNullable(this.useSsl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionSslConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ConnectionSslConfigAdditionalVariable> additionalVariables;
        private @Nullable String clientCertType;
        private @Nullable ConnectionSslConfigClientCertificate clientCertificate;
        private @Nullable ConnectionSslConfigClientPrivateKey clientPrivateKey;
        private @Nullable ConnectionSslConfigClientPrivateKeyPass clientPrivateKeyPass;
        private @Nullable ConnectionSslConfigPrivateServerCertificate privateServerCertificate;
        private @Nullable String serverCertType;
        private @Nullable String trustModel;
        private String type;
        private @Nullable Boolean useSsl;
        public Builder() {}
        public Builder(ConnectionSslConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalVariables = defaults.additionalVariables;
    	      this.clientCertType = defaults.clientCertType;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientPrivateKey = defaults.clientPrivateKey;
    	      this.clientPrivateKeyPass = defaults.clientPrivateKeyPass;
    	      this.privateServerCertificate = defaults.privateServerCertificate;
    	      this.serverCertType = defaults.serverCertType;
    	      this.trustModel = defaults.trustModel;
    	      this.type = defaults.type;
    	      this.useSsl = defaults.useSsl;
        }

        @CustomType.Setter
        public Builder additionalVariables(@Nullable List<ConnectionSslConfigAdditionalVariable> additionalVariables) {
            this.additionalVariables = additionalVariables;
            return this;
        }
        public Builder additionalVariables(ConnectionSslConfigAdditionalVariable... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }
        @CustomType.Setter
        public Builder clientCertType(@Nullable String clientCertType) {
            this.clientCertType = clientCertType;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificate(@Nullable ConnectionSslConfigClientCertificate clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientPrivateKey(@Nullable ConnectionSslConfigClientPrivateKey clientPrivateKey) {
            this.clientPrivateKey = clientPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder clientPrivateKeyPass(@Nullable ConnectionSslConfigClientPrivateKeyPass clientPrivateKeyPass) {
            this.clientPrivateKeyPass = clientPrivateKeyPass;
            return this;
        }
        @CustomType.Setter
        public Builder privateServerCertificate(@Nullable ConnectionSslConfigPrivateServerCertificate privateServerCertificate) {
            this.privateServerCertificate = privateServerCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertType(@Nullable String serverCertType) {
            this.serverCertType = serverCertType;
            return this;
        }
        @CustomType.Setter
        public Builder trustModel(@Nullable String trustModel) {
            this.trustModel = trustModel;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder useSsl(@Nullable Boolean useSsl) {
            this.useSsl = useSsl;
            return this;
        }
        public ConnectionSslConfig build() {
            final var _resultValue = new ConnectionSslConfig();
            _resultValue.additionalVariables = additionalVariables;
            _resultValue.clientCertType = clientCertType;
            _resultValue.clientCertificate = clientCertificate;
            _resultValue.clientPrivateKey = clientPrivateKey;
            _resultValue.clientPrivateKeyPass = clientPrivateKeyPass;
            _resultValue.privateServerCertificate = privateServerCertificate;
            _resultValue.serverCertType = serverCertType;
            _resultValue.trustModel = trustModel;
            _resultValue.type = type;
            _resultValue.useSsl = useSsl;
            return _resultValue;
        }
    }
}
