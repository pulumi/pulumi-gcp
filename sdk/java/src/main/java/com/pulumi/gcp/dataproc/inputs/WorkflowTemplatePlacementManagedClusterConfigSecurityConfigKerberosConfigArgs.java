// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs Empty = new WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs();

    /**
     * The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    @Import(name="crossRealmTrustAdminServer")
    private @Nullable Output<String> crossRealmTrustAdminServer;

    /**
     * @return The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    public Optional<Output<String>> crossRealmTrustAdminServer() {
        return Optional.ofNullable(this.crossRealmTrustAdminServer);
    }

    /**
     * The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    @Import(name="crossRealmTrustKdc")
    private @Nullable Output<String> crossRealmTrustKdc;

    /**
     * @return The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     * 
     */
    public Optional<Output<String>> crossRealmTrustKdc() {
        return Optional.ofNullable(this.crossRealmTrustKdc);
    }

    /**
     * The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     * 
     */
    @Import(name="crossRealmTrustRealm")
    private @Nullable Output<String> crossRealmTrustRealm;

    /**
     * @return The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     * 
     */
    public Optional<Output<String>> crossRealmTrustRealm() {
        return Optional.ofNullable(this.crossRealmTrustRealm);
    }

    /**
     * The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     * 
     */
    @Import(name="crossRealmTrustSharedPassword")
    private @Nullable Output<String> crossRealmTrustSharedPassword;

    /**
     * @return The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     * 
     */
    public Optional<Output<String>> crossRealmTrustSharedPassword() {
        return Optional.ofNullable(this.crossRealmTrustSharedPassword);
    }

    /**
     * Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     * 
     */
    @Import(name="enableKerberos")
    private @Nullable Output<Boolean> enableKerberos;

    /**
     * @return Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     * 
     */
    public Optional<Output<Boolean>> enableKerberos() {
        return Optional.ofNullable(this.enableKerberos);
    }

    /**
     * The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     * 
     */
    @Import(name="kdcDbKey")
    private @Nullable Output<String> kdcDbKey;

    /**
     * @return The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     * 
     */
    public Optional<Output<String>> kdcDbKey() {
        return Optional.ofNullable(this.kdcDbKey);
    }

    /**
     * The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @Import(name="keyPassword")
    private @Nullable Output<String> keyPassword;

    /**
     * @return The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    public Optional<Output<String>> keyPassword() {
        return Optional.ofNullable(this.keyPassword);
    }

    /**
     * The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    @Import(name="keystore")
    private @Nullable Output<String> keystore;

    /**
     * @return The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    public Optional<Output<String>> keystore() {
        return Optional.ofNullable(this.keystore);
    }

    /**
     * The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @Import(name="keystorePassword")
    private @Nullable Output<String> keystorePassword;

    /**
     * @return The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    public Optional<Output<String>> keystorePassword() {
        return Optional.ofNullable(this.keystorePassword);
    }

    /**
     * The uri of the KMS key used to encrypt various sensitive files.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return The uri of the KMS key used to encrypt various sensitive files.
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     * 
     */
    @Import(name="realm")
    private @Nullable Output<String> realm;

    /**
     * @return The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     * 
     */
    public Optional<Output<String>> realm() {
        return Optional.ofNullable(this.realm);
    }

    /**
     * The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     * 
     */
    @Import(name="rootPrincipalPassword")
    private @Nullable Output<String> rootPrincipalPassword;

    /**
     * @return The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     * 
     */
    public Optional<Output<String>> rootPrincipalPassword() {
        return Optional.ofNullable(this.rootPrincipalPassword);
    }

    /**
     * The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     * 
     */
    @Import(name="tgtLifetimeHours")
    private @Nullable Output<Integer> tgtLifetimeHours;

    /**
     * @return The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     * 
     */
    public Optional<Output<Integer>> tgtLifetimeHours() {
        return Optional.ofNullable(this.tgtLifetimeHours);
    }

    /**
     * The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    @Import(name="truststore")
    private @Nullable Output<String> truststore;

    /**
     * @return The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     * 
     */
    public Optional<Output<String>> truststore() {
        return Optional.ofNullable(this.truststore);
    }

    /**
     * The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    @Import(name="truststorePassword")
    private @Nullable Output<String> truststorePassword;

    /**
     * @return The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     * 
     */
    public Optional<Output<String>> truststorePassword() {
        return Optional.ofNullable(this.truststorePassword);
    }

    private WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs() {}

    private WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs(WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs $) {
        this.crossRealmTrustAdminServer = $.crossRealmTrustAdminServer;
        this.crossRealmTrustKdc = $.crossRealmTrustKdc;
        this.crossRealmTrustRealm = $.crossRealmTrustRealm;
        this.crossRealmTrustSharedPassword = $.crossRealmTrustSharedPassword;
        this.enableKerberos = $.enableKerberos;
        this.kdcDbKey = $.kdcDbKey;
        this.keyPassword = $.keyPassword;
        this.keystore = $.keystore;
        this.keystorePassword = $.keystorePassword;
        this.kmsKey = $.kmsKey;
        this.realm = $.realm;
        this.rootPrincipalPassword = $.rootPrincipalPassword;
        this.tgtLifetimeHours = $.tgtLifetimeHours;
        this.truststore = $.truststore;
        this.truststorePassword = $.truststorePassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs $;

        public Builder() {
            $ = new WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs();
        }

        public Builder(WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs defaults) {
            $ = new WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param crossRealmTrustAdminServer The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustAdminServer(@Nullable Output<String> crossRealmTrustAdminServer) {
            $.crossRealmTrustAdminServer = crossRealmTrustAdminServer;
            return this;
        }

        /**
         * @param crossRealmTrustAdminServer The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustAdminServer(String crossRealmTrustAdminServer) {
            return crossRealmTrustAdminServer(Output.of(crossRealmTrustAdminServer));
        }

        /**
         * @param crossRealmTrustKdc The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustKdc(@Nullable Output<String> crossRealmTrustKdc) {
            $.crossRealmTrustKdc = crossRealmTrustKdc;
            return this;
        }

        /**
         * @param crossRealmTrustKdc The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustKdc(String crossRealmTrustKdc) {
            return crossRealmTrustKdc(Output.of(crossRealmTrustKdc));
        }

        /**
         * @param crossRealmTrustRealm The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustRealm(@Nullable Output<String> crossRealmTrustRealm) {
            $.crossRealmTrustRealm = crossRealmTrustRealm;
            return this;
        }

        /**
         * @param crossRealmTrustRealm The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustRealm(String crossRealmTrustRealm) {
            return crossRealmTrustRealm(Output.of(crossRealmTrustRealm));
        }

        /**
         * @param crossRealmTrustSharedPassword The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustSharedPassword(@Nullable Output<String> crossRealmTrustSharedPassword) {
            $.crossRealmTrustSharedPassword = crossRealmTrustSharedPassword;
            return this;
        }

        /**
         * @param crossRealmTrustSharedPassword The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
         * 
         * @return builder
         * 
         */
        public Builder crossRealmTrustSharedPassword(String crossRealmTrustSharedPassword) {
            return crossRealmTrustSharedPassword(Output.of(crossRealmTrustSharedPassword));
        }

        /**
         * @param enableKerberos Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
         * 
         * @return builder
         * 
         */
        public Builder enableKerberos(@Nullable Output<Boolean> enableKerberos) {
            $.enableKerberos = enableKerberos;
            return this;
        }

        /**
         * @param enableKerberos Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
         * 
         * @return builder
         * 
         */
        public Builder enableKerberos(Boolean enableKerberos) {
            return enableKerberos(Output.of(enableKerberos));
        }

        /**
         * @param kdcDbKey The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
         * 
         * @return builder
         * 
         */
        public Builder kdcDbKey(@Nullable Output<String> kdcDbKey) {
            $.kdcDbKey = kdcDbKey;
            return this;
        }

        /**
         * @param kdcDbKey The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
         * 
         * @return builder
         * 
         */
        public Builder kdcDbKey(String kdcDbKey) {
            return kdcDbKey(Output.of(kdcDbKey));
        }

        /**
         * @param keyPassword The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder keyPassword(@Nullable Output<String> keyPassword) {
            $.keyPassword = keyPassword;
            return this;
        }

        /**
         * @param keyPassword The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder keyPassword(String keyPassword) {
            return keyPassword(Output.of(keyPassword));
        }

        /**
         * @param keystore The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder keystore(@Nullable Output<String> keystore) {
            $.keystore = keystore;
            return this;
        }

        /**
         * @param keystore The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder keystore(String keystore) {
            return keystore(Output.of(keystore));
        }

        /**
         * @param keystorePassword The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder keystorePassword(@Nullable Output<String> keystorePassword) {
            $.keystorePassword = keystorePassword;
            return this;
        }

        /**
         * @param keystorePassword The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder keystorePassword(String keystorePassword) {
            return keystorePassword(Output.of(keystorePassword));
        }

        /**
         * @param kmsKey The uri of the KMS key used to encrypt various sensitive files.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey The uri of the KMS key used to encrypt various sensitive files.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        /**
         * @param realm The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
         * 
         * @return builder
         * 
         */
        public Builder realm(@Nullable Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param rootPrincipalPassword The Cloud Storage URI of a KMS encrypted file containing the root principal password.
         * 
         * @return builder
         * 
         */
        public Builder rootPrincipalPassword(@Nullable Output<String> rootPrincipalPassword) {
            $.rootPrincipalPassword = rootPrincipalPassword;
            return this;
        }

        /**
         * @param rootPrincipalPassword The Cloud Storage URI of a KMS encrypted file containing the root principal password.
         * 
         * @return builder
         * 
         */
        public Builder rootPrincipalPassword(String rootPrincipalPassword) {
            return rootPrincipalPassword(Output.of(rootPrincipalPassword));
        }

        /**
         * @param tgtLifetimeHours The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
         * 
         * @return builder
         * 
         */
        public Builder tgtLifetimeHours(@Nullable Output<Integer> tgtLifetimeHours) {
            $.tgtLifetimeHours = tgtLifetimeHours;
            return this;
        }

        /**
         * @param tgtLifetimeHours The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
         * 
         * @return builder
         * 
         */
        public Builder tgtLifetimeHours(Integer tgtLifetimeHours) {
            return tgtLifetimeHours(Output.of(tgtLifetimeHours));
        }

        /**
         * @param truststore The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder truststore(@Nullable Output<String> truststore) {
            $.truststore = truststore;
            return this;
        }

        /**
         * @param truststore The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder truststore(String truststore) {
            return truststore(Output.of(truststore));
        }

        /**
         * @param truststorePassword The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder truststorePassword(@Nullable Output<String> truststorePassword) {
            $.truststorePassword = truststorePassword;
            return this;
        }

        /**
         * @param truststorePassword The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
         * 
         * @return builder
         * 
         */
        public Builder truststorePassword(String truststorePassword) {
            return truststorePassword(Output.of(truststorePassword));
        }

        public WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigArgs build() {
            return $;
        }
    }

}
