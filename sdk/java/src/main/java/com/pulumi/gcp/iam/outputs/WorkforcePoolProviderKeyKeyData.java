// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkforcePoolProviderKeyKeyData {
    /**
     * @return (Output)
     * The format of the key.
     * 
     */
    private @Nullable String format;
    /**
     * @return (Output)
     * The key data. The format of the key is represented by the format field.
     * 
     */
    private @Nullable String key;
    /**
     * @return The specifications for the key.
     * Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`.
     * 
     */
    private String keySpec;
    /**
     * @return (Output)
     * Latest timestamp when this key is valid. Attempts to use this key after this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    private @Nullable String notAfterTime;
    /**
     * @return (Output)
     * Earliest timestamp when this key is valid. Attempts to use this key before this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    private @Nullable String notBeforeTime;

    private WorkforcePoolProviderKeyKeyData() {}
    /**
     * @return (Output)
     * The format of the key.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return (Output)
     * The key data. The format of the key is represented by the format field.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return The specifications for the key.
     * Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`.
     * 
     */
    public String keySpec() {
        return this.keySpec;
    }
    /**
     * @return (Output)
     * Latest timestamp when this key is valid. Attempts to use this key after this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<String> notAfterTime() {
        return Optional.ofNullable(this.notAfterTime);
    }
    /**
     * @return (Output)
     * Earliest timestamp when this key is valid. Attempts to use this key before this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<String> notBeforeTime() {
        return Optional.ofNullable(this.notBeforeTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkforcePoolProviderKeyKeyData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String format;
        private @Nullable String key;
        private String keySpec;
        private @Nullable String notAfterTime;
        private @Nullable String notBeforeTime;
        public Builder() {}
        public Builder(WorkforcePoolProviderKeyKeyData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.format = defaults.format;
    	      this.key = defaults.key;
    	      this.keySpec = defaults.keySpec;
    	      this.notAfterTime = defaults.notAfterTime;
    	      this.notBeforeTime = defaults.notBeforeTime;
        }

        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keySpec(String keySpec) {
            if (keySpec == null) {
              throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyKeyData", "keySpec");
            }
            this.keySpec = keySpec;
            return this;
        }
        @CustomType.Setter
        public Builder notAfterTime(@Nullable String notAfterTime) {

            this.notAfterTime = notAfterTime;
            return this;
        }
        @CustomType.Setter
        public Builder notBeforeTime(@Nullable String notBeforeTime) {

            this.notBeforeTime = notBeforeTime;
            return this;
        }
        public WorkforcePoolProviderKeyKeyData build() {
            final var _resultValue = new WorkforcePoolProviderKeyKeyData();
            _resultValue.format = format;
            _resultValue.key = key;
            _resultValue.keySpec = keySpec;
            _resultValue.notAfterTime = notAfterTime;
            _resultValue.notBeforeTime = notBeforeTime;
            return _resultValue;
        }
    }
}
