// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.monitoring.inputs.SloBasicSliArgs;
import com.pulumi.gcp.monitoring.inputs.SloRequestBasedSliArgs;
import com.pulumi.gcp.monitoring.inputs.SloWindowsBasedSliArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloArgs Empty = new SloArgs();

    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Import(name="basicSli")
    private @Nullable Output<SloBasicSliArgs> basicSli;

    /**
     * @return Basic Service-Level Indicator (SLI) on a well-known service type.
     * Performance will be computed on the basis of pre-defined metrics.
     * SLIs are used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Optional<Output<SloBasicSliArgs>> basicSli() {
        return Optional.ofNullable(this.basicSli);
    }

    /**
     * A calendar period, semantically &#34;since the start of the current
     * &lt;calendarPeriod&gt;&#34;.
     * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
     * 
     */
    @Import(name="calendarPeriod")
    private @Nullable Output<String> calendarPeriod;

    /**
     * @return A calendar period, semantically &#34;since the start of the current
     * &lt;calendarPeriod&gt;&#34;.
     * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
     * 
     */
    public Optional<Output<String>> calendarPeriod() {
        return Optional.ofNullable(this.calendarPeriod);
    }

    /**
     * Name used for UI elements listing this SLO.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Name used for UI elements listing this SLO.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The fraction of service that must be good in order for this objective
     * to be met. 0 &lt; goal &lt;= 0.999
     * 
     */
    @Import(name="goal", required=true)
    private Output<Double> goal;

    /**
     * @return The fraction of service that must be good in order for this objective
     * to be met. 0 &lt; goal &lt;= 0.999
     * 
     */
    public Output<Double> goal() {
        return this.goal;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Import(name="requestBasedSli")
    private @Nullable Output<SloRequestBasedSliArgs> requestBasedSli;

    /**
     * @return A request-based SLI defines a SLI for which atomic units of
     * service are counted directly.
     * A SLI describes a good service.
     * It is used to measure and calculate the quality of the Service&#39;s
     * performance with respect to a single aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Optional<Output<SloRequestBasedSliArgs>> requestBasedSli() {
        return Optional.ofNullable(this.requestBasedSli);
    }

    /**
     * A rolling time period, semantically &#34;in the past X days&#34;.
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    @Import(name="rollingPeriodDays")
    private @Nullable Output<Integer> rollingPeriodDays;

    /**
     * @return A rolling time period, semantically &#34;in the past X days&#34;.
     * Must be between 1 to 30 days, inclusive.
     * 
     */
    public Optional<Output<Integer>> rollingPeriodDays() {
        return Optional.ofNullable(this.rollingPeriodDays);
    }

    /**
     * ID of the service to which this SLO belongs.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return ID of the service to which this SLO belongs.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    @Import(name="sloId")
    private @Nullable Output<String> sloId;

    /**
     * @return The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     * 
     */
    public Optional<Output<String>> sloId() {
        return Optional.ofNullable(this.sloId);
    }

    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy
     * objects.The field can contain up to 64 entries. Each key and value is limited
     * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys
     * must begin with a letter.
     * 
     */
    @Import(name="userLabels")
    private @Nullable Output<Map<String,String>> userLabels;

    /**
     * @return This field is intended to be used for organizing and identifying the AlertPolicy
     * objects.The field can contain up to 64 entries. Each key and value is limited
     * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys
     * must begin with a letter.
     * 
     */
    public Optional<Output<Map<String,String>>> userLabels() {
        return Optional.ofNullable(this.userLabels);
    }

    /**
     * A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service&#39;s performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    @Import(name="windowsBasedSli")
    private @Nullable Output<SloWindowsBasedSliArgs> windowsBasedSli;

    /**
     * @return A windows-based SLI defines the criteria for time windows.
     * good_service is defined based off the count of these time windows
     * for which the provided service was of good quality.
     * A SLI describes a good service. It is used to measure and calculate
     * the quality of the Service&#39;s performance with respect to a single
     * aspect of service quality.
     * Exactly one of the following must be set:
     * `basic_sli`, `request_based_sli`, `windows_based_sli`
     * Structure is documented below.
     * 
     */
    public Optional<Output<SloWindowsBasedSliArgs>> windowsBasedSli() {
        return Optional.ofNullable(this.windowsBasedSli);
    }

    private SloArgs() {}

    private SloArgs(SloArgs $) {
        this.basicSli = $.basicSli;
        this.calendarPeriod = $.calendarPeriod;
        this.displayName = $.displayName;
        this.goal = $.goal;
        this.project = $.project;
        this.requestBasedSli = $.requestBasedSli;
        this.rollingPeriodDays = $.rollingPeriodDays;
        this.service = $.service;
        this.sloId = $.sloId;
        this.userLabels = $.userLabels;
        this.windowsBasedSli = $.windowsBasedSli;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloArgs $;

        public Builder() {
            $ = new SloArgs();
        }

        public Builder(SloArgs defaults) {
            $ = new SloArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param basicSli Basic Service-Level Indicator (SLI) on a well-known service type.
         * Performance will be computed on the basis of pre-defined metrics.
         * SLIs are used to measure and calculate the quality of the Service&#39;s
         * performance with respect to a single aspect of service quality.
         * Exactly one of the following must be set:
         * `basic_sli`, `request_based_sli`, `windows_based_sli`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder basicSli(@Nullable Output<SloBasicSliArgs> basicSli) {
            $.basicSli = basicSli;
            return this;
        }

        /**
         * @param basicSli Basic Service-Level Indicator (SLI) on a well-known service type.
         * Performance will be computed on the basis of pre-defined metrics.
         * SLIs are used to measure and calculate the quality of the Service&#39;s
         * performance with respect to a single aspect of service quality.
         * Exactly one of the following must be set:
         * `basic_sli`, `request_based_sli`, `windows_based_sli`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder basicSli(SloBasicSliArgs basicSli) {
            return basicSli(Output.of(basicSli));
        }

        /**
         * @param calendarPeriod A calendar period, semantically &#34;since the start of the current
         * &lt;calendarPeriod&gt;&#34;.
         * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
         * 
         * @return builder
         * 
         */
        public Builder calendarPeriod(@Nullable Output<String> calendarPeriod) {
            $.calendarPeriod = calendarPeriod;
            return this;
        }

        /**
         * @param calendarPeriod A calendar period, semantically &#34;since the start of the current
         * &lt;calendarPeriod&gt;&#34;.
         * Possible values are `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH`.
         * 
         * @return builder
         * 
         */
        public Builder calendarPeriod(String calendarPeriod) {
            return calendarPeriod(Output.of(calendarPeriod));
        }

        /**
         * @param displayName Name used for UI elements listing this SLO.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name used for UI elements listing this SLO.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param goal The fraction of service that must be good in order for this objective
         * to be met. 0 &lt; goal &lt;= 0.999
         * 
         * @return builder
         * 
         */
        public Builder goal(Output<Double> goal) {
            $.goal = goal;
            return this;
        }

        /**
         * @param goal The fraction of service that must be good in order for this objective
         * to be met. 0 &lt; goal &lt;= 0.999
         * 
         * @return builder
         * 
         */
        public Builder goal(Double goal) {
            return goal(Output.of(goal));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requestBasedSli A request-based SLI defines a SLI for which atomic units of
         * service are counted directly.
         * A SLI describes a good service.
         * It is used to measure and calculate the quality of the Service&#39;s
         * performance with respect to a single aspect of service quality.
         * Exactly one of the following must be set:
         * `basic_sli`, `request_based_sli`, `windows_based_sli`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestBasedSli(@Nullable Output<SloRequestBasedSliArgs> requestBasedSli) {
            $.requestBasedSli = requestBasedSli;
            return this;
        }

        /**
         * @param requestBasedSli A request-based SLI defines a SLI for which atomic units of
         * service are counted directly.
         * A SLI describes a good service.
         * It is used to measure and calculate the quality of the Service&#39;s
         * performance with respect to a single aspect of service quality.
         * Exactly one of the following must be set:
         * `basic_sli`, `request_based_sli`, `windows_based_sli`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestBasedSli(SloRequestBasedSliArgs requestBasedSli) {
            return requestBasedSli(Output.of(requestBasedSli));
        }

        /**
         * @param rollingPeriodDays A rolling time period, semantically &#34;in the past X days&#34;.
         * Must be between 1 to 30 days, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder rollingPeriodDays(@Nullable Output<Integer> rollingPeriodDays) {
            $.rollingPeriodDays = rollingPeriodDays;
            return this;
        }

        /**
         * @param rollingPeriodDays A rolling time period, semantically &#34;in the past X days&#34;.
         * Must be between 1 to 30 days, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder rollingPeriodDays(Integer rollingPeriodDays) {
            return rollingPeriodDays(Output.of(rollingPeriodDays));
        }

        /**
         * @param service ID of the service to which this SLO belongs.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service ID of the service to which this SLO belongs.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param sloId The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
         * 
         * @return builder
         * 
         */
        public Builder sloId(@Nullable Output<String> sloId) {
            $.sloId = sloId;
            return this;
        }

        /**
         * @param sloId The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
         * 
         * @return builder
         * 
         */
        public Builder sloId(String sloId) {
            return sloId(Output.of(sloId));
        }

        /**
         * @param userLabels This field is intended to be used for organizing and identifying the AlertPolicy
         * objects.The field can contain up to 64 entries. Each key and value is limited
         * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
         * can contain only lowercase letters, numerals, underscores, and dashes. Keys
         * must begin with a letter.
         * 
         * @return builder
         * 
         */
        public Builder userLabels(@Nullable Output<Map<String,String>> userLabels) {
            $.userLabels = userLabels;
            return this;
        }

        /**
         * @param userLabels This field is intended to be used for organizing and identifying the AlertPolicy
         * objects.The field can contain up to 64 entries. Each key and value is limited
         * to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
         * can contain only lowercase letters, numerals, underscores, and dashes. Keys
         * must begin with a letter.
         * 
         * @return builder
         * 
         */
        public Builder userLabels(Map<String,String> userLabels) {
            return userLabels(Output.of(userLabels));
        }

        /**
         * @param windowsBasedSli A windows-based SLI defines the criteria for time windows.
         * good_service is defined based off the count of these time windows
         * for which the provided service was of good quality.
         * A SLI describes a good service. It is used to measure and calculate
         * the quality of the Service&#39;s performance with respect to a single
         * aspect of service quality.
         * Exactly one of the following must be set:
         * `basic_sli`, `request_based_sli`, `windows_based_sli`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder windowsBasedSli(@Nullable Output<SloWindowsBasedSliArgs> windowsBasedSli) {
            $.windowsBasedSli = windowsBasedSli;
            return this;
        }

        /**
         * @param windowsBasedSli A windows-based SLI defines the criteria for time windows.
         * good_service is defined based off the count of these time windows
         * for which the provided service was of good quality.
         * A SLI describes a good service. It is used to measure and calculate
         * the quality of the Service&#39;s performance with respect to a single
         * aspect of service quality.
         * Exactly one of the following must be set:
         * `basic_sli`, `request_based_sli`, `windows_based_sli`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder windowsBasedSli(SloWindowsBasedSliArgs windowsBasedSli) {
            return windowsBasedSli(Output.of(windowsBasedSli));
        }

        public SloArgs build() {
            $.goal = Objects.requireNonNull($.goal, "expected parameter 'goal' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
