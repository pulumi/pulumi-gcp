// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs;
import java.util.List;
import java.util.Objects;


public final class StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs Empty = new StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs();

    /**
     * MySQL databases on the server
     * Structure is documented below.
     * 
     */
    @Import(name="mysqlDatabases", required=true)
    private Output<List<StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs>> mysqlDatabases;

    /**
     * @return MySQL databases on the server
     * Structure is documented below.
     * 
     */
    public Output<List<StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs>> mysqlDatabases() {
        return this.mysqlDatabases;
    }

    private StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs() {}

    private StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs(StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs $) {
        this.mysqlDatabases = $.mysqlDatabases;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs $;

        public Builder() {
            $ = new StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs();
        }

        public Builder(StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs defaults) {
            $ = new StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mysqlDatabases MySQL databases on the server
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysqlDatabases(Output<List<StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs>> mysqlDatabases) {
            $.mysqlDatabases = mysqlDatabases;
            return this;
        }

        /**
         * @param mysqlDatabases MySQL databases on the server
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysqlDatabases(List<StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs> mysqlDatabases) {
            return mysqlDatabases(Output.of(mysqlDatabases));
        }

        /**
         * @param mysqlDatabases MySQL databases on the server
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysqlDatabases(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs... mysqlDatabases) {
            return mysqlDatabases(List.of(mysqlDatabases));
        }

        public StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs build() {
            $.mysqlDatabases = Objects.requireNonNull($.mysqlDatabases, "expected parameter 'mysqlDatabases' to be non-null");
            return $;
        }
    }

}
