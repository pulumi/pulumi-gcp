// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceCircuitBreakerConnectTimeout;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegionBackendServiceCircuitBreaker {
    /**
     * @return The timeout for new network connections to hosts.
     * 
     */
    private List<GetRegionBackendServiceCircuitBreakerConnectTimeout> connectTimeouts;
    /**
     * @return The maximum number of connections to the backend cluster.
     * Defaults to 1024.
     * 
     */
    private Integer maxConnections;
    /**
     * @return The maximum number of pending requests to the backend cluster.
     * Defaults to 1024.
     * 
     */
    private Integer maxPendingRequests;
    /**
     * @return The maximum number of parallel requests to the backend cluster.
     * Defaults to 1024.
     * 
     */
    private Integer maxRequests;
    /**
     * @return Maximum requests for a single backend connection. This parameter
     * is respected by both the HTTP/1.1 and HTTP/2 implementations. If
     * not specified, there is no limit. Setting this parameter to 1
     * will effectively disable keep alive.
     * 
     */
    private Integer maxRequestsPerConnection;
    /**
     * @return The maximum number of parallel retries to the backend cluster.
     * Defaults to 3.
     * 
     */
    private Integer maxRetries;

    private GetRegionBackendServiceCircuitBreaker() {}
    /**
     * @return The timeout for new network connections to hosts.
     * 
     */
    public List<GetRegionBackendServiceCircuitBreakerConnectTimeout> connectTimeouts() {
        return this.connectTimeouts;
    }
    /**
     * @return The maximum number of connections to the backend cluster.
     * Defaults to 1024.
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return The maximum number of pending requests to the backend cluster.
     * Defaults to 1024.
     * 
     */
    public Integer maxPendingRequests() {
        return this.maxPendingRequests;
    }
    /**
     * @return The maximum number of parallel requests to the backend cluster.
     * Defaults to 1024.
     * 
     */
    public Integer maxRequests() {
        return this.maxRequests;
    }
    /**
     * @return Maximum requests for a single backend connection. This parameter
     * is respected by both the HTTP/1.1 and HTTP/2 implementations. If
     * not specified, there is no limit. Setting this parameter to 1
     * will effectively disable keep alive.
     * 
     */
    public Integer maxRequestsPerConnection() {
        return this.maxRequestsPerConnection;
    }
    /**
     * @return The maximum number of parallel retries to the backend cluster.
     * Defaults to 3.
     * 
     */
    public Integer maxRetries() {
        return this.maxRetries;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionBackendServiceCircuitBreaker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRegionBackendServiceCircuitBreakerConnectTimeout> connectTimeouts;
        private Integer maxConnections;
        private Integer maxPendingRequests;
        private Integer maxRequests;
        private Integer maxRequestsPerConnection;
        private Integer maxRetries;
        public Builder() {}
        public Builder(GetRegionBackendServiceCircuitBreaker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimeouts = defaults.connectTimeouts;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxPendingRequests = defaults.maxPendingRequests;
    	      this.maxRequests = defaults.maxRequests;
    	      this.maxRequestsPerConnection = defaults.maxRequestsPerConnection;
    	      this.maxRetries = defaults.maxRetries;
        }

        @CustomType.Setter
        public Builder connectTimeouts(List<GetRegionBackendServiceCircuitBreakerConnectTimeout> connectTimeouts) {
            if (connectTimeouts == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceCircuitBreaker", "connectTimeouts");
            }
            this.connectTimeouts = connectTimeouts;
            return this;
        }
        public Builder connectTimeouts(GetRegionBackendServiceCircuitBreakerConnectTimeout... connectTimeouts) {
            return connectTimeouts(List.of(connectTimeouts));
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceCircuitBreaker", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxPendingRequests(Integer maxPendingRequests) {
            if (maxPendingRequests == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceCircuitBreaker", "maxPendingRequests");
            }
            this.maxPendingRequests = maxPendingRequests;
            return this;
        }
        @CustomType.Setter
        public Builder maxRequests(Integer maxRequests) {
            if (maxRequests == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceCircuitBreaker", "maxRequests");
            }
            this.maxRequests = maxRequests;
            return this;
        }
        @CustomType.Setter
        public Builder maxRequestsPerConnection(Integer maxRequestsPerConnection) {
            if (maxRequestsPerConnection == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceCircuitBreaker", "maxRequestsPerConnection");
            }
            this.maxRequestsPerConnection = maxRequestsPerConnection;
            return this;
        }
        @CustomType.Setter
        public Builder maxRetries(Integer maxRetries) {
            if (maxRetries == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceCircuitBreaker", "maxRetries");
            }
            this.maxRetries = maxRetries;
            return this;
        }
        public GetRegionBackendServiceCircuitBreaker build() {
            final var _resultValue = new GetRegionBackendServiceCircuitBreaker();
            _resultValue.connectTimeouts = connectTimeouts;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxPendingRequests = maxPendingRequests;
            _resultValue.maxRequests = maxRequests;
            _resultValue.maxRequestsPerConnection = maxRequestsPerConnection;
            _resultValue.maxRetries = maxRetries;
            return _resultValue;
        }
    }
}
