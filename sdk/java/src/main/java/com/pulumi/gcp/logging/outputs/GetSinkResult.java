// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.logging.outputs.GetSinkBigqueryOption;
import com.pulumi.gcp.logging.outputs.GetSinkExclusion;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSinkResult {
    /**
     * @return Options that affect sinks exporting data to BigQuery. Structure is documented below.
     * 
     */
    private List<GetSinkBigqueryOption> bigqueryOptions;
    /**
     * @return A description of this exclusion.
     * 
     */
    private String description;
    /**
     * @return The destination of the sink (or, in other words, where logs are written to).
     * 
     */
    private String destination;
    /**
     * @return Whether this exclusion is disabled and it does not exclude any log entries.
     * 
     */
    private Boolean disabled;
    /**
     * @return Log entries that match any of the exclusion filters are not exported. Structure is documented below.
     * 
     */
    private List<GetSinkExclusion> exclusions;
    /**
     * @return An advanced logs filter that matches the log entries to be excluded.
     * 
     */
    private String filter;
    private String id;
    /**
     * @return A client-assigned identifier, such as `load-balancer-exclusion`.
     * 
     */
    private String name;
    /**
     * @return The identity associated with this sink. This identity must be granted write access to the configured `destination`.
     * 
     */
    private String writerIdentity;

    private GetSinkResult() {}
    /**
     * @return Options that affect sinks exporting data to BigQuery. Structure is documented below.
     * 
     */
    public List<GetSinkBigqueryOption> bigqueryOptions() {
        return this.bigqueryOptions;
    }
    /**
     * @return A description of this exclusion.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The destination of the sink (or, in other words, where logs are written to).
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Whether this exclusion is disabled and it does not exclude any log entries.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Log entries that match any of the exclusion filters are not exported. Structure is documented below.
     * 
     */
    public List<GetSinkExclusion> exclusions() {
        return this.exclusions;
    }
    /**
     * @return An advanced logs filter that matches the log entries to be excluded.
     * 
     */
    public String filter() {
        return this.filter;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return A client-assigned identifier, such as `load-balancer-exclusion`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The identity associated with this sink. This identity must be granted write access to the configured `destination`.
     * 
     */
    public String writerIdentity() {
        return this.writerIdentity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSinkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSinkBigqueryOption> bigqueryOptions;
        private String description;
        private String destination;
        private Boolean disabled;
        private List<GetSinkExclusion> exclusions;
        private String filter;
        private String id;
        private String name;
        private String writerIdentity;
        public Builder() {}
        public Builder(GetSinkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bigqueryOptions = defaults.bigqueryOptions;
    	      this.description = defaults.description;
    	      this.destination = defaults.destination;
    	      this.disabled = defaults.disabled;
    	      this.exclusions = defaults.exclusions;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.writerIdentity = defaults.writerIdentity;
        }

        @CustomType.Setter
        public Builder bigqueryOptions(List<GetSinkBigqueryOption> bigqueryOptions) {
            if (bigqueryOptions == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "bigqueryOptions");
            }
            this.bigqueryOptions = bigqueryOptions;
            return this;
        }
        public Builder bigqueryOptions(GetSinkBigqueryOption... bigqueryOptions) {
            return bigqueryOptions(List.of(bigqueryOptions));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            if (destination == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "destination");
            }
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder exclusions(List<GetSinkExclusion> exclusions) {
            if (exclusions == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "exclusions");
            }
            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(GetSinkExclusion... exclusions) {
            return exclusions(List.of(exclusions));
        }
        @CustomType.Setter
        public Builder filter(String filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder writerIdentity(String writerIdentity) {
            if (writerIdentity == null) {
              throw new MissingRequiredPropertyException("GetSinkResult", "writerIdentity");
            }
            this.writerIdentity = writerIdentity;
            return this;
        }
        public GetSinkResult build() {
            final var _resultValue = new GetSinkResult();
            _resultValue.bigqueryOptions = bigqueryOptions;
            _resultValue.description = description;
            _resultValue.destination = destination;
            _resultValue.disabled = disabled;
            _resultValue.exclusions = exclusions;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.writerIdentity = writerIdentity;
            return _resultValue;
        }
    }
}
