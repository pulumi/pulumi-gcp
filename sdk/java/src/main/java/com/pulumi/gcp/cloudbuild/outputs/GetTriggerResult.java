// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerApprovalConfig;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBitbucketServerTriggerConfig;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuild;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerGitFileSource;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerGithub;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerPubsubConfig;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerRepositoryEventConfig;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerSourceToBuild;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerTriggerTemplate;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerWebhookConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTriggerResult {
    private List<GetTriggerApprovalConfig> approvalConfigs;
    private List<GetTriggerBitbucketServerTriggerConfig> bitbucketServerTriggerConfigs;
    private List<GetTriggerBuild> builds;
    private String createTime;
    private String description;
    private Boolean disabled;
    private String filename;
    private String filter;
    private List<GetTriggerGitFileSource> gitFileSources;
    private List<GetTriggerGithub> githubs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> ignoredFiles;
    private String includeBuildLogs;
    private List<String> includedFiles;
    private String location;
    private String name;
    private @Nullable String project;
    private List<GetTriggerPubsubConfig> pubsubConfigs;
    private List<GetTriggerRepositoryEventConfig> repositoryEventConfigs;
    private String serviceAccount;
    private List<GetTriggerSourceToBuild> sourceToBuilds;
    private Map<String,String> substitutions;
    private List<String> tags;
    private String triggerId;
    private List<GetTriggerTriggerTemplate> triggerTemplates;
    private List<GetTriggerWebhookConfig> webhookConfigs;

    private GetTriggerResult() {}
    public List<GetTriggerApprovalConfig> approvalConfigs() {
        return this.approvalConfigs;
    }
    public List<GetTriggerBitbucketServerTriggerConfig> bitbucketServerTriggerConfigs() {
        return this.bitbucketServerTriggerConfigs;
    }
    public List<GetTriggerBuild> builds() {
        return this.builds;
    }
    public String createTime() {
        return this.createTime;
    }
    public String description() {
        return this.description;
    }
    public Boolean disabled() {
        return this.disabled;
    }
    public String filename() {
        return this.filename;
    }
    public String filter() {
        return this.filter;
    }
    public List<GetTriggerGitFileSource> gitFileSources() {
        return this.gitFileSources;
    }
    public List<GetTriggerGithub> githubs() {
        return this.githubs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ignoredFiles() {
        return this.ignoredFiles;
    }
    public String includeBuildLogs() {
        return this.includeBuildLogs;
    }
    public List<String> includedFiles() {
        return this.includedFiles;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetTriggerPubsubConfig> pubsubConfigs() {
        return this.pubsubConfigs;
    }
    public List<GetTriggerRepositoryEventConfig> repositoryEventConfigs() {
        return this.repositoryEventConfigs;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public List<GetTriggerSourceToBuild> sourceToBuilds() {
        return this.sourceToBuilds;
    }
    public Map<String,String> substitutions() {
        return this.substitutions;
    }
    public List<String> tags() {
        return this.tags;
    }
    public String triggerId() {
        return this.triggerId;
    }
    public List<GetTriggerTriggerTemplate> triggerTemplates() {
        return this.triggerTemplates;
    }
    public List<GetTriggerWebhookConfig> webhookConfigs() {
        return this.webhookConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTriggerApprovalConfig> approvalConfigs;
        private List<GetTriggerBitbucketServerTriggerConfig> bitbucketServerTriggerConfigs;
        private List<GetTriggerBuild> builds;
        private String createTime;
        private String description;
        private Boolean disabled;
        private String filename;
        private String filter;
        private List<GetTriggerGitFileSource> gitFileSources;
        private List<GetTriggerGithub> githubs;
        private String id;
        private List<String> ignoredFiles;
        private String includeBuildLogs;
        private List<String> includedFiles;
        private String location;
        private String name;
        private @Nullable String project;
        private List<GetTriggerPubsubConfig> pubsubConfigs;
        private List<GetTriggerRepositoryEventConfig> repositoryEventConfigs;
        private String serviceAccount;
        private List<GetTriggerSourceToBuild> sourceToBuilds;
        private Map<String,String> substitutions;
        private List<String> tags;
        private String triggerId;
        private List<GetTriggerTriggerTemplate> triggerTemplates;
        private List<GetTriggerWebhookConfig> webhookConfigs;
        public Builder() {}
        public Builder(GetTriggerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalConfigs = defaults.approvalConfigs;
    	      this.bitbucketServerTriggerConfigs = defaults.bitbucketServerTriggerConfigs;
    	      this.builds = defaults.builds;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.filename = defaults.filename;
    	      this.filter = defaults.filter;
    	      this.gitFileSources = defaults.gitFileSources;
    	      this.githubs = defaults.githubs;
    	      this.id = defaults.id;
    	      this.ignoredFiles = defaults.ignoredFiles;
    	      this.includeBuildLogs = defaults.includeBuildLogs;
    	      this.includedFiles = defaults.includedFiles;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pubsubConfigs = defaults.pubsubConfigs;
    	      this.repositoryEventConfigs = defaults.repositoryEventConfigs;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.sourceToBuilds = defaults.sourceToBuilds;
    	      this.substitutions = defaults.substitutions;
    	      this.tags = defaults.tags;
    	      this.triggerId = defaults.triggerId;
    	      this.triggerTemplates = defaults.triggerTemplates;
    	      this.webhookConfigs = defaults.webhookConfigs;
        }

        @CustomType.Setter
        public Builder approvalConfigs(List<GetTriggerApprovalConfig> approvalConfigs) {
            if (approvalConfigs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "approvalConfigs");
            }
            this.approvalConfigs = approvalConfigs;
            return this;
        }
        public Builder approvalConfigs(GetTriggerApprovalConfig... approvalConfigs) {
            return approvalConfigs(List.of(approvalConfigs));
        }
        @CustomType.Setter
        public Builder bitbucketServerTriggerConfigs(List<GetTriggerBitbucketServerTriggerConfig> bitbucketServerTriggerConfigs) {
            if (bitbucketServerTriggerConfigs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "bitbucketServerTriggerConfigs");
            }
            this.bitbucketServerTriggerConfigs = bitbucketServerTriggerConfigs;
            return this;
        }
        public Builder bitbucketServerTriggerConfigs(GetTriggerBitbucketServerTriggerConfig... bitbucketServerTriggerConfigs) {
            return bitbucketServerTriggerConfigs(List.of(bitbucketServerTriggerConfigs));
        }
        @CustomType.Setter
        public Builder builds(List<GetTriggerBuild> builds) {
            if (builds == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "builds");
            }
            this.builds = builds;
            return this;
        }
        public Builder builds(GetTriggerBuild... builds) {
            return builds(List.of(builds));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder filename(String filename) {
            if (filename == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "filename");
            }
            this.filename = filename;
            return this;
        }
        @CustomType.Setter
        public Builder filter(String filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder gitFileSources(List<GetTriggerGitFileSource> gitFileSources) {
            if (gitFileSources == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "gitFileSources");
            }
            this.gitFileSources = gitFileSources;
            return this;
        }
        public Builder gitFileSources(GetTriggerGitFileSource... gitFileSources) {
            return gitFileSources(List.of(gitFileSources));
        }
        @CustomType.Setter
        public Builder githubs(List<GetTriggerGithub> githubs) {
            if (githubs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "githubs");
            }
            this.githubs = githubs;
            return this;
        }
        public Builder githubs(GetTriggerGithub... githubs) {
            return githubs(List.of(githubs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ignoredFiles(List<String> ignoredFiles) {
            if (ignoredFiles == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "ignoredFiles");
            }
            this.ignoredFiles = ignoredFiles;
            return this;
        }
        public Builder ignoredFiles(String... ignoredFiles) {
            return ignoredFiles(List.of(ignoredFiles));
        }
        @CustomType.Setter
        public Builder includeBuildLogs(String includeBuildLogs) {
            if (includeBuildLogs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "includeBuildLogs");
            }
            this.includeBuildLogs = includeBuildLogs;
            return this;
        }
        @CustomType.Setter
        public Builder includedFiles(List<String> includedFiles) {
            if (includedFiles == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "includedFiles");
            }
            this.includedFiles = includedFiles;
            return this;
        }
        public Builder includedFiles(String... includedFiles) {
            return includedFiles(List.of(includedFiles));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pubsubConfigs(List<GetTriggerPubsubConfig> pubsubConfigs) {
            if (pubsubConfigs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "pubsubConfigs");
            }
            this.pubsubConfigs = pubsubConfigs;
            return this;
        }
        public Builder pubsubConfigs(GetTriggerPubsubConfig... pubsubConfigs) {
            return pubsubConfigs(List.of(pubsubConfigs));
        }
        @CustomType.Setter
        public Builder repositoryEventConfigs(List<GetTriggerRepositoryEventConfig> repositoryEventConfigs) {
            if (repositoryEventConfigs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "repositoryEventConfigs");
            }
            this.repositoryEventConfigs = repositoryEventConfigs;
            return this;
        }
        public Builder repositoryEventConfigs(GetTriggerRepositoryEventConfig... repositoryEventConfigs) {
            return repositoryEventConfigs(List.of(repositoryEventConfigs));
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder sourceToBuilds(List<GetTriggerSourceToBuild> sourceToBuilds) {
            if (sourceToBuilds == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "sourceToBuilds");
            }
            this.sourceToBuilds = sourceToBuilds;
            return this;
        }
        public Builder sourceToBuilds(GetTriggerSourceToBuild... sourceToBuilds) {
            return sourceToBuilds(List.of(sourceToBuilds));
        }
        @CustomType.Setter
        public Builder substitutions(Map<String,String> substitutions) {
            if (substitutions == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "substitutions");
            }
            this.substitutions = substitutions;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder triggerId(String triggerId) {
            if (triggerId == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "triggerId");
            }
            this.triggerId = triggerId;
            return this;
        }
        @CustomType.Setter
        public Builder triggerTemplates(List<GetTriggerTriggerTemplate> triggerTemplates) {
            if (triggerTemplates == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "triggerTemplates");
            }
            this.triggerTemplates = triggerTemplates;
            return this;
        }
        public Builder triggerTemplates(GetTriggerTriggerTemplate... triggerTemplates) {
            return triggerTemplates(List.of(triggerTemplates));
        }
        @CustomType.Setter
        public Builder webhookConfigs(List<GetTriggerWebhookConfig> webhookConfigs) {
            if (webhookConfigs == null) {
              throw new MissingRequiredPropertyException("GetTriggerResult", "webhookConfigs");
            }
            this.webhookConfigs = webhookConfigs;
            return this;
        }
        public Builder webhookConfigs(GetTriggerWebhookConfig... webhookConfigs) {
            return webhookConfigs(List.of(webhookConfigs));
        }
        public GetTriggerResult build() {
            final var _resultValue = new GetTriggerResult();
            _resultValue.approvalConfigs = approvalConfigs;
            _resultValue.bitbucketServerTriggerConfigs = bitbucketServerTriggerConfigs;
            _resultValue.builds = builds;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.disabled = disabled;
            _resultValue.filename = filename;
            _resultValue.filter = filter;
            _resultValue.gitFileSources = gitFileSources;
            _resultValue.githubs = githubs;
            _resultValue.id = id;
            _resultValue.ignoredFiles = ignoredFiles;
            _resultValue.includeBuildLogs = includeBuildLogs;
            _resultValue.includedFiles = includedFiles;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pubsubConfigs = pubsubConfigs;
            _resultValue.repositoryEventConfigs = repositoryEventConfigs;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.sourceToBuilds = sourceToBuilds;
            _resultValue.substitutions = substitutions;
            _resultValue.tags = tags;
            _resultValue.triggerId = triggerId;
            _resultValue.triggerTemplates = triggerTemplates;
            _resultValue.webhookConfigs = webhookConfigs;
            return _resultValue;
        }
    }
}
