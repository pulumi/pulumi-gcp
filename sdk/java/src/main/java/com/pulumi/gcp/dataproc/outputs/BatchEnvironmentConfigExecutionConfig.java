// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dataproc.outputs.BatchEnvironmentConfigExecutionConfigAuthenticationConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BatchEnvironmentConfigExecutionConfig {
    /**
     * @return Authentication configuration for a workload is used to set the default identity for the workload execution.
     * Structure is documented below.
     * 
     */
    private @Nullable BatchEnvironmentConfigExecutionConfigAuthenticationConfig authenticationConfig;
    /**
     * @return The Cloud KMS key to use for encryption.
     * 
     */
    private @Nullable String kmsKey;
    /**
     * @return Tags used for network traffic control.
     * 
     */
    private @Nullable List<String> networkTags;
    /**
     * @return Network configuration for workload execution.
     * 
     */
    private @Nullable String networkUri;
    /**
     * @return Service account that used to execute workload.
     * 
     */
    private @Nullable String serviceAccount;
    /**
     * @return A Cloud Storage bucket used to stage workload dependencies, config files, and store
     * workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket,
     * Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running,
     * and then create and manage project-level, per-location staging and temporary buckets.
     * This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     * 
     */
    private @Nullable String stagingBucket;
    /**
     * @return Subnetwork configuration for workload execution.
     * 
     */
    private @Nullable String subnetworkUri;
    /**
     * @return The duration after which the workload will be terminated.
     * When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing
     * work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it
     * exits naturally (or run forever without exiting). If ttl is not specified for an interactive session,
     * it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours.
     * Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idleTtl are specified (for an interactive session),
     * the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idleTtl or
     * when ttl has been exceeded, whichever occurs first.
     * 
     */
    private @Nullable String ttl;

    private BatchEnvironmentConfigExecutionConfig() {}
    /**
     * @return Authentication configuration for a workload is used to set the default identity for the workload execution.
     * Structure is documented below.
     * 
     */
    public Optional<BatchEnvironmentConfigExecutionConfigAuthenticationConfig> authenticationConfig() {
        return Optional.ofNullable(this.authenticationConfig);
    }
    /**
     * @return The Cloud KMS key to use for encryption.
     * 
     */
    public Optional<String> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }
    /**
     * @return Tags used for network traffic control.
     * 
     */
    public List<String> networkTags() {
        return this.networkTags == null ? List.of() : this.networkTags;
    }
    /**
     * @return Network configuration for workload execution.
     * 
     */
    public Optional<String> networkUri() {
        return Optional.ofNullable(this.networkUri);
    }
    /**
     * @return Service account that used to execute workload.
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * @return A Cloud Storage bucket used to stage workload dependencies, config files, and store
     * workload output and other ephemeral data, such as Spark history files. If you do not specify a staging bucket,
     * Cloud Dataproc will determine a Cloud Storage location according to the region where your workload is running,
     * and then create and manage project-level, per-location staging and temporary buckets.
     * This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     * 
     */
    public Optional<String> stagingBucket() {
        return Optional.ofNullable(this.stagingBucket);
    }
    /**
     * @return Subnetwork configuration for workload execution.
     * 
     */
    public Optional<String> subnetworkUri() {
        return Optional.ofNullable(this.subnetworkUri);
    }
    /**
     * @return The duration after which the workload will be terminated.
     * When the workload exceeds this duration, it will be unconditionally terminated without waiting for ongoing
     * work to finish. If ttl is not specified for a batch workload, the workload will be allowed to run until it
     * exits naturally (or run forever without exiting). If ttl is not specified for an interactive session,
     * it defaults to 24 hours. If ttl is not specified for a batch that uses 2.1+ runtime version, it defaults to 4 hours.
     * Minimum value is 10 minutes; maximum value is 14 days. If both ttl and idleTtl are specified (for an interactive session),
     * the conditions are treated as OR conditions: the workload will be terminated when it has been idle for idleTtl or
     * when ttl has been exceeded, whichever occurs first.
     * 
     */
    public Optional<String> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BatchEnvironmentConfigExecutionConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BatchEnvironmentConfigExecutionConfigAuthenticationConfig authenticationConfig;
        private @Nullable String kmsKey;
        private @Nullable List<String> networkTags;
        private @Nullable String networkUri;
        private @Nullable String serviceAccount;
        private @Nullable String stagingBucket;
        private @Nullable String subnetworkUri;
        private @Nullable String ttl;
        public Builder() {}
        public Builder(BatchEnvironmentConfigExecutionConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationConfig = defaults.authenticationConfig;
    	      this.kmsKey = defaults.kmsKey;
    	      this.networkTags = defaults.networkTags;
    	      this.networkUri = defaults.networkUri;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.stagingBucket = defaults.stagingBucket;
    	      this.subnetworkUri = defaults.subnetworkUri;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder authenticationConfig(@Nullable BatchEnvironmentConfigExecutionConfigAuthenticationConfig authenticationConfig) {

            this.authenticationConfig = authenticationConfig;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKey(@Nullable String kmsKey) {

            this.kmsKey = kmsKey;
            return this;
        }
        @CustomType.Setter
        public Builder networkTags(@Nullable List<String> networkTags) {

            this.networkTags = networkTags;
            return this;
        }
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }
        @CustomType.Setter
        public Builder networkUri(@Nullable String networkUri) {

            this.networkUri = networkUri;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder stagingBucket(@Nullable String stagingBucket) {

            this.stagingBucket = stagingBucket;
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkUri(@Nullable String subnetworkUri) {

            this.subnetworkUri = subnetworkUri;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable String ttl) {

            this.ttl = ttl;
            return this;
        }
        public BatchEnvironmentConfigExecutionConfig build() {
            final var _resultValue = new BatchEnvironmentConfigExecutionConfig();
            _resultValue.authenticationConfig = authenticationConfig;
            _resultValue.kmsKey = kmsKey;
            _resultValue.networkTags = networkTags;
            _resultValue.networkUri = networkUri;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.stagingBucket = stagingBucket;
            _resultValue.subnetworkUri = subnetworkUri;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
