// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegionNetworkEndpointGroupServerlessDeployment {
    /**
     * @return The platform of the NEG backend target(s). Possible values:
     * API Gateway: apigateway.googleapis.com
     * 
     */
    private String platform;
    /**
     * @return The user-defined name of the workload/instance. This value must be provided explicitly or in the urlMask.
     * The resource identified by this value is platform-specific and is as follows: API Gateway: The gateway ID, App Engine: The service name,
     * Cloud Functions: The function name, Cloud Run: The service name
     * 
     */
    private String resource;
    /**
     * @return A template to parse platform-specific fields from a request URL. URL mask allows for routing to multiple resources
     * on the same serverless platform without having to create multiple Network Endpoint Groups and backend resources.
     * The fields parsed by this template are platform-specific and are as follows: API Gateway: The gateway ID,
     * App Engine: The service and version, Cloud Functions: The function name, Cloud Run: The service and tag
     * 
     */
    private String urlMask;
    /**
     * @return The optional resource version. The version identified by this value is platform-specific and is follows:
     * API Gateway: Unused, App Engine: The service version, Cloud Functions: Unused, Cloud Run: The service tag
     * 
     */
    private String version;

    private GetRegionNetworkEndpointGroupServerlessDeployment() {}
    /**
     * @return The platform of the NEG backend target(s). Possible values:
     * API Gateway: apigateway.googleapis.com
     * 
     */
    public String platform() {
        return this.platform;
    }
    /**
     * @return The user-defined name of the workload/instance. This value must be provided explicitly or in the urlMask.
     * The resource identified by this value is platform-specific and is as follows: API Gateway: The gateway ID, App Engine: The service name,
     * Cloud Functions: The function name, Cloud Run: The service name
     * 
     */
    public String resource() {
        return this.resource;
    }
    /**
     * @return A template to parse platform-specific fields from a request URL. URL mask allows for routing to multiple resources
     * on the same serverless platform without having to create multiple Network Endpoint Groups and backend resources.
     * The fields parsed by this template are platform-specific and are as follows: API Gateway: The gateway ID,
     * App Engine: The service and version, Cloud Functions: The function name, Cloud Run: The service and tag
     * 
     */
    public String urlMask() {
        return this.urlMask;
    }
    /**
     * @return The optional resource version. The version identified by this value is platform-specific and is follows:
     * API Gateway: Unused, App Engine: The service version, Cloud Functions: Unused, Cloud Run: The service tag
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionNetworkEndpointGroupServerlessDeployment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String platform;
        private String resource;
        private String urlMask;
        private String version;
        public Builder() {}
        public Builder(GetRegionNetworkEndpointGroupServerlessDeployment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.platform = defaults.platform;
    	      this.resource = defaults.resource;
    	      this.urlMask = defaults.urlMask;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetRegionNetworkEndpointGroupServerlessDeployment", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder resource(String resource) {
            if (resource == null) {
              throw new MissingRequiredPropertyException("GetRegionNetworkEndpointGroupServerlessDeployment", "resource");
            }
            this.resource = resource;
            return this;
        }
        @CustomType.Setter
        public Builder urlMask(String urlMask) {
            if (urlMask == null) {
              throw new MissingRequiredPropertyException("GetRegionNetworkEndpointGroupServerlessDeployment", "urlMask");
            }
            this.urlMask = urlMask;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetRegionNetworkEndpointGroupServerlessDeployment", "version");
            }
            this.version = version;
            return this;
        }
        public GetRegionNetworkEndpointGroupServerlessDeployment build() {
            final var _resultValue = new GetRegionNetworkEndpointGroupServerlessDeployment();
            _resultValue.platform = platform;
            _resultValue.resource = resource;
            _resultValue.urlMask = urlMask;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
