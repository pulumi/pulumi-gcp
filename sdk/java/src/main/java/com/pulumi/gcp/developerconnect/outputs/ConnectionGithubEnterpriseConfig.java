// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGithubEnterpriseConfigServiceDirectoryConfig;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionGithubEnterpriseConfig {
    /**
     * @return Optional. ID of the GitHub App created from the manifest.
     * 
     */
    private @Nullable String appId;
    /**
     * @return Optional. ID of the installation of the GitHub App.
     * 
     */
    private @Nullable String appInstallationId;
    /**
     * @return (Output)
     * Output only. The URL-friendly name of the GitHub App.
     * 
     */
    private @Nullable String appSlug;
    /**
     * @return Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    private String hostUri;
    /**
     * @return (Output)
     * Output only. The URI to navigate to in order to manage the installation associated
     * with this GitHubEnterpriseConfig.
     * 
     */
    private @Nullable String installationUri;
    /**
     * @return Optional. SecretManager resource containing the private key of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    private @Nullable String privateKeySecretVersion;
    /**
     * @return (Output)
     * Output only. GitHub Enterprise version installed at the host_uri.
     * 
     */
    private @Nullable String serverVersion;
    /**
     * @return ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionGithubEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig;
    /**
     * @return Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    private @Nullable String sslCaCertificate;
    /**
     * @return Optional. SecretManager resource containing the webhook secret of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    private @Nullable String webhookSecretSecretVersion;

    private ConnectionGithubEnterpriseConfig() {}
    /**
     * @return Optional. ID of the GitHub App created from the manifest.
     * 
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }
    /**
     * @return Optional. ID of the installation of the GitHub App.
     * 
     */
    public Optional<String> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }
    /**
     * @return (Output)
     * Output only. The URL-friendly name of the GitHub App.
     * 
     */
    public Optional<String> appSlug() {
        return Optional.ofNullable(this.appSlug);
    }
    /**
     * @return Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    public String hostUri() {
        return this.hostUri;
    }
    /**
     * @return (Output)
     * Output only. The URI to navigate to in order to manage the installation associated
     * with this GitHubEnterpriseConfig.
     * 
     */
    public Optional<String> installationUri() {
        return Optional.ofNullable(this.installationUri);
    }
    /**
     * @return Optional. SecretManager resource containing the private key of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    public Optional<String> privateKeySecretVersion() {
        return Optional.ofNullable(this.privateKeySecretVersion);
    }
    /**
     * @return (Output)
     * Output only. GitHub Enterprise version installed at the host_uri.
     * 
     */
    public Optional<String> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }
    /**
     * @return ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionGithubEnterpriseConfigServiceDirectoryConfig> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }
    /**
     * @return Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    public Optional<String> sslCaCertificate() {
        return Optional.ofNullable(this.sslCaCertificate);
    }
    /**
     * @return Optional. SecretManager resource containing the webhook secret of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    public Optional<String> webhookSecretSecretVersion() {
        return Optional.ofNullable(this.webhookSecretSecretVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionGithubEnterpriseConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String appId;
        private @Nullable String appInstallationId;
        private @Nullable String appSlug;
        private String hostUri;
        private @Nullable String installationUri;
        private @Nullable String privateKeySecretVersion;
        private @Nullable String serverVersion;
        private @Nullable ConnectionGithubEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig;
        private @Nullable String sslCaCertificate;
        private @Nullable String webhookSecretSecretVersion;
        public Builder() {}
        public Builder(ConnectionGithubEnterpriseConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.appInstallationId = defaults.appInstallationId;
    	      this.appSlug = defaults.appSlug;
    	      this.hostUri = defaults.hostUri;
    	      this.installationUri = defaults.installationUri;
    	      this.privateKeySecretVersion = defaults.privateKeySecretVersion;
    	      this.serverVersion = defaults.serverVersion;
    	      this.serviceDirectoryConfig = defaults.serviceDirectoryConfig;
    	      this.sslCaCertificate = defaults.sslCaCertificate;
    	      this.webhookSecretSecretVersion = defaults.webhookSecretSecretVersion;
        }

        @CustomType.Setter
        public Builder appId(@Nullable String appId) {

            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder appInstallationId(@Nullable String appInstallationId) {

            this.appInstallationId = appInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder appSlug(@Nullable String appSlug) {

            this.appSlug = appSlug;
            return this;
        }
        @CustomType.Setter
        public Builder hostUri(String hostUri) {
            if (hostUri == null) {
              throw new MissingRequiredPropertyException("ConnectionGithubEnterpriseConfig", "hostUri");
            }
            this.hostUri = hostUri;
            return this;
        }
        @CustomType.Setter
        public Builder installationUri(@Nullable String installationUri) {

            this.installationUri = installationUri;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeySecretVersion(@Nullable String privateKeySecretVersion) {

            this.privateKeySecretVersion = privateKeySecretVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serverVersion(@Nullable String serverVersion) {

            this.serverVersion = serverVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDirectoryConfig(@Nullable ConnectionGithubEnterpriseConfigServiceDirectoryConfig serviceDirectoryConfig) {

            this.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sslCaCertificate(@Nullable String sslCaCertificate) {

            this.sslCaCertificate = sslCaCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecretSecretVersion(@Nullable String webhookSecretSecretVersion) {

            this.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }
        public ConnectionGithubEnterpriseConfig build() {
            final var _resultValue = new ConnectionGithubEnterpriseConfig();
            _resultValue.appId = appId;
            _resultValue.appInstallationId = appInstallationId;
            _resultValue.appSlug = appSlug;
            _resultValue.hostUri = hostUri;
            _resultValue.installationUri = installationUri;
            _resultValue.privateKeySecretVersion = privateKeySecretVersion;
            _resultValue.serverVersion = serverVersion;
            _resultValue.serviceDirectoryConfig = serviceDirectoryConfig;
            _resultValue.sslCaCertificate = sslCaCertificate;
            _resultValue.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return _resultValue;
        }
    }
}
