// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConversationProfileNewRecognitionResultNotificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConversationProfileNewRecognitionResultNotificationConfigArgs Empty = new ConversationProfileNewRecognitionResultNotificationConfigArgs();

    /**
     * Format of message.
     * Possible values are: `MESSAGE_FORMAT_UNSPECIFIED`, `PROTO`, `JSON`.
     * 
     */
    @Import(name="messageFormat")
    private @Nullable Output<String> messageFormat;

    /**
     * @return Format of message.
     * Possible values are: `MESSAGE_FORMAT_UNSPECIFIED`, `PROTO`, `JSON`.
     * 
     */
    public Optional<Output<String>> messageFormat() {
        return Optional.ofNullable(this.messageFormat);
    }

    /**
     * Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
     * For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-&lt;Conversation Project Number&gt;{@literal @}gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
     * For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;.
     * 
     */
    @Import(name="topic")
    private @Nullable Output<String> topic;

    /**
     * @return Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
     * For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-&lt;Conversation Project Number&gt;{@literal @}gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
     * For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;.
     * 
     */
    public Optional<Output<String>> topic() {
        return Optional.ofNullable(this.topic);
    }

    private ConversationProfileNewRecognitionResultNotificationConfigArgs() {}

    private ConversationProfileNewRecognitionResultNotificationConfigArgs(ConversationProfileNewRecognitionResultNotificationConfigArgs $) {
        this.messageFormat = $.messageFormat;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConversationProfileNewRecognitionResultNotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConversationProfileNewRecognitionResultNotificationConfigArgs $;

        public Builder() {
            $ = new ConversationProfileNewRecognitionResultNotificationConfigArgs();
        }

        public Builder(ConversationProfileNewRecognitionResultNotificationConfigArgs defaults) {
            $ = new ConversationProfileNewRecognitionResultNotificationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param messageFormat Format of message.
         * Possible values are: `MESSAGE_FORMAT_UNSPECIFIED`, `PROTO`, `JSON`.
         * 
         * @return builder
         * 
         */
        public Builder messageFormat(@Nullable Output<String> messageFormat) {
            $.messageFormat = messageFormat;
            return this;
        }

        /**
         * @param messageFormat Format of message.
         * Possible values are: `MESSAGE_FORMAT_UNSPECIFIED`, `PROTO`, `JSON`.
         * 
         * @return builder
         * 
         */
        public Builder messageFormat(String messageFormat) {
            return messageFormat(Output.of(messageFormat));
        }

        /**
         * @param topic Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
         * For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-&lt;Conversation Project Number&gt;{@literal @}gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
         * For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder topic(@Nullable Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos.
         * For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant service-&lt;Conversation Project Number&gt;{@literal @}gcp-sa-dialogflow.iam.gserviceaccount.com the Dialogflow Service Agent role in the topic project.
         * For chat integration to receive notification, make sure API caller has been granted the Dialogflow Service Agent role for the topic.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/topics/&lt;Topic ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public ConversationProfileNewRecognitionResultNotificationConfigArgs build() {
            return $;
        }
    }

}
