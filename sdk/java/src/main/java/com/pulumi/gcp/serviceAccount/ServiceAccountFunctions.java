// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.serviceAccount;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountAccessTokenArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountAccessTokenPlainArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountIdTokenArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountIdTokenPlainArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountJwtArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountJwtPlainArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountKeyArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountKeyPlainArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetAccountPlainArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetIamPolicyArgs;
import com.pulumi.gcp.serviceAccount.inputs.GetIamPolicyPlainArgs;
import com.pulumi.gcp.serviceAccount.outputs.GetAccountAccessTokenResult;
import com.pulumi.gcp.serviceAccount.outputs.GetAccountIdTokenResult;
import com.pulumi.gcp.serviceAccount.outputs.GetAccountJwtResult;
import com.pulumi.gcp.serviceAccount.outputs.GetAccountKeyResult;
import com.pulumi.gcp.serviceAccount.outputs.GetAccountResult;
import com.pulumi.gcp.serviceAccount.outputs.GetIamPolicyResult;
import java.util.concurrent.CompletableFuture;

public final class ServiceAccountFunctions {
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceAccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId(&#34;object-viewer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args) {
        return getAccount(args, InvokeOptions.Empty);
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceAccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId(&#34;object-viewer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args) {
        return getAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceAccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId(&#34;object-viewer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceAccount/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the service account from a project. For more information see
     * the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var objectViewer = ServiceAccountFunctions.getAccount(GetAccountArgs.builder()
     *             .accountId(&#34;object-viewer&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceAccount/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.IAMBinding;
     * import com.pulumi.gcp.serviceAccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var token_creator_iam = new IAMBinding(&#34;token-creator-iam&#34;, IAMBindingArgs.builder()        
     *             .members(&#34;serviceAccount:service_A@projectA.iam.gserviceaccount.com&#34;)
     *             .role(&#34;roles/iam.serviceAccountTokenCreator&#34;)
     *             .serviceAccountId(&#34;projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.pulumi.providers.google;
     * import com.pulumi.pulumi.providers.ProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var defaultClientConfig = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultAccountAccessToken = ServiceAccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount(&#34;service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .scopes(            
     *                 &#34;userinfo-email&#34;,
     *                 &#34;cloud-platform&#34;)
     *             .lifetime(&#34;300s&#34;)
     *             .build());
     * 
     *         var impersonated = new Provider(&#34;impersonated&#34;, ProviderArgs.builder()        
     *             .accessToken(defaultAccountAccessToken.applyValue(getAccountAccessTokenResult -&gt; getAccountAccessTokenResult.accessToken()))
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export(&#34;target-email&#34;, me.applyValue(getClientOpenIdUserInfoResult -&gt; getClientOpenIdUserInfoResult.email()));
     *     }
     * }
     * ```
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static Output<GetAccountAccessTokenResult> getAccountAccessToken(GetAccountAccessTokenArgs args) {
        return getAccountAccessToken(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.IAMBinding;
     * import com.pulumi.gcp.serviceAccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var token_creator_iam = new IAMBinding(&#34;token-creator-iam&#34;, IAMBindingArgs.builder()        
     *             .members(&#34;serviceAccount:service_A@projectA.iam.gserviceaccount.com&#34;)
     *             .role(&#34;roles/iam.serviceAccountTokenCreator&#34;)
     *             .serviceAccountId(&#34;projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.pulumi.providers.google;
     * import com.pulumi.pulumi.providers.ProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var defaultClientConfig = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultAccountAccessToken = ServiceAccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount(&#34;service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .scopes(            
     *                 &#34;userinfo-email&#34;,
     *                 &#34;cloud-platform&#34;)
     *             .lifetime(&#34;300s&#34;)
     *             .build());
     * 
     *         var impersonated = new Provider(&#34;impersonated&#34;, ProviderArgs.builder()        
     *             .accessToken(defaultAccountAccessToken.applyValue(getAccountAccessTokenResult -&gt; getAccountAccessTokenResult.accessToken()))
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export(&#34;target-email&#34;, me.applyValue(getClientOpenIdUserInfoResult -&gt; getClientOpenIdUserInfoResult.email()));
     *     }
     * }
     * ```
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static CompletableFuture<GetAccountAccessTokenResult> getAccountAccessTokenPlain(GetAccountAccessTokenPlainArgs args) {
        return getAccountAccessTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.IAMBinding;
     * import com.pulumi.gcp.serviceAccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var token_creator_iam = new IAMBinding(&#34;token-creator-iam&#34;, IAMBindingArgs.builder()        
     *             .members(&#34;serviceAccount:service_A@projectA.iam.gserviceaccount.com&#34;)
     *             .role(&#34;roles/iam.serviceAccountTokenCreator&#34;)
     *             .serviceAccountId(&#34;projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.pulumi.providers.google;
     * import com.pulumi.pulumi.providers.ProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var defaultClientConfig = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultAccountAccessToken = ServiceAccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount(&#34;service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .scopes(            
     *                 &#34;userinfo-email&#34;,
     *                 &#34;cloud-platform&#34;)
     *             .lifetime(&#34;300s&#34;)
     *             .build());
     * 
     *         var impersonated = new Provider(&#34;impersonated&#34;, ProviderArgs.builder()        
     *             .accessToken(defaultAccountAccessToken.applyValue(getAccountAccessTokenResult -&gt; getAccountAccessTokenResult.accessToken()))
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export(&#34;target-email&#34;, me.applyValue(getClientOpenIdUserInfoResult -&gt; getClientOpenIdUserInfoResult.email()));
     *     }
     * }
     * ```
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static Output<GetAccountAccessTokenResult> getAccountAccessToken(GetAccountAccessTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceAccount/getAccountAccessToken:getAccountAccessToken", TypeShape.of(GetAccountAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)
     * 
     * ## Example Usage
     * 
     * To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A.
     * 
     * In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.IAMBinding;
     * import com.pulumi.gcp.serviceAccount.IAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var token_creator_iam = new IAMBinding(&#34;token-creator-iam&#34;, IAMBindingArgs.builder()        
     *             .members(&#34;serviceAccount:service_A@projectA.iam.gserviceaccount.com&#34;)
     *             .role(&#34;roles/iam.serviceAccountTokenCreator&#34;)
     *             .serviceAccountId(&#34;projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.
     * 
     * In the example below, `gcp.organizations.Project` will run as `service_B`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.organizations.OrganizationsFunctions;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountAccessTokenArgs;
     * import com.pulumi.pulumi.providers.google;
     * import com.pulumi.pulumi.providers.ProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var defaultClientConfig = OrganizationsFunctions.getClientConfig();
     * 
     *         final var defaultAccountAccessToken = ServiceAccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
     *             .targetServiceAccount(&#34;service_B@projectB.iam.gserviceaccount.com&#34;)
     *             .scopes(            
     *                 &#34;userinfo-email&#34;,
     *                 &#34;cloud-platform&#34;)
     *             .lifetime(&#34;300s&#34;)
     *             .build());
     * 
     *         var impersonated = new Provider(&#34;impersonated&#34;, ProviderArgs.builder()        
     *             .accessToken(defaultAccountAccessToken.applyValue(getAccountAccessTokenResult -&gt; getAccountAccessTokenResult.accessToken()))
     *             .build());
     * 
     *         final var me = OrganizationsFunctions.getClientOpenIdUserInfo();
     * 
     *         ctx.export(&#34;target-email&#34;, me.applyValue(getClientOpenIdUserInfoResult -&gt; getClientOpenIdUserInfoResult.email()));
     *     }
     * }
     * ```
     * 
     * &gt; *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
     * 
     */
    public static CompletableFuture<GetAccountAccessTokenResult> getAccountAccessTokenPlain(GetAccountAccessTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceAccount/getAccountAccessToken:getAccountAccessToken", TypeShape.of(GetAccountAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceAccount.getAccountIdToken` will use the configured provider credentials
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceAccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     */
    public static Output<GetAccountIdTokenResult> getAccountIdToken(GetAccountIdTokenArgs args) {
        return getAccountIdToken(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceAccount.getAccountIdToken` will use the configured provider credentials
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceAccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     */
    public static CompletableFuture<GetAccountIdTokenResult> getAccountIdTokenPlain(GetAccountIdTokenPlainArgs args) {
        return getAccountIdTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceAccount.getAccountIdToken` will use the configured provider credentials
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceAccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     */
    public static Output<GetAccountIdTokenResult> getAccountIdToken(GetAccountIdTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceAccount/getAccountIdToken:getAccountIdToken", TypeShape.of(GetAccountIdTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
     * 
     * For more information see
     * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     * 
     * ## Example Usage
     * 
     * ### ServiceAccount JSON Credential File.
     *   `gcp.serviceAccount.getAccountIdToken` will use the configured provider credentials
     * 
     * ### Service Account Impersonation.
     *   `gcp.serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceAccount.getAccountAccessToken`.
     * 
     *   Note: to use the following, you must grant `target_service_account` the
     *   `roles/iam.serviceAccountTokenCreator` role on itself.
     * 
     */
    public static CompletableFuture<GetAccountIdTokenResult> getAccountIdTokenPlain(GetAccountIdTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceAccount/getAccountIdToken:getAccountIdToken", TypeShape.of(GetAccountIdTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount(&#34;impersonated-account@project.iam.gserviceaccount.com&#34;)
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;foo&#34;, &#34;bar&#34;),
     *                     jsonProperty(&#34;sub&#34;, &#34;subject&#34;)
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export(&#34;jwt&#34;, foo.applyValue(getAccountJwtResult -&gt; getAccountJwtResult.jwt()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountJwtResult> getAccountJwt(GetAccountJwtArgs args) {
        return getAccountJwt(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount(&#34;impersonated-account@project.iam.gserviceaccount.com&#34;)
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;foo&#34;, &#34;bar&#34;),
     *                     jsonProperty(&#34;sub&#34;, &#34;subject&#34;)
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export(&#34;jwt&#34;, foo.applyValue(getAccountJwtResult -&gt; getAccountJwtResult.jwt()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountJwtResult> getAccountJwtPlain(GetAccountJwtPlainArgs args) {
        return getAccountJwtPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount(&#34;impersonated-account@project.iam.gserviceaccount.com&#34;)
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;foo&#34;, &#34;bar&#34;),
     *                     jsonProperty(&#34;sub&#34;, &#34;subject&#34;)
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export(&#34;jwt&#34;, foo.applyValue(getAccountJwtResult -&gt; getAccountJwtResult.jwt()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountJwtResult> getAccountJwt(GetAccountJwtArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceAccount/getAccountJwt:getAccountJwt", TypeShape.of(GetAccountJwtResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
     * 
     * ## Example Usage
     * 
     * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountJwtArgs;
     * import static com.pulumi.codegen.internal.Serialization.*;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
     *             .targetServiceAccount(&#34;impersonated-account@project.iam.gserviceaccount.com&#34;)
     *             .payload(serializeJson(
     *                 jsonObject(
     *                     jsonProperty(&#34;foo&#34;, &#34;bar&#34;),
     *                     jsonProperty(&#34;sub&#34;, &#34;subject&#34;)
     *                 )))
     *             .expiresIn(60)
     *             .build());
     * 
     *         ctx.export(&#34;jwt&#34;, foo.applyValue(getAccountJwtResult -&gt; getAccountJwtResult.jwt()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountJwtResult> getAccountJwtPlain(GetAccountJwtPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceAccount/getAccountJwt:getAccountJwt", TypeShape.of(GetAccountJwtResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.Account;
     * import com.pulumi.gcp.serviceAccount.AccountArgs;
     * import com.pulumi.gcp.serviceAccount.Key;
     * import com.pulumi.gcp.serviceAccount.KeyArgs;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account(&#34;myaccount&#34;, AccountArgs.builder()        
     *             .accountId(&#34;dev-foo-account&#34;)
     *             .build());
     * 
     *         var mykeyKey = new Key(&#34;mykeyKey&#34;, KeyArgs.builder()        
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykeyAccountKey = ServiceAccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType(&#34;TYPE_X509_PEM_FILE&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountKeyResult> getAccountKey(GetAccountKeyArgs args) {
        return getAccountKey(args, InvokeOptions.Empty);
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.Account;
     * import com.pulumi.gcp.serviceAccount.AccountArgs;
     * import com.pulumi.gcp.serviceAccount.Key;
     * import com.pulumi.gcp.serviceAccount.KeyArgs;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account(&#34;myaccount&#34;, AccountArgs.builder()        
     *             .accountId(&#34;dev-foo-account&#34;)
     *             .build());
     * 
     *         var mykeyKey = new Key(&#34;mykeyKey&#34;, KeyArgs.builder()        
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykeyAccountKey = ServiceAccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType(&#34;TYPE_X509_PEM_FILE&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountKeyResult> getAccountKeyPlain(GetAccountKeyPlainArgs args) {
        return getAccountKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.Account;
     * import com.pulumi.gcp.serviceAccount.AccountArgs;
     * import com.pulumi.gcp.serviceAccount.Key;
     * import com.pulumi.gcp.serviceAccount.KeyArgs;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account(&#34;myaccount&#34;, AccountArgs.builder()        
     *             .accountId(&#34;dev-foo-account&#34;)
     *             .build());
     * 
     *         var mykeyKey = new Key(&#34;mykeyKey&#34;, KeyArgs.builder()        
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykeyAccountKey = ServiceAccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType(&#34;TYPE_X509_PEM_FILE&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountKeyResult> getAccountKey(GetAccountKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceAccount/getAccountKey:getAccountKey", TypeShape.of(GetAccountKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.Account;
     * import com.pulumi.gcp.serviceAccount.AccountArgs;
     * import com.pulumi.gcp.serviceAccount.Key;
     * import com.pulumi.gcp.serviceAccount.KeyArgs;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetAccountKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myaccount = new Account(&#34;myaccount&#34;, AccountArgs.builder()        
     *             .accountId(&#34;dev-foo-account&#34;)
     *             .build());
     * 
     *         var mykeyKey = new Key(&#34;mykeyKey&#34;, KeyArgs.builder()        
     *             .serviceAccountId(myaccount.name())
     *             .build());
     * 
     *         final var mykeyAccountKey = ServiceAccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
     *             .name(mykeyKey.name())
     *             .publicKeyType(&#34;TYPE_X509_PEM_FILE&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountKeyResult> getAccountKeyPlain(GetAccountKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceAccount/getAccountKey:getAccountKey", TypeShape.of(GetAccountKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(google_service_account.test_account().name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIamPolicyResult> getIamPolicy(GetIamPolicyArgs args) {
        return getIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(google_service_account.test_account().name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIamPolicyResult> getIamPolicyPlain(GetIamPolicyPlainArgs args) {
        return getIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(google_service_account.test_account().name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIamPolicyResult> getIamPolicy(GetIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:serviceAccount/getIamPolicy:getIamPolicy", TypeShape.of(GetIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a service account.
     * 
     * ## example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.serviceAccount.ServiceAccountFunctions;
     * import com.pulumi.gcp.serviceAccount.inputs.GetIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = ServiceAccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
     *             .serviceAccountId(google_service_account.test_account().name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIamPolicyResult> getIamPolicyPlain(GetIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:serviceAccount/getIamPolicy:getIamPolicy", TypeShape.of(GetIamPolicyResult.class), args, Utilities.withVersion(options));
    }
}
