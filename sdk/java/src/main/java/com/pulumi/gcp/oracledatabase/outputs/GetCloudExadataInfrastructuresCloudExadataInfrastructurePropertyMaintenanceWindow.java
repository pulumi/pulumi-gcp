// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow {
    /**
     * @return Determines the amount of time the system will wait before the start of each
     * database server patching operation. Custom action timeout is in minutes and
     * valid value is between 15 to 120 (inclusive).
     * 
     */
    private Integer customActionTimeoutMins;
    /**
     * @return Days during the week when maintenance should be performed.
     * 
     */
    private List<String> daysOfWeeks;
    /**
     * @return The window of hours during the day when maintenance should be performed.
     * The window is a 4 hour slot. Valid values are:
     *   0 - represents time slot 0:00 - 3:59 UTC
     *   4 - represents time slot 4:00 - 7:59 UTC
     *   8 - represents time slot 8:00 - 11:59 UTC
     *   12 - represents time slot 12:00 - 15:59 UTC
     *   16 - represents time slot 16:00 - 19:59 UTC
     *   20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    private List<Integer> hoursOfDays;
    /**
     * @return If true, enables the configuration of a custom action timeout (waiting
     * period) between database server patching operations.
     * 
     */
    private Boolean isCustomActionTimeoutEnabled;
    /**
     * @return Lead time window allows user to set a lead time to prepare for a down time.
     * The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    private Integer leadTimeWeek;
    /**
     * @return Months during the year when maintenance should be performed.
     * 
     */
    private List<String> months;
    /**
     * @return Cloud CloudExadataInfrastructure node patching method, either &#34;ROLLING&#34;
     *  or &#34;NONROLLING&#34;. Default value is ROLLING.
     *  Possible values:
     *  PATCHING_MODE_UNSPECIFIED
     * ROLLING
     * NON_ROLLING
     * 
     */
    private String patchingMode;
    /**
     * @return The maintenance window scheduling preference.
     *  Possible values:
     *  MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
     * CUSTOM_PREFERENCE
     * NO_PREFERENCE
     * 
     */
    private String preference;
    /**
     * @return Weeks during the month when maintenance should be performed. Weeks start on
     * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
     * days. Weeks start and end based on calendar dates, not days of the week.
     * 
     */
    private List<Integer> weeksOfMonths;

    private GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow() {}
    /**
     * @return Determines the amount of time the system will wait before the start of each
     * database server patching operation. Custom action timeout is in minutes and
     * valid value is between 15 to 120 (inclusive).
     * 
     */
    public Integer customActionTimeoutMins() {
        return this.customActionTimeoutMins;
    }
    /**
     * @return Days during the week when maintenance should be performed.
     * 
     */
    public List<String> daysOfWeeks() {
        return this.daysOfWeeks;
    }
    /**
     * @return The window of hours during the day when maintenance should be performed.
     * The window is a 4 hour slot. Valid values are:
     *   0 - represents time slot 0:00 - 3:59 UTC
     *   4 - represents time slot 4:00 - 7:59 UTC
     *   8 - represents time slot 8:00 - 11:59 UTC
     *   12 - represents time slot 12:00 - 15:59 UTC
     *   16 - represents time slot 16:00 - 19:59 UTC
     *   20 - represents time slot 20:00 - 23:59 UTC
     * 
     */
    public List<Integer> hoursOfDays() {
        return this.hoursOfDays;
    }
    /**
     * @return If true, enables the configuration of a custom action timeout (waiting
     * period) between database server patching operations.
     * 
     */
    public Boolean isCustomActionTimeoutEnabled() {
        return this.isCustomActionTimeoutEnabled;
    }
    /**
     * @return Lead time window allows user to set a lead time to prepare for a down time.
     * The lead time is in weeks and valid value is between 1 to 4.
     * 
     */
    public Integer leadTimeWeek() {
        return this.leadTimeWeek;
    }
    /**
     * @return Months during the year when maintenance should be performed.
     * 
     */
    public List<String> months() {
        return this.months;
    }
    /**
     * @return Cloud CloudExadataInfrastructure node patching method, either &#34;ROLLING&#34;
     *  or &#34;NONROLLING&#34;. Default value is ROLLING.
     *  Possible values:
     *  PATCHING_MODE_UNSPECIFIED
     * ROLLING
     * NON_ROLLING
     * 
     */
    public String patchingMode() {
        return this.patchingMode;
    }
    /**
     * @return The maintenance window scheduling preference.
     *  Possible values:
     *  MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
     * CUSTOM_PREFERENCE
     * NO_PREFERENCE
     * 
     */
    public String preference() {
        return this.preference;
    }
    /**
     * @return Weeks during the month when maintenance should be performed. Weeks start on
     * the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
     * days. Weeks start and end based on calendar dates, not days of the week.
     * 
     */
    public List<Integer> weeksOfMonths() {
        return this.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer customActionTimeoutMins;
        private List<String> daysOfWeeks;
        private List<Integer> hoursOfDays;
        private Boolean isCustomActionTimeoutEnabled;
        private Integer leadTimeWeek;
        private List<String> months;
        private String patchingMode;
        private String preference;
        private List<Integer> weeksOfMonths;
        public Builder() {}
        public Builder(GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customActionTimeoutMins = defaults.customActionTimeoutMins;
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.hoursOfDays = defaults.hoursOfDays;
    	      this.isCustomActionTimeoutEnabled = defaults.isCustomActionTimeoutEnabled;
    	      this.leadTimeWeek = defaults.leadTimeWeek;
    	      this.months = defaults.months;
    	      this.patchingMode = defaults.patchingMode;
    	      this.preference = defaults.preference;
    	      this.weeksOfMonths = defaults.weeksOfMonths;
        }

        @CustomType.Setter
        public Builder customActionTimeoutMins(Integer customActionTimeoutMins) {
            if (customActionTimeoutMins == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "customActionTimeoutMins");
            }
            this.customActionTimeoutMins = customActionTimeoutMins;
            return this;
        }
        @CustomType.Setter
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            if (daysOfWeeks == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "daysOfWeeks");
            }
            this.daysOfWeeks = daysOfWeeks;
            return this;
        }
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        @CustomType.Setter
        public Builder hoursOfDays(List<Integer> hoursOfDays) {
            if (hoursOfDays == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "hoursOfDays");
            }
            this.hoursOfDays = hoursOfDays;
            return this;
        }
        public Builder hoursOfDays(Integer... hoursOfDays) {
            return hoursOfDays(List.of(hoursOfDays));
        }
        @CustomType.Setter
        public Builder isCustomActionTimeoutEnabled(Boolean isCustomActionTimeoutEnabled) {
            if (isCustomActionTimeoutEnabled == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "isCustomActionTimeoutEnabled");
            }
            this.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder leadTimeWeek(Integer leadTimeWeek) {
            if (leadTimeWeek == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "leadTimeWeek");
            }
            this.leadTimeWeek = leadTimeWeek;
            return this;
        }
        @CustomType.Setter
        public Builder months(List<String> months) {
            if (months == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "months");
            }
            this.months = months;
            return this;
        }
        public Builder months(String... months) {
            return months(List.of(months));
        }
        @CustomType.Setter
        public Builder patchingMode(String patchingMode) {
            if (patchingMode == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "patchingMode");
            }
            this.patchingMode = patchingMode;
            return this;
        }
        @CustomType.Setter
        public Builder preference(String preference) {
            if (preference == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "preference");
            }
            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder weeksOfMonths(List<Integer> weeksOfMonths) {
            if (weeksOfMonths == null) {
              throw new MissingRequiredPropertyException("GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow", "weeksOfMonths");
            }
            this.weeksOfMonths = weeksOfMonths;
            return this;
        }
        public Builder weeksOfMonths(Integer... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }
        public GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow build() {
            final var _resultValue = new GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindow();
            _resultValue.customActionTimeoutMins = customActionTimeoutMins;
            _resultValue.daysOfWeeks = daysOfWeeks;
            _resultValue.hoursOfDays = hoursOfDays;
            _resultValue.isCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            _resultValue.leadTimeWeek = leadTimeWeek;
            _resultValue.months = months;
            _resultValue.patchingMode = patchingMode;
            _resultValue.preference = preference;
            _resultValue.weeksOfMonths = weeksOfMonths;
            return _resultValue;
        }
    }
}
