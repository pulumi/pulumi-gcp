// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workbench.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceUpgradeHistory {
    /**
     * @return Optional. Action. Rolloback or Upgrade.
     * 
     */
    private @Nullable String action;
    /**
     * @return Optional. The container image before this instance upgrade.
     * 
     */
    private @Nullable String containerImage;
    /**
     * @return An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
     * The milliseconds portion (&#34;.SSS&#34;) is optional.
     * 
     */
    private @Nullable String createTime;
    /**
     * @return Optional. The framework of this workbench instance.
     * 
     */
    private @Nullable String framework;
    /**
     * @return Optional. The snapshot of the boot disk of this workbench instance before upgrade.
     * 
     */
    private @Nullable String snapshot;
    /**
     * @return (Output)
     * Output only. The state of this instance upgrade history entry.
     * 
     */
    private @Nullable String state;
    /**
     * @return Optional. Target VM Version, like m63.
     * 
     */
    private @Nullable String targetVersion;
    /**
     * @return Optional. The version of the workbench instance before this upgrade.
     * 
     */
    private @Nullable String version;
    /**
     * @return Definition of a custom Compute Engine virtual machine image for starting
     * a workbench instance with the environment installed directly on the VM.
     * Structure is documented below.
     * 
     */
    private @Nullable String vmImage;

    private InstanceUpgradeHistory() {}
    /**
     * @return Optional. Action. Rolloback or Upgrade.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Optional. The container image before this instance upgrade.
     * 
     */
    public Optional<String> containerImage() {
        return Optional.ofNullable(this.containerImage);
    }
    /**
     * @return An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
     * The milliseconds portion (&#34;.SSS&#34;) is optional.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }
    /**
     * @return Optional. The framework of this workbench instance.
     * 
     */
    public Optional<String> framework() {
        return Optional.ofNullable(this.framework);
    }
    /**
     * @return Optional. The snapshot of the boot disk of this workbench instance before upgrade.
     * 
     */
    public Optional<String> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }
    /**
     * @return (Output)
     * Output only. The state of this instance upgrade history entry.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Optional. Target VM Version, like m63.
     * 
     */
    public Optional<String> targetVersion() {
        return Optional.ofNullable(this.targetVersion);
    }
    /**
     * @return Optional. The version of the workbench instance before this upgrade.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return Definition of a custom Compute Engine virtual machine image for starting
     * a workbench instance with the environment installed directly on the VM.
     * Structure is documented below.
     * 
     */
    public Optional<String> vmImage() {
        return Optional.ofNullable(this.vmImage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceUpgradeHistory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable String containerImage;
        private @Nullable String createTime;
        private @Nullable String framework;
        private @Nullable String snapshot;
        private @Nullable String state;
        private @Nullable String targetVersion;
        private @Nullable String version;
        private @Nullable String vmImage;
        public Builder() {}
        public Builder(InstanceUpgradeHistory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.containerImage = defaults.containerImage;
    	      this.createTime = defaults.createTime;
    	      this.framework = defaults.framework;
    	      this.snapshot = defaults.snapshot;
    	      this.state = defaults.state;
    	      this.targetVersion = defaults.targetVersion;
    	      this.version = defaults.version;
    	      this.vmImage = defaults.vmImage;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {

            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder containerImage(@Nullable String containerImage) {

            this.containerImage = containerImage;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(@Nullable String createTime) {

            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder framework(@Nullable String framework) {

            this.framework = framework;
            return this;
        }
        @CustomType.Setter
        public Builder snapshot(@Nullable String snapshot) {

            this.snapshot = snapshot;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetVersion(@Nullable String targetVersion) {

            this.targetVersion = targetVersion;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vmImage(@Nullable String vmImage) {

            this.vmImage = vmImage;
            return this;
        }
        public InstanceUpgradeHistory build() {
            final var _resultValue = new InstanceUpgradeHistory();
            _resultValue.action = action;
            _resultValue.containerImage = containerImage;
            _resultValue.createTime = createTime;
            _resultValue.framework = framework;
            _resultValue.snapshot = snapshot;
            _resultValue.state = state;
            _resultValue.targetVersion = targetVersion;
            _resultValue.version = version;
            _resultValue.vmImage = vmImage;
            return _resultValue;
        }
    }
}
