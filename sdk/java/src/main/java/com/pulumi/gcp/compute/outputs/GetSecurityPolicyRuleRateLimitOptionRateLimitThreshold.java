// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold {
    /**
     * @return Number of HTTP(S) requests for calculating the threshold.
     * 
     */
    private Integer count;
    /**
     * @return Interval over which the threshold is computed.
     * 
     */
    private Integer intervalSec;

    private GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold() {}
    /**
     * @return Number of HTTP(S) requests for calculating the threshold.
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return Interval over which the threshold is computed.
     * 
     */
    public Integer intervalSec() {
        return this.intervalSec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer count;
        private Integer intervalSec;
        public Builder() {}
        public Builder(GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.intervalSec = defaults.intervalSec;
        }

        @CustomType.Setter
        public Builder count(Integer count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder intervalSec(Integer intervalSec) {
            if (intervalSec == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold", "intervalSec");
            }
            this.intervalSec = intervalSec;
            return this;
        }
        public GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold build() {
            final var _resultValue = new GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold();
            _resultValue.count = count;
            _resultValue.intervalSec = intervalSec;
            return _resultValue;
        }
    }
}
