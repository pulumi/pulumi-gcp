// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.outputs.BackupPlanBackupRuleStandardScheduleBackupWindow;
import com.pulumi.gcp.backupdisasterrecovery.outputs.BackupPlanBackupRuleStandardScheduleWeekDayOfMonth;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackupPlanBackupRuleStandardSchedule {
    /**
     * @return A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
     * `NOT_RUN` if they do not start by the end of the window.
     * Structure is documented below.
     * 
     */
    private @Nullable BackupPlanBackupRuleStandardScheduleBackupWindow backupWindow;
    /**
     * @return Specifies days of months like 1, 5, or 14 on which jobs will run.
     * 
     */
    private @Nullable List<Integer> daysOfMonths;
    /**
     * @return Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
     * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    private @Nullable List<String> daysOfWeeks;
    /**
     * @return Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
     * This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
     * 
     */
    private @Nullable Integer hourlyFrequency;
    /**
     * @return Specifies values of months
     * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
     * 
     */
    private @Nullable List<String> months;
    /**
     * @return RecurrenceType enumerates the applicable periodicity for the schedule.
     * Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     * 
     */
    private String recurrenceType;
    /**
     * @return The time zone to be used when interpreting the schedule.
     * 
     */
    private String timeZone;
    /**
     * @return Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
     * Structure is documented below.
     * 
     */
    private @Nullable BackupPlanBackupRuleStandardScheduleWeekDayOfMonth weekDayOfMonth;

    private BackupPlanBackupRuleStandardSchedule() {}
    /**
     * @return A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
     * `NOT_RUN` if they do not start by the end of the window.
     * Structure is documented below.
     * 
     */
    public Optional<BackupPlanBackupRuleStandardScheduleBackupWindow> backupWindow() {
        return Optional.ofNullable(this.backupWindow);
    }
    /**
     * @return Specifies days of months like 1, 5, or 14 on which jobs will run.
     * 
     */
    public List<Integer> daysOfMonths() {
        return this.daysOfMonths == null ? List.of() : this.daysOfMonths;
    }
    /**
     * @return Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
     * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    public List<String> daysOfWeeks() {
        return this.daysOfWeeks == null ? List.of() : this.daysOfWeeks;
    }
    /**
     * @return Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
     * This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
     * 
     */
    public Optional<Integer> hourlyFrequency() {
        return Optional.ofNullable(this.hourlyFrequency);
    }
    /**
     * @return Specifies values of months
     * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
     * 
     */
    public List<String> months() {
        return this.months == null ? List.of() : this.months;
    }
    /**
     * @return RecurrenceType enumerates the applicable periodicity for the schedule.
     * Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     * 
     */
    public String recurrenceType() {
        return this.recurrenceType;
    }
    /**
     * @return The time zone to be used when interpreting the schedule.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
     * Structure is documented below.
     * 
     */
    public Optional<BackupPlanBackupRuleStandardScheduleWeekDayOfMonth> weekDayOfMonth() {
        return Optional.ofNullable(this.weekDayOfMonth);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackupPlanBackupRuleStandardSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BackupPlanBackupRuleStandardScheduleBackupWindow backupWindow;
        private @Nullable List<Integer> daysOfMonths;
        private @Nullable List<String> daysOfWeeks;
        private @Nullable Integer hourlyFrequency;
        private @Nullable List<String> months;
        private String recurrenceType;
        private String timeZone;
        private @Nullable BackupPlanBackupRuleStandardScheduleWeekDayOfMonth weekDayOfMonth;
        public Builder() {}
        public Builder(BackupPlanBackupRuleStandardSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupWindow = defaults.backupWindow;
    	      this.daysOfMonths = defaults.daysOfMonths;
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.hourlyFrequency = defaults.hourlyFrequency;
    	      this.months = defaults.months;
    	      this.recurrenceType = defaults.recurrenceType;
    	      this.timeZone = defaults.timeZone;
    	      this.weekDayOfMonth = defaults.weekDayOfMonth;
        }

        @CustomType.Setter
        public Builder backupWindow(@Nullable BackupPlanBackupRuleStandardScheduleBackupWindow backupWindow) {

            this.backupWindow = backupWindow;
            return this;
        }
        @CustomType.Setter
        public Builder daysOfMonths(@Nullable List<Integer> daysOfMonths) {

            this.daysOfMonths = daysOfMonths;
            return this;
        }
        public Builder daysOfMonths(Integer... daysOfMonths) {
            return daysOfMonths(List.of(daysOfMonths));
        }
        @CustomType.Setter
        public Builder daysOfWeeks(@Nullable List<String> daysOfWeeks) {

            this.daysOfWeeks = daysOfWeeks;
            return this;
        }
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        @CustomType.Setter
        public Builder hourlyFrequency(@Nullable Integer hourlyFrequency) {

            this.hourlyFrequency = hourlyFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder months(@Nullable List<String> months) {

            this.months = months;
            return this;
        }
        public Builder months(String... months) {
            return months(List.of(months));
        }
        @CustomType.Setter
        public Builder recurrenceType(String recurrenceType) {
            if (recurrenceType == null) {
              throw new MissingRequiredPropertyException("BackupPlanBackupRuleStandardSchedule", "recurrenceType");
            }
            this.recurrenceType = recurrenceType;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("BackupPlanBackupRuleStandardSchedule", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder weekDayOfMonth(@Nullable BackupPlanBackupRuleStandardScheduleWeekDayOfMonth weekDayOfMonth) {

            this.weekDayOfMonth = weekDayOfMonth;
            return this;
        }
        public BackupPlanBackupRuleStandardSchedule build() {
            final var _resultValue = new BackupPlanBackupRuleStandardSchedule();
            _resultValue.backupWindow = backupWindow;
            _resultValue.daysOfMonths = daysOfMonths;
            _resultValue.daysOfWeeks = daysOfWeeks;
            _resultValue.hourlyFrequency = hourlyFrequency;
            _resultValue.months = months;
            _resultValue.recurrenceType = recurrenceType;
            _resultValue.timeZone = timeZone;
            _resultValue.weekDayOfMonth = weekDayOfMonth;
            return _resultValue;
        }
    }
}
