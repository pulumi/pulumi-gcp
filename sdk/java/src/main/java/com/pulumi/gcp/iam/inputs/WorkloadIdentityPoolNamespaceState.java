// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iam.inputs.WorkloadIdentityPoolNamespaceOwnerServiceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadIdentityPoolNamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadIdentityPoolNamespaceState Empty = new WorkloadIdentityPoolNamespaceState();

    /**
     * A description of the namespace. Cannot exceed 256 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the namespace. Cannot exceed 256 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the namespace is disabled. If disabled, credentials may no longer be issued for
     * identities within this namespace, however existing credentials will still be accepted until
     * they expire.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether the namespace is disabled. If disabled, credentials may no longer be issued for
     * identities within this namespace, however existing credentials will still be accepted until
     * they expire.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The resource name of the namespace as
     * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/namespaces/{workload_identity_pool_namespace_id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the namespace as
     * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/namespaces/{workload_identity_pool_namespace_id}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Defines the owner that is allowed to mutate this resource. If present, this resource can only
     * be mutated by the owner.
     * Structure is documented below.
     * 
     */
    @Import(name="ownerServices")
    private @Nullable Output<List<WorkloadIdentityPoolNamespaceOwnerServiceArgs>> ownerServices;

    /**
     * @return Defines the owner that is allowed to mutate this resource. If present, this resource can only
     * be mutated by the owner.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WorkloadIdentityPoolNamespaceOwnerServiceArgs>>> ownerServices() {
        return Optional.ofNullable(this.ownerServices);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The current state of the namespace.
     * * `ACTIVE`: The namespace is active.
     * * `DELETED`: The namespace is soft-deleted. Soft-deleted namespaces are permanently deleted
     *   after approximately 30 days. You can restore a soft-deleted namespace using
     *   UndeleteWorkloadIdentityPoolNamespace. You cannot reuse the ID of a soft-deleted namespace
     *   until it is permanently deleted.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the namespace.
     * * `ACTIVE`: The namespace is active.
     * * `DELETED`: The namespace is soft-deleted. Soft-deleted namespaces are permanently deleted
     *   after approximately 30 days. You can restore a soft-deleted namespace using
     *   UndeleteWorkloadIdentityPoolNamespace. You cannot reuse the ID of a soft-deleted namespace
     *   until it is permanently deleted.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The ID to use for the pool, which becomes the final component of the resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    @Import(name="workloadIdentityPoolId")
    private @Nullable Output<String> workloadIdentityPoolId;

    /**
     * @return The ID to use for the pool, which becomes the final component of the resource name. This
     * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
     * `gcp-` is reserved for use by Google, and may not be specified.
     * 
     */
    public Optional<Output<String>> workloadIdentityPoolId() {
        return Optional.ofNullable(this.workloadIdentityPoolId);
    }

    /**
     * The ID to use for the namespace. This value must:
     * * contain at most 63 characters
     * * contain only lowercase alphanumeric characters or `-`
     * * start with an alphanumeric character
     * * end with an alphanumeric character
     * 
     * The prefix `gcp-` will be reserved for future uses.
     * 
     */
    @Import(name="workloadIdentityPoolNamespaceId")
    private @Nullable Output<String> workloadIdentityPoolNamespaceId;

    /**
     * @return The ID to use for the namespace. This value must:
     * * contain at most 63 characters
     * * contain only lowercase alphanumeric characters or `-`
     * * start with an alphanumeric character
     * * end with an alphanumeric character
     * 
     * The prefix `gcp-` will be reserved for future uses.
     * 
     */
    public Optional<Output<String>> workloadIdentityPoolNamespaceId() {
        return Optional.ofNullable(this.workloadIdentityPoolNamespaceId);
    }

    private WorkloadIdentityPoolNamespaceState() {}

    private WorkloadIdentityPoolNamespaceState(WorkloadIdentityPoolNamespaceState $) {
        this.description = $.description;
        this.disabled = $.disabled;
        this.name = $.name;
        this.ownerServices = $.ownerServices;
        this.project = $.project;
        this.state = $.state;
        this.workloadIdentityPoolId = $.workloadIdentityPoolId;
        this.workloadIdentityPoolNamespaceId = $.workloadIdentityPoolNamespaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadIdentityPoolNamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadIdentityPoolNamespaceState $;

        public Builder() {
            $ = new WorkloadIdentityPoolNamespaceState();
        }

        public Builder(WorkloadIdentityPoolNamespaceState defaults) {
            $ = new WorkloadIdentityPoolNamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the namespace. Cannot exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the namespace. Cannot exceed 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabled Whether the namespace is disabled. If disabled, credentials may no longer be issued for
         * identities within this namespace, however existing credentials will still be accepted until
         * they expire.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether the namespace is disabled. If disabled, credentials may no longer be issued for
         * identities within this namespace, however existing credentials will still be accepted until
         * they expire.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param name The resource name of the namespace as
         * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/namespaces/{workload_identity_pool_namespace_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the namespace as
         * `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/namespaces/{workload_identity_pool_namespace_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ownerServices Defines the owner that is allowed to mutate this resource. If present, this resource can only
         * be mutated by the owner.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ownerServices(@Nullable Output<List<WorkloadIdentityPoolNamespaceOwnerServiceArgs>> ownerServices) {
            $.ownerServices = ownerServices;
            return this;
        }

        /**
         * @param ownerServices Defines the owner that is allowed to mutate this resource. If present, this resource can only
         * be mutated by the owner.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ownerServices(List<WorkloadIdentityPoolNamespaceOwnerServiceArgs> ownerServices) {
            return ownerServices(Output.of(ownerServices));
        }

        /**
         * @param ownerServices Defines the owner that is allowed to mutate this resource. If present, this resource can only
         * be mutated by the owner.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ownerServices(WorkloadIdentityPoolNamespaceOwnerServiceArgs... ownerServices) {
            return ownerServices(List.of(ownerServices));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state The current state of the namespace.
         * * `ACTIVE`: The namespace is active.
         * * `DELETED`: The namespace is soft-deleted. Soft-deleted namespaces are permanently deleted
         *   after approximately 30 days. You can restore a soft-deleted namespace using
         *   UndeleteWorkloadIdentityPoolNamespace. You cannot reuse the ID of a soft-deleted namespace
         *   until it is permanently deleted.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the namespace.
         * * `ACTIVE`: The namespace is active.
         * * `DELETED`: The namespace is soft-deleted. Soft-deleted namespaces are permanently deleted
         *   after approximately 30 days. You can restore a soft-deleted namespace using
         *   UndeleteWorkloadIdentityPoolNamespace. You cannot reuse the ID of a soft-deleted namespace
         *   until it is permanently deleted.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param workloadIdentityPoolId The ID to use for the pool, which becomes the final component of the resource name. This
         * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
         * `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder workloadIdentityPoolId(@Nullable Output<String> workloadIdentityPoolId) {
            $.workloadIdentityPoolId = workloadIdentityPoolId;
            return this;
        }

        /**
         * @param workloadIdentityPoolId The ID to use for the pool, which becomes the final component of the resource name. This
         * value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
         * `gcp-` is reserved for use by Google, and may not be specified.
         * 
         * @return builder
         * 
         */
        public Builder workloadIdentityPoolId(String workloadIdentityPoolId) {
            return workloadIdentityPoolId(Output.of(workloadIdentityPoolId));
        }

        /**
         * @param workloadIdentityPoolNamespaceId The ID to use for the namespace. This value must:
         * * contain at most 63 characters
         * * contain only lowercase alphanumeric characters or `-`
         * * start with an alphanumeric character
         * * end with an alphanumeric character
         * 
         * The prefix `gcp-` will be reserved for future uses.
         * 
         * @return builder
         * 
         */
        public Builder workloadIdentityPoolNamespaceId(@Nullable Output<String> workloadIdentityPoolNamespaceId) {
            $.workloadIdentityPoolNamespaceId = workloadIdentityPoolNamespaceId;
            return this;
        }

        /**
         * @param workloadIdentityPoolNamespaceId The ID to use for the namespace. This value must:
         * * contain at most 63 characters
         * * contain only lowercase alphanumeric characters or `-`
         * * start with an alphanumeric character
         * * end with an alphanumeric character
         * 
         * The prefix `gcp-` will be reserved for future uses.
         * 
         * @return builder
         * 
         */
        public Builder workloadIdentityPoolNamespaceId(String workloadIdentityPoolNamespaceId) {
            return workloadIdentityPoolNamespaceId(Output.of(workloadIdentityPoolNamespaceId));
        }

        public WorkloadIdentityPoolNamespaceState build() {
            return $;
        }
    }

}
