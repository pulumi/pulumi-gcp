// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.pubsub.SubscriptionArgs;
import com.pulumi.gcp.pubsub.inputs.SubscriptionState;
import com.pulumi.gcp.pubsub.outputs.SubscriptionBigqueryConfig;
import com.pulumi.gcp.pubsub.outputs.SubscriptionCloudStorageConfig;
import com.pulumi.gcp.pubsub.outputs.SubscriptionDeadLetterPolicy;
import com.pulumi.gcp.pubsub.outputs.SubscriptionExpirationPolicy;
import com.pulumi.gcp.pubsub.outputs.SubscriptionMessageTransform;
import com.pulumi.gcp.pubsub.outputs.SubscriptionPushConfig;
import com.pulumi.gcp.pubsub.outputs.SubscriptionRetryPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A named resource representing the stream of messages from a single,
 * specific topic, to be delivered to the subscribing application.
 * 
 * To get more information about Subscription, see:
 * 
 * * [API documentation](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions)
 * * How-to Guides
 *     * [Managing Subscriptions](https://cloud.google.com/pubsub/docs/admin#managing_subscriptions)
 * 
 * &gt; **Note:** You can retrieve the email of the Google Managed Pub/Sub Service Account used for forwarding
 * by using the `gcp.projects.ServiceIdentity` resource.
 * 
 * ## Example Usage
 * 
 * ### Pubsub Subscription Push
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionPushConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .ackDeadlineSeconds(20)
 *             .labels(Map.of("foo", "bar"))
 *             .pushConfig(SubscriptionPushConfigArgs.builder()
 *                 .pushEndpoint("https://example.com/push")
 *                 .attributes(Map.of("x-goog-version", "v1"))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Pull
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionExpirationPolicyArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionRetryPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .labels(Map.of("foo", "bar"))
 *             .messageRetentionDuration("1200s")
 *             .retainAckedMessages(true)
 *             .ackDeadlineSeconds(20)
 *             .expirationPolicy(SubscriptionExpirationPolicyArgs.builder()
 *                 .ttl("300000.5s")
 *                 .build())
 *             .retryPolicy(SubscriptionRetryPolicyArgs.builder()
 *                 .minimumBackoff("10s")
 *                 .build())
 *             .enableMessageOrdering(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Pull Filter
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .labels(Map.of("foo", "bar"))
 *             .filter("""
 *     attributes.foo = "foo"
 *     AND attributes.bar = "bar"
 *             """)
 *             .ackDeadlineSeconds(20)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Dead Letter
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionDeadLetterPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var exampleDeadLetter = new Topic("exampleDeadLetter", TopicArgs.builder()
 *             .name("example-topic-dead-letter")
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .deadLetterPolicy(SubscriptionDeadLetterPolicyArgs.builder()
 *                 .deadLetterTopic(exampleDeadLetter.id())
 *                 .maxDeliveryAttempts(10)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Push Bq
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionBigqueryConfigArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var test = new Dataset("test", DatasetArgs.builder()
 *             .datasetId("example_dataset")
 *             .build());
 * 
 *         var testTable = new Table("testTable", TableArgs.builder()
 *             .tableId("example_table")
 *             .datasetId(test.datasetId())
 *             .schema("""
 * [
 *   {
 *     "name": "data",
 *     "type": "STRING",
 *     "mode": "NULLABLE",
 *     "description": "The data"
 *   }
 * ]
 *             """)
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .bigqueryConfig(SubscriptionBigqueryConfigArgs.builder()
 *                 .table(Output.tuple(testTable.project(), testTable.datasetId(), testTable.tableId()).applyValue(values -> {
 *                     var project = values.t1;
 *                     var datasetId = values.t2;
 *                     var tableId = values.t3;
 *                     return String.format("%s.%s.%s", project,datasetId,tableId);
 *                 }))
 *                 .build())
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Push Bq Table Schema
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionBigqueryConfigArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var test = new Dataset("test", DatasetArgs.builder()
 *             .datasetId("example_dataset")
 *             .build());
 * 
 *         var testTable = new Table("testTable", TableArgs.builder()
 *             .tableId("example_table")
 *             .datasetId(test.datasetId())
 *             .schema("""
 * [
 *   {
 *     "name": "data",
 *     "type": "STRING",
 *     "mode": "NULLABLE",
 *     "description": "The data"
 *   }
 * ]
 *             """)
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .bigqueryConfig(SubscriptionBigqueryConfigArgs.builder()
 *                 .table(Output.tuple(testTable.project(), testTable.datasetId(), testTable.tableId()).applyValue(values -> {
 *                     var project = values.t1;
 *                     var datasetId = values.t2;
 *                     var tableId = values.t3;
 *                     return String.format("%s.%s.%s", project,datasetId,tableId);
 *                 }))
 *                 .useTableSchema(true)
 *                 .build())
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Push Bq Service Account
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.bigquery.Table;
 * import com.pulumi.gcp.bigquery.TableArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionBigqueryConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Topic("example", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var bqWriteServiceAccount = new Account("bqWriteServiceAccount", AccountArgs.builder()
 *             .accountId("example-bqw")
 *             .displayName("BQ Write Service Account")
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var bigqueryMetadataViewer = new IAMMember("bigqueryMetadataViewer", IAMMemberArgs.builder()
 *             .project(project.projectId())
 *             .role("roles/bigquery.metadataViewer")
 *             .member(bqWriteServiceAccount.email().applyValue(_email -> String.format("serviceAccount:%s", _email)))
 *             .build());
 * 
 *         var bigqueryDataEditor = new IAMMember("bigqueryDataEditor", IAMMemberArgs.builder()
 *             .project(project.projectId())
 *             .role("roles/bigquery.dataEditor")
 *             .member(bqWriteServiceAccount.email().applyValue(_email -> String.format("serviceAccount:%s", _email)))
 *             .build());
 * 
 *         var test = new Dataset("test", DatasetArgs.builder()
 *             .datasetId("example_dataset")
 *             .build());
 * 
 *         var testTable = new Table("testTable", TableArgs.builder()
 *             .deletionProtection(false)
 *             .tableId("example_table")
 *             .datasetId(test.datasetId())
 *             .schema("""
 * [
 *   {
 *     "name": "data",
 *     "type": "STRING",
 *     "mode": "NULLABLE",
 *     "description": "The data"
 *   }
 * ]
 *             """)
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(example.id())
 *             .bigqueryConfig(SubscriptionBigqueryConfigArgs.builder()
 *                 .table(Output.tuple(testTable.project(), testTable.datasetId(), testTable.tableId()).applyValue(values -> {
 *                     var project = values.t1;
 *                     var datasetId = values.t2;
 *                     var tableId = values.t3;
 *                     return String.format("%s.%s.%s", project,datasetId,tableId);
 *                 }))
 *                 .serviceAccountEmail(bqWriteServiceAccount.email())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     bqWriteServiceAccount,
 *                     bigqueryMetadataViewer,
 *                     bigqueryDataEditor)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Push Cloudstorage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.storage.BucketIAMMember;
 * import com.pulumi.gcp.storage.BucketIAMMemberArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionCloudStorageConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new Bucket("example", BucketArgs.builder()
 *             .name("example-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var exampleTopic = new Topic("exampleTopic", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var admin = new BucketIAMMember("admin", BucketIAMMemberArgs.builder()
 *             .bucket(example.name())
 *             .role("roles/storage.admin")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-pubsub.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(exampleTopic.id())
 *             .cloudStorageConfig(SubscriptionCloudStorageConfigArgs.builder()
 *                 .bucket(example.name())
 *                 .filenamePrefix("pre-")
 *                 .filenameSuffix("-_26032")
 *                 .filenameDatetimeFormat("YYYY-MM-DD/hh_mm_ssZ")
 *                 .maxBytes(1000)
 *                 .maxDuration("300s")
 *                 .maxMessages(1000)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     example,
 *                     admin)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Push Cloudstorage Avro
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.storage.BucketIAMMember;
 * import com.pulumi.gcp.storage.BucketIAMMemberArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionCloudStorageConfigArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionCloudStorageConfigAvroConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new Bucket("example", BucketArgs.builder()
 *             .name("example-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var exampleTopic = new Topic("exampleTopic", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var admin = new BucketIAMMember("admin", BucketIAMMemberArgs.builder()
 *             .bucket(example.name())
 *             .role("roles/storage.admin")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-pubsub.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(exampleTopic.id())
 *             .cloudStorageConfig(SubscriptionCloudStorageConfigArgs.builder()
 *                 .bucket(example.name())
 *                 .filenamePrefix("pre-")
 *                 .filenameSuffix("-_8647")
 *                 .filenameDatetimeFormat("YYYY-MM-DD/hh_mm_ssZ")
 *                 .maxBytes(1000)
 *                 .maxDuration("300s")
 *                 .maxMessages(1000)
 *                 .avroConfig(SubscriptionCloudStorageConfigAvroConfigArgs.builder()
 *                     .writeMetadata(true)
 *                     .useTopicSchema(true)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     example,
 *                     admin)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Pubsub Subscription Push Cloudstorage Service Account
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.storage.BucketIAMMember;
 * import com.pulumi.gcp.storage.BucketIAMMemberArgs;
 * import com.pulumi.gcp.pubsub.Subscription;
 * import com.pulumi.gcp.pubsub.SubscriptionArgs;
 * import com.pulumi.gcp.pubsub.inputs.SubscriptionCloudStorageConfigArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Bucket("example", BucketArgs.builder()
 *             .name("example-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var exampleTopic = new Topic("exampleTopic", TopicArgs.builder()
 *             .name("example-topic")
 *             .build());
 * 
 *         var storageWriteServiceAccount = new Account("storageWriteServiceAccount", AccountArgs.builder()
 *             .accountId("example-stw")
 *             .displayName("Storage Write Service Account")
 *             .build());
 * 
 *         var admin = new BucketIAMMember("admin", BucketIAMMemberArgs.builder()
 *             .bucket(example.name())
 *             .role("roles/storage.admin")
 *             .member(storageWriteServiceAccount.email().applyValue(_email -> String.format("serviceAccount:%s", _email)))
 *             .build());
 * 
 *         var exampleSubscription = new Subscription("exampleSubscription", SubscriptionArgs.builder()
 *             .name("example-subscription")
 *             .topic(exampleTopic.id())
 *             .cloudStorageConfig(SubscriptionCloudStorageConfigArgs.builder()
 *                 .bucket(example.name())
 *                 .filenamePrefix("pre-")
 *                 .filenameSuffix("-_50610")
 *                 .filenameDatetimeFormat("YYYY-MM-DD/hh_mm_ssZ")
 *                 .maxBytes(1000)
 *                 .maxDuration("300s")
 *                 .serviceAccountEmail(storageWriteServiceAccount.email())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     storageWriteServiceAccount,
 *                     example,
 *                     admin)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Subscription can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/subscriptions/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Subscription can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:pubsub/subscription:Subscription default projects/{{project}}/subscriptions/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:pubsub/subscription:Subscription default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:pubsub/subscription:Subscription default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:pubsub/subscription:Subscription")
public class Subscription extends com.pulumi.resources.CustomResource {
    /**
     * This value is the maximum time after a subscriber receives a message
     * before the subscriber should acknowledge the message. After message
     * delivery but before the ack deadline expires and before the message is
     * acknowledged, it is an outstanding message and will not be delivered
     * again during that time (on a best-effort basis).
     * For pull subscriptions, this value is used as the initial value for
     * the ack deadline. To override this value for a given message, call
     * subscriptions.modifyAckDeadline with the corresponding ackId if using
     * pull. The minimum custom deadline you can specify is 10 seconds. The
     * maximum custom deadline you can specify is 600 seconds (10 minutes).
     * If this parameter is 0, a default value of 10 seconds is used.
     * For push delivery, this value is also used to set the request timeout
     * for the call to the push endpoint.
     * If the subscriber never acknowledges the message, the Pub/Sub system
     * will eventually redeliver the message.
     * 
     */
    @Export(name="ackDeadlineSeconds", refs={Integer.class}, tree="[0]")
    private Output<Integer> ackDeadlineSeconds;

    /**
     * @return This value is the maximum time after a subscriber receives a message
     * before the subscriber should acknowledge the message. After message
     * delivery but before the ack deadline expires and before the message is
     * acknowledged, it is an outstanding message and will not be delivered
     * again during that time (on a best-effort basis).
     * For pull subscriptions, this value is used as the initial value for
     * the ack deadline. To override this value for a given message, call
     * subscriptions.modifyAckDeadline with the corresponding ackId if using
     * pull. The minimum custom deadline you can specify is 10 seconds. The
     * maximum custom deadline you can specify is 600 seconds (10 minutes).
     * If this parameter is 0, a default value of 10 seconds is used.
     * For push delivery, this value is also used to set the request timeout
     * for the call to the push endpoint.
     * If the subscriber never acknowledges the message, the Pub/Sub system
     * will eventually redeliver the message.
     * 
     */
    public Output<Integer> ackDeadlineSeconds() {
        return this.ackDeadlineSeconds;
    }
    /**
     * If delivery to BigQuery is used with this subscription, this field is used to configure it.
     * Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
     * If all three are empty, then the subscriber will pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    @Export(name="bigqueryConfig", refs={SubscriptionBigqueryConfig.class}, tree="[0]")
    private Output</* @Nullable */ SubscriptionBigqueryConfig> bigqueryConfig;

    /**
     * @return If delivery to BigQuery is used with this subscription, this field is used to configure it.
     * Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
     * If all three are empty, then the subscriber will pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SubscriptionBigqueryConfig>> bigqueryConfig() {
        return Codegen.optional(this.bigqueryConfig);
    }
    /**
     * If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
     * Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
     * If all three are empty, then the subscriber will pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    @Export(name="cloudStorageConfig", refs={SubscriptionCloudStorageConfig.class}, tree="[0]")
    private Output</* @Nullable */ SubscriptionCloudStorageConfig> cloudStorageConfig;

    /**
     * @return If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
     * Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
     * If all three are empty, then the subscriber will pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SubscriptionCloudStorageConfig>> cloudStorageConfig() {
        return Codegen.optional(this.cloudStorageConfig);
    }
    /**
     * A policy that specifies the conditions for dead lettering messages in
     * this subscription. If dead_letter_policy is not set, dead lettering
     * is disabled.
     * The Cloud Pub/Sub service account associated with this subscription&#39;s
     * parent project (i.e.,
     * service-{project_number}{@literal @}gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Acknowledge() messages on this subscription.
     * Structure is documented below.
     * 
     */
    @Export(name="deadLetterPolicy", refs={SubscriptionDeadLetterPolicy.class}, tree="[0]")
    private Output</* @Nullable */ SubscriptionDeadLetterPolicy> deadLetterPolicy;

    /**
     * @return A policy that specifies the conditions for dead lettering messages in
     * this subscription. If dead_letter_policy is not set, dead lettering
     * is disabled.
     * The Cloud Pub/Sub service account associated with this subscription&#39;s
     * parent project (i.e.,
     * service-{project_number}{@literal @}gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Acknowledge() messages on this subscription.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SubscriptionDeadLetterPolicy>> deadLetterPolicy() {
        return Codegen.optional(this.deadLetterPolicy);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * If `true`, Pub/Sub provides the following guarantees for the delivery
     * of a message with a given value of messageId on this Subscriptions&#39;:
     * - The message sent to a subscriber is guaranteed not to be resent before the message&#39;s acknowledgement deadline expires.
     * - An acknowledged message will not be resent to a subscriber.
     *   Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery`
     *   is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
     * 
     */
    @Export(name="enableExactlyOnceDelivery", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableExactlyOnceDelivery;

    /**
     * @return If `true`, Pub/Sub provides the following guarantees for the delivery
     * of a message with a given value of messageId on this Subscriptions&#39;:
     * - The message sent to a subscriber is guaranteed not to be resent before the message&#39;s acknowledgement deadline expires.
     * - An acknowledged message will not be resent to a subscriber.
     *   Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery`
     *   is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
     * 
     */
    public Output<Optional<Boolean>> enableExactlyOnceDelivery() {
        return Codegen.optional(this.enableExactlyOnceDelivery);
    }
    /**
     * If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
     * the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
     * may be delivered in any order.
     * 
     */
    @Export(name="enableMessageOrdering", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableMessageOrdering;

    /**
     * @return If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
     * the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
     * may be delivered in any order.
     * 
     */
    public Output<Optional<Boolean>> enableMessageOrdering() {
        return Codegen.optional(this.enableMessageOrdering);
    }
    /**
     * A policy that specifies the conditions for this subscription&#39;s expiration.
     * A subscription is considered active as long as any connected subscriber
     * is successfully consuming messages from the subscription or is issuing
     * operations on the subscription. If expirationPolicy is not set, a default
     * policy with ttl of 31 days will be used.  If it is set but ttl is &#34;&#34;, the
     * resource never expires.  The minimum allowed value for expirationPolicy.ttl
     * is 1 day.
     * Structure is documented below.
     * 
     */
    @Export(name="expirationPolicy", refs={SubscriptionExpirationPolicy.class}, tree="[0]")
    private Output<SubscriptionExpirationPolicy> expirationPolicy;

    /**
     * @return A policy that specifies the conditions for this subscription&#39;s expiration.
     * A subscription is considered active as long as any connected subscriber
     * is successfully consuming messages from the subscription or is issuing
     * operations on the subscription. If expirationPolicy is not set, a default
     * policy with ttl of 31 days will be used.  If it is set but ttl is &#34;&#34;, the
     * resource never expires.  The minimum allowed value for expirationPolicy.ttl
     * is 1 day.
     * Structure is documented below.
     * 
     */
    public Output<SubscriptionExpirationPolicy> expirationPolicy() {
        return this.expirationPolicy;
    }
    /**
     * The subscription only delivers the messages that match the filter.
     * Pub/Sub automatically acknowledges the messages that don&#39;t match the filter. You can filter messages
     * by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
     * you can&#39;t modify the filter.
     * 
     */
    @Export(name="filter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filter;

    /**
     * @return The subscription only delivers the messages that match the filter.
     * Pub/Sub automatically acknowledges the messages that don&#39;t match the filter. You can filter messages
     * by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
     * you can&#39;t modify the filter.
     * 
     */
    public Output<Optional<String>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * A set of key/value label pairs to assign to this Subscription.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return A set of key/value label pairs to assign to this Subscription.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * How long to retain unacknowledged messages in the subscription&#39;s
     * backlog, from the moment a message is published. If
     * retain_acked_messages is true, then this also configures the retention
     * of acknowledged messages, and thus configures how far back in time a
     * subscriptions.seek can be done. Defaults to 7 days. Cannot be more
     * than 31 days (`&#34;2678400s&#34;`) or less than 10 minutes (`&#34;600s&#34;`).
     * A duration in seconds with up to nine fractional digits, terminated
     * by &#39;s&#39;. Example: `&#34;600.5s&#34;`.
     * 
     */
    @Export(name="messageRetentionDuration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> messageRetentionDuration;

    /**
     * @return How long to retain unacknowledged messages in the subscription&#39;s
     * backlog, from the moment a message is published. If
     * retain_acked_messages is true, then this also configures the retention
     * of acknowledged messages, and thus configures how far back in time a
     * subscriptions.seek can be done. Defaults to 7 days. Cannot be more
     * than 31 days (`&#34;2678400s&#34;`) or less than 10 minutes (`&#34;600s&#34;`).
     * A duration in seconds with up to nine fractional digits, terminated
     * by &#39;s&#39;. Example: `&#34;600.5s&#34;`.
     * 
     */
    public Output<Optional<String>> messageRetentionDuration() {
        return Codegen.optional(this.messageRetentionDuration);
    }
    /**
     * Transforms to be applied to messages published to the topic. Transforms are applied in the
     * order specified.
     * Structure is documented below.
     * 
     */
    @Export(name="messageTransforms", refs={List.class,SubscriptionMessageTransform.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SubscriptionMessageTransform>> messageTransforms;

    /**
     * @return Transforms to be applied to messages published to the topic. Transforms are applied in the
     * order specified.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<SubscriptionMessageTransform>>> messageTransforms() {
        return Codegen.optional(this.messageTransforms);
    }
    /**
     * Name of the subscription.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the subscription.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * If push delivery is used with this subscription, this field is used to
     * configure it. An empty pushConfig signifies that the subscriber will
     * pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    @Export(name="pushConfig", refs={SubscriptionPushConfig.class}, tree="[0]")
    private Output</* @Nullable */ SubscriptionPushConfig> pushConfig;

    /**
     * @return If push delivery is used with this subscription, this field is used to
     * configure it. An empty pushConfig signifies that the subscriber will
     * pull and ack messages using API methods.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SubscriptionPushConfig>> pushConfig() {
        return Codegen.optional(this.pushConfig);
    }
    /**
     * Indicates whether to retain acknowledged messages. If `true`, then
     * messages are not expunged from the subscription&#39;s backlog, even if
     * they are acknowledged, until they fall out of the
     * messageRetentionDuration window.
     * 
     */
    @Export(name="retainAckedMessages", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> retainAckedMessages;

    /**
     * @return Indicates whether to retain acknowledged messages. If `true`, then
     * messages are not expunged from the subscription&#39;s backlog, even if
     * they are acknowledged, until they fall out of the
     * messageRetentionDuration window.
     * 
     */
    public Output<Optional<Boolean>> retainAckedMessages() {
        return Codegen.optional(this.retainAckedMessages);
    }
    /**
     * A policy that specifies how Pub/Sub retries message delivery for this subscription.
     * If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
     * RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
     * Structure is documented below.
     * 
     */
    @Export(name="retryPolicy", refs={SubscriptionRetryPolicy.class}, tree="[0]")
    private Output</* @Nullable */ SubscriptionRetryPolicy> retryPolicy;

    /**
     * @return A policy that specifies how Pub/Sub retries message delivery for this subscription.
     * If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
     * RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
     * Structure is documented below.
     * 
     */
    public Output<Optional<SubscriptionRetryPolicy>> retryPolicy() {
        return Codegen.optional(this.retryPolicy);
    }
    /**
     * A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
     * (as in the id property of a google_pubsub_topic), or just a topic name if
     * the topic is in the same project as the subscription.
     * 
     * ***
     * 
     */
    @Export(name="topic", refs={String.class}, tree="[0]")
    private Output<String> topic;

    /**
     * @return A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
     * (as in the id property of a google_pubsub_topic), or just a topic name if
     * the topic is in the same project as the subscription.
     * 
     * ***
     * 
     */
    public Output<String> topic() {
        return this.topic;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Subscription(java.lang.String name) {
        this(name, SubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Subscription(java.lang.String name, SubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Subscription(java.lang.String name, SubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:pubsub/subscription:Subscription", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Subscription(java.lang.String name, Output<java.lang.String> id, @Nullable SubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:pubsub/subscription:Subscription", name, state, makeResourceOptions(options, id), false);
    }

    private static SubscriptionArgs makeArgs(SubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SubscriptionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Subscription get(java.lang.String name, Output<java.lang.String> id, @Nullable SubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Subscription(name, id, state, options);
    }
}
