// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.projects.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProjectProject {
    /**
     * @return Creation time in RFC3339 UTC &#34;Zulu&#34; format.
     * 
     */
    private String createTime;
    /**
     * @return A set of key/value label pairs assigned on a project.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The Project lifecycle state.
     * 
     */
    private String lifecycleState;
    /**
     * @return The optional user-assigned display name of the project.
     * 
     */
    private String name;
    /**
     * @return The numeric identifier of the project.
     * 
     */
    private String number;
    /**
     * @return An optional reference to a parent resource.
     * 
     */
    private Map<String,String> parent;
    /**
     * @return The project id of the project.
     * 
     */
    private String projectId;

    private GetProjectProject() {}
    /**
     * @return Creation time in RFC3339 UTC &#34;Zulu&#34; format.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return A set of key/value label pairs assigned on a project.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The Project lifecycle state.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return The optional user-assigned display name of the project.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The numeric identifier of the project.
     * 
     */
    public String number() {
        return this.number;
    }
    /**
     * @return An optional reference to a parent resource.
     * 
     */
    public Map<String,String> parent() {
        return this.parent;
    }
    /**
     * @return The project id of the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectProject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private Map<String,String> labels;
        private String lifecycleState;
        private String name;
        private String number;
        private Map<String,String> parent;
        private String projectId;
        public Builder() {}
        public Builder(GetProjectProject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.labels = defaults.labels;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.parent = defaults.parent;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder number(String number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder parent(Map<String,String> parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetProjectProject", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        public GetProjectProject build() {
            final var _resultValue = new GetProjectProject();
            _resultValue.createTime = createTime;
            _resultValue.labels = labels;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.name = name;
            _resultValue.number = number;
            _resultValue.parent = parent;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}
