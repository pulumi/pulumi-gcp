// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataproc.inputs.GdcServiceInstanceGdceClusterArgs;
import com.pulumi.gcp.dataproc.inputs.GdcServiceInstanceSparkServiceInstanceConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GdcServiceInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GdcServiceInstanceArgs Empty = new GdcServiceInstanceArgs();

    /**
     * User-provided human-readable name to be used in user interfaces.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-provided human-readable name to be used in user interfaces.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Gdce cluster information.
     * Structure is documented below.
     * 
     */
    @Import(name="gdceCluster")
    private @Nullable Output<GdcServiceInstanceGdceClusterArgs> gdceCluster;

    /**
     * @return Gdce cluster information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcServiceInstanceGdceClusterArgs>> gdceCluster() {
        return Optional.ofNullable(this.gdceCluster);
    }

    /**
     * The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location of the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Requested service account to associate with ServiceInstance.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Requested service account to associate with ServiceInstance.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Id of the service instance.
     * 
     * ***
     * 
     */
    @Import(name="serviceInstanceId", required=true)
    private Output<String> serviceInstanceId;

    /**
     * @return Id of the service instance.
     * 
     * ***
     * 
     */
    public Output<String> serviceInstanceId() {
        return this.serviceInstanceId;
    }

    /**
     * Spark-specific service instance configuration.
     * 
     */
    @Import(name="sparkServiceInstanceConfig")
    private @Nullable Output<GdcServiceInstanceSparkServiceInstanceConfigArgs> sparkServiceInstanceConfig;

    /**
     * @return Spark-specific service instance configuration.
     * 
     */
    public Optional<Output<GdcServiceInstanceSparkServiceInstanceConfigArgs>> sparkServiceInstanceConfig() {
        return Optional.ofNullable(this.sparkServiceInstanceConfig);
    }

    private GdcServiceInstanceArgs() {}

    private GdcServiceInstanceArgs(GdcServiceInstanceArgs $) {
        this.displayName = $.displayName;
        this.gdceCluster = $.gdceCluster;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.serviceAccount = $.serviceAccount;
        this.serviceInstanceId = $.serviceInstanceId;
        this.sparkServiceInstanceConfig = $.sparkServiceInstanceConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GdcServiceInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GdcServiceInstanceArgs $;

        public Builder() {
            $ = new GdcServiceInstanceArgs();
        }

        public Builder(GdcServiceInstanceArgs defaults) {
            $ = new GdcServiceInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param gdceCluster Gdce cluster information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gdceCluster(@Nullable Output<GdcServiceInstanceGdceClusterArgs> gdceCluster) {
            $.gdceCluster = gdceCluster;
            return this;
        }

        /**
         * @param gdceCluster Gdce cluster information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gdceCluster(GdcServiceInstanceGdceClusterArgs gdceCluster) {
            return gdceCluster(Output.of(gdceCluster));
        }

        /**
         * @param labels The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels to associate with this service instance. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceAccount Requested service account to associate with ServiceInstance.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Requested service account to associate with ServiceInstance.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param serviceInstanceId Id of the service instance.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder serviceInstanceId(Output<String> serviceInstanceId) {
            $.serviceInstanceId = serviceInstanceId;
            return this;
        }

        /**
         * @param serviceInstanceId Id of the service instance.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder serviceInstanceId(String serviceInstanceId) {
            return serviceInstanceId(Output.of(serviceInstanceId));
        }

        /**
         * @param sparkServiceInstanceConfig Spark-specific service instance configuration.
         * 
         * @return builder
         * 
         */
        public Builder sparkServiceInstanceConfig(@Nullable Output<GdcServiceInstanceSparkServiceInstanceConfigArgs> sparkServiceInstanceConfig) {
            $.sparkServiceInstanceConfig = sparkServiceInstanceConfig;
            return this;
        }

        /**
         * @param sparkServiceInstanceConfig Spark-specific service instance configuration.
         * 
         * @return builder
         * 
         */
        public Builder sparkServiceInstanceConfig(GdcServiceInstanceSparkServiceInstanceConfigArgs sparkServiceInstanceConfig) {
            return sparkServiceInstanceConfig(Output.of(sparkServiceInstanceConfig));
        }

        public GdcServiceInstanceArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GdcServiceInstanceArgs", "location");
            }
            if ($.serviceInstanceId == null) {
                throw new MissingRequiredPropertyException("GdcServiceInstanceArgs", "serviceInstanceId");
            }
            return $;
        }
    }

}
