// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit {
    /**
     * @return The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
     * 
     */
    private String gcpServiceAccountEmail;
    /**
     * @return URL for the HTTPS Proxy to be used when communicating with the Git repo
     * 
     */
    private String httpsProxy;
    /**
     * @return The path within the Git repository that represents the top level of the repo to sync
     * 
     */
    private String policyDir;
    /**
     * @return Type of secret configured for access to the Git repo
     * 
     */
    private String secretType;
    /**
     * @return The branch of the repository to sync from. Default: master
     * 
     */
    private String syncBranch;
    /**
     * @return The URL of the Git repository to use as the source of truth
     * 
     */
    private String syncRepo;
    /**
     * @return Git revision (tag or hash) to check out. Default HEAD
     * 
     */
    private String syncRev;
    /**
     * @return Period in seconds between consecutive syncs. Default: 15
     * 
     */
    private String syncWaitSecs;

    private GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit() {}
    /**
     * @return The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
     * 
     */
    public String gcpServiceAccountEmail() {
        return this.gcpServiceAccountEmail;
    }
    /**
     * @return URL for the HTTPS Proxy to be used when communicating with the Git repo
     * 
     */
    public String httpsProxy() {
        return this.httpsProxy;
    }
    /**
     * @return The path within the Git repository that represents the top level of the repo to sync
     * 
     */
    public String policyDir() {
        return this.policyDir;
    }
    /**
     * @return Type of secret configured for access to the Git repo
     * 
     */
    public String secretType() {
        return this.secretType;
    }
    /**
     * @return The branch of the repository to sync from. Default: master
     * 
     */
    public String syncBranch() {
        return this.syncBranch;
    }
    /**
     * @return The URL of the Git repository to use as the source of truth
     * 
     */
    public String syncRepo() {
        return this.syncRepo;
    }
    /**
     * @return Git revision (tag or hash) to check out. Default HEAD
     * 
     */
    public String syncRev() {
        return this.syncRev;
    }
    /**
     * @return Period in seconds between consecutive syncs. Default: 15
     * 
     */
    public String syncWaitSecs() {
        return this.syncWaitSecs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String gcpServiceAccountEmail;
        private String httpsProxy;
        private String policyDir;
        private String secretType;
        private String syncBranch;
        private String syncRepo;
        private String syncRev;
        private String syncWaitSecs;
        public Builder() {}
        public Builder(GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gcpServiceAccountEmail = defaults.gcpServiceAccountEmail;
    	      this.httpsProxy = defaults.httpsProxy;
    	      this.policyDir = defaults.policyDir;
    	      this.secretType = defaults.secretType;
    	      this.syncBranch = defaults.syncBranch;
    	      this.syncRepo = defaults.syncRepo;
    	      this.syncRev = defaults.syncRev;
    	      this.syncWaitSecs = defaults.syncWaitSecs;
        }

        @CustomType.Setter
        public Builder gcpServiceAccountEmail(String gcpServiceAccountEmail) {
            if (gcpServiceAccountEmail == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "gcpServiceAccountEmail");
            }
            this.gcpServiceAccountEmail = gcpServiceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder httpsProxy(String httpsProxy) {
            if (httpsProxy == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "httpsProxy");
            }
            this.httpsProxy = httpsProxy;
            return this;
        }
        @CustomType.Setter
        public Builder policyDir(String policyDir) {
            if (policyDir == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "policyDir");
            }
            this.policyDir = policyDir;
            return this;
        }
        @CustomType.Setter
        public Builder secretType(String secretType) {
            if (secretType == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "secretType");
            }
            this.secretType = secretType;
            return this;
        }
        @CustomType.Setter
        public Builder syncBranch(String syncBranch) {
            if (syncBranch == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "syncBranch");
            }
            this.syncBranch = syncBranch;
            return this;
        }
        @CustomType.Setter
        public Builder syncRepo(String syncRepo) {
            if (syncRepo == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "syncRepo");
            }
            this.syncRepo = syncRepo;
            return this;
        }
        @CustomType.Setter
        public Builder syncRev(String syncRev) {
            if (syncRev == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "syncRev");
            }
            this.syncRev = syncRev;
            return this;
        }
        @CustomType.Setter
        public Builder syncWaitSecs(String syncWaitSecs) {
            if (syncWaitSecs == null) {
              throw new MissingRequiredPropertyException("GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit", "syncWaitSecs");
            }
            this.syncWaitSecs = syncWaitSecs;
            return this;
        }
        public GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit build() {
            final var _resultValue = new GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit();
            _resultValue.gcpServiceAccountEmail = gcpServiceAccountEmail;
            _resultValue.httpsProxy = httpsProxy;
            _resultValue.policyDir = policyDir;
            _resultValue.secretType = secretType;
            _resultValue.syncBranch = syncBranch;
            _resultValue.syncRepo = syncRepo;
            _resultValue.syncRev = syncRev;
            _resultValue.syncWaitSecs = syncWaitSecs;
            return _resultValue;
        }
    }
}
