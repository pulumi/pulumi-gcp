// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileFileArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs Empty = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs();

    /**
     * A a file with this content.
     * The size of the content is limited to 32KiB.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return A a file with this content.
     * The size of the content is limited to 32KiB.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * A remote or local file.
     * Structure is documented below.
     * 
     */
    @Import(name="file")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileFileArgs> file;

    /**
     * @return A remote or local file.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileFileArgs>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * The absolute path of the file within the VM.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The absolute path of the file within the VM.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Consists of three octal digits which represent, in
     * order, the permissions of the owner, group, and other users for the
     * file (similarly to the numeric mode used in the linux chmod
     * utility). Each digit represents a three bit number with the 4 bit
     * corresponding to the read permissions, the 2 bit corresponds to the
     * write bit, and the one bit corresponds to the execute permission.
     * Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7
     * read and execute: 5
     * read and write: 6
     * read only: 4
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<String> permissions;

    /**
     * @return Consists of three octal digits which represent, in
     * order, the permissions of the owner, group, and other users for the
     * file (similarly to the numeric mode used in the linux chmod
     * utility). Each digit represents a three bit number with the 4 bit
     * corresponding to the read permissions, the 2 bit corresponds to the
     * write bit, and the one bit corresponds to the execute permission.
     * Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7
     * read and execute: 5
     * read and write: 6
     * read only: 4
     * 
     */
    public Optional<Output<String>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * Desired state of the file.
     * Possible values are: `PRESENT`, `ABSENT`, `CONTENTS_MATCH`.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return Desired state of the file.
     * Possible values are: `PRESENT`, `ABSENT`, `CONTENTS_MATCH`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs() {}

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs $) {
        this.content = $.content;
        this.file = $.file;
        this.path = $.path;
        this.permissions = $.permissions;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content A a file with this content.
         * The size of the content is limited to 32KiB.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content A a file with this content.
         * The size of the content is limited to 32KiB.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param file A remote or local file.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileFileArgs> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file A remote or local file.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder file(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileFileArgs file) {
            return file(Output.of(file));
        }

        /**
         * @param path The absolute path of the file within the VM.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The absolute path of the file within the VM.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param permissions Consists of three octal digits which represent, in
         * order, the permissions of the owner, group, and other users for the
         * file (similarly to the numeric mode used in the linux chmod
         * utility). Each digit represents a three bit number with the 4 bit
         * corresponding to the read permissions, the 2 bit corresponds to the
         * write bit, and the one bit corresponds to the execute permission.
         * Default behavior is 755.
         * Below are some examples of permissions and their associated values:
         * read, write, and execute: 7
         * read and execute: 5
         * read and write: 6
         * read only: 4
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Consists of three octal digits which represent, in
         * order, the permissions of the owner, group, and other users for the
         * file (similarly to the numeric mode used in the linux chmod
         * utility). Each digit represents a three bit number with the 4 bit
         * corresponding to the read permissions, the 2 bit corresponds to the
         * write bit, and the one bit corresponds to the execute permission.
         * Default behavior is 755.
         * Below are some examples of permissions and their associated values:
         * read, write, and execute: 7
         * read and execute: 5
         * read and write: 6
         * read only: 4
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param state Desired state of the file.
         * Possible values are: `PRESENT`, `ABSENT`, `CONTENTS_MATCH`.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Desired state of the file.
         * Possible values are: `PRESENT`, `ABSENT`, `CONTENTS_MATCH`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs", "path");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourceFileArgs", "state");
            }
            return $;
        }
    }

}
