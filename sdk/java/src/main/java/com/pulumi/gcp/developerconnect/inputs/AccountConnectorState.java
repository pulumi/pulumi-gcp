// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountConnectorState extends com.pulumi.resources.ResourceArgs {

    public static final AccountConnectorState Empty = new AccountConnectorState();

    /**
     * Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector&#39;s resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     * 
     * ***
     * 
     */
    @Import(name="accountConnectorId")
    private @Nullable Output<String> accountConnectorId;

    /**
     * @return Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector&#39;s resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> accountConnectorId() {
        return Optional.ofNullable(this.accountConnectorId);
    }

    /**
     * Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Output only. The timestamp when the userConnection was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The timestamp when the userConnection was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of the userConnection, in the format
     * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of the userConnection, in the format
     * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Output only. Start OAuth flow by clicking on this URL.
     * 
     */
    @Import(name="oauthStartUri")
    private @Nullable Output<String> oauthStartUri;

    /**
     * @return Output only. Start OAuth flow by clicking on this URL.
     * 
     */
    public Optional<Output<String>> oauthStartUri() {
        return Optional.ofNullable(this.oauthStartUri);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     * 
     */
    @Import(name="providerOauthConfig")
    private @Nullable Output<AccountConnectorProviderOauthConfigArgs> providerOauthConfig;

    /**
     * @return ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AccountConnectorProviderOauthConfigArgs>> providerOauthConfig() {
        return Optional.ofNullable(this.providerOauthConfig);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Output only. The timestamp when the userConnection was updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The timestamp when the userConnection was updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AccountConnectorState() {}

    private AccountConnectorState(AccountConnectorState $) {
        this.accountConnectorId = $.accountConnectorId;
        this.annotations = $.annotations;
        this.createTime = $.createTime;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.oauthStartUri = $.oauthStartUri;
        this.project = $.project;
        this.providerOauthConfig = $.providerOauthConfig;
        this.pulumiLabels = $.pulumiLabels;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountConnectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountConnectorState $;

        public Builder() {
            $ = new AccountConnectorState();
        }

        public Builder(AccountConnectorState defaults) {
            $ = new AccountConnectorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountConnectorId Required. The ID to use for the AccountConnector, which will become the final
         * component of the AccountConnector&#39;s resource name. Its format should adhere
         * to https://google.aip.dev/122#resource-id-segments Names must be unique
         * per-project per-location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder accountConnectorId(@Nullable Output<String> accountConnectorId) {
            $.accountConnectorId = accountConnectorId;
            return this;
        }

        /**
         * @param accountConnectorId Required. The ID to use for the AccountConnector, which will become the final
         * component of the AccountConnector&#39;s resource name. Its format should adhere
         * to https://google.aip.dev/122#resource-id-segments Names must be unique
         * per-project per-location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder accountConnectorId(String accountConnectorId) {
            return accountConnectorId(Output.of(accountConnectorId));
        }

        /**
         * @param annotations Optional. Allows users to store small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. Allows users to store small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param createTime Output only. The timestamp when the userConnection was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The timestamp when the userConnection was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of the userConnection, in the format
         * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of the userConnection, in the format
         * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oauthStartUri Output only. Start OAuth flow by clicking on this URL.
         * 
         * @return builder
         * 
         */
        public Builder oauthStartUri(@Nullable Output<String> oauthStartUri) {
            $.oauthStartUri = oauthStartUri;
            return this;
        }

        /**
         * @param oauthStartUri Output only. Start OAuth flow by clicking on this URL.
         * 
         * @return builder
         * 
         */
        public Builder oauthStartUri(String oauthStartUri) {
            return oauthStartUri(Output.of(oauthStartUri));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param providerOauthConfig ProviderOAuthConfig is the OAuth config for a provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerOauthConfig(@Nullable Output<AccountConnectorProviderOauthConfigArgs> providerOauthConfig) {
            $.providerOauthConfig = providerOauthConfig;
            return this;
        }

        /**
         * @param providerOauthConfig ProviderOAuthConfig is the OAuth config for a provider.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerOauthConfig(AccountConnectorProviderOauthConfigArgs providerOauthConfig) {
            return providerOauthConfig(Output.of(providerOauthConfig));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param updateTime Output only. The timestamp when the userConnection was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The timestamp when the userConnection was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AccountConnectorState build() {
            return $;
        }
    }

}
