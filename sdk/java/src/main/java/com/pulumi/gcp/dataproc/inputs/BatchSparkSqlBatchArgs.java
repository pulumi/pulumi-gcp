// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BatchSparkSqlBatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final BatchSparkSqlBatchArgs Empty = new BatchSparkSqlBatchArgs();

    /**
     * HCFS URIs of jar files to be added to the Spark CLASSPATH.
     * 
     */
    @Import(name="jarFileUris")
    private @Nullable Output<List<String>> jarFileUris;

    /**
     * @return HCFS URIs of jar files to be added to the Spark CLASSPATH.
     * 
     */
    public Optional<Output<List<String>>> jarFileUris() {
        return Optional.ofNullable(this.jarFileUris);
    }

    /**
     * The HCFS URI of the script that contains Spark SQL queries to execute.
     * 
     */
    @Import(name="queryFileUri")
    private @Nullable Output<String> queryFileUri;

    /**
     * @return The HCFS URI of the script that contains Spark SQL queries to execute.
     * 
     */
    public Optional<Output<String>> queryFileUri() {
        return Optional.ofNullable(this.queryFileUri);
    }

    /**
     * Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=&#34;value&#34;;).
     * 
     */
    @Import(name="queryVariables")
    private @Nullable Output<Map<String,String>> queryVariables;

    /**
     * @return Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=&#34;value&#34;;).
     * 
     */
    public Optional<Output<Map<String,String>>> queryVariables() {
        return Optional.ofNullable(this.queryVariables);
    }

    private BatchSparkSqlBatchArgs() {}

    private BatchSparkSqlBatchArgs(BatchSparkSqlBatchArgs $) {
        this.jarFileUris = $.jarFileUris;
        this.queryFileUri = $.queryFileUri;
        this.queryVariables = $.queryVariables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchSparkSqlBatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchSparkSqlBatchArgs $;

        public Builder() {
            $ = new BatchSparkSqlBatchArgs();
        }

        public Builder(BatchSparkSqlBatchArgs defaults) {
            $ = new BatchSparkSqlBatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jarFileUris HCFS URIs of jar files to be added to the Spark CLASSPATH.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(@Nullable Output<List<String>> jarFileUris) {
            $.jarFileUris = jarFileUris;
            return this;
        }

        /**
         * @param jarFileUris HCFS URIs of jar files to be added to the Spark CLASSPATH.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(List<String> jarFileUris) {
            return jarFileUris(Output.of(jarFileUris));
        }

        /**
         * @param jarFileUris HCFS URIs of jar files to be added to the Spark CLASSPATH.
         * 
         * @return builder
         * 
         */
        public Builder jarFileUris(String... jarFileUris) {
            return jarFileUris(List.of(jarFileUris));
        }

        /**
         * @param queryFileUri The HCFS URI of the script that contains Spark SQL queries to execute.
         * 
         * @return builder
         * 
         */
        public Builder queryFileUri(@Nullable Output<String> queryFileUri) {
            $.queryFileUri = queryFileUri;
            return this;
        }

        /**
         * @param queryFileUri The HCFS URI of the script that contains Spark SQL queries to execute.
         * 
         * @return builder
         * 
         */
        public Builder queryFileUri(String queryFileUri) {
            return queryFileUri(Output.of(queryFileUri));
        }

        /**
         * @param queryVariables Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=&#34;value&#34;;).
         * 
         * @return builder
         * 
         */
        public Builder queryVariables(@Nullable Output<Map<String,String>> queryVariables) {
            $.queryVariables = queryVariables;
            return this;
        }

        /**
         * @param queryVariables Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=&#34;value&#34;;).
         * 
         * @return builder
         * 
         */
        public Builder queryVariables(Map<String,String> queryVariables) {
            return queryVariables(Output.of(queryVariables));
        }

        public BatchSparkSqlBatchArgs build() {
            return $;
        }
    }

}
