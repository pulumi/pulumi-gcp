// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.InstanceBootDiskInitializeParams;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceBootDisk {
    /**
     * @return Whether the disk will be auto-deleted when the instance
     * is deleted. Defaults to true.
     * 
     */
    private @Nullable Boolean autoDelete;
    /**
     * @return Name with which attached disk will be accessible.
     * On the instance, this device will be `/dev/disk/by-id/google-{{device_name}}`.
     * 
     */
    private @Nullable String deviceName;
    /**
     * @return A 256-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
     * encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * to encrypt this disk. Only one of `kmsKeySelfLink`, `diskEncryptionKeyRsa` and `diskEncryptionKeyRaw`
     * may be set.
     * 
     */
    private @Nullable String diskEncryptionKeyRaw;
    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) to encrypt this disk. Only one of `kmsKeySelfLink`, `diskEncryptionKeyRsa` and `diskEncryptionKeyRaw`
     * 
     */
    private @Nullable String diskEncryptionKeyRsa;
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) that protects this resource.
     * 
     */
    private @Nullable String diskEncryptionKeySha256;
    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
     * 
     */
    private @Nullable String diskEncryptionServiceAccount;
    /**
     * @return boolean field that determines whether to force attach the regional
     * disk even if it&#39;s currently attached to another instance. If you try to force attach a zonal
     * disk to an instance, you will receive an error. Setting this parameter cause VM recreation.
     * 
     */
    private @Nullable Boolean forceAttach;
    /**
     * @return A list of features to enable on the guest operating system. Applicable only for bootable images. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
     * 
     */
    private @Nullable List<String> guestOsFeatures;
    /**
     * @return Parameters for a new disk that will be created
     * alongside the new instance. Either `initializeParams` or `source` must be set.
     * Structure is documented below.
     * 
     */
    private @Nullable InstanceBootDiskInitializeParams initializeParams;
    /**
     * @return The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with attachedDisk and only used for specific cases, please don&#39;t specify this field without advice from Google.)
     * 
     */
    private @Nullable String interface_;
    /**
     * @return The selfLink of the encryption key that is
     * stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`,
     * `diskEncryptionKeyRsa` and `diskEncryptionKeyRaw`
     * may be set.
     * 
     */
    private @Nullable String kmsKeySelfLink;
    /**
     * @return The mode in which to attach this disk, either `READ_WRITE`
     * or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode.
     * 
     */
    private @Nullable String mode;
    /**
     * @return The name or selfLink of the existing disk (such as those managed by
     * `gcp.compute.Disk`) or disk image. To create an instance from a snapshot, first create a
     * `gcp.compute.Disk` from a snapshot and reference it here.
     * 
     */
    private @Nullable String source;

    private InstanceBootDisk() {}
    /**
     * @return Whether the disk will be auto-deleted when the instance
     * is deleted. Defaults to true.
     * 
     */
    public Optional<Boolean> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }
    /**
     * @return Name with which attached disk will be accessible.
     * On the instance, this device will be `/dev/disk/by-id/google-{{device_name}}`.
     * 
     */
    public Optional<String> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }
    /**
     * @return A 256-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
     * encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * to encrypt this disk. Only one of `kmsKeySelfLink`, `diskEncryptionKeyRsa` and `diskEncryptionKeyRaw`
     * may be set.
     * 
     */
    public Optional<String> diskEncryptionKeyRaw() {
        return Optional.ofNullable(this.diskEncryptionKeyRaw);
    }
    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) to encrypt this disk. Only one of `kmsKeySelfLink`, `diskEncryptionKeyRsa` and `diskEncryptionKeyRaw`
     * 
     */
    public Optional<String> diskEncryptionKeyRsa() {
        return Optional.ofNullable(this.diskEncryptionKeyRsa);
    }
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) that protects this resource.
     * 
     */
    public Optional<String> diskEncryptionKeySha256() {
        return Optional.ofNullable(this.diskEncryptionKeySha256);
    }
    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
     * 
     */
    public Optional<String> diskEncryptionServiceAccount() {
        return Optional.ofNullable(this.diskEncryptionServiceAccount);
    }
    /**
     * @return boolean field that determines whether to force attach the regional
     * disk even if it&#39;s currently attached to another instance. If you try to force attach a zonal
     * disk to an instance, you will receive an error. Setting this parameter cause VM recreation.
     * 
     */
    public Optional<Boolean> forceAttach() {
        return Optional.ofNullable(this.forceAttach);
    }
    /**
     * @return A list of features to enable on the guest operating system. Applicable only for bootable images. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options.
     * 
     */
    public List<String> guestOsFeatures() {
        return this.guestOsFeatures == null ? List.of() : this.guestOsFeatures;
    }
    /**
     * @return Parameters for a new disk that will be created
     * alongside the new instance. Either `initializeParams` or `source` must be set.
     * Structure is documented below.
     * 
     */
    public Optional<InstanceBootDiskInitializeParams> initializeParams() {
        return Optional.ofNullable(this.initializeParams);
    }
    /**
     * @return The disk interface used for attaching this disk. One of SCSI or NVME. (This field is shared with attachedDisk and only used for specific cases, please don&#39;t specify this field without advice from Google.)
     * 
     */
    public Optional<String> interface_() {
        return Optional.ofNullable(this.interface_);
    }
    /**
     * @return The selfLink of the encryption key that is
     * stored in Google Cloud KMS to encrypt this disk. Only one of `kmsKeySelfLink`,
     * `diskEncryptionKeyRsa` and `diskEncryptionKeyRaw`
     * may be set.
     * 
     */
    public Optional<String> kmsKeySelfLink() {
        return Optional.ofNullable(this.kmsKeySelfLink);
    }
    /**
     * @return The mode in which to attach this disk, either `READ_WRITE`
     * or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The name or selfLink of the existing disk (such as those managed by
     * `gcp.compute.Disk`) or disk image. To create an instance from a snapshot, first create a
     * `gcp.compute.Disk` from a snapshot and reference it here.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceBootDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoDelete;
        private @Nullable String deviceName;
        private @Nullable String diskEncryptionKeyRaw;
        private @Nullable String diskEncryptionKeyRsa;
        private @Nullable String diskEncryptionKeySha256;
        private @Nullable String diskEncryptionServiceAccount;
        private @Nullable Boolean forceAttach;
        private @Nullable List<String> guestOsFeatures;
        private @Nullable InstanceBootDiskInitializeParams initializeParams;
        private @Nullable String interface_;
        private @Nullable String kmsKeySelfLink;
        private @Nullable String mode;
        private @Nullable String source;
        public Builder() {}
        public Builder(InstanceBootDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDelete = defaults.autoDelete;
    	      this.deviceName = defaults.deviceName;
    	      this.diskEncryptionKeyRaw = defaults.diskEncryptionKeyRaw;
    	      this.diskEncryptionKeyRsa = defaults.diskEncryptionKeyRsa;
    	      this.diskEncryptionKeySha256 = defaults.diskEncryptionKeySha256;
    	      this.diskEncryptionServiceAccount = defaults.diskEncryptionServiceAccount;
    	      this.forceAttach = defaults.forceAttach;
    	      this.guestOsFeatures = defaults.guestOsFeatures;
    	      this.initializeParams = defaults.initializeParams;
    	      this.interface_ = defaults.interface_;
    	      this.kmsKeySelfLink = defaults.kmsKeySelfLink;
    	      this.mode = defaults.mode;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder autoDelete(@Nullable Boolean autoDelete) {

            this.autoDelete = autoDelete;
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(@Nullable String deviceName) {

            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeyRaw(@Nullable String diskEncryptionKeyRaw) {

            this.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeyRsa(@Nullable String diskEncryptionKeyRsa) {

            this.diskEncryptionKeyRsa = diskEncryptionKeyRsa;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeySha256(@Nullable String diskEncryptionKeySha256) {

            this.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionServiceAccount(@Nullable String diskEncryptionServiceAccount) {

            this.diskEncryptionServiceAccount = diskEncryptionServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder forceAttach(@Nullable Boolean forceAttach) {

            this.forceAttach = forceAttach;
            return this;
        }
        @CustomType.Setter
        public Builder guestOsFeatures(@Nullable List<String> guestOsFeatures) {

            this.guestOsFeatures = guestOsFeatures;
            return this;
        }
        public Builder guestOsFeatures(String... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }
        @CustomType.Setter
        public Builder initializeParams(@Nullable InstanceBootDiskInitializeParams initializeParams) {

            this.initializeParams = initializeParams;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(@Nullable String interface_) {

            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeySelfLink(@Nullable String kmsKeySelfLink) {

            this.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {

            this.source = source;
            return this;
        }
        public InstanceBootDisk build() {
            final var _resultValue = new InstanceBootDisk();
            _resultValue.autoDelete = autoDelete;
            _resultValue.deviceName = deviceName;
            _resultValue.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            _resultValue.diskEncryptionKeyRsa = diskEncryptionKeyRsa;
            _resultValue.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            _resultValue.diskEncryptionServiceAccount = diskEncryptionServiceAccount;
            _resultValue.forceAttach = forceAttach;
            _resultValue.guestOsFeatures = guestOsFeatures;
            _resultValue.initializeParams = initializeParams;
            _resultValue.interface_ = interface_;
            _resultValue.kmsKeySelfLink = kmsKeySelfLink;
            _resultValue.mode = mode;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
