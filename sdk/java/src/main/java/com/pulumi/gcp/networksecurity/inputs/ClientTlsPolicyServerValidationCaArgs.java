// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networksecurity.inputs.ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs;
import com.pulumi.gcp.networksecurity.inputs.ClientTlsPolicyServerValidationCaGrpcEndpointArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientTlsPolicyServerValidationCaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientTlsPolicyServerValidationCaArgs Empty = new ClientTlsPolicyServerValidationCaArgs();

    /**
     * The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
     * Structure is documented below.
     * 
     */
    @Import(name="certificateProviderInstance")
    private @Nullable Output<ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs> certificateProviderInstance;

    /**
     * @return The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs>> certificateProviderInstance() {
        return Optional.ofNullable(this.certificateProviderInstance);
    }

    /**
     * gRPC specific configuration to access the gRPC server to obtain the cert and private key.
     * Structure is documented below.
     * 
     */
    @Import(name="grpcEndpoint")
    private @Nullable Output<ClientTlsPolicyServerValidationCaGrpcEndpointArgs> grpcEndpoint;

    /**
     * @return gRPC specific configuration to access the gRPC server to obtain the cert and private key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClientTlsPolicyServerValidationCaGrpcEndpointArgs>> grpcEndpoint() {
        return Optional.ofNullable(this.grpcEndpoint);
    }

    private ClientTlsPolicyServerValidationCaArgs() {}

    private ClientTlsPolicyServerValidationCaArgs(ClientTlsPolicyServerValidationCaArgs $) {
        this.certificateProviderInstance = $.certificateProviderInstance;
        this.grpcEndpoint = $.grpcEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientTlsPolicyServerValidationCaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientTlsPolicyServerValidationCaArgs $;

        public Builder() {
            $ = new ClientTlsPolicyServerValidationCaArgs();
        }

        public Builder(ClientTlsPolicyServerValidationCaArgs defaults) {
            $ = new ClientTlsPolicyServerValidationCaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateProviderInstance The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certificateProviderInstance(@Nullable Output<ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs> certificateProviderInstance) {
            $.certificateProviderInstance = certificateProviderInstance;
            return this;
        }

        /**
         * @param certificateProviderInstance The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder certificateProviderInstance(ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs certificateProviderInstance) {
            return certificateProviderInstance(Output.of(certificateProviderInstance));
        }

        /**
         * @param grpcEndpoint gRPC specific configuration to access the gRPC server to obtain the cert and private key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder grpcEndpoint(@Nullable Output<ClientTlsPolicyServerValidationCaGrpcEndpointArgs> grpcEndpoint) {
            $.grpcEndpoint = grpcEndpoint;
            return this;
        }

        /**
         * @param grpcEndpoint gRPC specific configuration to access the gRPC server to obtain the cert and private key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder grpcEndpoint(ClientTlsPolicyServerValidationCaGrpcEndpointArgs grpcEndpoint) {
            return grpcEndpoint(Output.of(grpcEndpoint));
        }

        public ClientTlsPolicyServerValidationCaArgs build() {
            return $;
        }
    }

}
