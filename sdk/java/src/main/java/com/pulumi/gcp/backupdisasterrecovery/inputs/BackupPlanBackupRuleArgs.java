// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.inputs.BackupPlanBackupRuleStandardScheduleArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class BackupPlanBackupRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPlanBackupRuleArgs Empty = new BackupPlanBackupRuleArgs();

    /**
     * Configures the duration for which backup data will be kept. The value should be greater than or equal to minimum enforced retention of the backup vault.
     * 
     */
    @Import(name="backupRetentionDays", required=true)
    private Output<Integer> backupRetentionDays;

    /**
     * @return Configures the duration for which backup data will be kept. The value should be greater than or equal to minimum enforced retention of the backup vault.
     * 
     */
    public Output<Integer> backupRetentionDays() {
        return this.backupRetentionDays;
    }

    /**
     * The unique ID of this `BackupRule`. The `rule_id` is unique per `BackupPlan`.
     * 
     */
    @Import(name="ruleId", required=true)
    private Output<String> ruleId;

    /**
     * @return The unique ID of this `BackupRule`. The `rule_id` is unique per `BackupPlan`.
     * 
     */
    public Output<String> ruleId() {
        return this.ruleId;
    }

    /**
     * StandardSchedule defines a schedule that runs within the confines of a defined window of days.
     * Structure is documented below.
     * 
     */
    @Import(name="standardSchedule", required=true)
    private Output<BackupPlanBackupRuleStandardScheduleArgs> standardSchedule;

    /**
     * @return StandardSchedule defines a schedule that runs within the confines of a defined window of days.
     * Structure is documented below.
     * 
     */
    public Output<BackupPlanBackupRuleStandardScheduleArgs> standardSchedule() {
        return this.standardSchedule;
    }

    private BackupPlanBackupRuleArgs() {}

    private BackupPlanBackupRuleArgs(BackupPlanBackupRuleArgs $) {
        this.backupRetentionDays = $.backupRetentionDays;
        this.ruleId = $.ruleId;
        this.standardSchedule = $.standardSchedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanBackupRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanBackupRuleArgs $;

        public Builder() {
            $ = new BackupPlanBackupRuleArgs();
        }

        public Builder(BackupPlanBackupRuleArgs defaults) {
            $ = new BackupPlanBackupRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupRetentionDays Configures the duration for which backup data will be kept. The value should be greater than or equal to minimum enforced retention of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionDays(Output<Integer> backupRetentionDays) {
            $.backupRetentionDays = backupRetentionDays;
            return this;
        }

        /**
         * @param backupRetentionDays Configures the duration for which backup data will be kept. The value should be greater than or equal to minimum enforced retention of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionDays(Integer backupRetentionDays) {
            return backupRetentionDays(Output.of(backupRetentionDays));
        }

        /**
         * @param ruleId The unique ID of this `BackupRule`. The `rule_id` is unique per `BackupPlan`.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId The unique ID of this `BackupRule`. The `rule_id` is unique per `BackupPlan`.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param standardSchedule StandardSchedule defines a schedule that runs within the confines of a defined window of days.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder standardSchedule(Output<BackupPlanBackupRuleStandardScheduleArgs> standardSchedule) {
            $.standardSchedule = standardSchedule;
            return this;
        }

        /**
         * @param standardSchedule StandardSchedule defines a schedule that runs within the confines of a defined window of days.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder standardSchedule(BackupPlanBackupRuleStandardScheduleArgs standardSchedule) {
            return standardSchedule(Output.of(standardSchedule));
        }

        public BackupPlanBackupRuleArgs build() {
            if ($.backupRetentionDays == null) {
                throw new MissingRequiredPropertyException("BackupPlanBackupRuleArgs", "backupRetentionDays");
            }
            if ($.ruleId == null) {
                throw new MissingRequiredPropertyException("BackupPlanBackupRuleArgs", "ruleId");
            }
            if ($.standardSchedule == null) {
                throw new MissingRequiredPropertyException("BackupPlanBackupRuleArgs", "standardSchedule");
            }
            return $;
        }
    }

}
