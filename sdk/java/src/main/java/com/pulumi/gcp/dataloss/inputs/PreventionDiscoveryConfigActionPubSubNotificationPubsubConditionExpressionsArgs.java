// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs Empty = new PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs();

    /**
     * Conditions to apply to the expression
     * Structure is documented below.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsConditionArgs>> conditions;

    /**
     * @return Conditions to apply to the expression
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The operator to apply to the collection of conditions
     * Possible values are: `OR`, `AND`.
     * 
     */
    @Import(name="logicalOperator")
    private @Nullable Output<String> logicalOperator;

    /**
     * @return The operator to apply to the collection of conditions
     * Possible values are: `OR`, `AND`.
     * 
     */
    public Optional<Output<String>> logicalOperator() {
        return Optional.ofNullable(this.logicalOperator);
    }

    private PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs() {}

    private PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs(PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs $) {
        this.conditions = $.conditions;
        this.logicalOperator = $.logicalOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs();
        }

        public Builder(PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs defaults) {
            $ = new PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions Conditions to apply to the expression
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions to apply to the expression
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Conditions to apply to the expression
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param logicalOperator The operator to apply to the collection of conditions
         * Possible values are: `OR`, `AND`.
         * 
         * @return builder
         * 
         */
        public Builder logicalOperator(@Nullable Output<String> logicalOperator) {
            $.logicalOperator = logicalOperator;
            return this;
        }

        /**
         * @param logicalOperator The operator to apply to the collection of conditions
         * Possible values are: `OR`, `AND`.
         * 
         * @return builder
         * 
         */
        public Builder logicalOperator(String logicalOperator) {
            return logicalOperator(Output.of(logicalOperator));
        }

        public PreventionDiscoveryConfigActionPubSubNotificationPubsubConditionExpressionsArgs build() {
            return $;
        }
    }

}
