// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.GetSnapshotSnapshotEncryptionKey;
import com.pulumi.gcp.compute.outputs.GetSnapshotSourceDiskEncryptionKey;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSnapshotResult {
    private String chainName;
    private String creationTimestamp;
    private String description;
    private Integer diskSizeGb;
    private @Nullable String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String labelFingerprint;
    private Map<String,String> labels;
    private List<String> licenses;
    private @Nullable Boolean mostRecent;
    private @Nullable String name;
    private @Nullable String project;
    private String selfLink;
    private List<GetSnapshotSnapshotEncryptionKey> snapshotEncryptionKeys;
    private Integer snapshotId;
    private String sourceDisk;
    private List<GetSnapshotSourceDiskEncryptionKey> sourceDiskEncryptionKeys;
    private Integer storageBytes;
    private List<String> storageLocations;
    private String zone;

    private GetSnapshotResult() {}
    public String chainName() {
        return this.chainName;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public List<String> licenses() {
        return this.licenses;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<GetSnapshotSnapshotEncryptionKey> snapshotEncryptionKeys() {
        return this.snapshotEncryptionKeys;
    }
    public Integer snapshotId() {
        return this.snapshotId;
    }
    public String sourceDisk() {
        return this.sourceDisk;
    }
    public List<GetSnapshotSourceDiskEncryptionKey> sourceDiskEncryptionKeys() {
        return this.sourceDiskEncryptionKeys;
    }
    public Integer storageBytes() {
        return this.storageBytes;
    }
    public List<String> storageLocations() {
        return this.storageLocations;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chainName;
        private String creationTimestamp;
        private String description;
        private Integer diskSizeGb;
        private @Nullable String filter;
        private String id;
        private String labelFingerprint;
        private Map<String,String> labels;
        private List<String> licenses;
        private @Nullable Boolean mostRecent;
        private @Nullable String name;
        private @Nullable String project;
        private String selfLink;
        private List<GetSnapshotSnapshotEncryptionKey> snapshotEncryptionKeys;
        private Integer snapshotId;
        private String sourceDisk;
        private List<GetSnapshotSourceDiskEncryptionKey> sourceDiskEncryptionKeys;
        private Integer storageBytes;
        private List<String> storageLocations;
        private String zone;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chainName = defaults.chainName;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.licenses = defaults.licenses;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.snapshotEncryptionKeys = defaults.snapshotEncryptionKeys;
    	      this.snapshotId = defaults.snapshotId;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskEncryptionKeys = defaults.sourceDiskEncryptionKeys;
    	      this.storageBytes = defaults.storageBytes;
    	      this.storageLocations = defaults.storageLocations;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder chainName(String chainName) {
            this.chainName = Objects.requireNonNull(chainName);
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labelFingerprint(String labelFingerprint) {
            this.labelFingerprint = Objects.requireNonNull(labelFingerprint);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder licenses(List<String> licenses) {
            this.licenses = Objects.requireNonNull(licenses);
            return this;
        }
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotEncryptionKeys(List<GetSnapshotSnapshotEncryptionKey> snapshotEncryptionKeys) {
            this.snapshotEncryptionKeys = Objects.requireNonNull(snapshotEncryptionKeys);
            return this;
        }
        public Builder snapshotEncryptionKeys(GetSnapshotSnapshotEncryptionKey... snapshotEncryptionKeys) {
            return snapshotEncryptionKeys(List.of(snapshotEncryptionKeys));
        }
        @CustomType.Setter
        public Builder snapshotId(Integer snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDisk(String sourceDisk) {
            this.sourceDisk = Objects.requireNonNull(sourceDisk);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskEncryptionKeys(List<GetSnapshotSourceDiskEncryptionKey> sourceDiskEncryptionKeys) {
            this.sourceDiskEncryptionKeys = Objects.requireNonNull(sourceDiskEncryptionKeys);
            return this;
        }
        public Builder sourceDiskEncryptionKeys(GetSnapshotSourceDiskEncryptionKey... sourceDiskEncryptionKeys) {
            return sourceDiskEncryptionKeys(List.of(sourceDiskEncryptionKeys));
        }
        @CustomType.Setter
        public Builder storageBytes(Integer storageBytes) {
            this.storageBytes = Objects.requireNonNull(storageBytes);
            return this;
        }
        @CustomType.Setter
        public Builder storageLocations(List<String> storageLocations) {
            this.storageLocations = Objects.requireNonNull(storageLocations);
            return this;
        }
        public Builder storageLocations(String... storageLocations) {
            return storageLocations(List.of(storageLocations));
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public GetSnapshotResult build() {
            final var o = new GetSnapshotResult();
            o.chainName = chainName;
            o.creationTimestamp = creationTimestamp;
            o.description = description;
            o.diskSizeGb = diskSizeGb;
            o.filter = filter;
            o.id = id;
            o.labelFingerprint = labelFingerprint;
            o.labels = labels;
            o.licenses = licenses;
            o.mostRecent = mostRecent;
            o.name = name;
            o.project = project;
            o.selfLink = selfLink;
            o.snapshotEncryptionKeys = snapshotEncryptionKeys;
            o.snapshotId = snapshotId;
            o.sourceDisk = sourceDisk;
            o.sourceDiskEncryptionKeys = sourceDiskEncryptionKeys;
            o.storageBytes = storageBytes;
            o.storageLocations = storageLocations;
            o.zone = zone;
            return o;
        }
    }
}
