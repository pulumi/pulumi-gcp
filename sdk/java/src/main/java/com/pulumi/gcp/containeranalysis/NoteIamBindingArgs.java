// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.containeranalysis.inputs.NoteIamBindingConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NoteIamBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final NoteIamBindingArgs Empty = new NoteIamBindingArgs();

    @Import(name="condition")
    private @Nullable Output<NoteIamBindingConditionArgs> condition;

    public Optional<Output<NoteIamBindingConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="members", required=true)
    private Output<List<String>> members;

    public Output<List<String>> members() {
        return this.members;
    }

    @Import(name="note", required=true)
    private Output<String> note;

    public Output<String> note() {
        return this.note;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    private NoteIamBindingArgs() {}

    private NoteIamBindingArgs(NoteIamBindingArgs $) {
        this.condition = $.condition;
        this.members = $.members;
        this.note = $.note;
        this.project = $.project;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NoteIamBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NoteIamBindingArgs $;

        public Builder() {
            $ = new NoteIamBindingArgs();
        }

        public Builder(NoteIamBindingArgs defaults) {
            $ = new NoteIamBindingArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<NoteIamBindingConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(NoteIamBindingConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder members(Output<List<String>> members) {
            $.members = members;
            return this;
        }

        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        public Builder members(String... members) {
            return members(List.of(members));
        }

        public Builder note(Output<String> note) {
            $.note = note;
            return this;
        }

        public Builder note(String note) {
            return note(Output.of(note));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public NoteIamBindingArgs build() {
            $.members = Objects.requireNonNull($.members, "expected parameter 'members' to be non-null");
            $.note = Objects.requireNonNull($.note, "expected parameter 'note' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
