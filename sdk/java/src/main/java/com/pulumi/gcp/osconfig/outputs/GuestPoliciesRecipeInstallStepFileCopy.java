// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GuestPoliciesRecipeInstallStepFileCopy {
    /**
     * @return The id of the relevant artifact in the recipe.
     * 
     */
    private String artifactId;
    /**
     * @return The absolute path on the instance to put the file.
     * 
     */
    private String destination;
    /**
     * @return Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
     * is not overwritten and the step is considered a success. Defaults to false.
     * 
     */
    private @Nullable Boolean overwrite;
    /**
     * @return Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
     * for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
     * number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
     * bit corresponds to the execute permission. Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     * 
     */
    private @Nullable String permissions;

    private GuestPoliciesRecipeInstallStepFileCopy() {}
    /**
     * @return The id of the relevant artifact in the recipe.
     * 
     */
    public String artifactId() {
        return this.artifactId;
    }
    /**
     * @return The absolute path on the instance to put the file.
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Whether to allow this step to overwrite existing files.If this is false and the file already exists the file
     * is not overwritten and the step is considered a success. Defaults to false.
     * 
     */
    public Optional<Boolean> overwrite() {
        return Optional.ofNullable(this.overwrite);
    }
    /**
     * @return Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users
     * for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit
     * number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one
     * bit corresponds to the execute permission. Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     * 
     */
    public Optional<String> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GuestPoliciesRecipeInstallStepFileCopy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactId;
        private String destination;
        private @Nullable Boolean overwrite;
        private @Nullable String permissions;
        public Builder() {}
        public Builder(GuestPoliciesRecipeInstallStepFileCopy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactId = defaults.artifactId;
    	      this.destination = defaults.destination;
    	      this.overwrite = defaults.overwrite;
    	      this.permissions = defaults.permissions;
        }

        @CustomType.Setter
        public Builder artifactId(String artifactId) {
            this.artifactId = Objects.requireNonNull(artifactId);
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        @CustomType.Setter
        public Builder overwrite(@Nullable Boolean overwrite) {
            this.overwrite = overwrite;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(@Nullable String permissions) {
            this.permissions = permissions;
            return this;
        }
        public GuestPoliciesRecipeInstallStepFileCopy build() {
            final var o = new GuestPoliciesRecipeInstallStepFileCopy();
            o.artifactId = artifactId;
            o.destination = destination;
            o.overwrite = overwrite;
            o.permissions = permissions;
            return o;
        }
    }
}
