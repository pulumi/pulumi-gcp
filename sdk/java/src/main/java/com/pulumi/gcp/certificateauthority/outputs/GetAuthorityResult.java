// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityAccessUrl;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityConfig;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityKeySpec;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthorityResult {
    private final List<GetAuthorityAccessUrl> accessUrls;
    private final @Nullable String certificateAuthorityId;
    private final List<GetAuthorityConfig> configs;
    private final String createTime;
    private final Boolean deletionProtection;
    private final String desiredState;
    private final String gcsBucket;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final Boolean ignoreActiveCertificatesOnDeletion;
    private final List<GetAuthorityKeySpec> keySpecs;
    private final Map<String,String> labels;
    private final String lifetime;
    private final @Nullable String location;
    private final String name;
    private final List<String> pemCaCertificates;
    /**
     * @return The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities.
     * 
     */
    private final String pemCsr;
    private final @Nullable String pool;
    private final @Nullable String project;
    private final String state;
    private final String type;
    private final String updateTime;

    @CustomType.Constructor
    private GetAuthorityResult(
        @CustomType.Parameter("accessUrls") List<GetAuthorityAccessUrl> accessUrls,
        @CustomType.Parameter("certificateAuthorityId") @Nullable String certificateAuthorityId,
        @CustomType.Parameter("configs") List<GetAuthorityConfig> configs,
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("deletionProtection") Boolean deletionProtection,
        @CustomType.Parameter("desiredState") String desiredState,
        @CustomType.Parameter("gcsBucket") String gcsBucket,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ignoreActiveCertificatesOnDeletion") Boolean ignoreActiveCertificatesOnDeletion,
        @CustomType.Parameter("keySpecs") List<GetAuthorityKeySpec> keySpecs,
        @CustomType.Parameter("labels") Map<String,String> labels,
        @CustomType.Parameter("lifetime") String lifetime,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("pemCaCertificates") List<String> pemCaCertificates,
        @CustomType.Parameter("pemCsr") String pemCsr,
        @CustomType.Parameter("pool") @Nullable String pool,
        @CustomType.Parameter("project") @Nullable String project,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("updateTime") String updateTime) {
        this.accessUrls = accessUrls;
        this.certificateAuthorityId = certificateAuthorityId;
        this.configs = configs;
        this.createTime = createTime;
        this.deletionProtection = deletionProtection;
        this.desiredState = desiredState;
        this.gcsBucket = gcsBucket;
        this.id = id;
        this.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
        this.keySpecs = keySpecs;
        this.labels = labels;
        this.lifetime = lifetime;
        this.location = location;
        this.name = name;
        this.pemCaCertificates = pemCaCertificates;
        this.pemCsr = pemCsr;
        this.pool = pool;
        this.project = project;
        this.state = state;
        this.type = type;
        this.updateTime = updateTime;
    }

    public List<GetAuthorityAccessUrl> accessUrls() {
        return this.accessUrls;
    }
    public Optional<String> certificateAuthorityId() {
        return Optional.ofNullable(this.certificateAuthorityId);
    }
    public List<GetAuthorityConfig> configs() {
        return this.configs;
    }
    public String createTime() {
        return this.createTime;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String desiredState() {
        return this.desiredState;
    }
    public String gcsBucket() {
        return this.gcsBucket;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean ignoreActiveCertificatesOnDeletion() {
        return this.ignoreActiveCertificatesOnDeletion;
    }
    public List<GetAuthorityKeySpec> keySpecs() {
        return this.keySpecs;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String lifetime() {
        return this.lifetime;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public String name() {
        return this.name;
    }
    public List<String> pemCaCertificates() {
        return this.pemCaCertificates;
    }
    /**
     * @return The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities.
     * 
     */
    public String pemCsr() {
        return this.pemCsr;
    }
    public Optional<String> pool() {
        return Optional.ofNullable(this.pool);
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String state() {
        return this.state;
    }
    public String type() {
        return this.type;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthorityResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetAuthorityAccessUrl> accessUrls;
        private @Nullable String certificateAuthorityId;
        private List<GetAuthorityConfig> configs;
        private String createTime;
        private Boolean deletionProtection;
        private String desiredState;
        private String gcsBucket;
        private String id;
        private Boolean ignoreActiveCertificatesOnDeletion;
        private List<GetAuthorityKeySpec> keySpecs;
        private Map<String,String> labels;
        private String lifetime;
        private @Nullable String location;
        private String name;
        private List<String> pemCaCertificates;
        private String pemCsr;
        private @Nullable String pool;
        private @Nullable String project;
        private String state;
        private String type;
        private String updateTime;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAuthorityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUrls = defaults.accessUrls;
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.configs = defaults.configs;
    	      this.createTime = defaults.createTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.desiredState = defaults.desiredState;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.id = defaults.id;
    	      this.ignoreActiveCertificatesOnDeletion = defaults.ignoreActiveCertificatesOnDeletion;
    	      this.keySpecs = defaults.keySpecs;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pemCaCertificates = defaults.pemCaCertificates;
    	      this.pemCsr = defaults.pemCsr;
    	      this.pool = defaults.pool;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
        }

        public Builder accessUrls(List<GetAuthorityAccessUrl> accessUrls) {
            this.accessUrls = Objects.requireNonNull(accessUrls);
            return this;
        }
        public Builder accessUrls(GetAuthorityAccessUrl... accessUrls) {
            return accessUrls(List.of(accessUrls));
        }
        public Builder certificateAuthorityId(@Nullable String certificateAuthorityId) {
            this.certificateAuthorityId = certificateAuthorityId;
            return this;
        }
        public Builder configs(List<GetAuthorityConfig> configs) {
            this.configs = Objects.requireNonNull(configs);
            return this;
        }
        public Builder configs(GetAuthorityConfig... configs) {
            return configs(List.of(configs));
        }
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder deletionProtection(Boolean deletionProtection) {
            this.deletionProtection = Objects.requireNonNull(deletionProtection);
            return this;
        }
        public Builder desiredState(String desiredState) {
            this.desiredState = Objects.requireNonNull(desiredState);
            return this;
        }
        public Builder gcsBucket(String gcsBucket) {
            this.gcsBucket = Objects.requireNonNull(gcsBucket);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ignoreActiveCertificatesOnDeletion(Boolean ignoreActiveCertificatesOnDeletion) {
            this.ignoreActiveCertificatesOnDeletion = Objects.requireNonNull(ignoreActiveCertificatesOnDeletion);
            return this;
        }
        public Builder keySpecs(List<GetAuthorityKeySpec> keySpecs) {
            this.keySpecs = Objects.requireNonNull(keySpecs);
            return this;
        }
        public Builder keySpecs(GetAuthorityKeySpec... keySpecs) {
            return keySpecs(List.of(keySpecs));
        }
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder lifetime(String lifetime) {
            this.lifetime = Objects.requireNonNull(lifetime);
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder pemCaCertificates(List<String> pemCaCertificates) {
            this.pemCaCertificates = Objects.requireNonNull(pemCaCertificates);
            return this;
        }
        public Builder pemCaCertificates(String... pemCaCertificates) {
            return pemCaCertificates(List.of(pemCaCertificates));
        }
        public Builder pemCsr(String pemCsr) {
            this.pemCsr = Objects.requireNonNull(pemCsr);
            return this;
        }
        public Builder pool(@Nullable String pool) {
            this.pool = pool;
            return this;
        }
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }        public GetAuthorityResult build() {
            return new GetAuthorityResult(accessUrls, certificateAuthorityId, configs, createTime, deletionProtection, desiredState, gcsBucket, id, ignoreActiveCertificatesOnDeletion, keySpecs, labels, lifetime, location, name, pemCaCertificates, pemCsr, pool, project, state, type, updateTime);
        }
    }
}
