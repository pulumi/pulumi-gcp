// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityAccessUrl;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityConfig;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityKeySpec;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthoritySubordinateConfig;
import com.pulumi.gcp.certificateauthority.outputs.GetAuthorityUserDefinedAccessUrl;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthorityResult {
    private List<GetAuthorityAccessUrl> accessUrls;
    private @Nullable String certificateAuthorityId;
    private List<GetAuthorityConfig> configs;
    private String createTime;
    private Boolean deletionProtection;
    private String desiredState;
    private Map<String,String> effectiveLabels;
    private String gcsBucket;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean ignoreActiveCertificatesOnDeletion;
    private List<GetAuthorityKeySpec> keySpecs;
    private Map<String,String> labels;
    private String lifetime;
    private @Nullable String location;
    private String name;
    private String pemCaCertificate;
    private List<String> pemCaCertificates;
    /**
     * @return The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities that are awaiting user activation.
     * 
     */
    private String pemCsr;
    private @Nullable String pool;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private Boolean skipGracePeriod;
    private String state;
    private List<GetAuthoritySubordinateConfig> subordinateConfigs;
    private String type;
    private String updateTime;
    private List<GetAuthorityUserDefinedAccessUrl> userDefinedAccessUrls;

    private GetAuthorityResult() {}
    public List<GetAuthorityAccessUrl> accessUrls() {
        return this.accessUrls;
    }
    public Optional<String> certificateAuthorityId() {
        return Optional.ofNullable(this.certificateAuthorityId);
    }
    public List<GetAuthorityConfig> configs() {
        return this.configs;
    }
    public String createTime() {
        return this.createTime;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String desiredState() {
        return this.desiredState;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String gcsBucket() {
        return this.gcsBucket;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean ignoreActiveCertificatesOnDeletion() {
        return this.ignoreActiveCertificatesOnDeletion;
    }
    public List<GetAuthorityKeySpec> keySpecs() {
        return this.keySpecs;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String lifetime() {
        return this.lifetime;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public String name() {
        return this.name;
    }
    public String pemCaCertificate() {
        return this.pemCaCertificate;
    }
    public List<String> pemCaCertificates() {
        return this.pemCaCertificates;
    }
    /**
     * @return The PEM-encoded signed certificate signing request (CSR). This is only set on subordinate certificate authorities that are awaiting user activation.
     * 
     */
    public String pemCsr() {
        return this.pemCsr;
    }
    public Optional<String> pool() {
        return Optional.ofNullable(this.pool);
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Boolean skipGracePeriod() {
        return this.skipGracePeriod;
    }
    public String state() {
        return this.state;
    }
    public List<GetAuthoritySubordinateConfig> subordinateConfigs() {
        return this.subordinateConfigs;
    }
    public String type() {
        return this.type;
    }
    public String updateTime() {
        return this.updateTime;
    }
    public List<GetAuthorityUserDefinedAccessUrl> userDefinedAccessUrls() {
        return this.userDefinedAccessUrls;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthorityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAuthorityAccessUrl> accessUrls;
        private @Nullable String certificateAuthorityId;
        private List<GetAuthorityConfig> configs;
        private String createTime;
        private Boolean deletionProtection;
        private String desiredState;
        private Map<String,String> effectiveLabels;
        private String gcsBucket;
        private String id;
        private Boolean ignoreActiveCertificatesOnDeletion;
        private List<GetAuthorityKeySpec> keySpecs;
        private Map<String,String> labels;
        private String lifetime;
        private @Nullable String location;
        private String name;
        private String pemCaCertificate;
        private List<String> pemCaCertificates;
        private String pemCsr;
        private @Nullable String pool;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private Boolean skipGracePeriod;
        private String state;
        private List<GetAuthoritySubordinateConfig> subordinateConfigs;
        private String type;
        private String updateTime;
        private List<GetAuthorityUserDefinedAccessUrl> userDefinedAccessUrls;
        public Builder() {}
        public Builder(GetAuthorityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessUrls = defaults.accessUrls;
    	      this.certificateAuthorityId = defaults.certificateAuthorityId;
    	      this.configs = defaults.configs;
    	      this.createTime = defaults.createTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.desiredState = defaults.desiredState;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.id = defaults.id;
    	      this.ignoreActiveCertificatesOnDeletion = defaults.ignoreActiveCertificatesOnDeletion;
    	      this.keySpecs = defaults.keySpecs;
    	      this.labels = defaults.labels;
    	      this.lifetime = defaults.lifetime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pemCaCertificate = defaults.pemCaCertificate;
    	      this.pemCaCertificates = defaults.pemCaCertificates;
    	      this.pemCsr = defaults.pemCsr;
    	      this.pool = defaults.pool;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.skipGracePeriod = defaults.skipGracePeriod;
    	      this.state = defaults.state;
    	      this.subordinateConfigs = defaults.subordinateConfigs;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
    	      this.userDefinedAccessUrls = defaults.userDefinedAccessUrls;
        }

        @CustomType.Setter
        public Builder accessUrls(List<GetAuthorityAccessUrl> accessUrls) {
            if (accessUrls == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "accessUrls");
            }
            this.accessUrls = accessUrls;
            return this;
        }
        public Builder accessUrls(GetAuthorityAccessUrl... accessUrls) {
            return accessUrls(List.of(accessUrls));
        }
        @CustomType.Setter
        public Builder certificateAuthorityId(@Nullable String certificateAuthorityId) {

            this.certificateAuthorityId = certificateAuthorityId;
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<GetAuthorityConfig> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(GetAuthorityConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder desiredState(String desiredState) {
            if (desiredState == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "desiredState");
            }
            this.desiredState = desiredState;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder gcsBucket(String gcsBucket) {
            if (gcsBucket == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "gcsBucket");
            }
            this.gcsBucket = gcsBucket;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreActiveCertificatesOnDeletion(Boolean ignoreActiveCertificatesOnDeletion) {
            if (ignoreActiveCertificatesOnDeletion == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "ignoreActiveCertificatesOnDeletion");
            }
            this.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder keySpecs(List<GetAuthorityKeySpec> keySpecs) {
            if (keySpecs == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "keySpecs");
            }
            this.keySpecs = keySpecs;
            return this;
        }
        public Builder keySpecs(GetAuthorityKeySpec... keySpecs) {
            return keySpecs(List.of(keySpecs));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lifetime(String lifetime) {
            if (lifetime == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "lifetime");
            }
            this.lifetime = lifetime;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pemCaCertificate(String pemCaCertificate) {
            if (pemCaCertificate == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "pemCaCertificate");
            }
            this.pemCaCertificate = pemCaCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder pemCaCertificates(List<String> pemCaCertificates) {
            if (pemCaCertificates == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "pemCaCertificates");
            }
            this.pemCaCertificates = pemCaCertificates;
            return this;
        }
        public Builder pemCaCertificates(String... pemCaCertificates) {
            return pemCaCertificates(List.of(pemCaCertificates));
        }
        @CustomType.Setter
        public Builder pemCsr(String pemCsr) {
            if (pemCsr == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "pemCsr");
            }
            this.pemCsr = pemCsr;
            return this;
        }
        @CustomType.Setter
        public Builder pool(@Nullable String pool) {

            this.pool = pool;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder skipGracePeriod(Boolean skipGracePeriod) {
            if (skipGracePeriod == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "skipGracePeriod");
            }
            this.skipGracePeriod = skipGracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subordinateConfigs(List<GetAuthoritySubordinateConfig> subordinateConfigs) {
            if (subordinateConfigs == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "subordinateConfigs");
            }
            this.subordinateConfigs = subordinateConfigs;
            return this;
        }
        public Builder subordinateConfigs(GetAuthoritySubordinateConfig... subordinateConfigs) {
            return subordinateConfigs(List.of(subordinateConfigs));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder userDefinedAccessUrls(List<GetAuthorityUserDefinedAccessUrl> userDefinedAccessUrls) {
            if (userDefinedAccessUrls == null) {
              throw new MissingRequiredPropertyException("GetAuthorityResult", "userDefinedAccessUrls");
            }
            this.userDefinedAccessUrls = userDefinedAccessUrls;
            return this;
        }
        public Builder userDefinedAccessUrls(GetAuthorityUserDefinedAccessUrl... userDefinedAccessUrls) {
            return userDefinedAccessUrls(List.of(userDefinedAccessUrls));
        }
        public GetAuthorityResult build() {
            final var _resultValue = new GetAuthorityResult();
            _resultValue.accessUrls = accessUrls;
            _resultValue.certificateAuthorityId = certificateAuthorityId;
            _resultValue.configs = configs;
            _resultValue.createTime = createTime;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.desiredState = desiredState;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.gcsBucket = gcsBucket;
            _resultValue.id = id;
            _resultValue.ignoreActiveCertificatesOnDeletion = ignoreActiveCertificatesOnDeletion;
            _resultValue.keySpecs = keySpecs;
            _resultValue.labels = labels;
            _resultValue.lifetime = lifetime;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.pemCaCertificate = pemCaCertificate;
            _resultValue.pemCaCertificates = pemCaCertificates;
            _resultValue.pemCsr = pemCsr;
            _resultValue.pool = pool;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.skipGracePeriod = skipGracePeriod;
            _resultValue.state = state;
            _resultValue.subordinateConfigs = subordinateConfigs;
            _resultValue.type = type;
            _resultValue.updateTime = updateTime;
            _resultValue.userDefinedAccessUrls = userDefinedAccessUrls;
            return _resultValue;
        }
    }
}
