// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionAuthConfigSshPublicKeySshClientCert;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionAuthConfigSshPublicKeySshClientCertPass;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionAuthConfigSshPublicKey {
    /**
     * @return Format of SSH Client cert.
     * 
     */
    private @Nullable String certType;
    /**
     * @return SSH Client Cert. It should contain both public and private key.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionAuthConfigSshPublicKeySshClientCert sshClientCert;
    /**
     * @return Password (passphrase) for ssh client certificate if it has one.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionAuthConfigSshPublicKeySshClientCertPass sshClientCertPass;
    /**
     * @return The user account used to authenticate.
     * 
     */
    private String username;

    private ConnectionAuthConfigSshPublicKey() {}
    /**
     * @return Format of SSH Client cert.
     * 
     */
    public Optional<String> certType() {
        return Optional.ofNullable(this.certType);
    }
    /**
     * @return SSH Client Cert. It should contain both public and private key.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionAuthConfigSshPublicKeySshClientCert> sshClientCert() {
        return Optional.ofNullable(this.sshClientCert);
    }
    /**
     * @return Password (passphrase) for ssh client certificate if it has one.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionAuthConfigSshPublicKeySshClientCertPass> sshClientCertPass() {
        return Optional.ofNullable(this.sshClientCertPass);
    }
    /**
     * @return The user account used to authenticate.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionAuthConfigSshPublicKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certType;
        private @Nullable ConnectionAuthConfigSshPublicKeySshClientCert sshClientCert;
        private @Nullable ConnectionAuthConfigSshPublicKeySshClientCertPass sshClientCertPass;
        private String username;
        public Builder() {}
        public Builder(ConnectionAuthConfigSshPublicKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certType = defaults.certType;
    	      this.sshClientCert = defaults.sshClientCert;
    	      this.sshClientCertPass = defaults.sshClientCertPass;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder certType(@Nullable String certType) {

            this.certType = certType;
            return this;
        }
        @CustomType.Setter
        public Builder sshClientCert(@Nullable ConnectionAuthConfigSshPublicKeySshClientCert sshClientCert) {

            this.sshClientCert = sshClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder sshClientCertPass(@Nullable ConnectionAuthConfigSshPublicKeySshClientCertPass sshClientCertPass) {

            this.sshClientCertPass = sshClientCertPass;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("ConnectionAuthConfigSshPublicKey", "username");
            }
            this.username = username;
            return this;
        }
        public ConnectionAuthConfigSshPublicKey build() {
            final var _resultValue = new ConnectionAuthConfigSshPublicKey();
            _resultValue.certType = certType;
            _resultValue.sshClientCert = sshClientCert;
            _resultValue.sshClientCertPass = sshClientCertPass;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
