// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigAutoscalingMetricsCollection;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigConfigEncryption;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigInstancePlacement;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigProxyConfig;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigRootVolume;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigSshConfig;
import com.pulumi.gcp.container.outputs.AwsNodePoolConfigTaint;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AwsNodePoolConfig {
    /**
     * @return Optional. Configuration related to CloudWatch metrics collection on the Auto Scaling group of the node pool. When unspecified, metrics collection is disabled.
     * 
     */
    private @Nullable AwsNodePoolConfigAutoscalingMetricsCollection autoscalingMetricsCollection;
    /**
     * @return The ARN of the AWS KMS key used to encrypt node pool configuration.
     * 
     */
    private AwsNodePoolConfigConfigEncryption configEncryption;
    /**
     * @return The name of the AWS IAM role assigned to nodes in the pool.
     * 
     */
    private String iamInstanceProfile;
    /**
     * @return (Beta only) The OS image type to use on node pool instances.
     * 
     */
    private @Nullable String imageType;
    /**
     * @return (Beta only) Details of placement information for an instance.
     * 
     */
    private @Nullable AwsNodePoolConfigInstancePlacement instancePlacement;
    /**
     * @return Optional. The AWS instance type. When unspecified, it defaults to `m5.large`.
     * 
     */
    private @Nullable String instanceType;
    /**
     * @return Optional. The initial labels assigned to nodes of this node pool. An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    private @Nullable AwsNodePoolConfigProxyConfig proxyConfig;
    /**
     * @return Optional. Template for the root volume provisioned for node pool nodes. Volumes will be provisioned in the availability zone assigned to the node pool subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
     * 
     */
    private @Nullable AwsNodePoolConfigRootVolume rootVolume;
    /**
     * @return Optional. The IDs of additional security groups to add to nodes in this pool. The manager will automatically create security groups with minimum rules needed for a functioning cluster.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return Optional. The SSH configuration.
     * 
     */
    private @Nullable AwsNodePoolConfigSshConfig sshConfig;
    /**
     * @return Optional. Key/value metadata to assign to each underlying AWS resource. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Optional. The initial taints assigned to nodes of this node pool.
     * 
     */
    private @Nullable List<AwsNodePoolConfigTaint> taints;

    private AwsNodePoolConfig() {}
    /**
     * @return Optional. Configuration related to CloudWatch metrics collection on the Auto Scaling group of the node pool. When unspecified, metrics collection is disabled.
     * 
     */
    public Optional<AwsNodePoolConfigAutoscalingMetricsCollection> autoscalingMetricsCollection() {
        return Optional.ofNullable(this.autoscalingMetricsCollection);
    }
    /**
     * @return The ARN of the AWS KMS key used to encrypt node pool configuration.
     * 
     */
    public AwsNodePoolConfigConfigEncryption configEncryption() {
        return this.configEncryption;
    }
    /**
     * @return The name of the AWS IAM role assigned to nodes in the pool.
     * 
     */
    public String iamInstanceProfile() {
        return this.iamInstanceProfile;
    }
    /**
     * @return (Beta only) The OS image type to use on node pool instances.
     * 
     */
    public Optional<String> imageType() {
        return Optional.ofNullable(this.imageType);
    }
    /**
     * @return (Beta only) Details of placement information for an instance.
     * 
     */
    public Optional<AwsNodePoolConfigInstancePlacement> instancePlacement() {
        return Optional.ofNullable(this.instancePlacement);
    }
    /**
     * @return Optional. The AWS instance type. When unspecified, it defaults to `m5.large`.
     * 
     */
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    /**
     * @return Optional. The initial labels assigned to nodes of this node pool. An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    public Optional<AwsNodePoolConfigProxyConfig> proxyConfig() {
        return Optional.ofNullable(this.proxyConfig);
    }
    /**
     * @return Optional. Template for the root volume provisioned for node pool nodes. Volumes will be provisioned in the availability zone assigned to the node pool subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
     * 
     */
    public Optional<AwsNodePoolConfigRootVolume> rootVolume() {
        return Optional.ofNullable(this.rootVolume);
    }
    /**
     * @return Optional. The IDs of additional security groups to add to nodes in this pool. The manager will automatically create security groups with minimum rules needed for a functioning cluster.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return Optional. The SSH configuration.
     * 
     */
    public Optional<AwsNodePoolConfigSshConfig> sshConfig() {
        return Optional.ofNullable(this.sshConfig);
    }
    /**
     * @return Optional. Key/value metadata to assign to each underlying AWS resource. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Optional. The initial taints assigned to nodes of this node pool.
     * 
     */
    public List<AwsNodePoolConfigTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwsNodePoolConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AwsNodePoolConfigAutoscalingMetricsCollection autoscalingMetricsCollection;
        private AwsNodePoolConfigConfigEncryption configEncryption;
        private String iamInstanceProfile;
        private @Nullable String imageType;
        private @Nullable AwsNodePoolConfigInstancePlacement instancePlacement;
        private @Nullable String instanceType;
        private @Nullable Map<String,String> labels;
        private @Nullable AwsNodePoolConfigProxyConfig proxyConfig;
        private @Nullable AwsNodePoolConfigRootVolume rootVolume;
        private @Nullable List<String> securityGroupIds;
        private @Nullable AwsNodePoolConfigSshConfig sshConfig;
        private @Nullable Map<String,String> tags;
        private @Nullable List<AwsNodePoolConfigTaint> taints;
        public Builder() {}
        public Builder(AwsNodePoolConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingMetricsCollection = defaults.autoscalingMetricsCollection;
    	      this.configEncryption = defaults.configEncryption;
    	      this.iamInstanceProfile = defaults.iamInstanceProfile;
    	      this.imageType = defaults.imageType;
    	      this.instancePlacement = defaults.instancePlacement;
    	      this.instanceType = defaults.instanceType;
    	      this.labels = defaults.labels;
    	      this.proxyConfig = defaults.proxyConfig;
    	      this.rootVolume = defaults.rootVolume;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.sshConfig = defaults.sshConfig;
    	      this.tags = defaults.tags;
    	      this.taints = defaults.taints;
        }

        @CustomType.Setter
        public Builder autoscalingMetricsCollection(@Nullable AwsNodePoolConfigAutoscalingMetricsCollection autoscalingMetricsCollection) {
            this.autoscalingMetricsCollection = autoscalingMetricsCollection;
            return this;
        }
        @CustomType.Setter
        public Builder configEncryption(AwsNodePoolConfigConfigEncryption configEncryption) {
            this.configEncryption = Objects.requireNonNull(configEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder iamInstanceProfile(String iamInstanceProfile) {
            this.iamInstanceProfile = Objects.requireNonNull(iamInstanceProfile);
            return this;
        }
        @CustomType.Setter
        public Builder imageType(@Nullable String imageType) {
            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder instancePlacement(@Nullable AwsNodePoolConfigInstancePlacement instancePlacement) {
            this.instancePlacement = instancePlacement;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder proxyConfig(@Nullable AwsNodePoolConfigProxyConfig proxyConfig) {
            this.proxyConfig = proxyConfig;
            return this;
        }
        @CustomType.Setter
        public Builder rootVolume(@Nullable AwsNodePoolConfigRootVolume rootVolume) {
            this.rootVolume = rootVolume;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder sshConfig(@Nullable AwsNodePoolConfigSshConfig sshConfig) {
            this.sshConfig = sshConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<AwsNodePoolConfigTaint> taints) {
            this.taints = taints;
            return this;
        }
        public Builder taints(AwsNodePoolConfigTaint... taints) {
            return taints(List.of(taints));
        }
        public AwsNodePoolConfig build() {
            final var o = new AwsNodePoolConfig();
            o.autoscalingMetricsCollection = autoscalingMetricsCollection;
            o.configEncryption = configEncryption;
            o.iamInstanceProfile = iamInstanceProfile;
            o.imageType = imageType;
            o.instancePlacement = instancePlacement;
            o.instanceType = instanceType;
            o.labels = labels;
            o.proxyConfig = proxyConfig;
            o.rootVolume = rootVolume;
            o.securityGroupIds = securityGroupIds;
            o.sshConfig = sshConfig;
            o.tags = tags;
            o.taints = taints;
            return o;
        }
    }
}
