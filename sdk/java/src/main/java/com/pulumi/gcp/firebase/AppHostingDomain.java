// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.AppHostingDomainArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingDomainState;
import com.pulumi.gcp.firebase.outputs.AppHostingDomainCustomDomainStatus;
import com.pulumi.gcp.firebase.outputs.AppHostingDomainServe;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A domain name that is associated with a backend.
 * 
 * ## Example Usage
 * 
 * ### Firebase App Hosting Domain Minimal
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.firebase.AppHostingDomain;
 * import com.pulumi.gcp.firebase.AppHostingDomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("sa-id")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var exampleAppHostingBackend = new AppHostingBackend("exampleAppHostingBackend", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .backendId("domain-mini")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .build());
 * 
 *         var example = new AppHostingDomain("example", AppHostingDomainArgs.builder()
 *             .project(exampleAppHostingBackend.project())
 *             .location(exampleAppHostingBackend.location())
 *             .backend(exampleAppHostingBackend.backendId())
 *             .domainId("example.com")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Firebase App Hosting Domain Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.firebase.AppHostingDomain;
 * import com.pulumi.gcp.firebase.AppHostingDomainArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingDomainServeArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingDomainServeRedirectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("sa-id")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var exampleAppHostingBackend = new AppHostingBackend("exampleAppHostingBackend", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("us-central1")
 *             .backendId("domain-full")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .build());
 * 
 *         var example = new AppHostingDomain("example", AppHostingDomainArgs.builder()
 *             .project(exampleAppHostingBackend.project())
 *             .location(exampleAppHostingBackend.location())
 *             .backend(exampleAppHostingBackend.backendId())
 *             .domainId("example.com")
 *             .serve(AppHostingDomainServeArgs.builder()
 *                 .redirect(AppHostingDomainServeRedirectArgs.builder()
 *                     .uri("google.com")
 *                     .status("302")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Domain can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}`
 * 
 * * `{{project}}/{{location}}/{{backend}}/{{domain_id}}`
 * 
 * * `{{location}}/{{backend}}/{{domain_id}}`
 * 
 * When using the `pulumi import` command, Domain can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingDomain:AppHostingDomain default projects/{{project}}/locations/{{location}}/backends/{{backend}}/domains/{{domain_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingDomain:AppHostingDomain default {{project}}/{{location}}/{{backend}}/{{domain_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingDomain:AppHostingDomain default {{location}}/{{backend}}/{{domain_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/appHostingDomain:AppHostingDomain")
public class AppHostingDomain extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the Backend that this Domain is associated with
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output<String> backend;

    /**
     * @return The ID of the Backend that this Domain is associated with
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * Time at which the domain was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time at which the domain was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The status of a custom domain&#39;s linkage to the Backend.
     * Structure is documented below.
     * 
     */
    @Export(name="customDomainStatuses", refs={List.class,AppHostingDomainCustomDomainStatus.class}, tree="[0,1]")
    private Output<List<AppHostingDomainCustomDomainStatus>> customDomainStatuses;

    /**
     * @return The status of a custom domain&#39;s linkage to the Backend.
     * Structure is documented below.
     * 
     */
    public Output<List<AppHostingDomainCustomDomainStatus>> customDomainStatuses() {
        return this.customDomainStatuses;
    }
    /**
     * Time at which the domain was deleted.
     * 
     */
    @Export(name="deleteTime", refs={String.class}, tree="[0]")
    private Output<String> deleteTime;

    /**
     * @return Time at which the domain was deleted.
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    /**
     * Id of the domain to create.
     * Must be a valid domain name, such as &#34;foo.com&#34;
     * 
     */
    @Export(name="domainId", refs={String.class}, tree="[0]")
    private Output<String> domainId;

    /**
     * @return Id of the domain to create.
     * Must be a valid domain name, such as &#34;foo.com&#34;
     * 
     */
    public Output<String> domainId() {
        return this.domainId;
    }
    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The location of the Backend that this Domain is associated with
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the Backend that this Domain is associated with
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name of the domain, e.g.
     * `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of the domain, e.g.
     * `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Time at which a soft-deleted domain will be purged, rendering in
     * permanently deleted.
     * 
     */
    @Export(name="purgeTime", refs={String.class}, tree="[0]")
    private Output<String> purgeTime;

    /**
     * @return Time at which a soft-deleted domain will be purged, rendering in
     * permanently deleted.
     * 
     */
    public Output<String> purgeTime() {
        return this.purgeTime;
    }
    /**
     * The serving behavior of the domain. If specified, the domain will
     * serve content other than its Backend&#39;s live content.
     * Structure is documented below.
     * 
     */
    @Export(name="serve", refs={AppHostingDomainServe.class}, tree="[0]")
    private Output</* @Nullable */ AppHostingDomainServe> serve;

    /**
     * @return The serving behavior of the domain. If specified, the domain will
     * serve content other than its Backend&#39;s live content.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AppHostingDomainServe>> serve() {
        return Codegen.optional(this.serve);
    }
    /**
     * System-assigned, unique identifier.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return System-assigned, unique identifier.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Time at which the domain was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time at which the domain was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppHostingDomain(java.lang.String name) {
        this(name, AppHostingDomainArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppHostingDomain(java.lang.String name, AppHostingDomainArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppHostingDomain(java.lang.String name, AppHostingDomainArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appHostingDomain:AppHostingDomain", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AppHostingDomain(java.lang.String name, Output<java.lang.String> id, @Nullable AppHostingDomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appHostingDomain:AppHostingDomain", name, state, makeResourceOptions(options, id), false);
    }

    private static AppHostingDomainArgs makeArgs(AppHostingDomainArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AppHostingDomainArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppHostingDomain get(java.lang.String name, Output<java.lang.String> id, @Nullable AppHostingDomainState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AppHostingDomain(name, id, state, options);
    }
}
