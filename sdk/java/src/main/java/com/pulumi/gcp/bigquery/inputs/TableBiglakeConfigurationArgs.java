// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class TableBiglakeConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableBiglakeConfigurationArgs Empty = new TableBiglakeConfigurationArgs();

    /**
     * The connection specifying the credentials to be used to
     * read and write to external storage, such as Cloud Storage. The connection_id can
     * have the form &#34;&amp;lt;project\_id&amp;gt;.&amp;lt;location\_id&amp;gt;.&amp;lt;connection\_id&amp;gt;&#34; or
     * projects/&amp;lt;project\_id&amp;gt;/locations/&amp;lt;location\_id&amp;gt;/connections/&amp;lt;connection\_id&amp;gt;&#34;.
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return The connection specifying the credentials to be used to
     * read and write to external storage, such as Cloud Storage. The connection_id can
     * have the form &#34;&amp;lt;project\_id&amp;gt;.&amp;lt;location\_id&amp;gt;.&amp;lt;connection\_id&amp;gt;&#34; or
     * projects/&amp;lt;project\_id&amp;gt;/locations/&amp;lt;location\_id&amp;gt;/connections/&amp;lt;connection\_id&amp;gt;&#34;.
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * The file format the table data is stored in.
     * 
     */
    @Import(name="fileFormat", required=true)
    private Output<String> fileFormat;

    /**
     * @return The file format the table data is stored in.
     * 
     */
    public Output<String> fileFormat() {
        return this.fileFormat;
    }

    /**
     * The fully qualified location prefix of the external folder where table data
     * is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format &#34;gs://bucket/path_to_table/&#34;
     * 
     */
    @Import(name="storageUri", required=true)
    private Output<String> storageUri;

    /**
     * @return The fully qualified location prefix of the external folder where table data
     * is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format &#34;gs://bucket/path_to_table/&#34;
     * 
     */
    public Output<String> storageUri() {
        return this.storageUri;
    }

    /**
     * The table format the metadata only snapshots are stored in.
     * 
     */
    @Import(name="tableFormat", required=true)
    private Output<String> tableFormat;

    /**
     * @return The table format the metadata only snapshots are stored in.
     * 
     */
    public Output<String> tableFormat() {
        return this.tableFormat;
    }

    private TableBiglakeConfigurationArgs() {}

    private TableBiglakeConfigurationArgs(TableBiglakeConfigurationArgs $) {
        this.connectionId = $.connectionId;
        this.fileFormat = $.fileFormat;
        this.storageUri = $.storageUri;
        this.tableFormat = $.tableFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableBiglakeConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableBiglakeConfigurationArgs $;

        public Builder() {
            $ = new TableBiglakeConfigurationArgs();
        }

        public Builder(TableBiglakeConfigurationArgs defaults) {
            $ = new TableBiglakeConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId The connection specifying the credentials to be used to
         * read and write to external storage, such as Cloud Storage. The connection_id can
         * have the form &#34;&amp;lt;project\_id&amp;gt;.&amp;lt;location\_id&amp;gt;.&amp;lt;connection\_id&amp;gt;&#34; or
         * projects/&amp;lt;project\_id&amp;gt;/locations/&amp;lt;location\_id&amp;gt;/connections/&amp;lt;connection\_id&amp;gt;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId The connection specifying the credentials to be used to
         * read and write to external storage, such as Cloud Storage. The connection_id can
         * have the form &#34;&amp;lt;project\_id&amp;gt;.&amp;lt;location\_id&amp;gt;.&amp;lt;connection\_id&amp;gt;&#34; or
         * projects/&amp;lt;project\_id&amp;gt;/locations/&amp;lt;location\_id&amp;gt;/connections/&amp;lt;connection\_id&amp;gt;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param fileFormat The file format the table data is stored in.
         * 
         * @return builder
         * 
         */
        public Builder fileFormat(Output<String> fileFormat) {
            $.fileFormat = fileFormat;
            return this;
        }

        /**
         * @param fileFormat The file format the table data is stored in.
         * 
         * @return builder
         * 
         */
        public Builder fileFormat(String fileFormat) {
            return fileFormat(Output.of(fileFormat));
        }

        /**
         * @param storageUri The fully qualified location prefix of the external folder where table data
         * is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format &#34;gs://bucket/path_to_table/&#34;
         * 
         * @return builder
         * 
         */
        public Builder storageUri(Output<String> storageUri) {
            $.storageUri = storageUri;
            return this;
        }

        /**
         * @param storageUri The fully qualified location prefix of the external folder where table data
         * is stored. The &#39;*&#39; wildcard character is not allowed. The URI should be in the format &#34;gs://bucket/path_to_table/&#34;
         * 
         * @return builder
         * 
         */
        public Builder storageUri(String storageUri) {
            return storageUri(Output.of(storageUri));
        }

        /**
         * @param tableFormat The table format the metadata only snapshots are stored in.
         * 
         * @return builder
         * 
         */
        public Builder tableFormat(Output<String> tableFormat) {
            $.tableFormat = tableFormat;
            return this;
        }

        /**
         * @param tableFormat The table format the metadata only snapshots are stored in.
         * 
         * @return builder
         * 
         */
        public Builder tableFormat(String tableFormat) {
            return tableFormat(Output.of(tableFormat));
        }

        public TableBiglakeConfigurationArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("TableBiglakeConfigurationArgs", "connectionId");
            }
            if ($.fileFormat == null) {
                throw new MissingRequiredPropertyException("TableBiglakeConfigurationArgs", "fileFormat");
            }
            if ($.storageUri == null) {
                throw new MissingRequiredPropertyException("TableBiglakeConfigurationArgs", "storageUri");
            }
            if ($.tableFormat == null) {
                throw new MissingRequiredPropertyException("TableBiglakeConfigurationArgs", "tableFormat");
            }
            return $;
        }
    }

}
