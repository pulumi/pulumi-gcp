// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.blockchainnodeengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.blockchainnodeengine.inputs.BlockchainNodesEthereumDetailsArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlockchainNodesArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlockchainNodesArgs Empty = new BlockchainNodesArgs();

    /**
     * ID of the requesting object.
     * 
     */
    @Import(name="blockchainNodeId", required=true)
    private Output<String> blockchainNodeId;

    /**
     * @return ID of the requesting object.
     * 
     */
    public Output<String> blockchainNodeId() {
        return this.blockchainNodeId;
    }

    /**
     * User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     * 
     */
    @Import(name="blockchainType")
    private @Nullable Output<String> blockchainType;

    /**
     * @return User-provided key-value pairs
     * Possible values are: `ETHEREUM`.
     * 
     */
    public Optional<Output<String>> blockchainType() {
        return Optional.ofNullable(this.blockchainType);
    }

    /**
     * User-provided key-value pairs
     * Structure is documented below.
     * 
     */
    @Import(name="ethereumDetails")
    private @Nullable Output<BlockchainNodesEthereumDetailsArgs> ethereumDetails;

    /**
     * @return User-provided key-value pairs
     * Structure is documented below.
     * 
     */
    public Optional<Output<BlockchainNodesEthereumDetailsArgs>> ethereumDetails() {
        return Optional.ofNullable(this.ethereumDetails);
    }

    /**
     * User-provided key-value pairs
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-provided key-value pairs
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location of Blockchain Node being created.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location of Blockchain Node being created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private BlockchainNodesArgs() {}

    private BlockchainNodesArgs(BlockchainNodesArgs $) {
        this.blockchainNodeId = $.blockchainNodeId;
        this.blockchainType = $.blockchainType;
        this.ethereumDetails = $.ethereumDetails;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlockchainNodesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlockchainNodesArgs $;

        public Builder() {
            $ = new BlockchainNodesArgs();
        }

        public Builder(BlockchainNodesArgs defaults) {
            $ = new BlockchainNodesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockchainNodeId ID of the requesting object.
         * 
         * @return builder
         * 
         */
        public Builder blockchainNodeId(Output<String> blockchainNodeId) {
            $.blockchainNodeId = blockchainNodeId;
            return this;
        }

        /**
         * @param blockchainNodeId ID of the requesting object.
         * 
         * @return builder
         * 
         */
        public Builder blockchainNodeId(String blockchainNodeId) {
            return blockchainNodeId(Output.of(blockchainNodeId));
        }

        /**
         * @param blockchainType User-provided key-value pairs
         * Possible values are: `ETHEREUM`.
         * 
         * @return builder
         * 
         */
        public Builder blockchainType(@Nullable Output<String> blockchainType) {
            $.blockchainType = blockchainType;
            return this;
        }

        /**
         * @param blockchainType User-provided key-value pairs
         * Possible values are: `ETHEREUM`.
         * 
         * @return builder
         * 
         */
        public Builder blockchainType(String blockchainType) {
            return blockchainType(Output.of(blockchainType));
        }

        /**
         * @param ethereumDetails User-provided key-value pairs
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ethereumDetails(@Nullable Output<BlockchainNodesEthereumDetailsArgs> ethereumDetails) {
            $.ethereumDetails = ethereumDetails;
            return this;
        }

        /**
         * @param ethereumDetails User-provided key-value pairs
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ethereumDetails(BlockchainNodesEthereumDetailsArgs ethereumDetails) {
            return ethereumDetails(Output.of(ethereumDetails));
        }

        /**
         * @param labels User-provided key-value pairs
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-provided key-value pairs
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location of Blockchain Node being created.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of Blockchain Node being created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public BlockchainNodesArgs build() {
            if ($.blockchainNodeId == null) {
                throw new MissingRequiredPropertyException("BlockchainNodesArgs", "blockchainNodeId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("BlockchainNodesArgs", "location");
            }
            return $;
        }
    }

}
