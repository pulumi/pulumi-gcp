// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.healthcare.outputs.PipelineJobMappingPipelineJobFhirStreamingSource;
import com.pulumi.gcp.healthcare.outputs.PipelineJobMappingPipelineJobMappingConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PipelineJobMappingPipelineJob {
    /**
     * @return If set, the mapping pipeline will write snapshots to this
     * FHIR store without assigning stable IDs. You must
     * grant your pipeline project&#39;s Cloud Healthcare Service
     * Agent serviceaccount healthcare.fhirResources.executeBundle
     * and healthcare.fhirResources.create permissions on the
     * destination store. The destination store must set
     * [disableReferentialIntegrity][FhirStore.disable_referential_integrity]
     * to true. The destination store must use FHIR version R4.
     * Format: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{fhirStoreID}.
     * 
     */
    private @Nullable String fhirStoreDestination;
    /**
     * @return A streaming FHIR data source.
     * Structure is documented below.
     * 
     */
    private @Nullable PipelineJobMappingPipelineJobFhirStreamingSource fhirStreamingSource;
    /**
     * @return The location of the mapping configuration.
     * Structure is documented below.
     * 
     */
    private PipelineJobMappingPipelineJobMappingConfig mappingConfig;
    /**
     * @return If set to true, a mapping pipeline will send output snapshots
     * to the reconciliation pipeline in its dataset. A reconciliation
     * pipeline must exist in this dataset before a mapping pipeline
     * with a reconciliation destination can be created.
     * 
     */
    private @Nullable Boolean reconciliationDestination;

    private PipelineJobMappingPipelineJob() {}
    /**
     * @return If set, the mapping pipeline will write snapshots to this
     * FHIR store without assigning stable IDs. You must
     * grant your pipeline project&#39;s Cloud Healthcare Service
     * Agent serviceaccount healthcare.fhirResources.executeBundle
     * and healthcare.fhirResources.create permissions on the
     * destination store. The destination store must set
     * [disableReferentialIntegrity][FhirStore.disable_referential_integrity]
     * to true. The destination store must use FHIR version R4.
     * Format: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{fhirStoreID}.
     * 
     */
    public Optional<String> fhirStoreDestination() {
        return Optional.ofNullable(this.fhirStoreDestination);
    }
    /**
     * @return A streaming FHIR data source.
     * Structure is documented below.
     * 
     */
    public Optional<PipelineJobMappingPipelineJobFhirStreamingSource> fhirStreamingSource() {
        return Optional.ofNullable(this.fhirStreamingSource);
    }
    /**
     * @return The location of the mapping configuration.
     * Structure is documented below.
     * 
     */
    public PipelineJobMappingPipelineJobMappingConfig mappingConfig() {
        return this.mappingConfig;
    }
    /**
     * @return If set to true, a mapping pipeline will send output snapshots
     * to the reconciliation pipeline in its dataset. A reconciliation
     * pipeline must exist in this dataset before a mapping pipeline
     * with a reconciliation destination can be created.
     * 
     */
    public Optional<Boolean> reconciliationDestination() {
        return Optional.ofNullable(this.reconciliationDestination);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineJobMappingPipelineJob defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String fhirStoreDestination;
        private @Nullable PipelineJobMappingPipelineJobFhirStreamingSource fhirStreamingSource;
        private PipelineJobMappingPipelineJobMappingConfig mappingConfig;
        private @Nullable Boolean reconciliationDestination;
        public Builder() {}
        public Builder(PipelineJobMappingPipelineJob defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fhirStoreDestination = defaults.fhirStoreDestination;
    	      this.fhirStreamingSource = defaults.fhirStreamingSource;
    	      this.mappingConfig = defaults.mappingConfig;
    	      this.reconciliationDestination = defaults.reconciliationDestination;
        }

        @CustomType.Setter
        public Builder fhirStoreDestination(@Nullable String fhirStoreDestination) {

            this.fhirStoreDestination = fhirStoreDestination;
            return this;
        }
        @CustomType.Setter
        public Builder fhirStreamingSource(@Nullable PipelineJobMappingPipelineJobFhirStreamingSource fhirStreamingSource) {

            this.fhirStreamingSource = fhirStreamingSource;
            return this;
        }
        @CustomType.Setter
        public Builder mappingConfig(PipelineJobMappingPipelineJobMappingConfig mappingConfig) {
            if (mappingConfig == null) {
              throw new MissingRequiredPropertyException("PipelineJobMappingPipelineJob", "mappingConfig");
            }
            this.mappingConfig = mappingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder reconciliationDestination(@Nullable Boolean reconciliationDestination) {

            this.reconciliationDestination = reconciliationDestination;
            return this;
        }
        public PipelineJobMappingPipelineJob build() {
            final var _resultValue = new PipelineJobMappingPipelineJob();
            _resultValue.fhirStoreDestination = fhirStoreDestination;
            _resultValue.fhirStreamingSource = fhirStreamingSource;
            _resultValue.mappingConfig = mappingConfig;
            _resultValue.reconciliationDestination = reconciliationDestination;
            return _resultValue;
        }
    }
}
