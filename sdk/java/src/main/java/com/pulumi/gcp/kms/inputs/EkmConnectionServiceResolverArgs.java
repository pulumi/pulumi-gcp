// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.inputs.EkmConnectionServiceResolverServerCertificateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EkmConnectionServiceResolverArgs extends com.pulumi.resources.ResourceArgs {

    public static final EkmConnectionServiceResolverArgs Empty = new EkmConnectionServiceResolverArgs();

    /**
     * Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    @Import(name="endpointFilter")
    private @Nullable Output<String> endpointFilter;

    /**
     * @return Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    public Optional<Output<String>> endpointFilter() {
        return Optional.ofNullable(this.endpointFilter);
    }

    /**
     * Required. The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return Required. The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
     * Structure is documented below.
     * 
     */
    @Import(name="serverCertificates", required=true)
    private Output<List<EkmConnectionServiceResolverServerCertificateArgs>> serverCertificates;

    /**
     * @return Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
     * Structure is documented below.
     * 
     */
    public Output<List<EkmConnectionServiceResolverServerCertificateArgs>> serverCertificates() {
        return this.serverCertificates;
    }

    /**
     * Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*&#47;locations/*&#47;namespaces/*&#47;services/*
     * 
     */
    @Import(name="serviceDirectoryService", required=true)
    private Output<String> serviceDirectoryService;

    /**
     * @return Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*&#47;locations/*&#47;namespaces/*&#47;services/*
     * 
     */
    public Output<String> serviceDirectoryService() {
        return this.serviceDirectoryService;
    }

    private EkmConnectionServiceResolverArgs() {}

    private EkmConnectionServiceResolverArgs(EkmConnectionServiceResolverArgs $) {
        this.endpointFilter = $.endpointFilter;
        this.hostname = $.hostname;
        this.serverCertificates = $.serverCertificates;
        this.serviceDirectoryService = $.serviceDirectoryService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EkmConnectionServiceResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EkmConnectionServiceResolverArgs $;

        public Builder() {
            $ = new EkmConnectionServiceResolverArgs();
        }

        public Builder(EkmConnectionServiceResolverArgs defaults) {
            $ = new EkmConnectionServiceResolverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointFilter Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
         * 
         * @return builder
         * 
         */
        public Builder endpointFilter(@Nullable Output<String> endpointFilter) {
            $.endpointFilter = endpointFilter;
            return this;
        }

        /**
         * @param endpointFilter Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
         * 
         * @return builder
         * 
         */
        public Builder endpointFilter(String endpointFilter) {
            return endpointFilter(Output.of(endpointFilter));
        }

        /**
         * @param hostname Required. The hostname of the EKM replica used at TLS and HTTP layers.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Required. The hostname of the EKM replica used at TLS and HTTP layers.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param serverCertificates Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(Output<List<EkmConnectionServiceResolverServerCertificateArgs>> serverCertificates) {
            $.serverCertificates = serverCertificates;
            return this;
        }

        /**
         * @param serverCertificates Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(List<EkmConnectionServiceResolverServerCertificateArgs> serverCertificates) {
            return serverCertificates(Output.of(serverCertificates));
        }

        /**
         * @param serverCertificates Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(EkmConnectionServiceResolverServerCertificateArgs... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }

        /**
         * @param serviceDirectoryService Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*&#47;locations/*&#47;namespaces/*&#47;services/*
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryService(Output<String> serviceDirectoryService) {
            $.serviceDirectoryService = serviceDirectoryService;
            return this;
        }

        /**
         * @param serviceDirectoryService Required. The resource name of the Service Directory service pointing to an EKM replica, in the format projects/*&#47;locations/*&#47;namespaces/*&#47;services/*
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryService(String serviceDirectoryService) {
            return serviceDirectoryService(Output.of(serviceDirectoryService));
        }

        public EkmConnectionServiceResolverArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("EkmConnectionServiceResolverArgs", "hostname");
            }
            if ($.serverCertificates == null) {
                throw new MissingRequiredPropertyException("EkmConnectionServiceResolverArgs", "serverCertificates");
            }
            if ($.serviceDirectoryService == null) {
                throw new MissingRequiredPropertyException("EkmConnectionServiceResolverArgs", "serviceDirectoryService");
            }
            return $;
        }
    }

}
