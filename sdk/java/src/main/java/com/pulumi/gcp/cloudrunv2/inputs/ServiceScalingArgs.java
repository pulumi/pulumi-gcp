// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceScalingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceScalingArgs Empty = new ServiceScalingArgs();

    /**
     * Total instance count for the service in manual scaling mode. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving.
     * 
     */
    @Import(name="manualInstanceCount")
    private @Nullable Output<Integer> manualInstanceCount;

    /**
     * @return Total instance count for the service in manual scaling mode. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving.
     * 
     */
    public Optional<Output<Integer>> manualInstanceCount() {
        return Optional.ofNullable(this.manualInstanceCount);
    }

    /**
     * Combined maximum number of instances for all revisions receiving traffic.
     * 
     */
    @Import(name="maxInstanceCount")
    private @Nullable Output<Integer> maxInstanceCount;

    /**
     * @return Combined maximum number of instances for all revisions receiving traffic.
     * 
     */
    public Optional<Output<Integer>> maxInstanceCount() {
        return Optional.ofNullable(this.maxInstanceCount);
    }

    /**
     * Minimum number of instances for the service, to be divided among all revisions receiving traffic.
     * 
     */
    @Import(name="minInstanceCount")
    private @Nullable Output<Integer> minInstanceCount;

    /**
     * @return Minimum number of instances for the service, to be divided among all revisions receiving traffic.
     * 
     */
    public Optional<Output<Integer>> minInstanceCount() {
        return Optional.ofNullable(this.minInstanceCount);
    }

    /**
     * The [scaling mode](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#scalingmode) for the service.
     * Possible values are: `AUTOMATIC`, `MANUAL`.
     * 
     */
    @Import(name="scalingMode")
    private @Nullable Output<String> scalingMode;

    /**
     * @return The [scaling mode](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#scalingmode) for the service.
     * Possible values are: `AUTOMATIC`, `MANUAL`.
     * 
     */
    public Optional<Output<String>> scalingMode() {
        return Optional.ofNullable(this.scalingMode);
    }

    private ServiceScalingArgs() {}

    private ServiceScalingArgs(ServiceScalingArgs $) {
        this.manualInstanceCount = $.manualInstanceCount;
        this.maxInstanceCount = $.maxInstanceCount;
        this.minInstanceCount = $.minInstanceCount;
        this.scalingMode = $.scalingMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceScalingArgs $;

        public Builder() {
            $ = new ServiceScalingArgs();
        }

        public Builder(ServiceScalingArgs defaults) {
            $ = new ServiceScalingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manualInstanceCount Total instance count for the service in manual scaling mode. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving.
         * 
         * @return builder
         * 
         */
        public Builder manualInstanceCount(@Nullable Output<Integer> manualInstanceCount) {
            $.manualInstanceCount = manualInstanceCount;
            return this;
        }

        /**
         * @param manualInstanceCount Total instance count for the service in manual scaling mode. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving.
         * 
         * @return builder
         * 
         */
        public Builder manualInstanceCount(Integer manualInstanceCount) {
            return manualInstanceCount(Output.of(manualInstanceCount));
        }

        /**
         * @param maxInstanceCount Combined maximum number of instances for all revisions receiving traffic.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(@Nullable Output<Integer> maxInstanceCount) {
            $.maxInstanceCount = maxInstanceCount;
            return this;
        }

        /**
         * @param maxInstanceCount Combined maximum number of instances for all revisions receiving traffic.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(Integer maxInstanceCount) {
            return maxInstanceCount(Output.of(maxInstanceCount));
        }

        /**
         * @param minInstanceCount Minimum number of instances for the service, to be divided among all revisions receiving traffic.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(@Nullable Output<Integer> minInstanceCount) {
            $.minInstanceCount = minInstanceCount;
            return this;
        }

        /**
         * @param minInstanceCount Minimum number of instances for the service, to be divided among all revisions receiving traffic.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(Integer minInstanceCount) {
            return minInstanceCount(Output.of(minInstanceCount));
        }

        /**
         * @param scalingMode The [scaling mode](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#scalingmode) for the service.
         * Possible values are: `AUTOMATIC`, `MANUAL`.
         * 
         * @return builder
         * 
         */
        public Builder scalingMode(@Nullable Output<String> scalingMode) {
            $.scalingMode = scalingMode;
            return this;
        }

        /**
         * @param scalingMode The [scaling mode](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#scalingmode) for the service.
         * Possible values are: `AUTOMATIC`, `MANUAL`.
         * 
         * @return builder
         * 
         */
        public Builder scalingMode(String scalingMode) {
            return scalingMode(Output.of(scalingMode));
        }

        public ServiceScalingArgs build() {
            return $;
        }
    }

}
