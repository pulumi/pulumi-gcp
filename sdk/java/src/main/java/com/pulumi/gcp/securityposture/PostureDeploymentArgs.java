// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securityposture;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostureDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final PostureDeploymentArgs Empty = new PostureDeploymentArgs();

    /**
     * Description of the posture deployment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the posture deployment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The location of the resource, eg. global`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource, eg. global`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * ID of the posture deployment.
     * 
     */
    @Import(name="postureDeploymentId", required=true)
    private Output<String> postureDeploymentId;

    /**
     * @return ID of the posture deployment.
     * 
     */
    public Output<String> postureDeploymentId() {
        return this.postureDeploymentId;
    }

    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     * 
     */
    @Import(name="postureId", required=true)
    private Output<String> postureId;

    /**
     * @return Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     * 
     */
    public Output<String> postureId() {
        return this.postureId;
    }

    /**
     * Revision_id the posture which needs to be deployed.
     * 
     */
    @Import(name="postureRevisionId", required=true)
    private Output<String> postureRevisionId;

    /**
     * @return Revision_id the posture which needs to be deployed.
     * 
     */
    public Output<String> postureRevisionId() {
        return this.postureRevisionId;
    }

    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     * 
     */
    @Import(name="targetResource", required=true)
    private Output<String> targetResource;

    /**
     * @return The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     * 
     */
    public Output<String> targetResource() {
        return this.targetResource;
    }

    private PostureDeploymentArgs() {}

    private PostureDeploymentArgs(PostureDeploymentArgs $) {
        this.description = $.description;
        this.location = $.location;
        this.parent = $.parent;
        this.postureDeploymentId = $.postureDeploymentId;
        this.postureId = $.postureId;
        this.postureRevisionId = $.postureRevisionId;
        this.targetResource = $.targetResource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostureDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostureDeploymentArgs $;

        public Builder() {
            $ = new PostureDeploymentArgs();
        }

        public Builder(PostureDeploymentArgs defaults) {
            $ = new PostureDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param location The location of the resource, eg. global`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource, eg. global`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param postureDeploymentId ID of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder postureDeploymentId(Output<String> postureDeploymentId) {
            $.postureDeploymentId = postureDeploymentId;
            return this;
        }

        /**
         * @param postureDeploymentId ID of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder postureDeploymentId(String postureDeploymentId) {
            return postureDeploymentId(Output.of(postureDeploymentId));
        }

        /**
         * @param postureId Relative name of the posture which needs to be deployed. It should be in the format:
         * organizations/{organization_id}/locations/{location}/postures/{posture_id}
         * 
         * @return builder
         * 
         */
        public Builder postureId(Output<String> postureId) {
            $.postureId = postureId;
            return this;
        }

        /**
         * @param postureId Relative name of the posture which needs to be deployed. It should be in the format:
         * organizations/{organization_id}/locations/{location}/postures/{posture_id}
         * 
         * @return builder
         * 
         */
        public Builder postureId(String postureId) {
            return postureId(Output.of(postureId));
        }

        /**
         * @param postureRevisionId Revision_id the posture which needs to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder postureRevisionId(Output<String> postureRevisionId) {
            $.postureRevisionId = postureRevisionId;
            return this;
        }

        /**
         * @param postureRevisionId Revision_id the posture which needs to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder postureRevisionId(String postureRevisionId) {
            return postureRevisionId(Output.of(postureRevisionId));
        }

        /**
         * @param targetResource The resource on which the posture should be deployed. This can be in one of the following formats:
         * projects/{project_number},
         * folders/{folder_number},
         * organizations/{organization_id}
         * 
         * @return builder
         * 
         */
        public Builder targetResource(Output<String> targetResource) {
            $.targetResource = targetResource;
            return this;
        }

        /**
         * @param targetResource The resource on which the posture should be deployed. This can be in one of the following formats:
         * projects/{project_number},
         * folders/{folder_number},
         * organizations/{organization_id}
         * 
         * @return builder
         * 
         */
        public Builder targetResource(String targetResource) {
            return targetResource(Output.of(targetResource));
        }

        public PostureDeploymentArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PostureDeploymentArgs", "location");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("PostureDeploymentArgs", "parent");
            }
            if ($.postureDeploymentId == null) {
                throw new MissingRequiredPropertyException("PostureDeploymentArgs", "postureDeploymentId");
            }
            if ($.postureId == null) {
                throw new MissingRequiredPropertyException("PostureDeploymentArgs", "postureId");
            }
            if ($.postureRevisionId == null) {
                throw new MissingRequiredPropertyException("PostureDeploymentArgs", "postureRevisionId");
            }
            if ($.targetResource == null) {
                throw new MissingRequiredPropertyException("PostureDeploymentArgs", "targetResource");
            }
            return $;
        }
    }

}
