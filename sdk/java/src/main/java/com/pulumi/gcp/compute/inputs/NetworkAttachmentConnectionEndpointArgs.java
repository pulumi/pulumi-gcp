// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAttachmentConnectionEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAttachmentConnectionEndpointArgs Empty = new NetworkAttachmentConnectionEndpointArgs();

    /**
     * (Output)
     * The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return (Output)
     * The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * (Output)
     * The project id or number of the interface to which the IP was assigned.
     * 
     */
    @Import(name="projectIdOrNum")
    private @Nullable Output<String> projectIdOrNum;

    /**
     * @return (Output)
     * The project id or number of the interface to which the IP was assigned.
     * 
     */
    public Optional<Output<String>> projectIdOrNum() {
        return Optional.ofNullable(this.projectIdOrNum);
    }

    /**
     * (Output)
     * Alias IP ranges from the same subnetwork.
     * 
     */
    @Import(name="secondaryIpCidrRanges")
    private @Nullable Output<String> secondaryIpCidrRanges;

    /**
     * @return (Output)
     * Alias IP ranges from the same subnetwork.
     * 
     */
    public Optional<Output<String>> secondaryIpCidrRanges() {
        return Optional.ofNullable(this.secondaryIpCidrRanges);
    }

    /**
     * (Output)
     * The status of a connected endpoint to this network attachment.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Output)
     * The status of a connected endpoint to this network attachment.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * (Output)
     * The subnetwork used to assign the IP to the producer instance network interface.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return (Output)
     * The subnetwork used to assign the IP to the producer instance network interface.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    private NetworkAttachmentConnectionEndpointArgs() {}

    private NetworkAttachmentConnectionEndpointArgs(NetworkAttachmentConnectionEndpointArgs $) {
        this.ipAddress = $.ipAddress;
        this.projectIdOrNum = $.projectIdOrNum;
        this.secondaryIpCidrRanges = $.secondaryIpCidrRanges;
        this.status = $.status;
        this.subnetwork = $.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAttachmentConnectionEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAttachmentConnectionEndpointArgs $;

        public Builder() {
            $ = new NetworkAttachmentConnectionEndpointArgs();
        }

        public Builder(NetworkAttachmentConnectionEndpointArgs defaults) {
            $ = new NetworkAttachmentConnectionEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress (Output)
         * The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress (Output)
         * The IPv4 address assigned to the producer instance network interface. This value will be a range in case of Serverless.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param projectIdOrNum (Output)
         * The project id or number of the interface to which the IP was assigned.
         * 
         * @return builder
         * 
         */
        public Builder projectIdOrNum(@Nullable Output<String> projectIdOrNum) {
            $.projectIdOrNum = projectIdOrNum;
            return this;
        }

        /**
         * @param projectIdOrNum (Output)
         * The project id or number of the interface to which the IP was assigned.
         * 
         * @return builder
         * 
         */
        public Builder projectIdOrNum(String projectIdOrNum) {
            return projectIdOrNum(Output.of(projectIdOrNum));
        }

        /**
         * @param secondaryIpCidrRanges (Output)
         * Alias IP ranges from the same subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpCidrRanges(@Nullable Output<String> secondaryIpCidrRanges) {
            $.secondaryIpCidrRanges = secondaryIpCidrRanges;
            return this;
        }

        /**
         * @param secondaryIpCidrRanges (Output)
         * Alias IP ranges from the same subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpCidrRanges(String secondaryIpCidrRanges) {
            return secondaryIpCidrRanges(Output.of(secondaryIpCidrRanges));
        }

        /**
         * @param status (Output)
         * The status of a connected endpoint to this network attachment.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Output)
         * The status of a connected endpoint to this network attachment.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subnetwork (Output)
         * The subnetwork used to assign the IP to the producer instance network interface.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork (Output)
         * The subnetwork used to assign the IP to the producer instance network interface.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        public NetworkAttachmentConnectionEndpointArgs build() {
            return $;
        }
    }

}
