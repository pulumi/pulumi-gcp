// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkmanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConnectivityTestsConnectivityTestDestination {
    /**
     * @return A Cloud SQL instance URI.
     * 
     */
    private String cloudSqlInstance;
    /**
     * @return Forwarding rule URI. Forwarding rules are frontends for load balancers,
     * PSC endpoints, and Protocol Forwarding.
     * 
     */
    private String forwardingRule;
    /**
     * @return A DNS endpoint of Google Kubernetes Engine cluster control plane.
     * 
     */
    private String fqdn;
    /**
     * @return A cluster URI for Google Kubernetes Engine cluster control plane.
     * 
     */
    private String gkeMasterCluster;
    /**
     * @return A Compute Engine instance URI.
     * 
     */
    private String instance;
    /**
     * @return The IP address of the endpoint.
     * 
     */
    private String ipAddress;
    /**
     * @return A VPC network URI.
     * 
     */
    private String network;
    /**
     * @return The IP protocol port of the endpoint.
     * 
     */
    private Integer port;
    /**
     * @return Project ID where the endpoint is located.
     * 
     */
    private String projectId;
    /**
     * @return A Redis Cluster URI.
     * 
     */
    private String redisCluster;
    /**
     * @return A Redis Instance URI.
     * 
     */
    private String redisInstance;

    private GetConnectivityTestsConnectivityTestDestination() {}
    /**
     * @return A Cloud SQL instance URI.
     * 
     */
    public String cloudSqlInstance() {
        return this.cloudSqlInstance;
    }
    /**
     * @return Forwarding rule URI. Forwarding rules are frontends for load balancers,
     * PSC endpoints, and Protocol Forwarding.
     * 
     */
    public String forwardingRule() {
        return this.forwardingRule;
    }
    /**
     * @return A DNS endpoint of Google Kubernetes Engine cluster control plane.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return A cluster URI for Google Kubernetes Engine cluster control plane.
     * 
     */
    public String gkeMasterCluster() {
        return this.gkeMasterCluster;
    }
    /**
     * @return A Compute Engine instance URI.
     * 
     */
    public String instance() {
        return this.instance;
    }
    /**
     * @return The IP address of the endpoint.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return A VPC network URI.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The IP protocol port of the endpoint.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Project ID where the endpoint is located.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return A Redis Cluster URI.
     * 
     */
    public String redisCluster() {
        return this.redisCluster;
    }
    /**
     * @return A Redis Instance URI.
     * 
     */
    public String redisInstance() {
        return this.redisInstance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectivityTestsConnectivityTestDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cloudSqlInstance;
        private String forwardingRule;
        private String fqdn;
        private String gkeMasterCluster;
        private String instance;
        private String ipAddress;
        private String network;
        private Integer port;
        private String projectId;
        private String redisCluster;
        private String redisInstance;
        public Builder() {}
        public Builder(GetConnectivityTestsConnectivityTestDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudSqlInstance = defaults.cloudSqlInstance;
    	      this.forwardingRule = defaults.forwardingRule;
    	      this.fqdn = defaults.fqdn;
    	      this.gkeMasterCluster = defaults.gkeMasterCluster;
    	      this.instance = defaults.instance;
    	      this.ipAddress = defaults.ipAddress;
    	      this.network = defaults.network;
    	      this.port = defaults.port;
    	      this.projectId = defaults.projectId;
    	      this.redisCluster = defaults.redisCluster;
    	      this.redisInstance = defaults.redisInstance;
        }

        @CustomType.Setter
        public Builder cloudSqlInstance(String cloudSqlInstance) {
            if (cloudSqlInstance == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "cloudSqlInstance");
            }
            this.cloudSqlInstance = cloudSqlInstance;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingRule(String forwardingRule) {
            if (forwardingRule == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "forwardingRule");
            }
            this.forwardingRule = forwardingRule;
            return this;
        }
        @CustomType.Setter
        public Builder fqdn(String fqdn) {
            if (fqdn == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "fqdn");
            }
            this.fqdn = fqdn;
            return this;
        }
        @CustomType.Setter
        public Builder gkeMasterCluster(String gkeMasterCluster) {
            if (gkeMasterCluster == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "gkeMasterCluster");
            }
            this.gkeMasterCluster = gkeMasterCluster;
            return this;
        }
        @CustomType.Setter
        public Builder instance(String instance) {
            if (instance == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "instance");
            }
            this.instance = instance;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder redisCluster(String redisCluster) {
            if (redisCluster == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "redisCluster");
            }
            this.redisCluster = redisCluster;
            return this;
        }
        @CustomType.Setter
        public Builder redisInstance(String redisInstance) {
            if (redisInstance == null) {
              throw new MissingRequiredPropertyException("GetConnectivityTestsConnectivityTestDestination", "redisInstance");
            }
            this.redisInstance = redisInstance;
            return this;
        }
        public GetConnectivityTestsConnectivityTestDestination build() {
            final var _resultValue = new GetConnectivityTestsConnectivityTestDestination();
            _resultValue.cloudSqlInstance = cloudSqlInstance;
            _resultValue.forwardingRule = forwardingRule;
            _resultValue.fqdn = fqdn;
            _resultValue.gkeMasterCluster = gkeMasterCluster;
            _resultValue.instance = instance;
            _resultValue.ipAddress = ipAddress;
            _resultValue.network = network;
            _resultValue.port = port;
            _resultValue.projectId = projectId;
            _resultValue.redisCluster = redisCluster;
            _resultValue.redisInstance = redisInstance;
            return _resultValue;
        }
    }
}
