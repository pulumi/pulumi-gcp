// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsBanThresholdArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPolicyRuleRateLimitOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyRuleRateLimitOptionsArgs Empty = new SecurityPolicyRuleRateLimitOptionsArgs();

    /**
     * Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    @Import(name="banDurationSec")
    private @Nullable Output<Integer> banDurationSec;

    /**
     * @return Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    public Optional<Output<Integer>> banDurationSec() {
        return Optional.ofNullable(this.banDurationSec);
    }

    /**
     * Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
     * If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
     * Structure is documented below.
     * 
     */
    @Import(name="banThreshold")
    private @Nullable Output<SecurityPolicyRuleRateLimitOptionsBanThresholdArgs> banThreshold;

    /**
     * @return Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
     * If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SecurityPolicyRuleRateLimitOptionsBanThresholdArgs>> banThreshold() {
        return Optional.ofNullable(this.banThreshold);
    }

    /**
     * Action to take for requests that are under the configured rate limit threshold.
     * Valid option is &#34;allow&#34; only.
     * 
     */
    @Import(name="conformAction")
    private @Nullable Output<String> conformAction;

    /**
     * @return Action to take for requests that are under the configured rate limit threshold.
     * Valid option is &#34;allow&#34; only.
     * 
     */
    public Optional<Output<String>> conformAction() {
        return Optional.ofNullable(this.conformAction);
    }

    /**
     * Determines the key to enforce the rateLimitThreshold on. Possible values are:
     * * ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if &#34;enforceOnKey&#34; is not configured.
     * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
     * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
     * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP.
     * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes.
     * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
     * * REGION_CODE: The country/region from which the request originates.
     * * TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * TLS_JA4_FINGERPRINT: JA4 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * USER_IP: The IP address of the originating client, which is resolved based on &#34;userIpRequestHeaders&#34; configured with the security policy. If there is no &#34;userIpRequestHeaders&#34; configuration or an IP address cannot be resolved from it, the key type defaults to IP.
     *   Possible values are: `ALL`, `IP`, `HTTP_HEADER`, `XFF_IP`, `HTTP_COOKIE`, `HTTP_PATH`, `SNI`, `REGION_CODE`, `TLS_JA3_FINGERPRINT`, `TLS_JA4_FINGERPRINT`, `USER_IP`.
     * 
     */
    @Import(name="enforceOnKey")
    private @Nullable Output<String> enforceOnKey;

    /**
     * @return Determines the key to enforce the rateLimitThreshold on. Possible values are:
     * * ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if &#34;enforceOnKey&#34; is not configured.
     * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
     * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
     * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP.
     * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
     * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes.
     * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
     * * REGION_CODE: The country/region from which the request originates.
     * * TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * TLS_JA4_FINGERPRINT: JA4 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
     * * USER_IP: The IP address of the originating client, which is resolved based on &#34;userIpRequestHeaders&#34; configured with the security policy. If there is no &#34;userIpRequestHeaders&#34; configuration or an IP address cannot be resolved from it, the key type defaults to IP.
     *   Possible values are: `ALL`, `IP`, `HTTP_HEADER`, `XFF_IP`, `HTTP_COOKIE`, `HTTP_PATH`, `SNI`, `REGION_CODE`, `TLS_JA3_FINGERPRINT`, `TLS_JA4_FINGERPRINT`, `USER_IP`.
     * 
     */
    public Optional<Output<String>> enforceOnKey() {
        return Optional.ofNullable(this.enforceOnKey);
    }

    /**
     * If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
     * You can specify up to 3 enforceOnKeyConfigs.
     * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
     * Structure is documented below.
     * 
     */
    @Import(name="enforceOnKeyConfigs")
    private @Nullable Output<List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs>> enforceOnKeyConfigs;

    /**
     * @return If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
     * You can specify up to 3 enforceOnKeyConfigs.
     * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs>>> enforceOnKeyConfigs() {
        return Optional.ofNullable(this.enforceOnKeyConfigs);
    }

    /**
     * Rate limit key name applicable only for the following key types:
     * HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value.
     * HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    @Import(name="enforceOnKeyName")
    private @Nullable Output<String> enforceOnKeyName;

    /**
     * @return Rate limit key name applicable only for the following key types:
     * HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value.
     * HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    public Optional<Output<String>> enforceOnKeyName() {
        return Optional.ofNullable(this.enforceOnKeyName);
    }

    /**
     * Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint.
     * Valid options are deny(STATUS), where valid values for STATUS are 403, 404, 429, and 502.
     * 
     */
    @Import(name="exceedAction")
    private @Nullable Output<String> exceedAction;

    /**
     * @return Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint.
     * Valid options are deny(STATUS), where valid values for STATUS are 403, 404, 429, and 502.
     * 
     */
    public Optional<Output<String>> exceedAction() {
        return Optional.ofNullable(this.exceedAction);
    }

    /**
     * Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. This field is only supported in Global Security Policies of type CLOUD_ARMOR.
     * Structure is documented below.
     * 
     */
    @Import(name="exceedRedirectOptions")
    private @Nullable Output<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs> exceedRedirectOptions;

    /**
     * @return Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. This field is only supported in Global Security Policies of type CLOUD_ARMOR.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs>> exceedRedirectOptions() {
        return Optional.ofNullable(this.exceedRedirectOptions);
    }

    /**
     * Threshold at which to begin ratelimiting.
     * Structure is documented below.
     * 
     */
    @Import(name="rateLimitThreshold")
    private @Nullable Output<SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs> rateLimitThreshold;

    /**
     * @return Threshold at which to begin ratelimiting.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs>> rateLimitThreshold() {
        return Optional.ofNullable(this.rateLimitThreshold);
    }

    private SecurityPolicyRuleRateLimitOptionsArgs() {}

    private SecurityPolicyRuleRateLimitOptionsArgs(SecurityPolicyRuleRateLimitOptionsArgs $) {
        this.banDurationSec = $.banDurationSec;
        this.banThreshold = $.banThreshold;
        this.conformAction = $.conformAction;
        this.enforceOnKey = $.enforceOnKey;
        this.enforceOnKeyConfigs = $.enforceOnKeyConfigs;
        this.enforceOnKeyName = $.enforceOnKeyName;
        this.exceedAction = $.exceedAction;
        this.exceedRedirectOptions = $.exceedRedirectOptions;
        this.rateLimitThreshold = $.rateLimitThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyRuleRateLimitOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyRuleRateLimitOptionsArgs $;

        public Builder() {
            $ = new SecurityPolicyRuleRateLimitOptionsArgs();
        }

        public Builder(SecurityPolicyRuleRateLimitOptionsArgs defaults) {
            $ = new SecurityPolicyRuleRateLimitOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param banDurationSec Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
         * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
         * 
         * @return builder
         * 
         */
        public Builder banDurationSec(@Nullable Output<Integer> banDurationSec) {
            $.banDurationSec = banDurationSec;
            return this;
        }

        /**
         * @param banDurationSec Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
         * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
         * 
         * @return builder
         * 
         */
        public Builder banDurationSec(Integer banDurationSec) {
            return banDurationSec(Output.of(banDurationSec));
        }

        /**
         * @param banThreshold Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
         * If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder banThreshold(@Nullable Output<SecurityPolicyRuleRateLimitOptionsBanThresholdArgs> banThreshold) {
            $.banThreshold = banThreshold;
            return this;
        }

        /**
         * @param banThreshold Can only be specified if the action for the rule is &#34;rateBasedBan&#34;.
         * If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder banThreshold(SecurityPolicyRuleRateLimitOptionsBanThresholdArgs banThreshold) {
            return banThreshold(Output.of(banThreshold));
        }

        /**
         * @param conformAction Action to take for requests that are under the configured rate limit threshold.
         * Valid option is &#34;allow&#34; only.
         * 
         * @return builder
         * 
         */
        public Builder conformAction(@Nullable Output<String> conformAction) {
            $.conformAction = conformAction;
            return this;
        }

        /**
         * @param conformAction Action to take for requests that are under the configured rate limit threshold.
         * Valid option is &#34;allow&#34; only.
         * 
         * @return builder
         * 
         */
        public Builder conformAction(String conformAction) {
            return conformAction(Output.of(conformAction));
        }

        /**
         * @param enforceOnKey Determines the key to enforce the rateLimitThreshold on. Possible values are:
         * * ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if &#34;enforceOnKey&#34; is not configured.
         * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
         * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
         * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP.
         * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
         * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes.
         * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
         * * REGION_CODE: The country/region from which the request originates.
         * * TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
         * * TLS_JA4_FINGERPRINT: JA4 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
         * * USER_IP: The IP address of the originating client, which is resolved based on &#34;userIpRequestHeaders&#34; configured with the security policy. If there is no &#34;userIpRequestHeaders&#34; configuration or an IP address cannot be resolved from it, the key type defaults to IP.
         *   Possible values are: `ALL`, `IP`, `HTTP_HEADER`, `XFF_IP`, `HTTP_COOKIE`, `HTTP_PATH`, `SNI`, `REGION_CODE`, `TLS_JA3_FINGERPRINT`, `TLS_JA4_FINGERPRINT`, `USER_IP`.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKey(@Nullable Output<String> enforceOnKey) {
            $.enforceOnKey = enforceOnKey;
            return this;
        }

        /**
         * @param enforceOnKey Determines the key to enforce the rateLimitThreshold on. Possible values are:
         * * ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if &#34;enforceOnKey&#34; is not configured.
         * * IP: The source IP address of the request is the key. Each IP has this limit enforced separately.
         * * HTTP_HEADER: The value of the HTTP header whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL.
         * * XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP.
         * * HTTP_COOKIE: The value of the HTTP cookie whose name is configured under &#34;enforceOnKeyName&#34;. The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL.
         * * HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes.
         * * SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session.
         * * REGION_CODE: The country/region from which the request originates.
         * * TLS_JA3_FINGERPRINT: JA3 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
         * * TLS_JA4_FINGERPRINT: JA4 TLS/SSL fingerprint if the client connects using HTTPS, HTTP/2 or HTTP/3. If not available, the key type defaults to ALL.
         * * USER_IP: The IP address of the originating client, which is resolved based on &#34;userIpRequestHeaders&#34; configured with the security policy. If there is no &#34;userIpRequestHeaders&#34; configuration or an IP address cannot be resolved from it, the key type defaults to IP.
         *   Possible values are: `ALL`, `IP`, `HTTP_HEADER`, `XFF_IP`, `HTTP_COOKIE`, `HTTP_PATH`, `SNI`, `REGION_CODE`, `TLS_JA3_FINGERPRINT`, `TLS_JA4_FINGERPRINT`, `USER_IP`.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKey(String enforceOnKey) {
            return enforceOnKey(Output.of(enforceOnKey));
        }

        /**
         * @param enforceOnKeyConfigs If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
         * You can specify up to 3 enforceOnKeyConfigs.
         * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyConfigs(@Nullable Output<List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs>> enforceOnKeyConfigs) {
            $.enforceOnKeyConfigs = enforceOnKeyConfigs;
            return this;
        }

        /**
         * @param enforceOnKeyConfigs If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
         * You can specify up to 3 enforceOnKeyConfigs.
         * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyConfigs(List<SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs> enforceOnKeyConfigs) {
            return enforceOnKeyConfigs(Output.of(enforceOnKeyConfigs));
        }

        /**
         * @param enforceOnKeyConfigs If specified, any combination of values of enforceOnKeyType/enforceOnKeyName is treated as the key on which ratelimit threshold/action is enforced.
         * You can specify up to 3 enforceOnKeyConfigs.
         * If enforceOnKeyConfigs is specified, enforceOnKey must not be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyConfigs(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfigArgs... enforceOnKeyConfigs) {
            return enforceOnKeyConfigs(List.of(enforceOnKeyConfigs));
        }

        /**
         * @param enforceOnKeyName Rate limit key name applicable only for the following key types:
         * HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value.
         * HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyName(@Nullable Output<String> enforceOnKeyName) {
            $.enforceOnKeyName = enforceOnKeyName;
            return this;
        }

        /**
         * @param enforceOnKeyName Rate limit key name applicable only for the following key types:
         * HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value.
         * HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyName(String enforceOnKeyName) {
            return enforceOnKeyName(Output.of(enforceOnKeyName));
        }

        /**
         * @param exceedAction Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint.
         * Valid options are deny(STATUS), where valid values for STATUS are 403, 404, 429, and 502.
         * 
         * @return builder
         * 
         */
        public Builder exceedAction(@Nullable Output<String> exceedAction) {
            $.exceedAction = exceedAction;
            return this;
        }

        /**
         * @param exceedAction Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint.
         * Valid options are deny(STATUS), where valid values for STATUS are 403, 404, 429, and 502.
         * 
         * @return builder
         * 
         */
        public Builder exceedAction(String exceedAction) {
            return exceedAction(Output.of(exceedAction));
        }

        /**
         * @param exceedRedirectOptions Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. This field is only supported in Global Security Policies of type CLOUD_ARMOR.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exceedRedirectOptions(@Nullable Output<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs> exceedRedirectOptions) {
            $.exceedRedirectOptions = exceedRedirectOptions;
            return this;
        }

        /**
         * @param exceedRedirectOptions Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. This field is only supported in Global Security Policies of type CLOUD_ARMOR.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exceedRedirectOptions(SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs exceedRedirectOptions) {
            return exceedRedirectOptions(Output.of(exceedRedirectOptions));
        }

        /**
         * @param rateLimitThreshold Threshold at which to begin ratelimiting.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(@Nullable Output<SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs> rateLimitThreshold) {
            $.rateLimitThreshold = rateLimitThreshold;
            return this;
        }

        /**
         * @param rateLimitThreshold Threshold at which to begin ratelimiting.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs rateLimitThreshold) {
            return rateLimitThreshold(Output.of(rateLimitThreshold));
        }

        public SecurityPolicyRuleRateLimitOptionsArgs build() {
            return $;
        }
    }

}
