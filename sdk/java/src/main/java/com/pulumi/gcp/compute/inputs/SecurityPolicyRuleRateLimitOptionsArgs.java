// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsBanThresholdArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs;
import com.pulumi.gcp.compute.inputs.SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPolicyRuleRateLimitOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyRuleRateLimitOptionsArgs Empty = new SecurityPolicyRuleRateLimitOptionsArgs();

    /**
     * Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    @Import(name="banDurationSec")
    private @Nullable Output<Integer> banDurationSec;

    /**
     * @return Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
     * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    public Optional<Output<Integer>> banDurationSec() {
        return Optional.ofNullable(this.banDurationSec);
    }

    /**
     * Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
     * If specified, the key will be banned for the configured &#39;ban_duration_sec&#39; when the number of requests that exceed the &#39;rate_limit_threshold&#39; also
     * exceed this &#39;ban_threshold&#39;. Structure is documented below.
     * 
     */
    @Import(name="banThreshold")
    private @Nullable Output<SecurityPolicyRuleRateLimitOptionsBanThresholdArgs> banThreshold;

    /**
     * @return Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
     * If specified, the key will be banned for the configured &#39;ban_duration_sec&#39; when the number of requests that exceed the &#39;rate_limit_threshold&#39; also
     * exceed this &#39;ban_threshold&#39;. Structure is documented below.
     * 
     */
    public Optional<Output<SecurityPolicyRuleRateLimitOptionsBanThresholdArgs>> banThreshold() {
        return Optional.ofNullable(this.banThreshold);
    }

    /**
     * Action to take for requests that are under the configured rate limit threshold. Valid option is &#34;allow&#34; only.
     * 
     */
    @Import(name="conformAction", required=true)
    private Output<String> conformAction;

    /**
     * @return Action to take for requests that are under the configured rate limit threshold. Valid option is &#34;allow&#34; only.
     * 
     */
    public Output<String> conformAction() {
        return this.conformAction;
    }

    /**
     * Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to &#34;ALL&#34;.
     * 
     */
    @Import(name="enforceOnKey")
    private @Nullable Output<String> enforceOnKey;

    /**
     * @return Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to &#34;ALL&#34;.
     * 
     */
    public Optional<Output<String>> enforceOnKey() {
        return Optional.ofNullable(this.enforceOnKey);
    }

    /**
     * Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    @Import(name="enforceOnKeyName")
    private @Nullable Output<String> enforceOnKeyName;

    /**
     * @return Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    public Optional<Output<String>> enforceOnKeyName() {
        return Optional.ofNullable(this.enforceOnKeyName);
    }

    /**
     * When a request is denied, returns the HTTP response code specified.
     * Valid options are &#34;deny()&#34; where valid values for status are 403, 404, 429, and 502.
     * 
     */
    @Import(name="exceedAction", required=true)
    private Output<String> exceedAction;

    /**
     * @return When a request is denied, returns the HTTP response code specified.
     * Valid options are &#34;deny()&#34; where valid values for status are 403, 404, 429, and 502.
     * 
     */
    public Output<String> exceedAction() {
        return this.exceedAction;
    }

    /**
     * Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. Structure is documented below.
     * 
     */
    @Import(name="exceedRedirectOptions")
    private @Nullable Output<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs> exceedRedirectOptions;

    /**
     * @return Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. Structure is documented below.
     * 
     */
    public Optional<Output<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs>> exceedRedirectOptions() {
        return Optional.ofNullable(this.exceedRedirectOptions);
    }

    /**
     * Threshold at which to begin ratelimiting. Structure is documented below.
     * 
     */
    @Import(name="rateLimitThreshold", required=true)
    private Output<SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs> rateLimitThreshold;

    /**
     * @return Threshold at which to begin ratelimiting. Structure is documented below.
     * 
     */
    public Output<SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs> rateLimitThreshold() {
        return this.rateLimitThreshold;
    }

    private SecurityPolicyRuleRateLimitOptionsArgs() {}

    private SecurityPolicyRuleRateLimitOptionsArgs(SecurityPolicyRuleRateLimitOptionsArgs $) {
        this.banDurationSec = $.banDurationSec;
        this.banThreshold = $.banThreshold;
        this.conformAction = $.conformAction;
        this.enforceOnKey = $.enforceOnKey;
        this.enforceOnKeyName = $.enforceOnKeyName;
        this.exceedAction = $.exceedAction;
        this.exceedRedirectOptions = $.exceedRedirectOptions;
        this.rateLimitThreshold = $.rateLimitThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyRuleRateLimitOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyRuleRateLimitOptionsArgs $;

        public Builder() {
            $ = new SecurityPolicyRuleRateLimitOptionsArgs();
        }

        public Builder(SecurityPolicyRuleRateLimitOptionsArgs defaults) {
            $ = new SecurityPolicyRuleRateLimitOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param banDurationSec Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
         * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
         * 
         * @return builder
         * 
         */
        public Builder banDurationSec(@Nullable Output<Integer> banDurationSec) {
            $.banDurationSec = banDurationSec;
            return this;
        }

        /**
         * @param banDurationSec Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
         * If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
         * 
         * @return builder
         * 
         */
        public Builder banDurationSec(Integer banDurationSec) {
            return banDurationSec(Output.of(banDurationSec));
        }

        /**
         * @param banThreshold Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
         * If specified, the key will be banned for the configured &#39;ban_duration_sec&#39; when the number of requests that exceed the &#39;rate_limit_threshold&#39; also
         * exceed this &#39;ban_threshold&#39;. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder banThreshold(@Nullable Output<SecurityPolicyRuleRateLimitOptionsBanThresholdArgs> banThreshold) {
            $.banThreshold = banThreshold;
            return this;
        }

        /**
         * @param banThreshold Can only be specified if the `action` for the rule is &#34;rate_based_ban&#34;.
         * If specified, the key will be banned for the configured &#39;ban_duration_sec&#39; when the number of requests that exceed the &#39;rate_limit_threshold&#39; also
         * exceed this &#39;ban_threshold&#39;. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder banThreshold(SecurityPolicyRuleRateLimitOptionsBanThresholdArgs banThreshold) {
            return banThreshold(Output.of(banThreshold));
        }

        /**
         * @param conformAction Action to take for requests that are under the configured rate limit threshold. Valid option is &#34;allow&#34; only.
         * 
         * @return builder
         * 
         */
        public Builder conformAction(Output<String> conformAction) {
            $.conformAction = conformAction;
            return this;
        }

        /**
         * @param conformAction Action to take for requests that are under the configured rate limit threshold. Valid option is &#34;allow&#34; only.
         * 
         * @return builder
         * 
         */
        public Builder conformAction(String conformAction) {
            return conformAction(Output.of(conformAction));
        }

        /**
         * @param enforceOnKey Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to &#34;ALL&#34;.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKey(@Nullable Output<String> enforceOnKey) {
            $.enforceOnKey = enforceOnKey;
            return this;
        }

        /**
         * @param enforceOnKey Determines the key to enforce the rate_limit_threshold on. If not specified, defaults to &#34;ALL&#34;.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKey(String enforceOnKey) {
            return enforceOnKey(Output.of(enforceOnKey));
        }

        /**
         * @param enforceOnKeyName Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyName(@Nullable Output<String> enforceOnKeyName) {
            $.enforceOnKeyName = enforceOnKeyName;
            return this;
        }

        /**
         * @param enforceOnKeyName Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
         * 
         * @return builder
         * 
         */
        public Builder enforceOnKeyName(String enforceOnKeyName) {
            return enforceOnKeyName(Output.of(enforceOnKeyName));
        }

        /**
         * @param exceedAction When a request is denied, returns the HTTP response code specified.
         * Valid options are &#34;deny()&#34; where valid values for status are 403, 404, 429, and 502.
         * 
         * @return builder
         * 
         */
        public Builder exceedAction(Output<String> exceedAction) {
            $.exceedAction = exceedAction;
            return this;
        }

        /**
         * @param exceedAction When a request is denied, returns the HTTP response code specified.
         * Valid options are &#34;deny()&#34; where valid values for status are 403, 404, 429, and 502.
         * 
         * @return builder
         * 
         */
        public Builder exceedAction(String exceedAction) {
            return exceedAction(Output.of(exceedAction));
        }

        /**
         * @param exceedRedirectOptions Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exceedRedirectOptions(@Nullable Output<SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs> exceedRedirectOptions) {
            $.exceedRedirectOptions = exceedRedirectOptions;
            return this;
        }

        /**
         * @param exceedRedirectOptions Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder exceedRedirectOptions(SecurityPolicyRuleRateLimitOptionsExceedRedirectOptionsArgs exceedRedirectOptions) {
            return exceedRedirectOptions(Output.of(exceedRedirectOptions));
        }

        /**
         * @param rateLimitThreshold Threshold at which to begin ratelimiting. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(Output<SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs> rateLimitThreshold) {
            $.rateLimitThreshold = rateLimitThreshold;
            return this;
        }

        /**
         * @param rateLimitThreshold Threshold at which to begin ratelimiting. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(SecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs rateLimitThreshold) {
            return rateLimitThreshold(Output.of(rateLimitThreshold));
        }

        public SecurityPolicyRuleRateLimitOptionsArgs build() {
            $.conformAction = Objects.requireNonNull($.conformAction, "expected parameter 'conformAction' to be non-null");
            $.exceedAction = Objects.requireNonNull($.exceedAction, "expected parameter 'exceedAction' to be non-null");
            $.rateLimitThreshold = Objects.requireNonNull($.rateLimitThreshold, "expected parameter 'rateLimitThreshold' to be non-null");
            return $;
        }
    }

}
