// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FunctionEventTriggerEventFilter {
    /**
     * @return &#39;Required. The name of a CloudEvents attribute.
     * Currently, only a subset of attributes are supported for filtering. Use the `gcloud eventarc providers describe` command to learn more about events and their attributes.
     * Do not filter for the &#39;type&#39; attribute here, as this is already achieved by the resource&#39;s `event_type` attribute.
     * 
     */
    private String attribute;
    /**
     * @return Optional. The operator used for matching the events with the value of
     * the filter. If not specified, only events that have an exact key-value
     * pair specified in the filter are matched.
     * The only allowed value is `match-path-pattern`.
     * [See documentation on path patterns here](https://cloud.google.com/eventarc/docs/path-patterns)&#39;
     * 
     */
    private @Nullable String operator;
    /**
     * @return Required. The value for the attribute.
     * If the operator field is set as `match-path-pattern`, this value can be a path pattern instead of an exact value.
     * 
     */
    private String value;

    private FunctionEventTriggerEventFilter() {}
    /**
     * @return &#39;Required. The name of a CloudEvents attribute.
     * Currently, only a subset of attributes are supported for filtering. Use the `gcloud eventarc providers describe` command to learn more about events and their attributes.
     * Do not filter for the &#39;type&#39; attribute here, as this is already achieved by the resource&#39;s `event_type` attribute.
     * 
     */
    public String attribute() {
        return this.attribute;
    }
    /**
     * @return Optional. The operator used for matching the events with the value of
     * the filter. If not specified, only events that have an exact key-value
     * pair specified in the filter are matched.
     * The only allowed value is `match-path-pattern`.
     * [See documentation on path patterns here](https://cloud.google.com/eventarc/docs/path-patterns)&#39;
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }
    /**
     * @return Required. The value for the attribute.
     * If the operator field is set as `match-path-pattern`, this value can be a path pattern instead of an exact value.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FunctionEventTriggerEventFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attribute;
        private @Nullable String operator;
        private String value;
        public Builder() {}
        public Builder(FunctionEventTriggerEventFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attribute = defaults.attribute;
    	      this.operator = defaults.operator;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder attribute(String attribute) {
            this.attribute = Objects.requireNonNull(attribute);
            return this;
        }
        @CustomType.Setter
        public Builder operator(@Nullable String operator) {
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public FunctionEventTriggerEventFilter build() {
            final var o = new FunctionEventTriggerEventFilter();
            o.attribute = attribute;
            o.operator = operator;
            o.value = value;
            return o;
        }
    }
}
