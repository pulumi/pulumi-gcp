// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterPersistenceConfigRdbConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterPersistenceConfigRdbConfigArgs Empty = new ClusterPersistenceConfigRdbConfigArgs();

    /**
     * Optional. Available snapshot periods for scheduling.
     * - ONE_HOUR:	Snapshot every 1 hour.
     * - SIX_HOURS:	Snapshot every 6 hours.
     * - TWELVE_HOURS:	Snapshot every 12 hours.
     * - TWENTY_FOUR_HOURS:	Snapshot every 24 hours.
     *   Possible values are: `SNAPSHOT_PERIOD_UNSPECIFIED`, `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`.
     * 
     */
    @Import(name="rdbSnapshotPeriod")
    private @Nullable Output<String> rdbSnapshotPeriod;

    /**
     * @return Optional. Available snapshot periods for scheduling.
     * - ONE_HOUR:	Snapshot every 1 hour.
     * - SIX_HOURS:	Snapshot every 6 hours.
     * - TWELVE_HOURS:	Snapshot every 12 hours.
     * - TWENTY_FOUR_HOURS:	Snapshot every 24 hours.
     *   Possible values are: `SNAPSHOT_PERIOD_UNSPECIFIED`, `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`.
     * 
     */
    public Optional<Output<String>> rdbSnapshotPeriod() {
        return Optional.ofNullable(this.rdbSnapshotPeriod);
    }

    /**
     * The time that the first snapshot was/will be attempted, and to which
     * future snapshots will be aligned.
     * If not provided, the current time will be used.
     * 
     */
    @Import(name="rdbSnapshotStartTime")
    private @Nullable Output<String> rdbSnapshotStartTime;

    /**
     * @return The time that the first snapshot was/will be attempted, and to which
     * future snapshots will be aligned.
     * If not provided, the current time will be used.
     * 
     */
    public Optional<Output<String>> rdbSnapshotStartTime() {
        return Optional.ofNullable(this.rdbSnapshotStartTime);
    }

    private ClusterPersistenceConfigRdbConfigArgs() {}

    private ClusterPersistenceConfigRdbConfigArgs(ClusterPersistenceConfigRdbConfigArgs $) {
        this.rdbSnapshotPeriod = $.rdbSnapshotPeriod;
        this.rdbSnapshotStartTime = $.rdbSnapshotStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterPersistenceConfigRdbConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterPersistenceConfigRdbConfigArgs $;

        public Builder() {
            $ = new ClusterPersistenceConfigRdbConfigArgs();
        }

        public Builder(ClusterPersistenceConfigRdbConfigArgs defaults) {
            $ = new ClusterPersistenceConfigRdbConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rdbSnapshotPeriod Optional. Available snapshot periods for scheduling.
         * - ONE_HOUR:	Snapshot every 1 hour.
         * - SIX_HOURS:	Snapshot every 6 hours.
         * - TWELVE_HOURS:	Snapshot every 12 hours.
         * - TWENTY_FOUR_HOURS:	Snapshot every 24 hours.
         *   Possible values are: `SNAPSHOT_PERIOD_UNSPECIFIED`, `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`.
         * 
         * @return builder
         * 
         */
        public Builder rdbSnapshotPeriod(@Nullable Output<String> rdbSnapshotPeriod) {
            $.rdbSnapshotPeriod = rdbSnapshotPeriod;
            return this;
        }

        /**
         * @param rdbSnapshotPeriod Optional. Available snapshot periods for scheduling.
         * - ONE_HOUR:	Snapshot every 1 hour.
         * - SIX_HOURS:	Snapshot every 6 hours.
         * - TWELVE_HOURS:	Snapshot every 12 hours.
         * - TWENTY_FOUR_HOURS:	Snapshot every 24 hours.
         *   Possible values are: `SNAPSHOT_PERIOD_UNSPECIFIED`, `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`.
         * 
         * @return builder
         * 
         */
        public Builder rdbSnapshotPeriod(String rdbSnapshotPeriod) {
            return rdbSnapshotPeriod(Output.of(rdbSnapshotPeriod));
        }

        /**
         * @param rdbSnapshotStartTime The time that the first snapshot was/will be attempted, and to which
         * future snapshots will be aligned.
         * If not provided, the current time will be used.
         * 
         * @return builder
         * 
         */
        public Builder rdbSnapshotStartTime(@Nullable Output<String> rdbSnapshotStartTime) {
            $.rdbSnapshotStartTime = rdbSnapshotStartTime;
            return this;
        }

        /**
         * @param rdbSnapshotStartTime The time that the first snapshot was/will be attempted, and to which
         * future snapshots will be aligned.
         * If not provided, the current time will be used.
         * 
         * @return builder
         * 
         */
        public Builder rdbSnapshotStartTime(String rdbSnapshotStartTime) {
            return rdbSnapshotStartTime(Output.of(rdbSnapshotStartTime));
        }

        public ClusterPersistenceConfigRdbConfigArgs build() {
            return $;
        }
    }

}
