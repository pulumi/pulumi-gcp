// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterClusterConfigAuxiliaryNodeGroupNodeGroupNodeGroupConfigDiskConfig {
    /**
     * @return Size of the primary disk attached to each node, specified
     * in GB. The primary disk contains the boot volume and system libraries, and the
     * smallest allowed disk size is 10GB. GCP will default to a predetermined
     * computed value if not set (currently 500GB). Note: If SSDs are not
     * attached, it also contains the HDFS data blocks and Hadoop working directories.
     * 
     */
    private @Nullable Integer bootDiskSizeGb;
    /**
     * @return The disk type of the primary disk attached to each node.
     * One of `&#34;pd-ssd&#34;` or `&#34;pd-standard&#34;`. Defaults to `&#34;pd-standard&#34;`.
     * 
     */
    private @Nullable String bootDiskType;
    /**
     * @return Interface type of local SSDs (default is &#34;scsi&#34;). Valid values: &#34;scsi&#34; (Small Computer System Interface), &#34;nvme&#34; (Non-Volatile Memory Express).
     * 
     */
    private @Nullable String localSsdInterface;
    /**
     * @return The amount of local SSD disks that will be attached to each master cluster node.
     * Defaults to 0.
     * 
     */
    private @Nullable Integer numLocalSsds;

    private ClusterClusterConfigAuxiliaryNodeGroupNodeGroupNodeGroupConfigDiskConfig() {}
    /**
     * @return Size of the primary disk attached to each node, specified
     * in GB. The primary disk contains the boot volume and system libraries, and the
     * smallest allowed disk size is 10GB. GCP will default to a predetermined
     * computed value if not set (currently 500GB). Note: If SSDs are not
     * attached, it also contains the HDFS data blocks and Hadoop working directories.
     * 
     */
    public Optional<Integer> bootDiskSizeGb() {
        return Optional.ofNullable(this.bootDiskSizeGb);
    }
    /**
     * @return The disk type of the primary disk attached to each node.
     * One of `&#34;pd-ssd&#34;` or `&#34;pd-standard&#34;`. Defaults to `&#34;pd-standard&#34;`.
     * 
     */
    public Optional<String> bootDiskType() {
        return Optional.ofNullable(this.bootDiskType);
    }
    /**
     * @return Interface type of local SSDs (default is &#34;scsi&#34;). Valid values: &#34;scsi&#34; (Small Computer System Interface), &#34;nvme&#34; (Non-Volatile Memory Express).
     * 
     */
    public Optional<String> localSsdInterface() {
        return Optional.ofNullable(this.localSsdInterface);
    }
    /**
     * @return The amount of local SSD disks that will be attached to each master cluster node.
     * Defaults to 0.
     * 
     */
    public Optional<Integer> numLocalSsds() {
        return Optional.ofNullable(this.numLocalSsds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterClusterConfigAuxiliaryNodeGroupNodeGroupNodeGroupConfigDiskConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bootDiskSizeGb;
        private @Nullable String bootDiskType;
        private @Nullable String localSsdInterface;
        private @Nullable Integer numLocalSsds;
        public Builder() {}
        public Builder(ClusterClusterConfigAuxiliaryNodeGroupNodeGroupNodeGroupConfigDiskConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootDiskSizeGb = defaults.bootDiskSizeGb;
    	      this.bootDiskType = defaults.bootDiskType;
    	      this.localSsdInterface = defaults.localSsdInterface;
    	      this.numLocalSsds = defaults.numLocalSsds;
        }

        @CustomType.Setter
        public Builder bootDiskSizeGb(@Nullable Integer bootDiskSizeGb) {

            this.bootDiskSizeGb = bootDiskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder bootDiskType(@Nullable String bootDiskType) {

            this.bootDiskType = bootDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder localSsdInterface(@Nullable String localSsdInterface) {

            this.localSsdInterface = localSsdInterface;
            return this;
        }
        @CustomType.Setter
        public Builder numLocalSsds(@Nullable Integer numLocalSsds) {

            this.numLocalSsds = numLocalSsds;
            return this;
        }
        public ClusterClusterConfigAuxiliaryNodeGroupNodeGroupNodeGroupConfigDiskConfig build() {
            final var _resultValue = new ClusterClusterConfigAuxiliaryNodeGroupNodeGroupNodeGroupConfigDiskConfig();
            _resultValue.bootDiskSizeGb = bootDiskSizeGb;
            _resultValue.bootDiskType = bootDiskType;
            _resultValue.localSsdInterface = localSsdInterface;
            _resultValue.numLocalSsds = numLocalSsds;
            return _resultValue;
        }
    }
}
