// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.secretmanager.outputs.GetSecretsSecretReplication;
import com.pulumi.gcp.secretmanager.outputs.GetSecretsSecretRotation;
import com.pulumi.gcp.secretmanager.outputs.GetSecretsSecretTopic;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSecretsSecret {
    /**
     * @return Custom metadata about the secret.
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return The time at which the Secret was created.
     * 
     */
    private String createTime;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    /**
     * @return Timestamp in UTC when the Secret is scheduled to expire.
     * 
     */
    private String expireTime;
    /**
     * @return The labels assigned to this Secret.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The resource name of the Pub/Sub topic that will be published to.
     * 
     */
    private String name;
    /**
     * @return The ID of the project.
     * 
     */
    private String project;
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    private Map<String,String> pulumiLabels;
    /**
     * @return The replication policy of the secret data attached to the Secret.
     * Structure is documented below.
     * 
     */
    private List<GetSecretsSecretReplication> replications;
    /**
     * @return The rotation time and period for a Secret.
     * Structure is documented below.
     * 
     */
    private List<GetSecretsSecretRotation> rotations;
    /**
     * @return This must be unique within the project.
     * 
     */
    private String secretId;
    /**
     * @return A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
     * Structure is documented below.
     * 
     */
    private List<GetSecretsSecretTopic> topics;
    /**
     * @return The TTL for the Secret.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * Only one of &#39;ttl&#39; or &#39;expire_time&#39; can be provided.
     * 
     */
    private String ttl;
    /**
     * @return Mapping from version alias to version name.
     * 
     */
    private Map<String,String> versionAliases;

    private GetSecretsSecret() {}
    /**
     * @return Custom metadata about the secret.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return The time at which the Secret was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * @return Timestamp in UTC when the Secret is scheduled to expire.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The labels assigned to this Secret.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name of the Pub/Sub topic that will be published to.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * @return The replication policy of the secret data attached to the Secret.
     * Structure is documented below.
     * 
     */
    public List<GetSecretsSecretReplication> replications() {
        return this.replications;
    }
    /**
     * @return The rotation time and period for a Secret.
     * Structure is documented below.
     * 
     */
    public List<GetSecretsSecretRotation> rotations() {
        return this.rotations;
    }
    /**
     * @return This must be unique within the project.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
     * Structure is documented below.
     * 
     */
    public List<GetSecretsSecretTopic> topics() {
        return this.topics;
    }
    /**
     * @return The TTL for the Secret.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * Only one of &#39;ttl&#39; or &#39;expire_time&#39; can be provided.
     * 
     */
    public String ttl() {
        return this.ttl;
    }
    /**
     * @return Mapping from version alias to version name.
     * 
     */
    public Map<String,String> versionAliases() {
        return this.versionAliases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretsSecret defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String createTime;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private String expireTime;
        private Map<String,String> labels;
        private String name;
        private String project;
        private Map<String,String> pulumiLabels;
        private List<GetSecretsSecretReplication> replications;
        private List<GetSecretsSecretRotation> rotations;
        private String secretId;
        private List<GetSecretsSecretTopic> topics;
        private String ttl;
        private Map<String,String> versionAliases;
        public Builder() {}
        public Builder(GetSecretsSecret defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.createTime = defaults.createTime;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.expireTime = defaults.expireTime;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.replications = defaults.replications;
    	      this.rotations = defaults.rotations;
    	      this.secretId = defaults.secretId;
    	      this.topics = defaults.topics;
    	      this.ttl = defaults.ttl;
    	      this.versionAliases = defaults.versionAliases;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder replications(List<GetSecretsSecretReplication> replications) {
            if (replications == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "replications");
            }
            this.replications = replications;
            return this;
        }
        public Builder replications(GetSecretsSecretReplication... replications) {
            return replications(List.of(replications));
        }
        @CustomType.Setter
        public Builder rotations(List<GetSecretsSecretRotation> rotations) {
            if (rotations == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "rotations");
            }
            this.rotations = rotations;
            return this;
        }
        public Builder rotations(GetSecretsSecretRotation... rotations) {
            return rotations(List.of(rotations));
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<GetSecretsSecretTopic> topics) {
            if (topics == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "topics");
            }
            this.topics = topics;
            return this;
        }
        public Builder topics(GetSecretsSecretTopic... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder ttl(String ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder versionAliases(Map<String,String> versionAliases) {
            if (versionAliases == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecret", "versionAliases");
            }
            this.versionAliases = versionAliases;
            return this;
        }
        public GetSecretsSecret build() {
            final var _resultValue = new GetSecretsSecret();
            _resultValue.annotations = annotations;
            _resultValue.createTime = createTime;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.expireTime = expireTime;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.replications = replications;
            _resultValue.rotations = rotations;
            _resultValue.secretId = secretId;
            _resultValue.topics = topics;
            _resultValue.ttl = ttl;
            _resultValue.versionAliases = versionAliases;
            return _resultValue;
        }
    }
}
