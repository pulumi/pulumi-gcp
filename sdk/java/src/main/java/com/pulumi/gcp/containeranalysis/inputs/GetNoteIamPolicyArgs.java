// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.containeranalysis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNoteIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNoteIamPolicyArgs Empty = new GetNoteIamPolicyArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="note", required=true)
    private Output<String> note;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> note() {
        return this.note;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetNoteIamPolicyArgs() {}

    private GetNoteIamPolicyArgs(GetNoteIamPolicyArgs $) {
        this.note = $.note;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNoteIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNoteIamPolicyArgs $;

        public Builder() {
            $ = new GetNoteIamPolicyArgs();
        }

        public Builder(GetNoteIamPolicyArgs defaults) {
            $ = new GetNoteIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param note Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder note(Output<String> note) {
            $.note = note;
            return this;
        }

        /**
         * @param note Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder note(String note) {
            return note(Output.of(note));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetNoteIamPolicyArgs build() {
            if ($.note == null) {
                throw new MissingRequiredPropertyException("GetNoteIamPolicyArgs", "note");
            }
            return $;
        }
    }

}
