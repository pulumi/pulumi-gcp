// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotSourceDiskEncryptionKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotSourceDiskEncryptionKeyArgs Empty = new SnapshotSourceDiskEncryptionKeyArgs();

    /**
     * The service account used for the encryption request for the given KMS key.
     * If absent, the Compute Engine Service Agent service account is used.
     * 
     */
    @Import(name="kmsKeyServiceAccount")
    private @Nullable Output<String> kmsKeyServiceAccount;

    /**
     * @return The service account used for the encryption request for the given KMS key.
     * If absent, the Compute Engine Service Agent service account is used.
     * 
     */
    public Optional<Output<String>> kmsKeyServiceAccount() {
        return Optional.ofNullable(this.kmsKeyServiceAccount);
    }

    /**
     * Specifies a 256-bit customer-supplied encryption key, encoded in
     * RFC 4648 base64 to either encrypt or decrypt this resource.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="rawKey")
    private @Nullable Output<String> rawKey;

    /**
     * @return Specifies a 256-bit customer-supplied encryption key, encoded in
     * RFC 4648 base64 to either encrypt or decrypt this resource.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> rawKey() {
        return Optional.ofNullable(this.rawKey);
    }

    private SnapshotSourceDiskEncryptionKeyArgs() {}

    private SnapshotSourceDiskEncryptionKeyArgs(SnapshotSourceDiskEncryptionKeyArgs $) {
        this.kmsKeyServiceAccount = $.kmsKeyServiceAccount;
        this.rawKey = $.rawKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotSourceDiskEncryptionKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotSourceDiskEncryptionKeyArgs $;

        public Builder() {
            $ = new SnapshotSourceDiskEncryptionKeyArgs();
        }

        public Builder(SnapshotSourceDiskEncryptionKeyArgs defaults) {
            $ = new SnapshotSourceDiskEncryptionKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kmsKeyServiceAccount The service account used for the encryption request for the given KMS key.
         * If absent, the Compute Engine Service Agent service account is used.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyServiceAccount(@Nullable Output<String> kmsKeyServiceAccount) {
            $.kmsKeyServiceAccount = kmsKeyServiceAccount;
            return this;
        }

        /**
         * @param kmsKeyServiceAccount The service account used for the encryption request for the given KMS key.
         * If absent, the Compute Engine Service Agent service account is used.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyServiceAccount(String kmsKeyServiceAccount) {
            return kmsKeyServiceAccount(Output.of(kmsKeyServiceAccount));
        }

        /**
         * @param rawKey Specifies a 256-bit customer-supplied encryption key, encoded in
         * RFC 4648 base64 to either encrypt or decrypt this resource.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder rawKey(@Nullable Output<String> rawKey) {
            $.rawKey = rawKey;
            return this;
        }

        /**
         * @param rawKey Specifies a 256-bit customer-supplied encryption key, encoded in
         * RFC 4648 base64 to either encrypt or decrypt this resource.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder rawKey(String rawKey) {
            return rawKey(Output.of(rawKey));
        }

        public SnapshotSourceDiskEncryptionKeyArgs build() {
            return $;
        }
    }

}
