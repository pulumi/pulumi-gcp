// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EdgeCacheServiceRoutingHostRule {
    /**
     * @return A human-readable description of the resource.
     * 
     */
    private @Nullable String description;
    /**
     * @return The list of host patterns to match.
     * Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
     * When multiple hosts are specified, hosts are matched in the following priority:
     * 1. Exact domain names: ``www.foo.com``.
     * 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
     * 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
     * 4. Special wildcard ``*`` matching any domain.
     *    Notes:
     *    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
     *    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the &#34;:authority&#34; header, from the incoming request.
     *    You may specify up to 10 hosts.
     * 
     */
    private List<String> hosts;
    /**
     * @return The name of the pathMatcher associated with this hostRule.
     * 
     */
    private String pathMatcher;

    private EdgeCacheServiceRoutingHostRule() {}
    /**
     * @return A human-readable description of the resource.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The list of host patterns to match.
     * Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
     * When multiple hosts are specified, hosts are matched in the following priority:
     * 1. Exact domain names: ``www.foo.com``.
     * 2. Suffix domain wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
     * 3. Prefix domain wildcards: ``foo.*`` or ``foo-*``.
     * 4. Special wildcard ``*`` matching any domain.
     *    Notes:
     *    The wildcard will not match the empty string. e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``. The longest wildcards match first. Only a single host in the entire service can match on ``*``. A domain must be unique across all configured hosts within a service.
     *    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the &#34;:authority&#34; header, from the incoming request.
     *    You may specify up to 10 hosts.
     * 
     */
    public List<String> hosts() {
        return this.hosts;
    }
    /**
     * @return The name of the pathMatcher associated with this hostRule.
     * 
     */
    public String pathMatcher() {
        return this.pathMatcher;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheServiceRoutingHostRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private List<String> hosts;
        private String pathMatcher;
        public Builder() {}
        public Builder(EdgeCacheServiceRoutingHostRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.hosts = defaults.hosts;
    	      this.pathMatcher = defaults.pathMatcher;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(List<String> hosts) {
            this.hosts = Objects.requireNonNull(hosts);
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder pathMatcher(String pathMatcher) {
            this.pathMatcher = Objects.requireNonNull(pathMatcher);
            return this;
        }
        public EdgeCacheServiceRoutingHostRule build() {
            final var o = new EdgeCacheServiceRoutingHostRule();
            o.description = description;
            o.hosts = hosts;
            o.pathMatcher = pathMatcher;
            return o;
        }
    }
}
