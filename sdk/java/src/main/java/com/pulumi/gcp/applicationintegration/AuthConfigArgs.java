// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigClientCertificateArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigArgs Empty = new AuthConfigArgs();

    /**
     * Raw client certificate
     * Structure is documented below.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<AuthConfigClientCertificateArgs> clientCertificate;

    /**
     * @return Raw client certificate
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigClientCertificateArgs>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * Raw auth credentials.
     * Structure is documented below.
     * 
     */
    @Import(name="decryptedCredential")
    private @Nullable Output<AuthConfigDecryptedCredentialArgs> decryptedCredential;

    /**
     * @return Raw auth credentials.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialArgs>> decryptedCredential() {
        return Optional.ofNullable(this.decryptedCredential);
    }

    /**
     * A description of the auth config.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the auth config.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the auth config.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the auth config.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="expiryNotificationDurations")
    private @Nullable Output<List<String>> expiryNotificationDurations;

    /**
     * @return User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<List<String>>> expiryNotificationDurations() {
        return Optional.ofNullable(this.expiryNotificationDurations);
    }

    /**
     * Location in which client needs to be provisioned.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location in which client needs to be provisioned.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="overrideValidTime")
    private @Nullable Output<String> overrideValidTime;

    /**
     * @return User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> overrideValidTime() {
        return Optional.ofNullable(this.overrideValidTime);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The visibility of the auth config.
     * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
     * 
     */
    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    /**
     * @return The visibility of the auth config.
     * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
     * 
     */
    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private AuthConfigArgs() {}

    private AuthConfigArgs(AuthConfigArgs $) {
        this.clientCertificate = $.clientCertificate;
        this.decryptedCredential = $.decryptedCredential;
        this.description = $.description;
        this.displayName = $.displayName;
        this.expiryNotificationDurations = $.expiryNotificationDurations;
        this.location = $.location;
        this.overrideValidTime = $.overrideValidTime;
        this.project = $.project;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigArgs $;

        public Builder() {
            $ = new AuthConfigArgs();
        }

        public Builder(AuthConfigArgs defaults) {
            $ = new AuthConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificate Raw client certificate
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(@Nullable Output<AuthConfigClientCertificateArgs> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificate Raw client certificate
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(AuthConfigClientCertificateArgs clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        /**
         * @param decryptedCredential Raw auth credentials.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder decryptedCredential(@Nullable Output<AuthConfigDecryptedCredentialArgs> decryptedCredential) {
            $.decryptedCredential = decryptedCredential;
            return this;
        }

        /**
         * @param decryptedCredential Raw auth credentials.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder decryptedCredential(AuthConfigDecryptedCredentialArgs decryptedCredential) {
            return decryptedCredential(Output.of(decryptedCredential));
        }

        /**
         * @param description A description of the auth config.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the auth config.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The name of the auth config.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the auth config.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param expiryNotificationDurations User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expiryNotificationDurations(@Nullable Output<List<String>> expiryNotificationDurations) {
            $.expiryNotificationDurations = expiryNotificationDurations;
            return this;
        }

        /**
         * @param expiryNotificationDurations User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expiryNotificationDurations(List<String> expiryNotificationDurations) {
            return expiryNotificationDurations(Output.of(expiryNotificationDurations));
        }

        /**
         * @param expiryNotificationDurations User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder expiryNotificationDurations(String... expiryNotificationDurations) {
            return expiryNotificationDurations(List.of(expiryNotificationDurations));
        }

        /**
         * @param location Location in which client needs to be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location in which client needs to be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param overrideValidTime User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder overrideValidTime(@Nullable Output<String> overrideValidTime) {
            $.overrideValidTime = overrideValidTime;
            return this;
        }

        /**
         * @param overrideValidTime User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder overrideValidTime(String overrideValidTime) {
            return overrideValidTime(Output.of(overrideValidTime));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param visibility The visibility of the auth config.
         * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility The visibility of the auth config.
         * Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public AuthConfigArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("AuthConfigArgs", "displayName");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AuthConfigArgs", "location");
            }
            return $;
        }
    }

}
