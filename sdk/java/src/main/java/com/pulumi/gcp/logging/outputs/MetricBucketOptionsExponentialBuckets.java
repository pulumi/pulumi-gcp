// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class MetricBucketOptionsExponentialBuckets {
    /**
     * @return Must be greater than 1.
     * 
     */
    private Double growthFactor;
    /**
     * @return Must be greater than 0.
     * 
     */
    private Integer numFiniteBuckets;
    /**
     * @return Must be greater than 0.
     * 
     */
    private Double scale;

    private MetricBucketOptionsExponentialBuckets() {}
    /**
     * @return Must be greater than 1.
     * 
     */
    public Double growthFactor() {
        return this.growthFactor;
    }
    /**
     * @return Must be greater than 0.
     * 
     */
    public Integer numFiniteBuckets() {
        return this.numFiniteBuckets;
    }
    /**
     * @return Must be greater than 0.
     * 
     */
    public Double scale() {
        return this.scale;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricBucketOptionsExponentialBuckets defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double growthFactor;
        private Integer numFiniteBuckets;
        private Double scale;
        public Builder() {}
        public Builder(MetricBucketOptionsExponentialBuckets defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.growthFactor = defaults.growthFactor;
    	      this.numFiniteBuckets = defaults.numFiniteBuckets;
    	      this.scale = defaults.scale;
        }

        @CustomType.Setter
        public Builder growthFactor(Double growthFactor) {
            if (growthFactor == null) {
              throw new MissingRequiredPropertyException("MetricBucketOptionsExponentialBuckets", "growthFactor");
            }
            this.growthFactor = growthFactor;
            return this;
        }
        @CustomType.Setter
        public Builder numFiniteBuckets(Integer numFiniteBuckets) {
            if (numFiniteBuckets == null) {
              throw new MissingRequiredPropertyException("MetricBucketOptionsExponentialBuckets", "numFiniteBuckets");
            }
            this.numFiniteBuckets = numFiniteBuckets;
            return this;
        }
        @CustomType.Setter
        public Builder scale(Double scale) {
            if (scale == null) {
              throw new MissingRequiredPropertyException("MetricBucketOptionsExponentialBuckets", "scale");
            }
            this.scale = scale;
            return this;
        }
        public MetricBucketOptionsExponentialBuckets build() {
            final var _resultValue = new MetricBucketOptionsExponentialBuckets();
            _resultValue.growthFactor = growthFactor;
            _resultValue.numFiniteBuckets = numFiniteBuckets;
            _resultValue.scale = scale;
            return _resultValue;
        }
    }
}
