// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.colab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.colab.RuntimeArgs;
import com.pulumi.gcp.colab.inputs.RuntimeState;
import com.pulumi.gcp.colab.outputs.RuntimeNotebookRuntimeTemplateRef;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &#39;A runtime is a Google-provisioned virtual machine (VM) that can run the code in your notebook (IPYNB file).&#39;
 * 
 * To get more information about Runtime, see:
 * 
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookRuntimes)
 * * How-to Guides
 *     * [Create a runtime](https://cloud.google.com/colab/docs/create-runtime)
 * 
 * ## Example Usage
 * 
 * ### Colab Runtime Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.colab.Runtime;
 * import com.pulumi.gcp.colab.RuntimeArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeNotebookRuntimeTemplateRefArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var myTemplate = new RuntimeTemplate("myTemplate", RuntimeTemplateArgs.builder()
 *             .name("colab-runtime")
 *             .displayName("Runtime template basic")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *         var runtime = new Runtime("runtime", RuntimeArgs.builder()
 *             .name("colab-runtime")
 *             .location("us-central1")
 *             .notebookRuntimeTemplateRef(RuntimeNotebookRuntimeTemplateRefArgs.builder()
 *                 .notebookRuntimeTemplate(myTemplate.id())
 *                 .build())
 *             .displayName("Runtime basic")
 *             .runtimeUser("gterraformtestuser}{@literal @}{@code gmail.com")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(myTemplate)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Colab Runtime Stopped
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.colab.Runtime;
 * import com.pulumi.gcp.colab.RuntimeArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeNotebookRuntimeTemplateRefArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var myTemplate = new RuntimeTemplate("myTemplate", RuntimeTemplateArgs.builder()
 *             .name("colab-runtime")
 *             .displayName("Runtime template basic")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *         var runtime = new Runtime("runtime", RuntimeArgs.builder()
 *             .name("colab-runtime")
 *             .location("us-central1")
 *             .notebookRuntimeTemplateRef(RuntimeNotebookRuntimeTemplateRefArgs.builder()
 *                 .notebookRuntimeTemplate(myTemplate.id())
 *                 .build())
 *             .desiredState("STOPPED")
 *             .displayName("Runtime stopped")
 *             .runtimeUser("gterraformtestuser}{@literal @}{@code gmail.com")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(myTemplate)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Colab Runtime Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateDataPersistentDiskSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateIdleShutdownConfigArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateEucConfigArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateShieldedVmConfigArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateEncryptionSpecArgs;
 * import com.pulumi.gcp.colab.Runtime;
 * import com.pulumi.gcp.colab.RuntimeArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeNotebookRuntimeTemplateRefArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var myTemplate = new RuntimeTemplate("myTemplate", RuntimeTemplateArgs.builder()
 *             .name("colab-runtime")
 *             .displayName("Runtime template full")
 *             .location("us-central1")
 *             .description("Full runtime template")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("n1-standard-2")
 *                 .acceleratorType("NVIDIA_TESLA_T4")
 *                 .acceleratorCount(1)
 *                 .build())
 *             .dataPersistentDiskSpec(RuntimeTemplateDataPersistentDiskSpecArgs.builder()
 *                 .diskType("pd-standard")
 *                 .diskSizeGb("200")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .labels(Map.of("k", "val"))
 *             .idleShutdownConfig(RuntimeTemplateIdleShutdownConfigArgs.builder()
 *                 .idleTimeout("3600s")
 *                 .build())
 *             .eucConfig(RuntimeTemplateEucConfigArgs.builder()
 *                 .eucDisabled(true)
 *                 .build())
 *             .shieldedVmConfig(RuntimeTemplateShieldedVmConfigArgs.builder()
 *                 .enableSecureBoot(true)
 *                 .build())
 *             .networkTags(            
 *                 "abc",
 *                 "def")
 *             .encryptionSpec(RuntimeTemplateEncryptionSpecArgs.builder()
 *                 .kmsKeyName("my-crypto-key")
 *                 .build())
 *             .build());
 * 
 *         var runtime = new Runtime("runtime", RuntimeArgs.builder()
 *             .name("colab-runtime")
 *             .location("us-central1")
 *             .notebookRuntimeTemplateRef(RuntimeNotebookRuntimeTemplateRefArgs.builder()
 *                 .notebookRuntimeTemplate(myTemplate.id())
 *                 .build())
 *             .displayName("Runtime full")
 *             .runtimeUser("gterraformtestuser}{@literal @}{@code gmail.com")
 *             .description("Full runtime")
 *             .desiredState("ACTIVE")
 *             .autoUpgrade(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(myTemplate)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Runtime can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/notebookRuntimes/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Runtime can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:colab/runtime:Runtime default projects/{{project}}/locations/{{location}}/notebookRuntimes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:colab/runtime:Runtime default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:colab/runtime:Runtime default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:colab/runtime:Runtime")
public class Runtime extends com.pulumi.resources.CustomResource {
    /**
     * Triggers an upgrade anytime the runtime is started if it is upgradable.
     * 
     */
    @Export(name="autoUpgrade", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoUpgrade;

    /**
     * @return Triggers an upgrade anytime the runtime is started if it is upgradable.
     * 
     */
    public Output<Optional<Boolean>> autoUpgrade() {
        return Codegen.optional(this.autoUpgrade);
    }
    /**
     * The description of the Runtime.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Runtime.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
     * 
     */
    @Export(name="desiredState", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> desiredState;

    /**
     * @return Desired state of the Colab Runtime. Set this field to `RUNNING` to start the runtime, and `STOPPED` to stop it.
     * 
     */
    public Output<Optional<String>> desiredState() {
        return Codegen.optional(this.desiredState);
    }
    /**
     * Required. The display name of the Runtime.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Required. The display name of the Runtime.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Output only. Timestamp when this NotebookRuntime will be expired.
     * 
     */
    @Export(name="expirationTime", refs={String.class}, tree="[0]")
    private Output<String> expirationTime;

    /**
     * @return Output only. Timestamp when this NotebookRuntime will be expired.
     * 
     */
    public Output<String> expirationTime() {
        return this.expirationTime;
    }
    /**
     * Output only. Checks if the NotebookRuntime is upgradable.
     * 
     */
    @Export(name="isUpgradable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isUpgradable;

    /**
     * @return Output only. Checks if the NotebookRuntime is upgradable.
     * 
     */
    public Output<Boolean> isUpgradable() {
        return this.isUpgradable;
    }
    /**
     * The location for the resource: https://cloud.google.com/colab/docs/locations
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource: https://cloud.google.com/colab/docs/locations
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the Runtime
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the Runtime
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * &#39;Runtime specific information used for NotebookRuntime creation.&#39;
     * Structure is documented below.
     * 
     */
    @Export(name="notebookRuntimeTemplateRef", refs={RuntimeNotebookRuntimeTemplateRef.class}, tree="[0]")
    private Output</* @Nullable */ RuntimeNotebookRuntimeTemplateRef> notebookRuntimeTemplateRef;

    /**
     * @return &#39;Runtime specific information used for NotebookRuntime creation.&#39;
     * Structure is documented below.
     * 
     */
    public Output<Optional<RuntimeNotebookRuntimeTemplateRef>> notebookRuntimeTemplateRef() {
        return Codegen.optional(this.notebookRuntimeTemplateRef);
    }
    /**
     * Output only. The type of the notebook runtime.
     * 
     */
    @Export(name="notebookRuntimeType", refs={String.class}, tree="[0]")
    private Output<String> notebookRuntimeType;

    /**
     * @return Output only. The type of the notebook runtime.
     * 
     */
    public Output<String> notebookRuntimeType() {
        return this.notebookRuntimeType;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The user email of the NotebookRuntime.
     * 
     */
    @Export(name="runtimeUser", refs={String.class}, tree="[0]")
    private Output<String> runtimeUser;

    /**
     * @return The user email of the NotebookRuntime.
     * 
     */
    public Output<String> runtimeUser() {
        return this.runtimeUser;
    }
    /**
     * Output only. The state of the runtime.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. The state of the runtime.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Runtime(java.lang.String name) {
        this(name, RuntimeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Runtime(java.lang.String name, RuntimeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Runtime(java.lang.String name, RuntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:colab/runtime:Runtime", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Runtime(java.lang.String name, Output<java.lang.String> id, @Nullable RuntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:colab/runtime:Runtime", name, state, makeResourceOptions(options, id), false);
    }

    private static RuntimeArgs makeArgs(RuntimeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RuntimeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Runtime get(java.lang.String name, Output<java.lang.String> id, @Nullable RuntimeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Runtime(name, id, state, options);
    }
}
