// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiCacheConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiCacheConfigArgs Empty = new AiCacheConfigArgs();

    /**
     * If set to true, disables GenAI caching. Otherwise caching is enabled.
     * 
     */
    @Import(name="disableCache", required=true)
    private Output<Boolean> disableCache;

    /**
     * @return If set to true, disables GenAI caching. Otherwise caching is enabled.
     * 
     */
    public Output<Boolean> disableCache() {
        return this.disableCache;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private AiCacheConfigArgs() {}

    private AiCacheConfigArgs(AiCacheConfigArgs $) {
        this.disableCache = $.disableCache;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiCacheConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiCacheConfigArgs $;

        public Builder() {
            $ = new AiCacheConfigArgs();
        }

        public Builder(AiCacheConfigArgs defaults) {
            $ = new AiCacheConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableCache If set to true, disables GenAI caching. Otherwise caching is enabled.
         * 
         * @return builder
         * 
         */
        public Builder disableCache(Output<Boolean> disableCache) {
            $.disableCache = disableCache;
            return this;
        }

        /**
         * @param disableCache If set to true, disables GenAI caching. Otherwise caching is enabled.
         * 
         * @return builder
         * 
         */
        public Builder disableCache(Boolean disableCache) {
            return disableCache(Output.of(disableCache));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public AiCacheConfigArgs build() {
            if ($.disableCache == null) {
                throw new MissingRequiredPropertyException("AiCacheConfigArgs", "disableCache");
            }
            return $;
        }
    }

}
