// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.modelarmor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FloorsettingAiPlatformFloorSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final FloorsettingAiPlatformFloorSettingArgs Empty = new FloorsettingAiPlatformFloorSettingArgs();

    /**
     * If true, log Model Armor filter results to Cloud Logging.
     * 
     */
    @Import(name="enableCloudLogging")
    private @Nullable Output<Boolean> enableCloudLogging;

    /**
     * @return If true, log Model Armor filter results to Cloud Logging.
     * 
     */
    public Optional<Output<Boolean>> enableCloudLogging() {
        return Optional.ofNullable(this.enableCloudLogging);
    }

    /**
     * If true, Model Armor filters will be run in inspect and block mode.
     * Requests that trip Model Armor filters will be blocked.
     * 
     */
    @Import(name="inspectAndBlock")
    private @Nullable Output<Boolean> inspectAndBlock;

    /**
     * @return If true, Model Armor filters will be run in inspect and block mode.
     * Requests that trip Model Armor filters will be blocked.
     * 
     */
    public Optional<Output<Boolean>> inspectAndBlock() {
        return Optional.ofNullable(this.inspectAndBlock);
    }

    /**
     * If true, Model Armor filters will be run in inspect only mode. No action
     * will be taken on the request.
     * 
     */
    @Import(name="inspectOnly")
    private @Nullable Output<Boolean> inspectOnly;

    /**
     * @return If true, Model Armor filters will be run in inspect only mode. No action
     * will be taken on the request.
     * 
     */
    public Optional<Output<Boolean>> inspectOnly() {
        return Optional.ofNullable(this.inspectOnly);
    }

    private FloorsettingAiPlatformFloorSettingArgs() {}

    private FloorsettingAiPlatformFloorSettingArgs(FloorsettingAiPlatformFloorSettingArgs $) {
        this.enableCloudLogging = $.enableCloudLogging;
        this.inspectAndBlock = $.inspectAndBlock;
        this.inspectOnly = $.inspectOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloorsettingAiPlatformFloorSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloorsettingAiPlatformFloorSettingArgs $;

        public Builder() {
            $ = new FloorsettingAiPlatformFloorSettingArgs();
        }

        public Builder(FloorsettingAiPlatformFloorSettingArgs defaults) {
            $ = new FloorsettingAiPlatformFloorSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableCloudLogging If true, log Model Armor filter results to Cloud Logging.
         * 
         * @return builder
         * 
         */
        public Builder enableCloudLogging(@Nullable Output<Boolean> enableCloudLogging) {
            $.enableCloudLogging = enableCloudLogging;
            return this;
        }

        /**
         * @param enableCloudLogging If true, log Model Armor filter results to Cloud Logging.
         * 
         * @return builder
         * 
         */
        public Builder enableCloudLogging(Boolean enableCloudLogging) {
            return enableCloudLogging(Output.of(enableCloudLogging));
        }

        /**
         * @param inspectAndBlock If true, Model Armor filters will be run in inspect and block mode.
         * Requests that trip Model Armor filters will be blocked.
         * 
         * @return builder
         * 
         */
        public Builder inspectAndBlock(@Nullable Output<Boolean> inspectAndBlock) {
            $.inspectAndBlock = inspectAndBlock;
            return this;
        }

        /**
         * @param inspectAndBlock If true, Model Armor filters will be run in inspect and block mode.
         * Requests that trip Model Armor filters will be blocked.
         * 
         * @return builder
         * 
         */
        public Builder inspectAndBlock(Boolean inspectAndBlock) {
            return inspectAndBlock(Output.of(inspectAndBlock));
        }

        /**
         * @param inspectOnly If true, Model Armor filters will be run in inspect only mode. No action
         * will be taken on the request.
         * 
         * @return builder
         * 
         */
        public Builder inspectOnly(@Nullable Output<Boolean> inspectOnly) {
            $.inspectOnly = inspectOnly;
            return this;
        }

        /**
         * @param inspectOnly If true, Model Armor filters will be run in inspect only mode. No action
         * will be taken on the request.
         * 
         * @return builder
         * 
         */
        public Builder inspectOnly(Boolean inspectOnly) {
            return inspectOnly(Output.of(inspectOnly));
        }

        public FloorsettingAiPlatformFloorSettingArgs build() {
            return $;
        }
    }

}
