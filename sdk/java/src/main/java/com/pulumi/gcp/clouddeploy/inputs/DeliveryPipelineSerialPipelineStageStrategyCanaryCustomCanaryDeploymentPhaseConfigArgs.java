// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs Empty = new DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs();

    /**
     * Required. Percentage deployment for the phase.
     * 
     */
    @Import(name="percentage", required=true)
    private Output<Integer> percentage;

    /**
     * @return Required. Percentage deployment for the phase.
     * 
     */
    public Output<Integer> percentage() {
        return this.percentage;
    }

    /**
     * Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^a-z?$`.
     * 
     */
    @Import(name="phaseId", required=true)
    private Output<String> phaseId;

    /**
     * @return Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^a-z?$`.
     * 
     */
    public Output<String> phaseId() {
        return this.phaseId;
    }

    /**
     * Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
     * 
     */
    @Import(name="profiles")
    private @Nullable Output<List<String>> profiles;

    /**
     * @return Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
     * 
     */
    public Optional<Output<List<String>>> profiles() {
        return Optional.ofNullable(this.profiles);
    }

    /**
     * Whether to run verify tests after the deployment.
     * 
     * ***
     * 
     */
    @Import(name="verify")
    private @Nullable Output<Boolean> verify;

    /**
     * @return Whether to run verify tests after the deployment.
     * 
     * ***
     * 
     */
    public Optional<Output<Boolean>> verify() {
        return Optional.ofNullable(this.verify);
    }

    private DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs() {}

    private DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs(DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs $) {
        this.percentage = $.percentage;
        this.phaseId = $.phaseId;
        this.profiles = $.profiles;
        this.verify = $.verify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs $;

        public Builder() {
            $ = new DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs();
        }

        public Builder(DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs defaults) {
            $ = new DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param percentage Required. Percentage deployment for the phase.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Output<Integer> percentage) {
            $.percentage = percentage;
            return this;
        }

        /**
         * @param percentage Required. Percentage deployment for the phase.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Integer percentage) {
            return percentage(Output.of(percentage));
        }

        /**
         * @param phaseId Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^a-z?$`.
         * 
         * @return builder
         * 
         */
        public Builder phaseId(Output<String> phaseId) {
            $.phaseId = phaseId;
            return this;
        }

        /**
         * @param phaseId Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^a-z?$`.
         * 
         * @return builder
         * 
         */
        public Builder phaseId(String phaseId) {
            return phaseId(Output.of(phaseId));
        }

        /**
         * @param profiles Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
         * 
         * @return builder
         * 
         */
        public Builder profiles(@Nullable Output<List<String>> profiles) {
            $.profiles = profiles;
            return this;
        }

        /**
         * @param profiles Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
         * 
         * @return builder
         * 
         */
        public Builder profiles(List<String> profiles) {
            return profiles(Output.of(profiles));
        }

        /**
         * @param profiles Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
         * 
         * @return builder
         * 
         */
        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }

        /**
         * @param verify Whether to run verify tests after the deployment.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder verify(@Nullable Output<Boolean> verify) {
            $.verify = verify;
            return this;
        }

        /**
         * @param verify Whether to run verify tests after the deployment.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder verify(Boolean verify) {
            return verify(Output.of(verify));
        }

        public DeliveryPipelineSerialPipelineStageStrategyCanaryCustomCanaryDeploymentPhaseConfigArgs build() {
            $.percentage = Objects.requireNonNull($.percentage, "expected parameter 'percentage' to be non-null");
            $.phaseId = Objects.requireNonNull($.phaseId, "expected parameter 'phaseId' to be non-null");
            return $;
        }
    }

}
