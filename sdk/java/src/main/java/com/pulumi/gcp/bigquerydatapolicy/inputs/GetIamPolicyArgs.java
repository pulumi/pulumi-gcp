// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquerydatapolicy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIamPolicyArgs Empty = new GetIamPolicyArgs();

    @Import(name="dataPolicyId", required=true)
    private Output<String> dataPolicyId;

    public Output<String> dataPolicyId() {
        return this.dataPolicyId;
    }

    /**
     * The name of the location of the data policy.
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location of the data policy.
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetIamPolicyArgs() {}

    private GetIamPolicyArgs(GetIamPolicyArgs $) {
        this.dataPolicyId = $.dataPolicyId;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIamPolicyArgs $;

        public Builder() {
            $ = new GetIamPolicyArgs();
        }

        public Builder(GetIamPolicyArgs defaults) {
            $ = new GetIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataPolicyId(Output<String> dataPolicyId) {
            $.dataPolicyId = dataPolicyId;
            return this;
        }

        public Builder dataPolicyId(String dataPolicyId) {
            return dataPolicyId(Output.of(dataPolicyId));
        }

        /**
         * @param location The name of the location of the data policy.
         * Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location of the data policy.
         * Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetIamPolicyArgs build() {
            if ($.dataPolicyId == null) {
                throw new MissingRequiredPropertyException("GetIamPolicyArgs", "dataPolicyId");
            }
            return $;
        }
    }

}
