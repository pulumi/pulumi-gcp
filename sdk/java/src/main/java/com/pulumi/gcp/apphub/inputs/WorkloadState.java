// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.apphub.inputs.WorkloadAttributesArgs;
import com.pulumi.gcp.apphub.inputs.WorkloadWorkloadPropertyArgs;
import com.pulumi.gcp.apphub.inputs.WorkloadWorkloadReferenceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadState extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadState Empty = new WorkloadState();

    /**
     * Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Consumer provided attributes.
     * Structure is documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<WorkloadAttributesArgs> attributes;

    /**
     * @return Consumer provided attributes.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkloadAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Output only. Create time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Create time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * User-defined description of a Workload.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-defined description of a Workload.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Immutable. The resource name of the original discovered workload.
     * 
     */
    @Import(name="discoveredWorkload")
    private @Nullable Output<String> discoveredWorkload;

    /**
     * @return Immutable. The resource name of the original discovered workload.
     * 
     */
    public Optional<Output<String>> discoveredWorkload() {
        return Optional.ofNullable(this.discoveredWorkload);
    }

    /**
     * User-defined name for the Workload.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-defined name for the Workload.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of the Workload. Format:&#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of the Workload. Format:&#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. Update time.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. Update time.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The Workload identifier.
     * 
     * ***
     * 
     */
    @Import(name="workloadId")
    private @Nullable Output<String> workloadId;

    /**
     * @return The Workload identifier.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> workloadId() {
        return Optional.ofNullable(this.workloadId);
    }

    /**
     * Properties of an underlying compute resource represented by the Workload.
     * Structure is documented below.
     * 
     */
    @Import(name="workloadProperties")
    private @Nullable Output<List<WorkloadWorkloadPropertyArgs>> workloadProperties;

    /**
     * @return Properties of an underlying compute resource represented by the Workload.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WorkloadWorkloadPropertyArgs>>> workloadProperties() {
        return Optional.ofNullable(this.workloadProperties);
    }

    /**
     * Reference of an underlying compute resource represented by the Workload.
     * Structure is documented below.
     * 
     */
    @Import(name="workloadReferences")
    private @Nullable Output<List<WorkloadWorkloadReferenceArgs>> workloadReferences;

    /**
     * @return Reference of an underlying compute resource represented by the Workload.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WorkloadWorkloadReferenceArgs>>> workloadReferences() {
        return Optional.ofNullable(this.workloadReferences);
    }

    private WorkloadState() {}

    private WorkloadState(WorkloadState $) {
        this.applicationId = $.applicationId;
        this.attributes = $.attributes;
        this.createTime = $.createTime;
        this.description = $.description;
        this.discoveredWorkload = $.discoveredWorkload;
        this.displayName = $.displayName;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.state = $.state;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.workloadId = $.workloadId;
        this.workloadProperties = $.workloadProperties;
        this.workloadReferences = $.workloadReferences;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadState $;

        public Builder() {
            $ = new WorkloadState();
        }

        public Builder(WorkloadState defaults) {
            $ = new WorkloadState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param attributes Consumer provided attributes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<WorkloadAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Consumer provided attributes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(WorkloadAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description User-defined description of a Workload.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-defined description of a Workload.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discoveredWorkload Immutable. The resource name of the original discovered workload.
         * 
         * @return builder
         * 
         */
        public Builder discoveredWorkload(@Nullable Output<String> discoveredWorkload) {
            $.discoveredWorkload = discoveredWorkload;
            return this;
        }

        /**
         * @param discoveredWorkload Immutable. The resource name of the original discovered workload.
         * 
         * @return builder
         * 
         */
        public Builder discoveredWorkload(String discoveredWorkload) {
            return discoveredWorkload(Output.of(discoveredWorkload));
        }

        /**
         * @param displayName User-defined name for the Workload.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-defined name for the Workload.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of the Workload. Format:&#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of the Workload. Format:&#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. Update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. Update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param workloadId The Workload identifier.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder workloadId(@Nullable Output<String> workloadId) {
            $.workloadId = workloadId;
            return this;
        }

        /**
         * @param workloadId The Workload identifier.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder workloadId(String workloadId) {
            return workloadId(Output.of(workloadId));
        }

        /**
         * @param workloadProperties Properties of an underlying compute resource represented by the Workload.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder workloadProperties(@Nullable Output<List<WorkloadWorkloadPropertyArgs>> workloadProperties) {
            $.workloadProperties = workloadProperties;
            return this;
        }

        /**
         * @param workloadProperties Properties of an underlying compute resource represented by the Workload.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder workloadProperties(List<WorkloadWorkloadPropertyArgs> workloadProperties) {
            return workloadProperties(Output.of(workloadProperties));
        }

        /**
         * @param workloadProperties Properties of an underlying compute resource represented by the Workload.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder workloadProperties(WorkloadWorkloadPropertyArgs... workloadProperties) {
            return workloadProperties(List.of(workloadProperties));
        }

        /**
         * @param workloadReferences Reference of an underlying compute resource represented by the Workload.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder workloadReferences(@Nullable Output<List<WorkloadWorkloadReferenceArgs>> workloadReferences) {
            $.workloadReferences = workloadReferences;
            return this;
        }

        /**
         * @param workloadReferences Reference of an underlying compute resource represented by the Workload.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder workloadReferences(List<WorkloadWorkloadReferenceArgs> workloadReferences) {
            return workloadReferences(Output.of(workloadReferences));
        }

        /**
         * @param workloadReferences Reference of an underlying compute resource represented by the Workload.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder workloadReferences(WorkloadWorkloadReferenceArgs... workloadReferences) {
            return workloadReferences(List.of(workloadReferences));
        }

        public WorkloadState build() {
            return $;
        }
    }

}
