// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.saasruntime.inputs.UnitKindDependencyArgs;
import com.pulumi.gcp.saasruntime.inputs.UnitKindInputVariableMappingArgs;
import com.pulumi.gcp.saasruntime.inputs.UnitKindOutputVariableMappingArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UnitKindArgs extends com.pulumi.resources.ResourceArgs {

    public static final UnitKindArgs Empty = new UnitKindArgs();

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     * 
     */
    @Import(name="dependencies")
    private @Nullable Output<List<UnitKindDependencyArgs>> dependencies;

    /**
     * @return List of other unit kinds that this release will depend on. Dependencies
     * will be automatically provisioned if not found. Maximum 10.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<UnitKindDependencyArgs>>> dependencies() {
        return Optional.ofNullable(this.dependencies);
    }

    /**
     * List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    @Import(name="inputVariableMappings")
    private @Nullable Output<List<UnitKindInputVariableMappingArgs>> inputVariableMappings;

    /**
     * @return List of inputVariables for this release that will either be retrieved from
     * a dependency’s outputVariables, or will be passed on to a dependency’s
     * inputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<UnitKindInputVariableMappingArgs>>> inputVariableMappings() {
        return Optional.ofNullable(this.inputVariableMappings);
    }

    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * List of outputVariables for this unit kind will be passed to this unit&#39;s
     * outputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    @Import(name="outputVariableMappings")
    private @Nullable Output<List<UnitKindOutputVariableMappingArgs>> outputVariableMappings;

    /**
     * @return List of outputVariables for this unit kind will be passed to this unit&#39;s
     * outputVariables. Maximum 100.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<UnitKindOutputVariableMappingArgs>>> outputVariableMappings() {
        return Optional.ofNullable(this.outputVariableMappings);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     * 
     */
    @Import(name="saas", required=true)
    private Output<String> saas;

    /**
     * @return A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
     * common data model. Immutable once set.
     * 
     */
    public Output<String> saas() {
        return this.saas;
    }

    /**
     * The ID value for the new unit kind.
     * 
     */
    @Import(name="unitKindId", required=true)
    private Output<String> unitKindId;

    /**
     * @return The ID value for the new unit kind.
     * 
     */
    public Output<String> unitKindId() {
        return this.unitKindId;
    }

    private UnitKindArgs() {}

    private UnitKindArgs(UnitKindArgs $) {
        this.annotations = $.annotations;
        this.dependencies = $.dependencies;
        this.inputVariableMappings = $.inputVariableMappings;
        this.labels = $.labels;
        this.location = $.location;
        this.outputVariableMappings = $.outputVariableMappings;
        this.project = $.project;
        this.saas = $.saas;
        this.unitKindId = $.unitKindId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UnitKindArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UnitKindArgs $;

        public Builder() {
            $ = new UnitKindArgs();
        }

        public Builder(UnitKindArgs defaults) {
            $ = new UnitKindArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param dependencies List of other unit kinds that this release will depend on. Dependencies
         * will be automatically provisioned if not found. Maximum 10.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(@Nullable Output<List<UnitKindDependencyArgs>> dependencies) {
            $.dependencies = dependencies;
            return this;
        }

        /**
         * @param dependencies List of other unit kinds that this release will depend on. Dependencies
         * will be automatically provisioned if not found. Maximum 10.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(List<UnitKindDependencyArgs> dependencies) {
            return dependencies(Output.of(dependencies));
        }

        /**
         * @param dependencies List of other unit kinds that this release will depend on. Dependencies
         * will be automatically provisioned if not found. Maximum 10.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(UnitKindDependencyArgs... dependencies) {
            return dependencies(List.of(dependencies));
        }

        /**
         * @param inputVariableMappings List of inputVariables for this release that will either be retrieved from
         * a dependency’s outputVariables, or will be passed on to a dependency’s
         * inputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputVariableMappings(@Nullable Output<List<UnitKindInputVariableMappingArgs>> inputVariableMappings) {
            $.inputVariableMappings = inputVariableMappings;
            return this;
        }

        /**
         * @param inputVariableMappings List of inputVariables for this release that will either be retrieved from
         * a dependency’s outputVariables, or will be passed on to a dependency’s
         * inputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputVariableMappings(List<UnitKindInputVariableMappingArgs> inputVariableMappings) {
            return inputVariableMappings(Output.of(inputVariableMappings));
        }

        /**
         * @param inputVariableMappings List of inputVariables for this release that will either be retrieved from
         * a dependency’s outputVariables, or will be passed on to a dependency’s
         * inputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputVariableMappings(UnitKindInputVariableMappingArgs... inputVariableMappings) {
            return inputVariableMappings(List.of(inputVariableMappings));
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param outputVariableMappings List of outputVariables for this unit kind will be passed to this unit&#39;s
         * outputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputVariableMappings(@Nullable Output<List<UnitKindOutputVariableMappingArgs>> outputVariableMappings) {
            $.outputVariableMappings = outputVariableMappings;
            return this;
        }

        /**
         * @param outputVariableMappings List of outputVariables for this unit kind will be passed to this unit&#39;s
         * outputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputVariableMappings(List<UnitKindOutputVariableMappingArgs> outputVariableMappings) {
            return outputVariableMappings(Output.of(outputVariableMappings));
        }

        /**
         * @param outputVariableMappings List of outputVariables for this unit kind will be passed to this unit&#39;s
         * outputVariables. Maximum 100.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputVariableMappings(UnitKindOutputVariableMappingArgs... outputVariableMappings) {
            return outputVariableMappings(List.of(outputVariableMappings));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param saas A reference to the Saas that defines the product (managed service) that
         * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
         * common data model. Immutable once set.
         * 
         * @return builder
         * 
         */
        public Builder saas(Output<String> saas) {
            $.saas = saas;
            return this;
        }

        /**
         * @param saas A reference to the Saas that defines the product (managed service) that
         * the producer wants to manage with SaaS Runtime. Part of the SaaS Runtime
         * common data model. Immutable once set.
         * 
         * @return builder
         * 
         */
        public Builder saas(String saas) {
            return saas(Output.of(saas));
        }

        /**
         * @param unitKindId The ID value for the new unit kind.
         * 
         * @return builder
         * 
         */
        public Builder unitKindId(Output<String> unitKindId) {
            $.unitKindId = unitKindId;
            return this;
        }

        /**
         * @param unitKindId The ID value for the new unit kind.
         * 
         * @return builder
         * 
         */
        public Builder unitKindId(String unitKindId) {
            return unitKindId(Output.of(unitKindId));
        }

        public UnitKindArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("UnitKindArgs", "location");
            }
            if ($.saas == null) {
                throw new MissingRequiredPropertyException("UnitKindArgs", "saas");
            }
            if ($.unitKindId == null) {
                throw new MissingRequiredPropertyException("UnitKindArgs", "unitKindId");
            }
            return $;
        }
    }

}
