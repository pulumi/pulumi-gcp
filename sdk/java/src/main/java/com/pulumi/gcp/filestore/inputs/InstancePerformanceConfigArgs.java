// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.filestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.filestore.inputs.InstancePerformanceConfigFixedIopsArgs;
import com.pulumi.gcp.filestore.inputs.InstancePerformanceConfigIopsPerTbArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePerformanceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstancePerformanceConfigArgs Empty = new InstancePerformanceConfigArgs();

    /**
     * The instance will have a fixed provisioned IOPS value,
     * which will remain constant regardless of instance
     * capacity.
     * Structure is documented below.
     * 
     */
    @Import(name="fixedIops")
    private @Nullable Output<InstancePerformanceConfigFixedIopsArgs> fixedIops;

    /**
     * @return The instance will have a fixed provisioned IOPS value,
     * which will remain constant regardless of instance
     * capacity.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstancePerformanceConfigFixedIopsArgs>> fixedIops() {
        return Optional.ofNullable(this.fixedIops);
    }

    /**
     * The instance provisioned IOPS will change dynamically
     * based on the capacity of the instance.
     * Structure is documented below.
     * 
     */
    @Import(name="iopsPerTb")
    private @Nullable Output<InstancePerformanceConfigIopsPerTbArgs> iopsPerTb;

    /**
     * @return The instance provisioned IOPS will change dynamically
     * based on the capacity of the instance.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstancePerformanceConfigIopsPerTbArgs>> iopsPerTb() {
        return Optional.ofNullable(this.iopsPerTb);
    }

    private InstancePerformanceConfigArgs() {}

    private InstancePerformanceConfigArgs(InstancePerformanceConfigArgs $) {
        this.fixedIops = $.fixedIops;
        this.iopsPerTb = $.iopsPerTb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePerformanceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePerformanceConfigArgs $;

        public Builder() {
            $ = new InstancePerformanceConfigArgs();
        }

        public Builder(InstancePerformanceConfigArgs defaults) {
            $ = new InstancePerformanceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fixedIops The instance will have a fixed provisioned IOPS value,
         * which will remain constant regardless of instance
         * capacity.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fixedIops(@Nullable Output<InstancePerformanceConfigFixedIopsArgs> fixedIops) {
            $.fixedIops = fixedIops;
            return this;
        }

        /**
         * @param fixedIops The instance will have a fixed provisioned IOPS value,
         * which will remain constant regardless of instance
         * capacity.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fixedIops(InstancePerformanceConfigFixedIopsArgs fixedIops) {
            return fixedIops(Output.of(fixedIops));
        }

        /**
         * @param iopsPerTb The instance provisioned IOPS will change dynamically
         * based on the capacity of the instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder iopsPerTb(@Nullable Output<InstancePerformanceConfigIopsPerTbArgs> iopsPerTb) {
            $.iopsPerTb = iopsPerTb;
            return this;
        }

        /**
         * @param iopsPerTb The instance provisioned IOPS will change dynamically
         * based on the capacity of the instance.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder iopsPerTb(InstancePerformanceConfigIopsPerTbArgs iopsPerTb) {
            return iopsPerTb(Output.of(iopsPerTb));
        }

        public InstancePerformanceConfigArgs build() {
            return $;
        }
    }

}
