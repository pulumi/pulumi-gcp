// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gemini.inputs.CodeToolsSettingEnabledToolConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodeToolsSettingEnabledToolArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodeToolsSettingEnabledToolArgs Empty = new CodeToolsSettingEnabledToolArgs();

    /**
     * Link to the Dev Connect Account Connector that holds the user credentials.
     * projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
     * 
     */
    @Import(name="accountConnector")
    private @Nullable Output<String> accountConnector;

    /**
     * @return Link to the Dev Connect Account Connector that holds the user credentials.
     * projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
     * 
     */
    public Optional<Output<String>> accountConnector() {
        return Optional.ofNullable(this.accountConnector);
    }

    /**
     * Configuration parameters for the tool.
     * Structure is documented below.
     * 
     */
    @Import(name="configs")
    private @Nullable Output<List<CodeToolsSettingEnabledToolConfigArgs>> configs;

    /**
     * @return Configuration parameters for the tool.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CodeToolsSettingEnabledToolConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * Handle used to invoke the tool.
     * 
     */
    @Import(name="handle", required=true)
    private Output<String> handle;

    /**
     * @return Handle used to invoke the tool.
     * 
     */
    public Output<String> handle() {
        return this.handle;
    }

    /**
     * Link to the Tool
     * 
     */
    @Import(name="tool", required=true)
    private Output<String> tool;

    /**
     * @return Link to the Tool
     * 
     */
    public Output<String> tool() {
        return this.tool;
    }

    /**
     * Overridden URI, if allowed by Tool.
     * 
     */
    @Import(name="uriOverride")
    private @Nullable Output<String> uriOverride;

    /**
     * @return Overridden URI, if allowed by Tool.
     * 
     */
    public Optional<Output<String>> uriOverride() {
        return Optional.ofNullable(this.uriOverride);
    }

    private CodeToolsSettingEnabledToolArgs() {}

    private CodeToolsSettingEnabledToolArgs(CodeToolsSettingEnabledToolArgs $) {
        this.accountConnector = $.accountConnector;
        this.configs = $.configs;
        this.handle = $.handle;
        this.tool = $.tool;
        this.uriOverride = $.uriOverride;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeToolsSettingEnabledToolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeToolsSettingEnabledToolArgs $;

        public Builder() {
            $ = new CodeToolsSettingEnabledToolArgs();
        }

        public Builder(CodeToolsSettingEnabledToolArgs defaults) {
            $ = new CodeToolsSettingEnabledToolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountConnector Link to the Dev Connect Account Connector that holds the user credentials.
         * projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
         * 
         * @return builder
         * 
         */
        public Builder accountConnector(@Nullable Output<String> accountConnector) {
            $.accountConnector = accountConnector;
            return this;
        }

        /**
         * @param accountConnector Link to the Dev Connect Account Connector that holds the user credentials.
         * projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
         * 
         * @return builder
         * 
         */
        public Builder accountConnector(String accountConnector) {
            return accountConnector(Output.of(accountConnector));
        }

        /**
         * @param configs Configuration parameters for the tool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configs(@Nullable Output<List<CodeToolsSettingEnabledToolConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Configuration parameters for the tool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configs(List<CodeToolsSettingEnabledToolConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param configs Configuration parameters for the tool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configs(CodeToolsSettingEnabledToolConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param handle Handle used to invoke the tool.
         * 
         * @return builder
         * 
         */
        public Builder handle(Output<String> handle) {
            $.handle = handle;
            return this;
        }

        /**
         * @param handle Handle used to invoke the tool.
         * 
         * @return builder
         * 
         */
        public Builder handle(String handle) {
            return handle(Output.of(handle));
        }

        /**
         * @param tool Link to the Tool
         * 
         * @return builder
         * 
         */
        public Builder tool(Output<String> tool) {
            $.tool = tool;
            return this;
        }

        /**
         * @param tool Link to the Tool
         * 
         * @return builder
         * 
         */
        public Builder tool(String tool) {
            return tool(Output.of(tool));
        }

        /**
         * @param uriOverride Overridden URI, if allowed by Tool.
         * 
         * @return builder
         * 
         */
        public Builder uriOverride(@Nullable Output<String> uriOverride) {
            $.uriOverride = uriOverride;
            return this;
        }

        /**
         * @param uriOverride Overridden URI, if allowed by Tool.
         * 
         * @return builder
         * 
         */
        public Builder uriOverride(String uriOverride) {
            return uriOverride(Output.of(uriOverride));
        }

        public CodeToolsSettingEnabledToolArgs build() {
            if ($.handle == null) {
                throw new MissingRequiredPropertyException("CodeToolsSettingEnabledToolArgs", "handle");
            }
            if ($.tool == null) {
                throw new MissingRequiredPropertyException("CodeToolsSettingEnabledToolArgs", "tool");
            }
            return $;
        }
    }

}
