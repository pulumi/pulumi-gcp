// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.redis.outputs.GetInstanceMaintenancePolicy;
import com.pulumi.gcp.redis.outputs.GetInstanceMaintenanceSchedule;
import com.pulumi.gcp.redis.outputs.GetInstanceNode;
import com.pulumi.gcp.redis.outputs.GetInstancePersistenceConfig;
import com.pulumi.gcp.redis.outputs.GetInstanceServerCaCert;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    private String alternativeLocationId;
    private Boolean authEnabled;
    private String authString;
    private String authorizedNetwork;
    private String connectMode;
    private String createTime;
    private String currentLocationId;
    private String customerManagedKey;
    private String displayName;
    private Map<String,String> effectiveLabels;
    private String effectiveReservedIpRange;
    private String host;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String locationId;
    private List<GetInstanceMaintenancePolicy> maintenancePolicies;
    private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
    private String maintenanceVersion;
    private Integer memorySizeGb;
    private String name;
    private List<GetInstanceNode> nodes;
    private List<GetInstancePersistenceConfig> persistenceConfigs;
    private String persistenceIamIdentity;
    private Integer port;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String readEndpoint;
    private Integer readEndpointPort;
    private String readReplicasMode;
    private Map<String,String> redisConfigs;
    private String redisVersion;
    private @Nullable String region;
    private Integer replicaCount;
    private String reservedIpRange;
    private String secondaryIpRange;
    private List<GetInstanceServerCaCert> serverCaCerts;
    private String tier;
    private String transitEncryptionMode;

    private GetInstanceResult() {}
    public String alternativeLocationId() {
        return this.alternativeLocationId;
    }
    public Boolean authEnabled() {
        return this.authEnabled;
    }
    public String authString() {
        return this.authString;
    }
    public String authorizedNetwork() {
        return this.authorizedNetwork;
    }
    public String connectMode() {
        return this.connectMode;
    }
    public String createTime() {
        return this.createTime;
    }
    public String currentLocationId() {
        return this.currentLocationId;
    }
    public String customerManagedKey() {
        return this.customerManagedKey;
    }
    public String displayName() {
        return this.displayName;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String effectiveReservedIpRange() {
        return this.effectiveReservedIpRange;
    }
    public String host() {
        return this.host;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String locationId() {
        return this.locationId;
    }
    public List<GetInstanceMaintenancePolicy> maintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetInstanceMaintenanceSchedule> maintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    public String maintenanceVersion() {
        return this.maintenanceVersion;
    }
    public Integer memorySizeGb() {
        return this.memorySizeGb;
    }
    public String name() {
        return this.name;
    }
    public List<GetInstanceNode> nodes() {
        return this.nodes;
    }
    public List<GetInstancePersistenceConfig> persistenceConfigs() {
        return this.persistenceConfigs;
    }
    public String persistenceIamIdentity() {
        return this.persistenceIamIdentity;
    }
    public Integer port() {
        return this.port;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String readEndpoint() {
        return this.readEndpoint;
    }
    public Integer readEndpointPort() {
        return this.readEndpointPort;
    }
    public String readReplicasMode() {
        return this.readReplicasMode;
    }
    public Map<String,String> redisConfigs() {
        return this.redisConfigs;
    }
    public String redisVersion() {
        return this.redisVersion;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Integer replicaCount() {
        return this.replicaCount;
    }
    public String reservedIpRange() {
        return this.reservedIpRange;
    }
    public String secondaryIpRange() {
        return this.secondaryIpRange;
    }
    public List<GetInstanceServerCaCert> serverCaCerts() {
        return this.serverCaCerts;
    }
    public String tier() {
        return this.tier;
    }
    public String transitEncryptionMode() {
        return this.transitEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alternativeLocationId;
        private Boolean authEnabled;
        private String authString;
        private String authorizedNetwork;
        private String connectMode;
        private String createTime;
        private String currentLocationId;
        private String customerManagedKey;
        private String displayName;
        private Map<String,String> effectiveLabels;
        private String effectiveReservedIpRange;
        private String host;
        private String id;
        private Map<String,String> labels;
        private String locationId;
        private List<GetInstanceMaintenancePolicy> maintenancePolicies;
        private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
        private String maintenanceVersion;
        private Integer memorySizeGb;
        private String name;
        private List<GetInstanceNode> nodes;
        private List<GetInstancePersistenceConfig> persistenceConfigs;
        private String persistenceIamIdentity;
        private Integer port;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String readEndpoint;
        private Integer readEndpointPort;
        private String readReplicasMode;
        private Map<String,String> redisConfigs;
        private String redisVersion;
        private @Nullable String region;
        private Integer replicaCount;
        private String reservedIpRange;
        private String secondaryIpRange;
        private List<GetInstanceServerCaCert> serverCaCerts;
        private String tier;
        private String transitEncryptionMode;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeLocationId = defaults.alternativeLocationId;
    	      this.authEnabled = defaults.authEnabled;
    	      this.authString = defaults.authString;
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.connectMode = defaults.connectMode;
    	      this.createTime = defaults.createTime;
    	      this.currentLocationId = defaults.currentLocationId;
    	      this.customerManagedKey = defaults.customerManagedKey;
    	      this.displayName = defaults.displayName;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.effectiveReservedIpRange = defaults.effectiveReservedIpRange;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.locationId = defaults.locationId;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.maintenanceSchedules = defaults.maintenanceSchedules;
    	      this.maintenanceVersion = defaults.maintenanceVersion;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.name = defaults.name;
    	      this.nodes = defaults.nodes;
    	      this.persistenceConfigs = defaults.persistenceConfigs;
    	      this.persistenceIamIdentity = defaults.persistenceIamIdentity;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.readEndpoint = defaults.readEndpoint;
    	      this.readEndpointPort = defaults.readEndpointPort;
    	      this.readReplicasMode = defaults.readReplicasMode;
    	      this.redisConfigs = defaults.redisConfigs;
    	      this.redisVersion = defaults.redisVersion;
    	      this.region = defaults.region;
    	      this.replicaCount = defaults.replicaCount;
    	      this.reservedIpRange = defaults.reservedIpRange;
    	      this.secondaryIpRange = defaults.secondaryIpRange;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.tier = defaults.tier;
    	      this.transitEncryptionMode = defaults.transitEncryptionMode;
        }

        @CustomType.Setter
        public Builder alternativeLocationId(String alternativeLocationId) {
            if (alternativeLocationId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "alternativeLocationId");
            }
            this.alternativeLocationId = alternativeLocationId;
            return this;
        }
        @CustomType.Setter
        public Builder authEnabled(Boolean authEnabled) {
            if (authEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "authEnabled");
            }
            this.authEnabled = authEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder authString(String authString) {
            if (authString == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "authString");
            }
            this.authString = authString;
            return this;
        }
        @CustomType.Setter
        public Builder authorizedNetwork(String authorizedNetwork) {
            if (authorizedNetwork == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "authorizedNetwork");
            }
            this.authorizedNetwork = authorizedNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder connectMode(String connectMode) {
            if (connectMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "connectMode");
            }
            this.connectMode = connectMode;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder currentLocationId(String currentLocationId) {
            if (currentLocationId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "currentLocationId");
            }
            this.currentLocationId = currentLocationId;
            return this;
        }
        @CustomType.Setter
        public Builder customerManagedKey(String customerManagedKey) {
            if (customerManagedKey == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "customerManagedKey");
            }
            this.customerManagedKey = customerManagedKey;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveReservedIpRange(String effectiveReservedIpRange) {
            if (effectiveReservedIpRange == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveReservedIpRange");
            }
            this.effectiveReservedIpRange = effectiveReservedIpRange;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder locationId(String locationId) {
            if (locationId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "locationId");
            }
            this.locationId = locationId;
            return this;
        }
        @CustomType.Setter
        public Builder maintenancePolicies(List<GetInstanceMaintenancePolicy> maintenancePolicies) {
            if (maintenancePolicies == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maintenancePolicies");
            }
            this.maintenancePolicies = maintenancePolicies;
            return this;
        }
        public Builder maintenancePolicies(GetInstanceMaintenancePolicy... maintenancePolicies) {
            return maintenancePolicies(List.of(maintenancePolicies));
        }
        @CustomType.Setter
        public Builder maintenanceSchedules(List<GetInstanceMaintenanceSchedule> maintenanceSchedules) {
            if (maintenanceSchedules == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maintenanceSchedules");
            }
            this.maintenanceSchedules = maintenanceSchedules;
            return this;
        }
        public Builder maintenanceSchedules(GetInstanceMaintenanceSchedule... maintenanceSchedules) {
            return maintenanceSchedules(List.of(maintenanceSchedules));
        }
        @CustomType.Setter
        public Builder maintenanceVersion(String maintenanceVersion) {
            if (maintenanceVersion == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maintenanceVersion");
            }
            this.maintenanceVersion = maintenanceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGb(Integer memorySizeGb) {
            if (memorySizeGb == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "memorySizeGb");
            }
            this.memorySizeGb = memorySizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<GetInstanceNode> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(GetInstanceNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder persistenceConfigs(List<GetInstancePersistenceConfig> persistenceConfigs) {
            if (persistenceConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "persistenceConfigs");
            }
            this.persistenceConfigs = persistenceConfigs;
            return this;
        }
        public Builder persistenceConfigs(GetInstancePersistenceConfig... persistenceConfigs) {
            return persistenceConfigs(List.of(persistenceConfigs));
        }
        @CustomType.Setter
        public Builder persistenceIamIdentity(String persistenceIamIdentity) {
            if (persistenceIamIdentity == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "persistenceIamIdentity");
            }
            this.persistenceIamIdentity = persistenceIamIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder readEndpoint(String readEndpoint) {
            if (readEndpoint == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "readEndpoint");
            }
            this.readEndpoint = readEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder readEndpointPort(Integer readEndpointPort) {
            if (readEndpointPort == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "readEndpointPort");
            }
            this.readEndpointPort = readEndpointPort;
            return this;
        }
        @CustomType.Setter
        public Builder readReplicasMode(String readReplicasMode) {
            if (readReplicasMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "readReplicasMode");
            }
            this.readReplicasMode = readReplicasMode;
            return this;
        }
        @CustomType.Setter
        public Builder redisConfigs(Map<String,String> redisConfigs) {
            if (redisConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "redisConfigs");
            }
            this.redisConfigs = redisConfigs;
            return this;
        }
        @CustomType.Setter
        public Builder redisVersion(String redisVersion) {
            if (redisVersion == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "redisVersion");
            }
            this.redisVersion = redisVersion;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder replicaCount(Integer replicaCount) {
            if (replicaCount == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "replicaCount");
            }
            this.replicaCount = replicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder reservedIpRange(String reservedIpRange) {
            if (reservedIpRange == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "reservedIpRange");
            }
            this.reservedIpRange = reservedIpRange;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpRange(String secondaryIpRange) {
            if (secondaryIpRange == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "secondaryIpRange");
            }
            this.secondaryIpRange = secondaryIpRange;
            return this;
        }
        @CustomType.Setter
        public Builder serverCaCerts(List<GetInstanceServerCaCert> serverCaCerts) {
            if (serverCaCerts == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "serverCaCerts");
            }
            this.serverCaCerts = serverCaCerts;
            return this;
        }
        public Builder serverCaCerts(GetInstanceServerCaCert... serverCaCerts) {
            return serverCaCerts(List.of(serverCaCerts));
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            if (tier == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "tier");
            }
            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryptionMode(String transitEncryptionMode) {
            if (transitEncryptionMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "transitEncryptionMode");
            }
            this.transitEncryptionMode = transitEncryptionMode;
            return this;
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.alternativeLocationId = alternativeLocationId;
            _resultValue.authEnabled = authEnabled;
            _resultValue.authString = authString;
            _resultValue.authorizedNetwork = authorizedNetwork;
            _resultValue.connectMode = connectMode;
            _resultValue.createTime = createTime;
            _resultValue.currentLocationId = currentLocationId;
            _resultValue.customerManagedKey = customerManagedKey;
            _resultValue.displayName = displayName;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.effectiveReservedIpRange = effectiveReservedIpRange;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.locationId = locationId;
            _resultValue.maintenancePolicies = maintenancePolicies;
            _resultValue.maintenanceSchedules = maintenanceSchedules;
            _resultValue.maintenanceVersion = maintenanceVersion;
            _resultValue.memorySizeGb = memorySizeGb;
            _resultValue.name = name;
            _resultValue.nodes = nodes;
            _resultValue.persistenceConfigs = persistenceConfigs;
            _resultValue.persistenceIamIdentity = persistenceIamIdentity;
            _resultValue.port = port;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.readEndpoint = readEndpoint;
            _resultValue.readEndpointPort = readEndpointPort;
            _resultValue.readReplicasMode = readReplicasMode;
            _resultValue.redisConfigs = redisConfigs;
            _resultValue.redisVersion = redisVersion;
            _resultValue.region = region;
            _resultValue.replicaCount = replicaCount;
            _resultValue.reservedIpRange = reservedIpRange;
            _resultValue.secondaryIpRange = secondaryIpRange;
            _resultValue.serverCaCerts = serverCaCerts;
            _resultValue.tier = tier;
            _resultValue.transitEncryptionMode = transitEncryptionMode;
            return _resultValue;
        }
    }
}
