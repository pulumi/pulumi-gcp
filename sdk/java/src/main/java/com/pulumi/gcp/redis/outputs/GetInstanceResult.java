// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.redis.outputs.GetInstanceMaintenancePolicy;
import com.pulumi.gcp.redis.outputs.GetInstanceMaintenanceSchedule;
import com.pulumi.gcp.redis.outputs.GetInstanceNode;
import com.pulumi.gcp.redis.outputs.GetInstanceServerCaCert;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    private String alternativeLocationId;
    private Boolean authEnabled;
    private String authString;
    private String authorizedNetwork;
    private String connectMode;
    private String createTime;
    private String currentLocationId;
    private String customerManagedKey;
    private String displayName;
    private String host;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String locationId;
    private List<GetInstanceMaintenancePolicy> maintenancePolicies;
    private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
    private Integer memorySizeGb;
    private String name;
    private List<GetInstanceNode> nodes;
    private String persistenceIamIdentity;
    private Integer port;
    private @Nullable String project;
    private String readEndpoint;
    private Integer readEndpointPort;
    private String readReplicasMode;
    private Map<String,String> redisConfigs;
    private String redisVersion;
    private @Nullable String region;
    private Integer replicaCount;
    private String reservedIpRange;
    private String secondaryIpRange;
    private List<GetInstanceServerCaCert> serverCaCerts;
    private String tier;
    private String transitEncryptionMode;

    private GetInstanceResult() {}
    public String alternativeLocationId() {
        return this.alternativeLocationId;
    }
    public Boolean authEnabled() {
        return this.authEnabled;
    }
    public String authString() {
        return this.authString;
    }
    public String authorizedNetwork() {
        return this.authorizedNetwork;
    }
    public String connectMode() {
        return this.connectMode;
    }
    public String createTime() {
        return this.createTime;
    }
    public String currentLocationId() {
        return this.currentLocationId;
    }
    public String customerManagedKey() {
        return this.customerManagedKey;
    }
    public String displayName() {
        return this.displayName;
    }
    public String host() {
        return this.host;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String locationId() {
        return this.locationId;
    }
    public List<GetInstanceMaintenancePolicy> maintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetInstanceMaintenanceSchedule> maintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    public Integer memorySizeGb() {
        return this.memorySizeGb;
    }
    public String name() {
        return this.name;
    }
    public List<GetInstanceNode> nodes() {
        return this.nodes;
    }
    public String persistenceIamIdentity() {
        return this.persistenceIamIdentity;
    }
    public Integer port() {
        return this.port;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String readEndpoint() {
        return this.readEndpoint;
    }
    public Integer readEndpointPort() {
        return this.readEndpointPort;
    }
    public String readReplicasMode() {
        return this.readReplicasMode;
    }
    public Map<String,String> redisConfigs() {
        return this.redisConfigs;
    }
    public String redisVersion() {
        return this.redisVersion;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Integer replicaCount() {
        return this.replicaCount;
    }
    public String reservedIpRange() {
        return this.reservedIpRange;
    }
    public String secondaryIpRange() {
        return this.secondaryIpRange;
    }
    public List<GetInstanceServerCaCert> serverCaCerts() {
        return this.serverCaCerts;
    }
    public String tier() {
        return this.tier;
    }
    public String transitEncryptionMode() {
        return this.transitEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alternativeLocationId;
        private Boolean authEnabled;
        private String authString;
        private String authorizedNetwork;
        private String connectMode;
        private String createTime;
        private String currentLocationId;
        private String customerManagedKey;
        private String displayName;
        private String host;
        private String id;
        private Map<String,String> labels;
        private String locationId;
        private List<GetInstanceMaintenancePolicy> maintenancePolicies;
        private List<GetInstanceMaintenanceSchedule> maintenanceSchedules;
        private Integer memorySizeGb;
        private String name;
        private List<GetInstanceNode> nodes;
        private String persistenceIamIdentity;
        private Integer port;
        private @Nullable String project;
        private String readEndpoint;
        private Integer readEndpointPort;
        private String readReplicasMode;
        private Map<String,String> redisConfigs;
        private String redisVersion;
        private @Nullable String region;
        private Integer replicaCount;
        private String reservedIpRange;
        private String secondaryIpRange;
        private List<GetInstanceServerCaCert> serverCaCerts;
        private String tier;
        private String transitEncryptionMode;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeLocationId = defaults.alternativeLocationId;
    	      this.authEnabled = defaults.authEnabled;
    	      this.authString = defaults.authString;
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.connectMode = defaults.connectMode;
    	      this.createTime = defaults.createTime;
    	      this.currentLocationId = defaults.currentLocationId;
    	      this.customerManagedKey = defaults.customerManagedKey;
    	      this.displayName = defaults.displayName;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.locationId = defaults.locationId;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.maintenanceSchedules = defaults.maintenanceSchedules;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.name = defaults.name;
    	      this.nodes = defaults.nodes;
    	      this.persistenceIamIdentity = defaults.persistenceIamIdentity;
    	      this.port = defaults.port;
    	      this.project = defaults.project;
    	      this.readEndpoint = defaults.readEndpoint;
    	      this.readEndpointPort = defaults.readEndpointPort;
    	      this.readReplicasMode = defaults.readReplicasMode;
    	      this.redisConfigs = defaults.redisConfigs;
    	      this.redisVersion = defaults.redisVersion;
    	      this.region = defaults.region;
    	      this.replicaCount = defaults.replicaCount;
    	      this.reservedIpRange = defaults.reservedIpRange;
    	      this.secondaryIpRange = defaults.secondaryIpRange;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.tier = defaults.tier;
    	      this.transitEncryptionMode = defaults.transitEncryptionMode;
        }

        @CustomType.Setter
        public Builder alternativeLocationId(String alternativeLocationId) {
            this.alternativeLocationId = Objects.requireNonNull(alternativeLocationId);
            return this;
        }
        @CustomType.Setter
        public Builder authEnabled(Boolean authEnabled) {
            this.authEnabled = Objects.requireNonNull(authEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder authString(String authString) {
            this.authString = Objects.requireNonNull(authString);
            return this;
        }
        @CustomType.Setter
        public Builder authorizedNetwork(String authorizedNetwork) {
            this.authorizedNetwork = Objects.requireNonNull(authorizedNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder connectMode(String connectMode) {
            this.connectMode = Objects.requireNonNull(connectMode);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder currentLocationId(String currentLocationId) {
            this.currentLocationId = Objects.requireNonNull(currentLocationId);
            return this;
        }
        @CustomType.Setter
        public Builder customerManagedKey(String customerManagedKey) {
            this.customerManagedKey = Objects.requireNonNull(customerManagedKey);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder locationId(String locationId) {
            this.locationId = Objects.requireNonNull(locationId);
            return this;
        }
        @CustomType.Setter
        public Builder maintenancePolicies(List<GetInstanceMaintenancePolicy> maintenancePolicies) {
            this.maintenancePolicies = Objects.requireNonNull(maintenancePolicies);
            return this;
        }
        public Builder maintenancePolicies(GetInstanceMaintenancePolicy... maintenancePolicies) {
            return maintenancePolicies(List.of(maintenancePolicies));
        }
        @CustomType.Setter
        public Builder maintenanceSchedules(List<GetInstanceMaintenanceSchedule> maintenanceSchedules) {
            this.maintenanceSchedules = Objects.requireNonNull(maintenanceSchedules);
            return this;
        }
        public Builder maintenanceSchedules(GetInstanceMaintenanceSchedule... maintenanceSchedules) {
            return maintenanceSchedules(List.of(maintenanceSchedules));
        }
        @CustomType.Setter
        public Builder memorySizeGb(Integer memorySizeGb) {
            this.memorySizeGb = Objects.requireNonNull(memorySizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<GetInstanceNode> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }
        public Builder nodes(GetInstanceNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder persistenceIamIdentity(String persistenceIamIdentity) {
            this.persistenceIamIdentity = Objects.requireNonNull(persistenceIamIdentity);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder readEndpoint(String readEndpoint) {
            this.readEndpoint = Objects.requireNonNull(readEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder readEndpointPort(Integer readEndpointPort) {
            this.readEndpointPort = Objects.requireNonNull(readEndpointPort);
            return this;
        }
        @CustomType.Setter
        public Builder readReplicasMode(String readReplicasMode) {
            this.readReplicasMode = Objects.requireNonNull(readReplicasMode);
            return this;
        }
        @CustomType.Setter
        public Builder redisConfigs(Map<String,String> redisConfigs) {
            this.redisConfigs = Objects.requireNonNull(redisConfigs);
            return this;
        }
        @CustomType.Setter
        public Builder redisVersion(String redisVersion) {
            this.redisVersion = Objects.requireNonNull(redisVersion);
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder replicaCount(Integer replicaCount) {
            this.replicaCount = Objects.requireNonNull(replicaCount);
            return this;
        }
        @CustomType.Setter
        public Builder reservedIpRange(String reservedIpRange) {
            this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpRange(String secondaryIpRange) {
            this.secondaryIpRange = Objects.requireNonNull(secondaryIpRange);
            return this;
        }
        @CustomType.Setter
        public Builder serverCaCerts(List<GetInstanceServerCaCert> serverCaCerts) {
            this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
            return this;
        }
        public Builder serverCaCerts(GetInstanceServerCaCert... serverCaCerts) {
            return serverCaCerts(List.of(serverCaCerts));
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryptionMode(String transitEncryptionMode) {
            this.transitEncryptionMode = Objects.requireNonNull(transitEncryptionMode);
            return this;
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.alternativeLocationId = alternativeLocationId;
            o.authEnabled = authEnabled;
            o.authString = authString;
            o.authorizedNetwork = authorizedNetwork;
            o.connectMode = connectMode;
            o.createTime = createTime;
            o.currentLocationId = currentLocationId;
            o.customerManagedKey = customerManagedKey;
            o.displayName = displayName;
            o.host = host;
            o.id = id;
            o.labels = labels;
            o.locationId = locationId;
            o.maintenancePolicies = maintenancePolicies;
            o.maintenanceSchedules = maintenanceSchedules;
            o.memorySizeGb = memorySizeGb;
            o.name = name;
            o.nodes = nodes;
            o.persistenceIamIdentity = persistenceIamIdentity;
            o.port = port;
            o.project = project;
            o.readEndpoint = readEndpoint;
            o.readEndpointPort = readEndpointPort;
            o.readReplicasMode = readReplicasMode;
            o.redisConfigs = redisConfigs;
            o.redisVersion = redisVersion;
            o.region = region;
            o.replicaCount = replicaCount;
            o.reservedIpRange = reservedIpRange;
            o.secondaryIpRange = secondaryIpRange;
            o.serverCaCerts = serverCaCerts;
            o.tier = tier;
            o.transitEncryptionMode = transitEncryptionMode;
            return o;
        }
    }
}
