// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.kms.inputs.ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectKajPolicyConfigState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectKajPolicyConfigState Empty = new ProjectKajPolicyConfigState();

    /**
     * The default key access justification policy used when a CryptoKey is
     * created in this project. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultKeyAccessJustificationPolicy")
    private @Nullable Output<ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs> defaultKeyAccessJustificationPolicy;

    /**
     * @return The default key access justification policy used when a CryptoKey is
     * created in this project. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs>> defaultKeyAccessJustificationPolicy() {
        return Optional.ofNullable(this.defaultKeyAccessJustificationPolicy);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ProjectKajPolicyConfigState() {}

    private ProjectKajPolicyConfigState(ProjectKajPolicyConfigState $) {
        this.defaultKeyAccessJustificationPolicy = $.defaultKeyAccessJustificationPolicy;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectKajPolicyConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectKajPolicyConfigState $;

        public Builder() {
            $ = new ProjectKajPolicyConfigState();
        }

        public Builder(ProjectKajPolicyConfigState defaults) {
            $ = new ProjectKajPolicyConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultKeyAccessJustificationPolicy The default key access justification policy used when a CryptoKey is
         * created in this project. This is only used when a Key Access Justifications
         * policy is not provided in the CreateCryptoKeyRequest.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeyAccessJustificationPolicy(@Nullable Output<ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs> defaultKeyAccessJustificationPolicy) {
            $.defaultKeyAccessJustificationPolicy = defaultKeyAccessJustificationPolicy;
            return this;
        }

        /**
         * @param defaultKeyAccessJustificationPolicy The default key access justification policy used when a CryptoKey is
         * created in this project. This is only used when a Key Access Justifications
         * policy is not provided in the CreateCryptoKeyRequest.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeyAccessJustificationPolicy(ProjectKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs defaultKeyAccessJustificationPolicy) {
            return defaultKeyAccessJustificationPolicy(Output.of(defaultKeyAccessJustificationPolicy));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ProjectKajPolicyConfigState build() {
            return $;
        }
    }

}
