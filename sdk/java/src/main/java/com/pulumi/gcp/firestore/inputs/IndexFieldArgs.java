// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexFieldArgs Empty = new IndexFieldArgs();

    /**
     * Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
     * be specified.
     * Possible values are `CONTAINS`.
     * 
     */
    @Import(name="arrayConfig")
    private @Nullable Output<String> arrayConfig;

    /**
     * @return Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
     * be specified.
     * Possible values are `CONTAINS`.
     * 
     */
    public Optional<Output<String>> arrayConfig() {
        return Optional.ofNullable(this.arrayConfig);
    }

    /**
     * Name of the field.
     * 
     */
    @Import(name="fieldPath")
    private @Nullable Output<String> fieldPath;

    /**
     * @return Name of the field.
     * 
     */
    public Optional<Output<String>> fieldPath() {
        return Optional.ofNullable(this.fieldPath);
    }

    /**
     * Indicates that this field supports ordering by the specified order or comparing using =, &lt;, &lt;=, &gt;, &gt;=.
     * Only one of `order` and `arrayConfig` can be specified.
     * Possible values are `ASCENDING` and `DESCENDING`.
     * 
     */
    @Import(name="order")
    private @Nullable Output<String> order;

    /**
     * @return Indicates that this field supports ordering by the specified order or comparing using =, &lt;, &lt;=, &gt;, &gt;=.
     * Only one of `order` and `arrayConfig` can be specified.
     * Possible values are `ASCENDING` and `DESCENDING`.
     * 
     */
    public Optional<Output<String>> order() {
        return Optional.ofNullable(this.order);
    }

    private IndexFieldArgs() {}

    private IndexFieldArgs(IndexFieldArgs $) {
        this.arrayConfig = $.arrayConfig;
        this.fieldPath = $.fieldPath;
        this.order = $.order;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexFieldArgs $;

        public Builder() {
            $ = new IndexFieldArgs();
        }

        public Builder(IndexFieldArgs defaults) {
            $ = new IndexFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayConfig Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
         * be specified.
         * Possible values are `CONTAINS`.
         * 
         * @return builder
         * 
         */
        public Builder arrayConfig(@Nullable Output<String> arrayConfig) {
            $.arrayConfig = arrayConfig;
            return this;
        }

        /**
         * @param arrayConfig Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
         * be specified.
         * Possible values are `CONTAINS`.
         * 
         * @return builder
         * 
         */
        public Builder arrayConfig(String arrayConfig) {
            return arrayConfig(Output.of(arrayConfig));
        }

        /**
         * @param fieldPath Name of the field.
         * 
         * @return builder
         * 
         */
        public Builder fieldPath(@Nullable Output<String> fieldPath) {
            $.fieldPath = fieldPath;
            return this;
        }

        /**
         * @param fieldPath Name of the field.
         * 
         * @return builder
         * 
         */
        public Builder fieldPath(String fieldPath) {
            return fieldPath(Output.of(fieldPath));
        }

        /**
         * @param order Indicates that this field supports ordering by the specified order or comparing using =, &lt;, &lt;=, &gt;, &gt;=.
         * Only one of `order` and `arrayConfig` can be specified.
         * Possible values are `ASCENDING` and `DESCENDING`.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<String> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Indicates that this field supports ordering by the specified order or comparing using =, &lt;, &lt;=, &gt;, &gt;=.
         * Only one of `order` and `arrayConfig` can be specified.
         * Possible values are `ASCENDING` and `DESCENDING`.
         * 
         * @return builder
         * 
         */
        public Builder order(String order) {
            return order(Output.of(order));
        }

        public IndexFieldArgs build() {
            return $;
        }
    }

}
