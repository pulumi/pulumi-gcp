// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.BackendBucketArgs;
import com.pulumi.gcp.compute.inputs.BackendBucketState;
import com.pulumi.gcp.compute.outputs.BackendBucketCdnPolicy;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Backend buckets allow you to use Google Cloud Storage buckets with HTTP(S)
 * load balancing.
 * 
 * An HTTP(S) load balancer can direct traffic to specified URLs to a
 * backend bucket rather than a backend service. It can send requests for
 * static content to a Cloud Storage bucket and requests for dynamic content
 * to a virtual machine instance.
 * 
 * To get more information about BackendBucket, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendBuckets)
 * * How-to Guides
 *     * [Using a Cloud Storage bucket as a load balancer backend](https://cloud.google.com/compute/docs/load-balancing/http/backend-bucket)
 * 
 * ## Example Usage
 * ### Backend Bucket Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.compute.BackendBucket;
 * import com.pulumi.gcp.compute.BackendBucketArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var imageBucket = new Bucket(&#34;imageBucket&#34;, BucketArgs.builder()        
 *             .location(&#34;EU&#34;)
 *             .build());
 * 
 *         var imageBackend = new BackendBucket(&#34;imageBackend&#34;, BackendBucketArgs.builder()        
 *             .description(&#34;Contains beautiful images&#34;)
 *             .bucketName(imageBucket.name())
 *             .enableCdn(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Backend Bucket Security Policy
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.compute.SecurityPolicy;
 * import com.pulumi.gcp.compute.SecurityPolicyArgs;
 * import com.pulumi.gcp.compute.BackendBucket;
 * import com.pulumi.gcp.compute.BackendBucketArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var imageBackendBucket = new Bucket(&#34;imageBackendBucket&#34;, BucketArgs.builder()        
 *             .location(&#34;EU&#34;)
 *             .build());
 * 
 *         var policy = new SecurityPolicy(&#34;policy&#34;, SecurityPolicyArgs.builder()        
 *             .description(&#34;basic security policy&#34;)
 *             .type(&#34;CLOUD_ARMOR_EDGE&#34;)
 *             .build());
 * 
 *         var imageBackendBackendBucket = new BackendBucket(&#34;imageBackendBackendBucket&#34;, BackendBucketArgs.builder()        
 *             .description(&#34;Contains beautiful images&#34;)
 *             .bucketName(imageBackendBucket.name())
 *             .enableCdn(true)
 *             .edgeSecurityPolicy(policy.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Backend Bucket Query String Whitelist
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.compute.BackendBucket;
 * import com.pulumi.gcp.compute.BackendBucketArgs;
 * import com.pulumi.gcp.compute.inputs.BackendBucketCdnPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.BackendBucketCdnPolicyCacheKeyPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var imageBucket = new Bucket(&#34;imageBucket&#34;, BucketArgs.builder()        
 *             .location(&#34;EU&#34;)
 *             .build());
 * 
 *         var imageBackend = new BackendBucket(&#34;imageBackend&#34;, BackendBucketArgs.builder()        
 *             .description(&#34;Contains beautiful images&#34;)
 *             .bucketName(imageBucket.name())
 *             .enableCdn(true)
 *             .cdnPolicy(BackendBucketCdnPolicyArgs.builder()
 *                 .cacheKeyPolicy(BackendBucketCdnPolicyCacheKeyPolicyArgs.builder()
 *                     .queryStringWhitelists(&#34;image-version&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Backend Bucket Include Http Headers
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.compute.BackendBucket;
 * import com.pulumi.gcp.compute.BackendBucketArgs;
 * import com.pulumi.gcp.compute.inputs.BackendBucketCdnPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.BackendBucketCdnPolicyCacheKeyPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var imageBucket = new Bucket(&#34;imageBucket&#34;, BucketArgs.builder()        
 *             .location(&#34;EU&#34;)
 *             .build());
 * 
 *         var imageBackend = new BackendBucket(&#34;imageBackend&#34;, BackendBucketArgs.builder()        
 *             .description(&#34;Contains beautiful images&#34;)
 *             .bucketName(imageBucket.name())
 *             .enableCdn(true)
 *             .cdnPolicy(BackendBucketCdnPolicyArgs.builder()
 *                 .cacheKeyPolicy(BackendBucketCdnPolicyCacheKeyPolicyArgs.builder()
 *                     .includeHttpHeaders(&#34;X-My-Header-Field&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * BackendBucket can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/backendBucket:BackendBucket default projects/{{project}}/global/backendBuckets/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/backendBucket:BackendBucket default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/backendBucket:BackendBucket default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/backendBucket:BackendBucket")
public class BackendBucket extends com.pulumi.resources.CustomResource {
    /**
     * Cloud Storage bucket name.
     * 
     */
    @Export(name="bucketName", type=String.class, parameters={})
    private Output<String> bucketName;

    /**
     * @return Cloud Storage bucket name.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }
    /**
     * Cloud CDN configuration for this Backend Bucket.
     * Structure is documented below.
     * 
     */
    @Export(name="cdnPolicy", type=BackendBucketCdnPolicy.class, parameters={})
    private Output<BackendBucketCdnPolicy> cdnPolicy;

    /**
     * @return Cloud CDN configuration for this Backend Bucket.
     * Structure is documented below.
     * 
     */
    public Output<BackendBucketCdnPolicy> cdnPolicy() {
        return this.cdnPolicy;
    }
    /**
     * Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
     * Possible values are `AUTOMATIC` and `DISABLED`.
     * 
     */
    @Export(name="compressionMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> compressionMode;

    /**
     * @return Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
     * Possible values are `AUTOMATIC` and `DISABLED`.
     * 
     */
    public Output<Optional<String>> compressionMode() {
        return Codegen.optional(this.compressionMode);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * Headers that the HTTP/S load balancer should add to proxied responses.
     * 
     */
    @Export(name="customResponseHeaders", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> customResponseHeaders;

    /**
     * @return Headers that the HTTP/S load balancer should add to proxied responses.
     * 
     */
    public Output<Optional<List<String>>> customResponseHeaders() {
        return Codegen.optional(this.customResponseHeaders);
    }
    /**
     * An optional textual description of the resource; provided by the
     * client when the resource is created.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional textual description of the resource; provided by the
     * client when the resource is created.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The security policy associated with this backend bucket.
     * 
     */
    @Export(name="edgeSecurityPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> edgeSecurityPolicy;

    /**
     * @return The security policy associated with this backend bucket.
     * 
     */
    public Output<Optional<String>> edgeSecurityPolicy() {
        return Codegen.optional(this.edgeSecurityPolicy);
    }
    /**
     * If true, enable Cloud CDN for this BackendBucket.
     * 
     */
    @Export(name="enableCdn", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableCdn;

    /**
     * @return If true, enable Cloud CDN for this BackendBucket.
     * 
     */
    public Output<Optional<Boolean>> enableCdn() {
        return Codegen.optional(this.enableCdn);
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendBucket(String name) {
        this(name, BackendBucketArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendBucket(String name, BackendBucketArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendBucket(String name, BackendBucketArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/backendBucket:BackendBucket", name, args == null ? BackendBucketArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private BackendBucket(String name, Output<String> id, @Nullable BackendBucketState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/backendBucket:BackendBucket", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendBucket get(String name, Output<String> id, @Nullable BackendBucketState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendBucket(name, id, state, options);
    }
}
