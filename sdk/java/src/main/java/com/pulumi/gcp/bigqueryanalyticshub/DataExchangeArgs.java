// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.DataExchangeSharingEnvironmentConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataExchangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataExchangeArgs Empty = new DataExchangeArgs();

    /**
     * The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="dataExchangeId", required=true)
    private Output<String> dataExchangeId;

    /**
     * @return The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Output<String> dataExchangeId() {
        return this.dataExchangeId;
    }

    /**
     * Description of the data exchange.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the data exchange.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
     * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
     * 
     */
    @Import(name="discoveryType")
    private @Nullable Output<String> discoveryType;

    /**
     * @return Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
     * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
     * 
     */
    public Optional<Output<String>> discoveryType() {
        return Optional.ofNullable(this.discoveryType);
    }

    /**
     * Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Documentation describing the data exchange.
     * 
     */
    @Import(name="documentation")
    private @Nullable Output<String> documentation;

    /**
     * @return Documentation describing the data exchange.
     * 
     */
    public Optional<Output<String>> documentation() {
        return Optional.ofNullable(this.documentation);
    }

    /**
     * Base64 encoded image representing the data exchange.
     * 
     */
    @Import(name="icon")
    private @Nullable Output<String> icon;

    /**
     * @return Base64 encoded image representing the data exchange.
     * 
     */
    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * The name of the location this data exchange.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The name of the location this data exchange.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
     * 
     */
    @Import(name="logLinkedDatasetQueryUserEmail")
    private @Nullable Output<Boolean> logLinkedDatasetQueryUserEmail;

    /**
     * @return If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
     * 
     */
    public Optional<Output<Boolean>> logLinkedDatasetQueryUserEmail() {
        return Optional.ofNullable(this.logLinkedDatasetQueryUserEmail);
    }

    /**
     * Email or URL of the primary point of contact of the data exchange.
     * 
     */
    @Import(name="primaryContact")
    private @Nullable Output<String> primaryContact;

    /**
     * @return Email or URL of the primary point of contact of the data exchange.
     * 
     */
    public Optional<Output<String>> primaryContact() {
        return Optional.ofNullable(this.primaryContact);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Configurable data sharing environment option for a data exchange.
     * This field is required for data clean room exchanges.
     * Structure is documented below.
     * 
     */
    @Import(name="sharingEnvironmentConfig")
    private @Nullable Output<DataExchangeSharingEnvironmentConfigArgs> sharingEnvironmentConfig;

    /**
     * @return Configurable data sharing environment option for a data exchange.
     * This field is required for data clean room exchanges.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataExchangeSharingEnvironmentConfigArgs>> sharingEnvironmentConfig() {
        return Optional.ofNullable(this.sharingEnvironmentConfig);
    }

    private DataExchangeArgs() {}

    private DataExchangeArgs(DataExchangeArgs $) {
        this.dataExchangeId = $.dataExchangeId;
        this.description = $.description;
        this.discoveryType = $.discoveryType;
        this.displayName = $.displayName;
        this.documentation = $.documentation;
        this.icon = $.icon;
        this.location = $.location;
        this.logLinkedDatasetQueryUserEmail = $.logLinkedDatasetQueryUserEmail;
        this.primaryContact = $.primaryContact;
        this.project = $.project;
        this.sharingEnvironmentConfig = $.sharingEnvironmentConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataExchangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataExchangeArgs $;

        public Builder() {
            $ = new DataExchangeArgs();
        }

        public Builder(DataExchangeArgs defaults) {
            $ = new DataExchangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(Output<String> dataExchangeId) {
            $.dataExchangeId = dataExchangeId;
            return this;
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(String dataExchangeId) {
            return dataExchangeId(Output.of(dataExchangeId));
        }

        /**
         * @param description Description of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discoveryType Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
         * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(@Nullable Output<String> discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        /**
         * @param discoveryType Type of discovery on the discovery page for all the listings under this exchange. Cannot be set for a Data Clean Room. Updating this field also updates (overwrites) the discoveryType field for all the listings under this exchange.
         * Possible values are: `DISCOVERY_TYPE_PRIVATE`, `DISCOVERY_TYPE_PUBLIC`.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(String discoveryType) {
            return discoveryType(Output.of(discoveryType));
        }

        /**
         * @param displayName Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and must not start or end with spaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentation Documentation describing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder documentation(@Nullable Output<String> documentation) {
            $.documentation = documentation;
            return this;
        }

        /**
         * @param documentation Documentation describing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder documentation(String documentation) {
            return documentation(Output.of(documentation));
        }

        /**
         * @param icon Base64 encoded image representing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        /**
         * @param icon Base64 encoded image representing the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        /**
         * @param location The name of the location this data exchange.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this data exchange.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logLinkedDatasetQueryUserEmail If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
         * 
         * @return builder
         * 
         */
        public Builder logLinkedDatasetQueryUserEmail(@Nullable Output<Boolean> logLinkedDatasetQueryUserEmail) {
            $.logLinkedDatasetQueryUserEmail = logLinkedDatasetQueryUserEmail;
            return this;
        }

        /**
         * @param logLinkedDatasetQueryUserEmail If true, subscriber email logging is enabled and all queries on the linked dataset will log the email address of the querying user. Once enabled, this setting cannot be turned off.
         * 
         * @return builder
         * 
         */
        public Builder logLinkedDatasetQueryUserEmail(Boolean logLinkedDatasetQueryUserEmail) {
            return logLinkedDatasetQueryUserEmail(Output.of(logLinkedDatasetQueryUserEmail));
        }

        /**
         * @param primaryContact Email or URL of the primary point of contact of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder primaryContact(@Nullable Output<String> primaryContact) {
            $.primaryContact = primaryContact;
            return this;
        }

        /**
         * @param primaryContact Email or URL of the primary point of contact of the data exchange.
         * 
         * @return builder
         * 
         */
        public Builder primaryContact(String primaryContact) {
            return primaryContact(Output.of(primaryContact));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sharingEnvironmentConfig Configurable data sharing environment option for a data exchange.
         * This field is required for data clean room exchanges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sharingEnvironmentConfig(@Nullable Output<DataExchangeSharingEnvironmentConfigArgs> sharingEnvironmentConfig) {
            $.sharingEnvironmentConfig = sharingEnvironmentConfig;
            return this;
        }

        /**
         * @param sharingEnvironmentConfig Configurable data sharing environment option for a data exchange.
         * This field is required for data clean room exchanges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sharingEnvironmentConfig(DataExchangeSharingEnvironmentConfigArgs sharingEnvironmentConfig) {
            return sharingEnvironmentConfig(Output.of(sharingEnvironmentConfig));
        }

        public DataExchangeArgs build() {
            if ($.dataExchangeId == null) {
                throw new MissingRequiredPropertyException("DataExchangeArgs", "dataExchangeId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("DataExchangeArgs", "displayName");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("DataExchangeArgs", "location");
            }
            return $;
        }
    }

}
