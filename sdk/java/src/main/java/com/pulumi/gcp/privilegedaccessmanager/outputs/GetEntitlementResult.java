// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.privilegedaccessmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.privilegedaccessmanager.outputs.GetEntitlementAdditionalNotificationTarget;
import com.pulumi.gcp.privilegedaccessmanager.outputs.GetEntitlementApprovalWorkflow;
import com.pulumi.gcp.privilegedaccessmanager.outputs.GetEntitlementEligibleUser;
import com.pulumi.gcp.privilegedaccessmanager.outputs.GetEntitlementPrivilegedAccess;
import com.pulumi.gcp.privilegedaccessmanager.outputs.GetEntitlementRequesterJustificationConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEntitlementResult {
    private List<GetEntitlementAdditionalNotificationTarget> additionalNotificationTargets;
    private List<GetEntitlementApprovalWorkflow> approvalWorkflows;
    private String createTime;
    private List<GetEntitlementEligibleUser> eligibleUsers;
    private @Nullable String entitlementId;
    private String etag;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String location;
    private String maxRequestDuration;
    private String name;
    private @Nullable String parent;
    private List<GetEntitlementPrivilegedAccess> privilegedAccesses;
    private List<GetEntitlementRequesterJustificationConfig> requesterJustificationConfigs;
    private String state;
    private String updateTime;

    private GetEntitlementResult() {}
    public List<GetEntitlementAdditionalNotificationTarget> additionalNotificationTargets() {
        return this.additionalNotificationTargets;
    }
    public List<GetEntitlementApprovalWorkflow> approvalWorkflows() {
        return this.approvalWorkflows;
    }
    public String createTime() {
        return this.createTime;
    }
    public List<GetEntitlementEligibleUser> eligibleUsers() {
        return this.eligibleUsers;
    }
    public Optional<String> entitlementId() {
        return Optional.ofNullable(this.entitlementId);
    }
    public String etag() {
        return this.etag;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public String maxRequestDuration() {
        return this.maxRequestDuration;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> parent() {
        return Optional.ofNullable(this.parent);
    }
    public List<GetEntitlementPrivilegedAccess> privilegedAccesses() {
        return this.privilegedAccesses;
    }
    public List<GetEntitlementRequesterJustificationConfig> requesterJustificationConfigs() {
        return this.requesterJustificationConfigs;
    }
    public String state() {
        return this.state;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEntitlementResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetEntitlementAdditionalNotificationTarget> additionalNotificationTargets;
        private List<GetEntitlementApprovalWorkflow> approvalWorkflows;
        private String createTime;
        private List<GetEntitlementEligibleUser> eligibleUsers;
        private @Nullable String entitlementId;
        private String etag;
        private String id;
        private @Nullable String location;
        private String maxRequestDuration;
        private String name;
        private @Nullable String parent;
        private List<GetEntitlementPrivilegedAccess> privilegedAccesses;
        private List<GetEntitlementRequesterJustificationConfig> requesterJustificationConfigs;
        private String state;
        private String updateTime;
        public Builder() {}
        public Builder(GetEntitlementResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalNotificationTargets = defaults.additionalNotificationTargets;
    	      this.approvalWorkflows = defaults.approvalWorkflows;
    	      this.createTime = defaults.createTime;
    	      this.eligibleUsers = defaults.eligibleUsers;
    	      this.entitlementId = defaults.entitlementId;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.maxRequestDuration = defaults.maxRequestDuration;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.privilegedAccesses = defaults.privilegedAccesses;
    	      this.requesterJustificationConfigs = defaults.requesterJustificationConfigs;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder additionalNotificationTargets(List<GetEntitlementAdditionalNotificationTarget> additionalNotificationTargets) {
            if (additionalNotificationTargets == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "additionalNotificationTargets");
            }
            this.additionalNotificationTargets = additionalNotificationTargets;
            return this;
        }
        public Builder additionalNotificationTargets(GetEntitlementAdditionalNotificationTarget... additionalNotificationTargets) {
            return additionalNotificationTargets(List.of(additionalNotificationTargets));
        }
        @CustomType.Setter
        public Builder approvalWorkflows(List<GetEntitlementApprovalWorkflow> approvalWorkflows) {
            if (approvalWorkflows == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "approvalWorkflows");
            }
            this.approvalWorkflows = approvalWorkflows;
            return this;
        }
        public Builder approvalWorkflows(GetEntitlementApprovalWorkflow... approvalWorkflows) {
            return approvalWorkflows(List.of(approvalWorkflows));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder eligibleUsers(List<GetEntitlementEligibleUser> eligibleUsers) {
            if (eligibleUsers == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "eligibleUsers");
            }
            this.eligibleUsers = eligibleUsers;
            return this;
        }
        public Builder eligibleUsers(GetEntitlementEligibleUser... eligibleUsers) {
            return eligibleUsers(List.of(eligibleUsers));
        }
        @CustomType.Setter
        public Builder entitlementId(@Nullable String entitlementId) {

            this.entitlementId = entitlementId;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maxRequestDuration(String maxRequestDuration) {
            if (maxRequestDuration == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "maxRequestDuration");
            }
            this.maxRequestDuration = maxRequestDuration;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parent(@Nullable String parent) {

            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder privilegedAccesses(List<GetEntitlementPrivilegedAccess> privilegedAccesses) {
            if (privilegedAccesses == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "privilegedAccesses");
            }
            this.privilegedAccesses = privilegedAccesses;
            return this;
        }
        public Builder privilegedAccesses(GetEntitlementPrivilegedAccess... privilegedAccesses) {
            return privilegedAccesses(List.of(privilegedAccesses));
        }
        @CustomType.Setter
        public Builder requesterJustificationConfigs(List<GetEntitlementRequesterJustificationConfig> requesterJustificationConfigs) {
            if (requesterJustificationConfigs == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "requesterJustificationConfigs");
            }
            this.requesterJustificationConfigs = requesterJustificationConfigs;
            return this;
        }
        public Builder requesterJustificationConfigs(GetEntitlementRequesterJustificationConfig... requesterJustificationConfigs) {
            return requesterJustificationConfigs(List.of(requesterJustificationConfigs));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetEntitlementResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetEntitlementResult build() {
            final var _resultValue = new GetEntitlementResult();
            _resultValue.additionalNotificationTargets = additionalNotificationTargets;
            _resultValue.approvalWorkflows = approvalWorkflows;
            _resultValue.createTime = createTime;
            _resultValue.eligibleUsers = eligibleUsers;
            _resultValue.entitlementId = entitlementId;
            _resultValue.etag = etag;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.maxRequestDuration = maxRequestDuration;
            _resultValue.name = name;
            _resultValue.parent = parent;
            _resultValue.privilegedAccesses = privilegedAccesses;
            _resultValue.requesterJustificationConfigs = requesterJustificationConfigs;
            _resultValue.state = state;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
