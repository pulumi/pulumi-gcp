// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceAdvancedMachineFeature {
    /**
     * @return Whether to enable nested virtualization or not.
     * 
     */
    private Boolean enableNestedVirtualization;
    /**
     * @return Whether to enable UEFI networking for the instance.
     * 
     */
    private Boolean enableUefiNetworking;
    /**
     * @return The PMU is a hardware component within the CPU core that monitors how the processor runs code. Valid values for the level of PMU are &#34;STANDARD&#34;, &#34;ENHANCED&#34;, and &#34;ARCHITECTURAL&#34;.
     * 
     */
    private String performanceMonitoringUnit;
    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    private Integer threadsPerCore;
    /**
     * @return Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
     * 
     */
    private String turboMode;
    /**
     * @return The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
     * 
     */
    private Integer visibleCoreCount;

    private GetInstanceAdvancedMachineFeature() {}
    /**
     * @return Whether to enable nested virtualization or not.
     * 
     */
    public Boolean enableNestedVirtualization() {
        return this.enableNestedVirtualization;
    }
    /**
     * @return Whether to enable UEFI networking for the instance.
     * 
     */
    public Boolean enableUefiNetworking() {
        return this.enableUefiNetworking;
    }
    /**
     * @return The PMU is a hardware component within the CPU core that monitors how the processor runs code. Valid values for the level of PMU are &#34;STANDARD&#34;, &#34;ENHANCED&#34;, and &#34;ARCHITECTURAL&#34;.
     * 
     */
    public String performanceMonitoringUnit() {
        return this.performanceMonitoringUnit;
    }
    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    public Integer threadsPerCore() {
        return this.threadsPerCore;
    }
    /**
     * @return Turbo frequency mode to use for the instance. Currently supported modes is &#34;ALL_CORE_MAX&#34;.
     * 
     */
    public String turboMode() {
        return this.turboMode;
    }
    /**
     * @return The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\&#39;s nominal CPU count and the underlying platform\&#39;s SMT width.
     * 
     */
    public Integer visibleCoreCount() {
        return this.visibleCoreCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceAdvancedMachineFeature defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableNestedVirtualization;
        private Boolean enableUefiNetworking;
        private String performanceMonitoringUnit;
        private Integer threadsPerCore;
        private String turboMode;
        private Integer visibleCoreCount;
        public Builder() {}
        public Builder(GetInstanceAdvancedMachineFeature defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNestedVirtualization = defaults.enableNestedVirtualization;
    	      this.enableUefiNetworking = defaults.enableUefiNetworking;
    	      this.performanceMonitoringUnit = defaults.performanceMonitoringUnit;
    	      this.threadsPerCore = defaults.threadsPerCore;
    	      this.turboMode = defaults.turboMode;
    	      this.visibleCoreCount = defaults.visibleCoreCount;
        }

        @CustomType.Setter
        public Builder enableNestedVirtualization(Boolean enableNestedVirtualization) {
            if (enableNestedVirtualization == null) {
              throw new MissingRequiredPropertyException("GetInstanceAdvancedMachineFeature", "enableNestedVirtualization");
            }
            this.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }
        @CustomType.Setter
        public Builder enableUefiNetworking(Boolean enableUefiNetworking) {
            if (enableUefiNetworking == null) {
              throw new MissingRequiredPropertyException("GetInstanceAdvancedMachineFeature", "enableUefiNetworking");
            }
            this.enableUefiNetworking = enableUefiNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder performanceMonitoringUnit(String performanceMonitoringUnit) {
            if (performanceMonitoringUnit == null) {
              throw new MissingRequiredPropertyException("GetInstanceAdvancedMachineFeature", "performanceMonitoringUnit");
            }
            this.performanceMonitoringUnit = performanceMonitoringUnit;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCore(Integer threadsPerCore) {
            if (threadsPerCore == null) {
              throw new MissingRequiredPropertyException("GetInstanceAdvancedMachineFeature", "threadsPerCore");
            }
            this.threadsPerCore = threadsPerCore;
            return this;
        }
        @CustomType.Setter
        public Builder turboMode(String turboMode) {
            if (turboMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceAdvancedMachineFeature", "turboMode");
            }
            this.turboMode = turboMode;
            return this;
        }
        @CustomType.Setter
        public Builder visibleCoreCount(Integer visibleCoreCount) {
            if (visibleCoreCount == null) {
              throw new MissingRequiredPropertyException("GetInstanceAdvancedMachineFeature", "visibleCoreCount");
            }
            this.visibleCoreCount = visibleCoreCount;
            return this;
        }
        public GetInstanceAdvancedMachineFeature build() {
            final var _resultValue = new GetInstanceAdvancedMachineFeature();
            _resultValue.enableNestedVirtualization = enableNestedVirtualization;
            _resultValue.enableUefiNetworking = enableUefiNetworking;
            _resultValue.performanceMonitoringUnit = performanceMonitoringUnit;
            _resultValue.threadsPerCore = threadsPerCore;
            _resultValue.turboMode = turboMode;
            _resultValue.visibleCoreCount = visibleCoreCount;
            return _resultValue;
        }
    }
}
