// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.bigtable.AuthorizedViewArgs;
import com.pulumi.gcp.bigtable.inputs.AuthorizedViewState;
import com.pulumi.gcp.bigtable.outputs.AuthorizedViewSubsetView;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * Bigtable Authorized Views can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/instances/{{instance_name}}/tables/{{table_name}}/authorizedViews/{{name}}`
 * 
 * * `{{project}}/{{instance_name}}/{{table_name}}/{{name}}`
 * 
 * * `{{instance_name}}/{{table_name}}/{{name}}`
 * 
 * When using the `pulumi import` command, Bigtable Authorized Views can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default projects/{{project}}/instances/{{instance_name}}/tables/{{table_name}}/authorizedViews/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default {{project}}/{{instance_name}}/{{table_name}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/authorizedView:AuthorizedView default {{instance_name}}/{{table_name}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:bigtable/authorizedView:AuthorizedView")
public class AuthorizedView extends com.pulumi.resources.CustomResource {
    @Export(name="deletionProtection", refs={String.class}, tree="[0]")
    private Output<String> deletionProtection;

    public Output<String> deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * The name of the Bigtable instance in which the authorized view belongs.
     * 
     */
    @Export(name="instanceName", refs={String.class}, tree="[0]")
    private Output<String> instanceName;

    /**
     * @return The name of the Bigtable instance in which the authorized view belongs.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }
    /**
     * The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the authorized view. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     * 
     * ***
     * 
     */
    @Export(name="subsetView", refs={AuthorizedViewSubsetView.class}, tree="[0]")
    private Output</* @Nullable */ AuthorizedViewSubsetView> subsetView;

    /**
     * @return An AuthorizedView permitting access to an explicit subset of a Table. Structure is documented below.
     * 
     * ***
     * 
     */
    public Output<Optional<AuthorizedViewSubsetView>> subsetView() {
        return Codegen.optional(this.subsetView);
    }
    /**
     * The name of the Bigtable table in which the authorized view belongs.
     * 
     */
    @Export(name="tableName", refs={String.class}, tree="[0]")
    private Output<String> tableName;

    /**
     * @return The name of the Bigtable table in which the authorized view belongs.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AuthorizedView(java.lang.String name) {
        this(name, AuthorizedViewArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AuthorizedView(java.lang.String name, AuthorizedViewArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AuthorizedView(java.lang.String name, AuthorizedViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/authorizedView:AuthorizedView", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AuthorizedView(java.lang.String name, Output<java.lang.String> id, @Nullable AuthorizedViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/authorizedView:AuthorizedView", name, state, makeResourceOptions(options, id), false);
    }

    private static AuthorizedViewArgs makeArgs(AuthorizedViewArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AuthorizedViewArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AuthorizedView get(java.lang.String name, Output<java.lang.String> id, @Nullable AuthorizedViewState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AuthorizedView(name, id, state, options);
    }
}
