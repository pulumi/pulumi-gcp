// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctions.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudfunctions.inputs.FunctionSecretVolumeVersionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionSecretVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionSecretVolumeArgs Empty = new FunctionSecretVolumeArgs();

    /**
     * The path within the container to mount the secret volume. For example, setting the mount_path as &#34;/etc/secrets&#34; would mount the secret value files under the &#34;/etc/secrets&#34; directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: &#34;/etc/secrets&#34; Restricted mount paths: &#34;/cloudsql&#34;, &#34;/dev/log&#34;, &#34;/pod&#34;, &#34;/proc&#34;, &#34;/var/log&#34;.
     * 
     */
    @Import(name="mountPath", required=true)
    private Output<String> mountPath;

    /**
     * @return The path within the container to mount the secret volume. For example, setting the mount_path as &#34;/etc/secrets&#34; would mount the secret value files under the &#34;/etc/secrets&#34; directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: &#34;/etc/secrets&#34; Restricted mount paths: &#34;/cloudsql&#34;, &#34;/dev/log&#34;, &#34;/pod&#34;, &#34;/proc&#34;, &#34;/var/log&#34;.
     * 
     */
    public Output<String> mountPath() {
        return this.mountPath;
    }

    /**
     * Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function&#39;s project, assuming that the secret exists in the same project as of the function.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function&#39;s project, assuming that the secret exists in the same project as of the function.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * ID of the secret in secret manager (not the full resource name).
     * 
     */
    @Import(name="secret", required=true)
    private Output<String> secret;

    /**
     * @return ID of the secret in secret manager (not the full resource name).
     * 
     */
    public Output<String> secret() {
        return this.secret;
    }

    /**
     * List of secret versions to mount for this secret. If empty, the &#34;latest&#34; version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<FunctionSecretVolumeVersionArgs>> versions;

    /**
     * @return List of secret versions to mount for this secret. If empty, the &#34;latest&#34; version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
     * 
     */
    public Optional<Output<List<FunctionSecretVolumeVersionArgs>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private FunctionSecretVolumeArgs() {}

    private FunctionSecretVolumeArgs(FunctionSecretVolumeArgs $) {
        this.mountPath = $.mountPath;
        this.projectId = $.projectId;
        this.secret = $.secret;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionSecretVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionSecretVolumeArgs $;

        public Builder() {
            $ = new FunctionSecretVolumeArgs();
        }

        public Builder(FunctionSecretVolumeArgs defaults) {
            $ = new FunctionSecretVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mountPath The path within the container to mount the secret volume. For example, setting the mount_path as &#34;/etc/secrets&#34; would mount the secret value files under the &#34;/etc/secrets&#34; directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: &#34;/etc/secrets&#34; Restricted mount paths: &#34;/cloudsql&#34;, &#34;/dev/log&#34;, &#34;/pod&#34;, &#34;/proc&#34;, &#34;/var/log&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath The path within the container to mount the secret volume. For example, setting the mount_path as &#34;/etc/secrets&#34; would mount the secret value files under the &#34;/etc/secrets&#34; directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: &#34;/etc/secrets&#34; Restricted mount paths: &#34;/cloudsql&#34;, &#34;/dev/log&#34;, &#34;/pod&#34;, &#34;/proc&#34;, &#34;/var/log&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        /**
         * @param projectId Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function&#39;s project, assuming that the secret exists in the same project as of the function.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function&#39;s project, assuming that the secret exists in the same project as of the function.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param secret ID of the secret in secret manager (not the full resource name).
         * 
         * @return builder
         * 
         */
        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret ID of the secret in secret manager (not the full resource name).
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param versions List of secret versions to mount for this secret. If empty, the &#34;latest&#34; version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<FunctionSecretVolumeVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions List of secret versions to mount for this secret. If empty, the &#34;latest&#34; version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<FunctionSecretVolumeVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions List of secret versions to mount for this secret. If empty, the &#34;latest&#34; version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(FunctionSecretVolumeVersionArgs... versions) {
            return versions(List.of(versions));
        }

        public FunctionSecretVolumeArgs build() {
            $.mountPath = Objects.requireNonNull($.mountPath, "expected parameter 'mountPath' to be non-null");
            $.secret = Objects.requireNonNull($.secret, "expected parameter 'secret' to be non-null");
            return $;
        }
    }

}
