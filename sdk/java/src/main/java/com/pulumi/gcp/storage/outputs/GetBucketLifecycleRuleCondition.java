// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBucketLifecycleRuleCondition {
    private final Integer age;
    private final String createdBefore;
    private final String customTimeBefore;
    private final Integer daysSinceCustomTime;
    private final Integer daysSinceNoncurrentTime;
    private final List<String> matchesPrefixes;
    private final List<String> matchesStorageClasses;
    private final List<String> matchesSuffixes;
    private final String noncurrentTimeBefore;
    private final Integer numNewerVersions;
    private final String withState;

    @CustomType.Constructor
    private GetBucketLifecycleRuleCondition(
        @CustomType.Parameter("age") Integer age,
        @CustomType.Parameter("createdBefore") String createdBefore,
        @CustomType.Parameter("customTimeBefore") String customTimeBefore,
        @CustomType.Parameter("daysSinceCustomTime") Integer daysSinceCustomTime,
        @CustomType.Parameter("daysSinceNoncurrentTime") Integer daysSinceNoncurrentTime,
        @CustomType.Parameter("matchesPrefixes") List<String> matchesPrefixes,
        @CustomType.Parameter("matchesStorageClasses") List<String> matchesStorageClasses,
        @CustomType.Parameter("matchesSuffixes") List<String> matchesSuffixes,
        @CustomType.Parameter("noncurrentTimeBefore") String noncurrentTimeBefore,
        @CustomType.Parameter("numNewerVersions") Integer numNewerVersions,
        @CustomType.Parameter("withState") String withState) {
        this.age = age;
        this.createdBefore = createdBefore;
        this.customTimeBefore = customTimeBefore;
        this.daysSinceCustomTime = daysSinceCustomTime;
        this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
        this.matchesPrefixes = matchesPrefixes;
        this.matchesStorageClasses = matchesStorageClasses;
        this.matchesSuffixes = matchesSuffixes;
        this.noncurrentTimeBefore = noncurrentTimeBefore;
        this.numNewerVersions = numNewerVersions;
        this.withState = withState;
    }

    public Integer age() {
        return this.age;
    }
    public String createdBefore() {
        return this.createdBefore;
    }
    public String customTimeBefore() {
        return this.customTimeBefore;
    }
    public Integer daysSinceCustomTime() {
        return this.daysSinceCustomTime;
    }
    public Integer daysSinceNoncurrentTime() {
        return this.daysSinceNoncurrentTime;
    }
    public List<String> matchesPrefixes() {
        return this.matchesPrefixes;
    }
    public List<String> matchesStorageClasses() {
        return this.matchesStorageClasses;
    }
    public List<String> matchesSuffixes() {
        return this.matchesSuffixes;
    }
    public String noncurrentTimeBefore() {
        return this.noncurrentTimeBefore;
    }
    public Integer numNewerVersions() {
        return this.numNewerVersions;
    }
    public String withState() {
        return this.withState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketLifecycleRuleCondition defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer age;
        private String createdBefore;
        private String customTimeBefore;
        private Integer daysSinceCustomTime;
        private Integer daysSinceNoncurrentTime;
        private List<String> matchesPrefixes;
        private List<String> matchesStorageClasses;
        private List<String> matchesSuffixes;
        private String noncurrentTimeBefore;
        private Integer numNewerVersions;
        private String withState;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBucketLifecycleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.createdBefore = defaults.createdBefore;
    	      this.customTimeBefore = defaults.customTimeBefore;
    	      this.daysSinceCustomTime = defaults.daysSinceCustomTime;
    	      this.daysSinceNoncurrentTime = defaults.daysSinceNoncurrentTime;
    	      this.matchesPrefixes = defaults.matchesPrefixes;
    	      this.matchesStorageClasses = defaults.matchesStorageClasses;
    	      this.matchesSuffixes = defaults.matchesSuffixes;
    	      this.noncurrentTimeBefore = defaults.noncurrentTimeBefore;
    	      this.numNewerVersions = defaults.numNewerVersions;
    	      this.withState = defaults.withState;
        }

        public Builder age(Integer age) {
            this.age = Objects.requireNonNull(age);
            return this;
        }
        public Builder createdBefore(String createdBefore) {
            this.createdBefore = Objects.requireNonNull(createdBefore);
            return this;
        }
        public Builder customTimeBefore(String customTimeBefore) {
            this.customTimeBefore = Objects.requireNonNull(customTimeBefore);
            return this;
        }
        public Builder daysSinceCustomTime(Integer daysSinceCustomTime) {
            this.daysSinceCustomTime = Objects.requireNonNull(daysSinceCustomTime);
            return this;
        }
        public Builder daysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
            this.daysSinceNoncurrentTime = Objects.requireNonNull(daysSinceNoncurrentTime);
            return this;
        }
        public Builder matchesPrefixes(List<String> matchesPrefixes) {
            this.matchesPrefixes = Objects.requireNonNull(matchesPrefixes);
            return this;
        }
        public Builder matchesPrefixes(String... matchesPrefixes) {
            return matchesPrefixes(List.of(matchesPrefixes));
        }
        public Builder matchesStorageClasses(List<String> matchesStorageClasses) {
            this.matchesStorageClasses = Objects.requireNonNull(matchesStorageClasses);
            return this;
        }
        public Builder matchesStorageClasses(String... matchesStorageClasses) {
            return matchesStorageClasses(List.of(matchesStorageClasses));
        }
        public Builder matchesSuffixes(List<String> matchesSuffixes) {
            this.matchesSuffixes = Objects.requireNonNull(matchesSuffixes);
            return this;
        }
        public Builder matchesSuffixes(String... matchesSuffixes) {
            return matchesSuffixes(List.of(matchesSuffixes));
        }
        public Builder noncurrentTimeBefore(String noncurrentTimeBefore) {
            this.noncurrentTimeBefore = Objects.requireNonNull(noncurrentTimeBefore);
            return this;
        }
        public Builder numNewerVersions(Integer numNewerVersions) {
            this.numNewerVersions = Objects.requireNonNull(numNewerVersions);
            return this;
        }
        public Builder withState(String withState) {
            this.withState = Objects.requireNonNull(withState);
            return this;
        }        public GetBucketLifecycleRuleCondition build() {
            return new GetBucketLifecycleRuleCondition(age, createdBefore, customTimeBefore, daysSinceCustomTime, daysSinceNoncurrentTime, matchesPrefixes, matchesStorageClasses, matchesSuffixes, noncurrentTimeBefore, numNewerVersions, withState);
        }
    }
}
