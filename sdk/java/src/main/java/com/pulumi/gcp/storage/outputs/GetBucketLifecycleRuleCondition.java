// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBucketLifecycleRuleCondition {
    private Integer age;
    private String createdBefore;
    private String customTimeBefore;
    private Integer daysSinceCustomTime;
    private Integer daysSinceNoncurrentTime;
    private List<String> matchesPrefixes;
    private List<String> matchesStorageClasses;
    private List<String> matchesSuffixes;
    private String noncurrentTimeBefore;
    private Integer numNewerVersions;
    private String withState;

    private GetBucketLifecycleRuleCondition() {}
    public Integer age() {
        return this.age;
    }
    public String createdBefore() {
        return this.createdBefore;
    }
    public String customTimeBefore() {
        return this.customTimeBefore;
    }
    public Integer daysSinceCustomTime() {
        return this.daysSinceCustomTime;
    }
    public Integer daysSinceNoncurrentTime() {
        return this.daysSinceNoncurrentTime;
    }
    public List<String> matchesPrefixes() {
        return this.matchesPrefixes;
    }
    public List<String> matchesStorageClasses() {
        return this.matchesStorageClasses;
    }
    public List<String> matchesSuffixes() {
        return this.matchesSuffixes;
    }
    public String noncurrentTimeBefore() {
        return this.noncurrentTimeBefore;
    }
    public Integer numNewerVersions() {
        return this.numNewerVersions;
    }
    public String withState() {
        return this.withState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketLifecycleRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer age;
        private String createdBefore;
        private String customTimeBefore;
        private Integer daysSinceCustomTime;
        private Integer daysSinceNoncurrentTime;
        private List<String> matchesPrefixes;
        private List<String> matchesStorageClasses;
        private List<String> matchesSuffixes;
        private String noncurrentTimeBefore;
        private Integer numNewerVersions;
        private String withState;
        public Builder() {}
        public Builder(GetBucketLifecycleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.createdBefore = defaults.createdBefore;
    	      this.customTimeBefore = defaults.customTimeBefore;
    	      this.daysSinceCustomTime = defaults.daysSinceCustomTime;
    	      this.daysSinceNoncurrentTime = defaults.daysSinceNoncurrentTime;
    	      this.matchesPrefixes = defaults.matchesPrefixes;
    	      this.matchesStorageClasses = defaults.matchesStorageClasses;
    	      this.matchesSuffixes = defaults.matchesSuffixes;
    	      this.noncurrentTimeBefore = defaults.noncurrentTimeBefore;
    	      this.numNewerVersions = defaults.numNewerVersions;
    	      this.withState = defaults.withState;
        }

        @CustomType.Setter
        public Builder age(Integer age) {
            this.age = Objects.requireNonNull(age);
            return this;
        }
        @CustomType.Setter
        public Builder createdBefore(String createdBefore) {
            this.createdBefore = Objects.requireNonNull(createdBefore);
            return this;
        }
        @CustomType.Setter
        public Builder customTimeBefore(String customTimeBefore) {
            this.customTimeBefore = Objects.requireNonNull(customTimeBefore);
            return this;
        }
        @CustomType.Setter
        public Builder daysSinceCustomTime(Integer daysSinceCustomTime) {
            this.daysSinceCustomTime = Objects.requireNonNull(daysSinceCustomTime);
            return this;
        }
        @CustomType.Setter
        public Builder daysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
            this.daysSinceNoncurrentTime = Objects.requireNonNull(daysSinceNoncurrentTime);
            return this;
        }
        @CustomType.Setter
        public Builder matchesPrefixes(List<String> matchesPrefixes) {
            this.matchesPrefixes = Objects.requireNonNull(matchesPrefixes);
            return this;
        }
        public Builder matchesPrefixes(String... matchesPrefixes) {
            return matchesPrefixes(List.of(matchesPrefixes));
        }
        @CustomType.Setter
        public Builder matchesStorageClasses(List<String> matchesStorageClasses) {
            this.matchesStorageClasses = Objects.requireNonNull(matchesStorageClasses);
            return this;
        }
        public Builder matchesStorageClasses(String... matchesStorageClasses) {
            return matchesStorageClasses(List.of(matchesStorageClasses));
        }
        @CustomType.Setter
        public Builder matchesSuffixes(List<String> matchesSuffixes) {
            this.matchesSuffixes = Objects.requireNonNull(matchesSuffixes);
            return this;
        }
        public Builder matchesSuffixes(String... matchesSuffixes) {
            return matchesSuffixes(List.of(matchesSuffixes));
        }
        @CustomType.Setter
        public Builder noncurrentTimeBefore(String noncurrentTimeBefore) {
            this.noncurrentTimeBefore = Objects.requireNonNull(noncurrentTimeBefore);
            return this;
        }
        @CustomType.Setter
        public Builder numNewerVersions(Integer numNewerVersions) {
            this.numNewerVersions = Objects.requireNonNull(numNewerVersions);
            return this;
        }
        @CustomType.Setter
        public Builder withState(String withState) {
            this.withState = Objects.requireNonNull(withState);
            return this;
        }
        public GetBucketLifecycleRuleCondition build() {
            final var o = new GetBucketLifecycleRuleCondition();
            o.age = age;
            o.createdBefore = createdBefore;
            o.customTimeBefore = customTimeBefore;
            o.daysSinceCustomTime = daysSinceCustomTime;
            o.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            o.matchesPrefixes = matchesPrefixes;
            o.matchesStorageClasses = matchesStorageClasses;
            o.matchesSuffixes = matchesSuffixes;
            o.noncurrentTimeBefore = noncurrentTimeBefore;
            o.numNewerVersions = numNewerVersions;
            o.withState = withState;
            return o;
        }
    }
}
