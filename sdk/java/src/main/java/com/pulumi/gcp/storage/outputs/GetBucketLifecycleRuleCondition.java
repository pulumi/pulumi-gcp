// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBucketLifecycleRuleCondition {
    private Integer age;
    private String createdBefore;
    private String customTimeBefore;
    private Integer daysSinceCustomTime;
    private Integer daysSinceNoncurrentTime;
    private List<String> matchesPrefixes;
    private List<String> matchesStorageClasses;
    private List<String> matchesSuffixes;
    private Boolean noAge;
    private String noncurrentTimeBefore;
    private Integer numNewerVersions;
    private String withState;

    private GetBucketLifecycleRuleCondition() {}
    public Integer age() {
        return this.age;
    }
    public String createdBefore() {
        return this.createdBefore;
    }
    public String customTimeBefore() {
        return this.customTimeBefore;
    }
    public Integer daysSinceCustomTime() {
        return this.daysSinceCustomTime;
    }
    public Integer daysSinceNoncurrentTime() {
        return this.daysSinceNoncurrentTime;
    }
    public List<String> matchesPrefixes() {
        return this.matchesPrefixes;
    }
    public List<String> matchesStorageClasses() {
        return this.matchesStorageClasses;
    }
    public List<String> matchesSuffixes() {
        return this.matchesSuffixes;
    }
    public Boolean noAge() {
        return this.noAge;
    }
    public String noncurrentTimeBefore() {
        return this.noncurrentTimeBefore;
    }
    public Integer numNewerVersions() {
        return this.numNewerVersions;
    }
    public String withState() {
        return this.withState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketLifecycleRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer age;
        private String createdBefore;
        private String customTimeBefore;
        private Integer daysSinceCustomTime;
        private Integer daysSinceNoncurrentTime;
        private List<String> matchesPrefixes;
        private List<String> matchesStorageClasses;
        private List<String> matchesSuffixes;
        private Boolean noAge;
        private String noncurrentTimeBefore;
        private Integer numNewerVersions;
        private String withState;
        public Builder() {}
        public Builder(GetBucketLifecycleRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.createdBefore = defaults.createdBefore;
    	      this.customTimeBefore = defaults.customTimeBefore;
    	      this.daysSinceCustomTime = defaults.daysSinceCustomTime;
    	      this.daysSinceNoncurrentTime = defaults.daysSinceNoncurrentTime;
    	      this.matchesPrefixes = defaults.matchesPrefixes;
    	      this.matchesStorageClasses = defaults.matchesStorageClasses;
    	      this.matchesSuffixes = defaults.matchesSuffixes;
    	      this.noAge = defaults.noAge;
    	      this.noncurrentTimeBefore = defaults.noncurrentTimeBefore;
    	      this.numNewerVersions = defaults.numNewerVersions;
    	      this.withState = defaults.withState;
        }

        @CustomType.Setter
        public Builder age(Integer age) {
            if (age == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "age");
            }
            this.age = age;
            return this;
        }
        @CustomType.Setter
        public Builder createdBefore(String createdBefore) {
            if (createdBefore == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "createdBefore");
            }
            this.createdBefore = createdBefore;
            return this;
        }
        @CustomType.Setter
        public Builder customTimeBefore(String customTimeBefore) {
            if (customTimeBefore == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "customTimeBefore");
            }
            this.customTimeBefore = customTimeBefore;
            return this;
        }
        @CustomType.Setter
        public Builder daysSinceCustomTime(Integer daysSinceCustomTime) {
            if (daysSinceCustomTime == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "daysSinceCustomTime");
            }
            this.daysSinceCustomTime = daysSinceCustomTime;
            return this;
        }
        @CustomType.Setter
        public Builder daysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
            if (daysSinceNoncurrentTime == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "daysSinceNoncurrentTime");
            }
            this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            return this;
        }
        @CustomType.Setter
        public Builder matchesPrefixes(List<String> matchesPrefixes) {
            if (matchesPrefixes == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "matchesPrefixes");
            }
            this.matchesPrefixes = matchesPrefixes;
            return this;
        }
        public Builder matchesPrefixes(String... matchesPrefixes) {
            return matchesPrefixes(List.of(matchesPrefixes));
        }
        @CustomType.Setter
        public Builder matchesStorageClasses(List<String> matchesStorageClasses) {
            if (matchesStorageClasses == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "matchesStorageClasses");
            }
            this.matchesStorageClasses = matchesStorageClasses;
            return this;
        }
        public Builder matchesStorageClasses(String... matchesStorageClasses) {
            return matchesStorageClasses(List.of(matchesStorageClasses));
        }
        @CustomType.Setter
        public Builder matchesSuffixes(List<String> matchesSuffixes) {
            if (matchesSuffixes == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "matchesSuffixes");
            }
            this.matchesSuffixes = matchesSuffixes;
            return this;
        }
        public Builder matchesSuffixes(String... matchesSuffixes) {
            return matchesSuffixes(List.of(matchesSuffixes));
        }
        @CustomType.Setter
        public Builder noAge(Boolean noAge) {
            if (noAge == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "noAge");
            }
            this.noAge = noAge;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentTimeBefore(String noncurrentTimeBefore) {
            if (noncurrentTimeBefore == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "noncurrentTimeBefore");
            }
            this.noncurrentTimeBefore = noncurrentTimeBefore;
            return this;
        }
        @CustomType.Setter
        public Builder numNewerVersions(Integer numNewerVersions) {
            if (numNewerVersions == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "numNewerVersions");
            }
            this.numNewerVersions = numNewerVersions;
            return this;
        }
        @CustomType.Setter
        public Builder withState(String withState) {
            if (withState == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleRuleCondition", "withState");
            }
            this.withState = withState;
            return this;
        }
        public GetBucketLifecycleRuleCondition build() {
            final var _resultValue = new GetBucketLifecycleRuleCondition();
            _resultValue.age = age;
            _resultValue.createdBefore = createdBefore;
            _resultValue.customTimeBefore = customTimeBefore;
            _resultValue.daysSinceCustomTime = daysSinceCustomTime;
            _resultValue.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
            _resultValue.matchesPrefixes = matchesPrefixes;
            _resultValue.matchesStorageClasses = matchesStorageClasses;
            _resultValue.matchesSuffixes = matchesSuffixes;
            _resultValue.noAge = noAge;
            _resultValue.noncurrentTimeBefore = noncurrentTimeBefore;
            _resultValue.numNewerVersions = numNewerVersions;
            _resultValue.withState = withState;
            return _resultValue;
        }
    }
}
