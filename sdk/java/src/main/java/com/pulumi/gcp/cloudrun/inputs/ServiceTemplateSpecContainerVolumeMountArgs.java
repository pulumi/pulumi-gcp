// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ServiceTemplateSpecContainerVolumeMountArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecContainerVolumeMountArgs Empty = new ServiceTemplateSpecContainerVolumeMountArgs();

    /**
     * Path within the container at which the volume should be mounted.  Must
     * not contain &#39;:&#39;.
     * 
     */
    @Import(name="mountPath", required=true)
    private Output<String> mountPath;

    /**
     * @return Path within the container at which the volume should be mounted.  Must
     * not contain &#39;:&#39;.
     * 
     */
    public Output<String> mountPath() {
        return this.mountPath;
    }

    /**
     * Volume&#39;s name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Volume&#39;s name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ServiceTemplateSpecContainerVolumeMountArgs() {}

    private ServiceTemplateSpecContainerVolumeMountArgs(ServiceTemplateSpecContainerVolumeMountArgs $) {
        this.mountPath = $.mountPath;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateSpecContainerVolumeMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateSpecContainerVolumeMountArgs $;

        public Builder() {
            $ = new ServiceTemplateSpecContainerVolumeMountArgs();
        }

        public Builder(ServiceTemplateSpecContainerVolumeMountArgs defaults) {
            $ = new ServiceTemplateSpecContainerVolumeMountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mountPath Path within the container at which the volume should be mounted.  Must
         * not contain &#39;:&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(Output<String> mountPath) {
            $.mountPath = mountPath;
            return this;
        }

        /**
         * @param mountPath Path within the container at which the volume should be mounted.  Must
         * not contain &#39;:&#39;.
         * 
         * @return builder
         * 
         */
        public Builder mountPath(String mountPath) {
            return mountPath(Output.of(mountPath));
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ServiceTemplateSpecContainerVolumeMountArgs build() {
            $.mountPath = Objects.requireNonNull($.mountPath, "expected parameter 'mountPath' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
