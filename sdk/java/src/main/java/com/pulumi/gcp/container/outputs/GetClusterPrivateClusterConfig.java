// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterPrivateClusterConfigMasterGlobalAccessConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterPrivateClusterConfig {
    /**
     * @return When true, the cluster&#39;s private endpoint is used as the cluster endpoint and access through the public endpoint is disabled. When false, either endpoint can be used.
     * 
     */
    private Boolean enablePrivateEndpoint;
    /**
     * @return Enables the private cluster feature, creating a private endpoint on the cluster. In a private cluster, nodes only have RFC 1918 private addresses and communicate with the master&#39;s private endpoint via private networking.
     * 
     */
    private Boolean enablePrivateNodes;
    /**
     * @return Controls cluster master global access settings.
     * 
     */
    private List<GetClusterPrivateClusterConfigMasterGlobalAccessConfig> masterGlobalAccessConfigs;
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning private IP addresses to the cluster master(s) and the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network, and it must be a /28 subnet. See Private Cluster Limitations for more details. This field only applies to private clusters, when enablePrivateNodes is true.
     * 
     */
    private String masterIpv4CidrBlock;
    /**
     * @return The name of the peering between this cluster and the Google owned VPC.
     * 
     */
    private String peeringName;
    /**
     * @return The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    private String privateEndpoint;
    /**
     * @return Subnetwork in cluster&#39;s network where master&#39;s endpoint will be provisioned.
     * 
     */
    private String privateEndpointSubnetwork;
    /**
     * @return The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    private String publicEndpoint;

    private GetClusterPrivateClusterConfig() {}
    /**
     * @return When true, the cluster&#39;s private endpoint is used as the cluster endpoint and access through the public endpoint is disabled. When false, either endpoint can be used.
     * 
     */
    public Boolean enablePrivateEndpoint() {
        return this.enablePrivateEndpoint;
    }
    /**
     * @return Enables the private cluster feature, creating a private endpoint on the cluster. In a private cluster, nodes only have RFC 1918 private addresses and communicate with the master&#39;s private endpoint via private networking.
     * 
     */
    public Boolean enablePrivateNodes() {
        return this.enablePrivateNodes;
    }
    /**
     * @return Controls cluster master global access settings.
     * 
     */
    public List<GetClusterPrivateClusterConfigMasterGlobalAccessConfig> masterGlobalAccessConfigs() {
        return this.masterGlobalAccessConfigs;
    }
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning private IP addresses to the cluster master(s) and the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network, and it must be a /28 subnet. See Private Cluster Limitations for more details. This field only applies to private clusters, when enablePrivateNodes is true.
     * 
     */
    public String masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }
    /**
     * @return The name of the peering between this cluster and the Google owned VPC.
     * 
     */
    public String peeringName() {
        return this.peeringName;
    }
    /**
     * @return The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    public String privateEndpoint() {
        return this.privateEndpoint;
    }
    /**
     * @return Subnetwork in cluster&#39;s network where master&#39;s endpoint will be provisioned.
     * 
     */
    public String privateEndpointSubnetwork() {
        return this.privateEndpointSubnetwork;
    }
    /**
     * @return The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    public String publicEndpoint() {
        return this.publicEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterPrivateClusterConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enablePrivateEndpoint;
        private Boolean enablePrivateNodes;
        private List<GetClusterPrivateClusterConfigMasterGlobalAccessConfig> masterGlobalAccessConfigs;
        private String masterIpv4CidrBlock;
        private String peeringName;
        private String privateEndpoint;
        private String privateEndpointSubnetwork;
        private String publicEndpoint;
        public Builder() {}
        public Builder(GetClusterPrivateClusterConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enablePrivateEndpoint = defaults.enablePrivateEndpoint;
    	      this.enablePrivateNodes = defaults.enablePrivateNodes;
    	      this.masterGlobalAccessConfigs = defaults.masterGlobalAccessConfigs;
    	      this.masterIpv4CidrBlock = defaults.masterIpv4CidrBlock;
    	      this.peeringName = defaults.peeringName;
    	      this.privateEndpoint = defaults.privateEndpoint;
    	      this.privateEndpointSubnetwork = defaults.privateEndpointSubnetwork;
    	      this.publicEndpoint = defaults.publicEndpoint;
        }

        @CustomType.Setter
        public Builder enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
            if (enablePrivateEndpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "enablePrivateEndpoint");
            }
            this.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            if (enablePrivateNodes == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "enablePrivateNodes");
            }
            this.enablePrivateNodes = enablePrivateNodes;
            return this;
        }
        @CustomType.Setter
        public Builder masterGlobalAccessConfigs(List<GetClusterPrivateClusterConfigMasterGlobalAccessConfig> masterGlobalAccessConfigs) {
            if (masterGlobalAccessConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "masterGlobalAccessConfigs");
            }
            this.masterGlobalAccessConfigs = masterGlobalAccessConfigs;
            return this;
        }
        public Builder masterGlobalAccessConfigs(GetClusterPrivateClusterConfigMasterGlobalAccessConfig... masterGlobalAccessConfigs) {
            return masterGlobalAccessConfigs(List.of(masterGlobalAccessConfigs));
        }
        @CustomType.Setter
        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            if (masterIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "masterIpv4CidrBlock");
            }
            this.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder peeringName(String peeringName) {
            if (peeringName == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "peeringName");
            }
            this.peeringName = peeringName;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpoint(String privateEndpoint) {
            if (privateEndpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "privateEndpoint");
            }
            this.privateEndpoint = privateEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointSubnetwork(String privateEndpointSubnetwork) {
            if (privateEndpointSubnetwork == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "privateEndpointSubnetwork");
            }
            this.privateEndpointSubnetwork = privateEndpointSubnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder publicEndpoint(String publicEndpoint) {
            if (publicEndpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterPrivateClusterConfig", "publicEndpoint");
            }
            this.publicEndpoint = publicEndpoint;
            return this;
        }
        public GetClusterPrivateClusterConfig build() {
            final var _resultValue = new GetClusterPrivateClusterConfig();
            _resultValue.enablePrivateEndpoint = enablePrivateEndpoint;
            _resultValue.enablePrivateNodes = enablePrivateNodes;
            _resultValue.masterGlobalAccessConfigs = masterGlobalAccessConfigs;
            _resultValue.masterIpv4CidrBlock = masterIpv4CidrBlock;
            _resultValue.peeringName = peeringName;
            _resultValue.privateEndpoint = privateEndpoint;
            _resultValue.privateEndpointSubnetwork = privateEndpointSubnetwork;
            _resultValue.publicEndpoint = publicEndpoint;
            return _resultValue;
        }
    }
}
