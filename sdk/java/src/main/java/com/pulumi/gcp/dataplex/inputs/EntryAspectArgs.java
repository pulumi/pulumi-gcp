// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataplex.inputs.EntryAspectAspectArgs;
import java.lang.String;
import java.util.Objects;


public final class EntryAspectArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntryAspectArgs Empty = new EntryAspectArgs();

    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Import(name="aspect", required=true)
    private Output<EntryAspectAspectArgs> aspect;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<EntryAspectAspectArgs> aspect() {
        return this.aspect;
    }

    /**
     * Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
     * If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
     * If the aspect is attached to an entry&#39;s path: {project_number}.{locationId}.{aspectTypeId}{@literal @}{path}
     * 
     */
    @Import(name="aspectKey", required=true)
    private Output<String> aspectKey;

    /**
     * @return Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
     * If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
     * If the aspect is attached to an entry&#39;s path: {project_number}.{locationId}.{aspectTypeId}{@literal @}{path}
     * 
     */
    public Output<String> aspectKey() {
        return this.aspectKey;
    }

    private EntryAspectArgs() {}

    private EntryAspectArgs(EntryAspectArgs $) {
        this.aspect = $.aspect;
        this.aspectKey = $.aspectKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntryAspectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntryAspectArgs $;

        public Builder() {
            $ = new EntryAspectArgs();
        }

        public Builder(EntryAspectArgs defaults) {
            $ = new EntryAspectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aspect A nested object resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aspect(Output<EntryAspectAspectArgs> aspect) {
            $.aspect = aspect;
            return this;
        }

        /**
         * @param aspect A nested object resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder aspect(EntryAspectAspectArgs aspect) {
            return aspect(Output.of(aspect));
        }

        /**
         * @param aspectKey Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
         * If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
         * If the aspect is attached to an entry&#39;s path: {project_number}.{locationId}.{aspectTypeId}{@literal @}{path}
         * 
         * @return builder
         * 
         */
        public Builder aspectKey(Output<String> aspectKey) {
            $.aspectKey = aspectKey;
            return this;
        }

        /**
         * @param aspectKey Depending on how the aspect is attached to the entry, the format of the aspect key can be one of the following:
         * If the aspect is attached directly to the entry: {project_number}.{locationId}.{aspectTypeId}
         * If the aspect is attached to an entry&#39;s path: {project_number}.{locationId}.{aspectTypeId}{@literal @}{path}
         * 
         * @return builder
         * 
         */
        public Builder aspectKey(String aspectKey) {
            return aspectKey(Output.of(aspectKey));
        }

        public EntryAspectArgs build() {
            if ($.aspect == null) {
                throw new MissingRequiredPropertyException("EntryAspectArgs", "aspect");
            }
            if ($.aspectKey == null) {
                throw new MissingRequiredPropertyException("EntryAspectArgs", "aspectKey");
            }
            return $;
        }
    }

}
