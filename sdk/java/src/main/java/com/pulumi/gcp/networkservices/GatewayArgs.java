// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
     * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<String>> addresses;

    /**
     * @return Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
     * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
     * 
     */
    public Optional<Output<List<String>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Import(name="certificateUrls")
    private @Nullable Output<List<String>> certificateUrls;

    /**
     * @return A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Optional<Output<List<String>>> certificateUrls() {
        return Optional.ofNullable(this.certificateUrls);
    }

    /**
     * When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
     * 
     */
    @Import(name="deleteSwgAutogenRouterOnDestroy")
    private @Nullable Output<Boolean> deleteSwgAutogenRouterOnDestroy;

    /**
     * @return When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
     * 
     */
    public Optional<Output<Boolean>> deleteSwgAutogenRouterOnDestroy() {
        return Optional.ofNullable(this.deleteSwgAutogenRouterOnDestroy);
    }

    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: `projects/*{@literal /}locations/*{@literal /}gatewaySecurityPolicies/swg-policy`.
     * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Import(name="gatewaySecurityPolicy")
    private @Nullable Output<String> gatewaySecurityPolicy;

    /**
     * @return A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: `projects/*{@literal /}locations/*{@literal /}gatewaySecurityPolicies/swg-policy`.
     * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Optional<Output<String>> gatewaySecurityPolicy() {
        return Optional.ofNullable(this.gatewaySecurityPolicy);
    }

    /**
     * Set of label tags associated with the Gateway resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the Gateway resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the gateway.
     * The default value is `global`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the gateway.
     * The default value is `global`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Short name of the Gateway resource to be created.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Short name of the Gateway resource to be created.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The relative resource name identifying the VPC network that is using this configuration.
     * For example: `projects/*{@literal /}global/networks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The relative resource name identifying the VPC network that is using this configuration.
     * For example: `projects/*{@literal /}global/networks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
     * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
     * 
     */
    @Import(name="ports", required=true)
    private Output<List<Integer>> ports;

    /**
     * @return One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
     * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
     * 
     */
    public Output<List<Integer>> ports() {
        return this.ports;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as
     * a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as
     * a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
     * If empty, TLS termination is disabled.
     * 
     */
    @Import(name="serverTlsPolicy")
    private @Nullable Output<String> serverTlsPolicy;

    /**
     * @return A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
     * If empty, TLS termination is disabled.
     * 
     */
    public Optional<Output<String>> serverTlsPolicy() {
        return Optional.ofNullable(this.serverTlsPolicy);
    }

    /**
     * The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: `projects/*{@literal /}regions/us-central1/subnetworks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: `projects/*{@literal /}regions/us-central1/subnetworks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    /**
     * Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
     * Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
     * Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GatewayArgs() {}

    private GatewayArgs(GatewayArgs $) {
        this.addresses = $.addresses;
        this.certificateUrls = $.certificateUrls;
        this.deleteSwgAutogenRouterOnDestroy = $.deleteSwgAutogenRouterOnDestroy;
        this.description = $.description;
        this.gatewaySecurityPolicy = $.gatewaySecurityPolicy;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.network = $.network;
        this.ports = $.ports;
        this.project = $.project;
        this.scope = $.scope;
        this.serverTlsPolicy = $.serverTlsPolicy;
        this.subnetwork = $.subnetwork;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayArgs $;

        public Builder() {
            $ = new GatewayArgs();
        }

        public Builder(GatewayArgs defaults) {
            $ = new GatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
         * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
         * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
         * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
         * 
         * @return builder
         * 
         */
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param certificateUrls A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
         * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder certificateUrls(@Nullable Output<List<String>> certificateUrls) {
            $.certificateUrls = certificateUrls;
            return this;
        }

        /**
         * @param certificateUrls A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
         * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder certificateUrls(List<String> certificateUrls) {
            return certificateUrls(Output.of(certificateUrls));
        }

        /**
         * @param certificateUrls A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
         * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder certificateUrls(String... certificateUrls) {
            return certificateUrls(List.of(certificateUrls));
        }

        /**
         * @param deleteSwgAutogenRouterOnDestroy When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
         * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleteSwgAutogenRouterOnDestroy(@Nullable Output<Boolean> deleteSwgAutogenRouterOnDestroy) {
            $.deleteSwgAutogenRouterOnDestroy = deleteSwgAutogenRouterOnDestroy;
            return this;
        }

        /**
         * @param deleteSwgAutogenRouterOnDestroy When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
         * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder deleteSwgAutogenRouterOnDestroy(Boolean deleteSwgAutogenRouterOnDestroy) {
            return deleteSwgAutogenRouterOnDestroy(Output.of(deleteSwgAutogenRouterOnDestroy));
        }

        /**
         * @param description A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gatewaySecurityPolicy A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
         * For example: `projects/*{@literal /}locations/*{@literal /}gatewaySecurityPolicies/swg-policy`.
         * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder gatewaySecurityPolicy(@Nullable Output<String> gatewaySecurityPolicy) {
            $.gatewaySecurityPolicy = gatewaySecurityPolicy;
            return this;
        }

        /**
         * @param gatewaySecurityPolicy A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
         * For example: `projects/*{@literal /}locations/*{@literal /}gatewaySecurityPolicies/swg-policy`.
         * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder gatewaySecurityPolicy(String gatewaySecurityPolicy) {
            return gatewaySecurityPolicy(Output.of(gatewaySecurityPolicy));
        }

        /**
         * @param labels Set of label tags associated with the Gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set of label tags associated with the Gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the gateway.
         * The default value is `global`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the gateway.
         * The default value is `global`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Short name of the Gateway resource to be created.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Short name of the Gateway resource to be created.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The relative resource name identifying the VPC network that is using this configuration.
         * For example: `projects/*{@literal /}global/networks/network-1`.
         * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The relative resource name identifying the VPC network that is using this configuration.
         * For example: `projects/*{@literal /}global/networks/network-1`.
         * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param ports One or more port numbers (1-65535), on which the Gateway will receive traffic.
         * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
         * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
         * 
         * @return builder
         * 
         */
        public Builder ports(Output<List<Integer>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports One or more port numbers (1-65535), on which the Gateway will receive traffic.
         * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
         * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<Integer> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports One or more port numbers (1-65535), on which the Gateway will receive traffic.
         * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
         * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
         * 
         * @return builder
         * 
         */
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scope Immutable. Scope determines how configuration across multiple Gateway instances are merged.
         * The configuration for multiple Gateway instances with the same scope will be merged as presented as
         * a single coniguration to the proxy/load balancer.
         * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Immutable. Scope determines how configuration across multiple Gateway instances are merged.
         * The configuration for multiple Gateway instances with the same scope will be merged as presented as
         * a single coniguration to the proxy/load balancer.
         * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param serverTlsPolicy A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
         * If empty, TLS termination is disabled.
         * 
         * @return builder
         * 
         */
        public Builder serverTlsPolicy(@Nullable Output<String> serverTlsPolicy) {
            $.serverTlsPolicy = serverTlsPolicy;
            return this;
        }

        /**
         * @param serverTlsPolicy A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
         * If empty, TLS termination is disabled.
         * 
         * @return builder
         * 
         */
        public Builder serverTlsPolicy(String serverTlsPolicy) {
            return serverTlsPolicy(Output.of(serverTlsPolicy));
        }

        /**
         * @param subnetwork The relative resource name identifying the subnetwork in which this SWG is allocated.
         * For example: `projects/*{@literal /}regions/us-central1/subnetworks/network-1`.
         * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork The relative resource name identifying the subnetwork in which this SWG is allocated.
         * For example: `projects/*{@literal /}regions/us-central1/subnetworks/network-1`.
         * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param type Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
         * Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
         * Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GatewayArgs build() {
            $.ports = Objects.requireNonNull($.ports, "expected parameter 'ports' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
