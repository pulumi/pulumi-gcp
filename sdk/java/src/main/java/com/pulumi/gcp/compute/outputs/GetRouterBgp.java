// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRouterBgpAdvertisedIpRange;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRouterBgp {
    /**
     * @return User-specified flag to indicate which mode to use for advertisement. Default value: &#34;DEFAULT&#34; Possible values: [&#34;DEFAULT&#34;, &#34;CUSTOM&#34;]
     * 
     */
    private String advertiseMode;
    /**
     * @return User-specified list of prefix groups to advertise in custom mode.
     * This field can only be populated if advertiseMode is CUSTOM and
     * is advertised to all peers of the router. These groups will be
     * advertised in addition to any specified prefixes. Leave this field
     * blank to advertise no custom groups.
     * 
     * This enum field has the one valid value: ALL_SUBNETS
     * 
     */
    private List<String> advertisedGroups;
    /**
     * @return User-specified list of individual IP ranges to advertise in
     * custom mode. This field can only be populated if advertiseMode
     * is CUSTOM and is advertised to all peers of the router. These IP
     * ranges will be advertised in addition to any specified groups.
     * Leave this field blank to advertise no custom IP ranges.
     * 
     */
    private List<GetRouterBgpAdvertisedIpRange> advertisedIpRanges;
    /**
     * @return Local BGP Autonomous System Number (ASN). Must be an RFC6996
     * private ASN, either 16-bit or 32-bit. The value will be fixed for
     * this router resource. All VPN tunnels that link to this router
     * will have the same local ASN.
     * 
     */
    private Integer asn;
    /**
     * @return Explicitly specifies a range of valid BGP Identifiers for this Router.
     * It is provided as a link-local IPv4 range (from 169.254.0.0/16), of
     * size at least /30, even if the BGP sessions are over IPv6. It must
     * not overlap with any IPv4 BGP session ranges. Other vendors commonly
     * call this router ID.
     * 
     */
    private String identifierRange;
    /**
     * @return The interval in seconds between BGP keepalive messages that are sent
     * to the peer. Hold time is three times the interval at which keepalive
     * messages are sent, and the hold time is the maximum number of seconds
     * allowed to elapse between successive keepalive messages that BGP
     * receives from a peer.
     * 
     * BGP will use the smaller of either the local hold time value or the
     * peer&#39;s hold time value as the hold time for the BGP connection
     * between the two peers. If set, this value must be between 20 and 60.
     * The default is 20.
     * 
     */
    private Integer keepaliveInterval;

    private GetRouterBgp() {}
    /**
     * @return User-specified flag to indicate which mode to use for advertisement. Default value: &#34;DEFAULT&#34; Possible values: [&#34;DEFAULT&#34;, &#34;CUSTOM&#34;]
     * 
     */
    public String advertiseMode() {
        return this.advertiseMode;
    }
    /**
     * @return User-specified list of prefix groups to advertise in custom mode.
     * This field can only be populated if advertiseMode is CUSTOM and
     * is advertised to all peers of the router. These groups will be
     * advertised in addition to any specified prefixes. Leave this field
     * blank to advertise no custom groups.
     * 
     * This enum field has the one valid value: ALL_SUBNETS
     * 
     */
    public List<String> advertisedGroups() {
        return this.advertisedGroups;
    }
    /**
     * @return User-specified list of individual IP ranges to advertise in
     * custom mode. This field can only be populated if advertiseMode
     * is CUSTOM and is advertised to all peers of the router. These IP
     * ranges will be advertised in addition to any specified groups.
     * Leave this field blank to advertise no custom IP ranges.
     * 
     */
    public List<GetRouterBgpAdvertisedIpRange> advertisedIpRanges() {
        return this.advertisedIpRanges;
    }
    /**
     * @return Local BGP Autonomous System Number (ASN). Must be an RFC6996
     * private ASN, either 16-bit or 32-bit. The value will be fixed for
     * this router resource. All VPN tunnels that link to this router
     * will have the same local ASN.
     * 
     */
    public Integer asn() {
        return this.asn;
    }
    /**
     * @return Explicitly specifies a range of valid BGP Identifiers for this Router.
     * It is provided as a link-local IPv4 range (from 169.254.0.0/16), of
     * size at least /30, even if the BGP sessions are over IPv6. It must
     * not overlap with any IPv4 BGP session ranges. Other vendors commonly
     * call this router ID.
     * 
     */
    public String identifierRange() {
        return this.identifierRange;
    }
    /**
     * @return The interval in seconds between BGP keepalive messages that are sent
     * to the peer. Hold time is three times the interval at which keepalive
     * messages are sent, and the hold time is the maximum number of seconds
     * allowed to elapse between successive keepalive messages that BGP
     * receives from a peer.
     * 
     * BGP will use the smaller of either the local hold time value or the
     * peer&#39;s hold time value as the hold time for the BGP connection
     * between the two peers. If set, this value must be between 20 and 60.
     * The default is 20.
     * 
     */
    public Integer keepaliveInterval() {
        return this.keepaliveInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouterBgp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String advertiseMode;
        private List<String> advertisedGroups;
        private List<GetRouterBgpAdvertisedIpRange> advertisedIpRanges;
        private Integer asn;
        private String identifierRange;
        private Integer keepaliveInterval;
        public Builder() {}
        public Builder(GetRouterBgp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertiseMode = defaults.advertiseMode;
    	      this.advertisedGroups = defaults.advertisedGroups;
    	      this.advertisedIpRanges = defaults.advertisedIpRanges;
    	      this.asn = defaults.asn;
    	      this.identifierRange = defaults.identifierRange;
    	      this.keepaliveInterval = defaults.keepaliveInterval;
        }

        @CustomType.Setter
        public Builder advertiseMode(String advertiseMode) {
            if (advertiseMode == null) {
              throw new MissingRequiredPropertyException("GetRouterBgp", "advertiseMode");
            }
            this.advertiseMode = advertiseMode;
            return this;
        }
        @CustomType.Setter
        public Builder advertisedGroups(List<String> advertisedGroups) {
            if (advertisedGroups == null) {
              throw new MissingRequiredPropertyException("GetRouterBgp", "advertisedGroups");
            }
            this.advertisedGroups = advertisedGroups;
            return this;
        }
        public Builder advertisedGroups(String... advertisedGroups) {
            return advertisedGroups(List.of(advertisedGroups));
        }
        @CustomType.Setter
        public Builder advertisedIpRanges(List<GetRouterBgpAdvertisedIpRange> advertisedIpRanges) {
            if (advertisedIpRanges == null) {
              throw new MissingRequiredPropertyException("GetRouterBgp", "advertisedIpRanges");
            }
            this.advertisedIpRanges = advertisedIpRanges;
            return this;
        }
        public Builder advertisedIpRanges(GetRouterBgpAdvertisedIpRange... advertisedIpRanges) {
            return advertisedIpRanges(List.of(advertisedIpRanges));
        }
        @CustomType.Setter
        public Builder asn(Integer asn) {
            if (asn == null) {
              throw new MissingRequiredPropertyException("GetRouterBgp", "asn");
            }
            this.asn = asn;
            return this;
        }
        @CustomType.Setter
        public Builder identifierRange(String identifierRange) {
            if (identifierRange == null) {
              throw new MissingRequiredPropertyException("GetRouterBgp", "identifierRange");
            }
            this.identifierRange = identifierRange;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveInterval(Integer keepaliveInterval) {
            if (keepaliveInterval == null) {
              throw new MissingRequiredPropertyException("GetRouterBgp", "keepaliveInterval");
            }
            this.keepaliveInterval = keepaliveInterval;
            return this;
        }
        public GetRouterBgp build() {
            final var _resultValue = new GetRouterBgp();
            _resultValue.advertiseMode = advertiseMode;
            _resultValue.advertisedGroups = advertisedGroups;
            _resultValue.advertisedIpRanges = advertisedIpRanges;
            _resultValue.asn = asn;
            _resultValue.identifierRange = identifierRange;
            _resultValue.keepaliveInterval = keepaliveInterval;
            return _resultValue;
        }
    }
}
