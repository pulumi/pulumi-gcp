// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.servicenetworking.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPeeredDnsDomainResult {
    private String dnsSuffix;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private String network;
    private String parent;
    private String project;
    private String service;

    private GetPeeredDnsDomainResult() {}
    public String dnsSuffix() {
        return this.dnsSuffix;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public String parent() {
        return this.parent;
    }
    public String project() {
        return this.project;
    }
    public String service() {
        return this.service;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPeeredDnsDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dnsSuffix;
        private String id;
        private String name;
        private String network;
        private String parent;
        private String project;
        private String service;
        public Builder() {}
        public Builder(GetPeeredDnsDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsSuffix = defaults.dnsSuffix;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.parent = defaults.parent;
    	      this.project = defaults.project;
    	      this.service = defaults.service;
        }

        @CustomType.Setter
        public Builder dnsSuffix(String dnsSuffix) {
            if (dnsSuffix == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "dnsSuffix");
            }
            this.dnsSuffix = dnsSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetPeeredDnsDomainResult", "service");
            }
            this.service = service;
            return this;
        }
        public GetPeeredDnsDomainResult build() {
            final var _resultValue = new GetPeeredDnsDomainResult();
            _resultValue.dnsSuffix = dnsSuffix;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.parent = parent;
            _resultValue.project = project;
            _resultValue.service = service;
            return _resultValue;
        }
    }
}
