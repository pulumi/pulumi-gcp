// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetBackupPlanBackupRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackupPlanResult {
    private String backupPlanId;
    private List<GetBackupPlanBackupRule> backupRules;
    private String backupVault;
    private String backupVaultServiceAccount;
    private String createTime;
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String location;
    private String name;
    private @Nullable String project;
    private String resourceType;
    private String updateTime;

    private GetBackupPlanResult() {}
    public String backupPlanId() {
        return this.backupPlanId;
    }
    public List<GetBackupPlanBackupRule> backupRules() {
        return this.backupRules;
    }
    public String backupVault() {
        return this.backupVault;
    }
    public String backupVaultServiceAccount() {
        return this.backupVaultServiceAccount;
    }
    public String createTime() {
        return this.createTime;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String resourceType() {
        return this.resourceType;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupPlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupPlanId;
        private List<GetBackupPlanBackupRule> backupRules;
        private String backupVault;
        private String backupVaultServiceAccount;
        private String createTime;
        private String description;
        private String id;
        private String location;
        private String name;
        private @Nullable String project;
        private String resourceType;
        private String updateTime;
        public Builder() {}
        public Builder(GetBackupPlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupPlanId = defaults.backupPlanId;
    	      this.backupRules = defaults.backupRules;
    	      this.backupVault = defaults.backupVault;
    	      this.backupVaultServiceAccount = defaults.backupVaultServiceAccount;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.resourceType = defaults.resourceType;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder backupPlanId(String backupPlanId) {
            if (backupPlanId == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "backupPlanId");
            }
            this.backupPlanId = backupPlanId;
            return this;
        }
        @CustomType.Setter
        public Builder backupRules(List<GetBackupPlanBackupRule> backupRules) {
            if (backupRules == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "backupRules");
            }
            this.backupRules = backupRules;
            return this;
        }
        public Builder backupRules(GetBackupPlanBackupRule... backupRules) {
            return backupRules(List.of(backupRules));
        }
        @CustomType.Setter
        public Builder backupVault(String backupVault) {
            if (backupVault == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "backupVault");
            }
            this.backupVault = backupVault;
            return this;
        }
        @CustomType.Setter
        public Builder backupVaultServiceAccount(String backupVaultServiceAccount) {
            if (backupVaultServiceAccount == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "backupVaultServiceAccount");
            }
            this.backupVaultServiceAccount = backupVaultServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetBackupPlanResult build() {
            final var _resultValue = new GetBackupPlanResult();
            _resultValue.backupPlanId = backupPlanId;
            _resultValue.backupRules = backupRules;
            _resultValue.backupVault = backupVault;
            _resultValue.backupVaultServiceAccount = backupVaultServiceAccount;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.resourceType = resourceType;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
