// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceTemplateNetworkInterfaceAccessConfig;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceTemplateNetworkInterfaceAliasIpRange;
import com.pulumi.gcp.compute.outputs.GetRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegionInstanceTemplateNetworkInterface {
    private List<GetRegionInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs;
    /**
     * @return An
     * array of alias IP ranges for this network interface. Can only be specified for network
     * interfaces on subnet-mode networks. Structure documented below.
     * 
     */
    private List<GetRegionInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges;
    /**
     * @return The prefix length of the primary internal IPv6 range.
     * 
     */
    private Integer internalIpv6PrefixLength;
    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    private List<GetRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
     * 
     */
    private String ipv6AccessType;
    /**
     * @return An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance&#39;s subnetwork.
     * 
     */
    private String ipv6Address;
    /**
     * @return The name of the instance template. One of `name` or `filter` must be provided.
     * 
     */
    private String name;
    /**
     * @return The name or self_link of the network to attach this interface to.
     * Use `network` attribute for Legacy or Auto subnetted networks and
     * `subnetwork` for custom subnetted networks.
     * 
     */
    private String network;
    /**
     * @return The private IP address to assign to the instance. If
     * empty, the address will be automatically assigned.
     * 
     */
    private String networkIp;
    /**
     * @return The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET, MRDMA, and IRDMA
     * 
     */
    private String nicType;
    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
     * 
     */
    private Integer queueCount;
    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
     * 
     */
    private String stackType;
    /**
     * @return the name of the subnetwork to attach this interface
     * to. The subnetwork must exist in the same `region` this instance will be
     * created in. Either `network` or `subnetwork` must be provided.
     * 
     */
    private String subnetwork;
    /**
     * @return The ID of the project in which the subnetwork belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    private String subnetworkProject;

    private GetRegionInstanceTemplateNetworkInterface() {}
    public List<GetRegionInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs() {
        return this.accessConfigs;
    }
    /**
     * @return An
     * array of alias IP ranges for this network interface. Can only be specified for network
     * interfaces on subnet-mode networks. Structure documented below.
     * 
     */
    public List<GetRegionInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges() {
        return this.aliasIpRanges;
    }
    /**
     * @return The prefix length of the primary internal IPv6 range.
     * 
     */
    public Integer internalIpv6PrefixLength() {
        return this.internalIpv6PrefixLength;
    }
    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    public List<GetRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs() {
        return this.ipv6AccessConfigs;
    }
    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
     * 
     */
    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }
    /**
     * @return An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance&#39;s subnetwork.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return The name of the instance template. One of `name` or `filter` must be provided.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name or self_link of the network to attach this interface to.
     * Use `network` attribute for Legacy or Auto subnetted networks and
     * `subnetwork` for custom subnetted networks.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The private IP address to assign to the instance. If
     * empty, the address will be automatically assigned.
     * 
     */
    public String networkIp() {
        return this.networkIp;
    }
    /**
     * @return The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET, MRDMA, and IRDMA
     * 
     */
    public String nicType() {
        return this.nicType;
    }
    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
     * 
     */
    public Integer queueCount() {
        return this.queueCount;
    }
    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return the name of the subnetwork to attach this interface
     * to. The subnetwork must exist in the same `region` this instance will be
     * created in. Either `network` or `subnetwork` must be provided.
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }
    /**
     * @return The ID of the project in which the subnetwork belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public String subnetworkProject() {
        return this.subnetworkProject;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionInstanceTemplateNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRegionInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs;
        private List<GetRegionInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges;
        private Integer internalIpv6PrefixLength;
        private List<GetRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
        private String ipv6AccessType;
        private String ipv6Address;
        private String name;
        private String network;
        private String networkIp;
        private String nicType;
        private Integer queueCount;
        private String stackType;
        private String subnetwork;
        private String subnetworkProject;
        public Builder() {}
        public Builder(GetRegionInstanceTemplateNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.internalIpv6PrefixLength = defaults.internalIpv6PrefixLength;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkIp = defaults.networkIp;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
    	      this.subnetworkProject = defaults.subnetworkProject;
        }

        @CustomType.Setter
        public Builder accessConfigs(List<GetRegionInstanceTemplateNetworkInterfaceAccessConfig> accessConfigs) {
            if (accessConfigs == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "accessConfigs");
            }
            this.accessConfigs = accessConfigs;
            return this;
        }
        public Builder accessConfigs(GetRegionInstanceTemplateNetworkInterfaceAccessConfig... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }
        @CustomType.Setter
        public Builder aliasIpRanges(List<GetRegionInstanceTemplateNetworkInterfaceAliasIpRange> aliasIpRanges) {
            if (aliasIpRanges == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "aliasIpRanges");
            }
            this.aliasIpRanges = aliasIpRanges;
            return this;
        }
        public Builder aliasIpRanges(GetRegionInstanceTemplateNetworkInterfaceAliasIpRange... aliasIpRanges) {
            return aliasIpRanges(List.of(aliasIpRanges));
        }
        @CustomType.Setter
        public Builder internalIpv6PrefixLength(Integer internalIpv6PrefixLength) {
            if (internalIpv6PrefixLength == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "internalIpv6PrefixLength");
            }
            this.internalIpv6PrefixLength = internalIpv6PrefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AccessConfigs(List<GetRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs) {
            if (ipv6AccessConfigs == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "ipv6AccessConfigs");
            }
            this.ipv6AccessConfigs = ipv6AccessConfigs;
            return this;
        }
        public Builder ipv6AccessConfigs(GetRegionInstanceTemplateNetworkInterfaceIpv6AccessConfig... ipv6AccessConfigs) {
            return ipv6AccessConfigs(List.of(ipv6AccessConfigs));
        }
        @CustomType.Setter
        public Builder ipv6AccessType(String ipv6AccessType) {
            if (ipv6AccessType == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "ipv6AccessType");
            }
            this.ipv6AccessType = ipv6AccessType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkIp(String networkIp) {
            if (networkIp == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "networkIp");
            }
            this.networkIp = networkIp;
            return this;
        }
        @CustomType.Setter
        public Builder nicType(String nicType) {
            if (nicType == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "nicType");
            }
            this.nicType = nicType;
            return this;
        }
        @CustomType.Setter
        public Builder queueCount(Integer queueCount) {
            if (queueCount == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "queueCount");
            }
            this.queueCount = queueCount;
            return this;
        }
        @CustomType.Setter
        public Builder stackType(String stackType) {
            if (stackType == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "stackType");
            }
            this.stackType = stackType;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkProject(String subnetworkProject) {
            if (subnetworkProject == null) {
              throw new MissingRequiredPropertyException("GetRegionInstanceTemplateNetworkInterface", "subnetworkProject");
            }
            this.subnetworkProject = subnetworkProject;
            return this;
        }
        public GetRegionInstanceTemplateNetworkInterface build() {
            final var _resultValue = new GetRegionInstanceTemplateNetworkInterface();
            _resultValue.accessConfigs = accessConfigs;
            _resultValue.aliasIpRanges = aliasIpRanges;
            _resultValue.internalIpv6PrefixLength = internalIpv6PrefixLength;
            _resultValue.ipv6AccessConfigs = ipv6AccessConfigs;
            _resultValue.ipv6AccessType = ipv6AccessType;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkIp = networkIp;
            _resultValue.nicType = nicType;
            _resultValue.queueCount = queueCount;
            _resultValue.stackType = stackType;
            _resultValue.subnetwork = subnetwork;
            _resultValue.subnetworkProject = subnetworkProject;
            return _resultValue;
        }
    }
}
