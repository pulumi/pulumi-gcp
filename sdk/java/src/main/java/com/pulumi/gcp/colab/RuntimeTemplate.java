// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.colab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.colab.RuntimeTemplateArgs;
import com.pulumi.gcp.colab.inputs.RuntimeTemplateState;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateDataPersistentDiskSpec;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateEncryptionSpec;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateEucConfig;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateIdleShutdownConfig;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateMachineSpec;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateNetworkSpec;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateShieldedVmConfig;
import com.pulumi.gcp.colab.outputs.RuntimeTemplateSoftwareConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &#39;A runtime template is a VM configuration that specifies a machine type and other characteristics of the VM,
 *  as well as common settings such as the network and whether public internet access is enabled. When you create
 *  a runtime, its VM is created according to the specifications of a runtime template.&#39;
 * 
 * To get more information about RuntimeTemplate, see:
 * 
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookRuntimeTemplates)
 * * How-to Guides
 *     * [Create a runtime template](https://cloud.google.com/colab/docs/create-runtime-template)
 * 
 * ## Example Usage
 * 
 * ### Colab Runtime Template Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtime_template = new RuntimeTemplate("runtime-template", RuntimeTemplateArgs.builder()
 *             .name("colab-runtime-template")
 *             .displayName("Runtime template basic")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Colab Runtime Template No Name
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runtime_template = new RuntimeTemplate("runtime-template", RuntimeTemplateArgs.builder()
 *             .displayName("Runtime template no name")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Colab Runtime Template Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateDataPersistentDiskSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateIdleShutdownConfigArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateEucConfigArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateShieldedVmConfigArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateEncryptionSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myNetwork = new Network("myNetwork", NetworkArgs.builder()
 *             .name("colab-test-default")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var mySubnetwork = new Subnetwork("mySubnetwork", SubnetworkArgs.builder()
 *             .name("colab-test-default")
 *             .network(myNetwork.id())
 *             .region("us-central1")
 *             .ipCidrRange("10.0.1.0/24")
 *             .build());
 * 
 *         var runtime_template = new RuntimeTemplate("runtime-template", RuntimeTemplateArgs.builder()
 *             .name("colab-runtime-template")
 *             .displayName("Runtime template full")
 *             .location("us-central1")
 *             .description("Full runtime template")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("n1-standard-2")
 *                 .acceleratorType("NVIDIA_TESLA_T4")
 *                 .acceleratorCount(1)
 *                 .build())
 *             .dataPersistentDiskSpec(RuntimeTemplateDataPersistentDiskSpecArgs.builder()
 *                 .diskType("pd-standard")
 *                 .diskSizeGb("200")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .network(myNetwork.id())
 *                 .subnetwork(mySubnetwork.id())
 *                 .build())
 *             .labels(Map.of("k", "val"))
 *             .idleShutdownConfig(RuntimeTemplateIdleShutdownConfigArgs.builder()
 *                 .idleTimeout("3600s")
 *                 .build())
 *             .eucConfig(RuntimeTemplateEucConfigArgs.builder()
 *                 .eucDisabled(false)
 *                 .build())
 *             .shieldedVmConfig(RuntimeTemplateShieldedVmConfigArgs.builder()
 *                 .enableSecureBoot(false)
 *                 .build())
 *             .networkTags(            
 *                 "abc",
 *                 "def")
 *             .encryptionSpec(RuntimeTemplateEncryptionSpecArgs.builder()
 *                 .kmsKeyName("my-crypto-key")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * RuntimeTemplate can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, RuntimeTemplate can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default projects/{{project}}/locations/{{location}}/notebookRuntimeTemplates/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:colab/runtimeTemplate:RuntimeTemplate default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:colab/runtimeTemplate:RuntimeTemplate")
public class RuntimeTemplate extends com.pulumi.resources.CustomResource {
    /**
     * The configuration for the data disk of the runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="dataPersistentDiskSpec", refs={RuntimeTemplateDataPersistentDiskSpec.class}, tree="[0]")
    private Output<RuntimeTemplateDataPersistentDiskSpec> dataPersistentDiskSpec;

    /**
     * @return The configuration for the data disk of the runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateDataPersistentDiskSpec> dataPersistentDiskSpec() {
        return this.dataPersistentDiskSpec;
    }
    /**
     * The description of the Runtime Template.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Runtime Template.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Required. The display name of the Runtime Template.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Required. The display name of the Runtime Template.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Customer-managed encryption key spec for the notebook runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="encryptionSpec", refs={RuntimeTemplateEncryptionSpec.class}, tree="[0]")
    private Output</* @Nullable */ RuntimeTemplateEncryptionSpec> encryptionSpec;

    /**
     * @return Customer-managed encryption key spec for the notebook runtime.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RuntimeTemplateEncryptionSpec>> encryptionSpec() {
        return Codegen.optional(this.encryptionSpec);
    }
    /**
     * EUC configuration of the NotebookRuntimeTemplate.
     * Structure is documented below.
     * 
     */
    @Export(name="eucConfig", refs={RuntimeTemplateEucConfig.class}, tree="[0]")
    private Output<RuntimeTemplateEucConfig> eucConfig;

    /**
     * @return EUC configuration of the NotebookRuntimeTemplate.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateEucConfig> eucConfig() {
        return this.eucConfig;
    }
    /**
     * Notebook Idle Shutdown configuration for the runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="idleShutdownConfig", refs={RuntimeTemplateIdleShutdownConfig.class}, tree="[0]")
    private Output<RuntimeTemplateIdleShutdownConfig> idleShutdownConfig;

    /**
     * @return Notebook Idle Shutdown configuration for the runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateIdleShutdownConfig> idleShutdownConfig() {
        return this.idleShutdownConfig;
    }
    /**
     * Labels to identify and group the runtime template.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return Labels to identify and group the runtime template.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * The location for the resource: https://cloud.google.com/colab/docs/locations
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource: https://cloud.google.com/colab/docs/locations
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * &#39;The machine configuration of the runtime.&#39;
     * Structure is documented below.
     * 
     */
    @Export(name="machineSpec", refs={RuntimeTemplateMachineSpec.class}, tree="[0]")
    private Output<RuntimeTemplateMachineSpec> machineSpec;

    /**
     * @return &#39;The machine configuration of the runtime.&#39;
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateMachineSpec> machineSpec() {
        return this.machineSpec;
    }
    /**
     * The resource name of the Runtime Template
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the Runtime Template
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The network configuration for the runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="networkSpec", refs={RuntimeTemplateNetworkSpec.class}, tree="[0]")
    private Output<RuntimeTemplateNetworkSpec> networkSpec;

    /**
     * @return The network configuration for the runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateNetworkSpec> networkSpec() {
        return this.networkSpec;
    }
    /**
     * Applies the given Compute Engine tags to the runtime.
     * 
     */
    @Export(name="networkTags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> networkTags;

    /**
     * @return Applies the given Compute Engine tags to the runtime.
     * 
     */
    public Output<Optional<List<String>>> networkTags() {
        return Codegen.optional(this.networkTags);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Runtime Shielded VM spec.
     * Structure is documented below.
     * 
     */
    @Export(name="shieldedVmConfig", refs={RuntimeTemplateShieldedVmConfig.class}, tree="[0]")
    private Output<RuntimeTemplateShieldedVmConfig> shieldedVmConfig;

    /**
     * @return Runtime Shielded VM spec.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateShieldedVmConfig> shieldedVmConfig() {
        return this.shieldedVmConfig;
    }
    /**
     * The notebook software configuration of the notebook runtime.
     * Structure is documented below.
     * 
     */
    @Export(name="softwareConfig", refs={RuntimeTemplateSoftwareConfig.class}, tree="[0]")
    private Output<RuntimeTemplateSoftwareConfig> softwareConfig;

    /**
     * @return The notebook software configuration of the notebook runtime.
     * Structure is documented below.
     * 
     */
    public Output<RuntimeTemplateSoftwareConfig> softwareConfig() {
        return this.softwareConfig;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RuntimeTemplate(java.lang.String name) {
        this(name, RuntimeTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RuntimeTemplate(java.lang.String name, RuntimeTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RuntimeTemplate(java.lang.String name, RuntimeTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:colab/runtimeTemplate:RuntimeTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RuntimeTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable RuntimeTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:colab/runtimeTemplate:RuntimeTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static RuntimeTemplateArgs makeArgs(RuntimeTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RuntimeTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RuntimeTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable RuntimeTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RuntimeTemplate(name, id, state, options);
    }
}
