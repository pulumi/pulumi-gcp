// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNetworkingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNetworkingArgs Empty = new ClusterNetworkingArgs();

    /**
     * All pods in the cluster are assigned an RFC1918 IPv4 address from these
     * blocks. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    @Import(name="clusterIpv4CidrBlocks", required=true)
    private Output<List<String>> clusterIpv4CidrBlocks;

    /**
     * @return All pods in the cluster are assigned an RFC1918 IPv4 address from these
     * blocks. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    public Output<List<String>> clusterIpv4CidrBlocks() {
        return this.clusterIpv4CidrBlocks;
    }

    /**
     * If specified, dual stack mode is enabled and all pods in the cluster are
     * assigned an IPv6 address from these blocks alongside from an IPv4
     * address. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    @Import(name="clusterIpv6CidrBlocks")
    private @Nullable Output<List<String>> clusterIpv6CidrBlocks;

    /**
     * @return If specified, dual stack mode is enabled and all pods in the cluster are
     * assigned an IPv6 address from these blocks alongside from an IPv4
     * address. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    public Optional<Output<List<String>>> clusterIpv6CidrBlocks() {
        return Optional.ofNullable(this.clusterIpv6CidrBlocks);
    }

    /**
     * (Output)
     * IP addressing type of this cluster i.e. SINGLESTACK_V4 vs DUALSTACK_V4_V6.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return (Output)
     * IP addressing type of this cluster i.e. SINGLESTACK_V4 vs DUALSTACK_V4_V6.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * All services in the cluster are assigned an RFC1918 IPv4 address from these
     * blocks. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    @Import(name="servicesIpv4CidrBlocks", required=true)
    private Output<List<String>> servicesIpv4CidrBlocks;

    /**
     * @return All services in the cluster are assigned an RFC1918 IPv4 address from these
     * blocks. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    public Output<List<String>> servicesIpv4CidrBlocks() {
        return this.servicesIpv4CidrBlocks;
    }

    /**
     * If specified, dual stack mode is enabled and all services in the cluster are
     * assigned an IPv6 address from these blocks alongside from an IPv4
     * address. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    @Import(name="servicesIpv6CidrBlocks")
    private @Nullable Output<List<String>> servicesIpv6CidrBlocks;

    /**
     * @return If specified, dual stack mode is enabled and all services in the cluster are
     * assigned an IPv6 address from these blocks alongside from an IPv4
     * address. Only a single block is supported. This field cannot be changed
     * after creation.
     * 
     */
    public Optional<Output<List<String>>> servicesIpv6CidrBlocks() {
        return Optional.ofNullable(this.servicesIpv6CidrBlocks);
    }

    private ClusterNetworkingArgs() {}

    private ClusterNetworkingArgs(ClusterNetworkingArgs $) {
        this.clusterIpv4CidrBlocks = $.clusterIpv4CidrBlocks;
        this.clusterIpv6CidrBlocks = $.clusterIpv6CidrBlocks;
        this.networkType = $.networkType;
        this.servicesIpv4CidrBlocks = $.servicesIpv4CidrBlocks;
        this.servicesIpv6CidrBlocks = $.servicesIpv6CidrBlocks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNetworkingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNetworkingArgs $;

        public Builder() {
            $ = new ClusterNetworkingArgs();
        }

        public Builder(ClusterNetworkingArgs defaults) {
            $ = new ClusterNetworkingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterIpv4CidrBlocks All pods in the cluster are assigned an RFC1918 IPv4 address from these
         * blocks. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4CidrBlocks(Output<List<String>> clusterIpv4CidrBlocks) {
            $.clusterIpv4CidrBlocks = clusterIpv4CidrBlocks;
            return this;
        }

        /**
         * @param clusterIpv4CidrBlocks All pods in the cluster are assigned an RFC1918 IPv4 address from these
         * blocks. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4CidrBlocks(List<String> clusterIpv4CidrBlocks) {
            return clusterIpv4CidrBlocks(Output.of(clusterIpv4CidrBlocks));
        }

        /**
         * @param clusterIpv4CidrBlocks All pods in the cluster are assigned an RFC1918 IPv4 address from these
         * blocks. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4CidrBlocks(String... clusterIpv4CidrBlocks) {
            return clusterIpv4CidrBlocks(List.of(clusterIpv4CidrBlocks));
        }

        /**
         * @param clusterIpv6CidrBlocks If specified, dual stack mode is enabled and all pods in the cluster are
         * assigned an IPv6 address from these blocks alongside from an IPv4
         * address. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv6CidrBlocks(@Nullable Output<List<String>> clusterIpv6CidrBlocks) {
            $.clusterIpv6CidrBlocks = clusterIpv6CidrBlocks;
            return this;
        }

        /**
         * @param clusterIpv6CidrBlocks If specified, dual stack mode is enabled and all pods in the cluster are
         * assigned an IPv6 address from these blocks alongside from an IPv4
         * address. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv6CidrBlocks(List<String> clusterIpv6CidrBlocks) {
            return clusterIpv6CidrBlocks(Output.of(clusterIpv6CidrBlocks));
        }

        /**
         * @param clusterIpv6CidrBlocks If specified, dual stack mode is enabled and all pods in the cluster are
         * assigned an IPv6 address from these blocks alongside from an IPv4
         * address. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv6CidrBlocks(String... clusterIpv6CidrBlocks) {
            return clusterIpv6CidrBlocks(List.of(clusterIpv6CidrBlocks));
        }

        /**
         * @param networkType (Output)
         * IP addressing type of this cluster i.e. SINGLESTACK_V4 vs DUALSTACK_V4_V6.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType (Output)
         * IP addressing type of this cluster i.e. SINGLESTACK_V4 vs DUALSTACK_V4_V6.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param servicesIpv4CidrBlocks All services in the cluster are assigned an RFC1918 IPv4 address from these
         * blocks. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv4CidrBlocks(Output<List<String>> servicesIpv4CidrBlocks) {
            $.servicesIpv4CidrBlocks = servicesIpv4CidrBlocks;
            return this;
        }

        /**
         * @param servicesIpv4CidrBlocks All services in the cluster are assigned an RFC1918 IPv4 address from these
         * blocks. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv4CidrBlocks(List<String> servicesIpv4CidrBlocks) {
            return servicesIpv4CidrBlocks(Output.of(servicesIpv4CidrBlocks));
        }

        /**
         * @param servicesIpv4CidrBlocks All services in the cluster are assigned an RFC1918 IPv4 address from these
         * blocks. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv4CidrBlocks(String... servicesIpv4CidrBlocks) {
            return servicesIpv4CidrBlocks(List.of(servicesIpv4CidrBlocks));
        }

        /**
         * @param servicesIpv6CidrBlocks If specified, dual stack mode is enabled and all services in the cluster are
         * assigned an IPv6 address from these blocks alongside from an IPv4
         * address. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv6CidrBlocks(@Nullable Output<List<String>> servicesIpv6CidrBlocks) {
            $.servicesIpv6CidrBlocks = servicesIpv6CidrBlocks;
            return this;
        }

        /**
         * @param servicesIpv6CidrBlocks If specified, dual stack mode is enabled and all services in the cluster are
         * assigned an IPv6 address from these blocks alongside from an IPv4
         * address. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv6CidrBlocks(List<String> servicesIpv6CidrBlocks) {
            return servicesIpv6CidrBlocks(Output.of(servicesIpv6CidrBlocks));
        }

        /**
         * @param servicesIpv6CidrBlocks If specified, dual stack mode is enabled and all services in the cluster are
         * assigned an IPv6 address from these blocks alongside from an IPv4
         * address. Only a single block is supported. This field cannot be changed
         * after creation.
         * 
         * @return builder
         * 
         */
        public Builder servicesIpv6CidrBlocks(String... servicesIpv6CidrBlocks) {
            return servicesIpv6CidrBlocks(List.of(servicesIpv6CidrBlocks));
        }

        public ClusterNetworkingArgs build() {
            if ($.clusterIpv4CidrBlocks == null) {
                throw new MissingRequiredPropertyException("ClusterNetworkingArgs", "clusterIpv4CidrBlocks");
            }
            if ($.servicesIpv4CidrBlocks == null) {
                throw new MissingRequiredPropertyException("ClusterNetworkingArgs", "servicesIpv4CidrBlocks");
            }
            return $;
        }
    }

}
