// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigBlockingFunctionsForwardInboundCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigBlockingFunctionsForwardInboundCredentialsArgs Empty = new ConfigBlockingFunctionsForwardInboundCredentialsArgs();

    /**
     * Whether to pass the user&#39;s OAuth identity provider&#39;s access token.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<Boolean> accessToken;

    /**
     * @return Whether to pass the user&#39;s OAuth identity provider&#39;s access token.
     * 
     */
    public Optional<Output<Boolean>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * Whether to pass the user&#39;s OIDC identity provider&#39;s ID token.
     * 
     */
    @Import(name="idToken")
    private @Nullable Output<Boolean> idToken;

    /**
     * @return Whether to pass the user&#39;s OIDC identity provider&#39;s ID token.
     * 
     */
    public Optional<Output<Boolean>> idToken() {
        return Optional.ofNullable(this.idToken);
    }

    /**
     * Whether to pass the user&#39;s OAuth identity provider&#39;s refresh token.
     * 
     */
    @Import(name="refreshToken")
    private @Nullable Output<Boolean> refreshToken;

    /**
     * @return Whether to pass the user&#39;s OAuth identity provider&#39;s refresh token.
     * 
     */
    public Optional<Output<Boolean>> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    private ConfigBlockingFunctionsForwardInboundCredentialsArgs() {}

    private ConfigBlockingFunctionsForwardInboundCredentialsArgs(ConfigBlockingFunctionsForwardInboundCredentialsArgs $) {
        this.accessToken = $.accessToken;
        this.idToken = $.idToken;
        this.refreshToken = $.refreshToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigBlockingFunctionsForwardInboundCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigBlockingFunctionsForwardInboundCredentialsArgs $;

        public Builder() {
            $ = new ConfigBlockingFunctionsForwardInboundCredentialsArgs();
        }

        public Builder(ConfigBlockingFunctionsForwardInboundCredentialsArgs defaults) {
            $ = new ConfigBlockingFunctionsForwardInboundCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Whether to pass the user&#39;s OAuth identity provider&#39;s access token.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<Boolean> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Whether to pass the user&#39;s OAuth identity provider&#39;s access token.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(Boolean accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param idToken Whether to pass the user&#39;s OIDC identity provider&#39;s ID token.
         * 
         * @return builder
         * 
         */
        public Builder idToken(@Nullable Output<Boolean> idToken) {
            $.idToken = idToken;
            return this;
        }

        /**
         * @param idToken Whether to pass the user&#39;s OIDC identity provider&#39;s ID token.
         * 
         * @return builder
         * 
         */
        public Builder idToken(Boolean idToken) {
            return idToken(Output.of(idToken));
        }

        /**
         * @param refreshToken Whether to pass the user&#39;s OAuth identity provider&#39;s refresh token.
         * 
         * @return builder
         * 
         */
        public Builder refreshToken(@Nullable Output<Boolean> refreshToken) {
            $.refreshToken = refreshToken;
            return this;
        }

        /**
         * @param refreshToken Whether to pass the user&#39;s OAuth identity provider&#39;s refresh token.
         * 
         * @return builder
         * 
         */
        public Builder refreshToken(Boolean refreshToken) {
            return refreshToken(Output.of(refreshToken));
        }

        public ConfigBlockingFunctionsForwardInboundCredentialsArgs build() {
            return $;
        }
    }

}
