// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.kms.CryptoKeyVersionArgs;
import com.pulumi.gcp.kms.inputs.CryptoKeyVersionState;
import com.pulumi.gcp.kms.outputs.CryptoKeyVersionAttestation;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A `CryptoKeyVersion` represents an individual cryptographic key, and the associated key material.
 * 
 * Destroying a cryptoKeyVersion will not delete the resource from the project.
 * 
 * To get more information about CryptoKeyVersion, see:
 * 
 * * [API documentation](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions)
 * * How-to Guides
 *     * [Creating a key Version](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions/create)
 * 
 * ## Example Usage
 * ### Kms Crypto Key Version Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.kms.KeyRing;
 * import com.pulumi.gcp.kms.KeyRingArgs;
 * import com.pulumi.gcp.kms.CryptoKey;
 * import com.pulumi.gcp.kms.CryptoKeyArgs;
 * import com.pulumi.gcp.kms.CryptoKeyVersion;
 * import com.pulumi.gcp.kms.CryptoKeyVersionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var keyring = new KeyRing(&#34;keyring&#34;, KeyRingArgs.builder()        
 *             .location(&#34;global&#34;)
 *             .build());
 * 
 *         var cryptokey = new CryptoKey(&#34;cryptokey&#34;, CryptoKeyArgs.builder()        
 *             .keyRing(keyring.id())
 *             .rotationPeriod(&#34;100000s&#34;)
 *             .build());
 * 
 *         var example_key = new CryptoKeyVersion(&#34;example-key&#34;, CryptoKeyVersionArgs.builder()        
 *             .cryptoKey(cryptokey.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * CryptoKeyVersion can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:kms/cryptoKeyVersion:CryptoKeyVersion default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:kms/cryptoKeyVersion:CryptoKeyVersion")
public class CryptoKeyVersion extends com.pulumi.resources.CustomResource {
    /**
     * The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    @Export(name="algorithm", type=String.class, parameters={})
    private Output<String> algorithm;

    /**
     * @return The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }
    /**
     * Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
     * Only provided for key versions with protectionLevel HSM.
     * Structure is documented below.
     * 
     */
    @Export(name="attestations", type=List.class, parameters={CryptoKeyVersionAttestation.class})
    private Output<List<CryptoKeyVersionAttestation>> attestations;

    /**
     * @return Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
     * Only provided for key versions with protectionLevel HSM.
     * Structure is documented below.
     * 
     */
    public Output<List<CryptoKeyVersionAttestation>> attestations() {
        return this.attestations;
    }
    /**
     * The name of the cryptoKey associated with the CryptoKeyVersions.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    @Export(name="cryptoKey", type=String.class, parameters={})
    private Output<String> cryptoKey;

    /**
     * @return The name of the cryptoKey associated with the CryptoKeyVersions.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    public Output<String> cryptoKey() {
        return this.cryptoKey;
    }
    /**
     * The time this CryptoKeyVersion key material was generated
     * 
     */
    @Export(name="generateTime", type=String.class, parameters={})
    private Output<String> generateTime;

    /**
     * @return The time this CryptoKeyVersion key material was generated
     * 
     */
    public Output<String> generateTime() {
        return this.generateTime;
    }
    /**
     * The resource name for this CryptoKeyVersion.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The resource name for this CryptoKeyVersion.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     * 
     */
    @Export(name="protectionLevel", type=String.class, parameters={})
    private Output<String> protectionLevel;

    /**
     * @return The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     * 
     */
    public Output<String> protectionLevel() {
        return this.protectionLevel;
    }
    /**
     * The current state of the CryptoKeyVersion.
     * Possible values are `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, and `IMPORT_FAILED`.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The current state of the CryptoKeyVersion.
     * Possible values are `PENDING_GENERATION`, `ENABLED`, `DISABLED`, `DESTROYED`, `DESTROY_SCHEDULED`, `PENDING_IMPORT`, and `IMPORT_FAILED`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CryptoKeyVersion(String name) {
        this(name, CryptoKeyVersionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CryptoKeyVersion(String name, CryptoKeyVersionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CryptoKeyVersion(String name, CryptoKeyVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/cryptoKeyVersion:CryptoKeyVersion", name, args == null ? CryptoKeyVersionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CryptoKeyVersion(String name, Output<String> id, @Nullable CryptoKeyVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:kms/cryptoKeyVersion:CryptoKeyVersion", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CryptoKeyVersion get(String name, Output<String> id, @Nullable CryptoKeyVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CryptoKeyVersion(name, id, state, options);
    }
}
