// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataConnectServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataConnectServiceArgs Empty = new DataConnectServiceArgs();

    /**
     * Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return The deletion policy for the database. Setting the field to FORCE allows the
     * Service to be deleted even if a Schema or Connector is present. By default,
     * the Service deletion will only succeed when no Schema or Connectors are
     * present.
     * Possible values: DEFAULT, FORCE
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * Optional. Mutable human-readable name. 63 character limit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. Mutable human-readable name. 63 character limit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The region in which the service resides, e.g. &#34;us-central1&#34; or &#34;asia-east1&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The region in which the service resides, e.g. &#34;us-central1&#34; or &#34;asia-east1&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. The ID to use for the service, which will become the final component of the
     * service&#39;s resource name.
     * 
     * ***
     * 
     */
    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    /**
     * @return Required. The ID to use for the service, which will become the final component of the
     * service&#39;s resource name.
     * 
     * ***
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }

    private DataConnectServiceArgs() {}

    private DataConnectServiceArgs(DataConnectServiceArgs $) {
        this.annotations = $.annotations;
        this.deletionPolicy = $.deletionPolicy;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataConnectServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataConnectServiceArgs $;

        public Builder() {
            $ = new DataConnectServiceArgs();
        }

        public Builder(DataConnectServiceArgs defaults) {
            $ = new DataConnectServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Optional. Stores small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. Stores small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param deletionPolicy The deletion policy for the database. Setting the field to FORCE allows the
         * Service to be deleted even if a Schema or Connector is present. By default,
         * the Service deletion will only succeed when no Schema or Connectors are
         * present.
         * Possible values: DEFAULT, FORCE
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy The deletion policy for the database. Setting the field to FORCE allows the
         * Service to be deleted even if a Schema or Connector is present. By default,
         * the Service deletion will only succeed when no Schema or Connectors are
         * present.
         * Possible values: DEFAULT, FORCE
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param displayName Optional. Mutable human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. Mutable human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The region in which the service resides, e.g. &#34;us-central1&#34; or &#34;asia-east1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The region in which the service resides, e.g. &#34;us-central1&#34; or &#34;asia-east1&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceId Required. The ID to use for the service, which will become the final component of the
         * service&#39;s resource name.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId Required. The ID to use for the service, which will become the final component of the
         * service&#39;s resource name.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public DataConnectServiceArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("DataConnectServiceArgs", "location");
            }
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("DataConnectServiceArgs", "serviceId");
            }
            return $;
        }
    }

}
