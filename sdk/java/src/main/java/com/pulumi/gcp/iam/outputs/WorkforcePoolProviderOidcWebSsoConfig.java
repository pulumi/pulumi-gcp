// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class WorkforcePoolProviderOidcWebSsoConfig {
    /**
     * @return Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested.
     * Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
     * 
     * &lt;a name=&#34;nestedExtraAttributesOauth2Client&#34;&gt;&lt;/a&gt;The `extraAttributesOauth2Client` block supports:
     * 
     */
    private @Nullable List<String> additionalScopes;
    /**
     * @return The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
     * * MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS: Merge the UserInfo Endpoint Claims with ID Token Claims, preferring UserInfo Claim Values for the same Claim Name. This option is available only for the Authorization Code Flow.
     * * ONLY_ID_TOKEN_CLAIMS: Only include ID Token Claims.
     *   Possible values are: `MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS`, `ONLY_ID_TOKEN_CLAIMS`.
     * 
     */
    private String assertionClaimsBehavior;
    /**
     * @return The Response Type to request for in the OIDC Authorization Request for web sign-in.
     * The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
     * * CODE: The `response_type=code` selection uses the Authorization Code Flow for web sign-in. Requires a configured client secret.
     * * ID_TOKEN: The `response_type=id_token` selection uses the Implicit Flow for web sign-in.
     *   Possible values are: `CODE`, `ID_TOKEN`.
     * 
     */
    private String responseType;

    private WorkforcePoolProviderOidcWebSsoConfig() {}
    /**
     * @return Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested.
     * Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
     * 
     * &lt;a name=&#34;nestedExtraAttributesOauth2Client&#34;&gt;&lt;/a&gt;The `extraAttributesOauth2Client` block supports:
     * 
     */
    public List<String> additionalScopes() {
        return this.additionalScopes == null ? List.of() : this.additionalScopes;
    }
    /**
     * @return The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
     * * MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS: Merge the UserInfo Endpoint Claims with ID Token Claims, preferring UserInfo Claim Values for the same Claim Name. This option is available only for the Authorization Code Flow.
     * * ONLY_ID_TOKEN_CLAIMS: Only include ID Token Claims.
     *   Possible values are: `MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS`, `ONLY_ID_TOKEN_CLAIMS`.
     * 
     */
    public String assertionClaimsBehavior() {
        return this.assertionClaimsBehavior;
    }
    /**
     * @return The Response Type to request for in the OIDC Authorization Request for web sign-in.
     * The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
     * * CODE: The `response_type=code` selection uses the Authorization Code Flow for web sign-in. Requires a configured client secret.
     * * ID_TOKEN: The `response_type=id_token` selection uses the Implicit Flow for web sign-in.
     *   Possible values are: `CODE`, `ID_TOKEN`.
     * 
     */
    public String responseType() {
        return this.responseType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkforcePoolProviderOidcWebSsoConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> additionalScopes;
        private String assertionClaimsBehavior;
        private String responseType;
        public Builder() {}
        public Builder(WorkforcePoolProviderOidcWebSsoConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalScopes = defaults.additionalScopes;
    	      this.assertionClaimsBehavior = defaults.assertionClaimsBehavior;
    	      this.responseType = defaults.responseType;
        }

        @CustomType.Setter
        public Builder additionalScopes(@Nullable List<String> additionalScopes) {

            this.additionalScopes = additionalScopes;
            return this;
        }
        public Builder additionalScopes(String... additionalScopes) {
            return additionalScopes(List.of(additionalScopes));
        }
        @CustomType.Setter
        public Builder assertionClaimsBehavior(String assertionClaimsBehavior) {
            if (assertionClaimsBehavior == null) {
              throw new MissingRequiredPropertyException("WorkforcePoolProviderOidcWebSsoConfig", "assertionClaimsBehavior");
            }
            this.assertionClaimsBehavior = assertionClaimsBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder responseType(String responseType) {
            if (responseType == null) {
              throw new MissingRequiredPropertyException("WorkforcePoolProviderOidcWebSsoConfig", "responseType");
            }
            this.responseType = responseType;
            return this;
        }
        public WorkforcePoolProviderOidcWebSsoConfig build() {
            final var _resultValue = new WorkforcePoolProviderOidcWebSsoConfig();
            _resultValue.additionalScopes = additionalScopes;
            _resultValue.assertionClaimsBehavior = assertionClaimsBehavior;
            _resultValue.responseType = responseType;
            return _resultValue;
        }
    }
}
