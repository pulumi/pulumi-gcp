// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTopicIngestionDataSourceSettingAzureEventHub {
    /**
     * @return The Azure event hub client ID to use for ingestion.
     * 
     */
    private String clientId;
    /**
     * @return The Azure event hub to ingest data from.
     * 
     */
    private String eventHub;
    /**
     * @return The GCP service account to be used for Federated Identity authentication
     * with Azure (via a &#39;AssumeRoleWithWebIdentity&#39; call for the provided
     * role).
     * 
     */
    private String gcpServiceAccount;
    /**
     * @return The Azure event hub namespace to ingest data from.
     * 
     */
    private String namespace;
    /**
     * @return The name of the resource group within an Azure subscription.
     * 
     */
    private String resourceGroup;
    /**
     * @return The Azure event hub subscription ID to use for ingestion.
     * 
     */
    private String subscriptionId;
    /**
     * @return The Azure event hub tenant ID to use for ingestion.
     * 
     */
    private String tenantId;

    private GetTopicIngestionDataSourceSettingAzureEventHub() {}
    /**
     * @return The Azure event hub client ID to use for ingestion.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The Azure event hub to ingest data from.
     * 
     */
    public String eventHub() {
        return this.eventHub;
    }
    /**
     * @return The GCP service account to be used for Federated Identity authentication
     * with Azure (via a &#39;AssumeRoleWithWebIdentity&#39; call for the provided
     * role).
     * 
     */
    public String gcpServiceAccount() {
        return this.gcpServiceAccount;
    }
    /**
     * @return The Azure event hub namespace to ingest data from.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return The name of the resource group within an Azure subscription.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return The Azure event hub subscription ID to use for ingestion.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return The Azure event hub tenant ID to use for ingestion.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicIngestionDataSourceSettingAzureEventHub defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientId;
        private String eventHub;
        private String gcpServiceAccount;
        private String namespace;
        private String resourceGroup;
        private String subscriptionId;
        private String tenantId;
        public Builder() {}
        public Builder(GetTopicIngestionDataSourceSettingAzureEventHub defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.eventHub = defaults.eventHub;
    	      this.gcpServiceAccount = defaults.gcpServiceAccount;
    	      this.namespace = defaults.namespace;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder eventHub(String eventHub) {
            if (eventHub == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "eventHub");
            }
            this.eventHub = eventHub;
            return this;
        }
        @CustomType.Setter
        public Builder gcpServiceAccount(String gcpServiceAccount) {
            if (gcpServiceAccount == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "gcpServiceAccount");
            }
            this.gcpServiceAccount = gcpServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetTopicIngestionDataSourceSettingAzureEventHub", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        public GetTopicIngestionDataSourceSettingAzureEventHub build() {
            final var _resultValue = new GetTopicIngestionDataSourceSettingAzureEventHub();
            _resultValue.clientId = clientId;
            _resultValue.eventHub = eventHub;
            _resultValue.gcpServiceAccount = gcpServiceAccount;
            _resultValue.namespace = namespace;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
