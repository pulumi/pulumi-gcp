// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigAptRepository;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigCommonRepository;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigDockerRepository;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigMavenRepository;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigNpmRepository;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigPythonRepository;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigUpstreamCredential;
import com.pulumi.gcp.artifactregistry.outputs.GetRepositoryRemoteRepositoryConfigYumRepository;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositoryRemoteRepositoryConfig {
    /**
     * @return Specific settings for an Apt remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigAptRepository> aptRepositories;
    /**
     * @return Specific settings for an Artifact Registory remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigCommonRepository> commonRepositories;
    /**
     * @return The description of the remote source.
     * 
     */
    private String description;
    /**
     * @return If true, the remote repository upstream and upstream credentials will
     * not be validated.
     * 
     */
    private Boolean disableUpstreamValidation;
    /**
     * @return Specific settings for a Docker remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigDockerRepository> dockerRepositories;
    /**
     * @return Specific settings for a Maven remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigMavenRepository> mavenRepositories;
    /**
     * @return Specific settings for an Npm remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigNpmRepository> npmRepositories;
    /**
     * @return Specific settings for a Python remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigPythonRepository> pythonRepositories;
    /**
     * @return The credentials used to access the remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigUpstreamCredential> upstreamCredentials;
    /**
     * @return Specific settings for an Yum remote repository.
     * 
     */
    private List<GetRepositoryRemoteRepositoryConfigYumRepository> yumRepositories;

    private GetRepositoryRemoteRepositoryConfig() {}
    /**
     * @return Specific settings for an Apt remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigAptRepository> aptRepositories() {
        return this.aptRepositories;
    }
    /**
     * @return Specific settings for an Artifact Registory remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigCommonRepository> commonRepositories() {
        return this.commonRepositories;
    }
    /**
     * @return The description of the remote source.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If true, the remote repository upstream and upstream credentials will
     * not be validated.
     * 
     */
    public Boolean disableUpstreamValidation() {
        return this.disableUpstreamValidation;
    }
    /**
     * @return Specific settings for a Docker remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigDockerRepository> dockerRepositories() {
        return this.dockerRepositories;
    }
    /**
     * @return Specific settings for a Maven remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigMavenRepository> mavenRepositories() {
        return this.mavenRepositories;
    }
    /**
     * @return Specific settings for an Npm remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigNpmRepository> npmRepositories() {
        return this.npmRepositories;
    }
    /**
     * @return Specific settings for a Python remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigPythonRepository> pythonRepositories() {
        return this.pythonRepositories;
    }
    /**
     * @return The credentials used to access the remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigUpstreamCredential> upstreamCredentials() {
        return this.upstreamCredentials;
    }
    /**
     * @return Specific settings for an Yum remote repository.
     * 
     */
    public List<GetRepositoryRemoteRepositoryConfigYumRepository> yumRepositories() {
        return this.yumRepositories;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryRemoteRepositoryConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRepositoryRemoteRepositoryConfigAptRepository> aptRepositories;
        private List<GetRepositoryRemoteRepositoryConfigCommonRepository> commonRepositories;
        private String description;
        private Boolean disableUpstreamValidation;
        private List<GetRepositoryRemoteRepositoryConfigDockerRepository> dockerRepositories;
        private List<GetRepositoryRemoteRepositoryConfigMavenRepository> mavenRepositories;
        private List<GetRepositoryRemoteRepositoryConfigNpmRepository> npmRepositories;
        private List<GetRepositoryRemoteRepositoryConfigPythonRepository> pythonRepositories;
        private List<GetRepositoryRemoteRepositoryConfigUpstreamCredential> upstreamCredentials;
        private List<GetRepositoryRemoteRepositoryConfigYumRepository> yumRepositories;
        public Builder() {}
        public Builder(GetRepositoryRemoteRepositoryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aptRepositories = defaults.aptRepositories;
    	      this.commonRepositories = defaults.commonRepositories;
    	      this.description = defaults.description;
    	      this.disableUpstreamValidation = defaults.disableUpstreamValidation;
    	      this.dockerRepositories = defaults.dockerRepositories;
    	      this.mavenRepositories = defaults.mavenRepositories;
    	      this.npmRepositories = defaults.npmRepositories;
    	      this.pythonRepositories = defaults.pythonRepositories;
    	      this.upstreamCredentials = defaults.upstreamCredentials;
    	      this.yumRepositories = defaults.yumRepositories;
        }

        @CustomType.Setter
        public Builder aptRepositories(List<GetRepositoryRemoteRepositoryConfigAptRepository> aptRepositories) {
            if (aptRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "aptRepositories");
            }
            this.aptRepositories = aptRepositories;
            return this;
        }
        public Builder aptRepositories(GetRepositoryRemoteRepositoryConfigAptRepository... aptRepositories) {
            return aptRepositories(List.of(aptRepositories));
        }
        @CustomType.Setter
        public Builder commonRepositories(List<GetRepositoryRemoteRepositoryConfigCommonRepository> commonRepositories) {
            if (commonRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "commonRepositories");
            }
            this.commonRepositories = commonRepositories;
            return this;
        }
        public Builder commonRepositories(GetRepositoryRemoteRepositoryConfigCommonRepository... commonRepositories) {
            return commonRepositories(List.of(commonRepositories));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disableUpstreamValidation(Boolean disableUpstreamValidation) {
            if (disableUpstreamValidation == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "disableUpstreamValidation");
            }
            this.disableUpstreamValidation = disableUpstreamValidation;
            return this;
        }
        @CustomType.Setter
        public Builder dockerRepositories(List<GetRepositoryRemoteRepositoryConfigDockerRepository> dockerRepositories) {
            if (dockerRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "dockerRepositories");
            }
            this.dockerRepositories = dockerRepositories;
            return this;
        }
        public Builder dockerRepositories(GetRepositoryRemoteRepositoryConfigDockerRepository... dockerRepositories) {
            return dockerRepositories(List.of(dockerRepositories));
        }
        @CustomType.Setter
        public Builder mavenRepositories(List<GetRepositoryRemoteRepositoryConfigMavenRepository> mavenRepositories) {
            if (mavenRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "mavenRepositories");
            }
            this.mavenRepositories = mavenRepositories;
            return this;
        }
        public Builder mavenRepositories(GetRepositoryRemoteRepositoryConfigMavenRepository... mavenRepositories) {
            return mavenRepositories(List.of(mavenRepositories));
        }
        @CustomType.Setter
        public Builder npmRepositories(List<GetRepositoryRemoteRepositoryConfigNpmRepository> npmRepositories) {
            if (npmRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "npmRepositories");
            }
            this.npmRepositories = npmRepositories;
            return this;
        }
        public Builder npmRepositories(GetRepositoryRemoteRepositoryConfigNpmRepository... npmRepositories) {
            return npmRepositories(List.of(npmRepositories));
        }
        @CustomType.Setter
        public Builder pythonRepositories(List<GetRepositoryRemoteRepositoryConfigPythonRepository> pythonRepositories) {
            if (pythonRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "pythonRepositories");
            }
            this.pythonRepositories = pythonRepositories;
            return this;
        }
        public Builder pythonRepositories(GetRepositoryRemoteRepositoryConfigPythonRepository... pythonRepositories) {
            return pythonRepositories(List.of(pythonRepositories));
        }
        @CustomType.Setter
        public Builder upstreamCredentials(List<GetRepositoryRemoteRepositoryConfigUpstreamCredential> upstreamCredentials) {
            if (upstreamCredentials == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "upstreamCredentials");
            }
            this.upstreamCredentials = upstreamCredentials;
            return this;
        }
        public Builder upstreamCredentials(GetRepositoryRemoteRepositoryConfigUpstreamCredential... upstreamCredentials) {
            return upstreamCredentials(List.of(upstreamCredentials));
        }
        @CustomType.Setter
        public Builder yumRepositories(List<GetRepositoryRemoteRepositoryConfigYumRepository> yumRepositories) {
            if (yumRepositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRemoteRepositoryConfig", "yumRepositories");
            }
            this.yumRepositories = yumRepositories;
            return this;
        }
        public Builder yumRepositories(GetRepositoryRemoteRepositoryConfigYumRepository... yumRepositories) {
            return yumRepositories(List.of(yumRepositories));
        }
        public GetRepositoryRemoteRepositoryConfig build() {
            final var _resultValue = new GetRepositoryRemoteRepositoryConfig();
            _resultValue.aptRepositories = aptRepositories;
            _resultValue.commonRepositories = commonRepositories;
            _resultValue.description = description;
            _resultValue.disableUpstreamValidation = disableUpstreamValidation;
            _resultValue.dockerRepositories = dockerRepositories;
            _resultValue.mavenRepositories = mavenRepositories;
            _resultValue.npmRepositories = npmRepositories;
            _resultValue.pythonRepositories = pythonRepositories;
            _resultValue.upstreamCredentials = upstreamCredentials;
            _resultValue.yumRepositories = yumRepositories;
            return _resultValue;
        }
    }
}
