// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AuthorizationPolicyRuleSource {
    /**
     * @return List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., &#34;1.2.3.4&#34;) and CIDR (e.g., &#34;1.2.3.0/24&#34;) are supported. Authorization based on source IP alone should be avoided.
     * The IP addresses of any load balancers or proxies should be considered untrusted.
     * 
     */
    private @Nullable List<String> ipBlocks;
    /**
     * @return List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, &#34;namespace/*&#34;) or a suffix match (example, &#34;*{@literal /}service-account&#34;) or a presence match &#34;*&#34;.
     * Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
     * 
     */
    private @Nullable List<String> principals;

    private AuthorizationPolicyRuleSource() {}
    /**
     * @return List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., &#34;1.2.3.4&#34;) and CIDR (e.g., &#34;1.2.3.0/24&#34;) are supported. Authorization based on source IP alone should be avoided.
     * The IP addresses of any load balancers or proxies should be considered untrusted.
     * 
     */
    public List<String> ipBlocks() {
        return this.ipBlocks == null ? List.of() : this.ipBlocks;
    }
    /**
     * @return List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, &#34;namespace/*&#34;) or a suffix match (example, &#34;*{@literal /}service-account&#34;) or a presence match &#34;*&#34;.
     * Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
     * 
     */
    public List<String> principals() {
        return this.principals == null ? List.of() : this.principals;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationPolicyRuleSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> ipBlocks;
        private @Nullable List<String> principals;
        public Builder() {}
        public Builder(AuthorizationPolicyRuleSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipBlocks = defaults.ipBlocks;
    	      this.principals = defaults.principals;
        }

        @CustomType.Setter
        public Builder ipBlocks(@Nullable List<String> ipBlocks) {
            this.ipBlocks = ipBlocks;
            return this;
        }
        public Builder ipBlocks(String... ipBlocks) {
            return ipBlocks(List.of(ipBlocks));
        }
        @CustomType.Setter
        public Builder principals(@Nullable List<String> principals) {
            this.principals = principals;
            return this;
        }
        public Builder principals(String... principals) {
            return principals(List.of(principals));
        }
        public AuthorizationPolicyRuleSource build() {
            final var o = new AuthorizationPolicyRuleSource();
            o.ipBlocks = ipBlocks;
            o.principals = principals;
            return o;
        }
    }
}
