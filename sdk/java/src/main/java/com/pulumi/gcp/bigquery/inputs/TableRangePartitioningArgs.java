// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.TableRangePartitioningRangeArgs;
import java.lang.String;
import java.util.Objects;


public final class TableRangePartitioningArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableRangePartitioningArgs Empty = new TableRangePartitioningArgs();

    /**
     * The field used to determine how to create a range-based
     * partition.
     * 
     */
    @Import(name="field", required=true)
    private Output<String> field;

    /**
     * @return The field used to determine how to create a range-based
     * partition.
     * 
     */
    public Output<String> field() {
        return this.field;
    }

    /**
     * Information required to partition based on ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="range", required=true)
    private Output<TableRangePartitioningRangeArgs> range;

    /**
     * @return Information required to partition based on ranges.
     * Structure is documented below.
     * 
     */
    public Output<TableRangePartitioningRangeArgs> range() {
        return this.range;
    }

    private TableRangePartitioningArgs() {}

    private TableRangePartitioningArgs(TableRangePartitioningArgs $) {
        this.field = $.field;
        this.range = $.range;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableRangePartitioningArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableRangePartitioningArgs $;

        public Builder() {
            $ = new TableRangePartitioningArgs();
        }

        public Builder(TableRangePartitioningArgs defaults) {
            $ = new TableRangePartitioningArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param field The field used to determine how to create a range-based
         * partition.
         * 
         * @return builder
         * 
         */
        public Builder field(Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field The field used to determine how to create a range-based
         * partition.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param range Information required to partition based on ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder range(Output<TableRangePartitioningRangeArgs> range) {
            $.range = range;
            return this;
        }

        /**
         * @param range Information required to partition based on ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder range(TableRangePartitioningRangeArgs range) {
            return range(Output.of(range));
        }

        public TableRangePartitioningArgs build() {
            $.field = Objects.requireNonNull($.field, "expected parameter 'field' to be non-null");
            $.range = Objects.requireNonNull($.range, "expected parameter 'range' to be non-null");
            return $;
        }
    }

}
