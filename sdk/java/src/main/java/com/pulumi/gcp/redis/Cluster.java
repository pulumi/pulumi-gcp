// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.redis.ClusterArgs;
import com.pulumi.gcp.redis.inputs.ClusterState;
import com.pulumi.gcp.redis.outputs.ClusterAutomatedBackupConfig;
import com.pulumi.gcp.redis.outputs.ClusterCrossClusterReplicationConfig;
import com.pulumi.gcp.redis.outputs.ClusterDiscoveryEndpoint;
import com.pulumi.gcp.redis.outputs.ClusterMaintenancePolicy;
import com.pulumi.gcp.redis.outputs.ClusterMaintenanceSchedule;
import com.pulumi.gcp.redis.outputs.ClusterPersistenceConfig;
import com.pulumi.gcp.redis.outputs.ClusterPscConfig;
import com.pulumi.gcp.redis.outputs.ClusterPscConnection;
import com.pulumi.gcp.redis.outputs.ClusterPscServiceAttachment;
import com.pulumi.gcp.redis.outputs.ClusterStateInfo;
import com.pulumi.gcp.redis.outputs.ClusterZoneDistributionConfig;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Redis Cluster Ha
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
 * import com.pulumi.gcp.redis.Cluster;
 * import com.pulumi.gcp.redis.ClusterArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var consumerNet = new Network("consumerNet", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var consumerSubnet = new Subnetwork("consumerSubnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .ipCidrRange("10.0.0.248/29")
 *             .region("us-central1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
 *             .name("my-policy")
 *             .location("us-central1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("my basic service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(consumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         var cluster_ha = new Cluster("cluster-ha", ClusterArgs.builder()
 *             .name("ha-cluster")
 *             .shardCount(3)
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .region("us-central1")
 *             .replicaCount(1)
 *             .nodeType("REDIS_SHARED_CORE_NANO")
 *             .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
 *             .authorizationMode("AUTH_MODE_DISABLED")
 *             .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
 *             .deletionProtectionEnabled(true)
 *             .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
 *                 .mode("MULTI_ZONE")
 *                 .build())
 *             .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("MONDAY")
 *                     .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(1)
 *                         .minutes(0)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Redis Cluster Ha Single Zone
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
 * import com.pulumi.gcp.redis.Cluster;
 * import com.pulumi.gcp.redis.ClusterArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var consumerNet = new Network("consumerNet", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var consumerSubnet = new Subnetwork("consumerSubnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .ipCidrRange("10.0.0.248/29")
 *             .region("us-central1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
 *             .name("my-policy")
 *             .location("us-central1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("my basic service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(consumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         var cluster_ha_single_zone = new Cluster("cluster-ha-single-zone", ClusterArgs.builder()
 *             .name("ha-cluster-single-zone")
 *             .shardCount(3)
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .region("us-central1")
 *             .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
 *                 .mode("SINGLE_ZONE")
 *                 .zone("us-central1-f")
 *                 .build())
 *             .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("MONDAY")
 *                     .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(1)
 *                         .minutes(0)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .deletionProtectionEnabled(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Redis Cluster Secondary
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
 * import com.pulumi.gcp.redis.Cluster;
 * import com.pulumi.gcp.redis.ClusterArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigRdbConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterCrossClusterReplicationConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterCrossClusterReplicationConfigPrimaryClusterArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var consumerNet = new Network("consumerNet", NetworkArgs.builder()
 *             .name("mynetwork")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var primaryClusterConsumerSubnet = new Subnetwork("primaryClusterConsumerSubnet", SubnetworkArgs.builder()
 *             .name("mysubnet-primary-cluster")
 *             .ipCidrRange("10.0.1.0/29")
 *             .region("us-east1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var primaryClusterRegionScp = new ServiceConnectionPolicy("primaryClusterRegionScp", ServiceConnectionPolicyArgs.builder()
 *             .name("mypolicy-primary-cluster")
 *             .location("us-east1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("Primary cluster service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(primaryClusterConsumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         // Primary cluster
 *         var primaryCluster = new Cluster("primaryCluster", ClusterArgs.builder()
 *             .name("my-primary-cluster")
 *             .region("us-east1")
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .authorizationMode("AUTH_MODE_DISABLED")
 *             .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
 *             .shardCount(3)
 *             .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
 *             .nodeType("REDIS_HIGHMEM_MEDIUM")
 *             .persistenceConfig(ClusterPersistenceConfigArgs.builder()
 *                 .mode("RDB")
 *                 .rdbConfig(ClusterPersistenceConfigRdbConfigArgs.builder()
 *                     .rdbSnapshotPeriod("ONE_HOUR")
 *                     .rdbSnapshotStartTime("2024-10-02T15:01:23Z")
 *                     .build())
 *                 .build())
 *             .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
 *                 .mode("MULTI_ZONE")
 *                 .build())
 *             .replicaCount(1)
 *             .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("MONDAY")
 *                     .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(1)
 *                         .minutes(0)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .deletionProtectionEnabled(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(primaryClusterRegionScp)
 *                 .build());
 * 
 *         var secondaryClusterConsumerSubnet = new Subnetwork("secondaryClusterConsumerSubnet", SubnetworkArgs.builder()
 *             .name("mysubnet-secondary-cluster")
 *             .ipCidrRange("10.0.2.0/29")
 *             .region("europe-west1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var secondaryClusterRegionScp = new ServiceConnectionPolicy("secondaryClusterRegionScp", ServiceConnectionPolicyArgs.builder()
 *             .name("mypolicy-secondary-cluster")
 *             .location("europe-west1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("Secondary cluster service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(secondaryClusterConsumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         // Secondary cluster
 *         var secondaryCluster = new Cluster("secondaryCluster", ClusterArgs.builder()
 *             .name("my-secondary-cluster")
 *             .region("europe-west1")
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .authorizationMode("AUTH_MODE_DISABLED")
 *             .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
 *             .shardCount(3)
 *             .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
 *             .nodeType("REDIS_HIGHMEM_MEDIUM")
 *             .persistenceConfig(ClusterPersistenceConfigArgs.builder()
 *                 .mode("RDB")
 *                 .rdbConfig(ClusterPersistenceConfigRdbConfigArgs.builder()
 *                     .rdbSnapshotPeriod("ONE_HOUR")
 *                     .rdbSnapshotStartTime("2024-10-02T15:01:23Z")
 *                     .build())
 *                 .build())
 *             .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
 *                 .mode("MULTI_ZONE")
 *                 .build())
 *             .replicaCount(2)
 *             .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("WEDNESDAY")
 *                     .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(1)
 *                         .minutes(0)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .deletionProtectionEnabled(true)
 *             .crossClusterReplicationConfig(ClusterCrossClusterReplicationConfigArgs.builder()
 *                 .clusterRole("SECONDARY")
 *                 .primaryCluster(ClusterCrossClusterReplicationConfigPrimaryClusterArgs.builder()
 *                     .cluster(primaryCluster.id())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secondaryClusterRegionScp)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Redis Cluster Rdb
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
 * import com.pulumi.gcp.redis.Cluster;
 * import com.pulumi.gcp.redis.ClusterArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigRdbConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var consumerNet = new Network("consumerNet", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var consumerSubnet = new Subnetwork("consumerSubnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .ipCidrRange("10.0.0.248/29")
 *             .region("us-central1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
 *             .name("my-policy")
 *             .location("us-central1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("my basic service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(consumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         var cluster_rdb = new Cluster("cluster-rdb", ClusterArgs.builder()
 *             .name("rdb-cluster")
 *             .shardCount(3)
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .region("us-central1")
 *             .replicaCount(0)
 *             .nodeType("REDIS_SHARED_CORE_NANO")
 *             .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
 *             .authorizationMode("AUTH_MODE_DISABLED")
 *             .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
 *             .deletionProtectionEnabled(true)
 *             .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
 *                 .mode("MULTI_ZONE")
 *                 .build())
 *             .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("MONDAY")
 *                     .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(1)
 *                         .minutes(0)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .persistenceConfig(ClusterPersistenceConfigArgs.builder()
 *                 .mode("RDB")
 *                 .rdbConfig(ClusterPersistenceConfigRdbConfigArgs.builder()
 *                     .rdbSnapshotPeriod("ONE_HOUR")
 *                     .rdbSnapshotStartTime("2024-10-02T15:01:23Z")
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Redis Cluster Aof
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
 * import com.pulumi.gcp.redis.Cluster;
 * import com.pulumi.gcp.redis.ClusterArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigAofConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var consumerNet = new Network("consumerNet", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var consumerSubnet = new Subnetwork("consumerSubnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .ipCidrRange("10.0.0.248/29")
 *             .region("us-central1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
 *             .name("my-policy")
 *             .location("us-central1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("my basic service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(consumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         var cluster_aof = new Cluster("cluster-aof", ClusterArgs.builder()
 *             .name("aof-cluster")
 *             .shardCount(3)
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .region("us-central1")
 *             .replicaCount(0)
 *             .nodeType("REDIS_SHARED_CORE_NANO")
 *             .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
 *             .authorizationMode("AUTH_MODE_DISABLED")
 *             .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
 *             .deletionProtectionEnabled(true)
 *             .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
 *                 .mode("MULTI_ZONE")
 *                 .build())
 *             .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("MONDAY")
 *                     .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(1)
 *                         .minutes(0)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .persistenceConfig(ClusterPersistenceConfigArgs.builder()
 *                 .mode("AOF")
 *                 .aofConfig(ClusterPersistenceConfigAofConfigArgs.builder()
 *                     .appendFsync("EVERYSEC")
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Redis Cluster Cmek
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
 * import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
 * import com.pulumi.gcp.redis.Cluster;
 * import com.pulumi.gcp.redis.ClusterArgs;
 * import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var consumerNet = new Network("consumerNet", NetworkArgs.builder()
 *             .name("my-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var consumerSubnet = new Subnetwork("consumerSubnet", SubnetworkArgs.builder()
 *             .name("my-subnet")
 *             .ipCidrRange("10.0.0.248/29")
 *             .region("us-central1")
 *             .network(consumerNet.id())
 *             .build());
 * 
 *         var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
 *             .name("my-policy")
 *             .location("us-central1")
 *             .serviceClass("gcp-memorystore-redis")
 *             .description("my basic service connection policy")
 *             .network(consumerNet.id())
 *             .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
 *                 .subnetworks(consumerSubnet.id())
 *                 .build())
 *             .build());
 * 
 *         var cluster_cmek = new Cluster("cluster-cmek", ClusterArgs.builder()
 *             .name("cmek-cluster")
 *             .shardCount(3)
 *             .pscConfigs(ClusterPscConfigArgs.builder()
 *                 .network(consumerNet.id())
 *                 .build())
 *             .kmsKey("my-key")
 *             .region("us-central1")
 *             .deletionProtectionEnabled(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(default_)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Cluster can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{region}}/clusters/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:redis/cluster:Cluster default projects/{{project}}/locations/{{region}}/clusters/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:redis/cluster:Cluster default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:redis/cluster:Cluster default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:redis/cluster:Cluster default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:redis/cluster:Cluster")
public class Cluster extends com.pulumi.resources.CustomResource {
    /**
     * Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
     * Default value is `AUTH_MODE_DISABLED`.
     * Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
     * 
     */
    @Export(name="authorizationMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> authorizationMode;

    /**
     * @return Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
     * Default value is `AUTH_MODE_DISABLED`.
     * Possible values are: `AUTH_MODE_UNSPECIFIED`, `AUTH_MODE_IAM_AUTH`, `AUTH_MODE_DISABLED`.
     * 
     */
    public Output<Optional<String>> authorizationMode() {
        return Codegen.optional(this.authorizationMode);
    }
    /**
     * The automated backup config for a instance.
     * Structure is documented below.
     * 
     */
    @Export(name="automatedBackupConfig", refs={ClusterAutomatedBackupConfig.class}, tree="[0]")
    private Output</* @Nullable */ ClusterAutomatedBackupConfig> automatedBackupConfig;

    /**
     * @return The automated backup config for a instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ClusterAutomatedBackupConfig>> automatedBackupConfig() {
        return Codegen.optional(this.automatedBackupConfig);
    }
    /**
     * The timestamp associated with the cluster creation request. A timestamp in
     * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
     * digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp associated with the cluster creation request. A timestamp in
     * RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional
     * digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Cross cluster replication config
     * Structure is documented below.
     * 
     */
    @Export(name="crossClusterReplicationConfig", refs={ClusterCrossClusterReplicationConfig.class}, tree="[0]")
    private Output<ClusterCrossClusterReplicationConfig> crossClusterReplicationConfig;

    /**
     * @return Cross cluster replication config
     * Structure is documented below.
     * 
     */
    public Output<ClusterCrossClusterReplicationConfig> crossClusterReplicationConfig() {
        return this.crossClusterReplicationConfig;
    }
    /**
     * Optional. Indicates if the cluster is deletion protected or not.
     * If the value if set to true, any delete cluster operation will fail.
     * Default value is true.
     * 
     */
    @Export(name="deletionProtectionEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deletionProtectionEnabled;

    /**
     * @return Optional. Indicates if the cluster is deletion protected or not.
     * If the value if set to true, any delete cluster operation will fail.
     * Default value is true.
     * 
     */
    public Output<Optional<Boolean>> deletionProtectionEnabled() {
        return Codegen.optional(this.deletionProtectionEnabled);
    }
    /**
     * Output only. Endpoints created on each given network,
     * for Redis clients to connect to the cluster.
     * Currently only one endpoint is supported.
     * Structure is documented below.
     * 
     */
    @Export(name="discoveryEndpoints", refs={List.class,ClusterDiscoveryEndpoint.class}, tree="[0,1]")
    private Output<List<ClusterDiscoveryEndpoint>> discoveryEndpoints;

    /**
     * @return Output only. Endpoints created on each given network,
     * for Redis clients to connect to the cluster.
     * Currently only one endpoint is supported.
     * Structure is documented below.
     * 
     */
    public Output<List<ClusterDiscoveryEndpoint>> discoveryEndpoints() {
        return this.discoveryEndpoints;
    }
    /**
     * The KMS key used to encrypt the at-rest data of the cluster.
     * 
     */
    @Export(name="kmsKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKey;

    /**
     * @return The KMS key used to encrypt the at-rest data of the cluster.
     * 
     */
    public Output<Optional<String>> kmsKey() {
        return Codegen.optional(this.kmsKey);
    }
    /**
     * Maintenance policy for a cluster
     * Structure is documented below.
     * 
     */
    @Export(name="maintenancePolicy", refs={ClusterMaintenancePolicy.class}, tree="[0]")
    private Output</* @Nullable */ ClusterMaintenancePolicy> maintenancePolicy;

    /**
     * @return Maintenance policy for a cluster
     * Structure is documented below.
     * 
     */
    public Output<Optional<ClusterMaintenancePolicy>> maintenancePolicy() {
        return Codegen.optional(this.maintenancePolicy);
    }
    /**
     * Upcoming maintenance schedule.
     * Structure is documented below.
     * 
     */
    @Export(name="maintenanceSchedules", refs={List.class,ClusterMaintenanceSchedule.class}, tree="[0,1]")
    private Output<List<ClusterMaintenanceSchedule>> maintenanceSchedules;

    /**
     * @return Upcoming maintenance schedule.
     * Structure is documented below.
     * 
     */
    public Output<List<ClusterMaintenanceSchedule>> maintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    /**
     * Unique name of the resource in this scope including project and location using the form:
     * projects/{projectId}/locations/{locationId}/clusters/{clusterId}
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Unique name of the resource in this scope including project and location using the form:
     * projects/{projectId}/locations/{locationId}/clusters/{clusterId}
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The nodeType for the Redis cluster.
     * If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
     * Possible values are: `REDIS_SHARED_CORE_NANO`, `REDIS_HIGHMEM_MEDIUM`, `REDIS_HIGHMEM_XLARGE`, `REDIS_STANDARD_SMALL`.
     * 
     */
    @Export(name="nodeType", refs={String.class}, tree="[0]")
    private Output<String> nodeType;

    /**
     * @return The nodeType for the Redis cluster.
     * If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
     * Possible values are: `REDIS_SHARED_CORE_NANO`, `REDIS_HIGHMEM_MEDIUM`, `REDIS_HIGHMEM_XLARGE`, `REDIS_STANDARD_SMALL`.
     * 
     */
    public Output<String> nodeType() {
        return this.nodeType;
    }
    /**
     * Persistence config (RDB, AOF) for the cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="persistenceConfig", refs={ClusterPersistenceConfig.class}, tree="[0]")
    private Output<ClusterPersistenceConfig> persistenceConfig;

    /**
     * @return Persistence config (RDB, AOF) for the cluster.
     * Structure is documented below.
     * 
     */
    public Output<ClusterPersistenceConfig> persistenceConfig() {
        return this.persistenceConfig;
    }
    /**
     * Output only. Redis memory precise size in GB for the entire cluster.
     * 
     */
    @Export(name="preciseSizeGb", refs={Double.class}, tree="[0]")
    private Output<Double> preciseSizeGb;

    /**
     * @return Output only. Redis memory precise size in GB for the entire cluster.
     * 
     */
    public Output<Double> preciseSizeGb() {
        return this.preciseSizeGb;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Required. Each PscConfig configures the consumer network where two
     * network addresses will be designated to the cluster for client access.
     * Currently, only one PscConfig is supported.
     * Structure is documented below.
     * 
     */
    @Export(name="pscConfigs", refs={List.class,ClusterPscConfig.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ClusterPscConfig>> pscConfigs;

    /**
     * @return Required. Each PscConfig configures the consumer network where two
     * network addresses will be designated to the cluster for client access.
     * Currently, only one PscConfig is supported.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<ClusterPscConfig>>> pscConfigs() {
        return Codegen.optional(this.pscConfigs);
    }
    /**
     * Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="pscConnections", refs={List.class,ClusterPscConnection.class}, tree="[0,1]")
    private Output<List<ClusterPscConnection>> pscConnections;

    /**
     * @return Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
     * Structure is documented below.
     * 
     */
    public Output<List<ClusterPscConnection>> pscConnections() {
        return this.pscConnections;
    }
    /**
     * Service attachment details to configure Psc connections.
     * Structure is documented below.
     * 
     */
    @Export(name="pscServiceAttachments", refs={List.class,ClusterPscServiceAttachment.class}, tree="[0,1]")
    private Output<List<ClusterPscServiceAttachment>> pscServiceAttachments;

    /**
     * @return Service attachment details to configure Psc connections.
     * Structure is documented below.
     * 
     */
    public Output<List<ClusterPscServiceAttachment>> pscServiceAttachments() {
        return this.pscServiceAttachments;
    }
    /**
     * Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
     * Please check Memorystore documentation for the list of supported parameters:
     * https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
     * 
     */
    @Export(name="redisConfigs", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> redisConfigs;

    /**
     * @return Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
     * Please check Memorystore documentation for the list of supported parameters:
     * https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
     * 
     */
    public Output<Optional<Map<String,String>>> redisConfigs() {
        return Codegen.optional(this.redisConfigs);
    }
    /**
     * The name of the region of the Redis cluster.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The name of the region of the Redis cluster.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Optional. The number of replica nodes per shard.
     * 
     */
    @Export(name="replicaCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> replicaCount;

    /**
     * @return Optional. The number of replica nodes per shard.
     * 
     */
    public Output<Optional<Integer>> replicaCount() {
        return Codegen.optional(this.replicaCount);
    }
    /**
     * Required. Number of shards for the Redis cluster.
     * 
     */
    @Export(name="shardCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> shardCount;

    /**
     * @return Required. Number of shards for the Redis cluster.
     * 
     */
    public Output<Integer> shardCount() {
        return this.shardCount;
    }
    /**
     * Output only. Redis memory size in GB for the entire cluster.
     * 
     */
    @Export(name="sizeGb", refs={Integer.class}, tree="[0]")
    private Output<Integer> sizeGb;

    /**
     * @return Output only. Redis memory size in GB for the entire cluster.
     * 
     */
    public Output<Integer> sizeGb() {
        return this.sizeGb;
    }
    /**
     * The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Output only. Additional information about the current state of the cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="stateInfos", refs={List.class,ClusterStateInfo.class}, tree="[0,1]")
    private Output<List<ClusterStateInfo>> stateInfos;

    /**
     * @return Output only. Additional information about the current state of the cluster.
     * Structure is documented below.
     * 
     */
    public Output<List<ClusterStateInfo>> stateInfos() {
        return this.stateInfos;
    }
    /**
     * Optional. The in-transit encryption for the Redis cluster.
     * If not provided, encryption is disabled for the cluster.
     * Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
     * Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
     * 
     */
    @Export(name="transitEncryptionMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> transitEncryptionMode;

    /**
     * @return Optional. The in-transit encryption for the Redis cluster.
     * If not provided, encryption is disabled for the cluster.
     * Default value is `TRANSIT_ENCRYPTION_MODE_DISABLED`.
     * Possible values are: `TRANSIT_ENCRYPTION_MODE_UNSPECIFIED`, `TRANSIT_ENCRYPTION_MODE_DISABLED`, `TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION`.
     * 
     */
    public Output<Optional<String>> transitEncryptionMode() {
        return Codegen.optional(this.transitEncryptionMode);
    }
    /**
     * System assigned, unique identifier for the cluster.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return System assigned, unique identifier for the cluster.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Immutable. Zone distribution config for Memorystore Redis cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="zoneDistributionConfig", refs={ClusterZoneDistributionConfig.class}, tree="[0]")
    private Output<ClusterZoneDistributionConfig> zoneDistributionConfig;

    /**
     * @return Immutable. Zone distribution config for Memorystore Redis cluster.
     * Structure is documented below.
     * 
     */
    public Output<ClusterZoneDistributionConfig> zoneDistributionConfig() {
        return this.zoneDistributionConfig;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Cluster(java.lang.String name) {
        this(name, ClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Cluster(java.lang.String name, ClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cluster(java.lang.String name, ClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:redis/cluster:Cluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Cluster(java.lang.String name, Output<java.lang.String> id, @Nullable ClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:redis/cluster:Cluster", name, state, makeResourceOptions(options, id), false);
    }

    private static ClusterArgs makeArgs(ClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cluster get(java.lang.String name, Output<java.lang.String> id, @Nullable ClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Cluster(name, id, state, options);
    }
}
