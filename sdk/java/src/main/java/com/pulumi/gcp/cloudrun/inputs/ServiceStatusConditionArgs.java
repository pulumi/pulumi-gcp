// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceStatusConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceStatusConditionArgs Empty = new ServiceStatusConditionArgs();

    /**
     * (Output)
     * Human readable message indicating details about the current status.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return (Output)
     * Human readable message indicating details about the current status.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * (Output)
     * One-word CamelCase reason for the condition&#39;s current status.
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return (Output)
     * One-word CamelCase reason for the condition&#39;s current status.
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * (Output)
     * Status of the condition, one of True, False, Unknown.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Output)
     * Status of the condition, one of True, False, Unknown.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * (Output)
     * Type of domain mapping condition.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Output)
     * Type of domain mapping condition.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServiceStatusConditionArgs() {}

    private ServiceStatusConditionArgs(ServiceStatusConditionArgs $) {
        this.message = $.message;
        this.reason = $.reason;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceStatusConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceStatusConditionArgs $;

        public Builder() {
            $ = new ServiceStatusConditionArgs();
        }

        public Builder(ServiceStatusConditionArgs defaults) {
            $ = new ServiceStatusConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param message (Output)
         * Human readable message indicating details about the current status.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message (Output)
         * Human readable message indicating details about the current status.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param reason (Output)
         * One-word CamelCase reason for the condition&#39;s current status.
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason (Output)
         * One-word CamelCase reason for the condition&#39;s current status.
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param status (Output)
         * Status of the condition, one of True, False, Unknown.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Output)
         * Status of the condition, one of True, False, Unknown.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type (Output)
         * Type of domain mapping condition.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Output)
         * Type of domain mapping condition.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceStatusConditionArgs build() {
            return $;
        }
    }

}
