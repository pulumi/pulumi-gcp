// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerAllInstancesConfigArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerAutoHealingPoliciesArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerNamedPortArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerStatefulDiskArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerStatefulExternalIpArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerStatefulInternalIpArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerStatusArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerUpdatePolicyArgs;
import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerVersionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionInstanceGroupManagerState extends com.pulumi.resources.ResourceArgs {

    public static final RegionInstanceGroupManagerState Empty = new RegionInstanceGroupManagerState();

    /**
     * )
     * Properties to set on all instances in the group. After setting
     * allInstancesConfig on the group, you must update the group&#39;s instances to
     * apply the configuration.
     * 
     */
    @Import(name="allInstancesConfig")
    private @Nullable Output<RegionInstanceGroupManagerAllInstancesConfigArgs> allInstancesConfig;

    /**
     * @return )
     * Properties to set on all instances in the group. After setting
     * allInstancesConfig on the group, you must update the group&#39;s instances to
     * apply the configuration.
     * 
     */
    public Optional<Output<RegionInstanceGroupManagerAllInstancesConfigArgs>> allInstancesConfig() {
        return Optional.ofNullable(this.allInstancesConfig);
    }

    /**
     * The autohealing policies for this managed instance
     * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
     * 
     */
    @Import(name="autoHealingPolicies")
    private @Nullable Output<RegionInstanceGroupManagerAutoHealingPoliciesArgs> autoHealingPolicies;

    /**
     * @return The autohealing policies for this managed instance
     * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
     * 
     */
    public Optional<Output<RegionInstanceGroupManagerAutoHealingPoliciesArgs>> autoHealingPolicies() {
        return Optional.ofNullable(this.autoHealingPolicies);
    }

    /**
     * The base instance name to use for
     * instances in this group. The value must be a valid
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
     * are lowercase letters, numbers, and hyphens (-). Instances are named by
     * appending a hyphen and a random four-character string to the base instance
     * name.
     * 
     */
    @Import(name="baseInstanceName")
    private @Nullable Output<String> baseInstanceName;

    /**
     * @return The base instance name to use for
     * instances in this group. The value must be a valid
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
     * are lowercase letters, numbers, and hyphens (-). Instances are named by
     * appending a hyphen and a random four-character string to the base instance
     * name.
     * 
     */
    public Optional<Output<String>> baseInstanceName() {
        return Optional.ofNullable(this.baseInstanceName);
    }

    /**
     * An optional textual description of the instance
     * group manager.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional textual description of the instance
     * group manager.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
     * 
     */
    @Import(name="distributionPolicyTargetShape")
    private @Nullable Output<String> distributionPolicyTargetShape;

    /**
     * @return The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
     * 
     */
    public Optional<Output<String>> distributionPolicyTargetShape() {
        return Optional.ofNullable(this.distributionPolicyTargetShape);
    }

    /**
     * The distribution policy for this managed instance
     * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
     * 
     */
    @Import(name="distributionPolicyZones")
    private @Nullable Output<List<String>> distributionPolicyZones;

    /**
     * @return The distribution policy for this managed instance
     * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
     * 
     */
    public Optional<Output<List<String>>> distributionPolicyZones() {
        return Optional.ofNullable(this.distributionPolicyZones);
    }

    /**
     * The fingerprint of the instance group manager.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The fingerprint of the instance group manager.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The full URL of the instance group created by the manager.
     * 
     */
    @Import(name="instanceGroup")
    private @Nullable Output<String> instanceGroup;

    /**
     * @return The full URL of the instance group created by the manager.
     * 
     */
    public Optional<Output<String>> instanceGroup() {
        return Optional.ofNullable(this.instanceGroup);
    }

    /**
     * Pagination behavior of the `listManagedInstances` API
     * method for this managed instance group. Valid values are: `PAGELESS`, `PAGINATED`.
     * If `PAGELESS` (default), Pagination is disabled for the group&#39;s `listManagedInstances` API method.
     * `maxResults` and `pageToken` query parameters are ignored and all instances are returned in a single
     * response. If `PAGINATED`, pagination is enabled, `maxResults` and `pageToken` query parameters are
     * respected.
     * 
     */
    @Import(name="listManagedInstancesResults")
    private @Nullable Output<String> listManagedInstancesResults;

    /**
     * @return Pagination behavior of the `listManagedInstances` API
     * method for this managed instance group. Valid values are: `PAGELESS`, `PAGINATED`.
     * If `PAGELESS` (default), Pagination is disabled for the group&#39;s `listManagedInstances` API method.
     * `maxResults` and `pageToken` query parameters are ignored and all instances are returned in a single
     * response. If `PAGINATED`, pagination is enabled, `maxResults` and `pageToken` query parameters are
     * respected.
     * 
     */
    public Optional<Output<String>> listManagedInstancesResults() {
        return Optional.ofNullable(this.listManagedInstancesResults);
    }

    /**
     * The name of the instance group manager. Must be 1-63
     * characters long and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
     * include lowercase letters, numbers, and hyphens.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the instance group manager. Must be 1-63
     * characters long and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
     * include lowercase letters, numbers, and hyphens.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The named port configuration. See the section below
     * for details on configuration.
     * 
     */
    @Import(name="namedPorts")
    private @Nullable Output<List<RegionInstanceGroupManagerNamedPortArgs>> namedPorts;

    /**
     * @return The named port configuration. See the section below
     * for details on configuration.
     * 
     */
    public Optional<Output<List<RegionInstanceGroupManagerNamedPortArgs>>> namedPorts() {
        return Optional.ofNullable(this.namedPorts);
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region where the managed instance group resides. If not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region where the managed instance group resides. If not provided, the provider region is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URL of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URL of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
     * 
     */
    @Import(name="statefulDisks")
    private @Nullable Output<List<RegionInstanceGroupManagerStatefulDiskArgs>> statefulDisks;

    /**
     * @return Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
     * 
     */
    public Optional<Output<List<RegionInstanceGroupManagerStatefulDiskArgs>>> statefulDisks() {
        return Optional.ofNullable(this.statefulDisks);
    }

    /**
     * ) External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
     * 
     */
    @Import(name="statefulExternalIps")
    private @Nullable Output<List<RegionInstanceGroupManagerStatefulExternalIpArgs>> statefulExternalIps;

    /**
     * @return ) External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionInstanceGroupManagerStatefulExternalIpArgs>>> statefulExternalIps() {
        return Optional.ofNullable(this.statefulExternalIps);
    }

    /**
     * ) Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
     * 
     */
    @Import(name="statefulInternalIps")
    private @Nullable Output<List<RegionInstanceGroupManagerStatefulInternalIpArgs>> statefulInternalIps;

    /**
     * @return ) Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionInstanceGroupManagerStatefulInternalIpArgs>>> statefulInternalIps() {
        return Optional.ofNullable(this.statefulInternalIps);
    }

    /**
     * The status of this managed instance group.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<RegionInstanceGroupManagerStatusArgs>> statuses;

    /**
     * @return The status of this managed instance group.
     * 
     */
    public Optional<Output<List<RegionInstanceGroupManagerStatusArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * The full URL of all target pools to which new
     * instances in the group are added. Updating the target pools attribute does
     * not affect existing instances.
     * 
     */
    @Import(name="targetPools")
    private @Nullable Output<List<String>> targetPools;

    /**
     * @return The full URL of all target pools to which new
     * instances in the group are added. Updating the target pools attribute does
     * not affect existing instances.
     * 
     */
    public Optional<Output<List<String>>> targetPools() {
        return Optional.ofNullable(this.targetPools);
    }

    /**
     * The target number of running instances for this managed
     * instance group. This value should always be explicitly set unless this resource is attached to
     * an autoscaler, in which case it should never be set. Defaults to `0`.
     * 
     */
    @Import(name="targetSize")
    private @Nullable Output<Integer> targetSize;

    /**
     * @return The target number of running instances for this managed
     * instance group. This value should always be explicitly set unless this resource is attached to
     * an autoscaler, in which case it should never be set. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> targetSize() {
        return Optional.ofNullable(this.targetSize);
    }

    /**
     * The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
     * 
     */
    @Import(name="updatePolicy")
    private @Nullable Output<RegionInstanceGroupManagerUpdatePolicyArgs> updatePolicy;

    /**
     * @return The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
     * 
     */
    public Optional<Output<RegionInstanceGroupManagerUpdatePolicyArgs>> updatePolicy() {
        return Optional.ofNullable(this.updatePolicy);
    }

    /**
     * Application versions managed by this instance group. Each
     * version deals with a specific instance template, allowing canary release scenarios.
     * Structure is documented below.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<RegionInstanceGroupManagerVersionArgs>> versions;

    /**
     * @return Application versions managed by this instance group. Each
     * version deals with a specific instance template, allowing canary release scenarios.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionInstanceGroupManagerVersionArgs>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    /**
     * Whether to wait for all instances to be created/updated before
     * returning. Note that if this is set to true and the operation does not succeed, the provider will
     * continue trying until it times out.
     * 
     */
    @Import(name="waitForInstances")
    private @Nullable Output<Boolean> waitForInstances;

    /**
     * @return Whether to wait for all instances to be created/updated before
     * returning. Note that if this is set to true and the operation does not succeed, the provider will
     * continue trying until it times out.
     * 
     */
    public Optional<Output<Boolean>> waitForInstances() {
        return Optional.ofNullable(this.waitForInstances);
    }

    /**
     * When used with `wait_for_instances` it specifies the status to wait for.
     * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
     * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
     * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
     * 
     */
    @Import(name="waitForInstancesStatus")
    private @Nullable Output<String> waitForInstancesStatus;

    /**
     * @return When used with `wait_for_instances` it specifies the status to wait for.
     * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
     * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
     * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
     * 
     */
    public Optional<Output<String>> waitForInstancesStatus() {
        return Optional.ofNullable(this.waitForInstancesStatus);
    }

    private RegionInstanceGroupManagerState() {}

    private RegionInstanceGroupManagerState(RegionInstanceGroupManagerState $) {
        this.allInstancesConfig = $.allInstancesConfig;
        this.autoHealingPolicies = $.autoHealingPolicies;
        this.baseInstanceName = $.baseInstanceName;
        this.description = $.description;
        this.distributionPolicyTargetShape = $.distributionPolicyTargetShape;
        this.distributionPolicyZones = $.distributionPolicyZones;
        this.fingerprint = $.fingerprint;
        this.instanceGroup = $.instanceGroup;
        this.listManagedInstancesResults = $.listManagedInstancesResults;
        this.name = $.name;
        this.namedPorts = $.namedPorts;
        this.project = $.project;
        this.region = $.region;
        this.selfLink = $.selfLink;
        this.statefulDisks = $.statefulDisks;
        this.statefulExternalIps = $.statefulExternalIps;
        this.statefulInternalIps = $.statefulInternalIps;
        this.statuses = $.statuses;
        this.targetPools = $.targetPools;
        this.targetSize = $.targetSize;
        this.updatePolicy = $.updatePolicy;
        this.versions = $.versions;
        this.waitForInstances = $.waitForInstances;
        this.waitForInstancesStatus = $.waitForInstancesStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionInstanceGroupManagerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionInstanceGroupManagerState $;

        public Builder() {
            $ = new RegionInstanceGroupManagerState();
        }

        public Builder(RegionInstanceGroupManagerState defaults) {
            $ = new RegionInstanceGroupManagerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allInstancesConfig )
         * Properties to set on all instances in the group. After setting
         * allInstancesConfig on the group, you must update the group&#39;s instances to
         * apply the configuration.
         * 
         * @return builder
         * 
         */
        public Builder allInstancesConfig(@Nullable Output<RegionInstanceGroupManagerAllInstancesConfigArgs> allInstancesConfig) {
            $.allInstancesConfig = allInstancesConfig;
            return this;
        }

        /**
         * @param allInstancesConfig )
         * Properties to set on all instances in the group. After setting
         * allInstancesConfig on the group, you must update the group&#39;s instances to
         * apply the configuration.
         * 
         * @return builder
         * 
         */
        public Builder allInstancesConfig(RegionInstanceGroupManagerAllInstancesConfigArgs allInstancesConfig) {
            return allInstancesConfig(Output.of(allInstancesConfig));
        }

        /**
         * @param autoHealingPolicies The autohealing policies for this managed instance
         * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
         * 
         * @return builder
         * 
         */
        public Builder autoHealingPolicies(@Nullable Output<RegionInstanceGroupManagerAutoHealingPoliciesArgs> autoHealingPolicies) {
            $.autoHealingPolicies = autoHealingPolicies;
            return this;
        }

        /**
         * @param autoHealingPolicies The autohealing policies for this managed instance
         * group. You can specify only one value. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#monitoring_groups).
         * 
         * @return builder
         * 
         */
        public Builder autoHealingPolicies(RegionInstanceGroupManagerAutoHealingPoliciesArgs autoHealingPolicies) {
            return autoHealingPolicies(Output.of(autoHealingPolicies));
        }

        /**
         * @param baseInstanceName The base instance name to use for
         * instances in this group. The value must be a valid
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
         * are lowercase letters, numbers, and hyphens (-). Instances are named by
         * appending a hyphen and a random four-character string to the base instance
         * name.
         * 
         * @return builder
         * 
         */
        public Builder baseInstanceName(@Nullable Output<String> baseInstanceName) {
            $.baseInstanceName = baseInstanceName;
            return this;
        }

        /**
         * @param baseInstanceName The base instance name to use for
         * instances in this group. The value must be a valid
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt) name. Supported characters
         * are lowercase letters, numbers, and hyphens (-). Instances are named by
         * appending a hyphen and a random four-character string to the base instance
         * name.
         * 
         * @return builder
         * 
         */
        public Builder baseInstanceName(String baseInstanceName) {
            return baseInstanceName(Output.of(baseInstanceName));
        }

        /**
         * @param description An optional textual description of the instance
         * group manager.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional textual description of the instance
         * group manager.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param distributionPolicyTargetShape The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicyTargetShape(@Nullable Output<String> distributionPolicyTargetShape) {
            $.distributionPolicyTargetShape = distributionPolicyTargetShape;
            return this;
        }

        /**
         * @param distributionPolicyTargetShape The shape to which the group converges either proactively or on resize events (depending on the value set in update_policy.0.instance_redistribution_type). For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/regional-mig-distribution-shape).
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicyTargetShape(String distributionPolicyTargetShape) {
            return distributionPolicyTargetShape(Output.of(distributionPolicyTargetShape));
        }

        /**
         * @param distributionPolicyZones The distribution policy for this managed instance
         * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicyZones(@Nullable Output<List<String>> distributionPolicyZones) {
            $.distributionPolicyZones = distributionPolicyZones;
            return this;
        }

        /**
         * @param distributionPolicyZones The distribution policy for this managed instance
         * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicyZones(List<String> distributionPolicyZones) {
            return distributionPolicyZones(Output.of(distributionPolicyZones));
        }

        /**
         * @param distributionPolicyZones The distribution policy for this managed instance
         * group. You can specify one or more values. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups#selectingzones).
         * 
         * @return builder
         * 
         */
        public Builder distributionPolicyZones(String... distributionPolicyZones) {
            return distributionPolicyZones(List.of(distributionPolicyZones));
        }

        /**
         * @param fingerprint The fingerprint of the instance group manager.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The fingerprint of the instance group manager.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param instanceGroup The full URL of the instance group created by the manager.
         * 
         * @return builder
         * 
         */
        public Builder instanceGroup(@Nullable Output<String> instanceGroup) {
            $.instanceGroup = instanceGroup;
            return this;
        }

        /**
         * @param instanceGroup The full URL of the instance group created by the manager.
         * 
         * @return builder
         * 
         */
        public Builder instanceGroup(String instanceGroup) {
            return instanceGroup(Output.of(instanceGroup));
        }

        /**
         * @param listManagedInstancesResults Pagination behavior of the `listManagedInstances` API
         * method for this managed instance group. Valid values are: `PAGELESS`, `PAGINATED`.
         * If `PAGELESS` (default), Pagination is disabled for the group&#39;s `listManagedInstances` API method.
         * `maxResults` and `pageToken` query parameters are ignored and all instances are returned in a single
         * response. If `PAGINATED`, pagination is enabled, `maxResults` and `pageToken` query parameters are
         * respected.
         * 
         * @return builder
         * 
         */
        public Builder listManagedInstancesResults(@Nullable Output<String> listManagedInstancesResults) {
            $.listManagedInstancesResults = listManagedInstancesResults;
            return this;
        }

        /**
         * @param listManagedInstancesResults Pagination behavior of the `listManagedInstances` API
         * method for this managed instance group. Valid values are: `PAGELESS`, `PAGINATED`.
         * If `PAGELESS` (default), Pagination is disabled for the group&#39;s `listManagedInstances` API method.
         * `maxResults` and `pageToken` query parameters are ignored and all instances are returned in a single
         * response. If `PAGINATED`, pagination is enabled, `maxResults` and `pageToken` query parameters are
         * respected.
         * 
         * @return builder
         * 
         */
        public Builder listManagedInstancesResults(String listManagedInstancesResults) {
            return listManagedInstancesResults(Output.of(listManagedInstancesResults));
        }

        /**
         * @param name The name of the instance group manager. Must be 1-63
         * characters long and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
         * include lowercase letters, numbers, and hyphens.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the instance group manager. Must be 1-63
         * characters long and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Supported characters
         * include lowercase letters, numbers, and hyphens.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namedPorts The named port configuration. See the section below
         * for details on configuration.
         * 
         * @return builder
         * 
         */
        public Builder namedPorts(@Nullable Output<List<RegionInstanceGroupManagerNamedPortArgs>> namedPorts) {
            $.namedPorts = namedPorts;
            return this;
        }

        /**
         * @param namedPorts The named port configuration. See the section below
         * for details on configuration.
         * 
         * @return builder
         * 
         */
        public Builder namedPorts(List<RegionInstanceGroupManagerNamedPortArgs> namedPorts) {
            return namedPorts(Output.of(namedPorts));
        }

        /**
         * @param namedPorts The named port configuration. See the section below
         * for details on configuration.
         * 
         * @return builder
         * 
         */
        public Builder namedPorts(RegionInstanceGroupManagerNamedPortArgs... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The region where the managed instance group resides. If not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region where the managed instance group resides. If not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param selfLink The URL of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URL of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param statefulDisks Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
         * 
         * @return builder
         * 
         */
        public Builder statefulDisks(@Nullable Output<List<RegionInstanceGroupManagerStatefulDiskArgs>> statefulDisks) {
            $.statefulDisks = statefulDisks;
            return this;
        }

        /**
         * @param statefulDisks Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
         * 
         * @return builder
         * 
         */
        public Builder statefulDisks(List<RegionInstanceGroupManagerStatefulDiskArgs> statefulDisks) {
            return statefulDisks(Output.of(statefulDisks));
        }

        /**
         * @param statefulDisks Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/configuring-stateful-disks-in-migs). Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the `update_policy`.
         * 
         * @return builder
         * 
         */
        public Builder statefulDisks(RegionInstanceGroupManagerStatefulDiskArgs... statefulDisks) {
            return statefulDisks(List.of(statefulDisks));
        }

        /**
         * @param statefulExternalIps ) External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statefulExternalIps(@Nullable Output<List<RegionInstanceGroupManagerStatefulExternalIpArgs>> statefulExternalIps) {
            $.statefulExternalIps = statefulExternalIps;
            return this;
        }

        /**
         * @param statefulExternalIps ) External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statefulExternalIps(List<RegionInstanceGroupManagerStatefulExternalIpArgs> statefulExternalIps) {
            return statefulExternalIps(Output.of(statefulExternalIps));
        }

        /**
         * @param statefulExternalIps ) External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statefulExternalIps(RegionInstanceGroupManagerStatefulExternalIpArgs... statefulExternalIps) {
            return statefulExternalIps(List.of(statefulExternalIps));
        }

        /**
         * @param statefulInternalIps ) Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statefulInternalIps(@Nullable Output<List<RegionInstanceGroupManagerStatefulInternalIpArgs>> statefulInternalIps) {
            $.statefulInternalIps = statefulInternalIps;
            return this;
        }

        /**
         * @param statefulInternalIps ) Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statefulInternalIps(List<RegionInstanceGroupManagerStatefulInternalIpArgs> statefulInternalIps) {
            return statefulInternalIps(Output.of(statefulInternalIps));
        }

        /**
         * @param statefulInternalIps ) Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statefulInternalIps(RegionInstanceGroupManagerStatefulInternalIpArgs... statefulInternalIps) {
            return statefulInternalIps(List.of(statefulInternalIps));
        }

        /**
         * @param statuses The status of this managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<RegionInstanceGroupManagerStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses The status of this managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<RegionInstanceGroupManagerStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses The status of this managed instance group.
         * 
         * @return builder
         * 
         */
        public Builder statuses(RegionInstanceGroupManagerStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param targetPools The full URL of all target pools to which new
         * instances in the group are added. Updating the target pools attribute does
         * not affect existing instances.
         * 
         * @return builder
         * 
         */
        public Builder targetPools(@Nullable Output<List<String>> targetPools) {
            $.targetPools = targetPools;
            return this;
        }

        /**
         * @param targetPools The full URL of all target pools to which new
         * instances in the group are added. Updating the target pools attribute does
         * not affect existing instances.
         * 
         * @return builder
         * 
         */
        public Builder targetPools(List<String> targetPools) {
            return targetPools(Output.of(targetPools));
        }

        /**
         * @param targetPools The full URL of all target pools to which new
         * instances in the group are added. Updating the target pools attribute does
         * not affect existing instances.
         * 
         * @return builder
         * 
         */
        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }

        /**
         * @param targetSize The target number of running instances for this managed
         * instance group. This value should always be explicitly set unless this resource is attached to
         * an autoscaler, in which case it should never be set. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder targetSize(@Nullable Output<Integer> targetSize) {
            $.targetSize = targetSize;
            return this;
        }

        /**
         * @param targetSize The target number of running instances for this managed
         * instance group. This value should always be explicitly set unless this resource is attached to
         * an autoscaler, in which case it should never be set. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder targetSize(Integer targetSize) {
            return targetSize(Output.of(targetSize));
        }

        /**
         * @param updatePolicy The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
         * 
         * @return builder
         * 
         */
        public Builder updatePolicy(@Nullable Output<RegionInstanceGroupManagerUpdatePolicyArgs> updatePolicy) {
            $.updatePolicy = updatePolicy;
            return this;
        }

        /**
         * @param updatePolicy The update policy for this managed instance group. Structure is documented below. For more information, see the [official documentation](https://cloud.google.com/compute/docs/instance-groups/updating-managed-instance-groups) and [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionInstanceGroupManagers/patch)
         * 
         * @return builder
         * 
         */
        public Builder updatePolicy(RegionInstanceGroupManagerUpdatePolicyArgs updatePolicy) {
            return updatePolicy(Output.of(updatePolicy));
        }

        /**
         * @param versions Application versions managed by this instance group. Each
         * version deals with a specific instance template, allowing canary release scenarios.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<RegionInstanceGroupManagerVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Application versions managed by this instance group. Each
         * version deals with a specific instance template, allowing canary release scenarios.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<RegionInstanceGroupManagerVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions Application versions managed by this instance group. Each
         * version deals with a specific instance template, allowing canary release scenarios.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(RegionInstanceGroupManagerVersionArgs... versions) {
            return versions(List.of(versions));
        }

        /**
         * @param waitForInstances Whether to wait for all instances to be created/updated before
         * returning. Note that if this is set to true and the operation does not succeed, the provider will
         * continue trying until it times out.
         * 
         * @return builder
         * 
         */
        public Builder waitForInstances(@Nullable Output<Boolean> waitForInstances) {
            $.waitForInstances = waitForInstances;
            return this;
        }

        /**
         * @param waitForInstances Whether to wait for all instances to be created/updated before
         * returning. Note that if this is set to true and the operation does not succeed, the provider will
         * continue trying until it times out.
         * 
         * @return builder
         * 
         */
        public Builder waitForInstances(Boolean waitForInstances) {
            return waitForInstances(Output.of(waitForInstances));
        }

        /**
         * @param waitForInstancesStatus When used with `wait_for_instances` it specifies the status to wait for.
         * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
         * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
         * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
         * 
         * @return builder
         * 
         */
        public Builder waitForInstancesStatus(@Nullable Output<String> waitForInstancesStatus) {
            $.waitForInstancesStatus = waitForInstancesStatus;
            return this;
        }

        /**
         * @param waitForInstancesStatus When used with `wait_for_instances` it specifies the status to wait for.
         * When `STABLE` is specified this resource will wait until the instances are stable before returning. When `UPDATED` is
         * set, it will wait for the version target to be reached and any per instance configs to be effective as well as all
         * instances to be stable before returning. The possible values are `STABLE` and `UPDATED`
         * 
         * @return builder
         * 
         */
        public Builder waitForInstancesStatus(String waitForInstancesStatus) {
            return waitForInstancesStatus(Output.of(waitForInstancesStatus));
        }

        public RegionInstanceGroupManagerState build() {
            return $;
        }
    }

}
