// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UnitKindOutputVariableMappingTo {
    /**
     * @return Alias of the dependency that the inputVariable will pass its value to
     * 
     */
    private String dependency;
    /**
     * @return Tells SaaS Runtime if this mapping should be used during lookup or not
     * 
     */
    private @Nullable Boolean ignoreForLookup;
    /**
     * @return Name of the inputVariable on the dependency
     * 
     */
    private String inputVariable;

    private UnitKindOutputVariableMappingTo() {}
    /**
     * @return Alias of the dependency that the inputVariable will pass its value to
     * 
     */
    public String dependency() {
        return this.dependency;
    }
    /**
     * @return Tells SaaS Runtime if this mapping should be used during lookup or not
     * 
     */
    public Optional<Boolean> ignoreForLookup() {
        return Optional.ofNullable(this.ignoreForLookup);
    }
    /**
     * @return Name of the inputVariable on the dependency
     * 
     */
    public String inputVariable() {
        return this.inputVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UnitKindOutputVariableMappingTo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dependency;
        private @Nullable Boolean ignoreForLookup;
        private String inputVariable;
        public Builder() {}
        public Builder(UnitKindOutputVariableMappingTo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependency = defaults.dependency;
    	      this.ignoreForLookup = defaults.ignoreForLookup;
    	      this.inputVariable = defaults.inputVariable;
        }

        @CustomType.Setter
        public Builder dependency(String dependency) {
            if (dependency == null) {
              throw new MissingRequiredPropertyException("UnitKindOutputVariableMappingTo", "dependency");
            }
            this.dependency = dependency;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreForLookup(@Nullable Boolean ignoreForLookup) {

            this.ignoreForLookup = ignoreForLookup;
            return this;
        }
        @CustomType.Setter
        public Builder inputVariable(String inputVariable) {
            if (inputVariable == null) {
              throw new MissingRequiredPropertyException("UnitKindOutputVariableMappingTo", "inputVariable");
            }
            this.inputVariable = inputVariable;
            return this;
        }
        public UnitKindOutputVariableMappingTo build() {
            final var _resultValue = new UnitKindOutputVariableMappingTo();
            _resultValue.dependency = dependency;
            _resultValue.ignoreForLookup = ignoreForLookup;
            _resultValue.inputVariable = inputVariable;
            return _resultValue;
        }
    }
}
