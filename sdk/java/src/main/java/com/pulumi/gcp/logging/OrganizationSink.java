// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.logging.OrganizationSinkArgs;
import com.pulumi.gcp.logging.inputs.OrganizationSinkState;
import com.pulumi.gcp.logging.outputs.OrganizationSinkBigqueryOptions;
import com.pulumi.gcp.logging.outputs.OrganizationSinkExclusion;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a organization-level logging sink. For more information see:
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/organizations.sinks)
 * * How-to Guides
 *     * [Exporting Logs](https://cloud.google.com/logging/docs/export)
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.logging.OrganizationSink;
 * import com.pulumi.gcp.logging.OrganizationSinkArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var log_bucket = new Bucket("log-bucket", BucketArgs.builder()
 *             .name("organization-logging-bucket")
 *             .location("US")
 *             .build());
 * 
 *         var my_sink = new OrganizationSink("my-sink", OrganizationSinkArgs.builder()
 *             .name("my-sink")
 *             .description("some explanation on what this is")
 *             .orgId("123456789")
 *             .destination(log_bucket.name().applyValue(name -> String.format("storage.googleapis.com/%s", name)))
 *             .filter("resource.type = gce_instance AND severity >= WARNING")
 *             .build());
 * 
 *         var log_writer = new IAMMember("log-writer", IAMMemberArgs.builder()
 *             .project("your-project-id")
 *             .role("roles/storage.objectCreator")
 *             .member(my_sink.writerIdentity())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Organization-level logging sinks can be imported using this format:
 * 
 * * `organizations/{{organization_id}}/sinks/{{sink_id}}`
 * 
 * When using the `pulumi import` command, organization-level logging sinks can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:logging/organizationSink:OrganizationSink default organizations/{{organization_id}}/sinks/{{sink_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:logging/organizationSink:OrganizationSink")
public class OrganizationSink extends com.pulumi.resources.CustomResource {
    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    @Export(name="bigqueryOptions", refs={OrganizationSinkBigqueryOptions.class}, tree="[0]")
    private Output<OrganizationSinkBigqueryOptions> bigqueryOptions;

    /**
     * @return Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    public Output<OrganizationSinkBigqueryOptions> bigqueryOptions() {
        return this.bigqueryOptions;
    }
    /**
     * A description of this sink. The maximum length of the description is 8000 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of this sink. The maximum length of the description is 8000 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
     * 
     * - `storage.googleapis.com/[GCS_BUCKET]`
     * - `bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]`
     * - `pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]/locations/global/buckets/[BUCKET_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]`
     * 
     * The writer associated with the sink must have access to write to the above resource.
     * 
     */
    @Export(name="destination", refs={String.class}, tree="[0]")
    private Output<String> destination;

    /**
     * @return The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
     * 
     * - `storage.googleapis.com/[GCS_BUCKET]`
     * - `bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]`
     * - `pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]/locations/global/buckets/[BUCKET_ID]`
     * - `logging.googleapis.com/projects/[PROJECT_ID]`
     * 
     * The writer associated with the sink must have access to write to the above resource.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }
    /**
     * If set to True, then this sink is disabled and it does not export any log entries.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return If set to True, then this sink is disabled and it does not export any log entries.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    @Export(name="exclusions", refs={List.class,OrganizationSinkExclusion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OrganizationSinkExclusion>> exclusions;

    /**
     * @return Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both `filter` and one of `exclusions.filter`, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    public Output<Optional<List<OrganizationSinkExclusion>>> exclusions() {
        return Codegen.optional(this.exclusions);
    }
    /**
     * The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    @Export(name="filter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> filter;

    /**
     * @return The filter to apply when exporting logs. Only log entries that match the filter are exported.
     * See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    public Output<Optional<String>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * Whether or not to include children organizations in the sink export. If true, logs
     * associated with child projects are also exported; otherwise only logs relating to the provided organization are included.
     * 
     */
    @Export(name="includeChildren", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> includeChildren;

    /**
     * @return Whether or not to include children organizations in the sink export. If true, logs
     * associated with child projects are also exported; otherwise only logs relating to the provided organization are included.
     * 
     */
    public Output<Optional<Boolean>> includeChildren() {
        return Codegen.optional(this.includeChildren);
    }
    /**
     * Whether or not to intercept logs from child projects. If true, matching logs will not
     * match with sinks in child resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
     * 
     */
    @Export(name="interceptChildren", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> interceptChildren;

    /**
     * @return Whether or not to intercept logs from child projects. If true, matching logs will not
     * match with sinks in child resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
     * 
     */
    public Output<Optional<Boolean>> interceptChildren() {
        return Codegen.optional(this.interceptChildren);
    }
    /**
     * The name of the logging sink.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the logging sink.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The numeric ID of the organization to be exported to the sink.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    /**
     * @return The numeric ID of the organization to be exported to the sink.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     * 
     */
    @Export(name="writerIdentity", refs={String.class}, tree="[0]")
    private Output<String> writerIdentity;

    /**
     * @return The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     * 
     */
    public Output<String> writerIdentity() {
        return this.writerIdentity;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OrganizationSink(String name) {
        this(name, OrganizationSinkArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OrganizationSink(String name, OrganizationSinkArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OrganizationSink(String name, OrganizationSinkArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/organizationSink:OrganizationSink", name, args == null ? OrganizationSinkArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OrganizationSink(String name, Output<String> id, @Nullable OrganizationSinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/organizationSink:OrganizationSink", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OrganizationSink get(String name, Output<String> id, @Nullable OrganizationSinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OrganizationSink(name, id, state, options);
    }
}
