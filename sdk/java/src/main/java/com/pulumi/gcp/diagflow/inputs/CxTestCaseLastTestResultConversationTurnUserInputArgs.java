// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxTestCaseLastTestResultConversationTurnUserInputInputArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxTestCaseLastTestResultConversationTurnUserInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxTestCaseLastTestResultConversationTurnUserInputArgs Empty = new CxTestCaseLastTestResultConversationTurnUserInputArgs();

    /**
     * Whether sentiment analysis is enabled.
     * 
     */
    @Import(name="enableSentimentAnalysis")
    private @Nullable Output<Boolean> enableSentimentAnalysis;

    /**
     * @return Whether sentiment analysis is enabled.
     * 
     */
    public Optional<Output<Boolean>> enableSentimentAnalysis() {
        return Optional.ofNullable(this.enableSentimentAnalysis);
    }

    /**
     * Parameters that need to be injected into the conversation during intent detection.
     * 
     */
    @Import(name="injectedParameters")
    private @Nullable Output<String> injectedParameters;

    /**
     * @return Parameters that need to be injected into the conversation during intent detection.
     * 
     */
    public Optional<Output<String>> injectedParameters() {
        return Optional.ofNullable(this.injectedParameters);
    }

    /**
     * User input. Supports text input, event input, dtmf input in the test case.
     * Structure is documented below.
     * 
     */
    @Import(name="input")
    private @Nullable Output<CxTestCaseLastTestResultConversationTurnUserInputInputArgs> input;

    /**
     * @return User input. Supports text input, event input, dtmf input in the test case.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxTestCaseLastTestResultConversationTurnUserInputInputArgs>> input() {
        return Optional.ofNullable(this.input);
    }

    /**
     * If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
     * 
     */
    @Import(name="isWebhookEnabled")
    private @Nullable Output<Boolean> isWebhookEnabled;

    /**
     * @return If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
     * 
     */
    public Optional<Output<Boolean>> isWebhookEnabled() {
        return Optional.ofNullable(this.isWebhookEnabled);
    }

    private CxTestCaseLastTestResultConversationTurnUserInputArgs() {}

    private CxTestCaseLastTestResultConversationTurnUserInputArgs(CxTestCaseLastTestResultConversationTurnUserInputArgs $) {
        this.enableSentimentAnalysis = $.enableSentimentAnalysis;
        this.injectedParameters = $.injectedParameters;
        this.input = $.input;
        this.isWebhookEnabled = $.isWebhookEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxTestCaseLastTestResultConversationTurnUserInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxTestCaseLastTestResultConversationTurnUserInputArgs $;

        public Builder() {
            $ = new CxTestCaseLastTestResultConversationTurnUserInputArgs();
        }

        public Builder(CxTestCaseLastTestResultConversationTurnUserInputArgs defaults) {
            $ = new CxTestCaseLastTestResultConversationTurnUserInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableSentimentAnalysis Whether sentiment analysis is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableSentimentAnalysis(@Nullable Output<Boolean> enableSentimentAnalysis) {
            $.enableSentimentAnalysis = enableSentimentAnalysis;
            return this;
        }

        /**
         * @param enableSentimentAnalysis Whether sentiment analysis is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableSentimentAnalysis(Boolean enableSentimentAnalysis) {
            return enableSentimentAnalysis(Output.of(enableSentimentAnalysis));
        }

        /**
         * @param injectedParameters Parameters that need to be injected into the conversation during intent detection.
         * 
         * @return builder
         * 
         */
        public Builder injectedParameters(@Nullable Output<String> injectedParameters) {
            $.injectedParameters = injectedParameters;
            return this;
        }

        /**
         * @param injectedParameters Parameters that need to be injected into the conversation during intent detection.
         * 
         * @return builder
         * 
         */
        public Builder injectedParameters(String injectedParameters) {
            return injectedParameters(Output.of(injectedParameters));
        }

        /**
         * @param input User input. Supports text input, event input, dtmf input in the test case.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder input(@Nullable Output<CxTestCaseLastTestResultConversationTurnUserInputInputArgs> input) {
            $.input = input;
            return this;
        }

        /**
         * @param input User input. Supports text input, event input, dtmf input in the test case.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder input(CxTestCaseLastTestResultConversationTurnUserInputInputArgs input) {
            return input(Output.of(input));
        }

        /**
         * @param isWebhookEnabled If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
         * 
         * @return builder
         * 
         */
        public Builder isWebhookEnabled(@Nullable Output<Boolean> isWebhookEnabled) {
            $.isWebhookEnabled = isWebhookEnabled;
            return this;
        }

        /**
         * @param isWebhookEnabled If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
         * 
         * @return builder
         * 
         */
        public Builder isWebhookEnabled(Boolean isWebhookEnabled) {
            return isWebhookEnabled(Output.of(isWebhookEnabled));
        }

        public CxTestCaseLastTestResultConversationTurnUserInputArgs build() {
            return $;
        }
    }

}
