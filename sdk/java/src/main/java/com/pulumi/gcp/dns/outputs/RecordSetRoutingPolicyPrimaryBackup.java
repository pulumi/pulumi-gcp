// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.dns.outputs.RecordSetRoutingPolicyPrimaryBackupBackupGeo;
import com.pulumi.gcp.dns.outputs.RecordSetRoutingPolicyPrimaryBackupPrimary;
import java.lang.Boolean;
import java.lang.Double;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecordSetRoutingPolicyPrimaryBackup {
    /**
     * @return The backup geo targets, which provide a regional failover policy for the otherwise global primary targets.
     * Structure is document above.
     * 
     */
    private List<RecordSetRoutingPolicyPrimaryBackupBackupGeo> backupGeos;
    /**
     * @return Specifies whether to enable fencing for backup geo queries.
     * 
     */
    private @Nullable Boolean enableGeoFencingForBackups;
    /**
     * @return The list of global primary targets to be health checked.
     * Structure is document below.
     * 
     */
    private RecordSetRoutingPolicyPrimaryBackupPrimary primary;
    /**
     * @return Specifies the percentage of traffic to send to the backup targets even when the primary targets are healthy.
     * 
     */
    private @Nullable Double trickleRatio;

    private RecordSetRoutingPolicyPrimaryBackup() {}
    /**
     * @return The backup geo targets, which provide a regional failover policy for the otherwise global primary targets.
     * Structure is document above.
     * 
     */
    public List<RecordSetRoutingPolicyPrimaryBackupBackupGeo> backupGeos() {
        return this.backupGeos;
    }
    /**
     * @return Specifies whether to enable fencing for backup geo queries.
     * 
     */
    public Optional<Boolean> enableGeoFencingForBackups() {
        return Optional.ofNullable(this.enableGeoFencingForBackups);
    }
    /**
     * @return The list of global primary targets to be health checked.
     * Structure is document below.
     * 
     */
    public RecordSetRoutingPolicyPrimaryBackupPrimary primary() {
        return this.primary;
    }
    /**
     * @return Specifies the percentage of traffic to send to the backup targets even when the primary targets are healthy.
     * 
     */
    public Optional<Double> trickleRatio() {
        return Optional.ofNullable(this.trickleRatio);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordSetRoutingPolicyPrimaryBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<RecordSetRoutingPolicyPrimaryBackupBackupGeo> backupGeos;
        private @Nullable Boolean enableGeoFencingForBackups;
        private RecordSetRoutingPolicyPrimaryBackupPrimary primary;
        private @Nullable Double trickleRatio;
        public Builder() {}
        public Builder(RecordSetRoutingPolicyPrimaryBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupGeos = defaults.backupGeos;
    	      this.enableGeoFencingForBackups = defaults.enableGeoFencingForBackups;
    	      this.primary = defaults.primary;
    	      this.trickleRatio = defaults.trickleRatio;
        }

        @CustomType.Setter
        public Builder backupGeos(List<RecordSetRoutingPolicyPrimaryBackupBackupGeo> backupGeos) {
            this.backupGeos = Objects.requireNonNull(backupGeos);
            return this;
        }
        public Builder backupGeos(RecordSetRoutingPolicyPrimaryBackupBackupGeo... backupGeos) {
            return backupGeos(List.of(backupGeos));
        }
        @CustomType.Setter
        public Builder enableGeoFencingForBackups(@Nullable Boolean enableGeoFencingForBackups) {
            this.enableGeoFencingForBackups = enableGeoFencingForBackups;
            return this;
        }
        @CustomType.Setter
        public Builder primary(RecordSetRoutingPolicyPrimaryBackupPrimary primary) {
            this.primary = Objects.requireNonNull(primary);
            return this;
        }
        @CustomType.Setter
        public Builder trickleRatio(@Nullable Double trickleRatio) {
            this.trickleRatio = trickleRatio;
            return this;
        }
        public RecordSetRoutingPolicyPrimaryBackup build() {
            final var o = new RecordSetRoutingPolicyPrimaryBackup();
            o.backupGeos = backupGeos;
            o.enableGeoFencingForBackups = enableGeoFencingForBackups;
            o.primary = primary;
            o.trickleRatio = trickleRatio;
            return o;
        }
    }
}
