// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workbench.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceGceSetupAcceleratorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceGceSetupAcceleratorConfigArgs Empty = new InstanceGceSetupAcceleratorConfigArgs();

    /**
     * Optional. Count of cores of this accelerator.
     * 
     */
    @Import(name="coreCount")
    private @Nullable Output<String> coreCount;

    /**
     * @return Optional. Count of cores of this accelerator.
     * 
     */
    public Optional<Output<String>> coreCount() {
        return Optional.ofNullable(this.coreCount);
    }

    /**
     * Optional. Type of this accelerator.
     * Possible values are: `NVIDIA_TESLA_P100`, `NVIDIA_TESLA_V100`, `NVIDIA_TESLA_P4`, `NVIDIA_TESLA_T4`, `NVIDIA_TESLA_A100`, `NVIDIA_A100_80GB`, `NVIDIA_L4`, `NVIDIA_TESLA_T4_VWS`, `NVIDIA_TESLA_P100_VWS`, `NVIDIA_TESLA_P4_VWS`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Optional. Type of this accelerator.
     * Possible values are: `NVIDIA_TESLA_P100`, `NVIDIA_TESLA_V100`, `NVIDIA_TESLA_P4`, `NVIDIA_TESLA_T4`, `NVIDIA_TESLA_A100`, `NVIDIA_A100_80GB`, `NVIDIA_L4`, `NVIDIA_TESLA_T4_VWS`, `NVIDIA_TESLA_P100_VWS`, `NVIDIA_TESLA_P4_VWS`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private InstanceGceSetupAcceleratorConfigArgs() {}

    private InstanceGceSetupAcceleratorConfigArgs(InstanceGceSetupAcceleratorConfigArgs $) {
        this.coreCount = $.coreCount;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGceSetupAcceleratorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGceSetupAcceleratorConfigArgs $;

        public Builder() {
            $ = new InstanceGceSetupAcceleratorConfigArgs();
        }

        public Builder(InstanceGceSetupAcceleratorConfigArgs defaults) {
            $ = new InstanceGceSetupAcceleratorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coreCount Optional. Count of cores of this accelerator.
         * 
         * @return builder
         * 
         */
        public Builder coreCount(@Nullable Output<String> coreCount) {
            $.coreCount = coreCount;
            return this;
        }

        /**
         * @param coreCount Optional. Count of cores of this accelerator.
         * 
         * @return builder
         * 
         */
        public Builder coreCount(String coreCount) {
            return coreCount(Output.of(coreCount));
        }

        /**
         * @param type Optional. Type of this accelerator.
         * Possible values are: `NVIDIA_TESLA_P100`, `NVIDIA_TESLA_V100`, `NVIDIA_TESLA_P4`, `NVIDIA_TESLA_T4`, `NVIDIA_TESLA_A100`, `NVIDIA_A100_80GB`, `NVIDIA_L4`, `NVIDIA_TESLA_T4_VWS`, `NVIDIA_TESLA_P100_VWS`, `NVIDIA_TESLA_P4_VWS`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Optional. Type of this accelerator.
         * Possible values are: `NVIDIA_TESLA_P100`, `NVIDIA_TESLA_V100`, `NVIDIA_TESLA_P4`, `NVIDIA_TESLA_T4`, `NVIDIA_TESLA_A100`, `NVIDIA_A100_80GB`, `NVIDIA_L4`, `NVIDIA_TESLA_T4_VWS`, `NVIDIA_TESLA_P100_VWS`, `NVIDIA_TESLA_P4_VWS`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InstanceGceSetupAcceleratorConfigArgs build() {
            return $;
        }
    }

}
