// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.osconfig.outputs.GuestPoliciesAssignmentGroupLabel;
import com.pulumi.gcp.osconfig.outputs.GuestPoliciesAssignmentOsType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GuestPoliciesAssignment {
    /**
     * @return Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
     * for example &#34;env=prod or env=staging&#34;.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<GuestPoliciesAssignmentGroupLabel> groupLabels;
    /**
     * @return Targets VM instances whose name starts with one of these prefixes.
     * Like labels, this is another way to group VM instances when targeting configs,
     * for example prefix=&#34;prod-&#34;.
     * Only supported for project-level policies.
     * 
     */
    private final @Nullable List<String> instanceNamePrefixes;
    /**
     * @return Targets any of the instances specified. Instances are specified by their URI in the form
     * zones/[ZONE]/instances/[INSTANCE_NAME].
     * Instance targeting is uncommon and is supported to facilitate the management of changes
     * by the instance or to target specific VM instances for development and testing.
     * Only supported for project-level policies and must reference instances within this project.
     * 
     */
    private final @Nullable List<String> instances;
    /**
     * @return Targets VM instances matching at least one of the following OS types.
     * VM instances must match all supplied criteria for a given OsType to be included.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<GuestPoliciesAssignmentOsType> osTypes;
    /**
     * @return Targets instances in any of these zones. Leave empty to target instances in any zone.
     * Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     * 
     */
    private final @Nullable List<String> zones;

    @CustomType.Constructor
    private GuestPoliciesAssignment(
        @CustomType.Parameter("groupLabels") @Nullable List<GuestPoliciesAssignmentGroupLabel> groupLabels,
        @CustomType.Parameter("instanceNamePrefixes") @Nullable List<String> instanceNamePrefixes,
        @CustomType.Parameter("instances") @Nullable List<String> instances,
        @CustomType.Parameter("osTypes") @Nullable List<GuestPoliciesAssignmentOsType> osTypes,
        @CustomType.Parameter("zones") @Nullable List<String> zones) {
        this.groupLabels = groupLabels;
        this.instanceNamePrefixes = instanceNamePrefixes;
        this.instances = instances;
        this.osTypes = osTypes;
        this.zones = zones;
    }

    /**
     * @return Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups,
     * for example &#34;env=prod or env=staging&#34;.
     * Structure is documented below.
     * 
     */
    public List<GuestPoliciesAssignmentGroupLabel> groupLabels() {
        return this.groupLabels == null ? List.of() : this.groupLabels;
    }
    /**
     * @return Targets VM instances whose name starts with one of these prefixes.
     * Like labels, this is another way to group VM instances when targeting configs,
     * for example prefix=&#34;prod-&#34;.
     * Only supported for project-level policies.
     * 
     */
    public List<String> instanceNamePrefixes() {
        return this.instanceNamePrefixes == null ? List.of() : this.instanceNamePrefixes;
    }
    /**
     * @return Targets any of the instances specified. Instances are specified by their URI in the form
     * zones/[ZONE]/instances/[INSTANCE_NAME].
     * Instance targeting is uncommon and is supported to facilitate the management of changes
     * by the instance or to target specific VM instances for development and testing.
     * Only supported for project-level policies and must reference instances within this project.
     * 
     */
    public List<String> instances() {
        return this.instances == null ? List.of() : this.instances;
    }
    /**
     * @return Targets VM instances matching at least one of the following OS types.
     * VM instances must match all supplied criteria for a given OsType to be included.
     * Structure is documented below.
     * 
     */
    public List<GuestPoliciesAssignmentOsType> osTypes() {
        return this.osTypes == null ? List.of() : this.osTypes;
    }
    /**
     * @return Targets instances in any of these zones. Leave empty to target instances in any zone.
     * Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     * 
     */
    public List<String> zones() {
        return this.zones == null ? List.of() : this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GuestPoliciesAssignment defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GuestPoliciesAssignmentGroupLabel> groupLabels;
        private @Nullable List<String> instanceNamePrefixes;
        private @Nullable List<String> instances;
        private @Nullable List<GuestPoliciesAssignmentOsType> osTypes;
        private @Nullable List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(GuestPoliciesAssignment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupLabels = defaults.groupLabels;
    	      this.instanceNamePrefixes = defaults.instanceNamePrefixes;
    	      this.instances = defaults.instances;
    	      this.osTypes = defaults.osTypes;
    	      this.zones = defaults.zones;
        }

        public Builder groupLabels(@Nullable List<GuestPoliciesAssignmentGroupLabel> groupLabels) {
            this.groupLabels = groupLabels;
            return this;
        }
        public Builder groupLabels(GuestPoliciesAssignmentGroupLabel... groupLabels) {
            return groupLabels(List.of(groupLabels));
        }
        public Builder instanceNamePrefixes(@Nullable List<String> instanceNamePrefixes) {
            this.instanceNamePrefixes = instanceNamePrefixes;
            return this;
        }
        public Builder instanceNamePrefixes(String... instanceNamePrefixes) {
            return instanceNamePrefixes(List.of(instanceNamePrefixes));
        }
        public Builder instances(@Nullable List<String> instances) {
            this.instances = instances;
            return this;
        }
        public Builder instances(String... instances) {
            return instances(List.of(instances));
        }
        public Builder osTypes(@Nullable List<GuestPoliciesAssignmentOsType> osTypes) {
            this.osTypes = osTypes;
            return this;
        }
        public Builder osTypes(GuestPoliciesAssignmentOsType... osTypes) {
            return osTypes(List.of(osTypes));
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public GuestPoliciesAssignment build() {
            return new GuestPoliciesAssignment(groupLabels, instanceNamePrefixes, instances, osTypes, zones);
        }
    }
}
