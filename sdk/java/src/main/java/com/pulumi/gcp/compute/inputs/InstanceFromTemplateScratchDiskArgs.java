// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceFromTemplateScratchDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceFromTemplateScratchDiskArgs Empty = new InstanceFromTemplateScratchDiskArgs();

    /**
     * Name with which the attached disk is accessible under /dev/disk/by-id/
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return Name with which the attached disk is accessible under /dev/disk/by-id/
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * The disk interface used for attaching this disk. One of SCSI or NVME.
     * 
     */
    @Import(name="interface", required=true)
    private Output<String> interface_;

    /**
     * @return The disk interface used for attaching this disk. One of SCSI or NVME.
     * 
     */
    public Output<String> interface_() {
        return this.interface_;
    }

    /**
     * The size of the disk in gigabytes. One of 375 or 3000.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the disk in gigabytes. One of 375 or 3000.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    private InstanceFromTemplateScratchDiskArgs() {}

    private InstanceFromTemplateScratchDiskArgs(InstanceFromTemplateScratchDiskArgs $) {
        this.deviceName = $.deviceName;
        this.interface_ = $.interface_;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceFromTemplateScratchDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceFromTemplateScratchDiskArgs $;

        public Builder() {
            $ = new InstanceFromTemplateScratchDiskArgs();
        }

        public Builder(InstanceFromTemplateScratchDiskArgs defaults) {
            $ = new InstanceFromTemplateScratchDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceName Name with which the attached disk is accessible under /dev/disk/by-id/
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName Name with which the attached disk is accessible under /dev/disk/by-id/
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param interface_ The disk interface used for attaching this disk. One of SCSI or NVME.
         * 
         * @return builder
         * 
         */
        public Builder interface_(Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ The disk interface used for attaching this disk. One of SCSI or NVME.
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param size The size of the disk in gigabytes. One of 375 or 3000.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the disk in gigabytes. One of 375 or 3000.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public InstanceFromTemplateScratchDiskArgs build() {
            if ($.interface_ == null) {
                throw new MissingRequiredPropertyException("InstanceFromTemplateScratchDiskArgs", "interface_");
            }
            return $;
        }
    }

}
