// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileMysqlSsl;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionProfileMysql {
    /**
     * @return If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
     * 
     */
    private @Nullable String cloudSqlId;
    /**
     * @return Required. The IP or hostname of the source MySQL database.
     * 
     */
    private String host;
    /**
     * @return Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
     * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private String password;
    /**
     * @return (Output)
     * Output only. Indicates If this connection profile password is stored.
     * 
     */
    private @Nullable Boolean passwordSet;
    /**
     * @return Required. The network port of the source MySQL database.
     * 
     */
    private Integer port;
    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionProfileMysqlSsl ssl;
    /**
     * @return Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    private String username;

    private ConnectionProfileMysql() {}
    /**
     * @return If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
     * 
     */
    public Optional<String> cloudSqlId() {
        return Optional.ofNullable(this.cloudSqlId);
    }
    /**
     * @return Required. The IP or hostname of the source MySQL database.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
     * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return (Output)
     * Output only. Indicates If this connection profile password is stored.
     * 
     */
    public Optional<Boolean> passwordSet() {
        return Optional.ofNullable(this.passwordSet);
    }
    /**
     * @return Required. The network port of the source MySQL database.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionProfileMysqlSsl> ssl() {
        return Optional.ofNullable(this.ssl);
    }
    /**
     * @return Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionProfileMysql defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cloudSqlId;
        private String host;
        private String password;
        private @Nullable Boolean passwordSet;
        private Integer port;
        private @Nullable ConnectionProfileMysqlSsl ssl;
        private String username;
        public Builder() {}
        public Builder(ConnectionProfileMysql defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudSqlId = defaults.cloudSqlId;
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.passwordSet = defaults.passwordSet;
    	      this.port = defaults.port;
    	      this.ssl = defaults.ssl;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder cloudSqlId(@Nullable String cloudSqlId) {
            this.cloudSqlId = cloudSqlId;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder passwordSet(@Nullable Boolean passwordSet) {
            this.passwordSet = passwordSet;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder ssl(@Nullable ConnectionProfileMysqlSsl ssl) {
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public ConnectionProfileMysql build() {
            final var o = new ConnectionProfileMysql();
            o.cloudSqlId = cloudSqlId;
            o.host = host;
            o.password = password;
            o.passwordSet = passwordSet;
            o.port = port;
            o.ssl = ssl;
            o.username = username;
            return o;
        }
    }
}
