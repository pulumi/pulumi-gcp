// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedZoneForwardingConfigTargetNameServer {
    /**
     * @return Fully qualified domain name for the forwarding target.
     * 
     */
    private @Nullable String domainName;
    /**
     * @return Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are: `default`, `private`.
     * 
     */
    private @Nullable String forwardingPath;
    /**
     * @return IPv4 address of a target name server.
     * 
     */
    private @Nullable String ipv4Address;

    private ManagedZoneForwardingConfigTargetNameServer() {}
    /**
     * @return Fully qualified domain name for the forwarding target.
     * 
     */
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }
    /**
     * @return Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are: `default`, `private`.
     * 
     */
    public Optional<String> forwardingPath() {
        return Optional.ofNullable(this.forwardingPath);
    }
    /**
     * @return IPv4 address of a target name server.
     * 
     */
    public Optional<String> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedZoneForwardingConfigTargetNameServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String domainName;
        private @Nullable String forwardingPath;
        private @Nullable String ipv4Address;
        public Builder() {}
        public Builder(ManagedZoneForwardingConfigTargetNameServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.forwardingPath = defaults.forwardingPath;
    	      this.ipv4Address = defaults.ipv4Address;
        }

        @CustomType.Setter
        public Builder domainName(@Nullable String domainName) {

            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingPath(@Nullable String forwardingPath) {

            this.forwardingPath = forwardingPath;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(@Nullable String ipv4Address) {

            this.ipv4Address = ipv4Address;
            return this;
        }
        public ManagedZoneForwardingConfigTargetNameServer build() {
            final var _resultValue = new ManagedZoneForwardingConfigTargetNameServer();
            _resultValue.domainName = domainName;
            _resultValue.forwardingPath = forwardingPath;
            _resultValue.ipv4Address = ipv4Address;
            return _resultValue;
        }
    }
}
