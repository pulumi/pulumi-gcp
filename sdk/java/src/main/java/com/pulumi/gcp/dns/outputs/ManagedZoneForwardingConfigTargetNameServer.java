// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedZoneForwardingConfigTargetNameServer {
    /**
     * @return Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are `default` and `private`.
     * 
     */
    private final @Nullable String forwardingPath;
    /**
     * @return IPv4 address of a target name server.
     * 
     */
    private final String ipv4Address;

    @CustomType.Constructor
    private ManagedZoneForwardingConfigTargetNameServer(
        @CustomType.Parameter("forwardingPath") @Nullable String forwardingPath,
        @CustomType.Parameter("ipv4Address") String ipv4Address) {
        this.forwardingPath = forwardingPath;
        this.ipv4Address = ipv4Address;
    }

    /**
     * @return Forwarding path for this TargetNameServer. If unset or `default` Cloud DNS will make forwarding
     * decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
     * to the Internet. When set to `private`, Cloud DNS will always send queries through VPC for this target
     * Possible values are `default` and `private`.
     * 
     */
    public Optional<String> forwardingPath() {
        return Optional.ofNullable(this.forwardingPath);
    }
    /**
     * @return IPv4 address of a target name server.
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedZoneForwardingConfigTargetNameServer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String forwardingPath;
        private String ipv4Address;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedZoneForwardingConfigTargetNameServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.forwardingPath = defaults.forwardingPath;
    	      this.ipv4Address = defaults.ipv4Address;
        }

        public Builder forwardingPath(@Nullable String forwardingPath) {
            this.forwardingPath = forwardingPath;
            return this;
        }
        public Builder ipv4Address(String ipv4Address) {
            this.ipv4Address = Objects.requireNonNull(ipv4Address);
            return this;
        }        public ManagedZoneForwardingConfigTargetNameServer build() {
            return new ManagedZoneForwardingConfigTargetNameServer(forwardingPath, ipv4Address);
        }
    }
}
