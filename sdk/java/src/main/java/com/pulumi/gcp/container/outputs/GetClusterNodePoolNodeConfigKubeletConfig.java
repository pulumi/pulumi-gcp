// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNodeConfigKubeletConfigEvictionMinimumReclaim;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNodeConfigKubeletConfigEvictionSoft;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterNodePoolNodeConfigKubeletConfig {
    /**
     * @return Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods.
     * 
     */
    private List<String> allowedUnsafeSysctls;
    /**
     * @return Defines the maximum number of container log files that can be present for a container.
     * 
     */
    private Integer containerLogMaxFiles;
    /**
     * @return Defines the maximum size of the container log file before it is rotated.
     * 
     */
    private String containerLogMaxSize;
    /**
     * @return Enable CPU CFS quota enforcement for containers that specify CPU limits.
     * 
     */
    private Boolean cpuCfsQuota;
    /**
     * @return Set the CPU CFS quota period value &#39;cpu.cfs_period_us&#39;.
     * 
     */
    private String cpuCfsQuotaPeriod;
    /**
     * @return Control the CPU management policy on the node.
     * 
     */
    private String cpuManagerPolicy;
    /**
     * @return Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.
     * 
     */
    private Integer evictionMaxPodGracePeriodSeconds;
    /**
     * @return Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction.
     * 
     */
    private List<GetClusterNodePoolNodeConfigKubeletConfigEvictionMinimumReclaim> evictionMinimumReclaims;
    /**
     * @return Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period.
     * 
     */
    private List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod> evictionSoftGracePeriods;
    /**
     * @return Defines a map of signal names to quantities or percentage that defines soft eviction thresholds.
     * 
     */
    private List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoft> evictionSofts;
    /**
     * @return Defines the percent of disk usage after which image garbage collection is always run.
     * 
     */
    private Integer imageGcHighThresholdPercent;
    /**
     * @return Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.
     * 
     */
    private Integer imageGcLowThresholdPercent;
    /**
     * @return Defines the maximum age an image can be unused before it is garbage collected.
     * 
     */
    private String imageMaximumGcAge;
    /**
     * @return Defines the minimum age for an unused image before it is garbage collected.
     * 
     */
    private String imageMinimumGcAge;
    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    private String insecureKubeletReadonlyPortEnabled;
    /**
     * @return Set the maximum number of image pulls in parallel.
     * 
     */
    private Integer maxParallelImagePulls;
    /**
     * @return Controls the maximum number of processes allowed to run in a pod.
     * 
     */
    private Integer podPidsLimit;
    /**
     * @return Defines whether to enable single process OOM killer.
     * 
     */
    private Boolean singleProcessOomKill;

    private GetClusterNodePoolNodeConfigKubeletConfig() {}
    /**
     * @return Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods.
     * 
     */
    public List<String> allowedUnsafeSysctls() {
        return this.allowedUnsafeSysctls;
    }
    /**
     * @return Defines the maximum number of container log files that can be present for a container.
     * 
     */
    public Integer containerLogMaxFiles() {
        return this.containerLogMaxFiles;
    }
    /**
     * @return Defines the maximum size of the container log file before it is rotated.
     * 
     */
    public String containerLogMaxSize() {
        return this.containerLogMaxSize;
    }
    /**
     * @return Enable CPU CFS quota enforcement for containers that specify CPU limits.
     * 
     */
    public Boolean cpuCfsQuota() {
        return this.cpuCfsQuota;
    }
    /**
     * @return Set the CPU CFS quota period value &#39;cpu.cfs_period_us&#39;.
     * 
     */
    public String cpuCfsQuotaPeriod() {
        return this.cpuCfsQuotaPeriod;
    }
    /**
     * @return Control the CPU management policy on the node.
     * 
     */
    public String cpuManagerPolicy() {
        return this.cpuManagerPolicy;
    }
    /**
     * @return Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.
     * 
     */
    public Integer evictionMaxPodGracePeriodSeconds() {
        return this.evictionMaxPodGracePeriodSeconds;
    }
    /**
     * @return Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction.
     * 
     */
    public List<GetClusterNodePoolNodeConfigKubeletConfigEvictionMinimumReclaim> evictionMinimumReclaims() {
        return this.evictionMinimumReclaims;
    }
    /**
     * @return Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period.
     * 
     */
    public List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod> evictionSoftGracePeriods() {
        return this.evictionSoftGracePeriods;
    }
    /**
     * @return Defines a map of signal names to quantities or percentage that defines soft eviction thresholds.
     * 
     */
    public List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoft> evictionSofts() {
        return this.evictionSofts;
    }
    /**
     * @return Defines the percent of disk usage after which image garbage collection is always run.
     * 
     */
    public Integer imageGcHighThresholdPercent() {
        return this.imageGcHighThresholdPercent;
    }
    /**
     * @return Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.
     * 
     */
    public Integer imageGcLowThresholdPercent() {
        return this.imageGcLowThresholdPercent;
    }
    /**
     * @return Defines the maximum age an image can be unused before it is garbage collected.
     * 
     */
    public String imageMaximumGcAge() {
        return this.imageMaximumGcAge;
    }
    /**
     * @return Defines the minimum age for an unused image before it is garbage collected.
     * 
     */
    public String imageMinimumGcAge() {
        return this.imageMinimumGcAge;
    }
    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    public String insecureKubeletReadonlyPortEnabled() {
        return this.insecureKubeletReadonlyPortEnabled;
    }
    /**
     * @return Set the maximum number of image pulls in parallel.
     * 
     */
    public Integer maxParallelImagePulls() {
        return this.maxParallelImagePulls;
    }
    /**
     * @return Controls the maximum number of processes allowed to run in a pod.
     * 
     */
    public Integer podPidsLimit() {
        return this.podPidsLimit;
    }
    /**
     * @return Defines whether to enable single process OOM killer.
     * 
     */
    public Boolean singleProcessOomKill() {
        return this.singleProcessOomKill;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodePoolNodeConfigKubeletConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedUnsafeSysctls;
        private Integer containerLogMaxFiles;
        private String containerLogMaxSize;
        private Boolean cpuCfsQuota;
        private String cpuCfsQuotaPeriod;
        private String cpuManagerPolicy;
        private Integer evictionMaxPodGracePeriodSeconds;
        private List<GetClusterNodePoolNodeConfigKubeletConfigEvictionMinimumReclaim> evictionMinimumReclaims;
        private List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod> evictionSoftGracePeriods;
        private List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoft> evictionSofts;
        private Integer imageGcHighThresholdPercent;
        private Integer imageGcLowThresholdPercent;
        private String imageMaximumGcAge;
        private String imageMinimumGcAge;
        private String insecureKubeletReadonlyPortEnabled;
        private Integer maxParallelImagePulls;
        private Integer podPidsLimit;
        private Boolean singleProcessOomKill;
        public Builder() {}
        public Builder(GetClusterNodePoolNodeConfigKubeletConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedUnsafeSysctls = defaults.allowedUnsafeSysctls;
    	      this.containerLogMaxFiles = defaults.containerLogMaxFiles;
    	      this.containerLogMaxSize = defaults.containerLogMaxSize;
    	      this.cpuCfsQuota = defaults.cpuCfsQuota;
    	      this.cpuCfsQuotaPeriod = defaults.cpuCfsQuotaPeriod;
    	      this.cpuManagerPolicy = defaults.cpuManagerPolicy;
    	      this.evictionMaxPodGracePeriodSeconds = defaults.evictionMaxPodGracePeriodSeconds;
    	      this.evictionMinimumReclaims = defaults.evictionMinimumReclaims;
    	      this.evictionSoftGracePeriods = defaults.evictionSoftGracePeriods;
    	      this.evictionSofts = defaults.evictionSofts;
    	      this.imageGcHighThresholdPercent = defaults.imageGcHighThresholdPercent;
    	      this.imageGcLowThresholdPercent = defaults.imageGcLowThresholdPercent;
    	      this.imageMaximumGcAge = defaults.imageMaximumGcAge;
    	      this.imageMinimumGcAge = defaults.imageMinimumGcAge;
    	      this.insecureKubeletReadonlyPortEnabled = defaults.insecureKubeletReadonlyPortEnabled;
    	      this.maxParallelImagePulls = defaults.maxParallelImagePulls;
    	      this.podPidsLimit = defaults.podPidsLimit;
    	      this.singleProcessOomKill = defaults.singleProcessOomKill;
        }

        @CustomType.Setter
        public Builder allowedUnsafeSysctls(List<String> allowedUnsafeSysctls) {
            if (allowedUnsafeSysctls == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "allowedUnsafeSysctls");
            }
            this.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }
        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }
        @CustomType.Setter
        public Builder containerLogMaxFiles(Integer containerLogMaxFiles) {
            if (containerLogMaxFiles == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "containerLogMaxFiles");
            }
            this.containerLogMaxFiles = containerLogMaxFiles;
            return this;
        }
        @CustomType.Setter
        public Builder containerLogMaxSize(String containerLogMaxSize) {
            if (containerLogMaxSize == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "containerLogMaxSize");
            }
            this.containerLogMaxSize = containerLogMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuota(Boolean cpuCfsQuota) {
            if (cpuCfsQuota == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "cpuCfsQuota");
            }
            this.cpuCfsQuota = cpuCfsQuota;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuotaPeriod(String cpuCfsQuotaPeriod) {
            if (cpuCfsQuotaPeriod == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "cpuCfsQuotaPeriod");
            }
            this.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuManagerPolicy(String cpuManagerPolicy) {
            if (cpuManagerPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "cpuManagerPolicy");
            }
            this.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder evictionMaxPodGracePeriodSeconds(Integer evictionMaxPodGracePeriodSeconds) {
            if (evictionMaxPodGracePeriodSeconds == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "evictionMaxPodGracePeriodSeconds");
            }
            this.evictionMaxPodGracePeriodSeconds = evictionMaxPodGracePeriodSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder evictionMinimumReclaims(List<GetClusterNodePoolNodeConfigKubeletConfigEvictionMinimumReclaim> evictionMinimumReclaims) {
            if (evictionMinimumReclaims == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "evictionMinimumReclaims");
            }
            this.evictionMinimumReclaims = evictionMinimumReclaims;
            return this;
        }
        public Builder evictionMinimumReclaims(GetClusterNodePoolNodeConfigKubeletConfigEvictionMinimumReclaim... evictionMinimumReclaims) {
            return evictionMinimumReclaims(List.of(evictionMinimumReclaims));
        }
        @CustomType.Setter
        public Builder evictionSoftGracePeriods(List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod> evictionSoftGracePeriods) {
            if (evictionSoftGracePeriods == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "evictionSoftGracePeriods");
            }
            this.evictionSoftGracePeriods = evictionSoftGracePeriods;
            return this;
        }
        public Builder evictionSoftGracePeriods(GetClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod... evictionSoftGracePeriods) {
            return evictionSoftGracePeriods(List.of(evictionSoftGracePeriods));
        }
        @CustomType.Setter
        public Builder evictionSofts(List<GetClusterNodePoolNodeConfigKubeletConfigEvictionSoft> evictionSofts) {
            if (evictionSofts == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "evictionSofts");
            }
            this.evictionSofts = evictionSofts;
            return this;
        }
        public Builder evictionSofts(GetClusterNodePoolNodeConfigKubeletConfigEvictionSoft... evictionSofts) {
            return evictionSofts(List.of(evictionSofts));
        }
        @CustomType.Setter
        public Builder imageGcHighThresholdPercent(Integer imageGcHighThresholdPercent) {
            if (imageGcHighThresholdPercent == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "imageGcHighThresholdPercent");
            }
            this.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcLowThresholdPercent(Integer imageGcLowThresholdPercent) {
            if (imageGcLowThresholdPercent == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "imageGcLowThresholdPercent");
            }
            this.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder imageMaximumGcAge(String imageMaximumGcAge) {
            if (imageMaximumGcAge == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "imageMaximumGcAge");
            }
            this.imageMaximumGcAge = imageMaximumGcAge;
            return this;
        }
        @CustomType.Setter
        public Builder imageMinimumGcAge(String imageMinimumGcAge) {
            if (imageMinimumGcAge == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "imageMinimumGcAge");
            }
            this.imageMinimumGcAge = imageMinimumGcAge;
            return this;
        }
        @CustomType.Setter
        public Builder insecureKubeletReadonlyPortEnabled(String insecureKubeletReadonlyPortEnabled) {
            if (insecureKubeletReadonlyPortEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "insecureKubeletReadonlyPortEnabled");
            }
            this.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxParallelImagePulls(Integer maxParallelImagePulls) {
            if (maxParallelImagePulls == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "maxParallelImagePulls");
            }
            this.maxParallelImagePulls = maxParallelImagePulls;
            return this;
        }
        @CustomType.Setter
        public Builder podPidsLimit(Integer podPidsLimit) {
            if (podPidsLimit == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "podPidsLimit");
            }
            this.podPidsLimit = podPidsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder singleProcessOomKill(Boolean singleProcessOomKill) {
            if (singleProcessOomKill == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNodeConfigKubeletConfig", "singleProcessOomKill");
            }
            this.singleProcessOomKill = singleProcessOomKill;
            return this;
        }
        public GetClusterNodePoolNodeConfigKubeletConfig build() {
            final var _resultValue = new GetClusterNodePoolNodeConfigKubeletConfig();
            _resultValue.allowedUnsafeSysctls = allowedUnsafeSysctls;
            _resultValue.containerLogMaxFiles = containerLogMaxFiles;
            _resultValue.containerLogMaxSize = containerLogMaxSize;
            _resultValue.cpuCfsQuota = cpuCfsQuota;
            _resultValue.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            _resultValue.cpuManagerPolicy = cpuManagerPolicy;
            _resultValue.evictionMaxPodGracePeriodSeconds = evictionMaxPodGracePeriodSeconds;
            _resultValue.evictionMinimumReclaims = evictionMinimumReclaims;
            _resultValue.evictionSoftGracePeriods = evictionSoftGracePeriods;
            _resultValue.evictionSofts = evictionSofts;
            _resultValue.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            _resultValue.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            _resultValue.imageMaximumGcAge = imageMaximumGcAge;
            _resultValue.imageMinimumGcAge = imageMinimumGcAge;
            _resultValue.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            _resultValue.maxParallelImagePulls = maxParallelImagePulls;
            _resultValue.podPidsLimit = podPidsLimit;
            _resultValue.singleProcessOomKill = singleProcessOomKill;
            return _resultValue;
        }
    }
}
