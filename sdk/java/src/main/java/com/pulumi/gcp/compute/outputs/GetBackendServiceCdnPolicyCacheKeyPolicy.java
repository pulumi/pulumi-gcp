// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendServiceCdnPolicyCacheKeyPolicy {
    /**
     * @return If true requests to different hosts will be cached separately.
     * 
     */
    private Boolean includeHost;
    /**
     * @return Allows HTTP request headers (by name) to be used in the
     * cache key.
     * 
     */
    private List<String> includeHttpHeaders;
    /**
     * @return Names of cookies to include in cache keys.
     * 
     */
    private List<String> includeNamedCookies;
    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    private Boolean includeProtocol;
    /**
     * @return If true, include query string parameters in the cache key
     * according to query_string_whitelist and
     * query_string_blacklist. If neither is set, the entire query
     * string will be included.
     * 
     * If false, the query string will be excluded from the cache
     * key entirely.
     * 
     */
    private Boolean includeQueryString;
    /**
     * @return Names of query string parameters to exclude in cache keys.
     * 
     * All other parameters will be included. Either specify
     * query_string_whitelist or query_string_blacklist, not both.
     * &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as
     * delimiters.
     * 
     */
    private List<String> queryStringBlacklists;
    /**
     * @return Names of query string parameters to include in cache keys.
     * 
     * All other parameters will be excluded. Either specify
     * query_string_whitelist or query_string_blacklist, not both.
     * &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as
     * delimiters.
     * 
     */
    private List<String> queryStringWhitelists;

    private GetBackendServiceCdnPolicyCacheKeyPolicy() {}
    /**
     * @return If true requests to different hosts will be cached separately.
     * 
     */
    public Boolean includeHost() {
        return this.includeHost;
    }
    /**
     * @return Allows HTTP request headers (by name) to be used in the
     * cache key.
     * 
     */
    public List<String> includeHttpHeaders() {
        return this.includeHttpHeaders;
    }
    /**
     * @return Names of cookies to include in cache keys.
     * 
     */
    public List<String> includeNamedCookies() {
        return this.includeNamedCookies;
    }
    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    public Boolean includeProtocol() {
        return this.includeProtocol;
    }
    /**
     * @return If true, include query string parameters in the cache key
     * according to query_string_whitelist and
     * query_string_blacklist. If neither is set, the entire query
     * string will be included.
     * 
     * If false, the query string will be excluded from the cache
     * key entirely.
     * 
     */
    public Boolean includeQueryString() {
        return this.includeQueryString;
    }
    /**
     * @return Names of query string parameters to exclude in cache keys.
     * 
     * All other parameters will be included. Either specify
     * query_string_whitelist or query_string_blacklist, not both.
     * &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as
     * delimiters.
     * 
     */
    public List<String> queryStringBlacklists() {
        return this.queryStringBlacklists;
    }
    /**
     * @return Names of query string parameters to include in cache keys.
     * 
     * All other parameters will be excluded. Either specify
     * query_string_whitelist or query_string_blacklist, not both.
     * &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as
     * delimiters.
     * 
     */
    public List<String> queryStringWhitelists() {
        return this.queryStringWhitelists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceCdnPolicyCacheKeyPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean includeHost;
        private List<String> includeHttpHeaders;
        private List<String> includeNamedCookies;
        private Boolean includeProtocol;
        private Boolean includeQueryString;
        private List<String> queryStringBlacklists;
        private List<String> queryStringWhitelists;
        public Builder() {}
        public Builder(GetBackendServiceCdnPolicyCacheKeyPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeHost = defaults.includeHost;
    	      this.includeHttpHeaders = defaults.includeHttpHeaders;
    	      this.includeNamedCookies = defaults.includeNamedCookies;
    	      this.includeProtocol = defaults.includeProtocol;
    	      this.includeQueryString = defaults.includeQueryString;
    	      this.queryStringBlacklists = defaults.queryStringBlacklists;
    	      this.queryStringWhitelists = defaults.queryStringWhitelists;
        }

        @CustomType.Setter
        public Builder includeHost(Boolean includeHost) {
            if (includeHost == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "includeHost");
            }
            this.includeHost = includeHost;
            return this;
        }
        @CustomType.Setter
        public Builder includeHttpHeaders(List<String> includeHttpHeaders) {
            if (includeHttpHeaders == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "includeHttpHeaders");
            }
            this.includeHttpHeaders = includeHttpHeaders;
            return this;
        }
        public Builder includeHttpHeaders(String... includeHttpHeaders) {
            return includeHttpHeaders(List.of(includeHttpHeaders));
        }
        @CustomType.Setter
        public Builder includeNamedCookies(List<String> includeNamedCookies) {
            if (includeNamedCookies == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "includeNamedCookies");
            }
            this.includeNamedCookies = includeNamedCookies;
            return this;
        }
        public Builder includeNamedCookies(String... includeNamedCookies) {
            return includeNamedCookies(List.of(includeNamedCookies));
        }
        @CustomType.Setter
        public Builder includeProtocol(Boolean includeProtocol) {
            if (includeProtocol == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "includeProtocol");
            }
            this.includeProtocol = includeProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder includeQueryString(Boolean includeQueryString) {
            if (includeQueryString == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "includeQueryString");
            }
            this.includeQueryString = includeQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder queryStringBlacklists(List<String> queryStringBlacklists) {
            if (queryStringBlacklists == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "queryStringBlacklists");
            }
            this.queryStringBlacklists = queryStringBlacklists;
            return this;
        }
        public Builder queryStringBlacklists(String... queryStringBlacklists) {
            return queryStringBlacklists(List.of(queryStringBlacklists));
        }
        @CustomType.Setter
        public Builder queryStringWhitelists(List<String> queryStringWhitelists) {
            if (queryStringWhitelists == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceCdnPolicyCacheKeyPolicy", "queryStringWhitelists");
            }
            this.queryStringWhitelists = queryStringWhitelists;
            return this;
        }
        public Builder queryStringWhitelists(String... queryStringWhitelists) {
            return queryStringWhitelists(List.of(queryStringWhitelists));
        }
        public GetBackendServiceCdnPolicyCacheKeyPolicy build() {
            final var _resultValue = new GetBackendServiceCdnPolicyCacheKeyPolicy();
            _resultValue.includeHost = includeHost;
            _resultValue.includeHttpHeaders = includeHttpHeaders;
            _resultValue.includeNamedCookies = includeNamedCookies;
            _resultValue.includeProtocol = includeProtocol;
            _resultValue.includeQueryString = includeQueryString;
            _resultValue.queryStringBlacklists = queryStringBlacklists;
            _resultValue.queryStringWhitelists = queryStringWhitelists;
            return _resultValue;
        }
    }
}
