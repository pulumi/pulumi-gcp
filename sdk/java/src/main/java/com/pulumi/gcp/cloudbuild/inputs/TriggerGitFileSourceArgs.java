// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerGitFileSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerGitFileSourceArgs Empty = new TriggerGitFileSourceArgs();

    /**
     * The full resource name of the github enterprise config.
     * Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
     * 
     */
    @Import(name="githubEnterpriseConfig")
    private @Nullable Output<String> githubEnterpriseConfig;

    /**
     * @return The full resource name of the github enterprise config.
     * Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
     * 
     */
    public Optional<Output<String>> githubEnterpriseConfig() {
        return Optional.ofNullable(this.githubEnterpriseConfig);
    }

    /**
     * The path of the file, with the repo root as the root of the path.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path of the file, with the repo root as the root of the path.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
     * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
     * Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
     * 
     */
    @Import(name="repoType", required=true)
    private Output<String> repoType;

    /**
     * @return The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
     * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
     * Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
     * 
     */
    public Output<String> repoType() {
        return this.repoType;
    }

    /**
     * The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
     * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
     * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
     * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
     * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    /**
     * The URI of the repo (optional). If unspecified, the repo from which the trigger
     * invocation originated is assumed to be the repo from which to read the specified path.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The URI of the repo (optional). If unspecified, the repo from which the trigger
     * invocation originated is assumed to be the repo from which to read the specified path.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private TriggerGitFileSourceArgs() {}

    private TriggerGitFileSourceArgs(TriggerGitFileSourceArgs $) {
        this.githubEnterpriseConfig = $.githubEnterpriseConfig;
        this.path = $.path;
        this.repoType = $.repoType;
        this.revision = $.revision;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerGitFileSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerGitFileSourceArgs $;

        public Builder() {
            $ = new TriggerGitFileSourceArgs();
        }

        public Builder(TriggerGitFileSourceArgs defaults) {
            $ = new TriggerGitFileSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param githubEnterpriseConfig The full resource name of the github enterprise config.
         * Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
         * 
         * @return builder
         * 
         */
        public Builder githubEnterpriseConfig(@Nullable Output<String> githubEnterpriseConfig) {
            $.githubEnterpriseConfig = githubEnterpriseConfig;
            return this;
        }

        /**
         * @param githubEnterpriseConfig The full resource name of the github enterprise config.
         * Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
         * 
         * @return builder
         * 
         */
        public Builder githubEnterpriseConfig(String githubEnterpriseConfig) {
            return githubEnterpriseConfig(Output.of(githubEnterpriseConfig));
        }

        /**
         * @param path The path of the file, with the repo root as the root of the path.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the file, with the repo root as the root of the path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param repoType The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
         * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
         * Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
         * 
         * @return builder
         * 
         */
        public Builder repoType(Output<String> repoType) {
            $.repoType = repoType;
            return this;
        }

        /**
         * @param repoType The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
         * Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
         * Possible values are `UNKNOWN`, `CLOUD_SOURCE_REPOSITORIES`, `GITHUB`, and `BITBUCKET_SERVER`.
         * 
         * @return builder
         * 
         */
        public Builder repoType(String repoType) {
            return repoType(Output.of(repoType));
        }

        /**
         * @param revision The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
         * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
         * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
         * filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
         * If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param uri The URI of the repo (optional). If unspecified, the repo from which the trigger
         * invocation originated is assumed to be the repo from which to read the specified path.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI of the repo (optional). If unspecified, the repo from which the trigger
         * invocation originated is assumed to be the repo from which to read the specified path.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public TriggerGitFileSourceArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.repoType = Objects.requireNonNull($.repoType, "expected parameter 'repoType' to be non-null");
            return $;
        }
    }

}
