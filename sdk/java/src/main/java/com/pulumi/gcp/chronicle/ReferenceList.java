// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.chronicle.ReferenceListArgs;
import com.pulumi.gcp.chronicle.inputs.ReferenceListState;
import com.pulumi.gcp.chronicle.outputs.ReferenceListEntry;
import com.pulumi.gcp.chronicle.outputs.ReferenceListScopeInfo;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Chronicle Referencelist Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.ReferenceList;
 * import com.pulumi.gcp.chronicle.ReferenceListArgs;
 * import com.pulumi.gcp.chronicle.inputs.ReferenceListEntryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ReferenceList("example", ReferenceListArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .referenceListId("reference_list_id")
 *             .description("referencelist-description")
 *             .entries(ReferenceListEntryArgs.builder()
 *                 .value("referencelist-entry-value")
 *                 .build())
 *             .syntaxType("REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ReferenceList can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/referenceLists/{{reference_list_id}}`
 * 
 * * `{{project}}/{{location}}/{{instance}}/{{reference_list_id}}`
 * 
 * * `{{location}}/{{instance}}/{{reference_list_id}}`
 * 
 * When using the `pulumi import` command, ReferenceList can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/referenceList:ReferenceList default projects/{{project}}/locations/{{location}}/instances/{{instance}}/referenceLists/{{reference_list_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/referenceList:ReferenceList default {{project}}/{{location}}/{{instance}}/{{reference_list_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/referenceList:ReferenceList default {{location}}/{{instance}}/{{reference_list_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:chronicle/referenceList:ReferenceList")
public class ReferenceList extends com.pulumi.resources.CustomResource {
    /**
     * Required. A user-provided description of the reference list.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Required. A user-provided description of the reference list.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Output only. The unique display name of the reference list.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Output only. The unique display name of the reference list.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Required. The entries of the reference list.
     * When listed, they are returned in the order that was specified at creation
     * or update. The combined size of the values of the reference list may not
     * exceed 6MB.
     * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
     * Structure is documented below.
     * 
     */
    @Export(name="entries", refs={List.class,ReferenceListEntry.class}, tree="[0,1]")
    private Output<List<ReferenceListEntry>> entries;

    /**
     * @return Required. The entries of the reference list.
     * When listed, they are returned in the order that was specified at creation
     * or update. The combined size of the values of the reference list may not
     * exceed 6MB.
     * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
     * Structure is documented below.
     * 
     */
    public Output<List<ReferenceListEntry>> entries() {
        return this.entries;
    }
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Output only. The resource name of the reference list.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Output only. The resource name of the reference list.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * Required. The ID to use for the reference list. This is also the display name for
     * the reference list. It must satisfy the following requirements:
     * - Starts with letter.
     * - Contains only letters, numbers and underscore.
     * - Has length &lt; 256.
     * - Must be unique.
     * 
     */
    @Export(name="referenceListId", refs={String.class}, tree="[0]")
    private Output<String> referenceListId;

    /**
     * @return Required. The ID to use for the reference list. This is also the display name for
     * the reference list. It must satisfy the following requirements:
     * - Starts with letter.
     * - Contains only letters, numbers and underscore.
     * - Has length &lt; 256.
     * - Must be unique.
     * 
     */
    public Output<String> referenceListId() {
        return this.referenceListId;
    }
    /**
     * Output only. The timestamp when the reference list was last updated.
     * 
     */
    @Export(name="revisionCreateTime", refs={String.class}, tree="[0]")
    private Output<String> revisionCreateTime;

    /**
     * @return Output only. The timestamp when the reference list was last updated.
     * 
     */
    public Output<String> revisionCreateTime() {
        return this.revisionCreateTime;
    }
    /**
     * Output only. The count of self-authored rules using the reference list.
     * 
     */
    @Export(name="ruleAssociationsCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> ruleAssociationsCount;

    /**
     * @return Output only. The count of self-authored rules using the reference list.
     * 
     */
    public Output<Integer> ruleAssociationsCount() {
        return this.ruleAssociationsCount;
    }
    /**
     * Output only. The resource names for the associated self-authored Rules that use this
     * reference list.
     * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
     * 
     */
    @Export(name="rules", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> rules;

    /**
     * @return Output only. The resource names for the associated self-authored Rules that use this
     * reference list.
     * This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
     * 
     */
    public Output<List<String>> rules() {
        return this.rules;
    }
    /**
     * ScopeInfo specifies the scope info of the reference list.
     * Structure is documented below.
     * 
     */
    @Export(name="scopeInfos", refs={List.class,ReferenceListScopeInfo.class}, tree="[0,1]")
    private Output<List<ReferenceListScopeInfo>> scopeInfos;

    /**
     * @return ScopeInfo specifies the scope info of the reference list.
     * Structure is documented below.
     * 
     */
    public Output<List<ReferenceListScopeInfo>> scopeInfos() {
        return this.scopeInfos;
    }
    /**
     * Possible values:
     * REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
     * REFERENCE_LIST_SYNTAX_TYPE_REGEX
     * REFERENCE_LIST_SYNTAX_TYPE_CIDR
     * 
     */
    @Export(name="syntaxType", refs={String.class}, tree="[0]")
    private Output<String> syntaxType;

    /**
     * @return Possible values:
     * REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING
     * REFERENCE_LIST_SYNTAX_TYPE_REGEX
     * REFERENCE_LIST_SYNTAX_TYPE_CIDR
     * 
     */
    public Output<String> syntaxType() {
        return this.syntaxType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReferenceList(java.lang.String name) {
        this(name, ReferenceListArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReferenceList(java.lang.String name, ReferenceListArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReferenceList(java.lang.String name, ReferenceListArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/referenceList:ReferenceList", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ReferenceList(java.lang.String name, Output<java.lang.String> id, @Nullable ReferenceListState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/referenceList:ReferenceList", name, state, makeResourceOptions(options, id), false);
    }

    private static ReferenceListArgs makeArgs(ReferenceListArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ReferenceListArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReferenceList get(java.lang.String name, Output<java.lang.String> id, @Nullable ReferenceListState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReferenceList(name, id, state, options);
    }
}
