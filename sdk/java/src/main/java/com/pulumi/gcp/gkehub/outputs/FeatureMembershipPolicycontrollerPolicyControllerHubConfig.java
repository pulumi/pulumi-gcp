// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.gkehub.outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring;
import com.pulumi.gcp.gkehub.outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FeatureMembershipPolicycontrollerPolicyControllerHubConfig {
    /**
     * @return Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    private @Nullable Integer auditIntervalSeconds;
    /**
     * @return The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
     * 
     */
    private @Nullable Integer constraintViolationLimit;
    /**
     * @return The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    private @Nullable List<String> exemptableNamespaces;
    /**
     * @return Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
     * 
     */
    private @Nullable String installSpec;
    /**
     * @return Logs all denies and dry run failures.
     * 
     */
    private @Nullable Boolean logDeniesEnabled;
    /**
     * @return Specifies the backends Policy Controller should export metrics to. Structure is documented below.
     * 
     */
    private @Nullable FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring monitoring;
    /**
     * @return Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
     * 
     */
    private @Nullable Boolean mutationEnabled;
    /**
     * @return Specifies the desired policy content on the cluster. Structure is documented below.
     * 
     */
    private @Nullable FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent policyContent;
    /**
     * @return Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    private @Nullable Boolean referentialRulesEnabled;

    private FeatureMembershipPolicycontrollerPolicyControllerHubConfig() {}
    /**
     * @return Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    public Optional<Integer> auditIntervalSeconds() {
        return Optional.ofNullable(this.auditIntervalSeconds);
    }
    /**
     * @return The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
     * 
     */
    public Optional<Integer> constraintViolationLimit() {
        return Optional.ofNullable(this.constraintViolationLimit);
    }
    /**
     * @return The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    public List<String> exemptableNamespaces() {
        return this.exemptableNamespaces == null ? List.of() : this.exemptableNamespaces;
    }
    /**
     * @return Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
     * 
     */
    public Optional<String> installSpec() {
        return Optional.ofNullable(this.installSpec);
    }
    /**
     * @return Logs all denies and dry run failures.
     * 
     */
    public Optional<Boolean> logDeniesEnabled() {
        return Optional.ofNullable(this.logDeniesEnabled);
    }
    /**
     * @return Specifies the backends Policy Controller should export metrics to. Structure is documented below.
     * 
     */
    public Optional<FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }
    /**
     * @return Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
     * 
     */
    public Optional<Boolean> mutationEnabled() {
        return Optional.ofNullable(this.mutationEnabled);
    }
    /**
     * @return Specifies the desired policy content on the cluster. Structure is documented below.
     * 
     */
    public Optional<FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent> policyContent() {
        return Optional.ofNullable(this.policyContent);
    }
    /**
     * @return Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    public Optional<Boolean> referentialRulesEnabled() {
        return Optional.ofNullable(this.referentialRulesEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureMembershipPolicycontrollerPolicyControllerHubConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer auditIntervalSeconds;
        private @Nullable Integer constraintViolationLimit;
        private @Nullable List<String> exemptableNamespaces;
        private @Nullable String installSpec;
        private @Nullable Boolean logDeniesEnabled;
        private @Nullable FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring monitoring;
        private @Nullable Boolean mutationEnabled;
        private @Nullable FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent policyContent;
        private @Nullable Boolean referentialRulesEnabled;
        public Builder() {}
        public Builder(FeatureMembershipPolicycontrollerPolicyControllerHubConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditIntervalSeconds = defaults.auditIntervalSeconds;
    	      this.constraintViolationLimit = defaults.constraintViolationLimit;
    	      this.exemptableNamespaces = defaults.exemptableNamespaces;
    	      this.installSpec = defaults.installSpec;
    	      this.logDeniesEnabled = defaults.logDeniesEnabled;
    	      this.monitoring = defaults.monitoring;
    	      this.mutationEnabled = defaults.mutationEnabled;
    	      this.policyContent = defaults.policyContent;
    	      this.referentialRulesEnabled = defaults.referentialRulesEnabled;
        }

        @CustomType.Setter
        public Builder auditIntervalSeconds(@Nullable Integer auditIntervalSeconds) {

            this.auditIntervalSeconds = auditIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder constraintViolationLimit(@Nullable Integer constraintViolationLimit) {

            this.constraintViolationLimit = constraintViolationLimit;
            return this;
        }
        @CustomType.Setter
        public Builder exemptableNamespaces(@Nullable List<String> exemptableNamespaces) {

            this.exemptableNamespaces = exemptableNamespaces;
            return this;
        }
        public Builder exemptableNamespaces(String... exemptableNamespaces) {
            return exemptableNamespaces(List.of(exemptableNamespaces));
        }
        @CustomType.Setter
        public Builder installSpec(@Nullable String installSpec) {

            this.installSpec = installSpec;
            return this;
        }
        @CustomType.Setter
        public Builder logDeniesEnabled(@Nullable Boolean logDeniesEnabled) {

            this.logDeniesEnabled = logDeniesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder monitoring(@Nullable FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring monitoring) {

            this.monitoring = monitoring;
            return this;
        }
        @CustomType.Setter
        public Builder mutationEnabled(@Nullable Boolean mutationEnabled) {

            this.mutationEnabled = mutationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder policyContent(@Nullable FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent policyContent) {

            this.policyContent = policyContent;
            return this;
        }
        @CustomType.Setter
        public Builder referentialRulesEnabled(@Nullable Boolean referentialRulesEnabled) {

            this.referentialRulesEnabled = referentialRulesEnabled;
            return this;
        }
        public FeatureMembershipPolicycontrollerPolicyControllerHubConfig build() {
            final var _resultValue = new FeatureMembershipPolicycontrollerPolicyControllerHubConfig();
            _resultValue.auditIntervalSeconds = auditIntervalSeconds;
            _resultValue.constraintViolationLimit = constraintViolationLimit;
            _resultValue.exemptableNamespaces = exemptableNamespaces;
            _resultValue.installSpec = installSpec;
            _resultValue.logDeniesEnabled = logDeniesEnabled;
            _resultValue.monitoring = monitoring;
            _resultValue.mutationEnabled = mutationEnabled;
            _resultValue.policyContent = policyContent;
            _resultValue.referentialRulesEnabled = referentialRulesEnabled;
            return _resultValue;
        }
    }
}
