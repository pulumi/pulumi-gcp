// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AspectTypeState extends com.pulumi.resources.ResourceArgs {

    public static final AspectTypeState Empty = new AspectTypeState();

    /**
     * The aspect type id of the aspect type.
     * 
     */
    @Import(name="aspectTypeId")
    private @Nullable Output<String> aspectTypeId;

    /**
     * @return The aspect type id of the aspect type.
     * 
     */
    public Optional<Output<String>> aspectTypeId() {
        return Optional.ofNullable(this.aspectTypeId);
    }

    /**
     * The time when the AspectType was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The time when the AspectType was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of the AspectType.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the AspectType.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User friendly display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User friendly display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * User-defined labels for the AspectType.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels for the AspectType.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location where aspect type will be created in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where aspect type will be created in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * MetadataTemplate of the Aspect.
     * 
     */
    @Import(name="metadataTemplate")
    private @Nullable Output<String> metadataTemplate;

    /**
     * @return MetadataTemplate of the Aspect.
     * 
     */
    public Optional<Output<String>> metadataTemplate() {
        return Optional.ofNullable(this.metadataTemplate);
    }

    /**
     * The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Denotes the transfer status of the Aspect Type. It is unspecified
     * for Aspect Type created from Dataplex API.
     * 
     */
    @Import(name="transferStatus")
    private @Nullable Output<String> transferStatus;

    /**
     * @return Denotes the transfer status of the Aspect Type. It is unspecified
     * for Aspect Type created from Dataplex API.
     * 
     */
    public Optional<Output<String>> transferStatus() {
        return Optional.ofNullable(this.transferStatus);
    }

    /**
     * System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The time when the AspectType was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The time when the AspectType was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AspectTypeState() {}

    private AspectTypeState(AspectTypeState $) {
        this.aspectTypeId = $.aspectTypeId;
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.effectiveLabels = $.effectiveLabels;
        this.labels = $.labels;
        this.location = $.location;
        this.metadataTemplate = $.metadataTemplate;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.transferStatus = $.transferStatus;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AspectTypeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AspectTypeState $;

        public Builder() {
            $ = new AspectTypeState();
        }

        public Builder(AspectTypeState defaults) {
            $ = new AspectTypeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aspectTypeId The aspect type id of the aspect type.
         * 
         * @return builder
         * 
         */
        public Builder aspectTypeId(@Nullable Output<String> aspectTypeId) {
            $.aspectTypeId = aspectTypeId;
            return this;
        }

        /**
         * @param aspectTypeId The aspect type id of the aspect type.
         * 
         * @return builder
         * 
         */
        public Builder aspectTypeId(String aspectTypeId) {
            return aspectTypeId(Output.of(aspectTypeId));
        }

        /**
         * @param createTime The time when the AspectType was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The time when the AspectType was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of the AspectType.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the AspectType.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param labels User-defined labels for the AspectType.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels for the AspectType.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location where aspect type will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where aspect type will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param metadataTemplate MetadataTemplate of the Aspect.
         * 
         * @return builder
         * 
         */
        public Builder metadataTemplate(@Nullable Output<String> metadataTemplate) {
            $.metadataTemplate = metadataTemplate;
            return this;
        }

        /**
         * @param metadataTemplate MetadataTemplate of the Aspect.
         * 
         * @return builder
         * 
         */
        public Builder metadataTemplate(String metadataTemplate) {
            return metadataTemplate(Output.of(metadataTemplate));
        }

        /**
         * @param name The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param transferStatus Denotes the transfer status of the Aspect Type. It is unspecified
         * for Aspect Type created from Dataplex API.
         * 
         * @return builder
         * 
         */
        public Builder transferStatus(@Nullable Output<String> transferStatus) {
            $.transferStatus = transferStatus;
            return this;
        }

        /**
         * @param transferStatus Denotes the transfer status of the Aspect Type. It is unspecified
         * for Aspect Type created from Dataplex API.
         * 
         * @return builder
         * 
         */
        public Builder transferStatus(String transferStatus) {
            return transferStatus(Output.of(transferStatus));
        }

        /**
         * @param uid System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime The time when the AspectType was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The time when the AspectType was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AspectTypeState build() {
            return $;
        }
    }

}
