// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.chronicle.RuleArgs;
import com.pulumi.gcp.chronicle.inputs.RuleState;
import com.pulumi.gcp.chronicle.outputs.RuleCompilationDiagnostic;
import com.pulumi.gcp.chronicle.outputs.RuleSeverity;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ### Chronicle Rule Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.Rule;
 * import com.pulumi.gcp.chronicle.RuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Rule("example", RuleArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .deletionPolicy("DEFAULT")
 *             .text("""
 * rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Chronicle Rule With Force Deletion
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.Rule;
 * import com.pulumi.gcp.chronicle.RuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Rule("example", RuleArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .deletionPolicy("FORCE")
 *             .text("""
 * rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Chronicle Rule With Data Access Scope
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.chronicle.DataAccessScope;
 * import com.pulumi.gcp.chronicle.DataAccessScopeArgs;
 * import com.pulumi.gcp.chronicle.inputs.DataAccessScopeAllowedDataAccessLabelArgs;
 * import com.pulumi.gcp.chronicle.Rule;
 * import com.pulumi.gcp.chronicle.RuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dataAccessScopeTest = new DataAccessScope("dataAccessScopeTest", DataAccessScopeArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .dataAccessScopeId("scope-name")
 *             .description("scope-description")
 *             .allowedDataAccessLabels(DataAccessScopeAllowedDataAccessLabelArgs.builder()
 *                 .logType("GCP_CLOUDAUDIT")
 *                 .build())
 *             .build());
 * 
 *         var example = new Rule("example", RuleArgs.builder()
 *             .location("us")
 *             .instance("00000000-0000-0000-0000-000000000000")
 *             .scope(googleChronicleDataAccessScope.dataAccessScopeTest().name())
 *             .text("""
 * rule test_rule { meta: events:  $userid = $e.principal.user.userid  match: $userid over 10m condition: $e }
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Rule can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule_id}}`
 * 
 * * `{{project}}/{{location}}/{{instance}}/{{rule_id}}`
 * 
 * * `{{location}}/{{instance}}/{{rule_id}}`
 * 
 * When using the `pulumi import` command, Rule can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/rule:Rule default projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/rule:Rule default {{project}}/{{location}}/{{instance}}/{{rule_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/rule:Rule default {{location}}/{{instance}}/{{rule_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:chronicle/rule:Rule")
public class Rule extends com.pulumi.resources.CustomResource {
    /**
     * Output only. The run frequencies that are allowed for the rule.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Export(name="allowedRunFrequencies", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedRunFrequencies;

    /**
     * @return Output only. The run frequencies that are allowed for the rule.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Output<List<String>> allowedRunFrequencies() {
        return this.allowedRunFrequencies;
    }
    /**
     * Output only. The author of the rule. Extracted from the meta section of text.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Export(name="author", refs={String.class}, tree="[0]")
    private Output<String> author;

    /**
     * @return Output only. The author of the rule. Extracted from the meta section of text.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    /**
     * Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
     * such as compilation errors and compilation warnings.
     * Populated in FULL view.
     * Structure is documented below.
     * 
     */
    @Export(name="compilationDiagnostics", refs={List.class,RuleCompilationDiagnostic.class}, tree="[0,1]")
    private Output<List<RuleCompilationDiagnostic>> compilationDiagnostics;

    /**
     * @return Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
     * such as compilation errors and compilation warnings.
     * Populated in FULL view.
     * Structure is documented below.
     * 
     */
    public Output<List<RuleCompilationDiagnostic>> compilationDiagnostics() {
        return this.compilationDiagnostics;
    }
    /**
     * Output only. The current compilation state of the rule.
     * Populated in FULL view.
     * Possible values:
     * COMPILATION_STATE_UNSPECIFIED
     * SUCCEEDED
     * FAILED
     * 
     */
    @Export(name="compilationState", refs={String.class}, tree="[0]")
    private Output<String> compilationState;

    /**
     * @return Output only. The current compilation state of the rule.
     * Populated in FULL view.
     * Possible values:
     * COMPILATION_STATE_UNSPECIFIED
     * SUCCEEDED
     * FAILED
     * 
     */
    public Output<String> compilationState() {
        return this.compilationState;
    }
    /**
     * Output only. The timestamp of when the rule was created.
     * Populated in FULL view.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The timestamp of when the rule was created.
     * Populated in FULL view.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Output only. Resource names of the data tables used in this rule.
     * 
     */
    @Export(name="dataTables", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> dataTables;

    /**
     * @return Output only. Resource names of the data tables used in this rule.
     * 
     */
    public Output<List<String>> dataTables() {
        return this.dataTables;
    }
    /**
     * Policy to determine if the rule should be deleted forcefully.
     * If deletion_policy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
     * will also be deleted. If deletion_policy = &#34;DEFAULT&#34;, the call will only succeed if the
     * rule has no associated retrohunts, including completed retrohunts, and no
     * associated detections. Regardless of this field&#39;s value, the rule
     * deployment associated with this rule will also be deleted.
     * Possible values: DEFAULT, FORCE
     * 
     */
    @Export(name="deletionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deletionPolicy;

    /**
     * @return Policy to determine if the rule should be deleted forcefully.
     * If deletion_policy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
     * will also be deleted. If deletion_policy = &#34;DEFAULT&#34;, the call will only succeed if the
     * rule has no associated retrohunts, including completed retrohunts, and no
     * associated detections. Regardless of this field&#39;s value, the rule
     * deployment associated with this rule will also be deleted.
     * Possible values: DEFAULT, FORCE
     * 
     */
    public Output<Optional<String>> deletionPolicy() {
        return Codegen.optional(this.deletionPolicy);
    }
    /**
     * The display name of the severity level. Extracted from the meta section of
     * the rule text.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the severity level. Extracted from the meta section of
     * the rule text.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The etag for this rule.
     * If this is provided on update, the request will succeed if and only if it
     * matches the server-computed value, and will fail with an ABORTED error
     * otherwise.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return The etag for this rule.
     * If this is provided on update, the request will succeed if and only if it
     * matches the server-computed value, and will fail with an ABORTED error
     * otherwise.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     * ***
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     * ***
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Output only. Additional metadata specified in the meta section of text.
     * Populated in FULL view.
     * 
     */
    @Export(name="metadata", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> metadata;

    /**
     * @return Output only. Additional metadata specified in the meta section of text.
     * Populated in FULL view.
     * 
     */
    public Output<Map<String,String>> metadata() {
        return this.metadata;
    }
    /**
     * Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Output only. Indicate the rule can run in near real time live rule.
     * If this is true, the rule uses the near real time live rule when the run
     * frequency is set to LIVE.
     * 
     */
    @Export(name="nearRealTimeLiveRuleEligible", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> nearRealTimeLiveRuleEligible;

    /**
     * @return Output only. Indicate the rule can run in near real time live rule.
     * If this is true, the rule uses the near real time live rule when the run
     * frequency is set to LIVE.
     * 
     */
    public Output<Boolean> nearRealTimeLiveRuleEligible() {
        return this.nearRealTimeLiveRuleEligible;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Output only. Resource names of the reference lists used in this rule.
     * Populated in FULL view.
     * 
     */
    @Export(name="referenceLists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> referenceLists;

    /**
     * @return Output only. Resource names of the reference lists used in this rule.
     * Populated in FULL view.
     * 
     */
    public Output<List<String>> referenceLists() {
        return this.referenceLists;
    }
    /**
     * Output only. The timestamp of when the rule revision was created.
     * Populated in FULL, REVISION_METADATA_ONLY views.
     * 
     */
    @Export(name="revisionCreateTime", refs={String.class}, tree="[0]")
    private Output<String> revisionCreateTime;

    /**
     * @return Output only. The timestamp of when the rule revision was created.
     * Populated in FULL, REVISION_METADATA_ONLY views.
     * 
     */
    public Output<String> revisionCreateTime() {
        return this.revisionCreateTime;
    }
    /**
     * Output only. The revision ID of the rule.
     * A new revision is created whenever the rule text is changed in any way.
     * Format: v_{10 digits}_{9 digits}
     * Populated in REVISION_METADATA_ONLY view and FULL view.
     * 
     */
    @Export(name="revisionId", refs={String.class}, tree="[0]")
    private Output<String> revisionId;

    /**
     * @return Output only. The revision ID of the rule.
     * A new revision is created whenever the rule text is changed in any way.
     * Format: v_{10 digits}_{9 digits}
     * Populated in REVISION_METADATA_ONLY view and FULL view.
     * 
     */
    public Output<String> revisionId() {
        return this.revisionId;
    }
    /**
     * Rule Id is the ID of the Rule.
     * 
     */
    @Export(name="ruleId", refs={String.class}, tree="[0]")
    private Output<String> ruleId;

    /**
     * @return Rule Id is the ID of the Rule.
     * 
     */
    public Output<String> ruleId() {
        return this.ruleId;
    }
    /**
     * Resource name of the DataAccessScope bound to this rule.
     * Populated in BASIC view and FULL view.
     * If reference lists are used in the rule, validations will be performed
     * against this scope to ensure that the reference lists are compatible with
     * both the user&#39;s and the rule&#39;s scopes.
     * The scope should be in the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return Resource name of the DataAccessScope bound to this rule.
     * Populated in BASIC view and FULL view.
     * If reference lists are used in the rule, validations will be performed
     * against this scope to ensure that the reference lists are compatible with
     * both the user&#39;s and the rule&#39;s scopes.
     * The scope should be in the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * (Output)
     * Output only. The severity of a rule&#39;s compilation diagnostic.
     * Possible values:
     * SEVERITY_UNSPECIFIED
     * WARNING
     * ERROR
     * 
     */
    @Export(name="severities", refs={List.class,RuleSeverity.class}, tree="[0,1]")
    private Output<List<RuleSeverity>> severities;

    /**
     * @return (Output)
     * Output only. The severity of a rule&#39;s compilation diagnostic.
     * Possible values:
     * SEVERITY_UNSPECIFIED
     * WARNING
     * ERROR
     * 
     */
    public Output<List<RuleSeverity>> severities() {
        return this.severities;
    }
    /**
     * The YARA-L content of the rule.
     * Populated in FULL view.
     * 
     */
    @Export(name="text", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> text;

    /**
     * @return The YARA-L content of the rule.
     * Populated in FULL view.
     * 
     */
    public Output<Optional<String>> text() {
        return Codegen.optional(this.text);
    }
    /**
     * Possible values:
     * RULE_TYPE_UNSPECIFIED
     * SINGLE_EVENT
     * MULTI_EVENT
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Possible values:
     * RULE_TYPE_UNSPECIFIED
     * SINGLE_EVENT
     * MULTI_EVENT
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Rule(java.lang.String name) {
        this(name, RuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Rule(java.lang.String name, RuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Rule(java.lang.String name, RuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/rule:Rule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Rule(java.lang.String name, Output<java.lang.String> id, @Nullable RuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/rule:Rule", name, state, makeResourceOptions(options, id), false);
    }

    private static RuleArgs makeArgs(RuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Rule get(java.lang.String name, Output<java.lang.String> id, @Nullable RuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Rule(name, id, state, options);
    }
}
