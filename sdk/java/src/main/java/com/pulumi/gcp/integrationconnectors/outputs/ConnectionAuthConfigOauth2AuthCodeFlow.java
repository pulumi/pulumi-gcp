// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionAuthConfigOauth2AuthCodeFlowClientSecret;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionAuthConfigOauth2AuthCodeFlow {
    /**
     * @return Auth URL for Authorization Code Flow.
     * 
     */
    private @Nullable String authUri;
    /**
     * @return Secret version of Password for Authentication.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return Secret version reference containing the client secret.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionAuthConfigOauth2AuthCodeFlowClientSecret clientSecret;
    /**
     * @return Whether to enable PKCE when the user performs the auth code flow.
     * 
     */
    private @Nullable Boolean enablePkce;
    /**
     * @return Scopes the connection will request when the user performs the auth code flow.
     * 
     */
    private @Nullable List<String> scopes;

    private ConnectionAuthConfigOauth2AuthCodeFlow() {}
    /**
     * @return Auth URL for Authorization Code Flow.
     * 
     */
    public Optional<String> authUri() {
        return Optional.ofNullable(this.authUri);
    }
    /**
     * @return Secret version of Password for Authentication.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Secret version reference containing the client secret.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionAuthConfigOauth2AuthCodeFlowClientSecret> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return Whether to enable PKCE when the user performs the auth code flow.
     * 
     */
    public Optional<Boolean> enablePkce() {
        return Optional.ofNullable(this.enablePkce);
    }
    /**
     * @return Scopes the connection will request when the user performs the auth code flow.
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionAuthConfigOauth2AuthCodeFlow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authUri;
        private @Nullable String clientId;
        private @Nullable ConnectionAuthConfigOauth2AuthCodeFlowClientSecret clientSecret;
        private @Nullable Boolean enablePkce;
        private @Nullable List<String> scopes;
        public Builder() {}
        public Builder(ConnectionAuthConfigOauth2AuthCodeFlow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authUri = defaults.authUri;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.enablePkce = defaults.enablePkce;
    	      this.scopes = defaults.scopes;
        }

        @CustomType.Setter
        public Builder authUri(@Nullable String authUri) {
            this.authUri = authUri;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable ConnectionAuthConfigOauth2AuthCodeFlowClientSecret clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder enablePkce(@Nullable Boolean enablePkce) {
            this.enablePkce = enablePkce;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        public ConnectionAuthConfigOauth2AuthCodeFlow build() {
            final var _resultValue = new ConnectionAuthConfigOauth2AuthCodeFlow();
            _resultValue.authUri = authUri;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.enablePkce = enablePkce;
            _resultValue.scopes = scopes;
            return _resultValue;
        }
    }
}
