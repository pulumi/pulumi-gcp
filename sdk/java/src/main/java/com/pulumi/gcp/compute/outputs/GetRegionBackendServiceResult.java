// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceBackend;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceCdnPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceCircuitBreaker;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceConnectionTrackingPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceConsistentHash;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceCustomMetric;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceDynamicForwarding;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceFailoverPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceHaPolicy;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceIap;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceLogConfig;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceOutlierDetection;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceParam;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceStrongSessionAffinityCooky;
import com.pulumi.gcp.compute.outputs.GetRegionBackendServiceSubsetting;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegionBackendServiceResult {
    private Integer affinityCookieTtlSec;
    private List<GetRegionBackendServiceBackend> backends;
    private List<GetRegionBackendServiceCdnPolicy> cdnPolicies;
    private List<GetRegionBackendServiceCircuitBreaker> circuitBreakers;
    private Integer connectionDrainingTimeoutSec;
    private List<GetRegionBackendServiceConnectionTrackingPolicy> connectionTrackingPolicies;
    private List<GetRegionBackendServiceConsistentHash> consistentHashes;
    private String creationTimestamp;
    private List<GetRegionBackendServiceCustomMetric> customMetrics;
    private String description;
    private List<GetRegionBackendServiceDynamicForwarding> dynamicForwardings;
    private Boolean enableCdn;
    private List<GetRegionBackendServiceFailoverPolicy> failoverPolicies;
    private String fingerprint;
    private Integer generatedId;
    private List<GetRegionBackendServiceHaPolicy> haPolicies;
    private List<String> healthChecks;
    private List<GetRegionBackendServiceIap> iaps;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String ipAddressSelectionPolicy;
    private String loadBalancingScheme;
    private String localityLbPolicy;
    private List<GetRegionBackendServiceLogConfig> logConfigs;
    private String name;
    private String network;
    private List<GetRegionBackendServiceOutlierDetection> outlierDetections;
    private List<GetRegionBackendServiceParam> params;
    private String portName;
    private @Nullable String project;
    private String protocol;
    private @Nullable String region;
    private String securityPolicy;
    private String selfLink;
    private String sessionAffinity;
    private List<GetRegionBackendServiceStrongSessionAffinityCooky> strongSessionAffinityCookies;
    private List<GetRegionBackendServiceSubsetting> subsettings;
    private Integer timeoutSec;

    private GetRegionBackendServiceResult() {}
    public Integer affinityCookieTtlSec() {
        return this.affinityCookieTtlSec;
    }
    public List<GetRegionBackendServiceBackend> backends() {
        return this.backends;
    }
    public List<GetRegionBackendServiceCdnPolicy> cdnPolicies() {
        return this.cdnPolicies;
    }
    public List<GetRegionBackendServiceCircuitBreaker> circuitBreakers() {
        return this.circuitBreakers;
    }
    public Integer connectionDrainingTimeoutSec() {
        return this.connectionDrainingTimeoutSec;
    }
    public List<GetRegionBackendServiceConnectionTrackingPolicy> connectionTrackingPolicies() {
        return this.connectionTrackingPolicies;
    }
    public List<GetRegionBackendServiceConsistentHash> consistentHashes() {
        return this.consistentHashes;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public List<GetRegionBackendServiceCustomMetric> customMetrics() {
        return this.customMetrics;
    }
    public String description() {
        return this.description;
    }
    public List<GetRegionBackendServiceDynamicForwarding> dynamicForwardings() {
        return this.dynamicForwardings;
    }
    public Boolean enableCdn() {
        return this.enableCdn;
    }
    public List<GetRegionBackendServiceFailoverPolicy> failoverPolicies() {
        return this.failoverPolicies;
    }
    public String fingerprint() {
        return this.fingerprint;
    }
    public Integer generatedId() {
        return this.generatedId;
    }
    public List<GetRegionBackendServiceHaPolicy> haPolicies() {
        return this.haPolicies;
    }
    public List<String> healthChecks() {
        return this.healthChecks;
    }
    public List<GetRegionBackendServiceIap> iaps() {
        return this.iaps;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ipAddressSelectionPolicy() {
        return this.ipAddressSelectionPolicy;
    }
    public String loadBalancingScheme() {
        return this.loadBalancingScheme;
    }
    public String localityLbPolicy() {
        return this.localityLbPolicy;
    }
    public List<GetRegionBackendServiceLogConfig> logConfigs() {
        return this.logConfigs;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public List<GetRegionBackendServiceOutlierDetection> outlierDetections() {
        return this.outlierDetections;
    }
    public List<GetRegionBackendServiceParam> params() {
        return this.params;
    }
    public String portName() {
        return this.portName;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String protocol() {
        return this.protocol;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public String securityPolicy() {
        return this.securityPolicy;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public String sessionAffinity() {
        return this.sessionAffinity;
    }
    public List<GetRegionBackendServiceStrongSessionAffinityCooky> strongSessionAffinityCookies() {
        return this.strongSessionAffinityCookies;
    }
    public List<GetRegionBackendServiceSubsetting> subsettings() {
        return this.subsettings;
    }
    public Integer timeoutSec() {
        return this.timeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionBackendServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer affinityCookieTtlSec;
        private List<GetRegionBackendServiceBackend> backends;
        private List<GetRegionBackendServiceCdnPolicy> cdnPolicies;
        private List<GetRegionBackendServiceCircuitBreaker> circuitBreakers;
        private Integer connectionDrainingTimeoutSec;
        private List<GetRegionBackendServiceConnectionTrackingPolicy> connectionTrackingPolicies;
        private List<GetRegionBackendServiceConsistentHash> consistentHashes;
        private String creationTimestamp;
        private List<GetRegionBackendServiceCustomMetric> customMetrics;
        private String description;
        private List<GetRegionBackendServiceDynamicForwarding> dynamicForwardings;
        private Boolean enableCdn;
        private List<GetRegionBackendServiceFailoverPolicy> failoverPolicies;
        private String fingerprint;
        private Integer generatedId;
        private List<GetRegionBackendServiceHaPolicy> haPolicies;
        private List<String> healthChecks;
        private List<GetRegionBackendServiceIap> iaps;
        private String id;
        private String ipAddressSelectionPolicy;
        private String loadBalancingScheme;
        private String localityLbPolicy;
        private List<GetRegionBackendServiceLogConfig> logConfigs;
        private String name;
        private String network;
        private List<GetRegionBackendServiceOutlierDetection> outlierDetections;
        private List<GetRegionBackendServiceParam> params;
        private String portName;
        private @Nullable String project;
        private String protocol;
        private @Nullable String region;
        private String securityPolicy;
        private String selfLink;
        private String sessionAffinity;
        private List<GetRegionBackendServiceStrongSessionAffinityCooky> strongSessionAffinityCookies;
        private List<GetRegionBackendServiceSubsetting> subsettings;
        private Integer timeoutSec;
        public Builder() {}
        public Builder(GetRegionBackendServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieTtlSec = defaults.affinityCookieTtlSec;
    	      this.backends = defaults.backends;
    	      this.cdnPolicies = defaults.cdnPolicies;
    	      this.circuitBreakers = defaults.circuitBreakers;
    	      this.connectionDrainingTimeoutSec = defaults.connectionDrainingTimeoutSec;
    	      this.connectionTrackingPolicies = defaults.connectionTrackingPolicies;
    	      this.consistentHashes = defaults.consistentHashes;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.customMetrics = defaults.customMetrics;
    	      this.description = defaults.description;
    	      this.dynamicForwardings = defaults.dynamicForwardings;
    	      this.enableCdn = defaults.enableCdn;
    	      this.failoverPolicies = defaults.failoverPolicies;
    	      this.fingerprint = defaults.fingerprint;
    	      this.generatedId = defaults.generatedId;
    	      this.haPolicies = defaults.haPolicies;
    	      this.healthChecks = defaults.healthChecks;
    	      this.iaps = defaults.iaps;
    	      this.id = defaults.id;
    	      this.ipAddressSelectionPolicy = defaults.ipAddressSelectionPolicy;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.localityLbPolicy = defaults.localityLbPolicy;
    	      this.logConfigs = defaults.logConfigs;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.outlierDetections = defaults.outlierDetections;
    	      this.params = defaults.params;
    	      this.portName = defaults.portName;
    	      this.project = defaults.project;
    	      this.protocol = defaults.protocol;
    	      this.region = defaults.region;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.selfLink = defaults.selfLink;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.strongSessionAffinityCookies = defaults.strongSessionAffinityCookies;
    	      this.subsettings = defaults.subsettings;
    	      this.timeoutSec = defaults.timeoutSec;
        }

        @CustomType.Setter
        public Builder affinityCookieTtlSec(Integer affinityCookieTtlSec) {
            if (affinityCookieTtlSec == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "affinityCookieTtlSec");
            }
            this.affinityCookieTtlSec = affinityCookieTtlSec;
            return this;
        }
        @CustomType.Setter
        public Builder backends(List<GetRegionBackendServiceBackend> backends) {
            if (backends == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "backends");
            }
            this.backends = backends;
            return this;
        }
        public Builder backends(GetRegionBackendServiceBackend... backends) {
            return backends(List.of(backends));
        }
        @CustomType.Setter
        public Builder cdnPolicies(List<GetRegionBackendServiceCdnPolicy> cdnPolicies) {
            if (cdnPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "cdnPolicies");
            }
            this.cdnPolicies = cdnPolicies;
            return this;
        }
        public Builder cdnPolicies(GetRegionBackendServiceCdnPolicy... cdnPolicies) {
            return cdnPolicies(List.of(cdnPolicies));
        }
        @CustomType.Setter
        public Builder circuitBreakers(List<GetRegionBackendServiceCircuitBreaker> circuitBreakers) {
            if (circuitBreakers == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "circuitBreakers");
            }
            this.circuitBreakers = circuitBreakers;
            return this;
        }
        public Builder circuitBreakers(GetRegionBackendServiceCircuitBreaker... circuitBreakers) {
            return circuitBreakers(List.of(circuitBreakers));
        }
        @CustomType.Setter
        public Builder connectionDrainingTimeoutSec(Integer connectionDrainingTimeoutSec) {
            if (connectionDrainingTimeoutSec == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "connectionDrainingTimeoutSec");
            }
            this.connectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            return this;
        }
        @CustomType.Setter
        public Builder connectionTrackingPolicies(List<GetRegionBackendServiceConnectionTrackingPolicy> connectionTrackingPolicies) {
            if (connectionTrackingPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "connectionTrackingPolicies");
            }
            this.connectionTrackingPolicies = connectionTrackingPolicies;
            return this;
        }
        public Builder connectionTrackingPolicies(GetRegionBackendServiceConnectionTrackingPolicy... connectionTrackingPolicies) {
            return connectionTrackingPolicies(List.of(connectionTrackingPolicies));
        }
        @CustomType.Setter
        public Builder consistentHashes(List<GetRegionBackendServiceConsistentHash> consistentHashes) {
            if (consistentHashes == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "consistentHashes");
            }
            this.consistentHashes = consistentHashes;
            return this;
        }
        public Builder consistentHashes(GetRegionBackendServiceConsistentHash... consistentHashes) {
            return consistentHashes(List.of(consistentHashes));
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder customMetrics(List<GetRegionBackendServiceCustomMetric> customMetrics) {
            if (customMetrics == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "customMetrics");
            }
            this.customMetrics = customMetrics;
            return this;
        }
        public Builder customMetrics(GetRegionBackendServiceCustomMetric... customMetrics) {
            return customMetrics(List.of(customMetrics));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicForwardings(List<GetRegionBackendServiceDynamicForwarding> dynamicForwardings) {
            if (dynamicForwardings == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "dynamicForwardings");
            }
            this.dynamicForwardings = dynamicForwardings;
            return this;
        }
        public Builder dynamicForwardings(GetRegionBackendServiceDynamicForwarding... dynamicForwardings) {
            return dynamicForwardings(List.of(dynamicForwardings));
        }
        @CustomType.Setter
        public Builder enableCdn(Boolean enableCdn) {
            if (enableCdn == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "enableCdn");
            }
            this.enableCdn = enableCdn;
            return this;
        }
        @CustomType.Setter
        public Builder failoverPolicies(List<GetRegionBackendServiceFailoverPolicy> failoverPolicies) {
            if (failoverPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "failoverPolicies");
            }
            this.failoverPolicies = failoverPolicies;
            return this;
        }
        public Builder failoverPolicies(GetRegionBackendServiceFailoverPolicy... failoverPolicies) {
            return failoverPolicies(List.of(failoverPolicies));
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder generatedId(Integer generatedId) {
            if (generatedId == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "generatedId");
            }
            this.generatedId = generatedId;
            return this;
        }
        @CustomType.Setter
        public Builder haPolicies(List<GetRegionBackendServiceHaPolicy> haPolicies) {
            if (haPolicies == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "haPolicies");
            }
            this.haPolicies = haPolicies;
            return this;
        }
        public Builder haPolicies(GetRegionBackendServiceHaPolicy... haPolicies) {
            return haPolicies(List.of(haPolicies));
        }
        @CustomType.Setter
        public Builder healthChecks(List<String> healthChecks) {
            if (healthChecks == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "healthChecks");
            }
            this.healthChecks = healthChecks;
            return this;
        }
        public Builder healthChecks(String... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder iaps(List<GetRegionBackendServiceIap> iaps) {
            if (iaps == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "iaps");
            }
            this.iaps = iaps;
            return this;
        }
        public Builder iaps(GetRegionBackendServiceIap... iaps) {
            return iaps(List.of(iaps));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressSelectionPolicy(String ipAddressSelectionPolicy) {
            if (ipAddressSelectionPolicy == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "ipAddressSelectionPolicy");
            }
            this.ipAddressSelectionPolicy = ipAddressSelectionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            if (loadBalancingScheme == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "loadBalancingScheme");
            }
            this.loadBalancingScheme = loadBalancingScheme;
            return this;
        }
        @CustomType.Setter
        public Builder localityLbPolicy(String localityLbPolicy) {
            if (localityLbPolicy == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "localityLbPolicy");
            }
            this.localityLbPolicy = localityLbPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder logConfigs(List<GetRegionBackendServiceLogConfig> logConfigs) {
            if (logConfigs == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "logConfigs");
            }
            this.logConfigs = logConfigs;
            return this;
        }
        public Builder logConfigs(GetRegionBackendServiceLogConfig... logConfigs) {
            return logConfigs(List.of(logConfigs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder outlierDetections(List<GetRegionBackendServiceOutlierDetection> outlierDetections) {
            if (outlierDetections == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "outlierDetections");
            }
            this.outlierDetections = outlierDetections;
            return this;
        }
        public Builder outlierDetections(GetRegionBackendServiceOutlierDetection... outlierDetections) {
            return outlierDetections(List.of(outlierDetections));
        }
        @CustomType.Setter
        public Builder params(List<GetRegionBackendServiceParam> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "params");
            }
            this.params = params;
            return this;
        }
        public Builder params(GetRegionBackendServiceParam... params) {
            return params(List.of(params));
        }
        @CustomType.Setter
        public Builder portName(String portName) {
            if (portName == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "portName");
            }
            this.portName = portName;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicy(String securityPolicy) {
            if (securityPolicy == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "securityPolicy");
            }
            this.securityPolicy = securityPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinity(String sessionAffinity) {
            if (sessionAffinity == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "sessionAffinity");
            }
            this.sessionAffinity = sessionAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder strongSessionAffinityCookies(List<GetRegionBackendServiceStrongSessionAffinityCooky> strongSessionAffinityCookies) {
            if (strongSessionAffinityCookies == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "strongSessionAffinityCookies");
            }
            this.strongSessionAffinityCookies = strongSessionAffinityCookies;
            return this;
        }
        public Builder strongSessionAffinityCookies(GetRegionBackendServiceStrongSessionAffinityCooky... strongSessionAffinityCookies) {
            return strongSessionAffinityCookies(List.of(strongSessionAffinityCookies));
        }
        @CustomType.Setter
        public Builder subsettings(List<GetRegionBackendServiceSubsetting> subsettings) {
            if (subsettings == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "subsettings");
            }
            this.subsettings = subsettings;
            return this;
        }
        public Builder subsettings(GetRegionBackendServiceSubsetting... subsettings) {
            return subsettings(List.of(subsettings));
        }
        @CustomType.Setter
        public Builder timeoutSec(Integer timeoutSec) {
            if (timeoutSec == null) {
              throw new MissingRequiredPropertyException("GetRegionBackendServiceResult", "timeoutSec");
            }
            this.timeoutSec = timeoutSec;
            return this;
        }
        public GetRegionBackendServiceResult build() {
            final var _resultValue = new GetRegionBackendServiceResult();
            _resultValue.affinityCookieTtlSec = affinityCookieTtlSec;
            _resultValue.backends = backends;
            _resultValue.cdnPolicies = cdnPolicies;
            _resultValue.circuitBreakers = circuitBreakers;
            _resultValue.connectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            _resultValue.connectionTrackingPolicies = connectionTrackingPolicies;
            _resultValue.consistentHashes = consistentHashes;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.customMetrics = customMetrics;
            _resultValue.description = description;
            _resultValue.dynamicForwardings = dynamicForwardings;
            _resultValue.enableCdn = enableCdn;
            _resultValue.failoverPolicies = failoverPolicies;
            _resultValue.fingerprint = fingerprint;
            _resultValue.generatedId = generatedId;
            _resultValue.haPolicies = haPolicies;
            _resultValue.healthChecks = healthChecks;
            _resultValue.iaps = iaps;
            _resultValue.id = id;
            _resultValue.ipAddressSelectionPolicy = ipAddressSelectionPolicy;
            _resultValue.loadBalancingScheme = loadBalancingScheme;
            _resultValue.localityLbPolicy = localityLbPolicy;
            _resultValue.logConfigs = logConfigs;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.outlierDetections = outlierDetections;
            _resultValue.params = params;
            _resultValue.portName = portName;
            _resultValue.project = project;
            _resultValue.protocol = protocol;
            _resultValue.region = region;
            _resultValue.securityPolicy = securityPolicy;
            _resultValue.selfLink = selfLink;
            _resultValue.sessionAffinity = sessionAffinity;
            _resultValue.strongSessionAffinityCookies = strongSessionAffinityCookies;
            _resultValue.subsettings = subsettings;
            _resultValue.timeoutSec = timeoutSec;
            return _resultValue;
        }
    }
}
