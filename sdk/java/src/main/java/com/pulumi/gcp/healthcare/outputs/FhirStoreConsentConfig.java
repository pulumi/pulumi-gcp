// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.healthcare.outputs.FhirStoreConsentConfigAccessDeterminationLogConfig;
import com.pulumi.gcp.healthcare.outputs.FhirStoreConsentConfigConsentHeaderHandling;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FhirStoreConsentConfig {
    /**
     * @return Specifies how the server logs the consent-aware requests. If not specified, the AccessDeterminationLogConfig.LogLevel.MINIMUM option is used.
     * Structure is documented below.
     * 
     */
    private @Nullable FhirStoreConsentConfigAccessDeterminationLogConfig accessDeterminationLogConfig;
    /**
     * @return The default value is false. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
     * 
     */
    private @Nullable Boolean accessEnforced;
    /**
     * @return Different options to configure the behaviour of the server when handling the X-Consent-Scope header.
     * Structure is documented below.
     * 
     */
    private @Nullable FhirStoreConsentConfigConsentHeaderHandling consentHeaderHandling;
    /**
     * @return (Output)
     * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
     * 
     */
    private @Nullable List<String> enforcedAdminConsents;
    /**
     * @return Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either [fhirStores.create][] or [fhirStores.patch][]. After that, you must call [fhirStores.applyConsents][] to change the version.
     * Possible values are: `CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED`, `V1`.
     * 
     */
    private String version;

    private FhirStoreConsentConfig() {}
    /**
     * @return Specifies how the server logs the consent-aware requests. If not specified, the AccessDeterminationLogConfig.LogLevel.MINIMUM option is used.
     * Structure is documented below.
     * 
     */
    public Optional<FhirStoreConsentConfigAccessDeterminationLogConfig> accessDeterminationLogConfig() {
        return Optional.ofNullable(this.accessDeterminationLogConfig);
    }
    /**
     * @return The default value is false. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
     * 
     */
    public Optional<Boolean> accessEnforced() {
        return Optional.ofNullable(this.accessEnforced);
    }
    /**
     * @return Different options to configure the behaviour of the server when handling the X-Consent-Scope header.
     * Structure is documented below.
     * 
     */
    public Optional<FhirStoreConsentConfigConsentHeaderHandling> consentHeaderHandling() {
        return Optional.ofNullable(this.consentHeaderHandling);
    }
    /**
     * @return (Output)
     * The versioned names of the enforced admin Consent resource(s), in the format projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}/_history/{version_id}. For FHIR stores with disableResourceVersioning=true, the format is projects/{projectId}/locations/{location}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/Consent/{resourceId}. This field can only be updated using [fhirStores.applyAdminConsents][].
     * 
     */
    public List<String> enforcedAdminConsents() {
        return this.enforcedAdminConsents == null ? List.of() : this.enforcedAdminConsents;
    }
    /**
     * @return Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either [fhirStores.create][] or [fhirStores.patch][]. After that, you must call [fhirStores.applyConsents][] to change the version.
     * Possible values are: `CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED`, `V1`.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FhirStoreConsentConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable FhirStoreConsentConfigAccessDeterminationLogConfig accessDeterminationLogConfig;
        private @Nullable Boolean accessEnforced;
        private @Nullable FhirStoreConsentConfigConsentHeaderHandling consentHeaderHandling;
        private @Nullable List<String> enforcedAdminConsents;
        private String version;
        public Builder() {}
        public Builder(FhirStoreConsentConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessDeterminationLogConfig = defaults.accessDeterminationLogConfig;
    	      this.accessEnforced = defaults.accessEnforced;
    	      this.consentHeaderHandling = defaults.consentHeaderHandling;
    	      this.enforcedAdminConsents = defaults.enforcedAdminConsents;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accessDeterminationLogConfig(@Nullable FhirStoreConsentConfigAccessDeterminationLogConfig accessDeterminationLogConfig) {

            this.accessDeterminationLogConfig = accessDeterminationLogConfig;
            return this;
        }
        @CustomType.Setter
        public Builder accessEnforced(@Nullable Boolean accessEnforced) {

            this.accessEnforced = accessEnforced;
            return this;
        }
        @CustomType.Setter
        public Builder consentHeaderHandling(@Nullable FhirStoreConsentConfigConsentHeaderHandling consentHeaderHandling) {

            this.consentHeaderHandling = consentHeaderHandling;
            return this;
        }
        @CustomType.Setter
        public Builder enforcedAdminConsents(@Nullable List<String> enforcedAdminConsents) {

            this.enforcedAdminConsents = enforcedAdminConsents;
            return this;
        }
        public Builder enforcedAdminConsents(String... enforcedAdminConsents) {
            return enforcedAdminConsents(List.of(enforcedAdminConsents));
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("FhirStoreConsentConfig", "version");
            }
            this.version = version;
            return this;
        }
        public FhirStoreConsentConfig build() {
            final var _resultValue = new FhirStoreConsentConfig();
            _resultValue.accessDeterminationLogConfig = accessDeterminationLogConfig;
            _resultValue.accessEnforced = accessEnforced;
            _resultValue.consentHeaderHandling = consentHeaderHandling;
            _resultValue.enforcedAdminConsents = enforcedAdminConsents;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
