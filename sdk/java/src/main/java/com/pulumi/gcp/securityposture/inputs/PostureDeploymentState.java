// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securityposture.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostureDeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final PostureDeploymentState Empty = new PostureDeploymentState();

    /**
     * Time the posture deployment was created in UTC.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time the posture deployment was created in UTC.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of the posture deployment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the posture deployment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture to be deployed.
     * 
     */
    @Import(name="desiredPostureId")
    private @Nullable Output<String> desiredPostureId;

    /**
     * @return This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture to be deployed.
     * 
     */
    public Optional<Output<String>> desiredPostureId() {
        return Optional.ofNullable(this.desiredPostureId);
    }

    /**
     * This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture revision_id to be deployed.
     * 
     */
    @Import(name="desiredPostureRevisionId")
    private @Nullable Output<String> desiredPostureRevisionId;

    /**
     * @return This is an output only optional field which will be filled in case when
     * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
     * It denotes the desired posture revision_id to be deployed.
     * 
     */
    public Optional<Output<String>> desiredPostureRevisionId() {
        return Optional.ofNullable(this.desiredPostureRevisionId);
    }

    /**
     * For Resource freshness validation (&lt;https://google.aip.dev/154&gt;)
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return For Resource freshness validation (&lt;https://google.aip.dev/154&gt;)
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * This is a output only optional field which will be filled in case where
     * PostureDeployment enters a failure state like UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment&#39;s
     * CREATE/UPDATE/DELETE methods.
     * 
     */
    @Import(name="failureMessage")
    private @Nullable Output<String> failureMessage;

    /**
     * @return This is a output only optional field which will be filled in case where
     * PostureDeployment enters a failure state like UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment&#39;s
     * CREATE/UPDATE/DELETE methods.
     * 
     */
    public Optional<Output<String>> failureMessage() {
        return Optional.ofNullable(this.failureMessage);
    }

    /**
     * The location of the resource, eg. global`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource, eg. global`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the posture deployment instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the posture deployment instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * ID of the posture deployment.
     * 
     */
    @Import(name="postureDeploymentId")
    private @Nullable Output<String> postureDeploymentId;

    /**
     * @return ID of the posture deployment.
     * 
     */
    public Optional<Output<String>> postureDeploymentId() {
        return Optional.ofNullable(this.postureDeploymentId);
    }

    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     * 
     */
    @Import(name="postureId")
    private @Nullable Output<String> postureId;

    /**
     * @return Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     * 
     */
    public Optional<Output<String>> postureId() {
        return Optional.ofNullable(this.postureId);
    }

    /**
     * Revision_id the posture which needs to be deployed.
     * 
     */
    @Import(name="postureRevisionId")
    private @Nullable Output<String> postureRevisionId;

    /**
     * @return Revision_id the posture which needs to be deployed.
     * 
     */
    public Optional<Output<String>> postureRevisionId() {
        return Optional.ofNullable(this.postureRevisionId);
    }

    /**
     * If set, there are currently changes in flight to the posture deployment.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return If set, there are currently changes in flight to the posture deployment.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * State of the posture deployment. A posture deployment can be in the following terminal states:
     * ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the posture deployment. A posture deployment can be in the following terminal states:
     * ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     * 
     */
    @Import(name="targetResource")
    private @Nullable Output<String> targetResource;

    /**
     * @return The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number},
     * folders/{folder_number},
     * organizations/{organization_id}
     * 
     */
    public Optional<Output<String>> targetResource() {
        return Optional.ofNullable(this.targetResource);
    }

    /**
     * Time the posture deployment was updated in UTC.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time the posture deployment was updated in UTC.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private PostureDeploymentState() {}

    private PostureDeploymentState(PostureDeploymentState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.desiredPostureId = $.desiredPostureId;
        this.desiredPostureRevisionId = $.desiredPostureRevisionId;
        this.etag = $.etag;
        this.failureMessage = $.failureMessage;
        this.location = $.location;
        this.name = $.name;
        this.parent = $.parent;
        this.postureDeploymentId = $.postureDeploymentId;
        this.postureId = $.postureId;
        this.postureRevisionId = $.postureRevisionId;
        this.reconciling = $.reconciling;
        this.state = $.state;
        this.targetResource = $.targetResource;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostureDeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostureDeploymentState $;

        public Builder() {
            $ = new PostureDeploymentState();
        }

        public Builder(PostureDeploymentState defaults) {
            $ = new PostureDeploymentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Time the posture deployment was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time the posture deployment was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param desiredPostureId This is an output only optional field which will be filled in case when
         * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
         * It denotes the desired posture to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder desiredPostureId(@Nullable Output<String> desiredPostureId) {
            $.desiredPostureId = desiredPostureId;
            return this;
        }

        /**
         * @param desiredPostureId This is an output only optional field which will be filled in case when
         * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
         * It denotes the desired posture to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder desiredPostureId(String desiredPostureId) {
            return desiredPostureId(Output.of(desiredPostureId));
        }

        /**
         * @param desiredPostureRevisionId This is an output only optional field which will be filled in case when
         * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
         * It denotes the desired posture revision_id to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder desiredPostureRevisionId(@Nullable Output<String> desiredPostureRevisionId) {
            $.desiredPostureRevisionId = desiredPostureRevisionId;
            return this;
        }

        /**
         * @param desiredPostureRevisionId This is an output only optional field which will be filled in case when
         * PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
         * It denotes the desired posture revision_id to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder desiredPostureRevisionId(String desiredPostureRevisionId) {
            return desiredPostureRevisionId(Output.of(desiredPostureRevisionId));
        }

        /**
         * @param etag For Resource freshness validation (&lt;https://google.aip.dev/154&gt;)
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag For Resource freshness validation (&lt;https://google.aip.dev/154&gt;)
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param failureMessage This is a output only optional field which will be filled in case where
         * PostureDeployment enters a failure state like UPDATE_FAILED or
         * CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment&#39;s
         * CREATE/UPDATE/DELETE methods.
         * 
         * @return builder
         * 
         */
        public Builder failureMessage(@Nullable Output<String> failureMessage) {
            $.failureMessage = failureMessage;
            return this;
        }

        /**
         * @param failureMessage This is a output only optional field which will be filled in case where
         * PostureDeployment enters a failure state like UPDATE_FAILED or
         * CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment&#39;s
         * CREATE/UPDATE/DELETE methods.
         * 
         * @return builder
         * 
         */
        public Builder failureMessage(String failureMessage) {
            return failureMessage(Output.of(failureMessage));
        }

        /**
         * @param location The location of the resource, eg. global`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource, eg. global`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of the posture deployment instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the posture deployment instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The parent of the resource, an organization. Format should be `organizations/{organization_id}`.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param postureDeploymentId ID of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder postureDeploymentId(@Nullable Output<String> postureDeploymentId) {
            $.postureDeploymentId = postureDeploymentId;
            return this;
        }

        /**
         * @param postureDeploymentId ID of the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder postureDeploymentId(String postureDeploymentId) {
            return postureDeploymentId(Output.of(postureDeploymentId));
        }

        /**
         * @param postureId Relative name of the posture which needs to be deployed. It should be in the format:
         * organizations/{organization_id}/locations/{location}/postures/{posture_id}
         * 
         * @return builder
         * 
         */
        public Builder postureId(@Nullable Output<String> postureId) {
            $.postureId = postureId;
            return this;
        }

        /**
         * @param postureId Relative name of the posture which needs to be deployed. It should be in the format:
         * organizations/{organization_id}/locations/{location}/postures/{posture_id}
         * 
         * @return builder
         * 
         */
        public Builder postureId(String postureId) {
            return postureId(Output.of(postureId));
        }

        /**
         * @param postureRevisionId Revision_id the posture which needs to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder postureRevisionId(@Nullable Output<String> postureRevisionId) {
            $.postureRevisionId = postureRevisionId;
            return this;
        }

        /**
         * @param postureRevisionId Revision_id the posture which needs to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder postureRevisionId(String postureRevisionId) {
            return postureRevisionId(Output.of(postureRevisionId));
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling If set, there are currently changes in flight to the posture deployment.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param state State of the posture deployment. A posture deployment can be in the following terminal states:
         * ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the posture deployment. A posture deployment can be in the following terminal states:
         * ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetResource The resource on which the posture should be deployed. This can be in one of the following formats:
         * projects/{project_number},
         * folders/{folder_number},
         * organizations/{organization_id}
         * 
         * @return builder
         * 
         */
        public Builder targetResource(@Nullable Output<String> targetResource) {
            $.targetResource = targetResource;
            return this;
        }

        /**
         * @param targetResource The resource on which the posture should be deployed. This can be in one of the following formats:
         * projects/{project_number},
         * folders/{folder_number},
         * organizations/{organization_id}
         * 
         * @return builder
         * 
         */
        public Builder targetResource(String targetResource) {
            return targetResource(Output.of(targetResource));
        }

        /**
         * @param updateTime Time the posture deployment was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time the posture deployment was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public PostureDeploymentState build() {
            return $;
        }
    }

}
