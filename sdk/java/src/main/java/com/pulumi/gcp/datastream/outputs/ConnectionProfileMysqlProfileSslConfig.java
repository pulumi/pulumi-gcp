// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionProfileMysqlProfileSslConfig {
    /**
     * @return PEM-encoded certificate of the CA that signed the source database
     * server&#39;s certificate.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String caCertificate;
    /**
     * @return Indicates whether the clientKey field is set.
     * 
     */
    private @Nullable Boolean caCertificateSet;
    /**
     * @return PEM-encoded certificate that will be used by the replica to
     * authenticate against the source database server. If this field
     * is used then the &#39;clientKey&#39; and the &#39;caCertificate&#39; fields are
     * mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String clientCertificate;
    /**
     * @return Indicates whether the clientCertificate field is set.
     * 
     */
    private @Nullable Boolean clientCertificateSet;
    /**
     * @return PEM-encoded private key associated with the Client Certificate.
     * If this field is used then the &#39;client_certificate&#39; and the
     * &#39;ca_certificate&#39; fields are mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String clientKey;
    /**
     * @return Indicates whether the clientKey field is set.
     * 
     */
    private @Nullable Boolean clientKeySet;

    private ConnectionProfileMysqlProfileSslConfig() {}
    /**
     * @return PEM-encoded certificate of the CA that signed the source database
     * server&#39;s certificate.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }
    /**
     * @return Indicates whether the clientKey field is set.
     * 
     */
    public Optional<Boolean> caCertificateSet() {
        return Optional.ofNullable(this.caCertificateSet);
    }
    /**
     * @return PEM-encoded certificate that will be used by the replica to
     * authenticate against the source database server. If this field
     * is used then the &#39;clientKey&#39; and the &#39;caCertificate&#39; fields are
     * mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }
    /**
     * @return Indicates whether the clientCertificate field is set.
     * 
     */
    public Optional<Boolean> clientCertificateSet() {
        return Optional.ofNullable(this.clientCertificateSet);
    }
    /**
     * @return PEM-encoded private key associated with the Client Certificate.
     * If this field is used then the &#39;client_certificate&#39; and the
     * &#39;ca_certificate&#39; fields are mandatory.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }
    /**
     * @return Indicates whether the clientKey field is set.
     * 
     */
    public Optional<Boolean> clientKeySet() {
        return Optional.ofNullable(this.clientKeySet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionProfileMysqlProfileSslConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caCertificate;
        private @Nullable Boolean caCertificateSet;
        private @Nullable String clientCertificate;
        private @Nullable Boolean clientCertificateSet;
        private @Nullable String clientKey;
        private @Nullable Boolean clientKeySet;
        public Builder() {}
        public Builder(ConnectionProfileMysqlProfileSslConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.caCertificateSet = defaults.caCertificateSet;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientCertificateSet = defaults.clientCertificateSet;
    	      this.clientKey = defaults.clientKey;
    	      this.clientKeySet = defaults.clientKeySet;
        }

        @CustomType.Setter
        public Builder caCertificate(@Nullable String caCertificate) {
            this.caCertificate = caCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder caCertificateSet(@Nullable Boolean caCertificateSet) {
            this.caCertificateSet = caCertificateSet;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateSet(@Nullable Boolean clientCertificateSet) {
            this.clientCertificateSet = clientCertificateSet;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(@Nullable String clientKey) {
            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder clientKeySet(@Nullable Boolean clientKeySet) {
            this.clientKeySet = clientKeySet;
            return this;
        }
        public ConnectionProfileMysqlProfileSslConfig build() {
            final var o = new ConnectionProfileMysqlProfileSslConfig();
            o.caCertificate = caCertificate;
            o.caCertificateSet = caCertificateSet;
            o.clientCertificate = clientCertificate;
            o.clientCertificateSet = clientCertificateSet;
            o.clientKey = clientKey;
            o.clientKeySet = clientKeySet;
            return o;
        }
    }
}
