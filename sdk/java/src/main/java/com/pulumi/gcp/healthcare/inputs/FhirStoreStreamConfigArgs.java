// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.healthcare.inputs.FhirStoreStreamConfigBigqueryDestinationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FhirStoreStreamConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FhirStoreStreamConfigArgs Empty = new FhirStoreStreamConfigArgs();

    /**
     * The destination BigQuery structure that contains both the dataset location and corresponding schema config.
     * The output is organized in one table per resource type. The server reuses the existing tables (if any) that
     * are named after the resource types, e.g. &#34;Patient&#34;, &#34;Observation&#34;. When there is no existing table for a given
     * resource type, the server attempts to create one.
     * See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
     * Structure is documented below.
     * 
     */
    @Import(name="bigqueryDestination", required=true)
    private Output<FhirStoreStreamConfigBigqueryDestinationArgs> bigqueryDestination;

    /**
     * @return The destination BigQuery structure that contains both the dataset location and corresponding schema config.
     * The output is organized in one table per resource type. The server reuses the existing tables (if any) that
     * are named after the resource types, e.g. &#34;Patient&#34;, &#34;Observation&#34;. When there is no existing table for a given
     * resource type, the server attempts to create one.
     * See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
     * Structure is documented below.
     * 
     */
    public Output<FhirStoreStreamConfigBigqueryDestinationArgs> bigqueryDestination() {
        return this.bigqueryDestination;
    }

    /**
     * Supply a FHIR resource type (such as &#34;Patient&#34; or &#34;Observation&#34;). See
     * https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
     * an empty list as an intent to stream all the supported resource types in this FHIR store.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable Output<List<String>> resourceTypes;

    /**
     * @return Supply a FHIR resource type (such as &#34;Patient&#34; or &#34;Observation&#34;). See
     * https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
     * an empty list as an intent to stream all the supported resource types in this FHIR store.
     * 
     */
    public Optional<Output<List<String>>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    private FhirStoreStreamConfigArgs() {}

    private FhirStoreStreamConfigArgs(FhirStoreStreamConfigArgs $) {
        this.bigqueryDestination = $.bigqueryDestination;
        this.resourceTypes = $.resourceTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FhirStoreStreamConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FhirStoreStreamConfigArgs $;

        public Builder() {
            $ = new FhirStoreStreamConfigArgs();
        }

        public Builder(FhirStoreStreamConfigArgs defaults) {
            $ = new FhirStoreStreamConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bigqueryDestination The destination BigQuery structure that contains both the dataset location and corresponding schema config.
         * The output is organized in one table per resource type. The server reuses the existing tables (if any) that
         * are named after the resource types, e.g. &#34;Patient&#34;, &#34;Observation&#34;. When there is no existing table for a given
         * resource type, the server attempts to create one.
         * See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryDestination(Output<FhirStoreStreamConfigBigqueryDestinationArgs> bigqueryDestination) {
            $.bigqueryDestination = bigqueryDestination;
            return this;
        }

        /**
         * @param bigqueryDestination The destination BigQuery structure that contains both the dataset location and corresponding schema config.
         * The output is organized in one table per resource type. The server reuses the existing tables (if any) that
         * are named after the resource types, e.g. &#34;Patient&#34;, &#34;Observation&#34;. When there is no existing table for a given
         * resource type, the server attempts to create one.
         * See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigqueryDestination(FhirStoreStreamConfigBigqueryDestinationArgs bigqueryDestination) {
            return bigqueryDestination(Output.of(bigqueryDestination));
        }

        /**
         * @param resourceTypes Supply a FHIR resource type (such as &#34;Patient&#34; or &#34;Observation&#34;). See
         * https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
         * an empty list as an intent to stream all the supported resource types in this FHIR store.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable Output<List<String>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes Supply a FHIR resource type (such as &#34;Patient&#34; or &#34;Observation&#34;). See
         * https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
         * an empty list as an intent to stream all the supported resource types in this FHIR store.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<String> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes Supply a FHIR resource type (such as &#34;Patient&#34; or &#34;Observation&#34;). See
         * https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
         * an empty list as an intent to stream all the supported resource types in this FHIR store.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        public FhirStoreStreamConfigArgs build() {
            $.bigqueryDestination = Objects.requireNonNull($.bigqueryDestination, "expected parameter 'bigqueryDestination' to be non-null");
            return $;
        }
    }

}
