// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gemini.inputs.CodeToolsSettingEnabledToolArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodeToolsSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodeToolsSettingArgs Empty = new CodeToolsSettingArgs();

    /**
     * Id of the Code Tools Setting.
     * 
     */
    @Import(name="codeToolsSettingId", required=true)
    private Output<String> codeToolsSettingId;

    /**
     * @return Id of the Code Tools Setting.
     * 
     */
    public Output<String> codeToolsSettingId() {
        return this.codeToolsSettingId;
    }

    /**
     * Represents the full set of enabled tools.
     * Structure is documented below.
     * 
     */
    @Import(name="enabledTools", required=true)
    private Output<List<CodeToolsSettingEnabledToolArgs>> enabledTools;

    /**
     * @return Represents the full set of enabled tools.
     * Structure is documented below.
     * 
     */
    public Output<List<CodeToolsSettingEnabledToolArgs>> enabledTools() {
        return this.enabledTools;
    }

    /**
     * Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private CodeToolsSettingArgs() {}

    private CodeToolsSettingArgs(CodeToolsSettingArgs $) {
        this.codeToolsSettingId = $.codeToolsSettingId;
        this.enabledTools = $.enabledTools;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeToolsSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeToolsSettingArgs $;

        public Builder() {
            $ = new CodeToolsSettingArgs();
        }

        public Builder(CodeToolsSettingArgs defaults) {
            $ = new CodeToolsSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeToolsSettingId Id of the Code Tools Setting.
         * 
         * @return builder
         * 
         */
        public Builder codeToolsSettingId(Output<String> codeToolsSettingId) {
            $.codeToolsSettingId = codeToolsSettingId;
            return this;
        }

        /**
         * @param codeToolsSettingId Id of the Code Tools Setting.
         * 
         * @return builder
         * 
         */
        public Builder codeToolsSettingId(String codeToolsSettingId) {
            return codeToolsSettingId(Output.of(codeToolsSettingId));
        }

        /**
         * @param enabledTools Represents the full set of enabled tools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabledTools(Output<List<CodeToolsSettingEnabledToolArgs>> enabledTools) {
            $.enabledTools = enabledTools;
            return this;
        }

        /**
         * @param enabledTools Represents the full set of enabled tools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabledTools(List<CodeToolsSettingEnabledToolArgs> enabledTools) {
            return enabledTools(Output.of(enabledTools));
        }

        /**
         * @param enabledTools Represents the full set of enabled tools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabledTools(CodeToolsSettingEnabledToolArgs... enabledTools) {
            return enabledTools(List.of(enabledTools));
        }

        /**
         * @param labels Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public CodeToolsSettingArgs build() {
            if ($.codeToolsSettingId == null) {
                throw new MissingRequiredPropertyException("CodeToolsSettingArgs", "codeToolsSettingId");
            }
            if ($.enabledTools == null) {
                throw new MissingRequiredPropertyException("CodeToolsSettingArgs", "enabledTools");
            }
            return $;
        }
    }

}
