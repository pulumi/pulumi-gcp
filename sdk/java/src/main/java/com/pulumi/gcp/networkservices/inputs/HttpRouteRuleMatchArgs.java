// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleMatchHeaderArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleMatchQueryParameterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRouteRuleMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteRuleMatchArgs Empty = new HttpRouteRuleMatchArgs();

    /**
     * The HTTP request path value should exactly match this value.
     * 
     */
    @Import(name="fullPathMatch")
    private @Nullable Output<String> fullPathMatch;

    /**
     * @return The HTTP request path value should exactly match this value.
     * 
     */
    public Optional<Output<String>> fullPathMatch() {
        return Optional.ofNullable(this.fullPathMatch);
    }

    /**
     * Specifies a list of HTTP request headers to match against.
     * Structure is documented below.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<HttpRouteRuleMatchHeaderArgs>> headers;

    /**
     * @return Specifies a list of HTTP request headers to match against.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HttpRouteRuleMatchHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
     * 
     */
    @Import(name="ignoreCase")
    private @Nullable Output<Boolean> ignoreCase;

    /**
     * @return Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
     * 
     */
    public Optional<Output<Boolean>> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    /**
     * The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
     * 
     */
    @Import(name="prefixMatch")
    private @Nullable Output<String> prefixMatch;

    /**
     * @return The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
     * 
     */
    public Optional<Output<String>> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }

    /**
     * Specifies a list of query parameters to match against.
     * Structure is documented below.
     * 
     */
    @Import(name="queryParameters")
    private @Nullable Output<List<HttpRouteRuleMatchQueryParameterArgs>> queryParameters;

    /**
     * @return Specifies a list of query parameters to match against.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HttpRouteRuleMatchQueryParameterArgs>>> queryParameters() {
        return Optional.ofNullable(this.queryParameters);
    }

    /**
     * The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
     * 
     */
    @Import(name="regexMatch")
    private @Nullable Output<String> regexMatch;

    /**
     * @return The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
     * 
     */
    public Optional<Output<String>> regexMatch() {
        return Optional.ofNullable(this.regexMatch);
    }

    private HttpRouteRuleMatchArgs() {}

    private HttpRouteRuleMatchArgs(HttpRouteRuleMatchArgs $) {
        this.fullPathMatch = $.fullPathMatch;
        this.headers = $.headers;
        this.ignoreCase = $.ignoreCase;
        this.prefixMatch = $.prefixMatch;
        this.queryParameters = $.queryParameters;
        this.regexMatch = $.regexMatch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteRuleMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteRuleMatchArgs $;

        public Builder() {
            $ = new HttpRouteRuleMatchArgs();
        }

        public Builder(HttpRouteRuleMatchArgs defaults) {
            $ = new HttpRouteRuleMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fullPathMatch The HTTP request path value should exactly match this value.
         * 
         * @return builder
         * 
         */
        public Builder fullPathMatch(@Nullable Output<String> fullPathMatch) {
            $.fullPathMatch = fullPathMatch;
            return this;
        }

        /**
         * @param fullPathMatch The HTTP request path value should exactly match this value.
         * 
         * @return builder
         * 
         */
        public Builder fullPathMatch(String fullPathMatch) {
            return fullPathMatch(Output.of(fullPathMatch));
        }

        /**
         * @param headers Specifies a list of HTTP request headers to match against.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<HttpRouteRuleMatchHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Specifies a list of HTTP request headers to match against.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<HttpRouteRuleMatchHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Specifies a list of HTTP request headers to match against.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder headers(HttpRouteRuleMatchHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param ignoreCase Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(@Nullable Output<Boolean> ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        /**
         * @param ignoreCase Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(Boolean ignoreCase) {
            return ignoreCase(Output.of(ignoreCase));
        }

        /**
         * @param prefixMatch The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(@Nullable Output<String> prefixMatch) {
            $.prefixMatch = prefixMatch;
            return this;
        }

        /**
         * @param prefixMatch The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(String prefixMatch) {
            return prefixMatch(Output.of(prefixMatch));
        }

        /**
         * @param queryParameters Specifies a list of query parameters to match against.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(@Nullable Output<List<HttpRouteRuleMatchQueryParameterArgs>> queryParameters) {
            $.queryParameters = queryParameters;
            return this;
        }

        /**
         * @param queryParameters Specifies a list of query parameters to match against.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(List<HttpRouteRuleMatchQueryParameterArgs> queryParameters) {
            return queryParameters(Output.of(queryParameters));
        }

        /**
         * @param queryParameters Specifies a list of query parameters to match against.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder queryParameters(HttpRouteRuleMatchQueryParameterArgs... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }

        /**
         * @param regexMatch The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(@Nullable Output<String> regexMatch) {
            $.regexMatch = regexMatch;
            return this;
        }

        /**
         * @param regexMatch The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(String regexMatch) {
            return regexMatch(Output.of(regexMatch));
        }

        public HttpRouteRuleMatchArgs build() {
            return $;
        }
    }

}
