// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.saasruntime.RolloutKindArgs;
import com.pulumi.gcp.saasruntime.inputs.RolloutKindState;
import com.pulumi.gcp.saasruntime.outputs.RolloutKindErrorBudget;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A RolloutKind is a reusable configuration resource that defines the policies, strategies, and targeting for Rollout operations. It acts as a template for repeatable Rollouts, providing guardrails and ensuring that updates are executed in a consistent manner across a fleet of Units.
 * 
 * ## Example Usage
 * 
 * ### Saas Runtime Rollout Kind Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.saasruntime.SaaS;
 * import com.pulumi.gcp.saasruntime.SaaSArgs;
 * import com.pulumi.gcp.saasruntime.inputs.SaaSLocationArgs;
 * import com.pulumi.gcp.saasruntime.UnitKind;
 * import com.pulumi.gcp.saasruntime.UnitKindArgs;
 * import com.pulumi.gcp.saasruntime.RolloutKind;
 * import com.pulumi.gcp.saasruntime.RolloutKindArgs;
 * import com.pulumi.gcp.saasruntime.inputs.RolloutKindErrorBudgetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleSaas = new SaaS("exampleSaas", SaaSArgs.builder()
 *             .saasId("example-saas")
 *             .location("global")
 *             .locations(SaaSLocationArgs.builder()
 *                 .name("us-central1")
 *                 .build())
 *             .build());
 * 
 *         var exampleUnitkind = new UnitKind("exampleUnitkind", UnitKindArgs.builder()
 *             .location("global")
 *             .unitKindId("example-unitkind")
 *             .saas(exampleSaas.id())
 *             .build());
 * 
 *         var example = new RolloutKind("example", RolloutKindArgs.builder()
 *             .location("global")
 *             .rolloutKindId("example-rolloutkind")
 *             .unitKind(exampleUnitkind.id())
 *             .rolloutOrchestrationStrategy("Google.Cloud.Simple.OneLocationAtATime")
 *             .errorBudget(RolloutKindErrorBudgetArgs.builder()
 *                 .allowedCount(1)
 *                 .build())
 *             .unitFilter("unit.labels['key1'] == 'value1'")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * RolloutKind can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}`
 * 
 * * `{{project}}/{{location}}/{{rollout_kind_id}}`
 * 
 * * `{{location}}/{{rollout_kind_id}}`
 * 
 * When using the `pulumi import` command, RolloutKind can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default projects/{{project}}/locations/{{location}}/rolloutKinds/{{rollout_kind_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default {{project}}/{{location}}/{{rollout_kind_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:saasruntime/rolloutKind:RolloutKind default {{location}}/{{rollout_kind_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:saasruntime/rolloutKind:RolloutKind")
public class RolloutKind extends com.pulumi.resources.CustomResource {
    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * The timestamp when the resource was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
     * Structure is documented below.
     * 
     */
    @Export(name="errorBudget", refs={RolloutKindErrorBudget.class}, tree="[0]")
    private Output</* @Nullable */ RolloutKindErrorBudget> errorBudget;

    /**
     * @return The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RolloutKindErrorBudget>> errorBudget() {
        return Codegen.optional(this.errorBudget);
    }
    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * &#34;projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}&#34;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name (full URI of the resource) following the standard naming
     * scheme:
     * &#34;projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The ID value for the new rollout kind.
     * 
     */
    @Export(name="rolloutKindId", refs={String.class}, tree="[0]")
    private Output<String> rolloutKindId;

    /**
     * @return The ID value for the new rollout kind.
     * 
     */
    public Output<String> rolloutKindId() {
        return this.rolloutKindId;
    }
    /**
     * The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - &#34;Google.Cloud.Simple.AllAtOnce&#34;
     * - &#34;Google.Cloud.Simple.OneLocationAtATime&#34;
     *   A rollout with one of these simple strategies will rollout across
     *   all locations defined in the associated UnitKind&#39;s Saas Locations.
     * 
     */
    @Export(name="rolloutOrchestrationStrategy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> rolloutOrchestrationStrategy;

    /**
     * @return The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - &#34;Google.Cloud.Simple.AllAtOnce&#34;
     * - &#34;Google.Cloud.Simple.OneLocationAtATime&#34;
     *   A rollout with one of these simple strategies will rollout across
     *   all locations defined in the associated UnitKind&#39;s Saas Locations.
     * 
     */
    public Output<Optional<String>> rolloutOrchestrationStrategy() {
        return Codegen.optional(this.rolloutOrchestrationStrategy);
    }
    /**
     * The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return The unique identifier of the resource. UID is unique in the time
     * and space for this resource within the scope of the service. It is
     * typically generated by the server on successful creation of a resource
     * and must not be changed. UID is used to uniquely identify resources
     * with resource name reuses. This should be a UUID4.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     * 
     */
    @Export(name="unitFilter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> unitFilter;

    /**
     * @return CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     * 
     */
    public Output<Optional<String>> unitFilter() {
        return Codegen.optional(this.unitFilter);
    }
    /**
     * UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     * 
     */
    @Export(name="unitKind", refs={String.class}, tree="[0]")
    private Output<String> unitKind;

    /**
     * @return UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     * 
     */
    public Output<String> unitKind() {
        return this.unitKind;
    }
    /**
     * The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp when the resource was last updated. Any
     * change to the resource made by users must refresh this value.
     * Changes to a resource made by the service should refresh this value.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     * 
     */
    @Export(name="updateUnitKindStrategy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> updateUnitKindStrategy;

    /**
     * @return The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     * 
     */
    public Output<Optional<String>> updateUnitKindStrategy() {
        return Codegen.optional(this.updateUnitKindStrategy);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RolloutKind(java.lang.String name) {
        this(name, RolloutKindArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RolloutKind(java.lang.String name, RolloutKindArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RolloutKind(java.lang.String name, RolloutKindArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:saasruntime/rolloutKind:RolloutKind", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RolloutKind(java.lang.String name, Output<java.lang.String> id, @Nullable RolloutKindState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:saasruntime/rolloutKind:RolloutKind", name, state, makeResourceOptions(options, id), false);
    }

    private static RolloutKindArgs makeArgs(RolloutKindArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RolloutKindArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RolloutKind get(java.lang.String name, Output<java.lang.String> id, @Nullable RolloutKindState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RolloutKind(name, id, state, options);
    }
}
