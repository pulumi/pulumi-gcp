// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SettingsAccessSettingsReauthSettings {
    /**
     * @return Reauth session lifetime, how long before a user has to reauthenticate again.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
     * Example: &#34;3.5s&#34;.
     * 
     */
    private String maxAge;
    /**
     * @return Reauth method requested. The possible values are:
     * * `LOGIN`: Prompts the user to log in again.
     * * `SECURE_KEY`: User must use their secure key 2nd factor device.
     * * `ENROLLED_SECOND_FACTORS`: User can use any enabled 2nd factor.
     *   Possible values are: `LOGIN`, `SECURE_KEY`, `ENROLLED_SECOND_FACTORS`.
     * 
     */
    private String method;
    /**
     * @return How IAP determines the effective policy in cases of hierarchical policies.
     * Policies are merged from higher in the hierarchy to lower in the hierarchy.
     * The possible values are:
     * * `MINIMUM`: This policy acts as a minimum to other policies, lower in the hierarchy.
     *   Effective policy may only be the same or stricter.
     * * `DEFAULT`: This policy acts as a default if no other reauth policy is set.
     *   Possible values are: `MINIMUM`, `DEFAULT`.
     * 
     */
    private String policyType;

    private SettingsAccessSettingsReauthSettings() {}
    /**
     * @return Reauth session lifetime, how long before a user has to reauthenticate again.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;.
     * Example: &#34;3.5s&#34;.
     * 
     */
    public String maxAge() {
        return this.maxAge;
    }
    /**
     * @return Reauth method requested. The possible values are:
     * * `LOGIN`: Prompts the user to log in again.
     * * `SECURE_KEY`: User must use their secure key 2nd factor device.
     * * `ENROLLED_SECOND_FACTORS`: User can use any enabled 2nd factor.
     *   Possible values are: `LOGIN`, `SECURE_KEY`, `ENROLLED_SECOND_FACTORS`.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return How IAP determines the effective policy in cases of hierarchical policies.
     * Policies are merged from higher in the hierarchy to lower in the hierarchy.
     * The possible values are:
     * * `MINIMUM`: This policy acts as a minimum to other policies, lower in the hierarchy.
     *   Effective policy may only be the same or stricter.
     * * `DEFAULT`: This policy acts as a default if no other reauth policy is set.
     *   Possible values are: `MINIMUM`, `DEFAULT`.
     * 
     */
    public String policyType() {
        return this.policyType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingsAccessSettingsReauthSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String maxAge;
        private String method;
        private String policyType;
        public Builder() {}
        public Builder(SettingsAccessSettingsReauthSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxAge = defaults.maxAge;
    	      this.method = defaults.method;
    	      this.policyType = defaults.policyType;
        }

        @CustomType.Setter
        public Builder maxAge(String maxAge) {
            if (maxAge == null) {
              throw new MissingRequiredPropertyException("SettingsAccessSettingsReauthSettings", "maxAge");
            }
            this.maxAge = maxAge;
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("SettingsAccessSettingsReauthSettings", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder policyType(String policyType) {
            if (policyType == null) {
              throw new MissingRequiredPropertyException("SettingsAccessSettingsReauthSettings", "policyType");
            }
            this.policyType = policyType;
            return this;
        }
        public SettingsAccessSettingsReauthSettings build() {
            final var _resultValue = new SettingsAccessSettingsReauthSettings();
            _resultValue.maxAge = maxAge;
            _resultValue.method = method;
            _resultValue.policyType = policyType;
            return _resultValue;
        }
    }
}
