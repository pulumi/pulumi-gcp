// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthConfigClientCertificate {
    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    private String encryptedPrivateKey;
    /**
     * @return &#39;passphrase&#39; should be left unset if private key is not encrypted.
     * Note that &#39;passphrase&#39; is not the password for web server, but an extra layer of security to protected private key.
     * 
     */
    private @Nullable String passphrase;
    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    private String sslCertificate;

    private AuthConfigClientCertificate() {}
    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    public String encryptedPrivateKey() {
        return this.encryptedPrivateKey;
    }
    /**
     * @return &#39;passphrase&#39; should be left unset if private key is not encrypted.
     * Note that &#39;passphrase&#39; is not the password for web server, but an extra layer of security to protected private key.
     * 
     */
    public Optional<String> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }
    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    public String sslCertificate() {
        return this.sslCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthConfigClientCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String encryptedPrivateKey;
        private @Nullable String passphrase;
        private String sslCertificate;
        public Builder() {}
        public Builder(AuthConfigClientCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptedPrivateKey = defaults.encryptedPrivateKey;
    	      this.passphrase = defaults.passphrase;
    	      this.sslCertificate = defaults.sslCertificate;
        }

        @CustomType.Setter
        public Builder encryptedPrivateKey(String encryptedPrivateKey) {
            if (encryptedPrivateKey == null) {
              throw new MissingRequiredPropertyException("AuthConfigClientCertificate", "encryptedPrivateKey");
            }
            this.encryptedPrivateKey = encryptedPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder passphrase(@Nullable String passphrase) {

            this.passphrase = passphrase;
            return this;
        }
        @CustomType.Setter
        public Builder sslCertificate(String sslCertificate) {
            if (sslCertificate == null) {
              throw new MissingRequiredPropertyException("AuthConfigClientCertificate", "sslCertificate");
            }
            this.sslCertificate = sslCertificate;
            return this;
        }
        public AuthConfigClientCertificate build() {
            final var _resultValue = new AuthConfigClientCertificate();
            _resultValue.encryptedPrivateKey = encryptedPrivateKey;
            _resultValue.passphrase = passphrase;
            _resultValue.sslCertificate = sslCertificate;
            return _resultValue;
        }
    }
}
