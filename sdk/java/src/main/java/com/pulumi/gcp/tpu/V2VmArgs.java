// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2VmArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2VmArgs Empty = new V2VmArgs();

    /**
     * TPU accelerator type for the TPU. If not specified, this defaults to &#39;v2-8&#39;.
     * 
     */
    @Import(name="acceleratorType")
    private @Nullable Output<String> acceleratorType;

    /**
     * @return TPU accelerator type for the TPU. If not specified, this defaults to &#39;v2-8&#39;.
     * 
     */
    public Optional<Output<String>> acceleratorType() {
        return Optional.ofNullable(this.acceleratorType);
    }

    /**
     * Text description of the TPU.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Text description of the TPU.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The immutable name of the TPU.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The immutable name of the TPU.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Runtime version for the TPU.
     * 
     * ***
     * 
     */
    @Import(name="runtimeVersion", required=true)
    private Output<String> runtimeVersion;

    /**
     * @return Runtime version for the TPU.
     * 
     * ***
     * 
     */
    public Output<String> runtimeVersion() {
        return this.runtimeVersion;
    }

    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The GCP location for the TPU. If it is not provided, the provider zone is used.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private V2VmArgs() {}

    private V2VmArgs(V2VmArgs $) {
        this.acceleratorType = $.acceleratorType;
        this.description = $.description;
        this.name = $.name;
        this.project = $.project;
        this.runtimeVersion = $.runtimeVersion;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2VmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2VmArgs $;

        public Builder() {
            $ = new V2VmArgs();
        }

        public Builder(V2VmArgs defaults) {
            $ = new V2VmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratorType TPU accelerator type for the TPU. If not specified, this defaults to &#39;v2-8&#39;.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(@Nullable Output<String> acceleratorType) {
            $.acceleratorType = acceleratorType;
            return this;
        }

        /**
         * @param acceleratorType TPU accelerator type for the TPU. If not specified, this defaults to &#39;v2-8&#39;.
         * 
         * @return builder
         * 
         */
        public Builder acceleratorType(String acceleratorType) {
            return acceleratorType(Output.of(acceleratorType));
        }

        /**
         * @param description Text description of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Text description of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The immutable name of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The immutable name of the TPU.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param runtimeVersion Runtime version for the TPU.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion Runtime version for the TPU.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        /**
         * @param zone The GCP location for the TPU. If it is not provided, the provider zone is used.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The GCP location for the TPU. If it is not provided, the provider zone is used.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public V2VmArgs build() {
            $.runtimeVersion = Objects.requireNonNull($.runtimeVersion, "expected parameter 'runtimeVersion' to be non-null");
            return $;
        }
    }

}
