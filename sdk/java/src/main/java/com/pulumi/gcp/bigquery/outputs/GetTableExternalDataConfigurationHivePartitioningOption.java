// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTableExternalDataConfigurationHivePartitioningOption {
    /**
     * @return When set, what mode of hive partitioning to use when reading data.
     * 
     */
    private String mode;
    /**
     * @return If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
     * 
     */
    private Boolean requirePartitionFilter;
    /**
     * @return When hive partition detection is requested, a common for all source uris must be required. The prefix must end immediately before the partition key encoding begins.
     * 
     */
    private String sourceUriPrefix;

    private GetTableExternalDataConfigurationHivePartitioningOption() {}
    /**
     * @return When set, what mode of hive partitioning to use when reading data.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
     * 
     */
    public Boolean requirePartitionFilter() {
        return this.requirePartitionFilter;
    }
    /**
     * @return When hive partition detection is requested, a common for all source uris must be required. The prefix must end immediately before the partition key encoding begins.
     * 
     */
    public String sourceUriPrefix() {
        return this.sourceUriPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableExternalDataConfigurationHivePartitioningOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String mode;
        private Boolean requirePartitionFilter;
        private String sourceUriPrefix;
        public Builder() {}
        public Builder(GetTableExternalDataConfigurationHivePartitioningOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.requirePartitionFilter = defaults.requirePartitionFilter;
    	      this.sourceUriPrefix = defaults.sourceUriPrefix;
        }

        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationHivePartitioningOption", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder requirePartitionFilter(Boolean requirePartitionFilter) {
            if (requirePartitionFilter == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationHivePartitioningOption", "requirePartitionFilter");
            }
            this.requirePartitionFilter = requirePartitionFilter;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUriPrefix(String sourceUriPrefix) {
            if (sourceUriPrefix == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationHivePartitioningOption", "sourceUriPrefix");
            }
            this.sourceUriPrefix = sourceUriPrefix;
            return this;
        }
        public GetTableExternalDataConfigurationHivePartitioningOption build() {
            final var _resultValue = new GetTableExternalDataConfigurationHivePartitioningOption();
            _resultValue.mode = mode;
            _resultValue.requirePartitionFilter = requirePartitionFilter;
            _resultValue.sourceUriPrefix = sourceUriPrefix;
            return _resultValue;
        }
    }
}
