// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.storage.AnywhereCacheArgs;
import com.pulumi.gcp.storage.inputs.AnywhereCacheState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The Google Cloud Storage (GCS) Anywhere Cache feature allows users to
 * create SSD backed zonal read cache for their buckets. These zonal
 * caches are co-located with the customers compute engines to provide
 * cost efficiency.
 * 
 * ## Example Usage
 * 
 * ### Storage Anywhere Cache Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.storage.AnywhereCache;
 * import com.pulumi.gcp.storage.AnywhereCacheArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name("bucket-name")
 *             .location("US")
 *             .build());
 * 
 *         var destroyWait5000Seconds = new Sleep("destroyWait5000Seconds", SleepArgs.builder()
 *             .destroyDuration("5000s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(bucket))
 *                 .build());
 * 
 *         var cache = new AnywhereCache("cache", AnywhereCacheArgs.builder()
 *             .bucket(bucket.name())
 *             .zone("us-central1-f")
 *             .ttl("3601s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(destroyWait5000Seconds)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * AnywhereCache can be imported using any of these accepted formats:
 * 
 * * `b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}`
 * 
 * * `{{bucket}}/{{anywhere_cache_id}}`
 * 
 * When using the `pulumi import` command, AnywhereCache can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:storage/anywhereCache:AnywhereCache default b/{{bucket}}/anywhereCaches/{{anywhere_cache_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:storage/anywhereCache:AnywhereCache default {{bucket}}/{{anywhere_cache_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:storage/anywhereCache:AnywhereCache")
public class AnywhereCache extends com.pulumi.resources.CustomResource {
    /**
     * The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     * 
     */
    @Export(name="admissionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> admissionPolicy;

    /**
     * @return The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     * 
     */
    public Output<Optional<String>> admissionPolicy() {
        return Codegen.optional(this.admissionPolicy);
    }
    /**
     * The ID of the Anywhere cache instance.
     * 
     */
    @Export(name="anywhereCacheId", refs={String.class}, tree="[0]")
    private Output<String> anywhereCacheId;

    /**
     * @return The ID of the Anywhere cache instance.
     * 
     */
    public Output<String> anywhereCacheId() {
        return this.anywhereCacheId;
    }
    /**
     * A reference to Bucket resource
     * 
     */
    @Export(name="bucket", refs={String.class}, tree="[0]")
    private Output<String> bucket;

    /**
     * @return A reference to Bucket resource
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }
    /**
     * The creation time of the cache instance in RFC 3339 format.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The creation time of the cache instance in RFC 3339 format.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * True if the cache instance has an active Update long-running operation.
     * 
     */
    @Export(name="pendingUpdate", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pendingUpdate;

    /**
     * @return True if the cache instance has an active Update long-running operation.
     * 
     */
    public Output<Boolean> pendingUpdate() {
        return this.pendingUpdate;
    }
    /**
     * The current state of the cache instance.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the cache instance.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The TTL of all cache entries in whole seconds. e.g., &#34;7200s&#34;. It defaults to `86400s`
     * 
     */
    @Export(name="ttl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ttl;

    /**
     * @return The TTL of all cache entries in whole seconds. e.g., &#34;7200s&#34;. It defaults to `86400s`
     * 
     */
    public Output<Optional<String>> ttl() {
        return Codegen.optional(this.ttl);
    }
    /**
     * The modification time of the cache instance metadata in RFC 3339 format.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The modification time of the cache instance metadata in RFC 3339 format.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AnywhereCache(java.lang.String name) {
        this(name, AnywhereCacheArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AnywhereCache(java.lang.String name, AnywhereCacheArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AnywhereCache(java.lang.String name, AnywhereCacheArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:storage/anywhereCache:AnywhereCache", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AnywhereCache(java.lang.String name, Output<java.lang.String> id, @Nullable AnywhereCacheState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:storage/anywhereCache:AnywhereCache", name, state, makeResourceOptions(options, id), false);
    }

    private static AnywhereCacheArgs makeArgs(AnywhereCacheArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AnywhereCacheArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AnywhereCache get(java.lang.String name, Output<java.lang.String> id, @Nullable AnywhereCacheState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AnywhereCache(name, id, state, options);
    }
}
