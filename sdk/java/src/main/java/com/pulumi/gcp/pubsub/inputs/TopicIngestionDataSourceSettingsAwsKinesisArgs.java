// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class TopicIngestionDataSourceSettingsAwsKinesisArgs extends com.pulumi.resources.ResourceArgs {

    public static final TopicIngestionDataSourceSettingsAwsKinesisArgs Empty = new TopicIngestionDataSourceSettingsAwsKinesisArgs();

    /**
     * AWS role ARN to be used for Federated Identity authentication with
     * Kinesis. Check the Pub/Sub docs for how to set up this role and the
     * required permissions that need to be attached to it.
     * 
     */
    @Import(name="awsRoleArn", required=true)
    private Output<String> awsRoleArn;

    /**
     * @return AWS role ARN to be used for Federated Identity authentication with
     * Kinesis. Check the Pub/Sub docs for how to set up this role and the
     * required permissions that need to be attached to it.
     * 
     */
    public Output<String> awsRoleArn() {
        return this.awsRoleArn;
    }

    /**
     * The Kinesis consumer ARN to used for ingestion in
     * Enhanced Fan-Out mode. The consumer must be already
     * created and ready to be used.
     * 
     */
    @Import(name="consumerArn", required=true)
    private Output<String> consumerArn;

    /**
     * @return The Kinesis consumer ARN to used for ingestion in
     * Enhanced Fan-Out mode. The consumer must be already
     * created and ready to be used.
     * 
     */
    public Output<String> consumerArn() {
        return this.consumerArn;
    }

    /**
     * The GCP service account to be used for Federated Identity authentication
     * with Kinesis (via a `AssumeRoleWithWebIdentity` call for the provided
     * role). The `awsRoleArn` must be set up with `accounts.google.com:sub`
     * equals to this service account number.
     * 
     */
    @Import(name="gcpServiceAccount", required=true)
    private Output<String> gcpServiceAccount;

    /**
     * @return The GCP service account to be used for Federated Identity authentication
     * with Kinesis (via a `AssumeRoleWithWebIdentity` call for the provided
     * role). The `awsRoleArn` must be set up with `accounts.google.com:sub`
     * equals to this service account number.
     * 
     */
    public Output<String> gcpServiceAccount() {
        return this.gcpServiceAccount;
    }

    /**
     * The Kinesis stream ARN to ingest data from.
     * 
     */
    @Import(name="streamArn", required=true)
    private Output<String> streamArn;

    /**
     * @return The Kinesis stream ARN to ingest data from.
     * 
     */
    public Output<String> streamArn() {
        return this.streamArn;
    }

    private TopicIngestionDataSourceSettingsAwsKinesisArgs() {}

    private TopicIngestionDataSourceSettingsAwsKinesisArgs(TopicIngestionDataSourceSettingsAwsKinesisArgs $) {
        this.awsRoleArn = $.awsRoleArn;
        this.consumerArn = $.consumerArn;
        this.gcpServiceAccount = $.gcpServiceAccount;
        this.streamArn = $.streamArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TopicIngestionDataSourceSettingsAwsKinesisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TopicIngestionDataSourceSettingsAwsKinesisArgs $;

        public Builder() {
            $ = new TopicIngestionDataSourceSettingsAwsKinesisArgs();
        }

        public Builder(TopicIngestionDataSourceSettingsAwsKinesisArgs defaults) {
            $ = new TopicIngestionDataSourceSettingsAwsKinesisArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsRoleArn AWS role ARN to be used for Federated Identity authentication with
         * Kinesis. Check the Pub/Sub docs for how to set up this role and the
         * required permissions that need to be attached to it.
         * 
         * @return builder
         * 
         */
        public Builder awsRoleArn(Output<String> awsRoleArn) {
            $.awsRoleArn = awsRoleArn;
            return this;
        }

        /**
         * @param awsRoleArn AWS role ARN to be used for Federated Identity authentication with
         * Kinesis. Check the Pub/Sub docs for how to set up this role and the
         * required permissions that need to be attached to it.
         * 
         * @return builder
         * 
         */
        public Builder awsRoleArn(String awsRoleArn) {
            return awsRoleArn(Output.of(awsRoleArn));
        }

        /**
         * @param consumerArn The Kinesis consumer ARN to used for ingestion in
         * Enhanced Fan-Out mode. The consumer must be already
         * created and ready to be used.
         * 
         * @return builder
         * 
         */
        public Builder consumerArn(Output<String> consumerArn) {
            $.consumerArn = consumerArn;
            return this;
        }

        /**
         * @param consumerArn The Kinesis consumer ARN to used for ingestion in
         * Enhanced Fan-Out mode. The consumer must be already
         * created and ready to be used.
         * 
         * @return builder
         * 
         */
        public Builder consumerArn(String consumerArn) {
            return consumerArn(Output.of(consumerArn));
        }

        /**
         * @param gcpServiceAccount The GCP service account to be used for Federated Identity authentication
         * with Kinesis (via a `AssumeRoleWithWebIdentity` call for the provided
         * role). The `awsRoleArn` must be set up with `accounts.google.com:sub`
         * equals to this service account number.
         * 
         * @return builder
         * 
         */
        public Builder gcpServiceAccount(Output<String> gcpServiceAccount) {
            $.gcpServiceAccount = gcpServiceAccount;
            return this;
        }

        /**
         * @param gcpServiceAccount The GCP service account to be used for Federated Identity authentication
         * with Kinesis (via a `AssumeRoleWithWebIdentity` call for the provided
         * role). The `awsRoleArn` must be set up with `accounts.google.com:sub`
         * equals to this service account number.
         * 
         * @return builder
         * 
         */
        public Builder gcpServiceAccount(String gcpServiceAccount) {
            return gcpServiceAccount(Output.of(gcpServiceAccount));
        }

        /**
         * @param streamArn The Kinesis stream ARN to ingest data from.
         * 
         * @return builder
         * 
         */
        public Builder streamArn(Output<String> streamArn) {
            $.streamArn = streamArn;
            return this;
        }

        /**
         * @param streamArn The Kinesis stream ARN to ingest data from.
         * 
         * @return builder
         * 
         */
        public Builder streamArn(String streamArn) {
            return streamArn(Output.of(streamArn));
        }

        public TopicIngestionDataSourceSettingsAwsKinesisArgs build() {
            if ($.awsRoleArn == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsAwsKinesisArgs", "awsRoleArn");
            }
            if ($.consumerArn == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsAwsKinesisArgs", "consumerArn");
            }
            if ($.gcpServiceAccount == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsAwsKinesisArgs", "gcpServiceAccount");
            }
            if ($.streamArn == null) {
                throw new MissingRequiredPropertyException("TopicIngestionDataSourceSettingsAwsKinesisArgs", "streamArn");
            }
            return $;
        }
    }

}
