// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFolderResult {
    /**
     * @return Optional capabilities configured for this folder.
     * 
     */
    private List<String> configuredCapabilities;
    /**
     * @return Timestamp when the Organization was created. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    private String createTime;
    private Boolean deletionProtection;
    /**
     * @return The folder&#39;s display name.
     * 
     */
    private String displayName;
    private String folder;
    private String folderId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Folder&#39;s current lifecycle state.
     * 
     */
    private String lifecycleState;
    private @Nullable Boolean lookupOrganization;
    /**
     * @return Management Project associated with this folder (if capability is enabled).
     * 
     */
    private String managementProject;
    /**
     * @return The resource name of the Folder in the form `folders/{folder_id}`.
     * 
     */
    private String name;
    /**
     * @return If `lookup_organization` is enable, the resource name of the Organization that the folder belongs.
     * 
     */
    private String organization;
    /**
     * @return The resource name of the parent Folder or Organization.
     * 
     */
    private String parent;

    private GetFolderResult() {}
    /**
     * @return Optional capabilities configured for this folder.
     * 
     */
    public List<String> configuredCapabilities() {
        return this.configuredCapabilities;
    }
    /**
     * @return Timestamp when the Organization was created. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return The folder&#39;s display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    public String folder() {
        return this.folder;
    }
    public String folderId() {
        return this.folderId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Folder&#39;s current lifecycle state.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    public Optional<Boolean> lookupOrganization() {
        return Optional.ofNullable(this.lookupOrganization);
    }
    /**
     * @return Management Project associated with this folder (if capability is enabled).
     * 
     */
    public String managementProject() {
        return this.managementProject;
    }
    /**
     * @return The resource name of the Folder in the form `folders/{folder_id}`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return If `lookup_organization` is enable, the resource name of the Organization that the folder belongs.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return The resource name of the parent Folder or Organization.
     * 
     */
    public String parent() {
        return this.parent;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFolderResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> configuredCapabilities;
        private String createTime;
        private Boolean deletionProtection;
        private String displayName;
        private String folder;
        private String folderId;
        private String id;
        private String lifecycleState;
        private @Nullable Boolean lookupOrganization;
        private String managementProject;
        private String name;
        private String organization;
        private String parent;
        public Builder() {}
        public Builder(GetFolderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuredCapabilities = defaults.configuredCapabilities;
    	      this.createTime = defaults.createTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.displayName = defaults.displayName;
    	      this.folder = defaults.folder;
    	      this.folderId = defaults.folderId;
    	      this.id = defaults.id;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.lookupOrganization = defaults.lookupOrganization;
    	      this.managementProject = defaults.managementProject;
    	      this.name = defaults.name;
    	      this.organization = defaults.organization;
    	      this.parent = defaults.parent;
        }

        @CustomType.Setter
        public Builder configuredCapabilities(List<String> configuredCapabilities) {
            if (configuredCapabilities == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "configuredCapabilities");
            }
            this.configuredCapabilities = configuredCapabilities;
            return this;
        }
        public Builder configuredCapabilities(String... configuredCapabilities) {
            return configuredCapabilities(List.of(configuredCapabilities));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder folder(String folder) {
            if (folder == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "folder");
            }
            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder folderId(String folderId) {
            if (folderId == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "folderId");
            }
            this.folderId = folderId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder lookupOrganization(@Nullable Boolean lookupOrganization) {

            this.lookupOrganization = lookupOrganization;
            return this;
        }
        @CustomType.Setter
        public Builder managementProject(String managementProject) {
            if (managementProject == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "managementProject");
            }
            this.managementProject = managementProject;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetFolderResult", "parent");
            }
            this.parent = parent;
            return this;
        }
        public GetFolderResult build() {
            final var _resultValue = new GetFolderResult();
            _resultValue.configuredCapabilities = configuredCapabilities;
            _resultValue.createTime = createTime;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.displayName = displayName;
            _resultValue.folder = folder;
            _resultValue.folderId = folderId;
            _resultValue.id = id;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.lookupOrganization = lookupOrganization;
            _resultValue.managementProject = managementProject;
            _resultValue.name = name;
            _resultValue.organization = organization;
            _resultValue.parent = parent;
            return _resultValue;
        }
    }
}
