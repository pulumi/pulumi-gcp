// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendServiceLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendServiceLogConfigArgs Empty = new BackendServiceLogConfigArgs();

    /**
     * Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Whether to enable logging for the load balancer traffic served by this backend service.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
     * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
     * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
     * 
     */
    @Import(name="optionalFields")
    private @Nullable Output<List<String>> optionalFields;

    /**
     * @return This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
     * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
     * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
     * 
     */
    public Optional<Output<List<String>>> optionalFields() {
        return Optional.ofNullable(this.optionalFields);
    }

    /**
     * Specifies the optional logging mode for the load balancer traffic.
     * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM.
     * Possible values are: `INCLUDE_ALL_OPTIONAL`, `EXCLUDE_ALL_OPTIONAL`, `CUSTOM`.
     * 
     */
    @Import(name="optionalMode")
    private @Nullable Output<String> optionalMode;

    /**
     * @return Specifies the optional logging mode for the load balancer traffic.
     * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM.
     * Possible values are: `INCLUDE_ALL_OPTIONAL`, `EXCLUDE_ALL_OPTIONAL`, `CUSTOM`.
     * 
     */
    public Optional<Output<String>> optionalMode() {
        return Optional.ofNullable(this.optionalMode);
    }

    /**
     * This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    @Import(name="sampleRate")
    private @Nullable Output<Double> sampleRate;

    /**
     * @return This field can only be specified if logging is enabled for this backend service. The value of
     * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
     * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
     * The default value is 1.0.
     * 
     */
    public Optional<Output<Double>> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    private BackendServiceLogConfigArgs() {}

    private BackendServiceLogConfigArgs(BackendServiceLogConfigArgs $) {
        this.enable = $.enable;
        this.optionalFields = $.optionalFields;
        this.optionalMode = $.optionalMode;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendServiceLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendServiceLogConfigArgs $;

        public Builder() {
            $ = new BackendServiceLogConfigArgs();
        }

        public Builder(BackendServiceLogConfigArgs defaults) {
            $ = new BackendServiceLogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enable Whether to enable logging for the load balancer traffic served by this backend service.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Whether to enable logging for the load balancer traffic served by this backend service.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param optionalFields This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
         * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
         * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
         * 
         * @return builder
         * 
         */
        public Builder optionalFields(@Nullable Output<List<String>> optionalFields) {
            $.optionalFields = optionalFields;
            return this;
        }

        /**
         * @param optionalFields This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
         * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
         * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
         * 
         * @return builder
         * 
         */
        public Builder optionalFields(List<String> optionalFields) {
            return optionalFields(Output.of(optionalFields));
        }

        /**
         * @param optionalFields This field can only be specified if logging is enabled for this backend service and &#34;logConfig.optionalMode&#34;
         * was set to CUSTOM. Contains a list of optional fields you want to include in the logs.
         * For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
         * 
         * @return builder
         * 
         */
        public Builder optionalFields(String... optionalFields) {
            return optionalFields(List.of(optionalFields));
        }

        /**
         * @param optionalMode Specifies the optional logging mode for the load balancer traffic.
         * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM.
         * Possible values are: `INCLUDE_ALL_OPTIONAL`, `EXCLUDE_ALL_OPTIONAL`, `CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder optionalMode(@Nullable Output<String> optionalMode) {
            $.optionalMode = optionalMode;
            return this;
        }

        /**
         * @param optionalMode Specifies the optional logging mode for the load balancer traffic.
         * Supported values: INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM.
         * Possible values are: `INCLUDE_ALL_OPTIONAL`, `EXCLUDE_ALL_OPTIONAL`, `CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder optionalMode(String optionalMode) {
            return optionalMode(Output.of(optionalMode));
        }

        /**
         * @param sampleRate This field can only be specified if logging is enabled for this backend service. The value of
         * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
         * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
         * The default value is 1.0.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(@Nullable Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        /**
         * @param sampleRate This field can only be specified if logging is enabled for this backend service. The value of
         * the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
         * where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
         * The default value is 1.0.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public BackendServiceLogConfigArgs build() {
            return $;
        }
    }

}
