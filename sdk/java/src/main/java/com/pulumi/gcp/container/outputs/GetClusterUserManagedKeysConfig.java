// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterUserManagedKeysConfig {
    /**
     * @return The Certificate Authority Service caPool to use for the aggreation CA in this cluster.
     * 
     */
    private String aggregationCa;
    /**
     * @return The Certificate Authority Service caPool to use for the cluster CA in this cluster.
     * 
     */
    private String clusterCa;
    /**
     * @return The Cloud KMS cryptoKey to use for Confidential Hyperdisk on the control plane nodes.
     * 
     */
    private String controlPlaneDiskEncryptionKey;
    /**
     * @return The Certificate Authority Service caPool to use for the etcd API CA in this cluster.
     * 
     */
    private String etcdApiCa;
    /**
     * @return The Certificate Authority Service caPool to use for the etcd peer CA in this cluster.
     * 
     */
    private String etcdPeerCa;
    /**
     * @return Resource path of the Cloud KMS cryptoKey to use for encryption of internal etcd backups.
     * 
     */
    private String gkeopsEtcdBackupEncryptionKey;
    /**
     * @return The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
     * 
     */
    private List<String> serviceAccountSigningKeys;
    /**
     * @return The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
     * 
     */
    private List<String> serviceAccountVerificationKeys;

    private GetClusterUserManagedKeysConfig() {}
    /**
     * @return The Certificate Authority Service caPool to use for the aggreation CA in this cluster.
     * 
     */
    public String aggregationCa() {
        return this.aggregationCa;
    }
    /**
     * @return The Certificate Authority Service caPool to use for the cluster CA in this cluster.
     * 
     */
    public String clusterCa() {
        return this.clusterCa;
    }
    /**
     * @return The Cloud KMS cryptoKey to use for Confidential Hyperdisk on the control plane nodes.
     * 
     */
    public String controlPlaneDiskEncryptionKey() {
        return this.controlPlaneDiskEncryptionKey;
    }
    /**
     * @return The Certificate Authority Service caPool to use for the etcd API CA in this cluster.
     * 
     */
    public String etcdApiCa() {
        return this.etcdApiCa;
    }
    /**
     * @return The Certificate Authority Service caPool to use for the etcd peer CA in this cluster.
     * 
     */
    public String etcdPeerCa() {
        return this.etcdPeerCa;
    }
    /**
     * @return Resource path of the Cloud KMS cryptoKey to use for encryption of internal etcd backups.
     * 
     */
    public String gkeopsEtcdBackupEncryptionKey() {
        return this.gkeopsEtcdBackupEncryptionKey;
    }
    /**
     * @return The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
     * 
     */
    public List<String> serviceAccountSigningKeys() {
        return this.serviceAccountSigningKeys;
    }
    /**
     * @return The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
     * 
     */
    public List<String> serviceAccountVerificationKeys() {
        return this.serviceAccountVerificationKeys;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterUserManagedKeysConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aggregationCa;
        private String clusterCa;
        private String controlPlaneDiskEncryptionKey;
        private String etcdApiCa;
        private String etcdPeerCa;
        private String gkeopsEtcdBackupEncryptionKey;
        private List<String> serviceAccountSigningKeys;
        private List<String> serviceAccountVerificationKeys;
        public Builder() {}
        public Builder(GetClusterUserManagedKeysConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationCa = defaults.aggregationCa;
    	      this.clusterCa = defaults.clusterCa;
    	      this.controlPlaneDiskEncryptionKey = defaults.controlPlaneDiskEncryptionKey;
    	      this.etcdApiCa = defaults.etcdApiCa;
    	      this.etcdPeerCa = defaults.etcdPeerCa;
    	      this.gkeopsEtcdBackupEncryptionKey = defaults.gkeopsEtcdBackupEncryptionKey;
    	      this.serviceAccountSigningKeys = defaults.serviceAccountSigningKeys;
    	      this.serviceAccountVerificationKeys = defaults.serviceAccountVerificationKeys;
        }

        @CustomType.Setter
        public Builder aggregationCa(String aggregationCa) {
            if (aggregationCa == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "aggregationCa");
            }
            this.aggregationCa = aggregationCa;
            return this;
        }
        @CustomType.Setter
        public Builder clusterCa(String clusterCa) {
            if (clusterCa == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "clusterCa");
            }
            this.clusterCa = clusterCa;
            return this;
        }
        @CustomType.Setter
        public Builder controlPlaneDiskEncryptionKey(String controlPlaneDiskEncryptionKey) {
            if (controlPlaneDiskEncryptionKey == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "controlPlaneDiskEncryptionKey");
            }
            this.controlPlaneDiskEncryptionKey = controlPlaneDiskEncryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder etcdApiCa(String etcdApiCa) {
            if (etcdApiCa == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "etcdApiCa");
            }
            this.etcdApiCa = etcdApiCa;
            return this;
        }
        @CustomType.Setter
        public Builder etcdPeerCa(String etcdPeerCa) {
            if (etcdPeerCa == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "etcdPeerCa");
            }
            this.etcdPeerCa = etcdPeerCa;
            return this;
        }
        @CustomType.Setter
        public Builder gkeopsEtcdBackupEncryptionKey(String gkeopsEtcdBackupEncryptionKey) {
            if (gkeopsEtcdBackupEncryptionKey == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "gkeopsEtcdBackupEncryptionKey");
            }
            this.gkeopsEtcdBackupEncryptionKey = gkeopsEtcdBackupEncryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountSigningKeys(List<String> serviceAccountSigningKeys) {
            if (serviceAccountSigningKeys == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "serviceAccountSigningKeys");
            }
            this.serviceAccountSigningKeys = serviceAccountSigningKeys;
            return this;
        }
        public Builder serviceAccountSigningKeys(String... serviceAccountSigningKeys) {
            return serviceAccountSigningKeys(List.of(serviceAccountSigningKeys));
        }
        @CustomType.Setter
        public Builder serviceAccountVerificationKeys(List<String> serviceAccountVerificationKeys) {
            if (serviceAccountVerificationKeys == null) {
              throw new MissingRequiredPropertyException("GetClusterUserManagedKeysConfig", "serviceAccountVerificationKeys");
            }
            this.serviceAccountVerificationKeys = serviceAccountVerificationKeys;
            return this;
        }
        public Builder serviceAccountVerificationKeys(String... serviceAccountVerificationKeys) {
            return serviceAccountVerificationKeys(List.of(serviceAccountVerificationKeys));
        }
        public GetClusterUserManagedKeysConfig build() {
            final var _resultValue = new GetClusterUserManagedKeysConfig();
            _resultValue.aggregationCa = aggregationCa;
            _resultValue.clusterCa = clusterCa;
            _resultValue.controlPlaneDiskEncryptionKey = controlPlaneDiskEncryptionKey;
            _resultValue.etcdApiCa = etcdApiCa;
            _resultValue.etcdPeerCa = etcdPeerCa;
            _resultValue.gkeopsEtcdBackupEncryptionKey = gkeopsEtcdBackupEncryptionKey;
            _resultValue.serviceAccountSigningKeys = serviceAccountSigningKeys;
            _resultValue.serviceAccountVerificationKeys = serviceAccountVerificationKeys;
            return _resultValue;
        }
    }
}
