// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionAuthConfigSshPublicKeySshClientCertArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionAuthConfigSshPublicKeySshClientCertPassArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionAuthConfigSshPublicKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionAuthConfigSshPublicKeyArgs Empty = new ConnectionAuthConfigSshPublicKeyArgs();

    /**
     * Format of SSH Client cert.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return Format of SSH Client cert.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * SSH Client Cert. It should contain both public and private key.
     * Structure is documented below.
     * 
     */
    @Import(name="sshClientCert")
    private @Nullable Output<ConnectionAuthConfigSshPublicKeySshClientCertArgs> sshClientCert;

    /**
     * @return SSH Client Cert. It should contain both public and private key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionAuthConfigSshPublicKeySshClientCertArgs>> sshClientCert() {
        return Optional.ofNullable(this.sshClientCert);
    }

    /**
     * Password (passphrase) for ssh client certificate if it has one.
     * Structure is documented below.
     * 
     */
    @Import(name="sshClientCertPass")
    private @Nullable Output<ConnectionAuthConfigSshPublicKeySshClientCertPassArgs> sshClientCertPass;

    /**
     * @return Password (passphrase) for ssh client certificate if it has one.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionAuthConfigSshPublicKeySshClientCertPassArgs>> sshClientCertPass() {
        return Optional.ofNullable(this.sshClientCertPass);
    }

    /**
     * The user account used to authenticate.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The user account used to authenticate.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ConnectionAuthConfigSshPublicKeyArgs() {}

    private ConnectionAuthConfigSshPublicKeyArgs(ConnectionAuthConfigSshPublicKeyArgs $) {
        this.certType = $.certType;
        this.sshClientCert = $.sshClientCert;
        this.sshClientCertPass = $.sshClientCertPass;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionAuthConfigSshPublicKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionAuthConfigSshPublicKeyArgs $;

        public Builder() {
            $ = new ConnectionAuthConfigSshPublicKeyArgs();
        }

        public Builder(ConnectionAuthConfigSshPublicKeyArgs defaults) {
            $ = new ConnectionAuthConfigSshPublicKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certType Format of SSH Client cert.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType Format of SSH Client cert.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param sshClientCert SSH Client Cert. It should contain both public and private key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sshClientCert(@Nullable Output<ConnectionAuthConfigSshPublicKeySshClientCertArgs> sshClientCert) {
            $.sshClientCert = sshClientCert;
            return this;
        }

        /**
         * @param sshClientCert SSH Client Cert. It should contain both public and private key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sshClientCert(ConnectionAuthConfigSshPublicKeySshClientCertArgs sshClientCert) {
            return sshClientCert(Output.of(sshClientCert));
        }

        /**
         * @param sshClientCertPass Password (passphrase) for ssh client certificate if it has one.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sshClientCertPass(@Nullable Output<ConnectionAuthConfigSshPublicKeySshClientCertPassArgs> sshClientCertPass) {
            $.sshClientCertPass = sshClientCertPass;
            return this;
        }

        /**
         * @param sshClientCertPass Password (passphrase) for ssh client certificate if it has one.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sshClientCertPass(ConnectionAuthConfigSshPublicKeySshClientCertPassArgs sshClientCertPass) {
            return sshClientCertPass(Output.of(sshClientCertPass));
        }

        /**
         * @param username The user account used to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user account used to authenticate.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConnectionAuthConfigSshPublicKeyArgs build() {
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ConnectionAuthConfigSshPublicKeyArgs", "username");
            }
            return $;
        }
    }

}
