// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.securesourcemanager.inputs.RepositoryInitialConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * The deletion policy for the repository. Setting `ABANDON` allows the resource
     * to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
     * and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
     * by erroring out during plan.
     * Default is `PREVENT`.  Possible values are:
     * * DELETE
     * * PREVENT
     * * ABANDON
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return The deletion policy for the repository. Setting `ABANDON` allows the resource
     * to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
     * and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
     * by erroring out during plan.
     * Default is `PREVENT`.  Possible values are:
     * * DELETE
     * * PREVENT
     * * ABANDON
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * Description of the repository, which cannot exceed 500 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the repository, which cannot exceed 500 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Initial configurations for the repository.
     * Structure is documented below.
     * 
     */
    @Import(name="initialConfig")
    private @Nullable Output<RepositoryInitialConfigArgs> initialConfig;

    /**
     * @return Initial configurations for the repository.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RepositoryInitialConfigArgs>> initialConfig() {
        return Optional.ofNullable(this.initialConfig);
    }

    /**
     * The name of the instance in which the repository is hosted.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The name of the instance in which the repository is hosted.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * The location for the Repository.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the Repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID for the Repository.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The ID for the Repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.deletionPolicy = $.deletionPolicy;
        this.description = $.description;
        this.initialConfig = $.initialConfig;
        this.instance = $.instance;
        this.location = $.location;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deletionPolicy The deletion policy for the repository. Setting `ABANDON` allows the resource
         * to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
         * and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
         * by erroring out during plan.
         * Default is `PREVENT`.  Possible values are:
         * * DELETE
         * * PREVENT
         * * ABANDON
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy The deletion policy for the repository. Setting `ABANDON` allows the resource
         * to be abandoned, rather than deleted. Setting `DELETE` deletes the resource
         * and all its contents. Setting `PREVENT` prevents the resource from accidental deletion
         * by erroring out during plan.
         * Default is `PREVENT`.  Possible values are:
         * * DELETE
         * * PREVENT
         * * ABANDON
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param description Description of the repository, which cannot exceed 500 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the repository, which cannot exceed 500 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param initialConfig Initial configurations for the repository.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder initialConfig(@Nullable Output<RepositoryInitialConfigArgs> initialConfig) {
            $.initialConfig = initialConfig;
            return this;
        }

        /**
         * @param initialConfig Initial configurations for the repository.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder initialConfig(RepositoryInitialConfigArgs initialConfig) {
            return initialConfig(Output.of(initialConfig));
        }

        /**
         * @param instance The name of the instance in which the repository is hosted.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The name of the instance in which the repository is hosted.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param repositoryId The ID for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public RepositoryArgs build() {
            if ($.instance == null) {
                throw new MissingRequiredPropertyException("RepositoryArgs", "instance");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RepositoryArgs", "location");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("RepositoryArgs", "repositoryId");
            }
            return $;
        }
    }

}
