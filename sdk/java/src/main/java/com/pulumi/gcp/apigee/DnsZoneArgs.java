// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apigee.inputs.DnsZonePeeringConfigArgs;
import java.lang.String;
import java.util.Objects;


public final class DnsZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsZoneArgs Empty = new DnsZoneArgs();

    /**
     * Description for the zone.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description for the zone.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * ID of the dns zone.
     * 
     */
    @Import(name="dnsZoneId", required=true)
    private Output<String> dnsZoneId;

    /**
     * @return ID of the dns zone.
     * 
     */
    public Output<String> dnsZoneId() {
        return this.dnsZoneId;
    }

    /**
     * Doamin for the zone.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Doamin for the zone.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Peering zone config
     * Structure is documented below.
     * 
     */
    @Import(name="peeringConfig", required=true)
    private Output<DnsZonePeeringConfigArgs> peeringConfig;

    /**
     * @return Peering zone config
     * Structure is documented below.
     * 
     */
    public Output<DnsZonePeeringConfigArgs> peeringConfig() {
        return this.peeringConfig;
    }

    private DnsZoneArgs() {}

    private DnsZoneArgs(DnsZoneArgs $) {
        this.description = $.description;
        this.dnsZoneId = $.dnsZoneId;
        this.domain = $.domain;
        this.orgId = $.orgId;
        this.peeringConfig = $.peeringConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsZoneArgs $;

        public Builder() {
            $ = new DnsZoneArgs();
        }

        public Builder(DnsZoneArgs defaults) {
            $ = new DnsZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description for the zone.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the zone.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnsZoneId ID of the dns zone.
         * 
         * @return builder
         * 
         */
        public Builder dnsZoneId(Output<String> dnsZoneId) {
            $.dnsZoneId = dnsZoneId;
            return this;
        }

        /**
         * @param dnsZoneId ID of the dns zone.
         * 
         * @return builder
         * 
         */
        public Builder dnsZoneId(String dnsZoneId) {
            return dnsZoneId(Output.of(dnsZoneId));
        }

        /**
         * @param domain Doamin for the zone.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Doamin for the zone.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee instance,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee instance,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param peeringConfig Peering zone config
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder peeringConfig(Output<DnsZonePeeringConfigArgs> peeringConfig) {
            $.peeringConfig = peeringConfig;
            return this;
        }

        /**
         * @param peeringConfig Peering zone config
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder peeringConfig(DnsZonePeeringConfigArgs peeringConfig) {
            return peeringConfig(Output.of(peeringConfig));
        }

        public DnsZoneArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("DnsZoneArgs", "description");
            }
            if ($.dnsZoneId == null) {
                throw new MissingRequiredPropertyException("DnsZoneArgs", "dnsZoneId");
            }
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DnsZoneArgs", "domain");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("DnsZoneArgs", "orgId");
            }
            if ($.peeringConfig == null) {
                throw new MissingRequiredPropertyException("DnsZoneArgs", "peeringConfig");
            }
            return $;
        }
    }

}
