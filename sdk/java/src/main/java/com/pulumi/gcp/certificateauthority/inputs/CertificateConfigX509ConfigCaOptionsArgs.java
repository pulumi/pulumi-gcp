// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateConfigX509ConfigCaOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateConfigX509ConfigCaOptionsArgs Empty = new CertificateConfigX509ConfigCaOptionsArgs();

    /**
     * When true, the &#34;CA&#34; in Basic Constraints extension will be set to true.
     * 
     */
    @Import(name="isCa")
    private @Nullable Output<Boolean> isCa;

    /**
     * @return When true, the &#34;CA&#34; in Basic Constraints extension will be set to true.
     * 
     */
    public Optional<Output<Boolean>> isCa() {
        return Optional.ofNullable(this.isCa);
    }

    /**
     * Refers to the &#34;path length constraint&#34; in Basic Constraints extension. For a CA certificate, this value describes the depth of
     * subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
     * 
     */
    @Import(name="maxIssuerPathLength")
    private @Nullable Output<Integer> maxIssuerPathLength;

    /**
     * @return Refers to the &#34;path length constraint&#34; in Basic Constraints extension. For a CA certificate, this value describes the depth of
     * subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
     * 
     */
    public Optional<Output<Integer>> maxIssuerPathLength() {
        return Optional.ofNullable(this.maxIssuerPathLength);
    }

    /**
     * When true, the &#34;CA&#34; in Basic Constraints extension will be set to false.
     * If both `is_ca` and `non_ca` are unset, the extension will be omitted from the CA certificate.
     * 
     */
    @Import(name="nonCa")
    private @Nullable Output<Boolean> nonCa;

    /**
     * @return When true, the &#34;CA&#34; in Basic Constraints extension will be set to false.
     * If both `is_ca` and `non_ca` are unset, the extension will be omitted from the CA certificate.
     * 
     */
    public Optional<Output<Boolean>> nonCa() {
        return Optional.ofNullable(this.nonCa);
    }

    /**
     * When true, the &#34;path length constraint&#34; in Basic Constraints extension will be set to 0.
     * if both `max_issuer_path_length` and `zero_max_issuer_path_length` are unset,
     * the max path length will be omitted from the CA certificate.
     * 
     */
    @Import(name="zeroMaxIssuerPathLength")
    private @Nullable Output<Boolean> zeroMaxIssuerPathLength;

    /**
     * @return When true, the &#34;path length constraint&#34; in Basic Constraints extension will be set to 0.
     * if both `max_issuer_path_length` and `zero_max_issuer_path_length` are unset,
     * the max path length will be omitted from the CA certificate.
     * 
     */
    public Optional<Output<Boolean>> zeroMaxIssuerPathLength() {
        return Optional.ofNullable(this.zeroMaxIssuerPathLength);
    }

    private CertificateConfigX509ConfigCaOptionsArgs() {}

    private CertificateConfigX509ConfigCaOptionsArgs(CertificateConfigX509ConfigCaOptionsArgs $) {
        this.isCa = $.isCa;
        this.maxIssuerPathLength = $.maxIssuerPathLength;
        this.nonCa = $.nonCa;
        this.zeroMaxIssuerPathLength = $.zeroMaxIssuerPathLength;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateConfigX509ConfigCaOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateConfigX509ConfigCaOptionsArgs $;

        public Builder() {
            $ = new CertificateConfigX509ConfigCaOptionsArgs();
        }

        public Builder(CertificateConfigX509ConfigCaOptionsArgs defaults) {
            $ = new CertificateConfigX509ConfigCaOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isCa When true, the &#34;CA&#34; in Basic Constraints extension will be set to true.
         * 
         * @return builder
         * 
         */
        public Builder isCa(@Nullable Output<Boolean> isCa) {
            $.isCa = isCa;
            return this;
        }

        /**
         * @param isCa When true, the &#34;CA&#34; in Basic Constraints extension will be set to true.
         * 
         * @return builder
         * 
         */
        public Builder isCa(Boolean isCa) {
            return isCa(Output.of(isCa));
        }

        /**
         * @param maxIssuerPathLength Refers to the &#34;path length constraint&#34; in Basic Constraints extension. For a CA certificate, this value describes the depth of
         * subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
         * 
         * @return builder
         * 
         */
        public Builder maxIssuerPathLength(@Nullable Output<Integer> maxIssuerPathLength) {
            $.maxIssuerPathLength = maxIssuerPathLength;
            return this;
        }

        /**
         * @param maxIssuerPathLength Refers to the &#34;path length constraint&#34; in Basic Constraints extension. For a CA certificate, this value describes the depth of
         * subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
         * 
         * @return builder
         * 
         */
        public Builder maxIssuerPathLength(Integer maxIssuerPathLength) {
            return maxIssuerPathLength(Output.of(maxIssuerPathLength));
        }

        /**
         * @param nonCa When true, the &#34;CA&#34; in Basic Constraints extension will be set to false.
         * If both `is_ca` and `non_ca` are unset, the extension will be omitted from the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder nonCa(@Nullable Output<Boolean> nonCa) {
            $.nonCa = nonCa;
            return this;
        }

        /**
         * @param nonCa When true, the &#34;CA&#34; in Basic Constraints extension will be set to false.
         * If both `is_ca` and `non_ca` are unset, the extension will be omitted from the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder nonCa(Boolean nonCa) {
            return nonCa(Output.of(nonCa));
        }

        /**
         * @param zeroMaxIssuerPathLength When true, the &#34;path length constraint&#34; in Basic Constraints extension will be set to 0.
         * if both `max_issuer_path_length` and `zero_max_issuer_path_length` are unset,
         * the max path length will be omitted from the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder zeroMaxIssuerPathLength(@Nullable Output<Boolean> zeroMaxIssuerPathLength) {
            $.zeroMaxIssuerPathLength = zeroMaxIssuerPathLength;
            return this;
        }

        /**
         * @param zeroMaxIssuerPathLength When true, the &#34;path length constraint&#34; in Basic Constraints extension will be set to 0.
         * if both `max_issuer_path_length` and `zero_max_issuer_path_length` are unset,
         * the max path length will be omitted from the CA certificate.
         * 
         * @return builder
         * 
         */
        public Builder zeroMaxIssuerPathLength(Boolean zeroMaxIssuerPathLength) {
            return zeroMaxIssuerPathLength(Output.of(zeroMaxIssuerPathLength));
        }

        public CertificateConfigX509ConfigCaOptionsArgs build() {
            return $;
        }
    }

}
