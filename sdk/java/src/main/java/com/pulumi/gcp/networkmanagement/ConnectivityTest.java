// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkmanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestState;
import com.pulumi.gcp.networkmanagement.outputs.ConnectivityTestDestination;
import com.pulumi.gcp.networkmanagement.outputs.ConnectivityTestSource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A connectivity test are a static analysis of your resource configurations
 * that enables you to evaluate connectivity to and from Google Cloud
 * resources in your Virtual Private Cloud (VPC) network.
 * 
 * To get more information about ConnectivityTest, see:
 * 
 * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/connectivity-tests/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
 * 
 * ## Example Usage
 * ### Network Management Connectivity Test Instances
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vpc = new Network(&#34;vpc&#34;);
 * 
 *         final var debian9 = Output.of(ComputeFunctions.getImage(GetImageArgs.builder()
 *             .family(&#34;debian-9&#34;)
 *             .project(&#34;debian-cloud&#34;)
 *             .build()));
 * 
 *         var source = new Instance(&#34;source&#34;, InstanceArgs.builder()        
 *             .machineType(&#34;e2-medium&#34;)
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(debian9.apply(getImageResult -&gt; getImageResult.id()))
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(vpc.id())
 *                 .accessConfigs()
 *                 .build())
 *             .build());
 * 
 *         var destination = new Instance(&#34;destination&#34;, InstanceArgs.builder()        
 *             .machineType(&#34;e2-medium&#34;)
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(debian9.apply(getImageResult -&gt; getImageResult.id()))
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(vpc.id())
 *                 .accessConfigs()
 *                 .build())
 *             .build());
 * 
 *         var instance_test = new ConnectivityTest(&#34;instance-test&#34;, ConnectivityTestArgs.builder()        
 *             .source(ConnectivityTestSourceArgs.builder()
 *                 .instance(source.id())
 *                 .build())
 *             .destination(ConnectivityTestDestinationArgs.builder()
 *                 .instance(destination.id())
 *                 .build())
 *             .protocol(&#34;TCP&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Network Management Connectivity Test Addresses
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vpc = new Network(&#34;vpc&#34;);
 * 
 *         var subnet = new Subnetwork(&#34;subnet&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.0.0.0/16&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(vpc.id())
 *             .build());
 * 
 *         var source_addr = new Address(&#34;source-addr&#34;, AddressArgs.builder()        
 *             .subnetwork(subnet.id())
 *             .addressType(&#34;INTERNAL&#34;)
 *             .address(&#34;10.0.42.42&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var dest_addr = new Address(&#34;dest-addr&#34;, AddressArgs.builder()        
 *             .subnetwork(subnet.id())
 *             .addressType(&#34;INTERNAL&#34;)
 *             .address(&#34;10.0.43.43&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var address_test = new ConnectivityTest(&#34;address-test&#34;, ConnectivityTestArgs.builder()        
 *             .source(ConnectivityTestSourceArgs.builder()
 *                 .ipAddress(source_addr.address())
 *                 .projectId(source_addr.project())
 *                 .network(vpc.id())
 *                 .networkType(&#34;GCP_NETWORK&#34;)
 *                 .build())
 *             .destination(ConnectivityTestDestinationArgs.builder()
 *                 .ipAddress(dest_addr.address())
 *                 .projectId(dest_addr.project())
 *                 .network(vpc.id())
 *                 .build())
 *             .protocol(&#34;UDP&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ConnectivityTest can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default projects/{{project}}/locations/global/connectivityTests/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:networkmanagement/connectivityTest:ConnectivityTest default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkmanagement/connectivityTest:ConnectivityTest")
public class ConnectivityTest extends com.pulumi.resources.CustomResource {
    /**
     * The user-supplied description of the Connectivity Test.
     * Maximum of 512 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The user-supplied description of the Connectivity Test.
     * Maximum of 512 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Required. Destination specification of the Connectivity Test.
     * You can use a combination of destination IP address, Compute
     * Engine VM instance, or VPC network to uniquely identify the
     * destination location.
     * Even if the destination IP address is not unique, the source IP
     * location is unique. Usually, the analysis can infer the destination
     * endpoint from route information.
     * If the destination you specify is a VM instance and the instance has
     * multiple network interfaces, then you must also specify either a
     * destination IP address or VPC network to identify the destination
     * interface.
     * A reachability analysis proceeds even if the destination location
     * is ambiguous. However, the result can include endpoints that you
     * don&#39;t intend to test.
     * Structure is documented below.
     * 
     */
    @Export(name="destination", type=ConnectivityTestDestination.class, parameters={})
    private Output<ConnectivityTestDestination> destination;

    /**
     * @return Required. Destination specification of the Connectivity Test.
     * You can use a combination of destination IP address, Compute
     * Engine VM instance, or VPC network to uniquely identify the
     * destination location.
     * Even if the destination IP address is not unique, the source IP
     * location is unique. Usually, the analysis can infer the destination
     * endpoint from route information.
     * If the destination you specify is a VM instance and the instance has
     * multiple network interfaces, then you must also specify either a
     * destination IP address or VPC network to identify the destination
     * interface.
     * A reachability analysis proceeds even if the destination location
     * is ambiguous. However, the result can include endpoints that you
     * don&#39;t intend to test.
     * Structure is documented below.
     * 
     */
    public Output<ConnectivityTestDestination> destination() {
        return this.destination;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Unique name for the connectivity test.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Unique name for the connectivity test.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * IP Protocol of the test. When not provided, &#34;TCP&#34; is assumed.
     * 
     */
    @Export(name="protocol", type=String.class, parameters={})
    private Output</* @Nullable */ String> protocol;

    /**
     * @return IP Protocol of the test. When not provided, &#34;TCP&#34; is assumed.
     * 
     */
    public Output<Optional<String>> protocol() {
        return Codegen.optional(this.protocol);
    }
    /**
     * Other projects that may be relevant for reachability analysis.
     * This is applicable to scenarios where a test can cross project
     * boundaries.
     * 
     */
    @Export(name="relatedProjects", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> relatedProjects;

    /**
     * @return Other projects that may be relevant for reachability analysis.
     * This is applicable to scenarios where a test can cross project
     * boundaries.
     * 
     */
    public Output<Optional<List<String>>> relatedProjects() {
        return Codegen.optional(this.relatedProjects);
    }
    /**
     * Required. Source specification of the Connectivity Test.
     * You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the
     * source location.
     * Examples: If the source IP address is an internal IP address within
     * a Google Cloud Virtual Private Cloud (VPC) network, then you must
     * also specify the VPC network. Otherwise, specify the VM instance,
     * which already contains its internal IP address and VPC network
     * information.
     * If the source of the test is within an on-premises network, then
     * you must provide the destination VPC network.
     * If the source endpoint is a Compute Engine VM instance with multiple
     * network interfaces, the instance itself is not sufficient to
     * identify the endpoint. So, you must also specify the source IP
     * address or VPC network.
     * A reachability analysis proceeds even if the source location is
     * ambiguous. However, the test result may include endpoints that
     * you don&#39;t intend to test.
     * Structure is documented below.
     * 
     */
    @Export(name="source", type=ConnectivityTestSource.class, parameters={})
    private Output<ConnectivityTestSource> source;

    /**
     * @return Required. Source specification of the Connectivity Test.
     * You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the
     * source location.
     * Examples: If the source IP address is an internal IP address within
     * a Google Cloud Virtual Private Cloud (VPC) network, then you must
     * also specify the VPC network. Otherwise, specify the VM instance,
     * which already contains its internal IP address and VPC network
     * information.
     * If the source of the test is within an on-premises network, then
     * you must provide the destination VPC network.
     * If the source endpoint is a Compute Engine VM instance with multiple
     * network interfaces, the instance itself is not sufficient to
     * identify the endpoint. So, you must also specify the source IP
     * address or VPC network.
     * A reachability analysis proceeds even if the source location is
     * ambiguous. However, the test result may include endpoints that
     * you don&#39;t intend to test.
     * Structure is documented below.
     * 
     */
    public Output<ConnectivityTestSource> source() {
        return this.source;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectivityTest(String name) {
        this(name, ConnectivityTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectivityTest(String name, ConnectivityTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectivityTest(String name, ConnectivityTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkmanagement/connectivityTest:ConnectivityTest", name, args == null ? ConnectivityTestArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConnectivityTest(String name, Output<String> id, @Nullable ConnectivityTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkmanagement/connectivityTest:ConnectivityTest", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectivityTest get(String name, Output<String> id, @Nullable ConnectivityTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectivityTest(name, id, state, options);
    }
}
