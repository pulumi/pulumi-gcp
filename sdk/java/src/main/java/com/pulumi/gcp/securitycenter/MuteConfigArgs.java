// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securitycenter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MuteConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MuteConfigArgs Empty = new MuteConfigArgs();

    /**
     * A description of the mute config.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the mute config.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return An expression that defines the filter to apply across create/update
     * events of findings. While creating a filter string, be mindful of
     * the scope in which the mute configuration is being created. E.g.,
     * If a filter contains project = X but is created under the
     * project = Y scope, it might not match any findings.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     * Unique identifier provided by the client within the parent scope.
     * 
     */
    @Import(name="muteConfigId", required=true)
    private Output<String> muteConfigId;

    /**
     * @return Unique identifier provided by the client within the parent scope.
     * 
     */
    public Output<String> muteConfigId() {
        return this.muteConfigId;
    }

    /**
     * Resource name of the new mute configs&#39;s parent. Its format is
     * &#34;organizations/[organization_id]&#34;, &#34;folders/[folder_id]&#34;, or
     * &#34;projects/[project_id]&#34;.
     * 
     * ***
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return Resource name of the new mute configs&#39;s parent. Its format is
     * &#34;organizations/[organization_id]&#34;, &#34;folders/[folder_id]&#34;, or
     * &#34;projects/[project_id]&#34;.
     * 
     * ***
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    private MuteConfigArgs() {}

    private MuteConfigArgs(MuteConfigArgs $) {
        this.description = $.description;
        this.filter = $.filter;
        this.muteConfigId = $.muteConfigId;
        this.parent = $.parent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MuteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MuteConfigArgs $;

        public Builder() {
            $ = new MuteConfigArgs();
        }

        public Builder(MuteConfigArgs defaults) {
            $ = new MuteConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the mute config.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the mute config.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filter An expression that defines the filter to apply across create/update
         * events of findings. While creating a filter string, be mindful of
         * the scope in which the mute configuration is being created. E.g.,
         * If a filter contains project = X but is created under the
         * project = Y scope, it might not match any findings.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter An expression that defines the filter to apply across create/update
         * events of findings. While creating a filter string, be mindful of
         * the scope in which the mute configuration is being created. E.g.,
         * If a filter contains project = X but is created under the
         * project = Y scope, it might not match any findings.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param muteConfigId Unique identifier provided by the client within the parent scope.
         * 
         * @return builder
         * 
         */
        public Builder muteConfigId(Output<String> muteConfigId) {
            $.muteConfigId = muteConfigId;
            return this;
        }

        /**
         * @param muteConfigId Unique identifier provided by the client within the parent scope.
         * 
         * @return builder
         * 
         */
        public Builder muteConfigId(String muteConfigId) {
            return muteConfigId(Output.of(muteConfigId));
        }

        /**
         * @param parent Resource name of the new mute configs&#39;s parent. Its format is
         * &#34;organizations/[organization_id]&#34;, &#34;folders/[folder_id]&#34;, or
         * &#34;projects/[project_id]&#34;.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Resource name of the new mute configs&#39;s parent. Its format is
         * &#34;organizations/[organization_id]&#34;, &#34;folders/[folder_id]&#34;, or
         * &#34;projects/[project_id]&#34;.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        public MuteConfigArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.muteConfigId = Objects.requireNonNull($.muteConfigId, "expected parameter 'muteConfigId' to be non-null");
            $.parent = Objects.requireNonNull($.parent, "expected parameter 'parent' to be non-null");
            return $;
        }
    }

}
