// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.privilegedaccessmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs Empty = new EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs();

    /**
     * The expression field of the IAM condition to be associated with the role. If specified, a user with an active grant for this entitlement would be able to access the resource only if this condition evaluates to true for their request.
     * https://cloud.google.com/iam/docs/conditions-overview#attributes.
     * 
     */
    @Import(name="conditionExpression")
    private @Nullable Output<String> conditionExpression;

    /**
     * @return The expression field of the IAM condition to be associated with the role. If specified, a user with an active grant for this entitlement would be able to access the resource only if this condition evaluates to true for their request.
     * https://cloud.google.com/iam/docs/conditions-overview#attributes.
     * 
     */
    public Optional<Output<String>> conditionExpression() {
        return Optional.ofNullable(this.conditionExpression);
    }

    /**
     * (Output, Beta)
     * Output Only. The ID corresponding to this role binding in the policy binding. This will be unique within an entitlement across time. Gets re-generated each time the entitlement is updated.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return (Output, Beta)
     * Output Only. The ID corresponding to this role binding in the policy binding. This will be unique within an entitlement across time. Gets re-generated each time the entitlement is updated.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * IAM role to be granted. https://cloud.google.com/iam/docs/roles-overview.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return IAM role to be granted. https://cloud.google.com/iam/docs/roles-overview.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs() {}

    private EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs(EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs $) {
        this.conditionExpression = $.conditionExpression;
        this.id = $.id;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs $;

        public Builder() {
            $ = new EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs();
        }

        public Builder(EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs defaults) {
            $ = new EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionExpression The expression field of the IAM condition to be associated with the role. If specified, a user with an active grant for this entitlement would be able to access the resource only if this condition evaluates to true for their request.
         * https://cloud.google.com/iam/docs/conditions-overview#attributes.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(@Nullable Output<String> conditionExpression) {
            $.conditionExpression = conditionExpression;
            return this;
        }

        /**
         * @param conditionExpression The expression field of the IAM condition to be associated with the role. If specified, a user with an active grant for this entitlement would be able to access the resource only if this condition evaluates to true for their request.
         * https://cloud.google.com/iam/docs/conditions-overview#attributes.
         * 
         * @return builder
         * 
         */
        public Builder conditionExpression(String conditionExpression) {
            return conditionExpression(Output.of(conditionExpression));
        }

        /**
         * @param id (Output, Beta)
         * Output Only. The ID corresponding to this role binding in the policy binding. This will be unique within an entitlement across time. Gets re-generated each time the entitlement is updated.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id (Output, Beta)
         * Output Only. The ID corresponding to this role binding in the policy binding. This will be unique within an entitlement across time. Gets re-generated each time the entitlement is updated.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param role IAM role to be granted. https://cloud.google.com/iam/docs/roles-overview.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role IAM role to be granted. https://cloud.google.com/iam/docs/roles-overview.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("EntitlementPrivilegedAccessGcpIamAccessRoleBindingArgs", "role");
            }
            return $;
        }
    }

}
