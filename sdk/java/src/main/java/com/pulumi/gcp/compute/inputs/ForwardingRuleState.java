// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.ForwardingRuleServiceDirectoryRegistrationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleState Empty = new ForwardingRuleState();

    /**
     * This field can be used with internal load balancer or network load balancer
     * when the forwarding rule references a backend service, or with the target
     * field when it references a TargetInstance. Set this to true to
     * allow packets addressed to any ports to be forwarded to the backends configured
     * with this forwarding rule. This can be used when the protocol is TCP/UDP, and it
     * must be set to true when the protocol is set to L3_DEFAULT.
     * Cannot be set if port or portRange are set.
     * 
     */
    @Import(name="allPorts")
    private @Nullable Output<Boolean> allPorts;

    /**
     * @return This field can be used with internal load balancer or network load balancer
     * when the forwarding rule references a backend service, or with the target
     * field when it references a TargetInstance. Set this to true to
     * allow packets addressed to any ports to be forwarded to the backends configured
     * with this forwarding rule. This can be used when the protocol is TCP/UDP, and it
     * must be set to true when the protocol is set to L3_DEFAULT.
     * Cannot be set if port or portRange are set.
     * 
     */
    public Optional<Output<Boolean>> allPorts() {
        return Optional.ofNullable(this.allPorts);
    }

    /**
     * If true, clients can access ILB from all regions.
     * Otherwise only allows from the local region the ILB is located at.
     * 
     */
    @Import(name="allowGlobalAccess")
    private @Nullable Output<Boolean> allowGlobalAccess;

    /**
     * @return If true, clients can access ILB from all regions.
     * Otherwise only allows from the local region the ILB is located at.
     * 
     */
    public Optional<Output<Boolean>> allowGlobalAccess() {
        return Optional.ofNullable(this.allowGlobalAccess);
    }

    /**
     * A BackendService to receive the matched traffic. This is used only
     * for INTERNAL load balancing.
     * 
     */
    @Import(name="backendService")
    private @Nullable Output<String> backendService;

    /**
     * @return A BackendService to receive the matched traffic. This is used only
     * for INTERNAL load balancing.
     * 
     */
    public Optional<Output<String>> backendService() {
        return Optional.ofNullable(this.backendService);
    }

    /**
     * [Output Only] Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return [Output Only] Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP address that this forwarding rule serves. When a client sends
     * traffic to this IP address, the forwarding rule directs the traffic to
     * the target that you specify in the forwarding rule. The
     * loadBalancingScheme and the forwarding rule&#39;s target determine the
     * type of IP address that you can use. For detailed information, refer
     * to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * An address can be specified either by a literal IP address or a
     * reference to an existing Address resource. If you don&#39;t specify a
     * reserved IP address, an ephemeral IP address is assigned.
     * The value must be set to 0.0.0.0 when the target is a targetGrpcProxy
     * that has validateForProxyless field set to true.
     * For Private Service Connect forwarding rules that forward traffic to
     * Google APIs, IP address must be provided.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address that this forwarding rule serves. When a client sends
     * traffic to this IP address, the forwarding rule directs the traffic to
     * the target that you specify in the forwarding rule. The
     * loadBalancingScheme and the forwarding rule&#39;s target determine the
     * type of IP address that you can use. For detailed information, refer
     * to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * An address can be specified either by a literal IP address or a
     * reference to an existing Address resource. If you don&#39;t specify a
     * reserved IP address, an ephemeral IP address is assigned.
     * The value must be set to 0.0.0.0 when the target is a targetGrpcProxy
     * that has validateForProxyless field set to true.
     * For Private Service Connect forwarding rules that forward traffic to
     * Google APIs, IP address must be provided.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The IP protocol to which this rule applies.
     * When the load balancing scheme is INTERNAL, only TCP and UDP are
     * valid.
     * Possible values are `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, and `L3_DEFAULT`.
     * 
     */
    @Import(name="ipProtocol")
    private @Nullable Output<String> ipProtocol;

    /**
     * @return The IP protocol to which this rule applies.
     * When the load balancing scheme is INTERNAL, only TCP and UDP are
     * valid.
     * Possible values are `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, and `L3_DEFAULT`.
     * 
     */
    public Optional<Output<String>> ipProtocol() {
        return Optional.ofNullable(this.ipProtocol);
    }

    /**
     * Indicates whether or not this load balancer can be used
     * as a collector for packet mirroring. To prevent mirroring loops,
     * instances behind this load balancer will not have their traffic
     * mirrored even if a PacketMirroring rule applies to them. This
     * can only be set to true for load balancers that have their
     * loadBalancingScheme set to INTERNAL.
     * 
     */
    @Import(name="isMirroringCollector")
    private @Nullable Output<Boolean> isMirroringCollector;

    /**
     * @return Indicates whether or not this load balancer can be used
     * as a collector for packet mirroring. To prevent mirroring loops,
     * instances behind this load balancer will not have their traffic
     * mirrored even if a PacketMirroring rule applies to them. This
     * can only be set to true for load balancers that have their
     * loadBalancingScheme set to INTERNAL.
     * 
     */
    public Optional<Output<Boolean>> isMirroringCollector() {
        return Optional.ofNullable(this.isMirroringCollector);
    }

    /**
     * Used internally during label updates.
     * 
     */
    @Import(name="labelFingerprint")
    private @Nullable Output<String> labelFingerprint;

    /**
     * @return Used internally during label updates.
     * 
     */
    public Optional<Output<String>> labelFingerprint() {
        return Optional.ofNullable(this.labelFingerprint);
    }

    /**
     * Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * This signifies what the ForwardingRule will be used for and can be
     * EXTERNAL, EXTERNAL_MANAGED, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic
     * Cloud VPN gateways, protocol forwarding to VMs from an external IP address,
     * and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers.
     * INTERNAL is used for protocol forwarding to VMs from an internal IP address,
     * and internal TCP/UDP load balancers.
     * EXTERNAL_MANAGED is used for regional external HTTP(S) load balancers.
     * INTERNAL_MANAGED is used for internal HTTP(S) load balancers.
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
     * 
     */
    @Import(name="loadBalancingScheme")
    private @Nullable Output<String> loadBalancingScheme;

    /**
     * @return This signifies what the ForwardingRule will be used for and can be
     * EXTERNAL, EXTERNAL_MANAGED, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic
     * Cloud VPN gateways, protocol forwarding to VMs from an external IP address,
     * and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers.
     * INTERNAL is used for protocol forwarding to VMs from an internal IP address,
     * and internal TCP/UDP load balancers.
     * EXTERNAL_MANAGED is used for regional external HTTP(S) load balancers.
     * INTERNAL_MANAGED is used for internal HTTP(S) load balancers.
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
     * 
     */
    public Optional<Output<String>> loadBalancingScheme() {
        return Optional.ofNullable(this.loadBalancingScheme);
    }

    /**
     * Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * For internal load balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule. If
     * this field is not specified, the default network will be used.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return For internal load balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule. If
     * this field is not specified, the default network will be used.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The networking tier used for configuring this address. If this field is not
     * specified, it is assumed to be PREMIUM.
     * Possible values are `PREMIUM` and `STANDARD`.
     * 
     */
    @Import(name="networkTier")
    private @Nullable Output<String> networkTier;

    /**
     * @return The networking tier used for configuring this address. If this field is not
     * specified, it is assumed to be PREMIUM.
     * Possible values are `PREMIUM` and `STANDARD`.
     * 
     */
    public Optional<Output<String>> networkTier() {
        return Optional.ofNullable(this.networkTier);
    }

    /**
     * This field is used along with the target field for TargetHttpProxy,
     * TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway,
     * TargetPool, TargetInstance.
     * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
     * addressed to ports in the specified range will be forwarded to target.
     * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
     * disjoint port ranges.
     * Some types of forwarding target have constraints on the acceptable
     * ports:
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    @Import(name="portRange")
    private @Nullable Output<String> portRange;

    /**
     * @return This field is used along with the target field for TargetHttpProxy,
     * TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway,
     * TargetPool, TargetInstance.
     * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
     * addressed to ports in the specified range will be forwarded to target.
     * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
     * disjoint port ranges.
     * Some types of forwarding target have constraints on the acceptable
     * ports:
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     *   1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    public Optional<Output<String>> portRange() {
        return Optional.ofNullable(this.portRange);
    }

    /**
     * This field is used along with internal load balancing and network
     * load balancer when the forwarding rule references a backend service
     * and when protocol is not L3_DEFAULT.
     * A single port or a comma separated list of ports can be configured.
     * Only packets addressed to these ports will be forwarded to the backends
     * configured with this forwarding rule.
     * You can only use one of ports and portRange, or allPorts.
     * The three are mutually exclusive.
     * You may specify a maximum of up to 5 ports, which can be non-contiguous.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return This field is used along with internal load balancing and network
     * load balancer when the forwarding rule references a backend service
     * and when protocol is not L3_DEFAULT.
     * A single port or a comma separated list of ports can be configured.
     * Only packets addressed to these ports will be forwarded to the backends
     * configured with this forwarding rule.
     * You can only use one of ports and portRange, or allPorts.
     * The three are mutually exclusive.
     * You may specify a maximum of up to 5 ports, which can be non-contiguous.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The PSC connection id of the PSC Forwarding Rule.
     * 
     */
    @Import(name="pscConnectionId")
    private @Nullable Output<String> pscConnectionId;

    /**
     * @return The PSC connection id of the PSC Forwarding Rule.
     * 
     */
    public Optional<Output<String>> pscConnectionId() {
        return Optional.ofNullable(this.pscConnectionId);
    }

    /**
     * The PSC connection status of the PSC Forwarding Rule. Possible values: STATUS_UNSPECIFIED, PENDING, ACCEPTED, REJECTED,
     * CLOSED
     * 
     */
    @Import(name="pscConnectionStatus")
    private @Nullable Output<String> pscConnectionStatus;

    /**
     * @return The PSC connection status of the PSC Forwarding Rule. Possible values: STATUS_UNSPECIFIED, PENDING, ACCEPTED, REJECTED,
     * CLOSED
     * 
     */
    public Optional<Output<String>> pscConnectionStatus() {
        return Optional.ofNullable(this.pscConnectionStatus);
    }

    /**
     * A reference to the region where the regional forwarding rule resides.
     * This field is not applicable to global forwarding rules.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return A reference to the region where the regional forwarding rule resides.
     * This field is not applicable to global forwarding rules.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Service Directory resources to register this forwarding rule with. Currently,
     * only supports a single Service Directory resource.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceDirectoryRegistrations")
    private @Nullable Output<List<ForwardingRuleServiceDirectoryRegistrationArgs>> serviceDirectoryRegistrations;

    /**
     * @return Service Directory resources to register this forwarding rule with. Currently,
     * only supports a single Service Directory resource.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ForwardingRuleServiceDirectoryRegistrationArgs>>> serviceDirectoryRegistrations() {
        return Optional.ofNullable(this.serviceDirectoryRegistrations);
    }

    /**
     * An optional prefix to the service name for this Forwarding Rule.
     * If specified, will be the first label of the fully qualified service
     * name.
     * The label must be 1-63 characters long, and comply with RFC1035.
     * Specifically, the label must be 1-63 characters long and match the
     * regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    @Import(name="serviceLabel")
    private @Nullable Output<String> serviceLabel;

    /**
     * @return An optional prefix to the service name for this Forwarding Rule.
     * If specified, will be the first label of the fully qualified service
     * name.
     * The label must be 1-63 characters long, and comply with RFC1035.
     * Specifically, the label must be 1-63 characters long and match the
     * regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    public Optional<Output<String>> serviceLabel() {
        return Optional.ofNullable(this.serviceLabel);
    }

    /**
     * [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal
     * load balancing.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal
     * load balancing.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The subnetwork that the load balanced IP should belong to for this
     * Forwarding Rule.  This field is only used for INTERNAL load balancing.
     * If the network specified is in auto subnet mode, this field is
     * optional. However, if the network is in custom subnet mode, a
     * subnetwork must be specified.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return The subnetwork that the load balanced IP should belong to for this
     * Forwarding Rule.  This field is only used for INTERNAL load balancing.
     * If the network specified is in auto subnet mode, this field is
     * optional. However, if the network is in custom subnet mode, a
     * subnetwork must be specified.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    /**
     * The URL of the target resource to receive the matched traffic.
     * The target must live in the same region as the forwarding rule.
     * The forwarded traffic must be of a type appropriate to the target
     * object.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The URL of the target resource to receive the matched traffic.
     * The target must live in the same region as the forwarding rule.
     * The forwarded traffic must be of a type appropriate to the target
     * object.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private ForwardingRuleState() {}

    private ForwardingRuleState(ForwardingRuleState $) {
        this.allPorts = $.allPorts;
        this.allowGlobalAccess = $.allowGlobalAccess;
        this.backendService = $.backendService;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.ipAddress = $.ipAddress;
        this.ipProtocol = $.ipProtocol;
        this.isMirroringCollector = $.isMirroringCollector;
        this.labelFingerprint = $.labelFingerprint;
        this.labels = $.labels;
        this.loadBalancingScheme = $.loadBalancingScheme;
        this.name = $.name;
        this.network = $.network;
        this.networkTier = $.networkTier;
        this.portRange = $.portRange;
        this.ports = $.ports;
        this.project = $.project;
        this.pscConnectionId = $.pscConnectionId;
        this.pscConnectionStatus = $.pscConnectionStatus;
        this.region = $.region;
        this.selfLink = $.selfLink;
        this.serviceDirectoryRegistrations = $.serviceDirectoryRegistrations;
        this.serviceLabel = $.serviceLabel;
        this.serviceName = $.serviceName;
        this.subnetwork = $.subnetwork;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleState $;

        public Builder() {
            $ = new ForwardingRuleState();
        }

        public Builder(ForwardingRuleState defaults) {
            $ = new ForwardingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allPorts This field can be used with internal load balancer or network load balancer
         * when the forwarding rule references a backend service, or with the target
         * field when it references a TargetInstance. Set this to true to
         * allow packets addressed to any ports to be forwarded to the backends configured
         * with this forwarding rule. This can be used when the protocol is TCP/UDP, and it
         * must be set to true when the protocol is set to L3_DEFAULT.
         * Cannot be set if port or portRange are set.
         * 
         * @return builder
         * 
         */
        public Builder allPorts(@Nullable Output<Boolean> allPorts) {
            $.allPorts = allPorts;
            return this;
        }

        /**
         * @param allPorts This field can be used with internal load balancer or network load balancer
         * when the forwarding rule references a backend service, or with the target
         * field when it references a TargetInstance. Set this to true to
         * allow packets addressed to any ports to be forwarded to the backends configured
         * with this forwarding rule. This can be used when the protocol is TCP/UDP, and it
         * must be set to true when the protocol is set to L3_DEFAULT.
         * Cannot be set if port or portRange are set.
         * 
         * @return builder
         * 
         */
        public Builder allPorts(Boolean allPorts) {
            return allPorts(Output.of(allPorts));
        }

        /**
         * @param allowGlobalAccess If true, clients can access ILB from all regions.
         * Otherwise only allows from the local region the ILB is located at.
         * 
         * @return builder
         * 
         */
        public Builder allowGlobalAccess(@Nullable Output<Boolean> allowGlobalAccess) {
            $.allowGlobalAccess = allowGlobalAccess;
            return this;
        }

        /**
         * @param allowGlobalAccess If true, clients can access ILB from all regions.
         * Otherwise only allows from the local region the ILB is located at.
         * 
         * @return builder
         * 
         */
        public Builder allowGlobalAccess(Boolean allowGlobalAccess) {
            return allowGlobalAccess(Output.of(allowGlobalAccess));
        }

        /**
         * @param backendService A BackendService to receive the matched traffic. This is used only
         * for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder backendService(@Nullable Output<String> backendService) {
            $.backendService = backendService;
            return this;
        }

        /**
         * @param backendService A BackendService to receive the matched traffic. This is used only
         * for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder backendService(String backendService) {
            return backendService(Output.of(backendService));
        }

        /**
         * @param creationTimestamp [Output Only] Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp [Output Only] Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipAddress The IP address that this forwarding rule serves. When a client sends
         * traffic to this IP address, the forwarding rule directs the traffic to
         * the target that you specify in the forwarding rule. The
         * loadBalancingScheme and the forwarding rule&#39;s target determine the
         * type of IP address that you can use. For detailed information, refer
         * to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * An address can be specified either by a literal IP address or a
         * reference to an existing Address resource. If you don&#39;t specify a
         * reserved IP address, an ephemeral IP address is assigned.
         * The value must be set to 0.0.0.0 when the target is a targetGrpcProxy
         * that has validateForProxyless field set to true.
         * For Private Service Connect forwarding rules that forward traffic to
         * Google APIs, IP address must be provided.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address that this forwarding rule serves. When a client sends
         * traffic to this IP address, the forwarding rule directs the traffic to
         * the target that you specify in the forwarding rule. The
         * loadBalancingScheme and the forwarding rule&#39;s target determine the
         * type of IP address that you can use. For detailed information, refer
         * to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * An address can be specified either by a literal IP address or a
         * reference to an existing Address resource. If you don&#39;t specify a
         * reserved IP address, an ephemeral IP address is assigned.
         * The value must be set to 0.0.0.0 when the target is a targetGrpcProxy
         * that has validateForProxyless field set to true.
         * For Private Service Connect forwarding rules that forward traffic to
         * Google APIs, IP address must be provided.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipProtocol The IP protocol to which this rule applies.
         * When the load balancing scheme is INTERNAL, only TCP and UDP are
         * valid.
         * Possible values are `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, and `L3_DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The IP protocol to which this rule applies.
         * When the load balancing scheme is INTERNAL, only TCP and UDP are
         * valid.
         * Possible values are `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, and `L3_DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param isMirroringCollector Indicates whether or not this load balancer can be used
         * as a collector for packet mirroring. To prevent mirroring loops,
         * instances behind this load balancer will not have their traffic
         * mirrored even if a PacketMirroring rule applies to them. This
         * can only be set to true for load balancers that have their
         * loadBalancingScheme set to INTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder isMirroringCollector(@Nullable Output<Boolean> isMirroringCollector) {
            $.isMirroringCollector = isMirroringCollector;
            return this;
        }

        /**
         * @param isMirroringCollector Indicates whether or not this load balancer can be used
         * as a collector for packet mirroring. To prevent mirroring loops,
         * instances behind this load balancer will not have their traffic
         * mirrored even if a PacketMirroring rule applies to them. This
         * can only be set to true for load balancers that have their
         * loadBalancingScheme set to INTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder isMirroringCollector(Boolean isMirroringCollector) {
            return isMirroringCollector(Output.of(isMirroringCollector));
        }

        /**
         * @param labelFingerprint Used internally during label updates.
         * 
         * @return builder
         * 
         */
        public Builder labelFingerprint(@Nullable Output<String> labelFingerprint) {
            $.labelFingerprint = labelFingerprint;
            return this;
        }

        /**
         * @param labelFingerprint Used internally during label updates.
         * 
         * @return builder
         * 
         */
        public Builder labelFingerprint(String labelFingerprint) {
            return labelFingerprint(Output.of(labelFingerprint));
        }

        /**
         * @param labels Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param loadBalancingScheme This signifies what the ForwardingRule will be used for and can be
         * EXTERNAL, EXTERNAL_MANAGED, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic
         * Cloud VPN gateways, protocol forwarding to VMs from an external IP address,
         * and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers.
         * INTERNAL is used for protocol forwarding to VMs from an internal IP address,
         * and internal TCP/UDP load balancers.
         * EXTERNAL_MANAGED is used for regional external HTTP(S) load balancers.
         * INTERNAL_MANAGED is used for internal HTTP(S) load balancers.
         * Default value is `EXTERNAL`.
         * Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            $.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        /**
         * @param loadBalancingScheme This signifies what the ForwardingRule will be used for and can be
         * EXTERNAL, EXTERNAL_MANAGED, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic
         * Cloud VPN gateways, protocol forwarding to VMs from an external IP address,
         * and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers.
         * INTERNAL is used for protocol forwarding to VMs from an internal IP address,
         * and internal TCP/UDP load balancers.
         * EXTERNAL_MANAGED is used for regional external HTTP(S) load balancers.
         * INTERNAL_MANAGED is used for internal HTTP(S) load balancers.
         * Default value is `EXTERNAL`.
         * Possible values are `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, and `INTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            return loadBalancingScheme(Output.of(loadBalancingScheme));
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network For internal load balancing, this field identifies the network that
         * the load balanced IP should belong to for this Forwarding Rule. If
         * this field is not specified, the default network will be used.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network For internal load balancing, this field identifies the network that
         * the load balanced IP should belong to for this Forwarding Rule. If
         * this field is not specified, the default network will be used.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param networkTier The networking tier used for configuring this address. If this field is not
         * specified, it is assumed to be PREMIUM.
         * Possible values are `PREMIUM` and `STANDARD`.
         * 
         * @return builder
         * 
         */
        public Builder networkTier(@Nullable Output<String> networkTier) {
            $.networkTier = networkTier;
            return this;
        }

        /**
         * @param networkTier The networking tier used for configuring this address. If this field is not
         * specified, it is assumed to be PREMIUM.
         * Possible values are `PREMIUM` and `STANDARD`.
         * 
         * @return builder
         * 
         */
        public Builder networkTier(String networkTier) {
            return networkTier(Output.of(networkTier));
        }

        /**
         * @param portRange This field is used along with the target field for TargetHttpProxy,
         * TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway,
         * TargetPool, TargetInstance.
         * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
         * addressed to ports in the specified range will be forwarded to target.
         * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
         * disjoint port ranges.
         * Some types of forwarding target have constraints on the acceptable
         * ports:
         * * TargetHttpProxy: 80, 8080
         * * TargetHttpsProxy: 443
         * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         *   1883, 5222
         * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         *   1883, 5222
         * * TargetVpnGateway: 500, 4500
         * 
         * @return builder
         * 
         */
        public Builder portRange(@Nullable Output<String> portRange) {
            $.portRange = portRange;
            return this;
        }

        /**
         * @param portRange This field is used along with the target field for TargetHttpProxy,
         * TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway,
         * TargetPool, TargetInstance.
         * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
         * addressed to ports in the specified range will be forwarded to target.
         * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
         * disjoint port ranges.
         * Some types of forwarding target have constraints on the acceptable
         * ports:
         * * TargetHttpProxy: 80, 8080
         * * TargetHttpsProxy: 443
         * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         *   1883, 5222
         * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
         *   1883, 5222
         * * TargetVpnGateway: 500, 4500
         * 
         * @return builder
         * 
         */
        public Builder portRange(String portRange) {
            return portRange(Output.of(portRange));
        }

        /**
         * @param ports This field is used along with internal load balancing and network
         * load balancer when the forwarding rule references a backend service
         * and when protocol is not L3_DEFAULT.
         * A single port or a comma separated list of ports can be configured.
         * Only packets addressed to these ports will be forwarded to the backends
         * configured with this forwarding rule.
         * You can only use one of ports and portRange, or allPorts.
         * The three are mutually exclusive.
         * You may specify a maximum of up to 5 ports, which can be non-contiguous.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports This field is used along with internal load balancing and network
         * load balancer when the forwarding rule references a backend service
         * and when protocol is not L3_DEFAULT.
         * A single port or a comma separated list of ports can be configured.
         * Only packets addressed to these ports will be forwarded to the backends
         * configured with this forwarding rule.
         * You can only use one of ports and portRange, or allPorts.
         * The three are mutually exclusive.
         * You may specify a maximum of up to 5 ports, which can be non-contiguous.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports This field is used along with internal load balancing and network
         * load balancer when the forwarding rule references a backend service
         * and when protocol is not L3_DEFAULT.
         * A single port or a comma separated list of ports can be configured.
         * Only packets addressed to these ports will be forwarded to the backends
         * configured with this forwarding rule.
         * You can only use one of ports and portRange, or allPorts.
         * The three are mutually exclusive.
         * You may specify a maximum of up to 5 ports, which can be non-contiguous.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pscConnectionId The PSC connection id of the PSC Forwarding Rule.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(@Nullable Output<String> pscConnectionId) {
            $.pscConnectionId = pscConnectionId;
            return this;
        }

        /**
         * @param pscConnectionId The PSC connection id of the PSC Forwarding Rule.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(String pscConnectionId) {
            return pscConnectionId(Output.of(pscConnectionId));
        }

        /**
         * @param pscConnectionStatus The PSC connection status of the PSC Forwarding Rule. Possible values: STATUS_UNSPECIFIED, PENDING, ACCEPTED, REJECTED,
         * CLOSED
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionStatus(@Nullable Output<String> pscConnectionStatus) {
            $.pscConnectionStatus = pscConnectionStatus;
            return this;
        }

        /**
         * @param pscConnectionStatus The PSC connection status of the PSC Forwarding Rule. Possible values: STATUS_UNSPECIFIED, PENDING, ACCEPTED, REJECTED,
         * CLOSED
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionStatus(String pscConnectionStatus) {
            return pscConnectionStatus(Output.of(pscConnectionStatus));
        }

        /**
         * @param region A reference to the region where the regional forwarding rule resides.
         * This field is not applicable to global forwarding rules.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A reference to the region where the regional forwarding rule resides.
         * This field is not applicable to global forwarding rules.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param serviceDirectoryRegistrations Service Directory resources to register this forwarding rule with. Currently,
         * only supports a single Service Directory resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryRegistrations(@Nullable Output<List<ForwardingRuleServiceDirectoryRegistrationArgs>> serviceDirectoryRegistrations) {
            $.serviceDirectoryRegistrations = serviceDirectoryRegistrations;
            return this;
        }

        /**
         * @param serviceDirectoryRegistrations Service Directory resources to register this forwarding rule with. Currently,
         * only supports a single Service Directory resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryRegistrations(List<ForwardingRuleServiceDirectoryRegistrationArgs> serviceDirectoryRegistrations) {
            return serviceDirectoryRegistrations(Output.of(serviceDirectoryRegistrations));
        }

        /**
         * @param serviceDirectoryRegistrations Service Directory resources to register this forwarding rule with. Currently,
         * only supports a single Service Directory resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryRegistrations(ForwardingRuleServiceDirectoryRegistrationArgs... serviceDirectoryRegistrations) {
            return serviceDirectoryRegistrations(List.of(serviceDirectoryRegistrations));
        }

        /**
         * @param serviceLabel An optional prefix to the service name for this Forwarding Rule.
         * If specified, will be the first label of the fully qualified service
         * name.
         * The label must be 1-63 characters long, and comply with RFC1035.
         * Specifically, the label must be 1-63 characters long and match the
         * regular expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters
         * must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceLabel(@Nullable Output<String> serviceLabel) {
            $.serviceLabel = serviceLabel;
            return this;
        }

        /**
         * @param serviceLabel An optional prefix to the service name for this Forwarding Rule.
         * If specified, will be the first label of the fully qualified service
         * name.
         * The label must be 1-63 characters long, and comply with RFC1035.
         * Specifically, the label must be 1-63 characters long and match the
         * regular expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters
         * must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceLabel(String serviceLabel) {
            return serviceLabel(Output.of(serviceLabel));
        }

        /**
         * @param serviceName [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal
         * load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal
         * load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param subnetwork The subnetwork that the load balanced IP should belong to for this
         * Forwarding Rule.  This field is only used for INTERNAL load balancing.
         * If the network specified is in auto subnet mode, this field is
         * optional. However, if the network is in custom subnet mode, a
         * subnetwork must be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork The subnetwork that the load balanced IP should belong to for this
         * Forwarding Rule.  This field is only used for INTERNAL load balancing.
         * If the network specified is in auto subnet mode, this field is
         * optional. However, if the network is in custom subnet mode, a
         * subnetwork must be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param target The URL of the target resource to receive the matched traffic.
         * The target must live in the same region as the forwarding rule.
         * The forwarded traffic must be of a type appropriate to the target
         * object.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The URL of the target resource to receive the matched traffic.
         * The target must live in the same region as the forwarding rule.
         * The forwarded traffic must be of a type appropriate to the target
         * object.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public ForwardingRuleState build() {
            return $;
        }
    }

}
