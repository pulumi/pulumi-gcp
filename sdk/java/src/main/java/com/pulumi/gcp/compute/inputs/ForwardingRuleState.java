// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.ForwardingRuleServiceDirectoryRegistrationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleState Empty = new ForwardingRuleState();

    /**
     * This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By internal TCP/UDP load balancers, backend service-based network load
     *   balancers, and internal and external protocol forwarding.
     * 
     * Set this field to true to allow packets addressed to any port or packets
     * lacking destination port information (for example, UDP fragments after the
     * first fragment) to be forwarded to the backends configured with this
     * forwarding rule.
     * The `ports`, `port_range`, and
     * `allPorts` fields are mutually exclusive.
     * 
     */
    @Import(name="allPorts")
    private @Nullable Output<Boolean> allPorts;

    /**
     * @return This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By internal TCP/UDP load balancers, backend service-based network load
     *   balancers, and internal and external protocol forwarding.
     * 
     * Set this field to true to allow packets addressed to any port or packets
     * lacking destination port information (for example, UDP fragments after the
     * first fragment) to be forwarded to the backends configured with this
     * forwarding rule.
     * The `ports`, `port_range`, and
     * `allPorts` fields are mutually exclusive.
     * 
     */
    public Optional<Output<Boolean>> allPorts() {
        return Optional.ofNullable(this.allPorts);
    }

    /**
     * This field is used along with the `backend_service` field for
     * internal load balancing or with the `target` field for internal
     * TargetInstance.
     * If the field is set to `TRUE`, clients can access ILB from all
     * regions.
     * Otherwise only allows access from clients in the same region as the
     * internal load balancer.
     * 
     */
    @Import(name="allowGlobalAccess")
    private @Nullable Output<Boolean> allowGlobalAccess;

    /**
     * @return This field is used along with the `backend_service` field for
     * internal load balancing or with the `target` field for internal
     * TargetInstance.
     * If the field is set to `TRUE`, clients can access ILB from all
     * regions.
     * Otherwise only allows access from clients in the same region as the
     * internal load balancer.
     * 
     */
    public Optional<Output<Boolean>> allowGlobalAccess() {
        return Optional.ofNullable(this.allowGlobalAccess);
    }

    /**
     * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     * 
     */
    @Import(name="allowPscGlobalAccess")
    private @Nullable Output<Boolean> allowPscGlobalAccess;

    /**
     * @return This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     * 
     */
    public Optional<Output<Boolean>> allowPscGlobalAccess() {
        return Optional.ofNullable(this.allowPscGlobalAccess);
    }

    /**
     * Identifies the backend service to which the forwarding rule sends traffic.
     * Required for Internal TCP/UDP Load Balancing and Network Load Balancing;
     * must be omitted for all other load balancer types.
     * 
     */
    @Import(name="backendService")
    private @Nullable Output<String> backendService;

    /**
     * @return Identifies the backend service to which the forwarding rule sends traffic.
     * Required for Internal TCP/UDP Load Balancing and Network Load Balancing;
     * must be omitted for all other load balancer types.
     * 
     */
    public Optional<Output<String>> backendService() {
        return Optional.ofNullable(this.backendService);
    }

    /**
     * [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
     * 
     */
    @Import(name="baseForwardingRule")
    private @Nullable Output<String> baseForwardingRule;

    /**
     * @return [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
     * 
     */
    public Optional<Output<String>> baseForwardingRule() {
        return Optional.ofNullable(this.baseForwardingRule);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target` or `backendService`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     *   `validateForProxyless` is set to `true`, the
     *   `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     *   bundle, you must specify an `IPAddress`.
     * 
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     * 
     * The forwarding rule&#39;s `target` or `backendService`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target` or `backendService`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     *   `validateForProxyless` is set to `true`, the
     *   `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     *   bundle, you must specify an `IPAddress`.
     * 
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     * 
     * The forwarding rule&#39;s `target` or `backendService`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, `L3_DEFAULT`.
     * 
     */
    @Import(name="ipProtocol")
    private @Nullable Output<String> ipProtocol;

    /**
     * @return The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, `L3_DEFAULT`.
     * 
     */
    public Optional<Output<String>> ipProtocol() {
        return Optional.ofNullable(this.ipProtocol);
    }

    /**
     * Indicates whether or not this load balancer can be used as a collector for
     * packet mirroring. To prevent mirroring loops, instances behind this
     * load balancer will not have their traffic mirrored even if a
     * `PacketMirroring` rule applies to them.
     * This can only be set to true for load balancers that have their
     * `loadBalancingScheme` set to `INTERNAL`.
     * 
     */
    @Import(name="isMirroringCollector")
    private @Nullable Output<Boolean> isMirroringCollector;

    /**
     * @return Indicates whether or not this load balancer can be used as a collector for
     * packet mirroring. To prevent mirroring loops, instances behind this
     * load balancer will not have their traffic mirrored even if a
     * `PacketMirroring` rule applies to them.
     * This can only be set to true for load balancers that have their
     * `loadBalancingScheme` set to `INTERNAL`.
     * 
     */
    public Optional<Output<Boolean>> isMirroringCollector() {
        return Optional.ofNullable(this.isMirroringCollector);
    }

    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    @Import(name="labelFingerprint")
    private @Nullable Output<String> labelFingerprint;

    /**
     * @return The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    public Optional<Output<String>> labelFingerprint() {
        return Optional.ofNullable(this.labelFingerprint);
    }

    /**
     * Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
     * 
     */
    @Import(name="loadBalancingScheme")
    private @Nullable Output<String> loadBalancingScheme;

    /**
     * @return Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
     * 
     */
    public Optional<Output<String>> loadBalancingScheme() {
        return Optional.ofNullable(this.loadBalancingScheme);
    }

    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * This signifies the networking tier used for configuring
     * this load balancer and can only take the following values:
     * `PREMIUM`, `STANDARD`.
     * For regional ForwardingRule, the valid values are `PREMIUM` and
     * `STANDARD`. For GlobalForwardingRule, the valid value is
     * `PREMIUM`.
     * If this field is not specified, it is assumed to be `PREMIUM`.
     * If `IPAddress` is specified, this value must be equal to the
     * networkTier of the Address.
     * Possible values are: `PREMIUM`, `STANDARD`.
     * 
     */
    @Import(name="networkTier")
    private @Nullable Output<String> networkTier;

    /**
     * @return This signifies the networking tier used for configuring
     * this load balancer and can only take the following values:
     * `PREMIUM`, `STANDARD`.
     * For regional ForwardingRule, the valid values are `PREMIUM` and
     * `STANDARD`. For GlobalForwardingRule, the valid value is
     * `PREMIUM`.
     * If this field is not specified, it is assumed to be `PREMIUM`.
     * If `IPAddress` is specified, this value must be equal to the
     * networkTier of the Address.
     * Possible values are: `PREMIUM`, `STANDARD`.
     * 
     */
    public Optional<Output<String>> networkTier() {
        return Optional.ofNullable(this.networkTier);
    }

    /**
     * This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By backend service-based network load balancers, target pool-based
     *   network load balancers, internal proxy load balancers, external proxy load
     *   balancers, Traffic Director, external protocol forwarding, and Classic VPN.
     *   Some products have restrictions on what ports can be used. See
     *   [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     *   for details.
     * 
     * Only packets addressed to ports in the specified range will be forwarded to
     * the backends configured with this forwarding rule.
     * The `ports` and `port_range` fields are mutually exclusive.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot have
     * overlapping `portRange`s.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
     * pair, and cannot have overlapping `portRange`s.
     * 
     */
    @Import(name="portRange")
    private @Nullable Output<String> portRange;

    /**
     * @return This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By backend service-based network load balancers, target pool-based
     *   network load balancers, internal proxy load balancers, external proxy load
     *   balancers, Traffic Director, external protocol forwarding, and Classic VPN.
     *   Some products have restrictions on what ports can be used. See
     *   [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     *   for details.
     * 
     * Only packets addressed to ports in the specified range will be forwarded to
     * the backends configured with this forwarding rule.
     * The `ports` and `port_range` fields are mutually exclusive.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot have
     * overlapping `portRange`s.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
     * pair, and cannot have overlapping `portRange`s.
     * 
     */
    public Optional<Output<String>> portRange() {
        return Optional.ofNullable(this.portRange);
    }

    /**
     * This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By internal TCP/UDP load balancers, backend service-based network load
     *   balancers, and internal protocol forwarding.
     * 
     * You can specify a list of up to five ports by number, separated by commas.
     * The ports can be contiguous or discontiguous. Only packets addressed to
     * these ports will be forwarded to the backends configured with this
     * forwarding rule.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot share any values
     * defined in `ports`.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
     * pair, and cannot share any values defined in `ports`.
     * The `ports` and `port_range` fields are mutually exclusive.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By internal TCP/UDP load balancers, backend service-based network load
     *   balancers, and internal protocol forwarding.
     * 
     * You can specify a list of up to five ports by number, separated by commas.
     * The ports can be contiguous or discontiguous. Only packets addressed to
     * these ports will be forwarded to the backends configured with this
     * forwarding rule.
     * For external forwarding rules, two or more forwarding rules cannot use the
     * same `[IPAddress, IPProtocol]` pair, and cannot share any values
     * defined in `ports`.
     * For internal forwarding rules within the same VPC network, two or more
     * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
     * pair, and cannot share any values defined in `ports`.
     * The `ports` and `port_range` fields are mutually exclusive.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The PSC connection id of the PSC Forwarding Rule.
     * 
     */
    @Import(name="pscConnectionId")
    private @Nullable Output<String> pscConnectionId;

    /**
     * @return The PSC connection id of the PSC Forwarding Rule.
     * 
     */
    public Optional<Output<String>> pscConnectionId() {
        return Optional.ofNullable(this.pscConnectionId);
    }

    /**
     * The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
     * 
     */
    @Import(name="pscConnectionStatus")
    private @Nullable Output<String> pscConnectionStatus;

    /**
     * @return The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
     * 
     */
    public Optional<Output<String>> pscConnectionStatus() {
        return Optional.ofNullable(this.pscConnectionStatus);
    }

    /**
     * A reference to the region where the regional forwarding rule resides.
     * This field is not applicable to global forwarding rules.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return A reference to the region where the regional forwarding rule resides.
     * This field is not applicable to global forwarding rules.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Service Directory resources to register this forwarding rule with.
     * Currently, only supports a single Service Directory resource.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceDirectoryRegistrations")
    private @Nullable Output<List<ForwardingRuleServiceDirectoryRegistrationArgs>> serviceDirectoryRegistrations;

    /**
     * @return Service Directory resources to register this forwarding rule with.
     * Currently, only supports a single Service Directory resource.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ForwardingRuleServiceDirectoryRegistrationArgs>>> serviceDirectoryRegistrations() {
        return Optional.ofNullable(this.serviceDirectoryRegistrations);
    }

    /**
     * An optional prefix to the service name for this Forwarding Rule.
     * If specified, will be the first label of the fully qualified service
     * name.
     * The label must be 1-63 characters long, and comply with RFC1035.
     * Specifically, the label must be 1-63 characters long and match the
     * regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    @Import(name="serviceLabel")
    private @Nullable Output<String> serviceLabel;

    /**
     * @return An optional prefix to the service name for this Forwarding Rule.
     * If specified, will be the first label of the fully qualified service
     * name.
     * The label must be 1-63 characters long, and comply with RFC1035.
     * Specifically, the label must be 1-63 characters long and match the
     * regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters
     * must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    public Optional<Output<String>> serviceLabel() {
        return Optional.ofNullable(this.serviceLabel);
    }

    /**
     * The internal fully qualified service name for this Forwarding Rule.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal fully qualified service name for this Forwarding Rule.
     * This field is only used for INTERNAL load balancing.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     * 
     */
    @Import(name="sourceIpRanges")
    private @Nullable Output<List<String>> sourceIpRanges;

    /**
     * @return If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     * 
     */
    public Optional<Output<List<String>>> sourceIpRanges() {
        return Optional.ofNullable(this.sourceIpRanges);
    }

    /**
     * This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    /**
     * The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     * 
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     * 
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private ForwardingRuleState() {}

    private ForwardingRuleState(ForwardingRuleState $) {
        this.allPorts = $.allPorts;
        this.allowGlobalAccess = $.allowGlobalAccess;
        this.allowPscGlobalAccess = $.allowPscGlobalAccess;
        this.backendService = $.backendService;
        this.baseForwardingRule = $.baseForwardingRule;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.ipAddress = $.ipAddress;
        this.ipProtocol = $.ipProtocol;
        this.isMirroringCollector = $.isMirroringCollector;
        this.labelFingerprint = $.labelFingerprint;
        this.labels = $.labels;
        this.loadBalancingScheme = $.loadBalancingScheme;
        this.name = $.name;
        this.network = $.network;
        this.networkTier = $.networkTier;
        this.portRange = $.portRange;
        this.ports = $.ports;
        this.project = $.project;
        this.pscConnectionId = $.pscConnectionId;
        this.pscConnectionStatus = $.pscConnectionStatus;
        this.region = $.region;
        this.selfLink = $.selfLink;
        this.serviceDirectoryRegistrations = $.serviceDirectoryRegistrations;
        this.serviceLabel = $.serviceLabel;
        this.serviceName = $.serviceName;
        this.sourceIpRanges = $.sourceIpRanges;
        this.subnetwork = $.subnetwork;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleState $;

        public Builder() {
            $ = new ForwardingRuleState();
        }

        public Builder(ForwardingRuleState defaults) {
            $ = new ForwardingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allPorts This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By internal TCP/UDP load balancers, backend service-based network load
         *   balancers, and internal and external protocol forwarding.
         * 
         * Set this field to true to allow packets addressed to any port or packets
         * lacking destination port information (for example, UDP fragments after the
         * first fragment) to be forwarded to the backends configured with this
         * forwarding rule.
         * The `ports`, `port_range`, and
         * `allPorts` fields are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder allPorts(@Nullable Output<Boolean> allPorts) {
            $.allPorts = allPorts;
            return this;
        }

        /**
         * @param allPorts This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By internal TCP/UDP load balancers, backend service-based network load
         *   balancers, and internal and external protocol forwarding.
         * 
         * Set this field to true to allow packets addressed to any port or packets
         * lacking destination port information (for example, UDP fragments after the
         * first fragment) to be forwarded to the backends configured with this
         * forwarding rule.
         * The `ports`, `port_range`, and
         * `allPorts` fields are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder allPorts(Boolean allPorts) {
            return allPorts(Output.of(allPorts));
        }

        /**
         * @param allowGlobalAccess This field is used along with the `backend_service` field for
         * internal load balancing or with the `target` field for internal
         * TargetInstance.
         * If the field is set to `TRUE`, clients can access ILB from all
         * regions.
         * Otherwise only allows access from clients in the same region as the
         * internal load balancer.
         * 
         * @return builder
         * 
         */
        public Builder allowGlobalAccess(@Nullable Output<Boolean> allowGlobalAccess) {
            $.allowGlobalAccess = allowGlobalAccess;
            return this;
        }

        /**
         * @param allowGlobalAccess This field is used along with the `backend_service` field for
         * internal load balancing or with the `target` field for internal
         * TargetInstance.
         * If the field is set to `TRUE`, clients can access ILB from all
         * regions.
         * Otherwise only allows access from clients in the same region as the
         * internal load balancer.
         * 
         * @return builder
         * 
         */
        public Builder allowGlobalAccess(Boolean allowGlobalAccess) {
            return allowGlobalAccess(Output.of(allowGlobalAccess));
        }

        /**
         * @param allowPscGlobalAccess This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
         * 
         * @return builder
         * 
         */
        public Builder allowPscGlobalAccess(@Nullable Output<Boolean> allowPscGlobalAccess) {
            $.allowPscGlobalAccess = allowPscGlobalAccess;
            return this;
        }

        /**
         * @param allowPscGlobalAccess This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
         * 
         * @return builder
         * 
         */
        public Builder allowPscGlobalAccess(Boolean allowPscGlobalAccess) {
            return allowPscGlobalAccess(Output.of(allowPscGlobalAccess));
        }

        /**
         * @param backendService Identifies the backend service to which the forwarding rule sends traffic.
         * Required for Internal TCP/UDP Load Balancing and Network Load Balancing;
         * must be omitted for all other load balancer types.
         * 
         * @return builder
         * 
         */
        public Builder backendService(@Nullable Output<String> backendService) {
            $.backendService = backendService;
            return this;
        }

        /**
         * @param backendService Identifies the backend service to which the forwarding rule sends traffic.
         * Required for Internal TCP/UDP Load Balancing and Network Load Balancing;
         * must be omitted for all other load balancer types.
         * 
         * @return builder
         * 
         */
        public Builder backendService(String backendService) {
            return backendService(Output.of(backendService));
        }

        /**
         * @param baseForwardingRule [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
         * 
         * @return builder
         * 
         */
        public Builder baseForwardingRule(@Nullable Output<String> baseForwardingRule) {
            $.baseForwardingRule = baseForwardingRule;
            return this;
        }

        /**
         * @param baseForwardingRule [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
         * 
         * @return builder
         * 
         */
        public Builder baseForwardingRule(String baseForwardingRule) {
            return baseForwardingRule(Output.of(baseForwardingRule));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipAddress IP address for which this forwarding rule accepts traffic. When a client
         * sends traffic to this IP address, the forwarding rule directs the traffic
         * to the referenced `target` or `backendService`.
         * While creating a forwarding rule, specifying an `IPAddress` is
         * required under the following circumstances:
         * * When the `target` is set to `targetGrpcProxy` and
         *   `validateForProxyless` is set to `true`, the
         *   `IPAddress` should be set to `0.0.0.0`.
         * * When the `target` is a Private Service Connect Google APIs
         *   bundle, you must specify an `IPAddress`.
         * 
         * Otherwise, you can optionally specify an IP address that references an
         * existing static (reserved) IP address resource. When omitted, Google Cloud
         * assigns an ephemeral IP address.
         * Use one of the following formats to specify an IP address while creating a
         * forwarding rule:
         * * IP address number, as in `100.1.2.3`
         * * IPv6 address range, as in `2600:1234::/96`
         * * Full resource URL, as in
         *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
         * * Partial URL or by name, as in:
         * * `projects/project_id/regions/region/addresses/address-name`
         * * `regions/region/addresses/address-name`
         * * `global/addresses/address-name`
         * * `address-name`
         * 
         * The forwarding rule&#39;s `target` or `backendService`,
         * and in most cases, also the `loadBalancingScheme`, determine the
         * type of IP address that you can use. For detailed information, see
         * [IP address
         * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * When reading an `IPAddress`, the API always returns the IP
         * address number.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address for which this forwarding rule accepts traffic. When a client
         * sends traffic to this IP address, the forwarding rule directs the traffic
         * to the referenced `target` or `backendService`.
         * While creating a forwarding rule, specifying an `IPAddress` is
         * required under the following circumstances:
         * * When the `target` is set to `targetGrpcProxy` and
         *   `validateForProxyless` is set to `true`, the
         *   `IPAddress` should be set to `0.0.0.0`.
         * * When the `target` is a Private Service Connect Google APIs
         *   bundle, you must specify an `IPAddress`.
         * 
         * Otherwise, you can optionally specify an IP address that references an
         * existing static (reserved) IP address resource. When omitted, Google Cloud
         * assigns an ephemeral IP address.
         * Use one of the following formats to specify an IP address while creating a
         * forwarding rule:
         * * IP address number, as in `100.1.2.3`
         * * IPv6 address range, as in `2600:1234::/96`
         * * Full resource URL, as in
         *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
         * * Partial URL or by name, as in:
         * * `projects/project_id/regions/region/addresses/address-name`
         * * `regions/region/addresses/address-name`
         * * `global/addresses/address-name`
         * * `address-name`
         * 
         * The forwarding rule&#39;s `target` or `backendService`,
         * and in most cases, also the `loadBalancingScheme`, determine the
         * type of IP address that you can use. For detailed information, see
         * [IP address
         * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * When reading an `IPAddress`, the API always returns the IP
         * address number.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipProtocol The IP protocol to which this rule applies.
         * For protocol forwarding, valid
         * options are `TCP`, `UDP`, `ESP`,
         * `AH`, `SCTP`, `ICMP` and
         * `L3_DEFAULT`.
         * The valid IP protocols are different for different load balancing products
         * as described in [Load balancing
         * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
         * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, `L3_DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(@Nullable Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The IP protocol to which this rule applies.
         * For protocol forwarding, valid
         * options are `TCP`, `UDP`, `ESP`,
         * `AH`, `SCTP`, `ICMP` and
         * `L3_DEFAULT`.
         * The valid IP protocols are different for different load balancing products
         * as described in [Load balancing
         * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
         * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`, `L3_DEFAULT`.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param isMirroringCollector Indicates whether or not this load balancer can be used as a collector for
         * packet mirroring. To prevent mirroring loops, instances behind this
         * load balancer will not have their traffic mirrored even if a
         * `PacketMirroring` rule applies to them.
         * This can only be set to true for load balancers that have their
         * `loadBalancingScheme` set to `INTERNAL`.
         * 
         * @return builder
         * 
         */
        public Builder isMirroringCollector(@Nullable Output<Boolean> isMirroringCollector) {
            $.isMirroringCollector = isMirroringCollector;
            return this;
        }

        /**
         * @param isMirroringCollector Indicates whether or not this load balancer can be used as a collector for
         * packet mirroring. To prevent mirroring loops, instances behind this
         * load balancer will not have their traffic mirrored even if a
         * `PacketMirroring` rule applies to them.
         * This can only be set to true for load balancers that have their
         * `loadBalancingScheme` set to `INTERNAL`.
         * 
         * @return builder
         * 
         */
        public Builder isMirroringCollector(Boolean isMirroringCollector) {
            return isMirroringCollector(Output.of(isMirroringCollector));
        }

        /**
         * @param labelFingerprint The fingerprint used for optimistic locking of this resource.  Used
         * internally during updates.
         * 
         * @return builder
         * 
         */
        public Builder labelFingerprint(@Nullable Output<String> labelFingerprint) {
            $.labelFingerprint = labelFingerprint;
            return this;
        }

        /**
         * @param labelFingerprint The fingerprint used for optimistic locking of this resource.  Used
         * internally during updates.
         * 
         * @return builder
         * 
         */
        public Builder labelFingerprint(String labelFingerprint) {
            return labelFingerprint(Output.of(labelFingerprint));
        }

        /**
         * @param labels Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param loadBalancingScheme Specifies the forwarding rule type.
         * For more information about forwarding rules, refer to
         * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
         * Default value is `EXTERNAL`.
         * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            $.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        /**
         * @param loadBalancingScheme Specifies the forwarding rule type.
         * For more information about forwarding rules, refer to
         * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
         * Default value is `EXTERNAL`.
         * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            return loadBalancingScheme(Output.of(loadBalancingScheme));
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is created.
         * The name must be 1-63 characters long, and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
         * Specifically, the name must be 1-63 characters long and match the regular
         * expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters must
         * be a dash, lowercase letter, or digit, except the last character, which
         * cannot be a dash.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, the forwarding rule name must be a 1-20 characters string with
         * lowercase letters and numbers and must start with a letter.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource; provided by the client when the resource is created.
         * The name must be 1-63 characters long, and comply with
         * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
         * Specifically, the name must be 1-63 characters long and match the regular
         * expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters must
         * be a dash, lowercase letter, or digit, except the last character, which
         * cannot be a dash.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, the forwarding rule name must be a 1-20 characters string with
         * lowercase letters and numbers and must start with a letter.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network This field is not used for external load balancing.
         * For Internal TCP/UDP Load Balancing, this field identifies the network that
         * the load balanced IP should belong to for this Forwarding Rule.
         * If the subnetwork is specified, the network of the subnetwork will be used.
         * If neither subnetwork nor this field is specified, the default network will
         * be used.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, a network must be provided.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network This field is not used for external load balancing.
         * For Internal TCP/UDP Load Balancing, this field identifies the network that
         * the load balanced IP should belong to for this Forwarding Rule.
         * If the subnetwork is specified, the network of the subnetwork will be used.
         * If neither subnetwork nor this field is specified, the default network will
         * be used.
         * For Private Service Connect forwarding rules that forward traffic to Google
         * APIs, a network must be provided.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param networkTier This signifies the networking tier used for configuring
         * this load balancer and can only take the following values:
         * `PREMIUM`, `STANDARD`.
         * For regional ForwardingRule, the valid values are `PREMIUM` and
         * `STANDARD`. For GlobalForwardingRule, the valid value is
         * `PREMIUM`.
         * If this field is not specified, it is assumed to be `PREMIUM`.
         * If `IPAddress` is specified, this value must be equal to the
         * networkTier of the Address.
         * Possible values are: `PREMIUM`, `STANDARD`.
         * 
         * @return builder
         * 
         */
        public Builder networkTier(@Nullable Output<String> networkTier) {
            $.networkTier = networkTier;
            return this;
        }

        /**
         * @param networkTier This signifies the networking tier used for configuring
         * this load balancer and can only take the following values:
         * `PREMIUM`, `STANDARD`.
         * For regional ForwardingRule, the valid values are `PREMIUM` and
         * `STANDARD`. For GlobalForwardingRule, the valid value is
         * `PREMIUM`.
         * If this field is not specified, it is assumed to be `PREMIUM`.
         * If `IPAddress` is specified, this value must be equal to the
         * networkTier of the Address.
         * Possible values are: `PREMIUM`, `STANDARD`.
         * 
         * @return builder
         * 
         */
        public Builder networkTier(String networkTier) {
            return networkTier(Output.of(networkTier));
        }

        /**
         * @param portRange This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By backend service-based network load balancers, target pool-based
         *   network load balancers, internal proxy load balancers, external proxy load
         *   balancers, Traffic Director, external protocol forwarding, and Classic VPN.
         *   Some products have restrictions on what ports can be used. See
         *   [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
         *   for details.
         * 
         * Only packets addressed to ports in the specified range will be forwarded to
         * the backends configured with this forwarding rule.
         * The `ports` and `port_range` fields are mutually exclusive.
         * For external forwarding rules, two or more forwarding rules cannot use the
         * same `[IPAddress, IPProtocol]` pair, and cannot have
         * overlapping `portRange`s.
         * For internal forwarding rules within the same VPC network, two or more
         * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
         * pair, and cannot have overlapping `portRange`s.
         * 
         * @return builder
         * 
         */
        public Builder portRange(@Nullable Output<String> portRange) {
            $.portRange = portRange;
            return this;
        }

        /**
         * @param portRange This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By backend service-based network load balancers, target pool-based
         *   network load balancers, internal proxy load balancers, external proxy load
         *   balancers, Traffic Director, external protocol forwarding, and Classic VPN.
         *   Some products have restrictions on what ports can be used. See
         *   [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
         *   for details.
         * 
         * Only packets addressed to ports in the specified range will be forwarded to
         * the backends configured with this forwarding rule.
         * The `ports` and `port_range` fields are mutually exclusive.
         * For external forwarding rules, two or more forwarding rules cannot use the
         * same `[IPAddress, IPProtocol]` pair, and cannot have
         * overlapping `portRange`s.
         * For internal forwarding rules within the same VPC network, two or more
         * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
         * pair, and cannot have overlapping `portRange`s.
         * 
         * @return builder
         * 
         */
        public Builder portRange(String portRange) {
            return portRange(Output.of(portRange));
        }

        /**
         * @param ports This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By internal TCP/UDP load balancers, backend service-based network load
         *   balancers, and internal protocol forwarding.
         * 
         * You can specify a list of up to five ports by number, separated by commas.
         * The ports can be contiguous or discontiguous. Only packets addressed to
         * these ports will be forwarded to the backends configured with this
         * forwarding rule.
         * For external forwarding rules, two or more forwarding rules cannot use the
         * same `[IPAddress, IPProtocol]` pair, and cannot share any values
         * defined in `ports`.
         * For internal forwarding rules within the same VPC network, two or more
         * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
         * pair, and cannot share any values defined in `ports`.
         * The `ports` and `port_range` fields are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By internal TCP/UDP load balancers, backend service-based network load
         *   balancers, and internal protocol forwarding.
         * 
         * You can specify a list of up to five ports by number, separated by commas.
         * The ports can be contiguous or discontiguous. Only packets addressed to
         * these ports will be forwarded to the backends configured with this
         * forwarding rule.
         * For external forwarding rules, two or more forwarding rules cannot use the
         * same `[IPAddress, IPProtocol]` pair, and cannot share any values
         * defined in `ports`.
         * For internal forwarding rules within the same VPC network, two or more
         * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
         * pair, and cannot share any values defined in `ports`.
         * The `ports` and `port_range` fields are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports This field can only be used:
         * * If `IPProtocol` is one of TCP, UDP, or SCTP.
         * * By internal TCP/UDP load balancers, backend service-based network load
         *   balancers, and internal protocol forwarding.
         * 
         * You can specify a list of up to five ports by number, separated by commas.
         * The ports can be contiguous or discontiguous. Only packets addressed to
         * these ports will be forwarded to the backends configured with this
         * forwarding rule.
         * For external forwarding rules, two or more forwarding rules cannot use the
         * same `[IPAddress, IPProtocol]` pair, and cannot share any values
         * defined in `ports`.
         * For internal forwarding rules within the same VPC network, two or more
         * forwarding rules cannot use the same `[IPAddress, IPProtocol]`
         * pair, and cannot share any values defined in `ports`.
         * The `ports` and `port_range` fields are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pscConnectionId The PSC connection id of the PSC Forwarding Rule.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(@Nullable Output<String> pscConnectionId) {
            $.pscConnectionId = pscConnectionId;
            return this;
        }

        /**
         * @param pscConnectionId The PSC connection id of the PSC Forwarding Rule.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(String pscConnectionId) {
            return pscConnectionId(Output.of(pscConnectionId));
        }

        /**
         * @param pscConnectionStatus The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionStatus(@Nullable Output<String> pscConnectionStatus) {
            $.pscConnectionStatus = pscConnectionStatus;
            return this;
        }

        /**
         * @param pscConnectionStatus The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionStatus(String pscConnectionStatus) {
            return pscConnectionStatus(Output.of(pscConnectionStatus));
        }

        /**
         * @param region A reference to the region where the regional forwarding rule resides.
         * This field is not applicable to global forwarding rules.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A reference to the region where the regional forwarding rule resides.
         * This field is not applicable to global forwarding rules.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param serviceDirectoryRegistrations Service Directory resources to register this forwarding rule with.
         * Currently, only supports a single Service Directory resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryRegistrations(@Nullable Output<List<ForwardingRuleServiceDirectoryRegistrationArgs>> serviceDirectoryRegistrations) {
            $.serviceDirectoryRegistrations = serviceDirectoryRegistrations;
            return this;
        }

        /**
         * @param serviceDirectoryRegistrations Service Directory resources to register this forwarding rule with.
         * Currently, only supports a single Service Directory resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryRegistrations(List<ForwardingRuleServiceDirectoryRegistrationArgs> serviceDirectoryRegistrations) {
            return serviceDirectoryRegistrations(Output.of(serviceDirectoryRegistrations));
        }

        /**
         * @param serviceDirectoryRegistrations Service Directory resources to register this forwarding rule with.
         * Currently, only supports a single Service Directory resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryRegistrations(ForwardingRuleServiceDirectoryRegistrationArgs... serviceDirectoryRegistrations) {
            return serviceDirectoryRegistrations(List.of(serviceDirectoryRegistrations));
        }

        /**
         * @param serviceLabel An optional prefix to the service name for this Forwarding Rule.
         * If specified, will be the first label of the fully qualified service
         * name.
         * The label must be 1-63 characters long, and comply with RFC1035.
         * Specifically, the label must be 1-63 characters long and match the
         * regular expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters
         * must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceLabel(@Nullable Output<String> serviceLabel) {
            $.serviceLabel = serviceLabel;
            return this;
        }

        /**
         * @param serviceLabel An optional prefix to the service name for this Forwarding Rule.
         * If specified, will be the first label of the fully qualified service
         * name.
         * The label must be 1-63 characters long, and comply with RFC1035.
         * Specifically, the label must be 1-63 characters long and match the
         * regular expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters
         * must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceLabel(String serviceLabel) {
            return serviceLabel(Output.of(serviceLabel));
        }

        /**
         * @param serviceName The internal fully qualified service name for this Forwarding Rule.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal fully qualified service name for this Forwarding Rule.
         * This field is only used for INTERNAL load balancing.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sourceIpRanges If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(@Nullable Output<List<String>> sourceIpRanges) {
            $.sourceIpRanges = sourceIpRanges;
            return this;
        }

        /**
         * @param sourceIpRanges If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(List<String> sourceIpRanges) {
            return sourceIpRanges(Output.of(sourceIpRanges));
        }

        /**
         * @param sourceIpRanges If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(String... sourceIpRanges) {
            return sourceIpRanges(List.of(sourceIpRanges));
        }

        /**
         * @param subnetwork This field identifies the subnetwork that the load balanced IP should
         * belong to for this Forwarding Rule, used in internal load balancing and
         * network load balancing with IPv6.
         * If the network specified is in auto subnet mode, this field is optional.
         * However, a subnetwork must be specified if the network is in custom subnet
         * mode or when creating external forwarding rule with IPv6.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork This field identifies the subnetwork that the load balanced IP should
         * belong to for this Forwarding Rule, used in internal load balancing and
         * network load balancing with IPv6.
         * If the network specified is in auto subnet mode, this field is optional.
         * However, a subnetwork must be specified if the network is in custom subnet
         * mode or when creating external forwarding rule with IPv6.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param target The URL of the target resource to receive the matched traffic.  For
         * regional forwarding rules, this target must be in the same region as the
         * forwarding rule. For global forwarding rules, this target must be a global
         * load balancing resource.
         * The forwarded traffic must be of a type appropriate to the target object.
         * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
         * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
         * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
         * 
         * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The URL of the target resource to receive the matched traffic.  For
         * regional forwarding rules, this target must be in the same region as the
         * forwarding rule. For global forwarding rules, this target must be a global
         * load balancing resource.
         * The forwarded traffic must be of a type appropriate to the target object.
         * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
         * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
         * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
         * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
         * 
         * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public ForwardingRuleState build() {
            return $;
        }
    }

}
