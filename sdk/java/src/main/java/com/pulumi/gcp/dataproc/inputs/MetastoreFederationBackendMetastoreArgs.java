// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class MetastoreFederationBackendMetastoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetastoreFederationBackendMetastoreArgs Empty = new MetastoreFederationBackendMetastoreArgs();

    /**
     * The type of the backend metastore.
     * Possible values are `METASTORE_TYPE_UNSPECIFIED`, `DATAPROC_METASTORE`, and `BIGQUERY`.
     * 
     */
    @Import(name="metastoreType", required=true)
    private Output<String> metastoreType;

    /**
     * @return The type of the backend metastore.
     * Possible values are `METASTORE_TYPE_UNSPECIFIED`, `DATAPROC_METASTORE`, and `BIGQUERY`.
     * 
     */
    public Output<String> metastoreType() {
        return this.metastoreType;
    }

    /**
     * The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The identifier for this object. Format specified above.
     * 
     */
    @Import(name="rank", required=true)
    private Output<String> rank;

    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public Output<String> rank() {
        return this.rank;
    }

    private MetastoreFederationBackendMetastoreArgs() {}

    private MetastoreFederationBackendMetastoreArgs(MetastoreFederationBackendMetastoreArgs $) {
        this.metastoreType = $.metastoreType;
        this.name = $.name;
        this.rank = $.rank;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetastoreFederationBackendMetastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetastoreFederationBackendMetastoreArgs $;

        public Builder() {
            $ = new MetastoreFederationBackendMetastoreArgs();
        }

        public Builder(MetastoreFederationBackendMetastoreArgs defaults) {
            $ = new MetastoreFederationBackendMetastoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metastoreType The type of the backend metastore.
         * Possible values are `METASTORE_TYPE_UNSPECIFIED`, `DATAPROC_METASTORE`, and `BIGQUERY`.
         * 
         * @return builder
         * 
         */
        public Builder metastoreType(Output<String> metastoreType) {
            $.metastoreType = metastoreType;
            return this;
        }

        /**
         * @param metastoreType The type of the backend metastore.
         * Possible values are `METASTORE_TYPE_UNSPECIFIED`, `DATAPROC_METASTORE`, and `BIGQUERY`.
         * 
         * @return builder
         * 
         */
        public Builder metastoreType(String metastoreType) {
            return metastoreType(Output.of(metastoreType));
        }

        /**
         * @param name The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rank The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder rank(Output<String> rank) {
            $.rank = rank;
            return this;
        }

        /**
         * @param rank The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder rank(String rank) {
            return rank(Output.of(rank));
        }

        public MetastoreFederationBackendMetastoreArgs build() {
            $.metastoreType = Objects.requireNonNull($.metastoreType, "expected parameter 'metastoreType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.rank = Objects.requireNonNull($.rank, "expected parameter 'rank' to be non-null");
            return $;
        }
    }

}
