// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkconnectivity.SpokeArgs;
import com.pulumi.gcp.networkconnectivity.inputs.SpokeState;
import com.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedInterconnectAttachments;
import com.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedProducerVpcNetwork;
import com.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedRouterApplianceInstances;
import com.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedVpcNetwork;
import com.pulumi.gcp.networkconnectivity.outputs.SpokeLinkedVpnTunnels;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The NetworkConnectivity Spoke resource
 * 
 * To get more information about Spoke, see:
 * 
 * * [API documentation](https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest/v1beta/projects.locations.spokes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/overview)
 * 
 * ## Example Usage
 * 
 * ### Network Connectivity Spoke Linked Vpc Network Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.Hub;
 * import com.pulumi.gcp.networkconnectivity.HubArgs;
 * import com.pulumi.gcp.networkconnectivity.Spoke;
 * import com.pulumi.gcp.networkconnectivity.SpokeArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.SpokeLinkedVpcNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("net")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var basicHub = new Hub("basicHub", HubArgs.builder()
 *             .name("hub1")
 *             .description("A sample hub")
 *             .labels(Map.of("label-two", "value-one"))
 *             .build());
 * 
 *         var primary = new Spoke("primary", SpokeArgs.builder()
 *             .name("spoke1")
 *             .location("global")
 *             .description("A sample spoke with a linked router appliance instance")
 *             .labels(Map.of("label-one", "value-one"))
 *             .hub(basicHub.id())
 *             .linkedVpcNetwork(SpokeLinkedVpcNetworkArgs.builder()
 *                 .excludeExportRanges(                
 *                     "198.51.100.0/24",
 *                     "10.10.0.0/16")
 *                 .includeExportRanges(                
 *                     "198.51.100.0/23",
 *                     "10.0.0.0/8")
 *                 .uri(network.selfLink())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Connectivity Spoke Router Appliance Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.networkconnectivity.Hub;
 * import com.pulumi.gcp.networkconnectivity.HubArgs;
 * import com.pulumi.gcp.networkconnectivity.Spoke;
 * import com.pulumi.gcp.networkconnectivity.SpokeArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.SpokeLinkedRouterApplianceInstancesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("tf-test-network_75413")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var subnetwork = new Subnetwork("subnetwork", SubnetworkArgs.builder()
 *             .name("tf-test-subnet_55138")
 *             .ipCidrRange("10.0.0.0/28")
 *             .region("us-central1")
 *             .network(network.selfLink())
 *             .build());
 * 
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .name("tf-test-instance_37559")
 *             .machineType("e2-medium")
 *             .canIpForward(true)
 *             .zone("us-central1-a")
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image("projects/debian-cloud/global/images/debian-10-buster-v20210817")
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .subnetwork(subnetwork.name())
 *                 .networkIp("10.0.0.2")
 *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
 *                     .networkTier("PREMIUM")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var basicHub = new Hub("basicHub", HubArgs.builder()
 *             .name("tf-test-hub_91980")
 *             .description("A sample hub")
 *             .labels(Map.of("label-two", "value-one"))
 *             .build());
 * 
 *         var primary = new Spoke("primary", SpokeArgs.builder()
 *             .name("tf-test-name_37118")
 *             .location("us-central1")
 *             .description("A sample spoke with a linked routher appliance instance")
 *             .labels(Map.of("label-one", "value-one"))
 *             .hub(basicHub.id())
 *             .linkedRouterApplianceInstances(SpokeLinkedRouterApplianceInstancesArgs.builder()
 *                 .instances(SpokeLinkedRouterApplianceInstancesInstanceArgs.builder()
 *                     .virtualMachine(instance.selfLink())
 *                     .ipAddress("10.0.0.2")
 *                     .build())
 *                 .siteToSiteDataTransfer(true)
 *                 .includeImportRanges("ALL_IPV4_RANGES")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Connectivity Spoke Vpn Tunnel Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkconnectivity.Hub;
 * import com.pulumi.gcp.networkconnectivity.HubArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.HaVpnGateway;
 * import com.pulumi.gcp.compute.HaVpnGatewayArgs;
 * import com.pulumi.gcp.compute.ExternalVpnGateway;
 * import com.pulumi.gcp.compute.ExternalVpnGatewayArgs;
 * import com.pulumi.gcp.compute.inputs.ExternalVpnGatewayInterfaceArgs;
 * import com.pulumi.gcp.compute.Router;
 * import com.pulumi.gcp.compute.RouterArgs;
 * import com.pulumi.gcp.compute.inputs.RouterBgpArgs;
 * import com.pulumi.gcp.compute.VPNTunnel;
 * import com.pulumi.gcp.compute.VPNTunnelArgs;
 * import com.pulumi.gcp.compute.RouterInterface;
 * import com.pulumi.gcp.compute.RouterInterfaceArgs;
 * import com.pulumi.gcp.compute.RouterPeer;
 * import com.pulumi.gcp.compute.RouterPeerArgs;
 * import com.pulumi.gcp.networkconnectivity.Spoke;
 * import com.pulumi.gcp.networkconnectivity.SpokeArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.SpokeLinkedVpnTunnelsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var basicHub = new Hub("basicHub", HubArgs.builder()
 *             .name("basic-hub1")
 *             .description("A sample hub")
 *             .labels(Map.of("label-two", "value-one"))
 *             .build());
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("basic-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var subnetwork = new Subnetwork("subnetwork", SubnetworkArgs.builder()
 *             .name("basic-subnetwork")
 *             .ipCidrRange("10.0.0.0/28")
 *             .region("us-central1")
 *             .network(network.selfLink())
 *             .build());
 * 
 *         var gateway = new HaVpnGateway("gateway", HaVpnGatewayArgs.builder()
 *             .name("vpn-gateway")
 *             .network(network.id())
 *             .build());
 * 
 *         var externalVpnGw = new ExternalVpnGateway("externalVpnGw", ExternalVpnGatewayArgs.builder()
 *             .name("external-vpn-gateway")
 *             .redundancyType("SINGLE_IP_INTERNALLY_REDUNDANT")
 *             .description("An externally managed VPN gateway")
 *             .interfaces(ExternalVpnGatewayInterfaceArgs.builder()
 *                 .id(0)
 *                 .ipAddress("8.8.8.8")
 *                 .build())
 *             .build());
 * 
 *         var router = new Router("router", RouterArgs.builder()
 *             .name("external-vpn-gateway")
 *             .region("us-central1")
 *             .network(network.name())
 *             .bgp(RouterBgpArgs.builder()
 *                 .asn(64514)
 *                 .build())
 *             .build());
 * 
 *         var tunnel1 = new VPNTunnel("tunnel1", VPNTunnelArgs.builder()
 *             .name("tunnel1")
 *             .region("us-central1")
 *             .vpnGateway(gateway.id())
 *             .peerExternalGateway(externalVpnGw.id())
 *             .peerExternalGatewayInterface(0)
 *             .sharedSecret("a secret message")
 *             .router(router.id())
 *             .vpnGatewayInterface(0)
 *             .build());
 * 
 *         var tunnel2 = new VPNTunnel("tunnel2", VPNTunnelArgs.builder()
 *             .name("tunnel2")
 *             .region("us-central1")
 *             .vpnGateway(gateway.id())
 *             .peerExternalGateway(externalVpnGw.id())
 *             .peerExternalGatewayInterface(0)
 *             .sharedSecret("a secret message")
 *             .router(router.id().applyValue(id -> String.format(" %s", id)))
 *             .vpnGatewayInterface(1)
 *             .build());
 * 
 *         var routerInterface1 = new RouterInterface("routerInterface1", RouterInterfaceArgs.builder()
 *             .name("router-interface1")
 *             .router(router.name())
 *             .region("us-central1")
 *             .ipRange("169.254.0.1/30")
 *             .vpnTunnel(tunnel1.name())
 *             .build());
 * 
 *         var routerPeer1 = new RouterPeer("routerPeer1", RouterPeerArgs.builder()
 *             .name("router-peer1")
 *             .router(router.name())
 *             .region("us-central1")
 *             .peerIpAddress("169.254.0.2")
 *             .peerAsn(64515)
 *             .advertisedRoutePriority(100)
 *             .interface_(routerInterface1.name())
 *             .build());
 * 
 *         var routerInterface2 = new RouterInterface("routerInterface2", RouterInterfaceArgs.builder()
 *             .name("router-interface2")
 *             .router(router.name())
 *             .region("us-central1")
 *             .ipRange("169.254.1.1/30")
 *             .vpnTunnel(tunnel2.name())
 *             .build());
 * 
 *         var routerPeer2 = new RouterPeer("routerPeer2", RouterPeerArgs.builder()
 *             .name("router-peer2")
 *             .router(router.name())
 *             .region("us-central1")
 *             .peerIpAddress("169.254.1.2")
 *             .peerAsn(64515)
 *             .advertisedRoutePriority(100)
 *             .interface_(routerInterface2.name())
 *             .build());
 * 
 *         var tunnel1Spoke = new Spoke("tunnel1Spoke", SpokeArgs.builder()
 *             .name("vpn-tunnel-1-spoke")
 *             .location("us-central1")
 *             .description("A sample spoke with a linked VPN Tunnel")
 *             .labels(Map.of("label-one", "value-one"))
 *             .hub(basicHub.id())
 *             .linkedVpnTunnels(SpokeLinkedVpnTunnelsArgs.builder()
 *                 .uris(tunnel1.selfLink())
 *                 .siteToSiteDataTransfer(true)
 *                 .includeImportRanges("ALL_IPV4_RANGES")
 *                 .build())
 *             .build());
 * 
 *         var tunnel2Spoke = new Spoke("tunnel2Spoke", SpokeArgs.builder()
 *             .name("vpn-tunnel-2-spoke")
 *             .location("us-central1")
 *             .description("A sample spoke with a linked VPN Tunnel")
 *             .labels(Map.of("label-one", "value-one"))
 *             .hub(basicHub.id())
 *             .linkedVpnTunnels(SpokeLinkedVpnTunnelsArgs.builder()
 *                 .uris(tunnel2.selfLink())
 *                 .siteToSiteDataTransfer(true)
 *                 .includeImportRanges("ALL_IPV4_RANGES")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Connectivity Spoke Interconnect Attachment Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkconnectivity.Hub;
 * import com.pulumi.gcp.networkconnectivity.HubArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Router;
 * import com.pulumi.gcp.compute.RouterArgs;
 * import com.pulumi.gcp.compute.inputs.RouterBgpArgs;
 * import com.pulumi.gcp.compute.InterconnectAttachment;
 * import com.pulumi.gcp.compute.InterconnectAttachmentArgs;
 * import com.pulumi.gcp.networkconnectivity.Spoke;
 * import com.pulumi.gcp.networkconnectivity.SpokeArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.SpokeLinkedInterconnectAttachmentsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var basicHub = new Hub("basicHub", HubArgs.builder()
 *             .name("basic-hub1")
 *             .description("A sample hub")
 *             .labels(Map.of("label-two", "value-one"))
 *             .build());
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("basic-network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var router = new Router("router", RouterArgs.builder()
 *             .name("external-vpn-gateway")
 *             .region("us-central1")
 *             .network(network.name())
 *             .bgp(RouterBgpArgs.builder()
 *                 .asn(16550)
 *                 .build())
 *             .build());
 * 
 *         var interconnect_attachment = new InterconnectAttachment("interconnect-attachment", InterconnectAttachmentArgs.builder()
 *             .name("partner-interconnect1")
 *             .edgeAvailabilityDomain("AVAILABILITY_DOMAIN_1")
 *             .type("PARTNER")
 *             .router(router.id())
 *             .mtu(1500)
 *             .region("us-central1")
 *             .build());
 * 
 *         var primary = new Spoke("primary", SpokeArgs.builder()
 *             .name("interconnect-attachment-spoke")
 *             .location("us-central1")
 *             .description("A sample spoke with a linked Interconnect Attachment")
 *             .labels(Map.of("label-one", "value-one"))
 *             .hub(basicHub.id())
 *             .linkedInterconnectAttachments(SpokeLinkedInterconnectAttachmentsArgs.builder()
 *                 .uris(interconnect_attachment.selfLink())
 *                 .siteToSiteDataTransfer(true)
 *                 .includeImportRanges("ALL_IPV4_RANGES")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Connectivity Spoke Linked Producer Vpc Network Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.networkconnectivity.Hub;
 * import com.pulumi.gcp.networkconnectivity.HubArgs;
 * import com.pulumi.gcp.networkconnectivity.Spoke;
 * import com.pulumi.gcp.networkconnectivity.SpokeArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.SpokeLinkedVpcNetworkArgs;
 * import com.pulumi.gcp.networkconnectivity.inputs.SpokeLinkedProducerVpcNetworkArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("net-spoke")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var address = new GlobalAddress("address", GlobalAddressArgs.builder()
 *             .name("test-address")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(16)
 *             .network(network.id())
 *             .build());
 * 
 *         var peering = new Connection("peering", ConnectionArgs.builder()
 *             .network(network.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(address.name())
 *             .build());
 * 
 *         var basicHub = new Hub("basicHub", HubArgs.builder()
 *             .name("hub-basic")
 *             .build());
 * 
 *         var linkedVpcSpoke = new Spoke("linkedVpcSpoke", SpokeArgs.builder()
 *             .name("vpc-spoke")
 *             .location("global")
 *             .hub(basicHub.id())
 *             .linkedVpcNetwork(SpokeLinkedVpcNetworkArgs.builder()
 *                 .uri(network.selfLink())
 *                 .build())
 *             .build());
 * 
 *         var primary = new Spoke("primary", SpokeArgs.builder()
 *             .name("producer-spoke")
 *             .location("global")
 *             .description("A sample spoke with a linked router appliance instance")
 *             .labels(Map.of("label-one", "value-one"))
 *             .hub(basicHub.id())
 *             .linkedProducerVpcNetwork(SpokeLinkedProducerVpcNetworkArgs.builder()
 *                 .network(network.name())
 *                 .peering(peering.peering())
 *                 .excludeExportRanges(                
 *                     "198.51.100.0/24",
 *                     "10.10.0.0/16")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(linkedVpcSpoke)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Spoke can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/spokes/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Spoke can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkconnectivity/spoke:Spoke default projects/{{project}}/locations/{{location}}/spokes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkconnectivity/spoke:Spoke")
public class Spoke extends com.pulumi.resources.CustomResource {
    /**
     * Output only. The time the spoke was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The time the spoke was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * An optional description of the spoke.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of the spoke.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Immutable. The URI of the hub that this spoke is attached to.
     * 
     */
    @Export(name="hub", refs={String.class}, tree="[0]")
    private Output<String> hub;

    /**
     * @return Immutable. The URI of the hub that this spoke is attached to.
     * 
     */
    public Output<String> hub() {
        return this.hub;
    }
    /**
     * Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
     * Structure is documented below.
     * 
     */
    @Export(name="linkedInterconnectAttachments", refs={SpokeLinkedInterconnectAttachments.class}, tree="[0]")
    private Output</* @Nullable */ SpokeLinkedInterconnectAttachments> linkedInterconnectAttachments;

    /**
     * @return A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SpokeLinkedInterconnectAttachments>> linkedInterconnectAttachments() {
        return Codegen.optional(this.linkedInterconnectAttachments);
    }
    /**
     * Producer VPC network that is associated with the spoke.
     * Structure is documented below.
     * 
     */
    @Export(name="linkedProducerVpcNetwork", refs={SpokeLinkedProducerVpcNetwork.class}, tree="[0]")
    private Output</* @Nullable */ SpokeLinkedProducerVpcNetwork> linkedProducerVpcNetwork;

    /**
     * @return Producer VPC network that is associated with the spoke.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SpokeLinkedProducerVpcNetwork>> linkedProducerVpcNetwork() {
        return Codegen.optional(this.linkedProducerVpcNetwork);
    }
    /**
     * The URIs of linked Router appliance resources
     * Structure is documented below.
     * 
     */
    @Export(name="linkedRouterApplianceInstances", refs={SpokeLinkedRouterApplianceInstances.class}, tree="[0]")
    private Output</* @Nullable */ SpokeLinkedRouterApplianceInstances> linkedRouterApplianceInstances;

    /**
     * @return The URIs of linked Router appliance resources
     * Structure is documented below.
     * 
     */
    public Output<Optional<SpokeLinkedRouterApplianceInstances>> linkedRouterApplianceInstances() {
        return Codegen.optional(this.linkedRouterApplianceInstances);
    }
    /**
     * VPC network that is associated with the spoke.
     * Structure is documented below.
     * 
     */
    @Export(name="linkedVpcNetwork", refs={SpokeLinkedVpcNetwork.class}, tree="[0]")
    private Output</* @Nullable */ SpokeLinkedVpcNetwork> linkedVpcNetwork;

    /**
     * @return VPC network that is associated with the spoke.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SpokeLinkedVpcNetwork>> linkedVpcNetwork() {
        return Codegen.optional(this.linkedVpcNetwork);
    }
    /**
     * The URIs of linked VPN tunnel resources
     * Structure is documented below.
     * 
     */
    @Export(name="linkedVpnTunnels", refs={SpokeLinkedVpnTunnels.class}, tree="[0]")
    private Output</* @Nullable */ SpokeLinkedVpnTunnels> linkedVpnTunnels;

    /**
     * @return The URIs of linked VPN tunnel resources
     * Structure is documented below.
     * 
     */
    public Output<Optional<SpokeLinkedVpnTunnels>> linkedVpnTunnels() {
        return Codegen.optional(this.linkedVpnTunnels);
    }
    /**
     * The location for the resource
     * 
     * ***
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     * ***
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Immutable. The name of the spoke. Spoke names must be unique.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Immutable. The name of the spoke. Spoke names must be unique.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. The current lifecycle state of this spoke.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. The current lifecycle state of this spoke.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    @Export(name="uniqueId", refs={String.class}, tree="[0]")
    private Output<String> uniqueId;

    /**
     * @return Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
     * 
     */
    public Output<String> uniqueId() {
        return this.uniqueId;
    }
    /**
     * Output only. The time the spoke was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The time the spoke was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Spoke(java.lang.String name) {
        this(name, SpokeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Spoke(java.lang.String name, SpokeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Spoke(java.lang.String name, SpokeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkconnectivity/spoke:Spoke", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Spoke(java.lang.String name, Output<java.lang.String> id, @Nullable SpokeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkconnectivity/spoke:Spoke", name, state, makeResourceOptions(options, id), false);
    }

    private static SpokeArgs makeArgs(SpokeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SpokeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Spoke get(java.lang.String name, Output<java.lang.String> id, @Nullable SpokeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Spoke(name, id, state, options);
    }
}
