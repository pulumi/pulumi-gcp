// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureStoreEntityTypeMonitoringConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureStoreEntityTypeMonitoringConfigArgs Empty = new AiFeatureStoreEntityTypeMonitoringConfigArgs();

    /**
     * Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
     * Structure is documented below.
     * 
     */
    @Import(name="categoricalThresholdConfig")
    private @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs> categoricalThresholdConfig;

    /**
     * @return Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs>> categoricalThresholdConfig() {
        return Optional.ofNullable(this.categoricalThresholdConfig);
    }

    /**
     * The config for ImportFeatures Analysis Based Feature Monitoring.
     * Structure is documented below.
     * 
     */
    @Import(name="importFeaturesAnalysis")
    private @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs> importFeaturesAnalysis;

    /**
     * @return The config for ImportFeatures Analysis Based Feature Monitoring.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs>> importFeaturesAnalysis() {
        return Optional.ofNullable(this.importFeaturesAnalysis);
    }

    /**
     * Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
     * Structure is documented below.
     * 
     */
    @Import(name="numericalThresholdConfig")
    private @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs> numericalThresholdConfig;

    /**
     * @return Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs>> numericalThresholdConfig() {
        return Optional.ofNullable(this.numericalThresholdConfig);
    }

    /**
     * The config for Snapshot Analysis Based Feature Monitoring.
     * Structure is documented below.
     * 
     */
    @Import(name="snapshotAnalysis")
    private @Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs> snapshotAnalysis;

    /**
     * @return The config for Snapshot Analysis Based Feature Monitoring.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs>> snapshotAnalysis() {
        return Optional.ofNullable(this.snapshotAnalysis);
    }

    private AiFeatureStoreEntityTypeMonitoringConfigArgs() {}

    private AiFeatureStoreEntityTypeMonitoringConfigArgs(AiFeatureStoreEntityTypeMonitoringConfigArgs $) {
        this.categoricalThresholdConfig = $.categoricalThresholdConfig;
        this.importFeaturesAnalysis = $.importFeaturesAnalysis;
        this.numericalThresholdConfig = $.numericalThresholdConfig;
        this.snapshotAnalysis = $.snapshotAnalysis;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureStoreEntityTypeMonitoringConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureStoreEntityTypeMonitoringConfigArgs $;

        public Builder() {
            $ = new AiFeatureStoreEntityTypeMonitoringConfigArgs();
        }

        public Builder(AiFeatureStoreEntityTypeMonitoringConfigArgs defaults) {
            $ = new AiFeatureStoreEntityTypeMonitoringConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoricalThresholdConfig Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder categoricalThresholdConfig(@Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs> categoricalThresholdConfig) {
            $.categoricalThresholdConfig = categoricalThresholdConfig;
            return this;
        }

        /**
         * @param categoricalThresholdConfig Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder categoricalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs categoricalThresholdConfig) {
            return categoricalThresholdConfig(Output.of(categoricalThresholdConfig));
        }

        /**
         * @param importFeaturesAnalysis The config for ImportFeatures Analysis Based Feature Monitoring.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder importFeaturesAnalysis(@Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs> importFeaturesAnalysis) {
            $.importFeaturesAnalysis = importFeaturesAnalysis;
            return this;
        }

        /**
         * @param importFeaturesAnalysis The config for ImportFeatures Analysis Based Feature Monitoring.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder importFeaturesAnalysis(AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs importFeaturesAnalysis) {
            return importFeaturesAnalysis(Output.of(importFeaturesAnalysis));
        }

        /**
         * @param numericalThresholdConfig Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder numericalThresholdConfig(@Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs> numericalThresholdConfig) {
            $.numericalThresholdConfig = numericalThresholdConfig;
            return this;
        }

        /**
         * @param numericalThresholdConfig Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder numericalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs numericalThresholdConfig) {
            return numericalThresholdConfig(Output.of(numericalThresholdConfig));
        }

        /**
         * @param snapshotAnalysis The config for Snapshot Analysis Based Feature Monitoring.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder snapshotAnalysis(@Nullable Output<AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs> snapshotAnalysis) {
            $.snapshotAnalysis = snapshotAnalysis;
            return this;
        }

        /**
         * @param snapshotAnalysis The config for Snapshot Analysis Based Feature Monitoring.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder snapshotAnalysis(AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs snapshotAnalysis) {
            return snapshotAnalysis(Output.of(snapshotAnalysis));
        }

        public AiFeatureStoreEntityTypeMonitoringConfigArgs build() {
            return $;
        }
    }

}
