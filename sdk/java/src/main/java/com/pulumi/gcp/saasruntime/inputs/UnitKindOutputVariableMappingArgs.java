// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.saasruntime.inputs.UnitKindOutputVariableMappingFromArgs;
import com.pulumi.gcp.saasruntime.inputs.UnitKindOutputVariableMappingToArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UnitKindOutputVariableMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final UnitKindOutputVariableMappingArgs Empty = new UnitKindOutputVariableMappingArgs();

    /**
     * Output variables whose values will be passed on to dependencies
     * Structure is documented below.
     * 
     */
    @Import(name="from")
    private @Nullable Output<UnitKindOutputVariableMappingFromArgs> from;

    /**
     * @return Output variables whose values will be passed on to dependencies
     * Structure is documented below.
     * 
     */
    public Optional<Output<UnitKindOutputVariableMappingFromArgs>> from() {
        return Optional.ofNullable(this.from);
    }

    /**
     * Input variables whose values will be passed on to dependencies
     * Structure is documented below.
     * 
     */
    @Import(name="to")
    private @Nullable Output<UnitKindOutputVariableMappingToArgs> to;

    /**
     * @return Input variables whose values will be passed on to dependencies
     * Structure is documented below.
     * 
     */
    public Optional<Output<UnitKindOutputVariableMappingToArgs>> to() {
        return Optional.ofNullable(this.to);
    }

    /**
     * name of the variable
     * 
     */
    @Import(name="variable", required=true)
    private Output<String> variable;

    /**
     * @return name of the variable
     * 
     */
    public Output<String> variable() {
        return this.variable;
    }

    private UnitKindOutputVariableMappingArgs() {}

    private UnitKindOutputVariableMappingArgs(UnitKindOutputVariableMappingArgs $) {
        this.from = $.from;
        this.to = $.to;
        this.variable = $.variable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UnitKindOutputVariableMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UnitKindOutputVariableMappingArgs $;

        public Builder() {
            $ = new UnitKindOutputVariableMappingArgs();
        }

        public Builder(UnitKindOutputVariableMappingArgs defaults) {
            $ = new UnitKindOutputVariableMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param from Output variables whose values will be passed on to dependencies
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder from(@Nullable Output<UnitKindOutputVariableMappingFromArgs> from) {
            $.from = from;
            return this;
        }

        /**
         * @param from Output variables whose values will be passed on to dependencies
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder from(UnitKindOutputVariableMappingFromArgs from) {
            return from(Output.of(from));
        }

        /**
         * @param to Input variables whose values will be passed on to dependencies
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder to(@Nullable Output<UnitKindOutputVariableMappingToArgs> to) {
            $.to = to;
            return this;
        }

        /**
         * @param to Input variables whose values will be passed on to dependencies
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder to(UnitKindOutputVariableMappingToArgs to) {
            return to(Output.of(to));
        }

        /**
         * @param variable name of the variable
         * 
         * @return builder
         * 
         */
        public Builder variable(Output<String> variable) {
            $.variable = variable;
            return this;
        }

        /**
         * @param variable name of the variable
         * 
         * @return builder
         * 
         */
        public Builder variable(String variable) {
            return variable(Output.of(variable));
        }

        public UnitKindOutputVariableMappingArgs build() {
            if ($.variable == null) {
                throw new MissingRequiredPropertyException("UnitKindOutputVariableMappingArgs", "variable");
            }
            return $;
        }
    }

}
