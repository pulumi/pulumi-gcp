// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionSqlDailyExecutionTimeArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionSqlDailyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionSqlDailyArgs Empty = new AlertPolicyConditionConditionSqlDailyArgs();

    /**
     * The time of day (in UTC) at which the query should run. If left
     * unspecified, the server picks an arbitrary time of day and runs
     * the query at the same time each day.
     * Structure is documented below.
     * 
     */
    @Import(name="executionTime")
    private @Nullable Output<AlertPolicyConditionConditionSqlDailyExecutionTimeArgs> executionTime;

    /**
     * @return The time of day (in UTC) at which the query should run. If left
     * unspecified, the server picks an arbitrary time of day and runs
     * the query at the same time each day.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionSqlDailyExecutionTimeArgs>> executionTime() {
        return Optional.ofNullable(this.executionTime);
    }

    /**
     * The number of days between runs. Must be greater than or equal
     * to 1 day and less than or equal to 30 days.
     * 
     */
    @Import(name="periodicity", required=true)
    private Output<Integer> periodicity;

    /**
     * @return The number of days between runs. Must be greater than or equal
     * to 1 day and less than or equal to 30 days.
     * 
     */
    public Output<Integer> periodicity() {
        return this.periodicity;
    }

    private AlertPolicyConditionConditionSqlDailyArgs() {}

    private AlertPolicyConditionConditionSqlDailyArgs(AlertPolicyConditionConditionSqlDailyArgs $) {
        this.executionTime = $.executionTime;
        this.periodicity = $.periodicity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionConditionSqlDailyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionConditionSqlDailyArgs $;

        public Builder() {
            $ = new AlertPolicyConditionConditionSqlDailyArgs();
        }

        public Builder(AlertPolicyConditionConditionSqlDailyArgs defaults) {
            $ = new AlertPolicyConditionConditionSqlDailyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param executionTime The time of day (in UTC) at which the query should run. If left
         * unspecified, the server picks an arbitrary time of day and runs
         * the query at the same time each day.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionTime(@Nullable Output<AlertPolicyConditionConditionSqlDailyExecutionTimeArgs> executionTime) {
            $.executionTime = executionTime;
            return this;
        }

        /**
         * @param executionTime The time of day (in UTC) at which the query should run. If left
         * unspecified, the server picks an arbitrary time of day and runs
         * the query at the same time each day.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionTime(AlertPolicyConditionConditionSqlDailyExecutionTimeArgs executionTime) {
            return executionTime(Output.of(executionTime));
        }

        /**
         * @param periodicity The number of days between runs. Must be greater than or equal
         * to 1 day and less than or equal to 30 days.
         * 
         * @return builder
         * 
         */
        public Builder periodicity(Output<Integer> periodicity) {
            $.periodicity = periodicity;
            return this;
        }

        /**
         * @param periodicity The number of days between runs. Must be greater than or equal
         * to 1 day and less than or equal to 30 days.
         * 
         * @return builder
         * 
         */
        public Builder periodicity(Integer periodicity) {
            return periodicity(Output.of(periodicity));
        }

        public AlertPolicyConditionConditionSqlDailyArgs build() {
            if ($.periodicity == null) {
                throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlDailyArgs", "periodicity");
            }
            return $;
        }
    }

}
