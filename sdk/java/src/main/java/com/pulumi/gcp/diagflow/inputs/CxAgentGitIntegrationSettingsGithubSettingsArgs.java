// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxAgentGitIntegrationSettingsGithubSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxAgentGitIntegrationSettingsGithubSettingsArgs Empty = new CxAgentGitIntegrationSettingsGithubSettingsArgs();

    /**
     * The access token used to authenticate the access to the GitHub repository.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return The access token used to authenticate the access to the GitHub repository.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * A list of branches configured to be used from Dialogflow.
     * 
     */
    @Import(name="branches")
    private @Nullable Output<List<String>> branches;

    /**
     * @return A list of branches configured to be used from Dialogflow.
     * 
     */
    public Optional<Output<List<String>>> branches() {
        return Optional.ofNullable(this.branches);
    }

    /**
     * The unique repository display name for the GitHub repository.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The unique repository display name for the GitHub repository.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The GitHub repository URI related to the agent.
     * 
     */
    @Import(name="repositoryUri")
    private @Nullable Output<String> repositoryUri;

    /**
     * @return The GitHub repository URI related to the agent.
     * 
     */
    public Optional<Output<String>> repositoryUri() {
        return Optional.ofNullable(this.repositoryUri);
    }

    /**
     * The branch of the GitHub repository tracked for this agent.
     * 
     */
    @Import(name="trackingBranch")
    private @Nullable Output<String> trackingBranch;

    /**
     * @return The branch of the GitHub repository tracked for this agent.
     * 
     */
    public Optional<Output<String>> trackingBranch() {
        return Optional.ofNullable(this.trackingBranch);
    }

    private CxAgentGitIntegrationSettingsGithubSettingsArgs() {}

    private CxAgentGitIntegrationSettingsGithubSettingsArgs(CxAgentGitIntegrationSettingsGithubSettingsArgs $) {
        this.accessToken = $.accessToken;
        this.branches = $.branches;
        this.displayName = $.displayName;
        this.repositoryUri = $.repositoryUri;
        this.trackingBranch = $.trackingBranch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxAgentGitIntegrationSettingsGithubSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxAgentGitIntegrationSettingsGithubSettingsArgs $;

        public Builder() {
            $ = new CxAgentGitIntegrationSettingsGithubSettingsArgs();
        }

        public Builder(CxAgentGitIntegrationSettingsGithubSettingsArgs defaults) {
            $ = new CxAgentGitIntegrationSettingsGithubSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken The access token used to authenticate the access to the GitHub repository.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken The access token used to authenticate the access to the GitHub repository.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param branches A list of branches configured to be used from Dialogflow.
         * 
         * @return builder
         * 
         */
        public Builder branches(@Nullable Output<List<String>> branches) {
            $.branches = branches;
            return this;
        }

        /**
         * @param branches A list of branches configured to be used from Dialogflow.
         * 
         * @return builder
         * 
         */
        public Builder branches(List<String> branches) {
            return branches(Output.of(branches));
        }

        /**
         * @param branches A list of branches configured to be used from Dialogflow.
         * 
         * @return builder
         * 
         */
        public Builder branches(String... branches) {
            return branches(List.of(branches));
        }

        /**
         * @param displayName The unique repository display name for the GitHub repository.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The unique repository display name for the GitHub repository.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param repositoryUri The GitHub repository URI related to the agent.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUri(@Nullable Output<String> repositoryUri) {
            $.repositoryUri = repositoryUri;
            return this;
        }

        /**
         * @param repositoryUri The GitHub repository URI related to the agent.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUri(String repositoryUri) {
            return repositoryUri(Output.of(repositoryUri));
        }

        /**
         * @param trackingBranch The branch of the GitHub repository tracked for this agent.
         * 
         * @return builder
         * 
         */
        public Builder trackingBranch(@Nullable Output<String> trackingBranch) {
            $.trackingBranch = trackingBranch;
            return this;
        }

        /**
         * @param trackingBranch The branch of the GitHub repository tracked for this agent.
         * 
         * @return builder
         * 
         */
        public Builder trackingBranch(String trackingBranch) {
            return trackingBranch(Output.of(trackingBranch));
        }

        public CxAgentGitIntegrationSettingsGithubSettingsArgs build() {
            return $;
        }
    }

}
