// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudtasks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.cloudtasks.QueueArgs;
import com.pulumi.gcp.cloudtasks.inputs.QueueState;
import com.pulumi.gcp.cloudtasks.outputs.QueueAppEngineRoutingOverride;
import com.pulumi.gcp.cloudtasks.outputs.QueueHttpTarget;
import com.pulumi.gcp.cloudtasks.outputs.QueueRateLimits;
import com.pulumi.gcp.cloudtasks.outputs.QueueRetryConfig;
import com.pulumi.gcp.cloudtasks.outputs.QueueStackdriverLoggingConfig;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A named resource to which messages are sent by publishers.
 * 
 * ## Example Usage
 * 
 * ### Queue Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudtasks.Queue;
 * import com.pulumi.gcp.cloudtasks.QueueArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Queue("default", QueueArgs.builder()
 *             .name("cloud-tasks-queue-test")
 *             .location("us-central1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloud Tasks Queue Advanced
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.cloudtasks.Queue;
 * import com.pulumi.gcp.cloudtasks.QueueArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueAppEngineRoutingOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueRateLimitsArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueRetryConfigArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueStackdriverLoggingConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var advancedConfiguration = new Queue("advancedConfiguration", QueueArgs.builder()
 *             .name("instance-name")
 *             .location("us-central1")
 *             .appEngineRoutingOverride(QueueAppEngineRoutingOverrideArgs.builder()
 *                 .service("worker")
 *                 .version("1.0")
 *                 .instance("test")
 *                 .build())
 *             .rateLimits(QueueRateLimitsArgs.builder()
 *                 .maxConcurrentDispatches(3)
 *                 .maxDispatchesPerSecond(2.0)
 *                 .build())
 *             .retryConfig(QueueRetryConfigArgs.builder()
 *                 .maxAttempts(5)
 *                 .maxRetryDuration("4s")
 *                 .maxBackoff("3s")
 *                 .minBackoff("2s")
 *                 .maxDoublings(1)
 *                 .build())
 *             .stackdriverLoggingConfig(QueueStackdriverLoggingConfigArgs.builder()
 *                 .samplingRatio(0.9)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloud Tasks Queue Http Target Oidc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.cloudtasks.Queue;
 * import com.pulumi.gcp.cloudtasks.QueueArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverridePathOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverrideQueryOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetOidcTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var oidcServiceAccount = new Account("oidcServiceAccount", AccountArgs.builder()
 *             .accountId("example-oidc")
 *             .displayName("Tasks Queue OIDC Service Account")
 *             .build());
 * 
 *         var httpTargetOidc = new Queue("httpTargetOidc", QueueArgs.builder()
 *             .name("cloud-tasks-queue-http-target-oidc")
 *             .location("us-central1")
 *             .httpTarget(QueueHttpTargetArgs.builder()
 *                 .httpMethod("POST")
 *                 .uriOverride(QueueHttpTargetUriOverrideArgs.builder()
 *                     .scheme("HTTPS")
 *                     .host("oidc.example.com")
 *                     .port("8443")
 *                     .pathOverride(QueueHttpTargetUriOverridePathOverrideArgs.builder()
 *                         .path("/users/1234")
 *                         .build())
 *                     .queryOverride(QueueHttpTargetUriOverrideQueryOverrideArgs.builder()
 *                         .queryParams("qparam1=123&qparam2=456")
 *                         .build())
 *                     .uriOverrideEnforceMode("IF_NOT_EXISTS")
 *                     .build())
 *                 .headerOverrides(                
 *                     QueueHttpTargetHeaderOverrideArgs.builder()
 *                         .header(QueueHttpTargetHeaderOverrideHeaderArgs.builder()
 *                             .key("AddSomethingElse")
 *                             .value("MyOtherValue")
 *                             .build())
 *                         .build(),
 *                     QueueHttpTargetHeaderOverrideArgs.builder()
 *                         .header(QueueHttpTargetHeaderOverrideHeaderArgs.builder()
 *                             .key("AddMe")
 *                             .value("MyValue")
 *                             .build())
 *                         .build())
 *                 .oidcToken(QueueHttpTargetOidcTokenArgs.builder()
 *                     .serviceAccountEmail(oidcServiceAccount.email())
 *                     .audience("https://oidc.example.com")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloud Tasks Queue Http Target Oauth
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.cloudtasks.Queue;
 * import com.pulumi.gcp.cloudtasks.QueueArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverridePathOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetUriOverrideQueryOverrideArgs;
 * import com.pulumi.gcp.cloudtasks.inputs.QueueHttpTargetOauthTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var oauthServiceAccount = new Account("oauthServiceAccount", AccountArgs.builder()
 *             .accountId("example-oauth")
 *             .displayName("Tasks Queue OAuth Service Account")
 *             .build());
 * 
 *         var httpTargetOauth = new Queue("httpTargetOauth", QueueArgs.builder()
 *             .name("cloud-tasks-queue-http-target-oauth")
 *             .location("us-central1")
 *             .httpTarget(QueueHttpTargetArgs.builder()
 *                 .httpMethod("POST")
 *                 .uriOverride(QueueHttpTargetUriOverrideArgs.builder()
 *                     .scheme("HTTPS")
 *                     .host("oauth.example.com")
 *                     .port("8443")
 *                     .pathOverride(QueueHttpTargetUriOverridePathOverrideArgs.builder()
 *                         .path("/users/1234")
 *                         .build())
 *                     .queryOverride(QueueHttpTargetUriOverrideQueryOverrideArgs.builder()
 *                         .queryParams("qparam1=123&qparam2=456")
 *                         .build())
 *                     .uriOverrideEnforceMode("IF_NOT_EXISTS")
 *                     .build())
 *                 .headerOverrides(                
 *                     QueueHttpTargetHeaderOverrideArgs.builder()
 *                         .header(QueueHttpTargetHeaderOverrideHeaderArgs.builder()
 *                             .key("AddSomethingElse")
 *                             .value("MyOtherValue")
 *                             .build())
 *                         .build(),
 *                     QueueHttpTargetHeaderOverrideArgs.builder()
 *                         .header(QueueHttpTargetHeaderOverrideHeaderArgs.builder()
 *                             .key("AddMe")
 *                             .value("MyValue")
 *                             .build())
 *                         .build())
 *                 .oauthToken(QueueHttpTargetOauthTokenArgs.builder()
 *                     .serviceAccountEmail(oauthServiceAccount.email())
 *                     .scope("openid https://www.googleapis.com/auth/userinfo.email")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Queue can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/queues/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Queue can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:cloudtasks/queue:Queue default projects/{{project}}/locations/{{location}}/queues/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:cloudtasks/queue:Queue default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:cloudtasks/queue:Queue default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:cloudtasks/queue:Queue")
public class Queue extends com.pulumi.resources.CustomResource {
    /**
     * Overrides for task-level appEngineRouting. These settings apply only
     * to App Engine tasks in this queue
     * Structure is documented below.
     * 
     */
    @Export(name="appEngineRoutingOverride", refs={QueueAppEngineRoutingOverride.class}, tree="[0]")
    private Output</* @Nullable */ QueueAppEngineRoutingOverride> appEngineRoutingOverride;

    /**
     * @return Overrides for task-level appEngineRouting. These settings apply only
     * to App Engine tasks in this queue
     * Structure is documented below.
     * 
     */
    public Output<Optional<QueueAppEngineRoutingOverride>> appEngineRoutingOverride() {
        return Codegen.optional(this.appEngineRoutingOverride);
    }
    /**
     * The desired state of the queue. Use this to pause and resume the queue.
     * 
     * * RUNNING: The queue is running. Tasks can be dispatched.
     * * PAUSED: The queue is paused. Tasks are not dispatched but can be added to the queue.
     * 
     */
    @Export(name="desiredState", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> desiredState;

    /**
     * @return The desired state of the queue. Use this to pause and resume the queue.
     * 
     * * RUNNING: The queue is running. Tasks can be dispatched.
     * * PAUSED: The queue is paused. Tasks are not dispatched but can be added to the queue.
     * 
     */
    public Output<Optional<String>> desiredState() {
        return Codegen.optional(this.desiredState);
    }
    /**
     * Modifies HTTP target for HTTP tasks.
     * Structure is documented below.
     * 
     */
    @Export(name="httpTarget", refs={QueueHttpTarget.class}, tree="[0]")
    private Output</* @Nullable */ QueueHttpTarget> httpTarget;

    /**
     * @return Modifies HTTP target for HTTP tasks.
     * Structure is documented below.
     * 
     */
    public Output<Optional<QueueHttpTarget>> httpTarget() {
        return Codegen.optional(this.httpTarget);
    }
    /**
     * The location of the queue
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the queue
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The queue name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The queue name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Rate limits for task dispatches.
     * The queue&#39;s actual dispatch rate is the result of:
     * * Number of tasks in the queue
     * * User-specified throttling: rateLimits, retryConfig, and the queue&#39;s state.
     * * System throttling due to 429 (Too Many Requests) or 503 (Service
     *   Unavailable) responses from the worker, high error rates, or to
     *   smooth sudden large traffic spikes.
     *   Structure is documented below.
     * 
     */
    @Export(name="rateLimits", refs={QueueRateLimits.class}, tree="[0]")
    private Output<QueueRateLimits> rateLimits;

    /**
     * @return Rate limits for task dispatches.
     * The queue&#39;s actual dispatch rate is the result of:
     * * Number of tasks in the queue
     * * User-specified throttling: rateLimits, retryConfig, and the queue&#39;s state.
     * * System throttling due to 429 (Too Many Requests) or 503 (Service
     *   Unavailable) responses from the worker, high error rates, or to
     *   smooth sudden large traffic spikes.
     *   Structure is documented below.
     * 
     */
    public Output<QueueRateLimits> rateLimits() {
        return this.rateLimits;
    }
    /**
     * Settings that determine the retry behavior.
     * Structure is documented below.
     * 
     */
    @Export(name="retryConfig", refs={QueueRetryConfig.class}, tree="[0]")
    private Output<QueueRetryConfig> retryConfig;

    /**
     * @return Settings that determine the retry behavior.
     * Structure is documented below.
     * 
     */
    public Output<QueueRetryConfig> retryConfig() {
        return this.retryConfig;
    }
    /**
     * Configuration options for writing logs to Stackdriver Logging.
     * Structure is documented below.
     * 
     */
    @Export(name="stackdriverLoggingConfig", refs={QueueStackdriverLoggingConfig.class}, tree="[0]")
    private Output</* @Nullable */ QueueStackdriverLoggingConfig> stackdriverLoggingConfig;

    /**
     * @return Configuration options for writing logs to Stackdriver Logging.
     * Structure is documented below.
     * 
     */
    public Output<Optional<QueueStackdriverLoggingConfig>> stackdriverLoggingConfig() {
        return Codegen.optional(this.stackdriverLoggingConfig);
    }
    /**
     * The current state of the queue.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the queue.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Queue(java.lang.String name) {
        this(name, QueueArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Queue(java.lang.String name, QueueArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Queue(java.lang.String name, QueueArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudtasks/queue:Queue", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Queue(java.lang.String name, Output<java.lang.String> id, @Nullable QueueState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudtasks/queue:Queue", name, state, makeResourceOptions(options, id), false);
    }

    private static QueueArgs makeArgs(QueueArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? QueueArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Queue get(java.lang.String name, Output<java.lang.String> id, @Nullable QueueState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Queue(name, id, state, options);
    }
}
