// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.eventarc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.eventarc.inputs.PipelineDestinationArgs;
import com.pulumi.gcp.eventarc.inputs.PipelineInputPayloadFormatArgs;
import com.pulumi.gcp.eventarc.inputs.PipelineLoggingConfigArgs;
import com.pulumi.gcp.eventarc.inputs.PipelineMediationArgs;
import com.pulumi.gcp.eventarc.inputs.PipelineRetryPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    /**
     * User-defined annotations. See https://google.aip.dev/128#annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return User-defined annotations. See https://google.aip.dev/128#annotations.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Resource name of a KMS crypto key (managed by the user) used to
     * encrypt/decrypt the event data. If not set, an internal Google-owned key
     * will be used to encrypt messages. It must match the pattern
     * &#34;projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}&#34;.
     * 
     */
    @Import(name="cryptoKeyName")
    private @Nullable Output<String> cryptoKeyName;

    /**
     * @return Resource name of a KMS crypto key (managed by the user) used to
     * encrypt/decrypt the event data. If not set, an internal Google-owned key
     * will be used to encrypt messages. It must match the pattern
     * &#34;projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}&#34;.
     * 
     */
    public Optional<Output<String>> cryptoKeyName() {
        return Optional.ofNullable(this.cryptoKeyName);
    }

    /**
     * List of destinations to which messages will be forwarded. Currently,
     * exactly one destination is supported per Pipeline.
     * Structure is documented below.
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<PipelineDestinationArgs>> destinations;

    /**
     * @return List of destinations to which messages will be forwarded. Currently,
     * exactly one destination is supported per Pipeline.
     * Structure is documented below.
     * 
     */
    public Output<List<PipelineDestinationArgs>> destinations() {
        return this.destinations;
    }

    /**
     * Display name of resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of resource.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Represents the format of message data.
     * Structure is documented below.
     * 
     */
    @Import(name="inputPayloadFormat")
    private @Nullable Output<PipelineInputPayloadFormatArgs> inputPayloadFormat;

    /**
     * @return Represents the format of message data.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineInputPayloadFormatArgs>> inputPayloadFormat() {
        return Optional.ofNullable(this.inputPayloadFormat);
    }

    /**
     * User labels attached to the Pipeline that can be used to group
     * resources. An object containing a list of &#34;key&#34;: value pairs. Example: {
     * &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User labels attached to the Pipeline that can be used to group
     * resources. An object containing a list of &#34;key&#34;: value pairs. Example: {
     * &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The configuration for Platform Telemetry logging for Eventarc Advanced
     * resources.
     * Structure is documented below.
     * 
     */
    @Import(name="loggingConfig")
    private @Nullable Output<PipelineLoggingConfigArgs> loggingConfig;

    /**
     * @return The configuration for Platform Telemetry logging for Eventarc Advanced
     * resources.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineLoggingConfigArgs>> loggingConfig() {
        return Optional.ofNullable(this.loggingConfig);
    }

    /**
     * List of mediation operations to be performed on the message. Currently,
     * only one Transformation operation is allowed in each Pipeline.
     * Structure is documented below.
     * 
     */
    @Import(name="mediations")
    private @Nullable Output<List<PipelineMediationArgs>> mediations;

    /**
     * @return List of mediation operations to be performed on the message. Currently,
     * only one Transformation operation is allowed in each Pipeline.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PipelineMediationArgs>>> mediations() {
        return Optional.ofNullable(this.mediations);
    }

    /**
     * The user-provided ID to be assigned to the Pipeline. It should match the
     * format `^a-z?$`.
     * 
     */
    @Import(name="pipelineId", required=true)
    private Output<String> pipelineId;

    /**
     * @return The user-provided ID to be assigned to the Pipeline. It should match the
     * format `^a-z?$`.
     * 
     */
    public Output<String> pipelineId() {
        return this.pipelineId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The retry policy configuration for the Pipeline. The pipeline
     * exponentially backs off in case the destination is non responsive or
     * returns a retryable error code. The default semantics are as follows:
     * The backoff starts with a 5 second delay and doubles the
     * delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.).
     * The delay is capped at 60 seconds by default.
     * Please note that if you set the min_retry_delay and max_retry_delay fields
     * to the same value this will make the duration between retries constant.
     * Structure is documented below.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<PipelineRetryPolicyArgs> retryPolicy;

    /**
     * @return The retry policy configuration for the Pipeline. The pipeline
     * exponentially backs off in case the destination is non responsive or
     * returns a retryable error code. The default semantics are as follows:
     * The backoff starts with a 5 second delay and doubles the
     * delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.).
     * The delay is capped at 60 seconds by default.
     * Please note that if you set the min_retry_delay and max_retry_delay fields
     * to the same value this will make the duration between retries constant.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineRetryPolicyArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    private PipelineArgs() {}

    private PipelineArgs(PipelineArgs $) {
        this.annotations = $.annotations;
        this.cryptoKeyName = $.cryptoKeyName;
        this.destinations = $.destinations;
        this.displayName = $.displayName;
        this.inputPayloadFormat = $.inputPayloadFormat;
        this.labels = $.labels;
        this.location = $.location;
        this.loggingConfig = $.loggingConfig;
        this.mediations = $.mediations;
        this.pipelineId = $.pipelineId;
        this.project = $.project;
        this.retryPolicy = $.retryPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineArgs $;

        public Builder() {
            $ = new PipelineArgs();
        }

        public Builder(PipelineArgs defaults) {
            $ = new PipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations User-defined annotations. See https://google.aip.dev/128#annotations.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations User-defined annotations. See https://google.aip.dev/128#annotations.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param cryptoKeyName Resource name of a KMS crypto key (managed by the user) used to
         * encrypt/decrypt the event data. If not set, an internal Google-owned key
         * will be used to encrypt messages. It must match the pattern
         * &#34;projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyName(@Nullable Output<String> cryptoKeyName) {
            $.cryptoKeyName = cryptoKeyName;
            return this;
        }

        /**
         * @param cryptoKeyName Resource name of a KMS crypto key (managed by the user) used to
         * encrypt/decrypt the event data. If not set, an internal Google-owned key
         * will be used to encrypt messages. It must match the pattern
         * &#34;projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyName(String cryptoKeyName) {
            return cryptoKeyName(Output.of(cryptoKeyName));
        }

        /**
         * @param destinations List of destinations to which messages will be forwarded. Currently,
         * exactly one destination is supported per Pipeline.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinations(Output<List<PipelineDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations List of destinations to which messages will be forwarded. Currently,
         * exactly one destination is supported per Pipeline.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<PipelineDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations List of destinations to which messages will be forwarded. Currently,
         * exactly one destination is supported per Pipeline.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinations(PipelineDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param displayName Display name of resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param inputPayloadFormat Represents the format of message data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputPayloadFormat(@Nullable Output<PipelineInputPayloadFormatArgs> inputPayloadFormat) {
            $.inputPayloadFormat = inputPayloadFormat;
            return this;
        }

        /**
         * @param inputPayloadFormat Represents the format of message data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder inputPayloadFormat(PipelineInputPayloadFormatArgs inputPayloadFormat) {
            return inputPayloadFormat(Output.of(inputPayloadFormat));
        }

        /**
         * @param labels User labels attached to the Pipeline that can be used to group
         * resources. An object containing a list of &#34;key&#34;: value pairs. Example: {
         * &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User labels attached to the Pipeline that can be used to group
         * resources. An object containing a list of &#34;key&#34;: value pairs. Example: {
         * &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param loggingConfig The configuration for Platform Telemetry logging for Eventarc Advanced
         * resources.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loggingConfig(@Nullable Output<PipelineLoggingConfigArgs> loggingConfig) {
            $.loggingConfig = loggingConfig;
            return this;
        }

        /**
         * @param loggingConfig The configuration for Platform Telemetry logging for Eventarc Advanced
         * resources.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loggingConfig(PipelineLoggingConfigArgs loggingConfig) {
            return loggingConfig(Output.of(loggingConfig));
        }

        /**
         * @param mediations List of mediation operations to be performed on the message. Currently,
         * only one Transformation operation is allowed in each Pipeline.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mediations(@Nullable Output<List<PipelineMediationArgs>> mediations) {
            $.mediations = mediations;
            return this;
        }

        /**
         * @param mediations List of mediation operations to be performed on the message. Currently,
         * only one Transformation operation is allowed in each Pipeline.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mediations(List<PipelineMediationArgs> mediations) {
            return mediations(Output.of(mediations));
        }

        /**
         * @param mediations List of mediation operations to be performed on the message. Currently,
         * only one Transformation operation is allowed in each Pipeline.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mediations(PipelineMediationArgs... mediations) {
            return mediations(List.of(mediations));
        }

        /**
         * @param pipelineId The user-provided ID to be assigned to the Pipeline. It should match the
         * format `^a-z?$`.
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(Output<String> pipelineId) {
            $.pipelineId = pipelineId;
            return this;
        }

        /**
         * @param pipelineId The user-provided ID to be assigned to the Pipeline. It should match the
         * format `^a-z?$`.
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(String pipelineId) {
            return pipelineId(Output.of(pipelineId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param retryPolicy The retry policy configuration for the Pipeline. The pipeline
         * exponentially backs off in case the destination is non responsive or
         * returns a retryable error code. The default semantics are as follows:
         * The backoff starts with a 5 second delay and doubles the
         * delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.).
         * The delay is capped at 60 seconds by default.
         * Please note that if you set the min_retry_delay and max_retry_delay fields
         * to the same value this will make the duration between retries constant.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(@Nullable Output<PipelineRetryPolicyArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        /**
         * @param retryPolicy The retry policy configuration for the Pipeline. The pipeline
         * exponentially backs off in case the destination is non responsive or
         * returns a retryable error code. The default semantics are as follows:
         * The backoff starts with a 5 second delay and doubles the
         * delay after each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.).
         * The delay is capped at 60 seconds by default.
         * Please note that if you set the min_retry_delay and max_retry_delay fields
         * to the same value this will make the duration between retries constant.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(PipelineRetryPolicyArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        public PipelineArgs build() {
            if ($.destinations == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "destinations");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "location");
            }
            if ($.pipelineId == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "pipelineId");
            }
            return $;
        }
    }

}
