// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionBigqueryConfig;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionCloudStorageConfig;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionDeadLetterPolicy;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionExpirationPolicy;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionMessageTransform;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionPushConfig;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionRetryPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionResult {
    private Integer ackDeadlineSeconds;
    private List<GetSubscriptionBigqueryConfig> bigqueryConfigs;
    private List<GetSubscriptionCloudStorageConfig> cloudStorageConfigs;
    private List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies;
    private Map<String,String> effectiveLabels;
    private Boolean enableExactlyOnceDelivery;
    private Boolean enableMessageOrdering;
    private List<GetSubscriptionExpirationPolicy> expirationPolicies;
    private String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String messageRetentionDuration;
    private List<GetSubscriptionMessageTransform> messageTransforms;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private List<GetSubscriptionPushConfig> pushConfigs;
    private Boolean retainAckedMessages;
    private List<GetSubscriptionRetryPolicy> retryPolicies;
    private String topic;

    private GetSubscriptionResult() {}
    public Integer ackDeadlineSeconds() {
        return this.ackDeadlineSeconds;
    }
    public List<GetSubscriptionBigqueryConfig> bigqueryConfigs() {
        return this.bigqueryConfigs;
    }
    public List<GetSubscriptionCloudStorageConfig> cloudStorageConfigs() {
        return this.cloudStorageConfigs;
    }
    public List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies() {
        return this.deadLetterPolicies;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public Boolean enableExactlyOnceDelivery() {
        return this.enableExactlyOnceDelivery;
    }
    public Boolean enableMessageOrdering() {
        return this.enableMessageOrdering;
    }
    public List<GetSubscriptionExpirationPolicy> expirationPolicies() {
        return this.expirationPolicies;
    }
    public String filter() {
        return this.filter;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String messageRetentionDuration() {
        return this.messageRetentionDuration;
    }
    public List<GetSubscriptionMessageTransform> messageTransforms() {
        return this.messageTransforms;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetSubscriptionPushConfig> pushConfigs() {
        return this.pushConfigs;
    }
    public Boolean retainAckedMessages() {
        return this.retainAckedMessages;
    }
    public List<GetSubscriptionRetryPolicy> retryPolicies() {
        return this.retryPolicies;
    }
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer ackDeadlineSeconds;
        private List<GetSubscriptionBigqueryConfig> bigqueryConfigs;
        private List<GetSubscriptionCloudStorageConfig> cloudStorageConfigs;
        private List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies;
        private Map<String,String> effectiveLabels;
        private Boolean enableExactlyOnceDelivery;
        private Boolean enableMessageOrdering;
        private List<GetSubscriptionExpirationPolicy> expirationPolicies;
        private String filter;
        private String id;
        private Map<String,String> labels;
        private String messageRetentionDuration;
        private List<GetSubscriptionMessageTransform> messageTransforms;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private List<GetSubscriptionPushConfig> pushConfigs;
        private Boolean retainAckedMessages;
        private List<GetSubscriptionRetryPolicy> retryPolicies;
        private String topic;
        public Builder() {}
        public Builder(GetSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackDeadlineSeconds = defaults.ackDeadlineSeconds;
    	      this.bigqueryConfigs = defaults.bigqueryConfigs;
    	      this.cloudStorageConfigs = defaults.cloudStorageConfigs;
    	      this.deadLetterPolicies = defaults.deadLetterPolicies;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.enableExactlyOnceDelivery = defaults.enableExactlyOnceDelivery;
    	      this.enableMessageOrdering = defaults.enableMessageOrdering;
    	      this.expirationPolicies = defaults.expirationPolicies;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.messageRetentionDuration = defaults.messageRetentionDuration;
    	      this.messageTransforms = defaults.messageTransforms;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.pushConfigs = defaults.pushConfigs;
    	      this.retainAckedMessages = defaults.retainAckedMessages;
    	      this.retryPolicies = defaults.retryPolicies;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder ackDeadlineSeconds(Integer ackDeadlineSeconds) {
            if (ackDeadlineSeconds == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "ackDeadlineSeconds");
            }
            this.ackDeadlineSeconds = ackDeadlineSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder bigqueryConfigs(List<GetSubscriptionBigqueryConfig> bigqueryConfigs) {
            if (bigqueryConfigs == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "bigqueryConfigs");
            }
            this.bigqueryConfigs = bigqueryConfigs;
            return this;
        }
        public Builder bigqueryConfigs(GetSubscriptionBigqueryConfig... bigqueryConfigs) {
            return bigqueryConfigs(List.of(bigqueryConfigs));
        }
        @CustomType.Setter
        public Builder cloudStorageConfigs(List<GetSubscriptionCloudStorageConfig> cloudStorageConfigs) {
            if (cloudStorageConfigs == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "cloudStorageConfigs");
            }
            this.cloudStorageConfigs = cloudStorageConfigs;
            return this;
        }
        public Builder cloudStorageConfigs(GetSubscriptionCloudStorageConfig... cloudStorageConfigs) {
            return cloudStorageConfigs(List.of(cloudStorageConfigs));
        }
        @CustomType.Setter
        public Builder deadLetterPolicies(List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies) {
            if (deadLetterPolicies == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "deadLetterPolicies");
            }
            this.deadLetterPolicies = deadLetterPolicies;
            return this;
        }
        public Builder deadLetterPolicies(GetSubscriptionDeadLetterPolicy... deadLetterPolicies) {
            return deadLetterPolicies(List.of(deadLetterPolicies));
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder enableExactlyOnceDelivery(Boolean enableExactlyOnceDelivery) {
            if (enableExactlyOnceDelivery == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "enableExactlyOnceDelivery");
            }
            this.enableExactlyOnceDelivery = enableExactlyOnceDelivery;
            return this;
        }
        @CustomType.Setter
        public Builder enableMessageOrdering(Boolean enableMessageOrdering) {
            if (enableMessageOrdering == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "enableMessageOrdering");
            }
            this.enableMessageOrdering = enableMessageOrdering;
            return this;
        }
        @CustomType.Setter
        public Builder expirationPolicies(List<GetSubscriptionExpirationPolicy> expirationPolicies) {
            if (expirationPolicies == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "expirationPolicies");
            }
            this.expirationPolicies = expirationPolicies;
            return this;
        }
        public Builder expirationPolicies(GetSubscriptionExpirationPolicy... expirationPolicies) {
            return expirationPolicies(List.of(expirationPolicies));
        }
        @CustomType.Setter
        public Builder filter(String filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder messageRetentionDuration(String messageRetentionDuration) {
            if (messageRetentionDuration == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "messageRetentionDuration");
            }
            this.messageRetentionDuration = messageRetentionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder messageTransforms(List<GetSubscriptionMessageTransform> messageTransforms) {
            if (messageTransforms == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "messageTransforms");
            }
            this.messageTransforms = messageTransforms;
            return this;
        }
        public Builder messageTransforms(GetSubscriptionMessageTransform... messageTransforms) {
            return messageTransforms(List.of(messageTransforms));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder pushConfigs(List<GetSubscriptionPushConfig> pushConfigs) {
            if (pushConfigs == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "pushConfigs");
            }
            this.pushConfigs = pushConfigs;
            return this;
        }
        public Builder pushConfigs(GetSubscriptionPushConfig... pushConfigs) {
            return pushConfigs(List.of(pushConfigs));
        }
        @CustomType.Setter
        public Builder retainAckedMessages(Boolean retainAckedMessages) {
            if (retainAckedMessages == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "retainAckedMessages");
            }
            this.retainAckedMessages = retainAckedMessages;
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicies(List<GetSubscriptionRetryPolicy> retryPolicies) {
            if (retryPolicies == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "retryPolicies");
            }
            this.retryPolicies = retryPolicies;
            return this;
        }
        public Builder retryPolicies(GetSubscriptionRetryPolicy... retryPolicies) {
            return retryPolicies(List.of(retryPolicies));
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            if (topic == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionResult", "topic");
            }
            this.topic = topic;
            return this;
        }
        public GetSubscriptionResult build() {
            final var _resultValue = new GetSubscriptionResult();
            _resultValue.ackDeadlineSeconds = ackDeadlineSeconds;
            _resultValue.bigqueryConfigs = bigqueryConfigs;
            _resultValue.cloudStorageConfigs = cloudStorageConfigs;
            _resultValue.deadLetterPolicies = deadLetterPolicies;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.enableExactlyOnceDelivery = enableExactlyOnceDelivery;
            _resultValue.enableMessageOrdering = enableMessageOrdering;
            _resultValue.expirationPolicies = expirationPolicies;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.messageRetentionDuration = messageRetentionDuration;
            _resultValue.messageTransforms = messageTransforms;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.pushConfigs = pushConfigs;
            _resultValue.retainAckedMessages = retainAckedMessages;
            _resultValue.retryPolicies = retryPolicies;
            _resultValue.topic = topic;
            return _resultValue;
        }
    }
}
