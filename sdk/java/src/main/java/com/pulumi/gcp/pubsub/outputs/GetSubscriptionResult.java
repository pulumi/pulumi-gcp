// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionBigqueryConfig;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionDeadLetterPolicy;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionExpirationPolicy;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionPushConfig;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionRetryPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionResult {
    private Integer ackDeadlineSeconds;
    private List<GetSubscriptionBigqueryConfig> bigqueryConfigs;
    private List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies;
    private Boolean enableExactlyOnceDelivery;
    private Boolean enableMessageOrdering;
    private List<GetSubscriptionExpirationPolicy> expirationPolicies;
    private String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String messageRetentionDuration;
    private String name;
    private @Nullable String project;
    private List<GetSubscriptionPushConfig> pushConfigs;
    private Boolean retainAckedMessages;
    private List<GetSubscriptionRetryPolicy> retryPolicies;
    private String topic;

    private GetSubscriptionResult() {}
    public Integer ackDeadlineSeconds() {
        return this.ackDeadlineSeconds;
    }
    public List<GetSubscriptionBigqueryConfig> bigqueryConfigs() {
        return this.bigqueryConfigs;
    }
    public List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies() {
        return this.deadLetterPolicies;
    }
    public Boolean enableExactlyOnceDelivery() {
        return this.enableExactlyOnceDelivery;
    }
    public Boolean enableMessageOrdering() {
        return this.enableMessageOrdering;
    }
    public List<GetSubscriptionExpirationPolicy> expirationPolicies() {
        return this.expirationPolicies;
    }
    public String filter() {
        return this.filter;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String messageRetentionDuration() {
        return this.messageRetentionDuration;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetSubscriptionPushConfig> pushConfigs() {
        return this.pushConfigs;
    }
    public Boolean retainAckedMessages() {
        return this.retainAckedMessages;
    }
    public List<GetSubscriptionRetryPolicy> retryPolicies() {
        return this.retryPolicies;
    }
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer ackDeadlineSeconds;
        private List<GetSubscriptionBigqueryConfig> bigqueryConfigs;
        private List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies;
        private Boolean enableExactlyOnceDelivery;
        private Boolean enableMessageOrdering;
        private List<GetSubscriptionExpirationPolicy> expirationPolicies;
        private String filter;
        private String id;
        private Map<String,String> labels;
        private String messageRetentionDuration;
        private String name;
        private @Nullable String project;
        private List<GetSubscriptionPushConfig> pushConfigs;
        private Boolean retainAckedMessages;
        private List<GetSubscriptionRetryPolicy> retryPolicies;
        private String topic;
        public Builder() {}
        public Builder(GetSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackDeadlineSeconds = defaults.ackDeadlineSeconds;
    	      this.bigqueryConfigs = defaults.bigqueryConfigs;
    	      this.deadLetterPolicies = defaults.deadLetterPolicies;
    	      this.enableExactlyOnceDelivery = defaults.enableExactlyOnceDelivery;
    	      this.enableMessageOrdering = defaults.enableMessageOrdering;
    	      this.expirationPolicies = defaults.expirationPolicies;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.messageRetentionDuration = defaults.messageRetentionDuration;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pushConfigs = defaults.pushConfigs;
    	      this.retainAckedMessages = defaults.retainAckedMessages;
    	      this.retryPolicies = defaults.retryPolicies;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder ackDeadlineSeconds(Integer ackDeadlineSeconds) {
            this.ackDeadlineSeconds = Objects.requireNonNull(ackDeadlineSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder bigqueryConfigs(List<GetSubscriptionBigqueryConfig> bigqueryConfigs) {
            this.bigqueryConfigs = Objects.requireNonNull(bigqueryConfigs);
            return this;
        }
        public Builder bigqueryConfigs(GetSubscriptionBigqueryConfig... bigqueryConfigs) {
            return bigqueryConfigs(List.of(bigqueryConfigs));
        }
        @CustomType.Setter
        public Builder deadLetterPolicies(List<GetSubscriptionDeadLetterPolicy> deadLetterPolicies) {
            this.deadLetterPolicies = Objects.requireNonNull(deadLetterPolicies);
            return this;
        }
        public Builder deadLetterPolicies(GetSubscriptionDeadLetterPolicy... deadLetterPolicies) {
            return deadLetterPolicies(List.of(deadLetterPolicies));
        }
        @CustomType.Setter
        public Builder enableExactlyOnceDelivery(Boolean enableExactlyOnceDelivery) {
            this.enableExactlyOnceDelivery = Objects.requireNonNull(enableExactlyOnceDelivery);
            return this;
        }
        @CustomType.Setter
        public Builder enableMessageOrdering(Boolean enableMessageOrdering) {
            this.enableMessageOrdering = Objects.requireNonNull(enableMessageOrdering);
            return this;
        }
        @CustomType.Setter
        public Builder expirationPolicies(List<GetSubscriptionExpirationPolicy> expirationPolicies) {
            this.expirationPolicies = Objects.requireNonNull(expirationPolicies);
            return this;
        }
        public Builder expirationPolicies(GetSubscriptionExpirationPolicy... expirationPolicies) {
            return expirationPolicies(List.of(expirationPolicies));
        }
        @CustomType.Setter
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder messageRetentionDuration(String messageRetentionDuration) {
            this.messageRetentionDuration = Objects.requireNonNull(messageRetentionDuration);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pushConfigs(List<GetSubscriptionPushConfig> pushConfigs) {
            this.pushConfigs = Objects.requireNonNull(pushConfigs);
            return this;
        }
        public Builder pushConfigs(GetSubscriptionPushConfig... pushConfigs) {
            return pushConfigs(List.of(pushConfigs));
        }
        @CustomType.Setter
        public Builder retainAckedMessages(Boolean retainAckedMessages) {
            this.retainAckedMessages = Objects.requireNonNull(retainAckedMessages);
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicies(List<GetSubscriptionRetryPolicy> retryPolicies) {
            this.retryPolicies = Objects.requireNonNull(retryPolicies);
            return this;
        }
        public Builder retryPolicies(GetSubscriptionRetryPolicy... retryPolicies) {
            return retryPolicies(List.of(retryPolicies));
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        public GetSubscriptionResult build() {
            final var o = new GetSubscriptionResult();
            o.ackDeadlineSeconds = ackDeadlineSeconds;
            o.bigqueryConfigs = bigqueryConfigs;
            o.deadLetterPolicies = deadLetterPolicies;
            o.enableExactlyOnceDelivery = enableExactlyOnceDelivery;
            o.enableMessageOrdering = enableMessageOrdering;
            o.expirationPolicies = expirationPolicies;
            o.filter = filter;
            o.id = id;
            o.labels = labels;
            o.messageRetentionDuration = messageRetentionDuration;
            o.name = name;
            o.project = project;
            o.pushConfigs = pushConfigs;
            o.retainAckedMessages = retainAckedMessages;
            o.retryPolicies = retryPolicies;
            o.topic = topic;
            return o;
        }
    }
}
