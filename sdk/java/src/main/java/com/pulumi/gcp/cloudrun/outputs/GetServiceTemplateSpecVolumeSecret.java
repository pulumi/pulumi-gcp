// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecVolumeSecretItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTemplateSpecVolumeSecret {
    /**
     * @return Mode bits to use on created files by default. Must be a value between 0000
     * and 0777. Defaults to 0644. Directories within the path are not affected by
     * this setting. This might be in conflict with other options that affect the
     * file mode, like fsGroup, and the result can be other mode bits set.
     * 
     */
    private Integer defaultMode;
    /**
     * @return If unspecified, the volume will expose a file whose name is the
     * secret_name.
     * If specified, the key will be used as the version to fetch from Cloud
     * Secret Manager and the path will be the name of the file exposed in the
     * volume. When items are defined, they must specify a key and a path.
     * 
     */
    private List<GetServiceTemplateSpecVolumeSecretItem> items;
    /**
     * @return The name of the secret in Cloud Secret Manager. By default, the secret
     * is assumed to be in the same project.
     * If the secret is in another project, you must define an alias.
     * An alias definition has the form:
     * {alias}:projects/{project-id|project-number}/secrets/{secret-name}.
     * If multiple alias definitions are needed, they must be separated by
     * commas.
     * The alias definitions must be set on the run.googleapis.com/secrets
     * annotation.
     * 
     */
    private String secretName;

    private GetServiceTemplateSpecVolumeSecret() {}
    /**
     * @return Mode bits to use on created files by default. Must be a value between 0000
     * and 0777. Defaults to 0644. Directories within the path are not affected by
     * this setting. This might be in conflict with other options that affect the
     * file mode, like fsGroup, and the result can be other mode bits set.
     * 
     */
    public Integer defaultMode() {
        return this.defaultMode;
    }
    /**
     * @return If unspecified, the volume will expose a file whose name is the
     * secret_name.
     * If specified, the key will be used as the version to fetch from Cloud
     * Secret Manager and the path will be the name of the file exposed in the
     * volume. When items are defined, they must specify a key and a path.
     * 
     */
    public List<GetServiceTemplateSpecVolumeSecretItem> items() {
        return this.items;
    }
    /**
     * @return The name of the secret in Cloud Secret Manager. By default, the secret
     * is assumed to be in the same project.
     * If the secret is in another project, you must define an alias.
     * An alias definition has the form:
     * {alias}:projects/{project-id|project-number}/secrets/{secret-name}.
     * If multiple alias definitions are needed, they must be separated by
     * commas.
     * The alias definitions must be set on the run.googleapis.com/secrets
     * annotation.
     * 
     */
    public String secretName() {
        return this.secretName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTemplateSpecVolumeSecret defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer defaultMode;
        private List<GetServiceTemplateSpecVolumeSecretItem> items;
        private String secretName;
        public Builder() {}
        public Builder(GetServiceTemplateSpecVolumeSecret defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultMode = defaults.defaultMode;
    	      this.items = defaults.items;
    	      this.secretName = defaults.secretName;
        }

        @CustomType.Setter
        public Builder defaultMode(Integer defaultMode) {
            if (defaultMode == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecVolumeSecret", "defaultMode");
            }
            this.defaultMode = defaultMode;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetServiceTemplateSpecVolumeSecretItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecVolumeSecret", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetServiceTemplateSpecVolumeSecretItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder secretName(String secretName) {
            if (secretName == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpecVolumeSecret", "secretName");
            }
            this.secretName = secretName;
            return this;
        }
        public GetServiceTemplateSpecVolumeSecret build() {
            final var _resultValue = new GetServiceTemplateSpecVolumeSecret();
            _resultValue.defaultMode = defaultMode;
            _resultValue.items = items;
            _resultValue.secretName = secretName;
            return _resultValue;
        }
    }
}
