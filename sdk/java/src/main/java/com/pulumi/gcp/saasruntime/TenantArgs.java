// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TenantArgs extends com.pulumi.resources.ResourceArgs {

    public static final TenantArgs Empty = new TenantArgs();

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * A reference to the consumer resource this SaaS Tenant is representing.
     * The relationship with a consumer resource can be used by SaaS Runtime for
     * retrieving consumer-defined settings and policies such as maintenance
     * policies (using Unified Maintenance Policy API).
     * 
     */
    @Import(name="consumerResource")
    private @Nullable Output<String> consumerResource;

    /**
     * @return A reference to the consumer resource this SaaS Tenant is representing.
     * The relationship with a consumer resource can be used by SaaS Runtime for
     * retrieving consumer-defined settings and policies such as maintenance
     * policies (using Unified Maintenance Policy API).
     * 
     */
    public Optional<Output<String>> consumerResource() {
        return Optional.ofNullable(this.consumerResource);
    }

    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the
     * SaaS Runtime common data model.
     * 
     */
    @Import(name="saas", required=true)
    private Output<String> saas;

    /**
     * @return A reference to the Saas that defines the product (managed service) that
     * the producer wants to manage with SaaS Runtime. Part of the
     * SaaS Runtime common data model.
     * 
     */
    public Output<String> saas() {
        return this.saas;
    }

    /**
     * The ID value for the new tenant.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return The ID value for the new tenant.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private TenantArgs() {}

    private TenantArgs(TenantArgs $) {
        this.annotations = $.annotations;
        this.consumerResource = $.consumerResource;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.saas = $.saas;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TenantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TenantArgs $;

        public Builder() {
            $ = new TenantArgs();
        }

        public Builder(TenantArgs defaults) {
            $ = new TenantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param consumerResource A reference to the consumer resource this SaaS Tenant is representing.
         * The relationship with a consumer resource can be used by SaaS Runtime for
         * retrieving consumer-defined settings and policies such as maintenance
         * policies (using Unified Maintenance Policy API).
         * 
         * @return builder
         * 
         */
        public Builder consumerResource(@Nullable Output<String> consumerResource) {
            $.consumerResource = consumerResource;
            return this;
        }

        /**
         * @param consumerResource A reference to the consumer resource this SaaS Tenant is representing.
         * The relationship with a consumer resource can be used by SaaS Runtime for
         * retrieving consumer-defined settings and policies such as maintenance
         * policies (using Unified Maintenance Policy API).
         * 
         * @return builder
         * 
         */
        public Builder consumerResource(String consumerResource) {
            return consumerResource(Output.of(consumerResource));
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param saas A reference to the Saas that defines the product (managed service) that
         * the producer wants to manage with SaaS Runtime. Part of the
         * SaaS Runtime common data model.
         * 
         * @return builder
         * 
         */
        public Builder saas(Output<String> saas) {
            $.saas = saas;
            return this;
        }

        /**
         * @param saas A reference to the Saas that defines the product (managed service) that
         * the producer wants to manage with SaaS Runtime. Part of the
         * SaaS Runtime common data model.
         * 
         * @return builder
         * 
         */
        public Builder saas(String saas) {
            return saas(Output.of(saas));
        }

        /**
         * @param tenantId The ID value for the new tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The ID value for the new tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public TenantArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("TenantArgs", "location");
            }
            if ($.saas == null) {
                throw new MissingRequiredPropertyException("TenantArgs", "saas");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("TenantArgs", "tenantId");
            }
            return $;
        }
    }

}
