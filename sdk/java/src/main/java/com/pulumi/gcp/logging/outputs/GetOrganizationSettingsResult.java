// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetOrganizationSettingsResult {
    /**
     * @return If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     * 
     */
    private Boolean disableDefaultSink;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `&#39;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]&#39;`
     * To enable CMEK for the bucket, set this field to a valid kmsKeyName for which the associated service account has the required cloudkms.cryptoKeyEncrypterDecrypter roles assigned for the key.
     * The Cloud KMS key used by the bucket can be updated by changing the kmsKeyName to a new valid key name. Encryption operations that are in progress will be completed with the key that was in use when they started. Decryption operations will be completed using the key that was used at the time of encryption unless access to that key has been revoked.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    private String kmsKeyName;
    /**
     * @return The service account associated with a project for which CMEK will apply.
     * Before enabling CMEK for a logging bucket, you must first assign the cloudkms.cryptoKeyEncrypterDecrypter role to the service account associated with the project for which CMEK will apply. See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    private String kmsServiceAccountId;
    /**
     * @return The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     * 
     */
    private String loggingServiceAccountId;
    /**
     * @return The resource name of the settings.
     * 
     */
    private String name;
    private String organization;
    /**
     * @return The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     * 
     */
    private String storageLocation;

    private GetOrganizationSettingsResult() {}
    /**
     * @return If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
     * 
     */
    public Boolean disableDefaultSink() {
        return this.disableDefaultSink;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `&#39;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]&#39;`
     * To enable CMEK for the bucket, set this field to a valid kmsKeyName for which the associated service account has the required cloudkms.cryptoKeyEncrypterDecrypter roles assigned for the key.
     * The Cloud KMS key used by the bucket can be updated by changing the kmsKeyName to a new valid key name. Encryption operations that are in progress will be completed with the key that was in use when they started. Decryption operations will be completed using the key that was used at the time of encryption unless access to that key has been revoked.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    public String kmsKeyName() {
        return this.kmsKeyName;
    }
    /**
     * @return The service account associated with a project for which CMEK will apply.
     * Before enabling CMEK for a logging bucket, you must first assign the cloudkms.cryptoKeyEncrypterDecrypter role to the service account associated with the project for which CMEK will apply. See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    public String kmsServiceAccountId() {
        return this.kmsServiceAccountId;
    }
    /**
     * @return The service account for the given container. Sinks use this service account as their writerIdentity if no custom service account is provided.
     * 
     */
    public String loggingServiceAccountId() {
        return this.loggingServiceAccountId;
    }
    /**
     * @return The resource name of the settings.
     * 
     */
    public String name() {
        return this.name;
    }
    public String organization() {
        return this.organization;
    }
    /**
     * @return The storage location that Cloud Logging will use to create new resources when a location is needed but not explicitly provided.
     * 
     */
    public String storageLocation() {
        return this.storageLocation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationSettingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean disableDefaultSink;
        private String id;
        private String kmsKeyName;
        private String kmsServiceAccountId;
        private String loggingServiceAccountId;
        private String name;
        private String organization;
        private String storageLocation;
        public Builder() {}
        public Builder(GetOrganizationSettingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableDefaultSink = defaults.disableDefaultSink;
    	      this.id = defaults.id;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.kmsServiceAccountId = defaults.kmsServiceAccountId;
    	      this.loggingServiceAccountId = defaults.loggingServiceAccountId;
    	      this.name = defaults.name;
    	      this.organization = defaults.organization;
    	      this.storageLocation = defaults.storageLocation;
        }

        @CustomType.Setter
        public Builder disableDefaultSink(Boolean disableDefaultSink) {
            this.disableDefaultSink = Objects.requireNonNull(disableDefaultSink);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyName(String kmsKeyName) {
            this.kmsKeyName = Objects.requireNonNull(kmsKeyName);
            return this;
        }
        @CustomType.Setter
        public Builder kmsServiceAccountId(String kmsServiceAccountId) {
            this.kmsServiceAccountId = Objects.requireNonNull(kmsServiceAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder loggingServiceAccountId(String loggingServiceAccountId) {
            this.loggingServiceAccountId = Objects.requireNonNull(loggingServiceAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            this.organization = Objects.requireNonNull(organization);
            return this;
        }
        @CustomType.Setter
        public Builder storageLocation(String storageLocation) {
            this.storageLocation = Objects.requireNonNull(storageLocation);
            return this;
        }
        public GetOrganizationSettingsResult build() {
            final var _resultValue = new GetOrganizationSettingsResult();
            _resultValue.disableDefaultSink = disableDefaultSink;
            _resultValue.id = id;
            _resultValue.kmsKeyName = kmsKeyName;
            _resultValue.kmsServiceAccountId = kmsServiceAccountId;
            _resultValue.loggingServiceAccountId = loggingServiceAccountId;
            _resultValue.name = name;
            _resultValue.organization = organization;
            _resultValue.storageLocation = storageLocation;
            return _resultValue;
        }
    }
}
