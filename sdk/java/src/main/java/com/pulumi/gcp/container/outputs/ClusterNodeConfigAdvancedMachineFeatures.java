// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeConfigAdvancedMachineFeatures {
    /**
     * @return Defines whether the instance should have nested virtualization enabled. Defaults to false.
     * 
     */
    private @Nullable Boolean enableNestedVirtualization;
    /**
     * @return Defines the performance monitoring unit [PMU](https://cloud.google.com/compute/docs/pmu-overview) level. Valid values are `ARCHITECTURAL`, `STANDARD`, or `ENHANCED`. Defaults to off.
     * 
     */
    private @Nullable String performanceMonitoringUnit;
    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    private Integer threadsPerCore;

    private ClusterNodeConfigAdvancedMachineFeatures() {}
    /**
     * @return Defines whether the instance should have nested virtualization enabled. Defaults to false.
     * 
     */
    public Optional<Boolean> enableNestedVirtualization() {
        return Optional.ofNullable(this.enableNestedVirtualization);
    }
    /**
     * @return Defines the performance monitoring unit [PMU](https://cloud.google.com/compute/docs/pmu-overview) level. Valid values are `ARCHITECTURAL`, `STANDARD`, or `ENHANCED`. Defaults to off.
     * 
     */
    public Optional<String> performanceMonitoringUnit() {
        return Optional.ofNullable(this.performanceMonitoringUnit);
    }
    /**
     * @return The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     * 
     */
    public Integer threadsPerCore() {
        return this.threadsPerCore;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeConfigAdvancedMachineFeatures defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableNestedVirtualization;
        private @Nullable String performanceMonitoringUnit;
        private Integer threadsPerCore;
        public Builder() {}
        public Builder(ClusterNodeConfigAdvancedMachineFeatures defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNestedVirtualization = defaults.enableNestedVirtualization;
    	      this.performanceMonitoringUnit = defaults.performanceMonitoringUnit;
    	      this.threadsPerCore = defaults.threadsPerCore;
        }

        @CustomType.Setter
        public Builder enableNestedVirtualization(@Nullable Boolean enableNestedVirtualization) {

            this.enableNestedVirtualization = enableNestedVirtualization;
            return this;
        }
        @CustomType.Setter
        public Builder performanceMonitoringUnit(@Nullable String performanceMonitoringUnit) {

            this.performanceMonitoringUnit = performanceMonitoringUnit;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCore(Integer threadsPerCore) {
            if (threadsPerCore == null) {
              throw new MissingRequiredPropertyException("ClusterNodeConfigAdvancedMachineFeatures", "threadsPerCore");
            }
            this.threadsPerCore = threadsPerCore;
            return this;
        }
        public ClusterNodeConfigAdvancedMachineFeatures build() {
            final var _resultValue = new ClusterNodeConfigAdvancedMachineFeatures();
            _resultValue.enableNestedVirtualization = enableNestedVirtualization;
            _resultValue.performanceMonitoringUnit = performanceMonitoringUnit;
            _resultValue.threadsPerCore = threadsPerCore;
            return _resultValue;
        }
    }
}
