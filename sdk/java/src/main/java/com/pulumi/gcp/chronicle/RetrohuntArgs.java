// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.chronicle.inputs.RetrohuntProcessIntervalArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RetrohuntArgs extends com.pulumi.resources.ResourceArgs {

    public static final RetrohuntArgs Empty = new RetrohuntArgs();

    /**
     * The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     * 
     */
    @Import(name="RetrohuntId")
    private @Nullable Output<String> RetrohuntId;

    /**
     * @return The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     * 
     */
    public Optional<Output<String>> RetrohuntId() {
        return Optional.ofNullable(this.RetrohuntId);
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance", required=true)
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    @Import(name="processInterval", required=true)
    private Output<RetrohuntProcessIntervalArgs> processInterval;

    /**
     * @return Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    public Output<RetrohuntProcessIntervalArgs> processInterval() {
        return this.processInterval;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Rule ID of the rule.
     * 
     */
    @Import(name="rule", required=true)
    private Output<String> rule;

    /**
     * @return The Rule ID of the rule.
     * 
     */
    public Output<String> rule() {
        return this.rule;
    }

    private RetrohuntArgs() {}

    private RetrohuntArgs(RetrohuntArgs $) {
        this.RetrohuntId = $.RetrohuntId;
        this.instance = $.instance;
        this.location = $.location;
        this.processInterval = $.processInterval;
        this.project = $.project;
        this.rule = $.rule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetrohuntArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetrohuntArgs $;

        public Builder() {
            $ = new RetrohuntArgs();
        }

        public Builder(RetrohuntArgs defaults) {
            $ = new RetrohuntArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param RetrohuntId The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
         * 
         * @return builder
         * 
         */
        public Builder RetrohuntId(@Nullable Output<String> RetrohuntId) {
            $.RetrohuntId = RetrohuntId;
            return this;
        }

        /**
         * @param RetrohuntId The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
         * 
         * @return builder
         * 
         */
        public Builder RetrohuntId(String RetrohuntId) {
            return RetrohuntId(Output.of(RetrohuntId));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param processInterval Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder processInterval(Output<RetrohuntProcessIntervalArgs> processInterval) {
            $.processInterval = processInterval;
            return this;
        }

        /**
         * @param processInterval Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder processInterval(RetrohuntProcessIntervalArgs processInterval) {
            return processInterval(Output.of(processInterval));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rule The Rule ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder rule(Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule The Rule ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        public RetrohuntArgs build() {
            if ($.instance == null) {
                throw new MissingRequiredPropertyException("RetrohuntArgs", "instance");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RetrohuntArgs", "location");
            }
            if ($.processInterval == null) {
                throw new MissingRequiredPropertyException("RetrohuntArgs", "processInterval");
            }
            if ($.rule == null) {
                throw new MissingRequiredPropertyException("RetrohuntArgs", "rule");
            }
            return $;
        }
    }

}
