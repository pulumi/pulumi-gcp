// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.saasruntime.inputs.RolloutKindErrorBudgetArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolloutKindArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutKindArgs Empty = new RolloutKindArgs();

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
     * Structure is documented below.
     * 
     */
    @Import(name="errorBudget")
    private @Nullable Output<RolloutKindErrorBudgetArgs> errorBudget;

    /**
     * @return The configuration for error budget. If the number of failed units exceeds
     * max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RolloutKindErrorBudgetArgs>> errorBudget() {
        return Optional.ofNullable(this.errorBudget);
    }

    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID value for the new rollout kind.
     * 
     */
    @Import(name="rolloutKindId", required=true)
    private Output<String> rolloutKindId;

    /**
     * @return The ID value for the new rollout kind.
     * 
     */
    public Output<String> rolloutKindId() {
        return this.rolloutKindId;
    }

    /**
     * The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - &#34;Google.Cloud.Simple.AllAtOnce&#34;
     * - &#34;Google.Cloud.Simple.OneLocationAtATime&#34;
     *   A rollout with one of these simple strategies will rollout across
     *   all locations defined in the associated UnitKind&#39;s Saas Locations.
     * 
     */
    @Import(name="rolloutOrchestrationStrategy")
    private @Nullable Output<String> rolloutOrchestrationStrategy;

    /**
     * @return The strategy used for executing a Rollout. This is a required field.
     * There are two supported values strategies which are used to control a rollout.
     * - &#34;Google.Cloud.Simple.AllAtOnce&#34;
     * - &#34;Google.Cloud.Simple.OneLocationAtATime&#34;
     *   A rollout with one of these simple strategies will rollout across
     *   all locations defined in the associated UnitKind&#39;s Saas Locations.
     * 
     */
    public Optional<Output<String>> rolloutOrchestrationStrategy() {
        return Optional.ofNullable(this.rolloutOrchestrationStrategy);
    }

    /**
     * CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     * 
     */
    @Import(name="unitFilter")
    private @Nullable Output<String> unitFilter;

    /**
     * @return CEL(https://github.com/google/cel-spec) formatted filter string against
     * Unit. The filter will be applied to determine the eligible unit population.
     * This filter can only reduce, but not expand the scope of the rollout.
     * 
     */
    public Optional<Output<String>> unitFilter() {
        return Optional.ofNullable(this.unitFilter);
    }

    /**
     * UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     * 
     */
    @Import(name="unitKind", required=true)
    private Output<String> unitKind;

    /**
     * @return UnitKind that this rollout kind corresponds to. Rollouts stemming from this
     * rollout kind will target the units of this unit kind. In other words, this
     * defines the population of target units to be upgraded by rollouts.
     * 
     */
    public Output<String> unitKind() {
        return this.unitKind;
    }

    /**
     * The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     * 
     */
    @Import(name="updateUnitKindStrategy")
    private @Nullable Output<String> updateUnitKindStrategy;

    /**
     * @return The config for updating the unit kind. By default, the unit kind will be
     * updated on the rollout start.
     * Possible values:
     * UPDATE_UNIT_KIND_STRATEGY_ON_START
     * UPDATE_UNIT_KIND_STRATEGY_NEVER
     * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
     * 
     */
    public Optional<Output<String>> updateUnitKindStrategy() {
        return Optional.ofNullable(this.updateUnitKindStrategy);
    }

    private RolloutKindArgs() {}

    private RolloutKindArgs(RolloutKindArgs $) {
        this.annotations = $.annotations;
        this.errorBudget = $.errorBudget;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.rolloutKindId = $.rolloutKindId;
        this.rolloutOrchestrationStrategy = $.rolloutOrchestrationStrategy;
        this.unitFilter = $.unitFilter;
        this.unitKind = $.unitKind;
        this.updateUnitKindStrategy = $.updateUnitKindStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutKindArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutKindArgs $;

        public Builder() {
            $ = new RolloutKindArgs();
        }

        public Builder(RolloutKindArgs defaults) {
            $ = new RolloutKindArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param errorBudget The configuration for error budget. If the number of failed units exceeds
         * max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorBudget(@Nullable Output<RolloutKindErrorBudgetArgs> errorBudget) {
            $.errorBudget = errorBudget;
            return this;
        }

        /**
         * @param errorBudget The configuration for error budget. If the number of failed units exceeds
         * max(allowed_count, allowed_ratio * total_units), the rollout will be paused.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorBudget(RolloutKindErrorBudgetArgs errorBudget) {
            return errorBudget(Output.of(errorBudget));
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rolloutKindId The ID value for the new rollout kind.
         * 
         * @return builder
         * 
         */
        public Builder rolloutKindId(Output<String> rolloutKindId) {
            $.rolloutKindId = rolloutKindId;
            return this;
        }

        /**
         * @param rolloutKindId The ID value for the new rollout kind.
         * 
         * @return builder
         * 
         */
        public Builder rolloutKindId(String rolloutKindId) {
            return rolloutKindId(Output.of(rolloutKindId));
        }

        /**
         * @param rolloutOrchestrationStrategy The strategy used for executing a Rollout. This is a required field.
         * There are two supported values strategies which are used to control a rollout.
         * - &#34;Google.Cloud.Simple.AllAtOnce&#34;
         * - &#34;Google.Cloud.Simple.OneLocationAtATime&#34;
         *   A rollout with one of these simple strategies will rollout across
         *   all locations defined in the associated UnitKind&#39;s Saas Locations.
         * 
         * @return builder
         * 
         */
        public Builder rolloutOrchestrationStrategy(@Nullable Output<String> rolloutOrchestrationStrategy) {
            $.rolloutOrchestrationStrategy = rolloutOrchestrationStrategy;
            return this;
        }

        /**
         * @param rolloutOrchestrationStrategy The strategy used for executing a Rollout. This is a required field.
         * There are two supported values strategies which are used to control a rollout.
         * - &#34;Google.Cloud.Simple.AllAtOnce&#34;
         * - &#34;Google.Cloud.Simple.OneLocationAtATime&#34;
         *   A rollout with one of these simple strategies will rollout across
         *   all locations defined in the associated UnitKind&#39;s Saas Locations.
         * 
         * @return builder
         * 
         */
        public Builder rolloutOrchestrationStrategy(String rolloutOrchestrationStrategy) {
            return rolloutOrchestrationStrategy(Output.of(rolloutOrchestrationStrategy));
        }

        /**
         * @param unitFilter CEL(https://github.com/google/cel-spec) formatted filter string against
         * Unit. The filter will be applied to determine the eligible unit population.
         * This filter can only reduce, but not expand the scope of the rollout.
         * 
         * @return builder
         * 
         */
        public Builder unitFilter(@Nullable Output<String> unitFilter) {
            $.unitFilter = unitFilter;
            return this;
        }

        /**
         * @param unitFilter CEL(https://github.com/google/cel-spec) formatted filter string against
         * Unit. The filter will be applied to determine the eligible unit population.
         * This filter can only reduce, but not expand the scope of the rollout.
         * 
         * @return builder
         * 
         */
        public Builder unitFilter(String unitFilter) {
            return unitFilter(Output.of(unitFilter));
        }

        /**
         * @param unitKind UnitKind that this rollout kind corresponds to. Rollouts stemming from this
         * rollout kind will target the units of this unit kind. In other words, this
         * defines the population of target units to be upgraded by rollouts.
         * 
         * @return builder
         * 
         */
        public Builder unitKind(Output<String> unitKind) {
            $.unitKind = unitKind;
            return this;
        }

        /**
         * @param unitKind UnitKind that this rollout kind corresponds to. Rollouts stemming from this
         * rollout kind will target the units of this unit kind. In other words, this
         * defines the population of target units to be upgraded by rollouts.
         * 
         * @return builder
         * 
         */
        public Builder unitKind(String unitKind) {
            return unitKind(Output.of(unitKind));
        }

        /**
         * @param updateUnitKindStrategy The config for updating the unit kind. By default, the unit kind will be
         * updated on the rollout start.
         * Possible values:
         * UPDATE_UNIT_KIND_STRATEGY_ON_START
         * UPDATE_UNIT_KIND_STRATEGY_NEVER
         * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
         * 
         * @return builder
         * 
         */
        public Builder updateUnitKindStrategy(@Nullable Output<String> updateUnitKindStrategy) {
            $.updateUnitKindStrategy = updateUnitKindStrategy;
            return this;
        }

        /**
         * @param updateUnitKindStrategy The config for updating the unit kind. By default, the unit kind will be
         * updated on the rollout start.
         * Possible values:
         * UPDATE_UNIT_KIND_STRATEGY_ON_START
         * UPDATE_UNIT_KIND_STRATEGY_NEVER
         * Possible values are: `UPDATE_UNIT_KIND_STRATEGY_ON_START`, `UPDATE_UNIT_KIND_STRATEGY_NEVER`.
         * 
         * @return builder
         * 
         */
        public Builder updateUnitKindStrategy(String updateUnitKindStrategy) {
            return updateUnitKindStrategy(Output.of(updateUnitKindStrategy));
        }

        public RolloutKindArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RolloutKindArgs", "location");
            }
            if ($.rolloutKindId == null) {
                throw new MissingRequiredPropertyException("RolloutKindArgs", "rolloutKindId");
            }
            if ($.unitKind == null) {
                throw new MissingRequiredPropertyException("RolloutKindArgs", "unitKind");
            }
            return $;
        }
    }

}
