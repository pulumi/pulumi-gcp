// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatascanDataDiscoverySpecBigqueryPublishingConfig {
    /**
     * @return The BigQuery connection used to create BigLake tables. Must be in the form `projects/{projectId}/locations/{locationId}/connections/{connection_id}`.
     * 
     */
    private @Nullable String connection;
    /**
     * @return The location of the BigQuery dataset to publish BigLake external or non-BigLake external tables to.
     * 
     */
    private @Nullable String location;
    /**
     * @return The project of the BigQuery dataset to publish BigLake external or non-BigLake external tables to. If not specified, the project of the Cloud Storage bucket will be used. The format is &#34;projects/{project_id_or_number}&#34;.
     * 
     */
    private @Nullable String project;
    /**
     * @return Determines whether to publish discovered tables as BigLake external tables or non-BigLake external tables.
     * Possible values are: `TABLE_TYPE_UNSPECIFIED`, `EXTERNAL`, `BIGLAKE`.
     * 
     */
    private @Nullable String tableType;

    private DatascanDataDiscoverySpecBigqueryPublishingConfig() {}
    /**
     * @return The BigQuery connection used to create BigLake tables. Must be in the form `projects/{projectId}/locations/{locationId}/connections/{connection_id}`.
     * 
     */
    public Optional<String> connection() {
        return Optional.ofNullable(this.connection);
    }
    /**
     * @return The location of the BigQuery dataset to publish BigLake external or non-BigLake external tables to.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The project of the BigQuery dataset to publish BigLake external or non-BigLake external tables to. If not specified, the project of the Cloud Storage bucket will be used. The format is &#34;projects/{project_id_or_number}&#34;.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return Determines whether to publish discovered tables as BigLake external tables or non-BigLake external tables.
     * Possible values are: `TABLE_TYPE_UNSPECIFIED`, `EXTERNAL`, `BIGLAKE`.
     * 
     */
    public Optional<String> tableType() {
        return Optional.ofNullable(this.tableType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatascanDataDiscoverySpecBigqueryPublishingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connection;
        private @Nullable String location;
        private @Nullable String project;
        private @Nullable String tableType;
        public Builder() {}
        public Builder(DatascanDataDiscoverySpecBigqueryPublishingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connection = defaults.connection;
    	      this.location = defaults.location;
    	      this.project = defaults.project;
    	      this.tableType = defaults.tableType;
        }

        @CustomType.Setter
        public Builder connection(@Nullable String connection) {

            this.connection = connection;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder tableType(@Nullable String tableType) {

            this.tableType = tableType;
            return this;
        }
        public DatascanDataDiscoverySpecBigqueryPublishingConfig build() {
            final var _resultValue = new DatascanDataDiscoverySpecBigqueryPublishingConfig();
            _resultValue.connection = connection;
            _resultValue.location = location;
            _resultValue.project = project;
            _resultValue.tableType = tableType;
            return _resultValue;
        }
    }
}
