// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs Empty = new AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs();

    /**
     * Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.
     * 
     */
    @Import(name="attempts", required=true)
    private Output<String> attempts;

    /**
     * @return Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.
     * 
     */
    public Output<String> attempts() {
        return this.attempts;
    }

    /**
     * Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if wait is 0.
     * Possible values are: `BACKOFF_MODE_UNSPECIFIED`, `BACKOFF_MODE_LINEAR`, `BACKOFF_MODE_EXPONENTIAL`.
     * 
     */
    @Import(name="backoffMode")
    private @Nullable Output<String> backoffMode;

    /**
     * @return Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if wait is 0.
     * Possible values are: `BACKOFF_MODE_UNSPECIFIED`, `BACKOFF_MODE_LINEAR`, `BACKOFF_MODE_EXPONENTIAL`.
     * 
     */
    public Optional<Output<String>> backoffMode() {
        return Optional.ofNullable(this.backoffMode);
    }

    /**
     * Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: `3.5s`.
     * 
     */
    @Import(name="wait")
    private @Nullable Output<String> wait;

    /**
     * @return Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: `3.5s`.
     * 
     */
    public Optional<Output<String>> wait_() {
        return Optional.ofNullable(this.wait);
    }

    private AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs() {}

    private AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs(AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs $) {
        this.attempts = $.attempts;
        this.backoffMode = $.backoffMode;
        this.wait = $.wait;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs $;

        public Builder() {
            $ = new AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs();
        }

        public Builder(AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs defaults) {
            $ = new AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attempts Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.
         * 
         * @return builder
         * 
         */
        public Builder attempts(Output<String> attempts) {
            $.attempts = attempts;
            return this;
        }

        /**
         * @param attempts Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.
         * 
         * @return builder
         * 
         */
        public Builder attempts(String attempts) {
            return attempts(Output.of(attempts));
        }

        /**
         * @param backoffMode Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if wait is 0.
         * Possible values are: `BACKOFF_MODE_UNSPECIFIED`, `BACKOFF_MODE_LINEAR`, `BACKOFF_MODE_EXPONENTIAL`.
         * 
         * @return builder
         * 
         */
        public Builder backoffMode(@Nullable Output<String> backoffMode) {
            $.backoffMode = backoffMode;
            return this;
        }

        /**
         * @param backoffMode Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if wait is 0.
         * Possible values are: `BACKOFF_MODE_UNSPECIFIED`, `BACKOFF_MODE_LINEAR`, `BACKOFF_MODE_EXPONENTIAL`.
         * 
         * @return builder
         * 
         */
        public Builder backoffMode(String backoffMode) {
            return backoffMode(Output.of(backoffMode));
        }

        /**
         * @param wait Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: `3.5s`.
         * 
         * @return builder
         * 
         */
        public Builder wait_(@Nullable Output<String> wait) {
            $.wait = wait;
            return this;
        }

        /**
         * @param wait Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d. A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: `3.5s`.
         * 
         * @return builder
         * 
         */
        public Builder wait_(String wait) {
            return wait_(Output.of(wait));
        }

        public AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs build() {
            if ($.attempts == null) {
                throw new MissingRequiredPropertyException("AutomationRuleRepairRolloutRuleRepairPhaseRetryArgs", "attempts");
            }
            return $;
        }
    }

}
