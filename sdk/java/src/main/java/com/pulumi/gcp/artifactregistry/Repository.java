// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryState;
import com.pulumi.gcp.artifactregistry.outputs.RepositoryCleanupPolicy;
import com.pulumi.gcp.artifactregistry.outputs.RepositoryDockerConfig;
import com.pulumi.gcp.artifactregistry.outputs.RepositoryMavenConfig;
import com.pulumi.gcp.artifactregistry.outputs.RepositoryRemoteRepositoryConfig;
import com.pulumi.gcp.artifactregistry.outputs.RepositoryVirtualRepositoryConfig;
import com.pulumi.gcp.artifactregistry.outputs.RepositoryVulnerabilityScanningConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A repository for storing artifacts
 * 
 * To get more information about Repository, see:
 * 
 * * [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
 * 
 * ## Example Usage
 * 
 * ### Artifact Registry Repository Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example docker repository")
 *             .format("DOCKER")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Multi Region
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .repositoryId("my-repository")
 *             .description("example docker repository")
 *             .location("us")
 *             .format("DOCKER")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Docker
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryDockerConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example docker repository")
 *             .format("DOCKER")
 *             .dockerConfig(RepositoryDockerConfigArgs.builder()
 *                 .immutableTags(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Cmek
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var cryptoKey = new CryptoKeyIAMMember("cryptoKey", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId("kms-key")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example docker repository with cmek")
 *             .format("DOCKER")
 *             .kmsKeyName("kms-key")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cryptoKey)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Virtual
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryVirtualRepositoryConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo_upstream_1 = new Repository("my-repo-upstream-1", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository-upstream-1")
 *             .description("example docker repository (upstream source) 1")
 *             .format("DOCKER")
 *             .build());
 * 
 *         var my_repo_upstream_2 = new Repository("my-repo-upstream-2", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository-upstream-2")
 *             .description("example docker repository (upstream source) 2")
 *             .format("DOCKER")
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example virtual docker repository")
 *             .format("DOCKER")
 *             .mode("VIRTUAL_REPOSITORY")
 *             .virtualRepositoryConfig(RepositoryVirtualRepositoryConfigArgs.builder()
 *                 .upstreamPolicies(                
 *                     RepositoryVirtualRepositoryConfigUpstreamPolicyArgs.builder()
 *                         .id("my-repository-upstream-1")
 *                         .repository(my_repo_upstream_1.id())
 *                         .priority(20)
 *                         .build(),
 *                     RepositoryVirtualRepositoryConfigUpstreamPolicyArgs.builder()
 *                         .id("my-repository-upstream-2")
 *                         .repository(my_repo_upstream_2.id())
 *                         .priority(10)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Remote
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example remote docker repository")
 *             .format("DOCKER")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("docker hub")
 *                 .dockerRepository(RepositoryRemoteRepositoryConfigDockerRepositoryArgs.builder()
 *                     .publicRepository("DOCKER_HUB")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Apt
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigAptRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("debian-stable")
 *             .description("example remote apt repository")
 *             .format("APT")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("Debian stable remote repository")
 *                 .aptRepository(RepositoryRemoteRepositoryConfigAptRepositoryArgs.builder()
 *                     .publicRepository(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs.builder()
 *                         .repositoryBase("DEBIAN")
 *                         .repositoryPath("debian/dists/stable")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Yum
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigYumRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("rocky-9")
 *             .description("example remote yum repository")
 *             .format("YUM")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("Rocky 9 remote repository")
 *                 .yumRepository(RepositoryRemoteRepositoryConfigYumRepositoryArgs.builder()
 *                     .publicRepository(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs.builder()
 *                         .repositoryBase("ROCKY")
 *                         .repositoryPath("pub/rocky/9/BaseOS/x86_64/os")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Cleanup
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyConditionArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyMostRecentVersionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example docker repository with cleanup policies")
 *             .format("DOCKER")
 *             .cleanupPolicyDryRun(false)
 *             .cleanupPolicies(            
 *                 RepositoryCleanupPolicyArgs.builder()
 *                     .id("delete-untagged")
 *                     .action("DELETE")
 *                     .condition(RepositoryCleanupPolicyConditionArgs.builder()
 *                         .tagState("UNTAGGED")
 *                         .build())
 *                     .build(),
 *                 RepositoryCleanupPolicyArgs.builder()
 *                     .id("keep-new-untagged")
 *                     .action("KEEP")
 *                     .condition(RepositoryCleanupPolicyConditionArgs.builder()
 *                         .tagState("UNTAGGED")
 *                         .newerThan("7d")
 *                         .build())
 *                     .build(),
 *                 RepositoryCleanupPolicyArgs.builder()
 *                     .id("delete-prerelease")
 *                     .action("DELETE")
 *                     .condition(RepositoryCleanupPolicyConditionArgs.builder()
 *                         .tagState("TAGGED")
 *                         .tagPrefixes(                        
 *                             "alpha",
 *                             "v0")
 *                         .olderThan("30d")
 *                         .build())
 *                     .build(),
 *                 RepositoryCleanupPolicyArgs.builder()
 *                     .id("keep-tagged-release")
 *                     .action("KEEP")
 *                     .condition(RepositoryCleanupPolicyConditionArgs.builder()
 *                         .tagState("TAGGED")
 *                         .tagPrefixes("release")
 *                         .packageNamePrefixes(                        
 *                             "webapp",
 *                             "mobile")
 *                         .build())
 *                     .build(),
 *                 RepositoryCleanupPolicyArgs.builder()
 *                     .id("keep-minimum-versions")
 *                     .action("KEEP")
 *                     .mostRecentVersions(RepositoryCleanupPolicyMostRecentVersionsArgs.builder()
 *                         .packageNamePrefixes(                        
 *                             "webapp",
 *                             "mobile",
 *                             "sandbox")
 *                         .keepCount(5)
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Dockerhub Auth
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
 *             .secretId("example-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
 *             .secret(example_remote_secret.id())
 *             .secretData("remote-password")
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(example_remote_secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-dockerhub-remote")
 *             .description("example remote dockerhub repository with credentials")
 *             .format("DOCKER")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("docker hub with custom credentials")
 *                 .disableUpstreamValidation(true)
 *                 .dockerRepository(RepositoryRemoteRepositoryConfigDockerRepositoryArgs.builder()
 *                     .publicRepository("DOCKER_HUB")
 *                     .build())
 *                 .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
 *                     .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
 *                         .username("remote-username")
 *                         .passwordSecretVersion(example_remote_secretVersion.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Docker Custom With Auth
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
 *             .secretId("example-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
 *             .secret(example_remote_secret.id())
 *             .secretData("remote-password")
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(example_remote_secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-docker-custom-remote")
 *             .description("example remote custom docker repository with credentials")
 *             .format("DOCKER")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("custom docker remote with credentials")
 *                 .disableUpstreamValidation(true)
 *                 .dockerRepository(RepositoryRemoteRepositoryConfigDockerRepositoryArgs.builder()
 *                     .customRepository(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs.builder()
 *                         .uri("https://registry-1.docker.io")
 *                         .build())
 *                     .build())
 *                 .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
 *                     .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
 *                         .username("remote-username")
 *                         .passwordSecretVersion(example_remote_secretVersion.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Maven Custom With Auth
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigMavenRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
 *             .secretId("example-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
 *             .secret(example_remote_secret.id())
 *             .secretData("remote-password")
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(example_remote_secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-maven-custom-remote")
 *             .description("example remote custom maven repository with credentials")
 *             .format("MAVEN")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("custom maven remote with credentials")
 *                 .disableUpstreamValidation(true)
 *                 .mavenRepository(RepositoryRemoteRepositoryConfigMavenRepositoryArgs.builder()
 *                     .customRepository(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs.builder()
 *                         .uri("https://my.maven.registry")
 *                         .build())
 *                     .build())
 *                 .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
 *                     .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
 *                         .username("remote-username")
 *                         .passwordSecretVersion(example_remote_secretVersion.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Npm Custom With Auth
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigNpmRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
 *             .secretId("example-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
 *             .secret(example_remote_secret.id())
 *             .secretData("remote-password")
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(example_remote_secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-npm-custom-remote")
 *             .description("example remote custom npm repository with credentials")
 *             .format("NPM")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("custom npm with credentials")
 *                 .disableUpstreamValidation(true)
 *                 .npmRepository(RepositoryRemoteRepositoryConfigNpmRepositoryArgs.builder()
 *                     .customRepository(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs.builder()
 *                         .uri("https://my.npm.registry")
 *                         .build())
 *                     .build())
 *                 .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
 *                     .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
 *                         .username("remote-username")
 *                         .passwordSecretVersion(example_remote_secretVersion.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Python Custom With Auth
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigPythonRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
 *             .secretId("example-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
 *             .secret(example_remote_secret.id())
 *             .secretData("remote-password")
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(example_remote_secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-python-custom-remote")
 *             .description("example remote custom python repository with credentials")
 *             .format("PYTHON")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("custom npm with credentials")
 *                 .disableUpstreamValidation(true)
 *                 .pythonRepository(RepositoryRemoteRepositoryConfigPythonRepositoryArgs.builder()
 *                     .customRepository(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs.builder()
 *                         .uri("https://my.python.registry")
 *                         .build())
 *                     .build())
 *                 .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
 *                     .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
 *                         .username("remote-username")
 *                         .passwordSecretVersion(example_remote_secretVersion.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Common Repository With Docker
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var upstreamRepo = new Repository("upstreamRepo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-upstream-repo")
 *             .description("example upstream repository")
 *             .format("DOCKER")
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-common-remote")
 *             .description("example remote common repository with docker upstream")
 *             .format("DOCKER")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("pull-through cache of another Artifact Registry repository")
 *                 .commonRepository(RepositoryRemoteRepositoryConfigCommonRepositoryArgs.builder()
 *                     .uri(upstreamRepo.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Common Repository With Artifact Registry Uri
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var upstreamRepo = new Repository("upstreamRepo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-upstream-repo")
 *             .description("example upstream repository")
 *             .format("DOCKER")
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-common-remote")
 *             .description("example remote common repository with docker upstream")
 *             .format("DOCKER")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("pull-through cache of another Artifact Registry repository by URL")
 *                 .commonRepository(RepositoryRemoteRepositoryConfigCommonRepositoryArgs.builder()
 *                     .uri(String.format("https://us-central1-docker.pkg.dev/%s/example-upstream-repo", project.projectId()))
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(upstreamRepo)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Artifact Registry Repository Remote Common Repository With Custom Upstream
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
 *             .secretId("example-secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
 *             .secret(example_remote_secret.id())
 *             .secretData("remote-password")
 *             .build());
 * 
 *         var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
 *             .secretId(example_remote_secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-artifactregistry.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("example-docker-custom-remote")
 *             .description("example remote custom docker repository with credentials")
 *             .format("DOCKER")
 *             .mode("REMOTE_REPOSITORY")
 *             .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
 *                 .description("custom common docker remote with credentials")
 *                 .disableUpstreamValidation(true)
 *                 .commonRepository(RepositoryRemoteRepositoryConfigCommonRepositoryArgs.builder()
 *                     .uri("https://registry-1.docker.io")
 *                     .build())
 *                 .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
 *                     .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
 *                         .username("remote-username")
 *                         .passwordSecretVersion(example_remote_secretVersion.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Artifact Registry Repository Vulnerability Scanning
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.artifactregistry.inputs.RepositoryVulnerabilityScanningConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_repo = new Repository("my-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .description("example docker repository with vulnerability scanning config")
 *             .format("DOCKER")
 *             .vulnerabilityScanningConfig(RepositoryVulnerabilityScanningConfigArgs.builder()
 *                 .enablementConfig("INHERITED")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Repository can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`
 * 
 * * `{{project}}/{{location}}/{{repository_id}}`
 * 
 * * `{{location}}/{{repository_id}}`
 * 
 * When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:artifactregistry/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:artifactregistry/repository:Repository default {{project}}/{{location}}/{{repository_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:artifactregistry/repository:Repository default {{location}}/{{repository_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:artifactregistry/repository:Repository")
public class Repository extends com.pulumi.resources.CustomResource {
    /**
     * Cleanup policies for this repository. Cleanup policies indicate when
     * certain package versions can be automatically deleted.
     * Map keys are policy IDs supplied by users during policy creation. They must
     * unique within a repository and be under 128 characters in length.
     * Structure is documented below.
     * 
     */
    @Export(name="cleanupPolicies", refs={List.class,RepositoryCleanupPolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RepositoryCleanupPolicy>> cleanupPolicies;

    /**
     * @return Cleanup policies for this repository. Cleanup policies indicate when
     * certain package versions can be automatically deleted.
     * Map keys are policy IDs supplied by users during policy creation. They must
     * unique within a repository and be under 128 characters in length.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<RepositoryCleanupPolicy>>> cleanupPolicies() {
        return Codegen.optional(this.cleanupPolicies);
    }
    /**
     * If true, the cleanup pipeline is prevented from deleting versions in this
     * repository.
     * 
     */
    @Export(name="cleanupPolicyDryRun", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cleanupPolicyDryRun;

    /**
     * @return If true, the cleanup pipeline is prevented from deleting versions in this
     * repository.
     * 
     */
    public Output<Optional<Boolean>> cleanupPolicyDryRun() {
        return Codegen.optional(this.cleanupPolicyDryRun);
    }
    /**
     * The time when the repository was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time when the repository was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The user-provided description of the repository.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The user-provided description of the repository.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Docker repository config contains repository level configuration for the repositories of docker type.
     * Structure is documented below.
     * 
     */
    @Export(name="dockerConfig", refs={RepositoryDockerConfig.class}, tree="[0]")
    private Output</* @Nullable */ RepositoryDockerConfig> dockerConfig;

    /**
     * @return Docker repository config contains repository level configuration for the repositories of docker type.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RepositoryDockerConfig>> dockerConfig() {
        return Codegen.optional(this.dockerConfig);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The format of packages that are stored in the repository. Supported formats
     * can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
     * You can only create alpha formats if you are a member of the
     * [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
     * 
     */
    @Export(name="format", refs={String.class}, tree="[0]")
    private Output<String> format;

    /**
     * @return The format of packages that are stored in the repository. Supported formats
     * can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
     * You can only create alpha formats if you are a member of the
     * [alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
     * 
     */
    public Output<String> format() {
        return this.format;
    }
    /**
     * The Cloud KMS resource name of the customer managed encryption key that’s
     * used to encrypt the contents of the Repository. Has the form:
     * `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
     * This value may not be changed after the Repository has been created.
     * 
     */
    @Export(name="kmsKeyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKeyName;

    /**
     * @return The Cloud KMS resource name of the customer managed encryption key that’s
     * used to encrypt the contents of the Repository. Has the form:
     * `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
     * This value may not be changed after the Repository has been created.
     * 
     */
    public Output<Optional<String>> kmsKeyName() {
        return Codegen.optional(this.kmsKeyName);
    }
    /**
     * Labels with user-defined metadata.
     * This field may contain up to 64 entries. Label keys and values may be no
     * longer than 63 characters. Label keys must begin with a lowercase letter
     * and may only contain lowercase letters, numeric characters, underscores,
     * and dashes.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels with user-defined metadata.
     * This field may contain up to 64 entries. Label keys and values may be no
     * longer than 63 characters. Label keys must begin with a lowercase letter
     * and may only contain lowercase letters, numeric characters, underscores,
     * and dashes.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The name of the repository&#39;s location. In addition to specific regions,
     * special values for multi-region locations are `asia`, `europe`, and `us`.
     * See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
     * or use the
     * gcp.artifactregistry.getLocations
     * data source for possible values.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The name of the repository&#39;s location. In addition to specific regions,
     * special values for multi-region locations are `asia`, `europe`, and `us`.
     * See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
     * or use the
     * gcp.artifactregistry.getLocations
     * data source for possible values.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * MavenRepositoryConfig is maven related repository details.
     * Provides additional configuration details for repositories of the maven
     * format type.
     * Structure is documented below.
     * 
     */
    @Export(name="mavenConfig", refs={RepositoryMavenConfig.class}, tree="[0]")
    private Output</* @Nullable */ RepositoryMavenConfig> mavenConfig;

    /**
     * @return MavenRepositoryConfig is maven related repository details.
     * Provides additional configuration details for repositories of the maven
     * format type.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RepositoryMavenConfig>> mavenConfig() {
        return Codegen.optional(this.mavenConfig);
    }
    /**
     * The mode configures the repository to serve artifacts from different sources.
     * Default value is `STANDARD_REPOSITORY`.
     * Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mode;

    /**
     * @return The mode configures the repository to serve artifacts from different sources.
     * Default value is `STANDARD_REPOSITORY`.
     * Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
     * 
     */
    public Output<Optional<String>> mode() {
        return Codegen.optional(this.mode);
    }
    /**
     * The name of the repository, for example:
     * &#34;repo1&#34;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the repository, for example:
     * &#34;repo1&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The repository endpoint, for example: us-docker.pkg.dev/my-proj/my-repo.
     * 
     */
    @Export(name="registryUri", refs={String.class}, tree="[0]")
    private Output<String> registryUri;

    /**
     * @return The repository endpoint, for example: us-docker.pkg.dev/my-proj/my-repo.
     * 
     */
    public Output<String> registryUri() {
        return this.registryUri;
    }
    /**
     * Configuration specific for a Remote Repository.
     * Structure is documented below.
     * 
     */
    @Export(name="remoteRepositoryConfig", refs={RepositoryRemoteRepositoryConfig.class}, tree="[0]")
    private Output</* @Nullable */ RepositoryRemoteRepositoryConfig> remoteRepositoryConfig;

    /**
     * @return Configuration specific for a Remote Repository.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RepositoryRemoteRepositoryConfig>> remoteRepositoryConfig() {
        return Codegen.optional(this.remoteRepositoryConfig);
    }
    /**
     * The last part of the repository name, for example:
     * &#34;repo1&#34;
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return The last part of the repository name, for example:
     * &#34;repo1&#34;
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }
    /**
     * The time when the repository was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time when the repository was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Configuration specific for a Virtual Repository.
     * Structure is documented below.
     * 
     */
    @Export(name="virtualRepositoryConfig", refs={RepositoryVirtualRepositoryConfig.class}, tree="[0]")
    private Output</* @Nullable */ RepositoryVirtualRepositoryConfig> virtualRepositoryConfig;

    /**
     * @return Configuration specific for a Virtual Repository.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RepositoryVirtualRepositoryConfig>> virtualRepositoryConfig() {
        return Codegen.optional(this.virtualRepositoryConfig);
    }
    /**
     * Configuration for vulnerability scanning of artifacts stored in this repository.
     * Structure is documented below.
     * 
     */
    @Export(name="vulnerabilityScanningConfig", refs={RepositoryVulnerabilityScanningConfig.class}, tree="[0]")
    private Output<RepositoryVulnerabilityScanningConfig> vulnerabilityScanningConfig;

    /**
     * @return Configuration for vulnerability scanning of artifacts stored in this repository.
     * Structure is documented below.
     * 
     */
    public Output<RepositoryVulnerabilityScanningConfig> vulnerabilityScanningConfig() {
        return this.vulnerabilityScanningConfig;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repository(java.lang.String name) {
        this(name, RepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repository(java.lang.String name, RepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repository(java.lang.String name, RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:artifactregistry/repository:Repository", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Repository(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:artifactregistry/repository:Repository", name, state, makeResourceOptions(options, id), false);
    }

    private static RepositoryArgs makeArgs(RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RepositoryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repository get(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Repository(name, id, state, options);
    }
}
