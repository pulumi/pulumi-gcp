// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gameservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.gameservices.outputs.GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGameServerDeploymentRolloutGameServerConfigOverride {
    private String configVersion;
    private List<GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector> realmsSelectors;

    private GetGameServerDeploymentRolloutGameServerConfigOverride() {}
    public String configVersion() {
        return this.configVersion;
    }
    public List<GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector> realmsSelectors() {
        return this.realmsSelectors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGameServerDeploymentRolloutGameServerConfigOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configVersion;
        private List<GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector> realmsSelectors;
        public Builder() {}
        public Builder(GetGameServerDeploymentRolloutGameServerConfigOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configVersion = defaults.configVersion;
    	      this.realmsSelectors = defaults.realmsSelectors;
        }

        @CustomType.Setter
        public Builder configVersion(String configVersion) {
            this.configVersion = Objects.requireNonNull(configVersion);
            return this;
        }
        @CustomType.Setter
        public Builder realmsSelectors(List<GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector> realmsSelectors) {
            this.realmsSelectors = Objects.requireNonNull(realmsSelectors);
            return this;
        }
        public Builder realmsSelectors(GetGameServerDeploymentRolloutGameServerConfigOverrideRealmsSelector... realmsSelectors) {
            return realmsSelectors(List.of(realmsSelectors));
        }
        public GetGameServerDeploymentRolloutGameServerConfigOverride build() {
            final var o = new GetGameServerDeploymentRolloutGameServerConfigOverride();
            o.configVersion = configVersion;
            o.realmsSelectors = realmsSelectors;
            return o;
        }
    }
}
