// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.networkservices.inputs.WasmPluginLogConfigArgs;
import com.pulumi.gcp.networkservices.inputs.WasmPluginVersionArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WasmPluginArgs extends com.pulumi.resources.ResourceArgs {

    public static final WasmPluginArgs Empty = new WasmPluginArgs();

    /**
     * Optional. A human-readable description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A human-readable description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the traffic extension
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the traffic extension
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<WasmPluginLogConfigArgs> logConfig;

    /**
     * @return Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WasmPluginLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the &#34;versions&#34; field.
     * 
     */
    @Import(name="mainVersionId", required=true)
    private Output<String> mainVersionId;

    /**
     * @return The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the &#34;versions&#34; field.
     * 
     */
    public Output<String> mainVersionId() {
        return this.mainVersionId;
    }

    /**
     * Identifier. Name of the WasmPlugin resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. Name of the WasmPlugin resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     * 
     */
    @Import(name="versions", required=true)
    private Output<List<WasmPluginVersionArgs>> versions;

    /**
     * @return All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     * 
     */
    public Output<List<WasmPluginVersionArgs>> versions() {
        return this.versions;
    }

    private WasmPluginArgs() {}

    private WasmPluginArgs(WasmPluginArgs $) {
        this.description = $.description;
        this.labels = $.labels;
        this.location = $.location;
        this.logConfig = $.logConfig;
        this.mainVersionId = $.mainVersionId;
        this.name = $.name;
        this.project = $.project;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WasmPluginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WasmPluginArgs $;

        public Builder() {
            $ = new WasmPluginArgs();
        }

        public Builder(WasmPluginArgs defaults) {
            $ = new WasmPluginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional. A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A human-readable description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels Optional. Set of labels associated with the WasmPlugin resource.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Set of labels associated with the WasmPlugin resource.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the traffic extension
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the traffic extension
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logConfig Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
         * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<WasmPluginLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
         * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(WasmPluginLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param mainVersionId The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the &#34;versions&#34; field.
         * 
         * @return builder
         * 
         */
        public Builder mainVersionId(Output<String> mainVersionId) {
            $.mainVersionId = mainVersionId;
            return this;
        }

        /**
         * @param mainVersionId The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the &#34;versions&#34; field.
         * 
         * @return builder
         * 
         */
        public Builder mainVersionId(String mainVersionId) {
            return mainVersionId(Output.of(mainVersionId));
        }

        /**
         * @param name Identifier. Name of the WasmPlugin resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. Name of the WasmPlugin resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param versions All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(Output<List<WasmPluginVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<WasmPluginVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder versions(WasmPluginVersionArgs... versions) {
            return versions(List.of(versions));
        }

        public WasmPluginArgs build() {
            if ($.mainVersionId == null) {
                throw new MissingRequiredPropertyException("WasmPluginArgs", "mainVersionId");
            }
            if ($.versions == null) {
                throw new MissingRequiredPropertyException("WasmPluginArgs", "versions");
            }
            return $;
        }
    }

}
