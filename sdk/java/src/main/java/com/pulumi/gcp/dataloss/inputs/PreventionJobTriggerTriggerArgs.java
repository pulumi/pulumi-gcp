// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionJobTriggerTriggerManualArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionJobTriggerTriggerScheduleArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionJobTriggerTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionJobTriggerTriggerArgs Empty = new PreventionJobTriggerTriggerArgs();

    /**
     * For use with hybrid jobs. Jobs must be manually created and finished.
     * 
     */
    @Import(name="manual")
    private @Nullable Output<PreventionJobTriggerTriggerManualArgs> manual;

    /**
     * @return For use with hybrid jobs. Jobs must be manually created and finished.
     * 
     */
    public Optional<Output<PreventionJobTriggerTriggerManualArgs>> manual() {
        return Optional.ofNullable(this.manual);
    }

    /**
     * Schedule for triggered jobs
     * Structure is documented below.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<PreventionJobTriggerTriggerScheduleArgs> schedule;

    /**
     * @return Schedule for triggered jobs
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionJobTriggerTriggerScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private PreventionJobTriggerTriggerArgs() {}

    private PreventionJobTriggerTriggerArgs(PreventionJobTriggerTriggerArgs $) {
        this.manual = $.manual;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionJobTriggerTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionJobTriggerTriggerArgs $;

        public Builder() {
            $ = new PreventionJobTriggerTriggerArgs();
        }

        public Builder(PreventionJobTriggerTriggerArgs defaults) {
            $ = new PreventionJobTriggerTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manual For use with hybrid jobs. Jobs must be manually created and finished.
         * 
         * @return builder
         * 
         */
        public Builder manual(@Nullable Output<PreventionJobTriggerTriggerManualArgs> manual) {
            $.manual = manual;
            return this;
        }

        /**
         * @param manual For use with hybrid jobs. Jobs must be manually created and finished.
         * 
         * @return builder
         * 
         */
        public Builder manual(PreventionJobTriggerTriggerManualArgs manual) {
            return manual(Output.of(manual));
        }

        /**
         * @param schedule Schedule for triggered jobs
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<PreventionJobTriggerTriggerScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Schedule for triggered jobs
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(PreventionJobTriggerTriggerScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public PreventionJobTriggerTriggerArgs build() {
            return $;
        }
    }

}
