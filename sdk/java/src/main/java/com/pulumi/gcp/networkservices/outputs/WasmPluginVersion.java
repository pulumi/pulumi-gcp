// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WasmPluginVersion {
    /**
     * @return (Output)
     * Output only. The timestamp when the resource was created.
     * 
     */
    private @Nullable String createTime;
    /**
     * @return Optional. A human-readable description of the resource.
     * 
     */
    private @Nullable String description;
    /**
     * @return (Output)
     * Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
     * This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
     * 
     */
    private @Nullable String imageDigest;
    /**
     * @return Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
     * When downloading an image, the digest value is used instead of an image tag.
     * 
     */
    private @Nullable String imageUri;
    /**
     * @return Optional. Set of labels associated with the WasmPlugin resource.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigUri.
     * 
     */
    private @Nullable String pluginConfigData;
    /**
     * @return (Output)
     * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
     * The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
     * 
     */
    private @Nullable String pluginConfigDigest;
    /**
     * @return URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * The container image must contain only a single file with the name plugin.config.
     * When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigData.
     * 
     */
    private @Nullable String pluginConfigUri;
    /**
     * @return (Output)
     * Output only. The timestamp when the resource was updated.
     * 
     */
    private @Nullable String updateTime;
    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    private String versionName;

    private WasmPluginVersion() {}
    /**
     * @return (Output)
     * Output only. The timestamp when the resource was created.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }
    /**
     * @return Optional. A human-readable description of the resource.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return (Output)
     * Output only. The resolved digest for the image specified in the image field. The digest is resolved during the creation of WasmPluginVersion resource.
     * This field holds the digest value, regardless of whether a tag or digest was originally specified in the image field.
     * 
     */
    public Optional<String> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }
    /**
     * @return Optional. URI of the container image containing the plugin, stored in the Artifact Registry. When a new WasmPluginVersion resource is created, the digest of the container image is saved in the imageDigest field.
     * When downloading an image, the digest value is used instead of an image tag.
     * 
     */
    public Optional<String> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }
    /**
     * @return Optional. Set of labels associated with the WasmPlugin resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return A base64-encoded string containing the configuration for the plugin. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * When a new WasmPluginVersion resource is created, the digest of the contents is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigUri.
     * 
     */
    public Optional<String> pluginConfigData() {
        return Optional.ofNullable(this.pluginConfigData);
    }
    /**
     * @return (Output)
     * Output only. This field holds the digest (usually checksum) value for the plugin configuration.
     * The value is calculated based on the contents of pluginConfigData or the container image defined by the pluginConfigUri field.
     * 
     */
    public Optional<String> pluginConfigDigest() {
        return Optional.ofNullable(this.pluginConfigDigest);
    }
    /**
     * @return URI of the plugin configuration stored in the Artifact Registry. The configuration is provided to the plugin at runtime through the ON_CONFIGURE callback.
     * The container image must contain only a single file with the name plugin.config.
     * When a new WasmPluginVersion resource is created, the digest of the container image is saved in the pluginConfigDigest field.
     * Conflics with pluginConfigData.
     * 
     */
    public Optional<String> pluginConfigUri() {
        return Optional.ofNullable(this.pluginConfigUri);
    }
    /**
     * @return (Output)
     * Output only. The timestamp when the resource was updated.
     * 
     */
    public Optional<String> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }
    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public String versionName() {
        return this.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WasmPluginVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String createTime;
        private @Nullable String description;
        private @Nullable String imageDigest;
        private @Nullable String imageUri;
        private @Nullable Map<String,String> labels;
        private @Nullable String pluginConfigData;
        private @Nullable String pluginConfigDigest;
        private @Nullable String pluginConfigUri;
        private @Nullable String updateTime;
        private String versionName;
        public Builder() {}
        public Builder(WasmPluginVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.imageDigest = defaults.imageDigest;
    	      this.imageUri = defaults.imageUri;
    	      this.labels = defaults.labels;
    	      this.pluginConfigData = defaults.pluginConfigData;
    	      this.pluginConfigDigest = defaults.pluginConfigDigest;
    	      this.pluginConfigUri = defaults.pluginConfigUri;
    	      this.updateTime = defaults.updateTime;
    	      this.versionName = defaults.versionName;
        }

        @CustomType.Setter
        public Builder createTime(@Nullable String createTime) {

            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder imageDigest(@Nullable String imageDigest) {

            this.imageDigest = imageDigest;
            return this;
        }
        @CustomType.Setter
        public Builder imageUri(@Nullable String imageUri) {

            this.imageUri = imageUri;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder pluginConfigData(@Nullable String pluginConfigData) {

            this.pluginConfigData = pluginConfigData;
            return this;
        }
        @CustomType.Setter
        public Builder pluginConfigDigest(@Nullable String pluginConfigDigest) {

            this.pluginConfigDigest = pluginConfigDigest;
            return this;
        }
        @CustomType.Setter
        public Builder pluginConfigUri(@Nullable String pluginConfigUri) {

            this.pluginConfigUri = pluginConfigUri;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(@Nullable String updateTime) {

            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder versionName(String versionName) {
            if (versionName == null) {
              throw new MissingRequiredPropertyException("WasmPluginVersion", "versionName");
            }
            this.versionName = versionName;
            return this;
        }
        public WasmPluginVersion build() {
            final var _resultValue = new WasmPluginVersion();
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.imageDigest = imageDigest;
            _resultValue.imageUri = imageUri;
            _resultValue.labels = labels;
            _resultValue.pluginConfigData = pluginConfigData;
            _resultValue.pluginConfigDigest = pluginConfigDigest;
            _resultValue.pluginConfigUri = pluginConfigUri;
            _resultValue.updateTime = updateTime;
            _resultValue.versionName = versionName;
            return _resultValue;
        }
    }
}
