// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.clouddeploy.DeployPolicyArgs;
import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyState;
import com.pulumi.gcp.clouddeploy.outputs.DeployPolicyRule;
import com.pulumi.gcp.clouddeploy.outputs.DeployPolicySelector;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A `DeployPolicy` inhibits manual or DeployPolicy-driven actions within a Delivery Pipeline or Target.
 * 
 * To get more information about DeployPolicy, see:
 * 
 * * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deployPolicies)
 * * How-to Guides
 *     * [Restrict deploy behavior using policies](https://cloud.google.com/deploy/docs/deploy-policy)
 * 
 * ## Example Usage
 * 
 * ### Clouddeploy Deploy Policy Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.clouddeploy.DeployPolicy;
 * import com.pulumi.gcp.clouddeploy.DeployPolicyArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicySelectorArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicySelectorDeliveryPipelineArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleRolloutRestrictionArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var b_deploy_policy = new DeployPolicy("b-deploy-policy", DeployPolicyArgs.builder()
 *             .name("cd-policy")
 *             .location("us-central1")
 *             .selectors(DeployPolicySelectorArgs.builder()
 *                 .deliveryPipeline(DeployPolicySelectorDeliveryPipelineArgs.builder()
 *                     .id("cd-pipeline")
 *                     .build())
 *                 .build())
 *             .rules(DeployPolicyRuleArgs.builder()
 *                 .rolloutRestriction(DeployPolicyRuleRolloutRestrictionArgs.builder()
 *                     .id("rule")
 *                     .timeWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsArgs.builder()
 *                         .timeZone("America/Los_Angeles")
 *                         .weeklyWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs.builder()
 *                             .startTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs.builder()
 *                                 .hours(0)
 *                                 .minutes(0)
 *                                 .build())
 *                             .endTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs.builder()
 *                                 .hours(24)
 *                                 .minutes(0)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Clouddeploy Deploy Policy Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.clouddeploy.DeployPolicy;
 * import com.pulumi.gcp.clouddeploy.DeployPolicyArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicySelectorArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicySelectorDeliveryPipelineArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicySelectorTargetArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleRolloutRestrictionArgs;
 * import com.pulumi.gcp.clouddeploy.inputs.DeployPolicyRuleRolloutRestrictionTimeWindowsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var f_deploy_policy = new DeployPolicy("f-deploy-policy", DeployPolicyArgs.builder()
 *             .name("cd-policy")
 *             .location("us-central1")
 *             .annotations(Map.ofEntries(
 *                 Map.entry("my_first_annotation", "example-annotation-1"),
 *                 Map.entry("my_second_annotation", "example-annotation-2")
 *             ))
 *             .labels(Map.ofEntries(
 *                 Map.entry("my_first_label", "example-label-1"),
 *                 Map.entry("my_second_label", "example-label-2")
 *             ))
 *             .description("policy resource")
 *             .selectors(            
 *                 DeployPolicySelectorArgs.builder()
 *                     .deliveryPipeline(DeployPolicySelectorDeliveryPipelineArgs.builder()
 *                         .id("cd-pipeline")
 *                         .labels(Map.of("foo", "bar"))
 *                         .build())
 *                     .build(),
 *                 DeployPolicySelectorArgs.builder()
 *                     .target(DeployPolicySelectorTargetArgs.builder()
 *                         .id("dev")
 *                         .labels(Map.of("foo", "bar"))
 *                         .build())
 *                     .build())
 *             .suspended(true)
 *             .rules(            
 *                 DeployPolicyRuleArgs.builder()
 *                     .rolloutRestriction(DeployPolicyRuleRolloutRestrictionArgs.builder()
 *                         .id("rule")
 *                         .timeWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsArgs.builder()
 *                             .timeZone("America/Los_Angeles")
 *                             .weeklyWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs.builder()
 *                                 .startTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs.builder()
 *                                     .hours(0)
 *                                     .minutes(0)
 *                                     .build())
 *                                 .endTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs.builder()
 *                                     .hours(13)
 *                                     .minutes(0)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 DeployPolicyRuleArgs.builder()
 *                     .rolloutRestriction(DeployPolicyRuleRolloutRestrictionArgs.builder()
 *                         .id("rule2")
 *                         .invokers("USER")
 *                         .actions("CREATE")
 *                         .timeWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsArgs.builder()
 *                             .timeZone("America/Los_Angeles")
 *                             .weeklyWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowArgs.builder()
 *                                 .startTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowStartTimeArgs.builder()
 *                                     .hours(13)
 *                                     .minutes(0)
 *                                     .build())
 *                                 .endTime(DeployPolicyRuleRolloutRestrictionTimeWindowsWeeklyWindowEndTimeArgs.builder()
 *                                     .hours(14)
 *                                     .minutes(0)
 *                                     .seconds(0)
 *                                     .nanos(0)
 *                                     .build())
 *                                 .daysOfWeeks("MONDAY")
 *                                 .build())
 *                             .oneTimeWindows(DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowArgs.builder()
 *                                 .startTime(DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowStartTimeArgs.builder()
 *                                     .hours(0)
 *                                     .minutes(0)
 *                                     .build())
 *                                 .endTime(DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowEndTimeArgs.builder()
 *                                     .hours(16)
 *                                     .minutes(0)
 *                                     .build())
 *                                 .startDate(DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowStartDateArgs.builder()
 *                                     .year(2019)
 *                                     .month(1)
 *                                     .day(1)
 *                                     .build())
 *                                 .endDate(DeployPolicyRuleRolloutRestrictionTimeWindowsOneTimeWindowEndDateArgs.builder()
 *                                     .year(2019)
 *                                     .month(12)
 *                                     .day(31)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * DeployPolicy can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, DeployPolicy can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:clouddeploy/deployPolicy:DeployPolicy")
public class DeployPolicy extends com.pulumi.resources.CustomResource {
    /**
     * User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Output only. Time at which the DeployPolicy was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. Time at which the DeployPolicy was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Description of the `DeployPolicy`. Max length is 255 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the `DeployPolicy`. Max length is 255 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 63 characters.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 63 characters.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Name of the `DeployPolicy`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the `DeployPolicy`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Rules to apply. At least one rule must be present.
     * Structure is documented below.
     * 
     */
    @Export(name="rules", refs={List.class,DeployPolicyRule.class}, tree="[0,1]")
    private Output<List<DeployPolicyRule>> rules;

    /**
     * @return Rules to apply. At least one rule must be present.
     * Structure is documented below.
     * 
     */
    public Output<List<DeployPolicyRule>> rules() {
        return this.rules;
    }
    /**
     * Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
     * Structure is documented below.
     * 
     */
    @Export(name="selectors", refs={List.class,DeployPolicySelector.class}, tree="[0,1]")
    private Output<List<DeployPolicySelector>> selectors;

    /**
     * @return Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
     * Structure is documented below.
     * 
     */
    public Output<List<DeployPolicySelector>> selectors() {
        return this.selectors;
    }
    /**
     * When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
     * 
     */
    @Export(name="suspended", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> suspended;

    /**
     * @return When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
     * 
     */
    public Output<Optional<Boolean>> suspended() {
        return Codegen.optional(this.suspended);
    }
    /**
     * Output only. Unique identifier of the `DeployPolicy`.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. Unique identifier of the `DeployPolicy`.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Output only. Time at which the DeployPolicy was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. Time at which the DeployPolicy was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeployPolicy(java.lang.String name) {
        this(name, DeployPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeployPolicy(java.lang.String name, DeployPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeployPolicy(java.lang.String name, DeployPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:clouddeploy/deployPolicy:DeployPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DeployPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable DeployPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:clouddeploy/deployPolicy:DeployPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static DeployPolicyArgs makeArgs(DeployPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DeployPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeployPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable DeployPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DeployPolicy(name, id, state, options);
    }
}
