// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudidentity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupTransitiveMembershipsMembershipPreferredMemberKey;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupTransitiveMembershipsMembershipRole;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupTransitiveMembershipsMembership {
    /**
     * @return EntityKey of the member.  This value will be either a userKey in the format `users/000000000000000000000` with a numerical id or a groupKey in the format `groups/000ab0000ab0000` with a hexadecimal id.
     * 
     */
    private String member;
    /**
     * @return EntityKey of the member.  Structure is documented below.
     * 
     */
    private List<GetGroupTransitiveMembershipsMembershipPreferredMemberKey> preferredMemberKeys;
    /**
     * @return The relation between the group and the transitive member. The value can be DIRECT, INDIRECT, or DIRECT_AND_INDIRECT.
     * 
     */
    private String relationType;
    /**
     * @return The TransitiveMembershipRoles that apply to the Membership. Structure is documented below.
     * 
     */
    private List<GetGroupTransitiveMembershipsMembershipRole> roles;

    private GetGroupTransitiveMembershipsMembership() {}
    /**
     * @return EntityKey of the member.  This value will be either a userKey in the format `users/000000000000000000000` with a numerical id or a groupKey in the format `groups/000ab0000ab0000` with a hexadecimal id.
     * 
     */
    public String member() {
        return this.member;
    }
    /**
     * @return EntityKey of the member.  Structure is documented below.
     * 
     */
    public List<GetGroupTransitiveMembershipsMembershipPreferredMemberKey> preferredMemberKeys() {
        return this.preferredMemberKeys;
    }
    /**
     * @return The relation between the group and the transitive member. The value can be DIRECT, INDIRECT, or DIRECT_AND_INDIRECT.
     * 
     */
    public String relationType() {
        return this.relationType;
    }
    /**
     * @return The TransitiveMembershipRoles that apply to the Membership. Structure is documented below.
     * 
     */
    public List<GetGroupTransitiveMembershipsMembershipRole> roles() {
        return this.roles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupTransitiveMembershipsMembership defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String member;
        private List<GetGroupTransitiveMembershipsMembershipPreferredMemberKey> preferredMemberKeys;
        private String relationType;
        private List<GetGroupTransitiveMembershipsMembershipRole> roles;
        public Builder() {}
        public Builder(GetGroupTransitiveMembershipsMembership defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.member = defaults.member;
    	      this.preferredMemberKeys = defaults.preferredMemberKeys;
    	      this.relationType = defaults.relationType;
    	      this.roles = defaults.roles;
        }

        @CustomType.Setter
        public Builder member(String member) {
            if (member == null) {
              throw new MissingRequiredPropertyException("GetGroupTransitiveMembershipsMembership", "member");
            }
            this.member = member;
            return this;
        }
        @CustomType.Setter
        public Builder preferredMemberKeys(List<GetGroupTransitiveMembershipsMembershipPreferredMemberKey> preferredMemberKeys) {
            if (preferredMemberKeys == null) {
              throw new MissingRequiredPropertyException("GetGroupTransitiveMembershipsMembership", "preferredMemberKeys");
            }
            this.preferredMemberKeys = preferredMemberKeys;
            return this;
        }
        public Builder preferredMemberKeys(GetGroupTransitiveMembershipsMembershipPreferredMemberKey... preferredMemberKeys) {
            return preferredMemberKeys(List.of(preferredMemberKeys));
        }
        @CustomType.Setter
        public Builder relationType(String relationType) {
            if (relationType == null) {
              throw new MissingRequiredPropertyException("GetGroupTransitiveMembershipsMembership", "relationType");
            }
            this.relationType = relationType;
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<GetGroupTransitiveMembershipsMembershipRole> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetGroupTransitiveMembershipsMembership", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(GetGroupTransitiveMembershipsMembershipRole... roles) {
            return roles(List.of(roles));
        }
        public GetGroupTransitiveMembershipsMembership build() {
            final var _resultValue = new GetGroupTransitiveMembershipsMembership();
            _resultValue.member = member;
            _resultValue.preferredMemberKeys = preferredMemberKeys;
            _resultValue.relationType = relationType;
            _resultValue.roles = roles;
            return _resultValue;
        }
    }
}
