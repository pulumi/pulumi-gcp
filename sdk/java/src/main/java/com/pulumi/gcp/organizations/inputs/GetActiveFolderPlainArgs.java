// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.organizations.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetActiveFolderPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetActiveFolderPlainArgs Empty = new GetActiveFolderPlainArgs();

    /**
     * The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](&lt;https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the&gt;) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
     * 
     */
    @Import(name="apiMethod")
    private @Nullable String apiMethod;

    /**
     * @return The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](&lt;https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the&gt;) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
     * 
     */
    public Optional<String> apiMethod() {
        return Optional.ofNullable(this.apiMethod);
    }

    /**
     * The folder&#39;s display name.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return The folder&#39;s display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * The resource name of the parent Folder or Organization.
     * 
     */
    @Import(name="parent", required=true)
    private String parent;

    /**
     * @return The resource name of the parent Folder or Organization.
     * 
     */
    public String parent() {
        return this.parent;
    }

    private GetActiveFolderPlainArgs() {}

    private GetActiveFolderPlainArgs(GetActiveFolderPlainArgs $) {
        this.apiMethod = $.apiMethod;
        this.displayName = $.displayName;
        this.parent = $.parent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetActiveFolderPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetActiveFolderPlainArgs $;

        public Builder() {
            $ = new GetActiveFolderPlainArgs();
        }

        public Builder(GetActiveFolderPlainArgs defaults) {
            $ = new GetActiveFolderPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiMethod The API method to use to search for the folder. Valid values are `LIST` and `SEARCH`. Default Value is `LIST`. `LIST` is [strongly consistent](&lt;https://cloud.google.com/resource-manager/reference/rest/v3/folders/list#:~:text=list()%20provides%20a-,strongly%20consistent,-view%20of%20the&gt;) and requires `resourcemanager.folders.list` on the parent folder, while `SEARCH` is [eventually consistent](https://cloud.google.com/resource-manager/reference/rest/v3/folders/search#:~:text=eventually%20consistent) and only returns folders that the user has `resourcemanager.folders.get` permission on.
         * 
         * @return builder
         * 
         */
        public Builder apiMethod(@Nullable String apiMethod) {
            $.apiMethod = apiMethod;
            return this;
        }

        /**
         * @param displayName The folder&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param parent The resource name of the parent Folder or Organization.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            $.parent = parent;
            return this;
        }

        public GetActiveFolderPlainArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("GetActiveFolderPlainArgs", "displayName");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("GetActiveFolderPlainArgs", "parent");
            }
            return $;
        }
    }

}
