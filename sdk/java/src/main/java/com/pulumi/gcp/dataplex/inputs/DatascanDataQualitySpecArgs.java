// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecPostScanActionsArgs;
import com.pulumi.gcp.dataplex.inputs.DatascanDataQualitySpecRuleArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatascanDataQualitySpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatascanDataQualitySpecArgs Empty = new DatascanDataQualitySpecArgs();

    /**
     * If set, the latest DataScan job result will be published to Dataplex Catalog.
     * 
     */
    @Import(name="catalogPublishingEnabled")
    private @Nullable Output<Boolean> catalogPublishingEnabled;

    /**
     * @return If set, the latest DataScan job result will be published to Dataplex Catalog.
     * 
     */
    public Optional<Output<Boolean>> catalogPublishingEnabled() {
        return Optional.ofNullable(this.catalogPublishingEnabled);
    }

    /**
     * Actions to take upon job completion.
     * Structure is documented below.
     * 
     */
    @Import(name="postScanActions")
    private @Nullable Output<DatascanDataQualitySpecPostScanActionsArgs> postScanActions;

    /**
     * @return Actions to take upon job completion.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DatascanDataQualitySpecPostScanActionsArgs>> postScanActions() {
        return Optional.ofNullable(this.postScanActions);
    }

    /**
     * A filter applied to all rows in a single DataScan job. The filter needs to be a valid SQL expression for a WHERE clause in BigQuery standard SQL syntax. Example: col1 &gt;= 0 AND col2 &lt; 10
     * 
     */
    @Import(name="rowFilter")
    private @Nullable Output<String> rowFilter;

    /**
     * @return A filter applied to all rows in a single DataScan job. The filter needs to be a valid SQL expression for a WHERE clause in BigQuery standard SQL syntax. Example: col1 &gt;= 0 AND col2 &lt; 10
     * 
     */
    public Optional<Output<String>> rowFilter() {
        return Optional.ofNullable(this.rowFilter);
    }

    /**
     * The list of rules to evaluate against a data source. At least one rule is required.
     * Structure is documented below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<DatascanDataQualitySpecRuleArgs>> rules;

    /**
     * @return The list of rules to evaluate against a data source. At least one rule is required.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DatascanDataQualitySpecRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * The percentage of the records to be selected from the dataset for DataScan.
     * Value can range between 0.0 and 100.0 with up to 3 significant decimal digits.
     * Sampling is not applied if `sampling_percent` is not specified, 0 or 100.
     * 
     */
    @Import(name="samplingPercent")
    private @Nullable Output<Double> samplingPercent;

    /**
     * @return The percentage of the records to be selected from the dataset for DataScan.
     * Value can range between 0.0 and 100.0 with up to 3 significant decimal digits.
     * Sampling is not applied if `sampling_percent` is not specified, 0 or 100.
     * 
     */
    public Optional<Output<Double>> samplingPercent() {
        return Optional.ofNullable(this.samplingPercent);
    }

    private DatascanDataQualitySpecArgs() {}

    private DatascanDataQualitySpecArgs(DatascanDataQualitySpecArgs $) {
        this.catalogPublishingEnabled = $.catalogPublishingEnabled;
        this.postScanActions = $.postScanActions;
        this.rowFilter = $.rowFilter;
        this.rules = $.rules;
        this.samplingPercent = $.samplingPercent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatascanDataQualitySpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatascanDataQualitySpecArgs $;

        public Builder() {
            $ = new DatascanDataQualitySpecArgs();
        }

        public Builder(DatascanDataQualitySpecArgs defaults) {
            $ = new DatascanDataQualitySpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogPublishingEnabled If set, the latest DataScan job result will be published to Dataplex Catalog.
         * 
         * @return builder
         * 
         */
        public Builder catalogPublishingEnabled(@Nullable Output<Boolean> catalogPublishingEnabled) {
            $.catalogPublishingEnabled = catalogPublishingEnabled;
            return this;
        }

        /**
         * @param catalogPublishingEnabled If set, the latest DataScan job result will be published to Dataplex Catalog.
         * 
         * @return builder
         * 
         */
        public Builder catalogPublishingEnabled(Boolean catalogPublishingEnabled) {
            return catalogPublishingEnabled(Output.of(catalogPublishingEnabled));
        }

        /**
         * @param postScanActions Actions to take upon job completion.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postScanActions(@Nullable Output<DatascanDataQualitySpecPostScanActionsArgs> postScanActions) {
            $.postScanActions = postScanActions;
            return this;
        }

        /**
         * @param postScanActions Actions to take upon job completion.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postScanActions(DatascanDataQualitySpecPostScanActionsArgs postScanActions) {
            return postScanActions(Output.of(postScanActions));
        }

        /**
         * @param rowFilter A filter applied to all rows in a single DataScan job. The filter needs to be a valid SQL expression for a WHERE clause in BigQuery standard SQL syntax. Example: col1 &gt;= 0 AND col2 &lt; 10
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(@Nullable Output<String> rowFilter) {
            $.rowFilter = rowFilter;
            return this;
        }

        /**
         * @param rowFilter A filter applied to all rows in a single DataScan job. The filter needs to be a valid SQL expression for a WHERE clause in BigQuery standard SQL syntax. Example: col1 &gt;= 0 AND col2 &lt; 10
         * 
         * @return builder
         * 
         */
        public Builder rowFilter(String rowFilter) {
            return rowFilter(Output.of(rowFilter));
        }

        /**
         * @param rules The list of rules to evaluate against a data source. At least one rule is required.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<DatascanDataQualitySpecRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules The list of rules to evaluate against a data source. At least one rule is required.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<DatascanDataQualitySpecRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules The list of rules to evaluate against a data source. At least one rule is required.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(DatascanDataQualitySpecRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param samplingPercent The percentage of the records to be selected from the dataset for DataScan.
         * Value can range between 0.0 and 100.0 with up to 3 significant decimal digits.
         * Sampling is not applied if `sampling_percent` is not specified, 0 or 100.
         * 
         * @return builder
         * 
         */
        public Builder samplingPercent(@Nullable Output<Double> samplingPercent) {
            $.samplingPercent = samplingPercent;
            return this;
        }

        /**
         * @param samplingPercent The percentage of the records to be selected from the dataset for DataScan.
         * Value can range between 0.0 and 100.0 with up to 3 significant decimal digits.
         * Sampling is not applied if `sampling_percent` is not specified, 0 or 100.
         * 
         * @return builder
         * 
         */
        public Builder samplingPercent(Double samplingPercent) {
            return samplingPercent(Output.of(samplingPercent));
        }

        public DatascanDataQualitySpecArgs build() {
            return $;
        }
    }

}
