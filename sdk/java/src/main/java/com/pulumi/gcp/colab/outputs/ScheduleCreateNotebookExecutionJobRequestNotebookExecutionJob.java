// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.colab.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.colab.outputs.ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource;
import com.pulumi.gcp.colab.outputs.ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob {
    /**
     * @return The Dataform Repository containing the input notebook.
     * Structure is documented below.
     * 
     */
    private @Nullable ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource dataformRepositorySource;
    /**
     * @return Required. The display name of the Notebook Execution.
     * 
     */
    private String displayName;
    /**
     * @return Max running time of the execution job in seconds (default 86400s / 24 hrs). A duration in seconds with up to nine fractional digits, ending with &#34;s&#34;. Example: &#34;3.5s&#34;.
     * 
     */
    private @Nullable String executionTimeout;
    /**
     * @return The user email to run the execution as.
     * 
     */
    private @Nullable String executionUser;
    /**
     * @return The Cloud Storage uri for the input notebook.
     * Structure is documented below.
     * 
     */
    private @Nullable ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource gcsNotebookSource;
    /**
     * @return The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
     * 
     */
    private String gcsOutputUri;
    /**
     * @return The NotebookRuntimeTemplate to source compute configuration from.
     * 
     */
    private String notebookRuntimeTemplateResourceName;
    /**
     * @return The service account to run the execution as.
     * 
     */
    private @Nullable String serviceAccount;

    private ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob() {}
    /**
     * @return The Dataform Repository containing the input notebook.
     * Structure is documented below.
     * 
     */
    public Optional<ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource> dataformRepositorySource() {
        return Optional.ofNullable(this.dataformRepositorySource);
    }
    /**
     * @return Required. The display name of the Notebook Execution.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Max running time of the execution job in seconds (default 86400s / 24 hrs). A duration in seconds with up to nine fractional digits, ending with &#34;s&#34;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<String> executionTimeout() {
        return Optional.ofNullable(this.executionTimeout);
    }
    /**
     * @return The user email to run the execution as.
     * 
     */
    public Optional<String> executionUser() {
        return Optional.ofNullable(this.executionUser);
    }
    /**
     * @return The Cloud Storage uri for the input notebook.
     * Structure is documented below.
     * 
     */
    public Optional<ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource> gcsNotebookSource() {
        return Optional.ofNullable(this.gcsNotebookSource);
    }
    /**
     * @return The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
     * 
     */
    public String gcsOutputUri() {
        return this.gcsOutputUri;
    }
    /**
     * @return The NotebookRuntimeTemplate to source compute configuration from.
     * 
     */
    public String notebookRuntimeTemplateResourceName() {
        return this.notebookRuntimeTemplateResourceName;
    }
    /**
     * @return The service account to run the execution as.
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource dataformRepositorySource;
        private String displayName;
        private @Nullable String executionTimeout;
        private @Nullable String executionUser;
        private @Nullable ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource gcsNotebookSource;
        private String gcsOutputUri;
        private String notebookRuntimeTemplateResourceName;
        private @Nullable String serviceAccount;
        public Builder() {}
        public Builder(ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataformRepositorySource = defaults.dataformRepositorySource;
    	      this.displayName = defaults.displayName;
    	      this.executionTimeout = defaults.executionTimeout;
    	      this.executionUser = defaults.executionUser;
    	      this.gcsNotebookSource = defaults.gcsNotebookSource;
    	      this.gcsOutputUri = defaults.gcsOutputUri;
    	      this.notebookRuntimeTemplateResourceName = defaults.notebookRuntimeTemplateResourceName;
    	      this.serviceAccount = defaults.serviceAccount;
        }

        @CustomType.Setter
        public Builder dataformRepositorySource(@Nullable ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySource dataformRepositorySource) {

            this.dataformRepositorySource = dataformRepositorySource;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder executionTimeout(@Nullable String executionTimeout) {

            this.executionTimeout = executionTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder executionUser(@Nullable String executionUser) {

            this.executionUser = executionUser;
            return this;
        }
        @CustomType.Setter
        public Builder gcsNotebookSource(@Nullable ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSource gcsNotebookSource) {

            this.gcsNotebookSource = gcsNotebookSource;
            return this;
        }
        @CustomType.Setter
        public Builder gcsOutputUri(String gcsOutputUri) {
            if (gcsOutputUri == null) {
              throw new MissingRequiredPropertyException("ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob", "gcsOutputUri");
            }
            this.gcsOutputUri = gcsOutputUri;
            return this;
        }
        @CustomType.Setter
        public Builder notebookRuntimeTemplateResourceName(String notebookRuntimeTemplateResourceName) {
            if (notebookRuntimeTemplateResourceName == null) {
              throw new MissingRequiredPropertyException("ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob", "notebookRuntimeTemplateResourceName");
            }
            this.notebookRuntimeTemplateResourceName = notebookRuntimeTemplateResourceName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        public ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob build() {
            final var _resultValue = new ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJob();
            _resultValue.dataformRepositorySource = dataformRepositorySource;
            _resultValue.displayName = displayName;
            _resultValue.executionTimeout = executionTimeout;
            _resultValue.executionUser = executionUser;
            _resultValue.gcsNotebookSource = gcsNotebookSource;
            _resultValue.gcsOutputUri = gcsOutputUri;
            _resultValue.notebookRuntimeTemplateResourceName = notebookRuntimeTemplateResourceName;
            _resultValue.serviceAccount = serviceAccount;
            return _resultValue;
        }
    }
}
