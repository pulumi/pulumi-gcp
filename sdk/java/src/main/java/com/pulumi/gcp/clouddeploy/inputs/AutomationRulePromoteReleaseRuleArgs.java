// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationRulePromoteReleaseRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationRulePromoteReleaseRuleArgs Empty = new AutomationRulePromoteReleaseRuleArgs();

    /**
     * Optional. The starting phase of the rollout created by this operation. Default to the first phase.
     * 
     */
    @Import(name="destinationPhase")
    private @Nullable Output<String> destinationPhase;

    /**
     * @return Optional. The starting phase of the rollout created by this operation. Default to the first phase.
     * 
     */
    public Optional<Output<String>> destinationPhase() {
        return Optional.ofNullable(this.destinationPhase);
    }

    /**
     * Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * &#34;@next&#34;, the next target in the promotion sequence.
     * 
     */
    @Import(name="destinationTargetId")
    private @Nullable Output<String> destinationTargetId;

    /**
     * @return Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * &#34;@next&#34;, the next target in the promotion sequence.
     * 
     */
    public Optional<Output<String>> destinationTargetId() {
        return Optional.ofNullable(this.destinationTargetId);
    }

    /**
     * Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Optional. How long the release need to be paused until being promoted to the next target.
     * 
     */
    @Import(name="wait")
    private @Nullable Output<String> wait;

    /**
     * @return Optional. How long the release need to be paused until being promoted to the next target.
     * 
     */
    public Optional<Output<String>> wait_() {
        return Optional.ofNullable(this.wait);
    }

    private AutomationRulePromoteReleaseRuleArgs() {}

    private AutomationRulePromoteReleaseRuleArgs(AutomationRulePromoteReleaseRuleArgs $) {
        this.destinationPhase = $.destinationPhase;
        this.destinationTargetId = $.destinationTargetId;
        this.id = $.id;
        this.wait = $.wait;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRulePromoteReleaseRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRulePromoteReleaseRuleArgs $;

        public Builder() {
            $ = new AutomationRulePromoteReleaseRuleArgs();
        }

        public Builder(AutomationRulePromoteReleaseRuleArgs defaults) {
            $ = new AutomationRulePromoteReleaseRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPhase Optional. The starting phase of the rollout created by this operation. Default to the first phase.
         * 
         * @return builder
         * 
         */
        public Builder destinationPhase(@Nullable Output<String> destinationPhase) {
            $.destinationPhase = destinationPhase;
            return this;
        }

        /**
         * @param destinationPhase Optional. The starting phase of the rollout created by this operation. Default to the first phase.
         * 
         * @return builder
         * 
         */
        public Builder destinationPhase(String destinationPhase) {
            return destinationPhase(Output.of(destinationPhase));
        }

        /**
         * @param destinationTargetId Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * &#34;@next&#34;, the next target in the promotion sequence.
         * 
         * @return builder
         * 
         */
        public Builder destinationTargetId(@Nullable Output<String> destinationTargetId) {
            $.destinationTargetId = destinationTargetId;
            return this;
        }

        /**
         * @param destinationTargetId Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * &#34;@next&#34;, the next target in the promotion sequence.
         * 
         * @return builder
         * 
         */
        public Builder destinationTargetId(String destinationTargetId) {
            return destinationTargetId(Output.of(destinationTargetId));
        }

        /**
         * @param id Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param wait Optional. How long the release need to be paused until being promoted to the next target.
         * 
         * @return builder
         * 
         */
        public Builder wait_(@Nullable Output<String> wait) {
            $.wait = wait;
            return this;
        }

        /**
         * @param wait Optional. How long the release need to be paused until being promoted to the next target.
         * 
         * @return builder
         * 
         */
        public Builder wait_(String wait) {
            return wait_(Output.of(wait));
        }

        public AutomationRulePromoteReleaseRuleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("AutomationRulePromoteReleaseRuleArgs", "id");
            }
            return $;
        }
    }

}
