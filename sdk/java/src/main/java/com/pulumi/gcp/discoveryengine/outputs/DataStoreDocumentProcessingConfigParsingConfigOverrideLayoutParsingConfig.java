// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig {
    /**
     * @return If true, the LLM based annotation is added to the image during parsing.
     * 
     */
    private @Nullable Boolean enableImageAnnotation;
    /**
     * @return If true, the LLM based annotation is added to the table during parsing.
     * 
     */
    private @Nullable Boolean enableTableAnnotation;
    /**
     * @return List of HTML classes to exclude from the parsed content.
     * 
     */
    private @Nullable List<String> excludeHtmlClasses;
    /**
     * @return List of HTML elements to exclude from the parsed content.
     * 
     */
    private @Nullable List<String> excludeHtmlElements;
    /**
     * @return List of HTML ids to exclude from the parsed content.
     * 
     */
    private @Nullable List<String> excludeHtmlIds;
    /**
     * @return Contains the required structure types to extract from the document. Supported values: `shareholder-structure`.
     * 
     */
    private @Nullable List<String> structuredContentTypes;

    private DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig() {}
    /**
     * @return If true, the LLM based annotation is added to the image during parsing.
     * 
     */
    public Optional<Boolean> enableImageAnnotation() {
        return Optional.ofNullable(this.enableImageAnnotation);
    }
    /**
     * @return If true, the LLM based annotation is added to the table during parsing.
     * 
     */
    public Optional<Boolean> enableTableAnnotation() {
        return Optional.ofNullable(this.enableTableAnnotation);
    }
    /**
     * @return List of HTML classes to exclude from the parsed content.
     * 
     */
    public List<String> excludeHtmlClasses() {
        return this.excludeHtmlClasses == null ? List.of() : this.excludeHtmlClasses;
    }
    /**
     * @return List of HTML elements to exclude from the parsed content.
     * 
     */
    public List<String> excludeHtmlElements() {
        return this.excludeHtmlElements == null ? List.of() : this.excludeHtmlElements;
    }
    /**
     * @return List of HTML ids to exclude from the parsed content.
     * 
     */
    public List<String> excludeHtmlIds() {
        return this.excludeHtmlIds == null ? List.of() : this.excludeHtmlIds;
    }
    /**
     * @return Contains the required structure types to extract from the document. Supported values: `shareholder-structure`.
     * 
     */
    public List<String> structuredContentTypes() {
        return this.structuredContentTypes == null ? List.of() : this.structuredContentTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableImageAnnotation;
        private @Nullable Boolean enableTableAnnotation;
        private @Nullable List<String> excludeHtmlClasses;
        private @Nullable List<String> excludeHtmlElements;
        private @Nullable List<String> excludeHtmlIds;
        private @Nullable List<String> structuredContentTypes;
        public Builder() {}
        public Builder(DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableImageAnnotation = defaults.enableImageAnnotation;
    	      this.enableTableAnnotation = defaults.enableTableAnnotation;
    	      this.excludeHtmlClasses = defaults.excludeHtmlClasses;
    	      this.excludeHtmlElements = defaults.excludeHtmlElements;
    	      this.excludeHtmlIds = defaults.excludeHtmlIds;
    	      this.structuredContentTypes = defaults.structuredContentTypes;
        }

        @CustomType.Setter
        public Builder enableImageAnnotation(@Nullable Boolean enableImageAnnotation) {

            this.enableImageAnnotation = enableImageAnnotation;
            return this;
        }
        @CustomType.Setter
        public Builder enableTableAnnotation(@Nullable Boolean enableTableAnnotation) {

            this.enableTableAnnotation = enableTableAnnotation;
            return this;
        }
        @CustomType.Setter
        public Builder excludeHtmlClasses(@Nullable List<String> excludeHtmlClasses) {

            this.excludeHtmlClasses = excludeHtmlClasses;
            return this;
        }
        public Builder excludeHtmlClasses(String... excludeHtmlClasses) {
            return excludeHtmlClasses(List.of(excludeHtmlClasses));
        }
        @CustomType.Setter
        public Builder excludeHtmlElements(@Nullable List<String> excludeHtmlElements) {

            this.excludeHtmlElements = excludeHtmlElements;
            return this;
        }
        public Builder excludeHtmlElements(String... excludeHtmlElements) {
            return excludeHtmlElements(List.of(excludeHtmlElements));
        }
        @CustomType.Setter
        public Builder excludeHtmlIds(@Nullable List<String> excludeHtmlIds) {

            this.excludeHtmlIds = excludeHtmlIds;
            return this;
        }
        public Builder excludeHtmlIds(String... excludeHtmlIds) {
            return excludeHtmlIds(List.of(excludeHtmlIds));
        }
        @CustomType.Setter
        public Builder structuredContentTypes(@Nullable List<String> structuredContentTypes) {

            this.structuredContentTypes = structuredContentTypes;
            return this;
        }
        public Builder structuredContentTypes(String... structuredContentTypes) {
            return structuredContentTypes(List.of(structuredContentTypes));
        }
        public DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig build() {
            final var _resultValue = new DataStoreDocumentProcessingConfigParsingConfigOverrideLayoutParsingConfig();
            _resultValue.enableImageAnnotation = enableImageAnnotation;
            _resultValue.enableTableAnnotation = enableTableAnnotation;
            _resultValue.excludeHtmlClasses = excludeHtmlClasses;
            _resultValue.excludeHtmlElements = excludeHtmlElements;
            _resultValue.excludeHtmlIds = excludeHtmlIds;
            _resultValue.structuredContentTypes = structuredContentTypes;
            return _resultValue;
        }
    }
}
