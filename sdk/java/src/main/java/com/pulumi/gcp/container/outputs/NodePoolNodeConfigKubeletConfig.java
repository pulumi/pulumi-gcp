// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigKubeletConfigEvictionMinimumReclaim;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigKubeletConfigEvictionSoft;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigKubeletConfigMemoryManager;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigKubeletConfigTopologyManager;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolNodeConfigKubeletConfig {
    /**
     * @return Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods.
     * 
     */
    private @Nullable List<String> allowedUnsafeSysctls;
    /**
     * @return Defines the maximum number of container log files that can be present for a container.
     * 
     */
    private @Nullable Integer containerLogMaxFiles;
    /**
     * @return Defines the maximum size of the container log file before it is rotated.
     * 
     */
    private @Nullable String containerLogMaxSize;
    /**
     * @return Enable CPU CFS quota enforcement for containers that specify CPU limits.
     * 
     */
    private @Nullable Boolean cpuCfsQuota;
    /**
     * @return Set the CPU CFS quota period value &#39;cpu.cfs_period_us&#39;.
     * 
     */
    private @Nullable String cpuCfsQuotaPeriod;
    /**
     * @return Control the CPU management policy on the node.
     * 
     */
    private @Nullable String cpuManagerPolicy;
    /**
     * @return Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.
     * 
     */
    private @Nullable Integer evictionMaxPodGracePeriodSeconds;
    /**
     * @return Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction.
     * 
     */
    private @Nullable NodePoolNodeConfigKubeletConfigEvictionMinimumReclaim evictionMinimumReclaim;
    /**
     * @return Defines a map of signal names to quantities or percentage that defines soft eviction thresholds.
     * 
     */
    private @Nullable NodePoolNodeConfigKubeletConfigEvictionSoft evictionSoft;
    /**
     * @return Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period.
     * 
     */
    private @Nullable NodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod evictionSoftGracePeriod;
    /**
     * @return Defines the percent of disk usage after which image garbage collection is always run.
     * 
     */
    private @Nullable Integer imageGcHighThresholdPercent;
    /**
     * @return Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.
     * 
     */
    private @Nullable Integer imageGcLowThresholdPercent;
    /**
     * @return Defines the maximum age an image can be unused before it is garbage collected.
     * 
     */
    private @Nullable String imageMaximumGcAge;
    /**
     * @return Defines the minimum age for an unused image before it is garbage collected.
     * 
     */
    private @Nullable String imageMinimumGcAge;
    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    private @Nullable String insecureKubeletReadonlyPortEnabled;
    /**
     * @return Set the maximum number of image pulls in parallel.
     * 
     */
    private @Nullable Integer maxParallelImagePulls;
    /**
     * @return Configuration for the Memory Manager on the node. The memory manager optimizes memory and hugepages allocation for pods, especially those in the Guaranteed QoS class, by influencing NUMA affinity.
     * 
     */
    private @Nullable NodePoolNodeConfigKubeletConfigMemoryManager memoryManager;
    /**
     * @return Controls the maximum number of processes allowed to run in a pod.
     * 
     */
    private @Nullable Integer podPidsLimit;
    /**
     * @return Defines whether to enable single process OOM killer.
     * 
     */
    private @Nullable Boolean singleProcessOomKill;
    /**
     * @return Configuration for the Topology Manager on the node. The Topology Manager aligns CPU, memory, and device resources on a node to optimize performance, especially for NUMA-aware workloads, by ensuring resource co-location.
     * 
     */
    private @Nullable NodePoolNodeConfigKubeletConfigTopologyManager topologyManager;

    private NodePoolNodeConfigKubeletConfig() {}
    /**
     * @return Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods.
     * 
     */
    public List<String> allowedUnsafeSysctls() {
        return this.allowedUnsafeSysctls == null ? List.of() : this.allowedUnsafeSysctls;
    }
    /**
     * @return Defines the maximum number of container log files that can be present for a container.
     * 
     */
    public Optional<Integer> containerLogMaxFiles() {
        return Optional.ofNullable(this.containerLogMaxFiles);
    }
    /**
     * @return Defines the maximum size of the container log file before it is rotated.
     * 
     */
    public Optional<String> containerLogMaxSize() {
        return Optional.ofNullable(this.containerLogMaxSize);
    }
    /**
     * @return Enable CPU CFS quota enforcement for containers that specify CPU limits.
     * 
     */
    public Optional<Boolean> cpuCfsQuota() {
        return Optional.ofNullable(this.cpuCfsQuota);
    }
    /**
     * @return Set the CPU CFS quota period value &#39;cpu.cfs_period_us&#39;.
     * 
     */
    public Optional<String> cpuCfsQuotaPeriod() {
        return Optional.ofNullable(this.cpuCfsQuotaPeriod);
    }
    /**
     * @return Control the CPU management policy on the node.
     * 
     */
    public Optional<String> cpuManagerPolicy() {
        return Optional.ofNullable(this.cpuManagerPolicy);
    }
    /**
     * @return Defines the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.
     * 
     */
    public Optional<Integer> evictionMaxPodGracePeriodSeconds() {
        return Optional.ofNullable(this.evictionMaxPodGracePeriodSeconds);
    }
    /**
     * @return Defines a map of signal names to percentage that defines minimum reclaims. It describes the minimum amount of a given resource the kubelet will reclaim when performing a pod eviction.
     * 
     */
    public Optional<NodePoolNodeConfigKubeletConfigEvictionMinimumReclaim> evictionMinimumReclaim() {
        return Optional.ofNullable(this.evictionMinimumReclaim);
    }
    /**
     * @return Defines a map of signal names to quantities or percentage that defines soft eviction thresholds.
     * 
     */
    public Optional<NodePoolNodeConfigKubeletConfigEvictionSoft> evictionSoft() {
        return Optional.ofNullable(this.evictionSoft);
    }
    /**
     * @return Defines a map of signal names to durations that defines grace periods for soft eviction thresholds. Each soft eviction threshold must have a corresponding grace period.
     * 
     */
    public Optional<NodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod> evictionSoftGracePeriod() {
        return Optional.ofNullable(this.evictionSoftGracePeriod);
    }
    /**
     * @return Defines the percent of disk usage after which image garbage collection is always run.
     * 
     */
    public Optional<Integer> imageGcHighThresholdPercent() {
        return Optional.ofNullable(this.imageGcHighThresholdPercent);
    }
    /**
     * @return Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.
     * 
     */
    public Optional<Integer> imageGcLowThresholdPercent() {
        return Optional.ofNullable(this.imageGcLowThresholdPercent);
    }
    /**
     * @return Defines the maximum age an image can be unused before it is garbage collected.
     * 
     */
    public Optional<String> imageMaximumGcAge() {
        return Optional.ofNullable(this.imageMaximumGcAge);
    }
    /**
     * @return Defines the minimum age for an unused image before it is garbage collected.
     * 
     */
    public Optional<String> imageMinimumGcAge() {
        return Optional.ofNullable(this.imageMinimumGcAge);
    }
    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    public Optional<String> insecureKubeletReadonlyPortEnabled() {
        return Optional.ofNullable(this.insecureKubeletReadonlyPortEnabled);
    }
    /**
     * @return Set the maximum number of image pulls in parallel.
     * 
     */
    public Optional<Integer> maxParallelImagePulls() {
        return Optional.ofNullable(this.maxParallelImagePulls);
    }
    /**
     * @return Configuration for the Memory Manager on the node. The memory manager optimizes memory and hugepages allocation for pods, especially those in the Guaranteed QoS class, by influencing NUMA affinity.
     * 
     */
    public Optional<NodePoolNodeConfigKubeletConfigMemoryManager> memoryManager() {
        return Optional.ofNullable(this.memoryManager);
    }
    /**
     * @return Controls the maximum number of processes allowed to run in a pod.
     * 
     */
    public Optional<Integer> podPidsLimit() {
        return Optional.ofNullable(this.podPidsLimit);
    }
    /**
     * @return Defines whether to enable single process OOM killer.
     * 
     */
    public Optional<Boolean> singleProcessOomKill() {
        return Optional.ofNullable(this.singleProcessOomKill);
    }
    /**
     * @return Configuration for the Topology Manager on the node. The Topology Manager aligns CPU, memory, and device resources on a node to optimize performance, especially for NUMA-aware workloads, by ensuring resource co-location.
     * 
     */
    public Optional<NodePoolNodeConfigKubeletConfigTopologyManager> topologyManager() {
        return Optional.ofNullable(this.topologyManager);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolNodeConfigKubeletConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedUnsafeSysctls;
        private @Nullable Integer containerLogMaxFiles;
        private @Nullable String containerLogMaxSize;
        private @Nullable Boolean cpuCfsQuota;
        private @Nullable String cpuCfsQuotaPeriod;
        private @Nullable String cpuManagerPolicy;
        private @Nullable Integer evictionMaxPodGracePeriodSeconds;
        private @Nullable NodePoolNodeConfigKubeletConfigEvictionMinimumReclaim evictionMinimumReclaim;
        private @Nullable NodePoolNodeConfigKubeletConfigEvictionSoft evictionSoft;
        private @Nullable NodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod evictionSoftGracePeriod;
        private @Nullable Integer imageGcHighThresholdPercent;
        private @Nullable Integer imageGcLowThresholdPercent;
        private @Nullable String imageMaximumGcAge;
        private @Nullable String imageMinimumGcAge;
        private @Nullable String insecureKubeletReadonlyPortEnabled;
        private @Nullable Integer maxParallelImagePulls;
        private @Nullable NodePoolNodeConfigKubeletConfigMemoryManager memoryManager;
        private @Nullable Integer podPidsLimit;
        private @Nullable Boolean singleProcessOomKill;
        private @Nullable NodePoolNodeConfigKubeletConfigTopologyManager topologyManager;
        public Builder() {}
        public Builder(NodePoolNodeConfigKubeletConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedUnsafeSysctls = defaults.allowedUnsafeSysctls;
    	      this.containerLogMaxFiles = defaults.containerLogMaxFiles;
    	      this.containerLogMaxSize = defaults.containerLogMaxSize;
    	      this.cpuCfsQuota = defaults.cpuCfsQuota;
    	      this.cpuCfsQuotaPeriod = defaults.cpuCfsQuotaPeriod;
    	      this.cpuManagerPolicy = defaults.cpuManagerPolicy;
    	      this.evictionMaxPodGracePeriodSeconds = defaults.evictionMaxPodGracePeriodSeconds;
    	      this.evictionMinimumReclaim = defaults.evictionMinimumReclaim;
    	      this.evictionSoft = defaults.evictionSoft;
    	      this.evictionSoftGracePeriod = defaults.evictionSoftGracePeriod;
    	      this.imageGcHighThresholdPercent = defaults.imageGcHighThresholdPercent;
    	      this.imageGcLowThresholdPercent = defaults.imageGcLowThresholdPercent;
    	      this.imageMaximumGcAge = defaults.imageMaximumGcAge;
    	      this.imageMinimumGcAge = defaults.imageMinimumGcAge;
    	      this.insecureKubeletReadonlyPortEnabled = defaults.insecureKubeletReadonlyPortEnabled;
    	      this.maxParallelImagePulls = defaults.maxParallelImagePulls;
    	      this.memoryManager = defaults.memoryManager;
    	      this.podPidsLimit = defaults.podPidsLimit;
    	      this.singleProcessOomKill = defaults.singleProcessOomKill;
    	      this.topologyManager = defaults.topologyManager;
        }

        @CustomType.Setter
        public Builder allowedUnsafeSysctls(@Nullable List<String> allowedUnsafeSysctls) {

            this.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }
        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }
        @CustomType.Setter
        public Builder containerLogMaxFiles(@Nullable Integer containerLogMaxFiles) {

            this.containerLogMaxFiles = containerLogMaxFiles;
            return this;
        }
        @CustomType.Setter
        public Builder containerLogMaxSize(@Nullable String containerLogMaxSize) {

            this.containerLogMaxSize = containerLogMaxSize;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuota(@Nullable Boolean cpuCfsQuota) {

            this.cpuCfsQuota = cpuCfsQuota;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuotaPeriod(@Nullable String cpuCfsQuotaPeriod) {

            this.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuManagerPolicy(@Nullable String cpuManagerPolicy) {

            this.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder evictionMaxPodGracePeriodSeconds(@Nullable Integer evictionMaxPodGracePeriodSeconds) {

            this.evictionMaxPodGracePeriodSeconds = evictionMaxPodGracePeriodSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder evictionMinimumReclaim(@Nullable NodePoolNodeConfigKubeletConfigEvictionMinimumReclaim evictionMinimumReclaim) {

            this.evictionMinimumReclaim = evictionMinimumReclaim;
            return this;
        }
        @CustomType.Setter
        public Builder evictionSoft(@Nullable NodePoolNodeConfigKubeletConfigEvictionSoft evictionSoft) {

            this.evictionSoft = evictionSoft;
            return this;
        }
        @CustomType.Setter
        public Builder evictionSoftGracePeriod(@Nullable NodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod evictionSoftGracePeriod) {

            this.evictionSoftGracePeriod = evictionSoftGracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcHighThresholdPercent(@Nullable Integer imageGcHighThresholdPercent) {

            this.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcLowThresholdPercent(@Nullable Integer imageGcLowThresholdPercent) {

            this.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            return this;
        }
        @CustomType.Setter
        public Builder imageMaximumGcAge(@Nullable String imageMaximumGcAge) {

            this.imageMaximumGcAge = imageMaximumGcAge;
            return this;
        }
        @CustomType.Setter
        public Builder imageMinimumGcAge(@Nullable String imageMinimumGcAge) {

            this.imageMinimumGcAge = imageMinimumGcAge;
            return this;
        }
        @CustomType.Setter
        public Builder insecureKubeletReadonlyPortEnabled(@Nullable String insecureKubeletReadonlyPortEnabled) {

            this.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxParallelImagePulls(@Nullable Integer maxParallelImagePulls) {

            this.maxParallelImagePulls = maxParallelImagePulls;
            return this;
        }
        @CustomType.Setter
        public Builder memoryManager(@Nullable NodePoolNodeConfigKubeletConfigMemoryManager memoryManager) {

            this.memoryManager = memoryManager;
            return this;
        }
        @CustomType.Setter
        public Builder podPidsLimit(@Nullable Integer podPidsLimit) {

            this.podPidsLimit = podPidsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder singleProcessOomKill(@Nullable Boolean singleProcessOomKill) {

            this.singleProcessOomKill = singleProcessOomKill;
            return this;
        }
        @CustomType.Setter
        public Builder topologyManager(@Nullable NodePoolNodeConfigKubeletConfigTopologyManager topologyManager) {

            this.topologyManager = topologyManager;
            return this;
        }
        public NodePoolNodeConfigKubeletConfig build() {
            final var _resultValue = new NodePoolNodeConfigKubeletConfig();
            _resultValue.allowedUnsafeSysctls = allowedUnsafeSysctls;
            _resultValue.containerLogMaxFiles = containerLogMaxFiles;
            _resultValue.containerLogMaxSize = containerLogMaxSize;
            _resultValue.cpuCfsQuota = cpuCfsQuota;
            _resultValue.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            _resultValue.cpuManagerPolicy = cpuManagerPolicy;
            _resultValue.evictionMaxPodGracePeriodSeconds = evictionMaxPodGracePeriodSeconds;
            _resultValue.evictionMinimumReclaim = evictionMinimumReclaim;
            _resultValue.evictionSoft = evictionSoft;
            _resultValue.evictionSoftGracePeriod = evictionSoftGracePeriod;
            _resultValue.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            _resultValue.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            _resultValue.imageMaximumGcAge = imageMaximumGcAge;
            _resultValue.imageMinimumGcAge = imageMinimumGcAge;
            _resultValue.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            _resultValue.maxParallelImagePulls = maxParallelImagePulls;
            _resultValue.memoryManager = memoryManager;
            _resultValue.podPidsLimit = podPidsLimit;
            _resultValue.singleProcessOomKill = singleProcessOomKill;
            _resultValue.topologyManager = topologyManager;
            return _resultValue;
        }
    }
}
