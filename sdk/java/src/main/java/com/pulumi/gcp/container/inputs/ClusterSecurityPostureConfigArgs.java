// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterSecurityPostureConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterSecurityPostureConfigArgs Empty = new ClusterSecurityPostureConfigArgs();

    /**
     * Sets the mode of the Kubernetes security posture API&#39;s off-cluster features. Available options include `DISABLED` and `BASIC`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Sets the mode of the Kubernetes security posture API&#39;s off-cluster features. Available options include `DISABLED` and `BASIC`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Sets the mode of the Kubernetes security posture API&#39;s workload vulnerability scanning. Available options include `VULNERABILITY_DISABLED` and `VULNERABILITY_BASIC`.
     * 
     */
    @Import(name="vulnerabilityMode")
    private @Nullable Output<String> vulnerabilityMode;

    /**
     * @return Sets the mode of the Kubernetes security posture API&#39;s workload vulnerability scanning. Available options include `VULNERABILITY_DISABLED` and `VULNERABILITY_BASIC`.
     * 
     */
    public Optional<Output<String>> vulnerabilityMode() {
        return Optional.ofNullable(this.vulnerabilityMode);
    }

    private ClusterSecurityPostureConfigArgs() {}

    private ClusterSecurityPostureConfigArgs(ClusterSecurityPostureConfigArgs $) {
        this.mode = $.mode;
        this.vulnerabilityMode = $.vulnerabilityMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterSecurityPostureConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterSecurityPostureConfigArgs $;

        public Builder() {
            $ = new ClusterSecurityPostureConfigArgs();
        }

        public Builder(ClusterSecurityPostureConfigArgs defaults) {
            $ = new ClusterSecurityPostureConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Sets the mode of the Kubernetes security posture API&#39;s off-cluster features. Available options include `DISABLED` and `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Sets the mode of the Kubernetes security posture API&#39;s off-cluster features. Available options include `DISABLED` and `BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param vulnerabilityMode Sets the mode of the Kubernetes security posture API&#39;s workload vulnerability scanning. Available options include `VULNERABILITY_DISABLED` and `VULNERABILITY_BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityMode(@Nullable Output<String> vulnerabilityMode) {
            $.vulnerabilityMode = vulnerabilityMode;
            return this;
        }

        /**
         * @param vulnerabilityMode Sets the mode of the Kubernetes security posture API&#39;s workload vulnerability scanning. Available options include `VULNERABILITY_DISABLED` and `VULNERABILITY_BASIC`.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityMode(String vulnerabilityMode) {
            return vulnerabilityMode(Output.of(vulnerabilityMode));
        }

        public ClusterSecurityPostureConfigArgs build() {
            return $;
        }
    }

}
