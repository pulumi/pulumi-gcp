// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.BackendServiceBackendCustomMetric;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendServiceBackend {
    /**
     * @return Specifies the balancing mode for this backend.
     * For global HTTP(S) or TCP/SSL load balancing, the default is
     * UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S)),
     * CUSTOM_METRICS (for HTTP(s)) and CONNECTION (for TCP/SSL).
     * See the [Backend Services Overview](https://cloud.google.com/load-balancing/docs/backend-service#balancing-mode)
     * for an explanation of load balancing modes.
     * Default value is `UTILIZATION`.
     * Possible values are: `UTILIZATION`, `RATE`, `CONNECTION`, `CUSTOM_METRICS`.
     * 
     */
    private @Nullable String balancingMode;
    /**
     * @return A multiplier applied to the group&#39;s maximum servicing capacity
     * (based on UTILIZATION, RATE or CONNECTION).
     * Default value is 1, which means the group will serve up to 100%
     * of its configured capacity (depending on balancingMode). A
     * setting of 0 means the group is completely drained, offering
     * 0% of its available Capacity. Valid range is [0.0,1.0].
     * 
     */
    private @Nullable Double capacityScaler;
    /**
     * @return The set of custom metrics that are used for &lt;code&gt;CUSTOM_METRICS&lt;/code&gt; BalancingMode.
     * Structure is documented below.
     * 
     */
    private @Nullable List<BackendServiceBackendCustomMetric> customMetrics;
    /**
     * @return An optional description of this resource.
     * Provide this property when you create the resource.
     * 
     */
    private @Nullable String description;
    /**
     * @return The fully-qualified URL of an Instance Group or Network Endpoint
     * Group resource. In case of instance group this defines the list
     * of instances that serve traffic. Member virtual machine
     * instances from each instance group must live in the same zone as
     * the instance group itself. No two backends in a backend service
     * are allowed to use same Instance Group resource.
     * For Network Endpoint Groups this defines list of endpoints. All
     * endpoints of Network Endpoint Group must be hosted on instances
     * located in the same zone as the Network Endpoint Group.
     * Backend services cannot mix Instance Group and
     * Network Endpoint Group backends.
     * Note that you must specify an Instance Group or Network Endpoint
     * Group resource using the fully-qualified URL, rather than a
     * partial URL.
     * 
     */
    private String group;
    /**
     * @return The max number of simultaneous connections for the group. Can
     * be used with either CONNECTION or UTILIZATION balancing modes.
     * For CONNECTION mode, either maxConnections or one
     * of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
     * as appropriate for group type, must be set.
     * 
     */
    private @Nullable Integer maxConnections;
    /**
     * @return The max number of simultaneous connections that a single backend
     * network endpoint can handle. This is used to calculate the
     * capacity of the group. Can be used in either CONNECTION or
     * UTILIZATION balancing modes.
     * For CONNECTION mode, either
     * maxConnections or maxConnectionsPerEndpoint must be set.
     * 
     */
    private @Nullable Integer maxConnectionsPerEndpoint;
    /**
     * @return The max number of simultaneous connections that a single
     * backend instance can handle. This is used to calculate the
     * capacity of the group. Can be used in either CONNECTION or
     * UTILIZATION balancing modes.
     * For CONNECTION mode, either maxConnections or
     * maxConnectionsPerInstance must be set.
     * 
     */
    private @Nullable Integer maxConnectionsPerInstance;
    /**
     * @return Defines a maximum number of in-flight requests for the whole NEG
     * or instance group. Not available if backend&#39;s balancingMode is RATE
     * or CONNECTION.
     * 
     */
    private @Nullable Integer maxInFlightRequests;
    /**
     * @return Defines a maximum number of in-flight requests for a single endpoint.
     * Not available if backend&#39;s balancingMode is RATE or CONNECTION.
     * 
     */
    private @Nullable Integer maxInFlightRequestsPerEndpoint;
    /**
     * @return Defines a maximum number of in-flight requests for a single VM.
     * Not available if backend&#39;s balancingMode is RATE or CONNECTION.
     * 
     */
    private @Nullable Integer maxInFlightRequestsPerInstance;
    /**
     * @return The max requests per second (RPS) of the group.
     * Can be used with either RATE or UTILIZATION balancing modes,
     * but required if RATE mode. For RATE mode, either maxRate or one
     * of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
     * group type, must be set.
     * 
     */
    private @Nullable Integer maxRate;
    /**
     * @return The max requests per second (RPS) that a single backend network
     * endpoint can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerEndpoint must be set.
     * 
     */
    private @Nullable Double maxRatePerEndpoint;
    /**
     * @return The max requests per second (RPS) that a single backend
     * instance can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerInstance must be set.
     * 
     */
    private @Nullable Double maxRatePerInstance;
    /**
     * @return Used when balancingMode is UTILIZATION. This ratio defines the
     * CPU utilization target for the group. Valid range is [0.0, 1.0].
     * 
     */
    private @Nullable Double maxUtilization;
    /**
     * @return This field indicates whether this backend should be fully utilized before sending traffic to backends
     * with default preference. This field cannot be set when loadBalancingScheme is set to &#39;EXTERNAL&#39;. The possible values are:
     * - PREFERRED: Backends with this preference level will be filled up to their capacity limits first,
     *   based on RTT.
     * - DEFAULT: If preferred backends don&#39;t have enough capacity, backends in this layer would be used and
     *   traffic would be assigned based on the load balancing algorithm you use. This is the default
     *   Possible values are: `PREFERRED`, `DEFAULT`.
     * 
     */
    private @Nullable String preference;
    /**
     * @return This field specifies how long a connection should be kept alive for:
     * - LONG: Most of the requests are expected to take more than multiple
     *   seconds to finish.
     * - SHORT: Most requests are expected to finish with a sub-second latency.
     *   Possible values are: `LONG`, `SHORT`.
     * 
     */
    private @Nullable String trafficDuration;

    private BackendServiceBackend() {}
    /**
     * @return Specifies the balancing mode for this backend.
     * For global HTTP(S) or TCP/SSL load balancing, the default is
     * UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S)),
     * CUSTOM_METRICS (for HTTP(s)) and CONNECTION (for TCP/SSL).
     * See the [Backend Services Overview](https://cloud.google.com/load-balancing/docs/backend-service#balancing-mode)
     * for an explanation of load balancing modes.
     * Default value is `UTILIZATION`.
     * Possible values are: `UTILIZATION`, `RATE`, `CONNECTION`, `CUSTOM_METRICS`.
     * 
     */
    public Optional<String> balancingMode() {
        return Optional.ofNullable(this.balancingMode);
    }
    /**
     * @return A multiplier applied to the group&#39;s maximum servicing capacity
     * (based on UTILIZATION, RATE or CONNECTION).
     * Default value is 1, which means the group will serve up to 100%
     * of its configured capacity (depending on balancingMode). A
     * setting of 0 means the group is completely drained, offering
     * 0% of its available Capacity. Valid range is [0.0,1.0].
     * 
     */
    public Optional<Double> capacityScaler() {
        return Optional.ofNullable(this.capacityScaler);
    }
    /**
     * @return The set of custom metrics that are used for &lt;code&gt;CUSTOM_METRICS&lt;/code&gt; BalancingMode.
     * Structure is documented below.
     * 
     */
    public List<BackendServiceBackendCustomMetric> customMetrics() {
        return this.customMetrics == null ? List.of() : this.customMetrics;
    }
    /**
     * @return An optional description of this resource.
     * Provide this property when you create the resource.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The fully-qualified URL of an Instance Group or Network Endpoint
     * Group resource. In case of instance group this defines the list
     * of instances that serve traffic. Member virtual machine
     * instances from each instance group must live in the same zone as
     * the instance group itself. No two backends in a backend service
     * are allowed to use same Instance Group resource.
     * For Network Endpoint Groups this defines list of endpoints. All
     * endpoints of Network Endpoint Group must be hosted on instances
     * located in the same zone as the Network Endpoint Group.
     * Backend services cannot mix Instance Group and
     * Network Endpoint Group backends.
     * Note that you must specify an Instance Group or Network Endpoint
     * Group resource using the fully-qualified URL, rather than a
     * partial URL.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return The max number of simultaneous connections for the group. Can
     * be used with either CONNECTION or UTILIZATION balancing modes.
     * For CONNECTION mode, either maxConnections or one
     * of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
     * as appropriate for group type, must be set.
     * 
     */
    public Optional<Integer> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }
    /**
     * @return The max number of simultaneous connections that a single backend
     * network endpoint can handle. This is used to calculate the
     * capacity of the group. Can be used in either CONNECTION or
     * UTILIZATION balancing modes.
     * For CONNECTION mode, either
     * maxConnections or maxConnectionsPerEndpoint must be set.
     * 
     */
    public Optional<Integer> maxConnectionsPerEndpoint() {
        return Optional.ofNullable(this.maxConnectionsPerEndpoint);
    }
    /**
     * @return The max number of simultaneous connections that a single
     * backend instance can handle. This is used to calculate the
     * capacity of the group. Can be used in either CONNECTION or
     * UTILIZATION balancing modes.
     * For CONNECTION mode, either maxConnections or
     * maxConnectionsPerInstance must be set.
     * 
     */
    public Optional<Integer> maxConnectionsPerInstance() {
        return Optional.ofNullable(this.maxConnectionsPerInstance);
    }
    /**
     * @return Defines a maximum number of in-flight requests for the whole NEG
     * or instance group. Not available if backend&#39;s balancingMode is RATE
     * or CONNECTION.
     * 
     */
    public Optional<Integer> maxInFlightRequests() {
        return Optional.ofNullable(this.maxInFlightRequests);
    }
    /**
     * @return Defines a maximum number of in-flight requests for a single endpoint.
     * Not available if backend&#39;s balancingMode is RATE or CONNECTION.
     * 
     */
    public Optional<Integer> maxInFlightRequestsPerEndpoint() {
        return Optional.ofNullable(this.maxInFlightRequestsPerEndpoint);
    }
    /**
     * @return Defines a maximum number of in-flight requests for a single VM.
     * Not available if backend&#39;s balancingMode is RATE or CONNECTION.
     * 
     */
    public Optional<Integer> maxInFlightRequestsPerInstance() {
        return Optional.ofNullable(this.maxInFlightRequestsPerInstance);
    }
    /**
     * @return The max requests per second (RPS) of the group.
     * Can be used with either RATE or UTILIZATION balancing modes,
     * but required if RATE mode. For RATE mode, either maxRate or one
     * of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
     * group type, must be set.
     * 
     */
    public Optional<Integer> maxRate() {
        return Optional.ofNullable(this.maxRate);
    }
    /**
     * @return The max requests per second (RPS) that a single backend network
     * endpoint can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerEndpoint must be set.
     * 
     */
    public Optional<Double> maxRatePerEndpoint() {
        return Optional.ofNullable(this.maxRatePerEndpoint);
    }
    /**
     * @return The max requests per second (RPS) that a single backend
     * instance can handle. This is used to calculate the capacity of
     * the group. Can be used in either balancing mode. For RATE mode,
     * either maxRate or maxRatePerInstance must be set.
     * 
     */
    public Optional<Double> maxRatePerInstance() {
        return Optional.ofNullable(this.maxRatePerInstance);
    }
    /**
     * @return Used when balancingMode is UTILIZATION. This ratio defines the
     * CPU utilization target for the group. Valid range is [0.0, 1.0].
     * 
     */
    public Optional<Double> maxUtilization() {
        return Optional.ofNullable(this.maxUtilization);
    }
    /**
     * @return This field indicates whether this backend should be fully utilized before sending traffic to backends
     * with default preference. This field cannot be set when loadBalancingScheme is set to &#39;EXTERNAL&#39;. The possible values are:
     * - PREFERRED: Backends with this preference level will be filled up to their capacity limits first,
     *   based on RTT.
     * - DEFAULT: If preferred backends don&#39;t have enough capacity, backends in this layer would be used and
     *   traffic would be assigned based on the load balancing algorithm you use. This is the default
     *   Possible values are: `PREFERRED`, `DEFAULT`.
     * 
     */
    public Optional<String> preference() {
        return Optional.ofNullable(this.preference);
    }
    /**
     * @return This field specifies how long a connection should be kept alive for:
     * - LONG: Most of the requests are expected to take more than multiple
     *   seconds to finish.
     * - SHORT: Most requests are expected to finish with a sub-second latency.
     *   Possible values are: `LONG`, `SHORT`.
     * 
     */
    public Optional<String> trafficDuration() {
        return Optional.ofNullable(this.trafficDuration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String balancingMode;
        private @Nullable Double capacityScaler;
        private @Nullable List<BackendServiceBackendCustomMetric> customMetrics;
        private @Nullable String description;
        private String group;
        private @Nullable Integer maxConnections;
        private @Nullable Integer maxConnectionsPerEndpoint;
        private @Nullable Integer maxConnectionsPerInstance;
        private @Nullable Integer maxInFlightRequests;
        private @Nullable Integer maxInFlightRequestsPerEndpoint;
        private @Nullable Integer maxInFlightRequestsPerInstance;
        private @Nullable Integer maxRate;
        private @Nullable Double maxRatePerEndpoint;
        private @Nullable Double maxRatePerInstance;
        private @Nullable Double maxUtilization;
        private @Nullable String preference;
        private @Nullable String trafficDuration;
        public Builder() {}
        public Builder(BackendServiceBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balancingMode = defaults.balancingMode;
    	      this.capacityScaler = defaults.capacityScaler;
    	      this.customMetrics = defaults.customMetrics;
    	      this.description = defaults.description;
    	      this.group = defaults.group;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxConnectionsPerEndpoint = defaults.maxConnectionsPerEndpoint;
    	      this.maxConnectionsPerInstance = defaults.maxConnectionsPerInstance;
    	      this.maxInFlightRequests = defaults.maxInFlightRequests;
    	      this.maxInFlightRequestsPerEndpoint = defaults.maxInFlightRequestsPerEndpoint;
    	      this.maxInFlightRequestsPerInstance = defaults.maxInFlightRequestsPerInstance;
    	      this.maxRate = defaults.maxRate;
    	      this.maxRatePerEndpoint = defaults.maxRatePerEndpoint;
    	      this.maxRatePerInstance = defaults.maxRatePerInstance;
    	      this.maxUtilization = defaults.maxUtilization;
    	      this.preference = defaults.preference;
    	      this.trafficDuration = defaults.trafficDuration;
        }

        @CustomType.Setter
        public Builder balancingMode(@Nullable String balancingMode) {

            this.balancingMode = balancingMode;
            return this;
        }
        @CustomType.Setter
        public Builder capacityScaler(@Nullable Double capacityScaler) {

            this.capacityScaler = capacityScaler;
            return this;
        }
        @CustomType.Setter
        public Builder customMetrics(@Nullable List<BackendServiceBackendCustomMetric> customMetrics) {

            this.customMetrics = customMetrics;
            return this;
        }
        public Builder customMetrics(BackendServiceBackendCustomMetric... customMetrics) {
            return customMetrics(List.of(customMetrics));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("BackendServiceBackend", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(@Nullable Integer maxConnections) {

            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionsPerEndpoint(@Nullable Integer maxConnectionsPerEndpoint) {

            this.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionsPerInstance(@Nullable Integer maxConnectionsPerInstance) {

            this.maxConnectionsPerInstance = maxConnectionsPerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxInFlightRequests(@Nullable Integer maxInFlightRequests) {

            this.maxInFlightRequests = maxInFlightRequests;
            return this;
        }
        @CustomType.Setter
        public Builder maxInFlightRequestsPerEndpoint(@Nullable Integer maxInFlightRequestsPerEndpoint) {

            this.maxInFlightRequestsPerEndpoint = maxInFlightRequestsPerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxInFlightRequestsPerInstance(@Nullable Integer maxInFlightRequestsPerInstance) {

            this.maxInFlightRequestsPerInstance = maxInFlightRequestsPerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxRate(@Nullable Integer maxRate) {

            this.maxRate = maxRate;
            return this;
        }
        @CustomType.Setter
        public Builder maxRatePerEndpoint(@Nullable Double maxRatePerEndpoint) {

            this.maxRatePerEndpoint = maxRatePerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxRatePerInstance(@Nullable Double maxRatePerInstance) {

            this.maxRatePerInstance = maxRatePerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxUtilization(@Nullable Double maxUtilization) {

            this.maxUtilization = maxUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder preference(@Nullable String preference) {

            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder trafficDuration(@Nullable String trafficDuration) {

            this.trafficDuration = trafficDuration;
            return this;
        }
        public BackendServiceBackend build() {
            final var _resultValue = new BackendServiceBackend();
            _resultValue.balancingMode = balancingMode;
            _resultValue.capacityScaler = capacityScaler;
            _resultValue.customMetrics = customMetrics;
            _resultValue.description = description;
            _resultValue.group = group;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            _resultValue.maxConnectionsPerInstance = maxConnectionsPerInstance;
            _resultValue.maxInFlightRequests = maxInFlightRequests;
            _resultValue.maxInFlightRequestsPerEndpoint = maxInFlightRequestsPerEndpoint;
            _resultValue.maxInFlightRequestsPerInstance = maxInFlightRequestsPerInstance;
            _resultValue.maxRate = maxRate;
            _resultValue.maxRatePerEndpoint = maxRatePerEndpoint;
            _resultValue.maxRatePerInstance = maxRatePerInstance;
            _resultValue.maxUtilization = maxUtilization;
            _resultValue.preference = preference;
            _resultValue.trafficDuration = trafficDuration;
            return _resultValue;
        }
    }
}
