// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.RouterStatusBestRoutesForRouterAsPath;
import com.pulumi.gcp.compute.outputs.RouterStatusBestRoutesForRouterParam;
import com.pulumi.gcp.compute.outputs.RouterStatusBestRoutesForRouterWarning;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class RouterStatusBestRoutesForRouter {
    private List<RouterStatusBestRoutesForRouterAsPath> asPaths;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private String creationTimestamp;
    /**
     * @return An optional description of this resource. Provide this property
     * when you create the resource.
     * 
     */
    private String description;
    /**
     * @return The destination range of outgoing packets that this route applies to.
     * Only IPv4 is supported.
     * 
     */
    private String destRange;
    /**
     * @return The name of the router.
     * 
     */
    private String name;
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    private String network;
    /**
     * @return URL to a gateway that should handle matching packets.
     * Currently, you can only specify the internet gateway, using a full or
     * partial valid URL:
     * * &#39;https://www.googleapis.com/compute/v1/projects/project/global/gateways/default-internet-gateway&#39;
     * * &#39;projects/project/global/gateways/default-internet-gateway&#39;
     * * &#39;global/gateways/default-internet-gateway&#39;
     * * The string &#39;default-internet-gateway&#39;.
     * 
     */
    private String nextHopGateway;
    /**
     * @return The hub network that should handle matching packets, which should conform to RFC1035.
     * 
     */
    private String nextHopHub;
    /**
     * @return The IP address or URL to a forwarding rule of type
     * loadBalancingScheme=INTERNAL that should handle matching
     * packets.
     * 
     * With the GA provider you can only specify the forwarding
     * rule as a partial or full URL. For example, the following
     * are all valid values:
     * * 10.128.0.56
     * * https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule
     * * regions/region/forwardingRules/forwardingRule
     * 
     * When the beta provider, you can also specify the IP address
     * of a forwarding rule from the same VPC or any peered VPC.
     * 
     * Note that this can only be used when the destinationRange is
     * a public (non-RFC 1918) IP CIDR range.
     * 
     */
    private String nextHopIlb;
    /**
     * @return URL to an instance that should handle matching packets.
     * You can specify this as a full or partial URL. For example:
     * * &#39;https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance&#39;
     * * &#39;projects/project/zones/zone/instances/instance&#39;
     * * &#39;zones/zone/instances/instance&#39;
     * * Just the instance name, with the zone in &#39;next_hop_instance_zone&#39;.
     * 
     */
    private String nextHopInstance;
    /**
     * @return The zone of the instance specified in next_hop_instance. Omit if nextHopInstance is specified as a URL.
     * 
     */
    private String nextHopInstanceZone;
    /**
     * @return Internal fixed region-to-region cost that Google Cloud calculates based on factors such as network performance, distance, and available bandwidth between regions.
     * 
     */
    private String nextHopInterRegionCost;
    /**
     * @return Network IP address of an instance that should handle matching packets.
     * 
     */
    private String nextHopIp;
    /**
     * @return Multi-Exit Discriminator, a BGP route metric that indicates the desirability of a particular route in a network.
     * 
     */
    private String nextHopMed;
    /**
     * @return URL to a Network that should handle matching packets.
     * 
     */
    private String nextHopNetwork;
    /**
     * @return Indicates the origin of the route. Can be IGP (Interior Gateway Protocol), EGP (Exterior Gateway Protocol), or INCOMPLETE.
     * 
     */
    private String nextHopOrigin;
    /**
     * @return The network peering name that should handle matching packets, which should conform to RFC1035.
     * 
     */
    private String nextHopPeering;
    /**
     * @return URL to a VpnTunnel that should handle matching packets.
     * 
     */
    private String nextHopVpnTunnel;
    /**
     * @return Additional params passed with the request, but not persisted as part of resource payload
     * 
     */
    private List<RouterStatusBestRoutesForRouterParam> params;
    /**
     * @return The priority of this route. Priority is used to break ties in cases
     * where there is more than one matching route of equal prefix length.
     * 
     * In the case of two routes with equal prefix length, the one with the
     * lowest-numbered priority value wins.
     * 
     * Default value is 1000. Valid range is 0 through 65535.
     * 
     */
    private Integer priority;
    /**
     * @return The ID of the project in which the resource
     * belongs. If it is not provided, the provider project is used.
     * 
     */
    private String project;
    /**
     * @return The status of the route, which can be one of the following values:
     * - &#39;ACTIVE&#39; for an active route
     * - &#39;INACTIVE&#39; for an inactive route
     * 
     */
    private String routeStatus;
    /**
     * @return The type of this route, which can be one of the following values:
     * - &#39;TRANSIT&#39; for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers
     * - &#39;SUBNET&#39; for a route from a subnet of the VPC
     * - &#39;BGP&#39; for a route learned from a BGP peer of this router
     * - &#39;STATIC&#39; for a static route
     * 
     */
    private String routeType;
    private String selfLink;
    /**
     * @return A list of instance tags to which this route applies.
     * 
     */
    private List<String> tags;
    /**
     * @return If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     * 
     */
    private List<RouterStatusBestRoutesForRouterWarning> warnings;

    private RouterStatusBestRoutesForRouter() {}
    public List<RouterStatusBestRoutesForRouterAsPath> asPaths() {
        return this.asPaths;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this resource. Provide this property
     * when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The destination range of outgoing packets that this route applies to.
     * Only IPv4 is supported.
     * 
     */
    public String destRange() {
        return this.destRange;
    }
    /**
     * @return The name of the router.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return URL to a gateway that should handle matching packets.
     * Currently, you can only specify the internet gateway, using a full or
     * partial valid URL:
     * * &#39;https://www.googleapis.com/compute/v1/projects/project/global/gateways/default-internet-gateway&#39;
     * * &#39;projects/project/global/gateways/default-internet-gateway&#39;
     * * &#39;global/gateways/default-internet-gateway&#39;
     * * The string &#39;default-internet-gateway&#39;.
     * 
     */
    public String nextHopGateway() {
        return this.nextHopGateway;
    }
    /**
     * @return The hub network that should handle matching packets, which should conform to RFC1035.
     * 
     */
    public String nextHopHub() {
        return this.nextHopHub;
    }
    /**
     * @return The IP address or URL to a forwarding rule of type
     * loadBalancingScheme=INTERNAL that should handle matching
     * packets.
     * 
     * With the GA provider you can only specify the forwarding
     * rule as a partial or full URL. For example, the following
     * are all valid values:
     * * 10.128.0.56
     * * https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule
     * * regions/region/forwardingRules/forwardingRule
     * 
     * When the beta provider, you can also specify the IP address
     * of a forwarding rule from the same VPC or any peered VPC.
     * 
     * Note that this can only be used when the destinationRange is
     * a public (non-RFC 1918) IP CIDR range.
     * 
     */
    public String nextHopIlb() {
        return this.nextHopIlb;
    }
    /**
     * @return URL to an instance that should handle matching packets.
     * You can specify this as a full or partial URL. For example:
     * * &#39;https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance&#39;
     * * &#39;projects/project/zones/zone/instances/instance&#39;
     * * &#39;zones/zone/instances/instance&#39;
     * * Just the instance name, with the zone in &#39;next_hop_instance_zone&#39;.
     * 
     */
    public String nextHopInstance() {
        return this.nextHopInstance;
    }
    /**
     * @return The zone of the instance specified in next_hop_instance. Omit if nextHopInstance is specified as a URL.
     * 
     */
    public String nextHopInstanceZone() {
        return this.nextHopInstanceZone;
    }
    /**
     * @return Internal fixed region-to-region cost that Google Cloud calculates based on factors such as network performance, distance, and available bandwidth between regions.
     * 
     */
    public String nextHopInterRegionCost() {
        return this.nextHopInterRegionCost;
    }
    /**
     * @return Network IP address of an instance that should handle matching packets.
     * 
     */
    public String nextHopIp() {
        return this.nextHopIp;
    }
    /**
     * @return Multi-Exit Discriminator, a BGP route metric that indicates the desirability of a particular route in a network.
     * 
     */
    public String nextHopMed() {
        return this.nextHopMed;
    }
    /**
     * @return URL to a Network that should handle matching packets.
     * 
     */
    public String nextHopNetwork() {
        return this.nextHopNetwork;
    }
    /**
     * @return Indicates the origin of the route. Can be IGP (Interior Gateway Protocol), EGP (Exterior Gateway Protocol), or INCOMPLETE.
     * 
     */
    public String nextHopOrigin() {
        return this.nextHopOrigin;
    }
    /**
     * @return The network peering name that should handle matching packets, which should conform to RFC1035.
     * 
     */
    public String nextHopPeering() {
        return this.nextHopPeering;
    }
    /**
     * @return URL to a VpnTunnel that should handle matching packets.
     * 
     */
    public String nextHopVpnTunnel() {
        return this.nextHopVpnTunnel;
    }
    /**
     * @return Additional params passed with the request, but not persisted as part of resource payload
     * 
     */
    public List<RouterStatusBestRoutesForRouterParam> params() {
        return this.params;
    }
    /**
     * @return The priority of this route. Priority is used to break ties in cases
     * where there is more than one matching route of equal prefix length.
     * 
     * In the case of two routes with equal prefix length, the one with the
     * lowest-numbered priority value wins.
     * 
     * Default value is 1000. Valid range is 0 through 65535.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The ID of the project in which the resource
     * belongs. If it is not provided, the provider project is used.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The status of the route, which can be one of the following values:
     * - &#39;ACTIVE&#39; for an active route
     * - &#39;INACTIVE&#39; for an inactive route
     * 
     */
    public String routeStatus() {
        return this.routeStatus;
    }
    /**
     * @return The type of this route, which can be one of the following values:
     * - &#39;TRANSIT&#39; for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers
     * - &#39;SUBNET&#39; for a route from a subnet of the VPC
     * - &#39;BGP&#39; for a route learned from a BGP peer of this router
     * - &#39;STATIC&#39; for a static route
     * 
     */
    public String routeType() {
        return this.routeType;
    }
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return A list of instance tags to which this route applies.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     * 
     */
    public List<RouterStatusBestRoutesForRouterWarning> warnings() {
        return this.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterStatusBestRoutesForRouter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<RouterStatusBestRoutesForRouterAsPath> asPaths;
        private String creationTimestamp;
        private String description;
        private String destRange;
        private String name;
        private String network;
        private String nextHopGateway;
        private String nextHopHub;
        private String nextHopIlb;
        private String nextHopInstance;
        private String nextHopInstanceZone;
        private String nextHopInterRegionCost;
        private String nextHopIp;
        private String nextHopMed;
        private String nextHopNetwork;
        private String nextHopOrigin;
        private String nextHopPeering;
        private String nextHopVpnTunnel;
        private List<RouterStatusBestRoutesForRouterParam> params;
        private Integer priority;
        private String project;
        private String routeStatus;
        private String routeType;
        private String selfLink;
        private List<String> tags;
        private List<RouterStatusBestRoutesForRouterWarning> warnings;
        public Builder() {}
        public Builder(RouterStatusBestRoutesForRouter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asPaths = defaults.asPaths;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.destRange = defaults.destRange;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.nextHopGateway = defaults.nextHopGateway;
    	      this.nextHopHub = defaults.nextHopHub;
    	      this.nextHopIlb = defaults.nextHopIlb;
    	      this.nextHopInstance = defaults.nextHopInstance;
    	      this.nextHopInstanceZone = defaults.nextHopInstanceZone;
    	      this.nextHopInterRegionCost = defaults.nextHopInterRegionCost;
    	      this.nextHopIp = defaults.nextHopIp;
    	      this.nextHopMed = defaults.nextHopMed;
    	      this.nextHopNetwork = defaults.nextHopNetwork;
    	      this.nextHopOrigin = defaults.nextHopOrigin;
    	      this.nextHopPeering = defaults.nextHopPeering;
    	      this.nextHopVpnTunnel = defaults.nextHopVpnTunnel;
    	      this.params = defaults.params;
    	      this.priority = defaults.priority;
    	      this.project = defaults.project;
    	      this.routeStatus = defaults.routeStatus;
    	      this.routeType = defaults.routeType;
    	      this.selfLink = defaults.selfLink;
    	      this.tags = defaults.tags;
    	      this.warnings = defaults.warnings;
        }

        @CustomType.Setter
        public Builder asPaths(List<RouterStatusBestRoutesForRouterAsPath> asPaths) {
            if (asPaths == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "asPaths");
            }
            this.asPaths = asPaths;
            return this;
        }
        public Builder asPaths(RouterStatusBestRoutesForRouterAsPath... asPaths) {
            return asPaths(List.of(asPaths));
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destRange(String destRange) {
            if (destRange == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "destRange");
            }
            this.destRange = destRange;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopGateway(String nextHopGateway) {
            if (nextHopGateway == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopGateway");
            }
            this.nextHopGateway = nextHopGateway;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopHub(String nextHopHub) {
            if (nextHopHub == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopHub");
            }
            this.nextHopHub = nextHopHub;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopIlb(String nextHopIlb) {
            if (nextHopIlb == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopIlb");
            }
            this.nextHopIlb = nextHopIlb;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopInstance(String nextHopInstance) {
            if (nextHopInstance == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopInstance");
            }
            this.nextHopInstance = nextHopInstance;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopInstanceZone(String nextHopInstanceZone) {
            if (nextHopInstanceZone == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopInstanceZone");
            }
            this.nextHopInstanceZone = nextHopInstanceZone;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopInterRegionCost(String nextHopInterRegionCost) {
            if (nextHopInterRegionCost == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopInterRegionCost");
            }
            this.nextHopInterRegionCost = nextHopInterRegionCost;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopIp(String nextHopIp) {
            if (nextHopIp == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopIp");
            }
            this.nextHopIp = nextHopIp;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopMed(String nextHopMed) {
            if (nextHopMed == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopMed");
            }
            this.nextHopMed = nextHopMed;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopNetwork(String nextHopNetwork) {
            if (nextHopNetwork == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopNetwork");
            }
            this.nextHopNetwork = nextHopNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopOrigin(String nextHopOrigin) {
            if (nextHopOrigin == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopOrigin");
            }
            this.nextHopOrigin = nextHopOrigin;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopPeering(String nextHopPeering) {
            if (nextHopPeering == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopPeering");
            }
            this.nextHopPeering = nextHopPeering;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopVpnTunnel(String nextHopVpnTunnel) {
            if (nextHopVpnTunnel == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopVpnTunnel");
            }
            this.nextHopVpnTunnel = nextHopVpnTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder params(List<RouterStatusBestRoutesForRouterParam> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "params");
            }
            this.params = params;
            return this;
        }
        public Builder params(RouterStatusBestRoutesForRouterParam... params) {
            return params(List.of(params));
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder routeStatus(String routeStatus) {
            if (routeStatus == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "routeStatus");
            }
            this.routeStatus = routeStatus;
            return this;
        }
        @CustomType.Setter
        public Builder routeType(String routeType) {
            if (routeType == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "routeType");
            }
            this.routeType = routeType;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder warnings(List<RouterStatusBestRoutesForRouterWarning> warnings) {
            if (warnings == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "warnings");
            }
            this.warnings = warnings;
            return this;
        }
        public Builder warnings(RouterStatusBestRoutesForRouterWarning... warnings) {
            return warnings(List.of(warnings));
        }
        public RouterStatusBestRoutesForRouter build() {
            final var _resultValue = new RouterStatusBestRoutesForRouter();
            _resultValue.asPaths = asPaths;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.destRange = destRange;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.nextHopGateway = nextHopGateway;
            _resultValue.nextHopHub = nextHopHub;
            _resultValue.nextHopIlb = nextHopIlb;
            _resultValue.nextHopInstance = nextHopInstance;
            _resultValue.nextHopInstanceZone = nextHopInstanceZone;
            _resultValue.nextHopInterRegionCost = nextHopInterRegionCost;
            _resultValue.nextHopIp = nextHopIp;
            _resultValue.nextHopMed = nextHopMed;
            _resultValue.nextHopNetwork = nextHopNetwork;
            _resultValue.nextHopOrigin = nextHopOrigin;
            _resultValue.nextHopPeering = nextHopPeering;
            _resultValue.nextHopVpnTunnel = nextHopVpnTunnel;
            _resultValue.params = params;
            _resultValue.priority = priority;
            _resultValue.project = project;
            _resultValue.routeStatus = routeStatus;
            _resultValue.routeType = routeType;
            _resultValue.selfLink = selfLink;
            _resultValue.tags = tags;
            _resultValue.warnings = warnings;
            return _resultValue;
        }
    }
}
