// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class RouterStatusBestRoutesForRouter {
    private String description;
    private String destRange;
    /**
     * @return The name of the router.
     * 
     */
    private String name;
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    private String network;
    private String nextHopGateway;
    private String nextHopIlb;
    private String nextHopInstance;
    private String nextHopInstanceZone;
    private String nextHopIp;
    private String nextHopNetwork;
    private String nextHopVpnTunnel;
    private Integer priority;
    /**
     * @return The ID of the project in which the resource
     * belongs. If it is not provided, the provider project is used.
     * 
     */
    private String project;
    private String selfLink;
    private List<String> tags;

    private RouterStatusBestRoutesForRouter() {}
    public String description() {
        return this.description;
    }
    public String destRange() {
        return this.destRange;
    }
    /**
     * @return The name of the router.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network name or resource link to the parent
     * network of this subnetwork.
     * 
     */
    public String network() {
        return this.network;
    }
    public String nextHopGateway() {
        return this.nextHopGateway;
    }
    public String nextHopIlb() {
        return this.nextHopIlb;
    }
    public String nextHopInstance() {
        return this.nextHopInstance;
    }
    public String nextHopInstanceZone() {
        return this.nextHopInstanceZone;
    }
    public String nextHopIp() {
        return this.nextHopIp;
    }
    public String nextHopNetwork() {
        return this.nextHopNetwork;
    }
    public String nextHopVpnTunnel() {
        return this.nextHopVpnTunnel;
    }
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The ID of the project in which the resource
     * belongs. If it is not provided, the provider project is used.
     * 
     */
    public String project() {
        return this.project;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouterStatusBestRoutesForRouter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String destRange;
        private String name;
        private String network;
        private String nextHopGateway;
        private String nextHopIlb;
        private String nextHopInstance;
        private String nextHopInstanceZone;
        private String nextHopIp;
        private String nextHopNetwork;
        private String nextHopVpnTunnel;
        private Integer priority;
        private String project;
        private String selfLink;
        private List<String> tags;
        public Builder() {}
        public Builder(RouterStatusBestRoutesForRouter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destRange = defaults.destRange;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.nextHopGateway = defaults.nextHopGateway;
    	      this.nextHopIlb = defaults.nextHopIlb;
    	      this.nextHopInstance = defaults.nextHopInstance;
    	      this.nextHopInstanceZone = defaults.nextHopInstanceZone;
    	      this.nextHopIp = defaults.nextHopIp;
    	      this.nextHopNetwork = defaults.nextHopNetwork;
    	      this.nextHopVpnTunnel = defaults.nextHopVpnTunnel;
    	      this.priority = defaults.priority;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destRange(String destRange) {
            if (destRange == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "destRange");
            }
            this.destRange = destRange;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopGateway(String nextHopGateway) {
            if (nextHopGateway == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopGateway");
            }
            this.nextHopGateway = nextHopGateway;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopIlb(String nextHopIlb) {
            if (nextHopIlb == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopIlb");
            }
            this.nextHopIlb = nextHopIlb;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopInstance(String nextHopInstance) {
            if (nextHopInstance == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopInstance");
            }
            this.nextHopInstance = nextHopInstance;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopInstanceZone(String nextHopInstanceZone) {
            if (nextHopInstanceZone == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopInstanceZone");
            }
            this.nextHopInstanceZone = nextHopInstanceZone;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopIp(String nextHopIp) {
            if (nextHopIp == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopIp");
            }
            this.nextHopIp = nextHopIp;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopNetwork(String nextHopNetwork) {
            if (nextHopNetwork == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopNetwork");
            }
            this.nextHopNetwork = nextHopNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopVpnTunnel(String nextHopVpnTunnel) {
            if (nextHopVpnTunnel == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "nextHopVpnTunnel");
            }
            this.nextHopVpnTunnel = nextHopVpnTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("RouterStatusBestRoutesForRouter", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public RouterStatusBestRoutesForRouter build() {
            final var _resultValue = new RouterStatusBestRoutesForRouter();
            _resultValue.description = description;
            _resultValue.destRange = destRange;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.nextHopGateway = nextHopGateway;
            _resultValue.nextHopIlb = nextHopIlb;
            _resultValue.nextHopInstance = nextHopInstance;
            _resultValue.nextHopInstanceZone = nextHopInstanceZone;
            _resultValue.nextHopIp = nextHopIp;
            _resultValue.nextHopNetwork = nextHopNetwork;
            _resultValue.nextHopVpnTunnel = nextHopVpnTunnel;
            _resultValue.priority = priority;
            _resultValue.project = project;
            _resultValue.selfLink = selfLink;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
