// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs Empty = new PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs();

    /**
     * Characters to skip when doing de-identification of a value. These will be left alone and skipped.
     * Structure is documented below.
     * 
     */
    @Import(name="charactersToIgnores")
    private @Nullable Output<List<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreArgs>> charactersToIgnores;

    /**
     * @return Characters to skip when doing de-identification of a value. These will be left alone and skipped.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreArgs>>> charactersToIgnores() {
        return Optional.ofNullable(this.charactersToIgnores);
    }

    /**
     * is *
     * 
     */
    @Import(name="maskingCharacter")
    private @Nullable Output<String> maskingCharacter;

    /**
     * @return is *
     * 
     */
    public Optional<Output<String>> maskingCharacter() {
        return Optional.ofNullable(this.maskingCharacter);
    }

    /**
     * is -4
     * 
     */
    @Import(name="numberToMask")
    private @Nullable Output<Integer> numberToMask;

    /**
     * @return is -4
     * 
     */
    public Optional<Output<Integer>> numberToMask() {
        return Optional.ofNullable(this.numberToMask);
    }

    /**
     * Mask characters in reverse order. For example, if masking_character is 0, number_to_mask is 14, and reverse_order is `false`, then the
     * input string `1234-5678-9012-3456` is masked as `00000000000000-3456`.
     * 
     */
    @Import(name="reverseOrder")
    private @Nullable Output<Boolean> reverseOrder;

    /**
     * @return Mask characters in reverse order. For example, if masking_character is 0, number_to_mask is 14, and reverse_order is `false`, then the
     * input string `1234-5678-9012-3456` is masked as `00000000000000-3456`.
     * 
     */
    public Optional<Output<Boolean>> reverseOrder() {
        return Optional.ofNullable(this.reverseOrder);
    }

    private PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs() {}

    private PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs(PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs $) {
        this.charactersToIgnores = $.charactersToIgnores;
        this.maskingCharacter = $.maskingCharacter;
        this.numberToMask = $.numberToMask;
        this.reverseOrder = $.reverseOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs $;

        public Builder() {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs();
        }

        public Builder(PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs defaults) {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param charactersToIgnores Characters to skip when doing de-identification of a value. These will be left alone and skipped.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnores(@Nullable Output<List<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreArgs>> charactersToIgnores) {
            $.charactersToIgnores = charactersToIgnores;
            return this;
        }

        /**
         * @param charactersToIgnores Characters to skip when doing de-identification of a value. These will be left alone and skipped.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnores(List<PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreArgs> charactersToIgnores) {
            return charactersToIgnores(Output.of(charactersToIgnores));
        }

        /**
         * @param charactersToIgnores Characters to skip when doing de-identification of a value. These will be left alone and skipped.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder charactersToIgnores(PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreArgs... charactersToIgnores) {
            return charactersToIgnores(List.of(charactersToIgnores));
        }

        /**
         * @param maskingCharacter is *
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(@Nullable Output<String> maskingCharacter) {
            $.maskingCharacter = maskingCharacter;
            return this;
        }

        /**
         * @param maskingCharacter is *
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(String maskingCharacter) {
            return maskingCharacter(Output.of(maskingCharacter));
        }

        /**
         * @param numberToMask is -4
         * 
         * @return builder
         * 
         */
        public Builder numberToMask(@Nullable Output<Integer> numberToMask) {
            $.numberToMask = numberToMask;
            return this;
        }

        /**
         * @param numberToMask is -4
         * 
         * @return builder
         * 
         */
        public Builder numberToMask(Integer numberToMask) {
            return numberToMask(Output.of(numberToMask));
        }

        /**
         * @param reverseOrder Mask characters in reverse order. For example, if masking_character is 0, number_to_mask is 14, and reverse_order is `false`, then the
         * input string `1234-5678-9012-3456` is masked as `00000000000000-3456`.
         * 
         * @return builder
         * 
         */
        public Builder reverseOrder(@Nullable Output<Boolean> reverseOrder) {
            $.reverseOrder = reverseOrder;
            return this;
        }

        /**
         * @param reverseOrder Mask characters in reverse order. For example, if masking_character is 0, number_to_mask is 14, and reverse_order is `false`, then the
         * input string `1234-5678-9012-3456` is masked as `00000000000000-3456`.
         * 
         * @return builder
         * 
         */
        public Builder reverseOrder(Boolean reverseOrder) {
            return reverseOrder(Output.of(reverseOrder));
        }

        public PreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationPrimitiveTransformationCharacterMaskConfigArgs build() {
            return $;
        }
    }

}
