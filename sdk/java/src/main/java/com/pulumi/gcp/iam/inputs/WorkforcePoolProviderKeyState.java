// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iam.inputs.WorkforcePoolProviderKeyKeyDataArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkforcePoolProviderKeyState extends com.pulumi.resources.ResourceArgs {

    public static final WorkforcePoolProviderKeyState Empty = new WorkforcePoolProviderKeyState();

    /**
     * The time after which the key will be permanently deleted and cannot be recovered.
     * Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return The time after which the key will be permanently deleted and cannot be recovered.
     * Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * Immutable. Public half of the asymmetric key.
     * Structure is documented below.
     * 
     */
    @Import(name="keyData")
    private @Nullable Output<WorkforcePoolProviderKeyKeyDataArgs> keyData;

    /**
     * @return Immutable. Public half of the asymmetric key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkforcePoolProviderKeyKeyDataArgs>> keyData() {
        return Optional.ofNullable(this.keyData);
    }

    /**
     * The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * The location for the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of the key.
     * Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of the key.
     * Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the provider.
     * 
     */
    @Import(name="providerId")
    private @Nullable Output<String> providerId;

    /**
     * @return The ID of the provider.
     * 
     */
    public Optional<Output<String>> providerId() {
        return Optional.ofNullable(this.providerId);
    }

    /**
     * The state of the key.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the key.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The purpose of the key.
     * Possible values are: `ENCRYPTION`.
     * 
     */
    @Import(name="use")
    private @Nullable Output<String> use;

    /**
     * @return The purpose of the key.
     * Possible values are: `ENCRYPTION`.
     * 
     */
    public Optional<Output<String>> use() {
        return Optional.ofNullable(this.use);
    }

    /**
     * The ID of the workforce pool.
     * 
     */
    @Import(name="workforcePoolId")
    private @Nullable Output<String> workforcePoolId;

    /**
     * @return The ID of the workforce pool.
     * 
     */
    public Optional<Output<String>> workforcePoolId() {
        return Optional.ofNullable(this.workforcePoolId);
    }

    private WorkforcePoolProviderKeyState() {}

    private WorkforcePoolProviderKeyState(WorkforcePoolProviderKeyState $) {
        this.expireTime = $.expireTime;
        this.keyData = $.keyData;
        this.keyId = $.keyId;
        this.location = $.location;
        this.name = $.name;
        this.providerId = $.providerId;
        this.state = $.state;
        this.use = $.use;
        this.workforcePoolId = $.workforcePoolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkforcePoolProviderKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkforcePoolProviderKeyState $;

        public Builder() {
            $ = new WorkforcePoolProviderKeyState();
        }

        public Builder(WorkforcePoolProviderKeyState defaults) {
            $ = new WorkforcePoolProviderKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param expireTime The time after which the key will be permanently deleted and cannot be recovered.
         * Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The time after which the key will be permanently deleted and cannot be recovered.
         * Note that the key may get purged before this time if the total limit of keys per provider is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param keyData Immutable. Public half of the asymmetric key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder keyData(@Nullable Output<WorkforcePoolProviderKeyKeyDataArgs> keyData) {
            $.keyData = keyData;
            return this;
        }

        /**
         * @param keyData Immutable. Public half of the asymmetric key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder keyData(WorkforcePoolProviderKeyKeyDataArgs keyData) {
            return keyData(Output.of(keyData));
        }

        /**
         * @param keyId The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The ID to use for the key, which becomes the final component of the resource name. This value must be 4-32 characters, and may contain the characters [a-z0-9-].
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param location The location for the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of the key.
         * Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of the key.
         * Format: `locations/{location}/workforcePools/{workforcePoolId}/providers/{providerId}/keys/{keyId}`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param providerId The ID of the provider.
         * 
         * @return builder
         * 
         */
        public Builder providerId(@Nullable Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The ID of the provider.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param state The state of the key.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the key.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param use The purpose of the key.
         * Possible values are: `ENCRYPTION`.
         * 
         * @return builder
         * 
         */
        public Builder use(@Nullable Output<String> use) {
            $.use = use;
            return this;
        }

        /**
         * @param use The purpose of the key.
         * Possible values are: `ENCRYPTION`.
         * 
         * @return builder
         * 
         */
        public Builder use(String use) {
            return use(Output.of(use));
        }

        /**
         * @param workforcePoolId The ID of the workforce pool.
         * 
         * @return builder
         * 
         */
        public Builder workforcePoolId(@Nullable Output<String> workforcePoolId) {
            $.workforcePoolId = workforcePoolId;
            return this;
        }

        /**
         * @param workforcePoolId The ID of the workforce pool.
         * 
         * @return builder
         * 
         */
        public Builder workforcePoolId(String workforcePoolId) {
            return workforcePoolId(Output.of(workforcePoolId));
        }

        public WorkforcePoolProviderKeyState build() {
            return $;
        }
    }

}
