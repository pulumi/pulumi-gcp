// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.managedkafka.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ClusterCapacityConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterCapacityConfigArgs Empty = new ClusterCapacityConfigArgs();

    /**
     * The memory to provision for the cluster in bytes. The value must be between 1 GiB and 8 GiB per vCPU. Ex. 1024Mi, 4Gi.
     * 
     */
    @Import(name="memoryBytes", required=true)
    private Output<String> memoryBytes;

    /**
     * @return The memory to provision for the cluster in bytes. The value must be between 1 GiB and 8 GiB per vCPU. Ex. 1024Mi, 4Gi.
     * 
     */
    public Output<String> memoryBytes() {
        return this.memoryBytes;
    }

    /**
     * The number of vCPUs to provision for the cluster. The minimum is 3.
     * 
     */
    @Import(name="vcpuCount", required=true)
    private Output<String> vcpuCount;

    /**
     * @return The number of vCPUs to provision for the cluster. The minimum is 3.
     * 
     */
    public Output<String> vcpuCount() {
        return this.vcpuCount;
    }

    private ClusterCapacityConfigArgs() {}

    private ClusterCapacityConfigArgs(ClusterCapacityConfigArgs $) {
        this.memoryBytes = $.memoryBytes;
        this.vcpuCount = $.vcpuCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterCapacityConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterCapacityConfigArgs $;

        public Builder() {
            $ = new ClusterCapacityConfigArgs();
        }

        public Builder(ClusterCapacityConfigArgs defaults) {
            $ = new ClusterCapacityConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param memoryBytes The memory to provision for the cluster in bytes. The value must be between 1 GiB and 8 GiB per vCPU. Ex. 1024Mi, 4Gi.
         * 
         * @return builder
         * 
         */
        public Builder memoryBytes(Output<String> memoryBytes) {
            $.memoryBytes = memoryBytes;
            return this;
        }

        /**
         * @param memoryBytes The memory to provision for the cluster in bytes. The value must be between 1 GiB and 8 GiB per vCPU. Ex. 1024Mi, 4Gi.
         * 
         * @return builder
         * 
         */
        public Builder memoryBytes(String memoryBytes) {
            return memoryBytes(Output.of(memoryBytes));
        }

        /**
         * @param vcpuCount The number of vCPUs to provision for the cluster. The minimum is 3.
         * 
         * @return builder
         * 
         */
        public Builder vcpuCount(Output<String> vcpuCount) {
            $.vcpuCount = vcpuCount;
            return this;
        }

        /**
         * @param vcpuCount The number of vCPUs to provision for the cluster. The minimum is 3.
         * 
         * @return builder
         * 
         */
        public Builder vcpuCount(String vcpuCount) {
            return vcpuCount(Output.of(vcpuCount));
        }

        public ClusterCapacityConfigArgs build() {
            if ($.memoryBytes == null) {
                throw new MissingRequiredPropertyException("ClusterCapacityConfigArgs", "memoryBytes");
            }
            if ($.vcpuCount == null) {
                throw new MissingRequiredPropertyException("ClusterCapacityConfigArgs", "vcpuCount");
            }
            return $;
        }
    }

}
