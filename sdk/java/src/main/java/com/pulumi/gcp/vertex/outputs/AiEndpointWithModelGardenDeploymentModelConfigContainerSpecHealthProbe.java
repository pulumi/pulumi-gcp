// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.vertex.outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec;
import com.pulumi.gcp.vertex.outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc;
import com.pulumi.gcp.vertex.outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet;
import com.pulumi.gcp.vertex.outputs.AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe {
    /**
     * @return ExecAction specifies a command to execute.
     * Structure is documented below.
     * 
     */
    private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec exec;
    /**
     * @return Number of consecutive failures before the probe is considered failed.
     * Defaults to 3. Minimum value is 1.
     * Maps to Kubernetes probe argument &#39;failureThreshold&#39;.
     * 
     */
    private @Nullable Integer failureThreshold;
    /**
     * @return GrpcAction checks the health of a container using a gRPC service.
     * Structure is documented below.
     * 
     */
    private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc grpc;
    /**
     * @return HttpGetAction describes an action based on HTTP Get requests.
     * Structure is documented below.
     * 
     */
    private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet httpGet;
    /**
     * @return Number of seconds to wait before starting the probe. Defaults to 0.
     * Minimum value is 0.
     * Maps to Kubernetes probe argument &#39;initialDelaySeconds&#39;.
     * 
     */
    private @Nullable Integer initialDelaySeconds;
    /**
     * @return How often (in seconds) to perform the probe. Default to 10 seconds.
     * Minimum value is 1. Must be less than timeout_seconds.
     * Maps to Kubernetes probe argument &#39;periodSeconds&#39;.
     * 
     */
    private @Nullable Integer periodSeconds;
    /**
     * @return Number of consecutive successes before the probe is considered successful.
     * Defaults to 1. Minimum value is 1.
     * Maps to Kubernetes probe argument &#39;successThreshold&#39;.
     * 
     */
    private @Nullable Integer successThreshold;
    /**
     * @return TcpSocketAction probes the health of a container by opening a TCP socket
     * connection.
     * Structure is documented below.
     * 
     */
    private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket tcpSocket;
    /**
     * @return Number of seconds after which the probe times out. Defaults to 1 second.
     * Minimum value is 1. Must be greater or equal to period_seconds.
     * Maps to Kubernetes probe argument &#39;timeoutSeconds&#39;.
     * 
     */
    private @Nullable Integer timeoutSeconds;

    private AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe() {}
    /**
     * @return ExecAction specifies a command to execute.
     * Structure is documented below.
     * 
     */
    public Optional<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec> exec() {
        return Optional.ofNullable(this.exec);
    }
    /**
     * @return Number of consecutive failures before the probe is considered failed.
     * Defaults to 3. Minimum value is 1.
     * Maps to Kubernetes probe argument &#39;failureThreshold&#39;.
     * 
     */
    public Optional<Integer> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    /**
     * @return GrpcAction checks the health of a container using a gRPC service.
     * Structure is documented below.
     * 
     */
    public Optional<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc> grpc() {
        return Optional.ofNullable(this.grpc);
    }
    /**
     * @return HttpGetAction describes an action based on HTTP Get requests.
     * Structure is documented below.
     * 
     */
    public Optional<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet> httpGet() {
        return Optional.ofNullable(this.httpGet);
    }
    /**
     * @return Number of seconds to wait before starting the probe. Defaults to 0.
     * Minimum value is 0.
     * Maps to Kubernetes probe argument &#39;initialDelaySeconds&#39;.
     * 
     */
    public Optional<Integer> initialDelaySeconds() {
        return Optional.ofNullable(this.initialDelaySeconds);
    }
    /**
     * @return How often (in seconds) to perform the probe. Default to 10 seconds.
     * Minimum value is 1. Must be less than timeout_seconds.
     * Maps to Kubernetes probe argument &#39;periodSeconds&#39;.
     * 
     */
    public Optional<Integer> periodSeconds() {
        return Optional.ofNullable(this.periodSeconds);
    }
    /**
     * @return Number of consecutive successes before the probe is considered successful.
     * Defaults to 1. Minimum value is 1.
     * Maps to Kubernetes probe argument &#39;successThreshold&#39;.
     * 
     */
    public Optional<Integer> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    /**
     * @return TcpSocketAction probes the health of a container by opening a TCP socket
     * connection.
     * Structure is documented below.
     * 
     */
    public Optional<AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket> tcpSocket() {
        return Optional.ofNullable(this.tcpSocket);
    }
    /**
     * @return Number of seconds after which the probe times out. Defaults to 1 second.
     * Minimum value is 1. Must be greater or equal to period_seconds.
     * Maps to Kubernetes probe argument &#39;timeoutSeconds&#39;.
     * 
     */
    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec exec;
        private @Nullable Integer failureThreshold;
        private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc grpc;
        private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet httpGet;
        private @Nullable Integer initialDelaySeconds;
        private @Nullable Integer periodSeconds;
        private @Nullable Integer successThreshold;
        private @Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket tcpSocket;
        private @Nullable Integer timeoutSeconds;
        public Builder() {}
        public Builder(AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.grpc = defaults.grpc;
    	      this.httpGet = defaults.httpGet;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcpSocket = defaults.tcpSocket;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        @CustomType.Setter
        public Builder exec(@Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExec exec) {

            this.exec = exec;
            return this;
        }
        @CustomType.Setter
        public Builder failureThreshold(@Nullable Integer failureThreshold) {

            this.failureThreshold = failureThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder grpc(@Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpc grpc) {

            this.grpc = grpc;
            return this;
        }
        @CustomType.Setter
        public Builder httpGet(@Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGet httpGet) {

            this.httpGet = httpGet;
            return this;
        }
        @CustomType.Setter
        public Builder initialDelaySeconds(@Nullable Integer initialDelaySeconds) {

            this.initialDelaySeconds = initialDelaySeconds;
            return this;
        }
        @CustomType.Setter
        public Builder periodSeconds(@Nullable Integer periodSeconds) {

            this.periodSeconds = periodSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(@Nullable Integer successThreshold) {

            this.successThreshold = successThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder tcpSocket(@Nullable AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocket tcpSocket) {

            this.tcpSocket = tcpSocket;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {

            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        public AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe build() {
            final var _resultValue = new AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbe();
            _resultValue.exec = exec;
            _resultValue.failureThreshold = failureThreshold;
            _resultValue.grpc = grpc;
            _resultValue.httpGet = httpGet;
            _resultValue.initialDelaySeconds = initialDelaySeconds;
            _resultValue.periodSeconds = periodSeconds;
            _resultValue.successThreshold = successThreshold;
            _resultValue.tcpSocket = tcpSocket;
            _resultValue.timeoutSeconds = timeoutSeconds;
            return _resultValue;
        }
    }
}
