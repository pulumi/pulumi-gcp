// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmwareAdminClusterVcenterArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmwareAdminClusterVcenterArgs Empty = new VmwareAdminClusterVcenterArgs();

    /**
     * The vCenter IP address.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The vCenter IP address.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Contains the vCenter CA certificate public key for SSL verification.
     * 
     */
    @Import(name="caCertData")
    private @Nullable Output<String> caCertData;

    /**
     * @return Contains the vCenter CA certificate public key for SSL verification.
     * 
     */
    public Optional<Output<String>> caCertData() {
        return Optional.ofNullable(this.caCertData);
    }

    /**
     * The name of the vCenter cluster for the admin cluster.
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return The name of the vCenter cluster for the admin cluster.
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * The name of the virtual machine disk (VMDK) for the admin cluster.
     * 
     */
    @Import(name="dataDisk")
    private @Nullable Output<String> dataDisk;

    /**
     * @return The name of the virtual machine disk (VMDK) for the admin cluster.
     * 
     */
    public Optional<Output<String>> dataDisk() {
        return Optional.ofNullable(this.dataDisk);
    }

    /**
     * The name of the vCenter datacenter for the admin cluster.
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return The name of the vCenter datacenter for the admin cluster.
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * The name of the vCenter datastore for the admin cluster.
     * 
     */
    @Import(name="datastore")
    private @Nullable Output<String> datastore;

    /**
     * @return The name of the vCenter datastore for the admin cluster.
     * 
     */
    public Optional<Output<String>> datastore() {
        return Optional.ofNullable(this.datastore);
    }

    /**
     * The name of the vCenter folder for the admin cluster.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The name of the vCenter folder for the admin cluster.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The name of the vCenter resource pool for the admin cluster.
     * 
     */
    @Import(name="resourcePool")
    private @Nullable Output<String> resourcePool;

    /**
     * @return The name of the vCenter resource pool for the admin cluster.
     * 
     */
    public Optional<Output<String>> resourcePool() {
        return Optional.ofNullable(this.resourcePool);
    }

    /**
     * The name of the vCenter storage policy for the user cluster.
     * 
     */
    @Import(name="storagePolicyName")
    private @Nullable Output<String> storagePolicyName;

    /**
     * @return The name of the vCenter storage policy for the user cluster.
     * 
     */
    public Optional<Output<String>> storagePolicyName() {
        return Optional.ofNullable(this.storagePolicyName);
    }

    private VmwareAdminClusterVcenterArgs() {}

    private VmwareAdminClusterVcenterArgs(VmwareAdminClusterVcenterArgs $) {
        this.address = $.address;
        this.caCertData = $.caCertData;
        this.cluster = $.cluster;
        this.dataDisk = $.dataDisk;
        this.datacenter = $.datacenter;
        this.datastore = $.datastore;
        this.folder = $.folder;
        this.resourcePool = $.resourcePool;
        this.storagePolicyName = $.storagePolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareAdminClusterVcenterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareAdminClusterVcenterArgs $;

        public Builder() {
            $ = new VmwareAdminClusterVcenterArgs();
        }

        public Builder(VmwareAdminClusterVcenterArgs defaults) {
            $ = new VmwareAdminClusterVcenterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The vCenter IP address.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The vCenter IP address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param caCertData Contains the vCenter CA certificate public key for SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder caCertData(@Nullable Output<String> caCertData) {
            $.caCertData = caCertData;
            return this;
        }

        /**
         * @param caCertData Contains the vCenter CA certificate public key for SSL verification.
         * 
         * @return builder
         * 
         */
        public Builder caCertData(String caCertData) {
            return caCertData(Output.of(caCertData));
        }

        /**
         * @param cluster The name of the vCenter cluster for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The name of the vCenter cluster for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param dataDisk The name of the virtual machine disk (VMDK) for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataDisk(@Nullable Output<String> dataDisk) {
            $.dataDisk = dataDisk;
            return this;
        }

        /**
         * @param dataDisk The name of the virtual machine disk (VMDK) for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder dataDisk(String dataDisk) {
            return dataDisk(Output.of(dataDisk));
        }

        /**
         * @param datacenter The name of the vCenter datacenter for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter The name of the vCenter datacenter for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param datastore The name of the vCenter datastore for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder datastore(@Nullable Output<String> datastore) {
            $.datastore = datastore;
            return this;
        }

        /**
         * @param datastore The name of the vCenter datastore for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder datastore(String datastore) {
            return datastore(Output.of(datastore));
        }

        /**
         * @param folder The name of the vCenter folder for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The name of the vCenter folder for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param resourcePool The name of the vCenter resource pool for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourcePool(@Nullable Output<String> resourcePool) {
            $.resourcePool = resourcePool;
            return this;
        }

        /**
         * @param resourcePool The name of the vCenter resource pool for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourcePool(String resourcePool) {
            return resourcePool(Output.of(resourcePool));
        }

        /**
         * @param storagePolicyName The name of the vCenter storage policy for the user cluster.
         * 
         * @return builder
         * 
         */
        public Builder storagePolicyName(@Nullable Output<String> storagePolicyName) {
            $.storagePolicyName = storagePolicyName;
            return this;
        }

        /**
         * @param storagePolicyName The name of the vCenter storage policy for the user cluster.
         * 
         * @return builder
         * 
         */
        public Builder storagePolicyName(String storagePolicyName) {
            return storagePolicyName(Output.of(storagePolicyName));
        }

        public VmwareAdminClusterVcenterArgs build() {
            return $;
        }
    }

}
