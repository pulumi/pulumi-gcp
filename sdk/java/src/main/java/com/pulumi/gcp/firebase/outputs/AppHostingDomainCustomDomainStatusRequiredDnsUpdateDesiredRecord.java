// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppHostingDomainCustomDomainStatusRequiredDnsUpdateDesiredRecord {
    /**
     * @return (Output)
     * The domain the record pertains to, e.g. `foo.bar.com.`.
     * 
     */
    private @Nullable String domainName;
    /**
     * @return (Output)
     * The data of the record. The meaning of the value depends on record type:
     * - A and AAAA: IP addresses for the domain.
     * - CNAME: Another domain to check for records.
     * - TXT: Arbitrary text strings associated with the domain. App Hosting
     *   uses TXT records to determine which Firebase projects have
     *   permission to act on the domain&#39;s behalf.
     * - CAA: The record&#39;s flags, tag, and value, e.g. `0 issue &#34;pki.goog&#34;`.
     * 
     */
    private @Nullable String rdata;
    /**
     * @return (Output)
     * An enum that indicates which state(s) this DNS record applies to. Populated
     * for all records with an `ADD` or `REMOVE` required action.
     * 
     */
    private @Nullable List<String> relevantStates;
    /**
     * @return (Output)
     * An enum that indicates the a required action for this record. Populated
     * when the record is part of a required change in a  `DnsUpdates`
     * `discovered` or `desired` record set.
     * Possible values:
     * NONE
     * ADD
     * REMOVE
     * 
     */
    private @Nullable String requiredAction;
    /**
     * @return (Output)
     * The record&#39;s type, which determines what data the record contains.
     * Possible values:
     * A
     * CNAME
     * TXT
     * AAAA
     * CAA
     * 
     */
    private @Nullable String type;

    private AppHostingDomainCustomDomainStatusRequiredDnsUpdateDesiredRecord() {}
    /**
     * @return (Output)
     * The domain the record pertains to, e.g. `foo.bar.com.`.
     * 
     */
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }
    /**
     * @return (Output)
     * The data of the record. The meaning of the value depends on record type:
     * - A and AAAA: IP addresses for the domain.
     * - CNAME: Another domain to check for records.
     * - TXT: Arbitrary text strings associated with the domain. App Hosting
     *   uses TXT records to determine which Firebase projects have
     *   permission to act on the domain&#39;s behalf.
     * - CAA: The record&#39;s flags, tag, and value, e.g. `0 issue &#34;pki.goog&#34;`.
     * 
     */
    public Optional<String> rdata() {
        return Optional.ofNullable(this.rdata);
    }
    /**
     * @return (Output)
     * An enum that indicates which state(s) this DNS record applies to. Populated
     * for all records with an `ADD` or `REMOVE` required action.
     * 
     */
    public List<String> relevantStates() {
        return this.relevantStates == null ? List.of() : this.relevantStates;
    }
    /**
     * @return (Output)
     * An enum that indicates the a required action for this record. Populated
     * when the record is part of a required change in a  `DnsUpdates`
     * `discovered` or `desired` record set.
     * Possible values:
     * NONE
     * ADD
     * REMOVE
     * 
     */
    public Optional<String> requiredAction() {
        return Optional.ofNullable(this.requiredAction);
    }
    /**
     * @return (Output)
     * The record&#39;s type, which determines what data the record contains.
     * Possible values:
     * A
     * CNAME
     * TXT
     * AAAA
     * CAA
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppHostingDomainCustomDomainStatusRequiredDnsUpdateDesiredRecord defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String domainName;
        private @Nullable String rdata;
        private @Nullable List<String> relevantStates;
        private @Nullable String requiredAction;
        private @Nullable String type;
        public Builder() {}
        public Builder(AppHostingDomainCustomDomainStatusRequiredDnsUpdateDesiredRecord defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.rdata = defaults.rdata;
    	      this.relevantStates = defaults.relevantStates;
    	      this.requiredAction = defaults.requiredAction;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder domainName(@Nullable String domainName) {

            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder rdata(@Nullable String rdata) {

            this.rdata = rdata;
            return this;
        }
        @CustomType.Setter
        public Builder relevantStates(@Nullable List<String> relevantStates) {

            this.relevantStates = relevantStates;
            return this;
        }
        public Builder relevantStates(String... relevantStates) {
            return relevantStates(List.of(relevantStates));
        }
        @CustomType.Setter
        public Builder requiredAction(@Nullable String requiredAction) {

            this.requiredAction = requiredAction;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public AppHostingDomainCustomDomainStatusRequiredDnsUpdateDesiredRecord build() {
            final var _resultValue = new AppHostingDomainCustomDomainStatusRequiredDnsUpdateDesiredRecord();
            _resultValue.domainName = domainName;
            _resultValue.rdata = rdata;
            _resultValue.relevantStates = relevantStates;
            _resultValue.requiredAction = requiredAction;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
