// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs Empty = new RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs();

    /**
     * The frontend IP address of the load balancer.
     * 
     */
    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    /**
     * @return The frontend IP address of the load balancer.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    /**
     * The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: [&#34;tcp&#34;, &#34;udp&#34;]
     * 
     */
    @Import(name="ipProtocol", required=true)
    private Output<String> ipProtocol;

    /**
     * @return The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: [&#34;tcp&#34;, &#34;udp&#34;]
     * 
     */
    public Output<String> ipProtocol() {
        return this.ipProtocol;
    }

    /**
     * The type of load balancer. This value is case-sensitive. Possible values: [&#34;regionalL4ilb&#34;]
     * 
     */
    @Import(name="loadBalancerType", required=true)
    private Output<String> loadBalancerType;

    /**
     * @return The type of load balancer. This value is case-sensitive. Possible values: [&#34;regionalL4ilb&#34;]
     * 
     */
    public Output<String> loadBalancerType() {
        return this.loadBalancerType;
    }

    /**
     * The fully qualified url of the network in which the load balancer belongs. This should be formatted like `projects/{project}/global/networks/{network}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`.
     * 
     */
    @Import(name="networkUrl", required=true)
    private Output<String> networkUrl;

    /**
     * @return The fully qualified url of the network in which the load balancer belongs. This should be formatted like `projects/{project}/global/networks/{network}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`.
     * 
     */
    public Output<String> networkUrl() {
        return this.networkUrl;
    }

    /**
     * The configured port of the load balancer.
     * 
     */
    @Import(name="port", required=true)
    private Output<String> port;

    /**
     * @return The configured port of the load balancer.
     * 
     */
    public Output<String> port() {
        return this.port;
    }

    /**
     * The ID of the project in which the load balancer belongs.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The ID of the project in which the load balancer belongs.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The region of the load balancer. Only needed for regional load balancers.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the load balancer. Only needed for regional load balancers.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs() {}

    private RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs(RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs $) {
        this.ipAddress = $.ipAddress;
        this.ipProtocol = $.ipProtocol;
        this.loadBalancerType = $.loadBalancerType;
        this.networkUrl = $.networkUrl;
        this.port = $.port;
        this.project = $.project;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs $;

        public Builder() {
            $ = new RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs();
        }

        public Builder(RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs defaults) {
            $ = new RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress The frontend IP address of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The frontend IP address of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipProtocol The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: [&#34;tcp&#34;, &#34;udp&#34;]
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The configured IP protocol of the load balancer. This value is case-sensitive. Possible values: [&#34;tcp&#34;, &#34;udp&#34;]
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param loadBalancerType The type of load balancer. This value is case-sensitive. Possible values: [&#34;regionalL4ilb&#34;]
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(Output<String> loadBalancerType) {
            $.loadBalancerType = loadBalancerType;
            return this;
        }

        /**
         * @param loadBalancerType The type of load balancer. This value is case-sensitive. Possible values: [&#34;regionalL4ilb&#34;]
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(String loadBalancerType) {
            return loadBalancerType(Output.of(loadBalancerType));
        }

        /**
         * @param networkUrl The fully qualified url of the network in which the load balancer belongs. This should be formatted like `projects/{project}/global/networks/{network}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`.
         * 
         * @return builder
         * 
         */
        public Builder networkUrl(Output<String> networkUrl) {
            $.networkUrl = networkUrl;
            return this;
        }

        /**
         * @param networkUrl The fully qualified url of the network in which the load balancer belongs. This should be formatted like `projects/{project}/global/networks/{network}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`.
         * 
         * @return builder
         * 
         */
        public Builder networkUrl(String networkUrl) {
            return networkUrl(Output.of(networkUrl));
        }

        /**
         * @param port The configured port of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The configured port of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param project The ID of the project in which the load balancer belongs.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the load balancer belongs.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The region of the load balancer. Only needed for regional load balancers.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the load balancer. Only needed for regional load balancers.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public RecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancerArgs build() {
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.ipProtocol = Objects.requireNonNull($.ipProtocol, "expected parameter 'ipProtocol' to be non-null");
            $.loadBalancerType = Objects.requireNonNull($.loadBalancerType, "expected parameter 'loadBalancerType' to be non-null");
            $.networkUrl = Objects.requireNonNull($.networkUrl, "expected parameter 'networkUrl' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
