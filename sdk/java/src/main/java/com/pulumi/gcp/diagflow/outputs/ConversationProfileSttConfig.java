// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConversationProfileSttConfig {
    /**
     * @return Audio encoding of the audio content to process.
     * Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
     * 
     */
    private @Nullable String audioEncoding;
    /**
     * @return If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
     * 
     */
    private @Nullable Boolean enableWordInfo;
    /**
     * @return The language of the supplied audio.
     * 
     */
    private @Nullable String languageCode;
    /**
     * @return Which Speech model to select.
     * Leave this field unspecified to use Agent Speech settings for model selection.
     * 
     */
    private @Nullable String model;
    /**
     * @return Sample rate (in Hertz) of the audio content sent in the query.
     * 
     */
    private @Nullable Integer sampleRateHertz;
    /**
     * @return The speech model used in speech to text.
     * Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
     * 
     */
    private @Nullable String speechModelVariant;
    /**
     * @return Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
     * 
     */
    private @Nullable Boolean useTimeoutBasedEndpointing;

    private ConversationProfileSttConfig() {}
    /**
     * @return Audio encoding of the audio content to process.
     * Possible values are: `AUDIO_ENCODING_UNSPECIFIED`, `AUDIO_ENCODING_LINEAR_16`, `AUDIO_ENCODING_FLAC`, `AUDIO_ENCODING_MULAW`, `AUDIO_ENCODING_AMR`, `AUDIO_ENCODING_AMR_WB`, `AUDIO_ENCODING_OGG_OPUS`, `AUDIOENCODING_SPEEX_WITH_HEADER_BYTE`.
     * 
     */
    public Optional<String> audioEncoding() {
        return Optional.ofNullable(this.audioEncoding);
    }
    /**
     * @return If true, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words.
     * 
     */
    public Optional<Boolean> enableWordInfo() {
        return Optional.ofNullable(this.enableWordInfo);
    }
    /**
     * @return The language of the supplied audio.
     * 
     */
    public Optional<String> languageCode() {
        return Optional.ofNullable(this.languageCode);
    }
    /**
     * @return Which Speech model to select.
     * Leave this field unspecified to use Agent Speech settings for model selection.
     * 
     */
    public Optional<String> model() {
        return Optional.ofNullable(this.model);
    }
    /**
     * @return Sample rate (in Hertz) of the audio content sent in the query.
     * 
     */
    public Optional<Integer> sampleRateHertz() {
        return Optional.ofNullable(this.sampleRateHertz);
    }
    /**
     * @return The speech model used in speech to text.
     * Possible values are: `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE`, `USE_STANDARD`, `USE_ENHANCED`.
     * 
     */
    public Optional<String> speechModelVariant() {
        return Optional.ofNullable(this.speechModelVariant);
    }
    /**
     * @return Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
     * 
     */
    public Optional<Boolean> useTimeoutBasedEndpointing() {
        return Optional.ofNullable(this.useTimeoutBasedEndpointing);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConversationProfileSttConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String audioEncoding;
        private @Nullable Boolean enableWordInfo;
        private @Nullable String languageCode;
        private @Nullable String model;
        private @Nullable Integer sampleRateHertz;
        private @Nullable String speechModelVariant;
        private @Nullable Boolean useTimeoutBasedEndpointing;
        public Builder() {}
        public Builder(ConversationProfileSttConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioEncoding = defaults.audioEncoding;
    	      this.enableWordInfo = defaults.enableWordInfo;
    	      this.languageCode = defaults.languageCode;
    	      this.model = defaults.model;
    	      this.sampleRateHertz = defaults.sampleRateHertz;
    	      this.speechModelVariant = defaults.speechModelVariant;
    	      this.useTimeoutBasedEndpointing = defaults.useTimeoutBasedEndpointing;
        }

        @CustomType.Setter
        public Builder audioEncoding(@Nullable String audioEncoding) {

            this.audioEncoding = audioEncoding;
            return this;
        }
        @CustomType.Setter
        public Builder enableWordInfo(@Nullable Boolean enableWordInfo) {

            this.enableWordInfo = enableWordInfo;
            return this;
        }
        @CustomType.Setter
        public Builder languageCode(@Nullable String languageCode) {

            this.languageCode = languageCode;
            return this;
        }
        @CustomType.Setter
        public Builder model(@Nullable String model) {

            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder sampleRateHertz(@Nullable Integer sampleRateHertz) {

            this.sampleRateHertz = sampleRateHertz;
            return this;
        }
        @CustomType.Setter
        public Builder speechModelVariant(@Nullable String speechModelVariant) {

            this.speechModelVariant = speechModelVariant;
            return this;
        }
        @CustomType.Setter
        public Builder useTimeoutBasedEndpointing(@Nullable Boolean useTimeoutBasedEndpointing) {

            this.useTimeoutBasedEndpointing = useTimeoutBasedEndpointing;
            return this;
        }
        public ConversationProfileSttConfig build() {
            final var _resultValue = new ConversationProfileSttConfig();
            _resultValue.audioEncoding = audioEncoding;
            _resultValue.enableWordInfo = enableWordInfo;
            _resultValue.languageCode = languageCode;
            _resultValue.model = model;
            _resultValue.sampleRateHertz = sampleRateHertz;
            _resultValue.speechModelVariant = speechModelVariant;
            _resultValue.useTimeoutBasedEndpointing = useTimeoutBasedEndpointing;
            return _resultValue;
        }
    }
}
