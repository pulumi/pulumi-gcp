// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingActiveDirectoryConfig;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingAdvancedMachineFeature;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingBackupConfiguration;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingDataCacheConfig;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingDatabaseFlag;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingDenyMaintenancePeriod;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingInsightsConfig;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingIpConfiguration;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingLocationPreference;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingMaintenanceWindow;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingPasswordValidationPolicy;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstanceSettingSqlServerAuditConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceSetting {
    /**
     * @return This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
     * 
     */
    private String activationPolicy;
    private List<GetDatabaseInstanceSettingActiveDirectoryConfig> activeDirectoryConfigs;
    private List<GetDatabaseInstanceSettingAdvancedMachineFeature> advancedMachineFeatures;
    /**
     * @return The availability type of the Cloud SQL instance, high availability
     * (REGIONAL) or single zone (ZONAL). For all instances, ensure that
     * settings.backup_configuration.enabled is set to true.
     * For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
     * For Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
     * is set to true. Defaults to ZONAL.
     * 
     */
    private String availabilityType;
    private List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations;
    /**
     * @return The name of server instance collation.
     * 
     */
    private String collation;
    /**
     * @return Specifies if connections must use Cloud SQL connectors.
     * 
     */
    private String connectorEnforcement;
    /**
     * @return Data cache configurations.
     * 
     */
    private List<GetDatabaseInstanceSettingDataCacheConfig> dataCacheConfigs;
    private List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags;
    /**
     * @return Configuration to protect against accidental instance deletion.
     * 
     */
    private Boolean deletionProtectionEnabled;
    private List<GetDatabaseInstanceSettingDenyMaintenancePeriod> denyMaintenancePeriods;
    /**
     * @return Enables auto-resizing of the storage size. Defaults to true.
     * 
     */
    private Boolean diskAutoresize;
    /**
     * @return The maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    private Integer diskAutoresizeLimit;
    /**
     * @return The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
     * 
     */
    private Integer diskSize;
    /**
     * @return The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
     * 
     */
    private String diskType;
    /**
     * @return The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
     * 
     */
    private String edition;
    /**
     * @return Configuration of Query Insights.
     * 
     */
    private List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs;
    private List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations;
    private List<GetDatabaseInstanceSettingLocationPreference> locationPreferences;
    /**
     * @return Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
     * 
     */
    private List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows;
    private List<GetDatabaseInstanceSettingPasswordValidationPolicy> passwordValidationPolicies;
    /**
     * @return Pricing plan for this instance, can only be PER_USE.
     * 
     */
    private String pricingPlan;
    private List<GetDatabaseInstanceSettingSqlServerAuditConfig> sqlServerAuditConfigs;
    /**
     * @return The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
     * 
     */
    private String tier;
    /**
     * @return The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
     * 
     */
    private String timeZone;
    /**
     * @return A set of key/value user label pairs to assign to the instance.
     * 
     */
    private Map<String,String> userLabels;
    /**
     * @return Used to make sure changes to the settings block are atomic.
     * 
     */
    private Integer version;

    private GetDatabaseInstanceSetting() {}
    /**
     * @return This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
     * 
     */
    public String activationPolicy() {
        return this.activationPolicy;
    }
    public List<GetDatabaseInstanceSettingActiveDirectoryConfig> activeDirectoryConfigs() {
        return this.activeDirectoryConfigs;
    }
    public List<GetDatabaseInstanceSettingAdvancedMachineFeature> advancedMachineFeatures() {
        return this.advancedMachineFeatures;
    }
    /**
     * @return The availability type of the Cloud SQL instance, high availability
     * (REGIONAL) or single zone (ZONAL). For all instances, ensure that
     * settings.backup_configuration.enabled is set to true.
     * For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
     * For Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
     * is set to true. Defaults to ZONAL.
     * 
     */
    public String availabilityType() {
        return this.availabilityType;
    }
    public List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations() {
        return this.backupConfigurations;
    }
    /**
     * @return The name of server instance collation.
     * 
     */
    public String collation() {
        return this.collation;
    }
    /**
     * @return Specifies if connections must use Cloud SQL connectors.
     * 
     */
    public String connectorEnforcement() {
        return this.connectorEnforcement;
    }
    /**
     * @return Data cache configurations.
     * 
     */
    public List<GetDatabaseInstanceSettingDataCacheConfig> dataCacheConfigs() {
        return this.dataCacheConfigs;
    }
    public List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags() {
        return this.databaseFlags;
    }
    /**
     * @return Configuration to protect against accidental instance deletion.
     * 
     */
    public Boolean deletionProtectionEnabled() {
        return this.deletionProtectionEnabled;
    }
    public List<GetDatabaseInstanceSettingDenyMaintenancePeriod> denyMaintenancePeriods() {
        return this.denyMaintenancePeriods;
    }
    /**
     * @return Enables auto-resizing of the storage size. Defaults to true.
     * 
     */
    public Boolean diskAutoresize() {
        return this.diskAutoresize;
    }
    /**
     * @return The maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    public Integer diskAutoresizeLimit() {
        return this.diskAutoresizeLimit;
    }
    /**
     * @return The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
     * 
     */
    public Integer diskSize() {
        return this.diskSize;
    }
    /**
     * @return The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
     * 
     */
    public String edition() {
        return this.edition;
    }
    /**
     * @return Configuration of Query Insights.
     * 
     */
    public List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs() {
        return this.insightsConfigs;
    }
    public List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations() {
        return this.ipConfigurations;
    }
    public List<GetDatabaseInstanceSettingLocationPreference> locationPreferences() {
        return this.locationPreferences;
    }
    /**
     * @return Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
     * 
     */
    public List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    public List<GetDatabaseInstanceSettingPasswordValidationPolicy> passwordValidationPolicies() {
        return this.passwordValidationPolicies;
    }
    /**
     * @return Pricing plan for this instance, can only be PER_USE.
     * 
     */
    public String pricingPlan() {
        return this.pricingPlan;
    }
    public List<GetDatabaseInstanceSettingSqlServerAuditConfig> sqlServerAuditConfigs() {
        return this.sqlServerAuditConfigs;
    }
    /**
     * @return The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
     * 
     */
    public String tier() {
        return this.tier;
    }
    /**
     * @return The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return A set of key/value user label pairs to assign to the instance.
     * 
     */
    public Map<String,String> userLabels() {
        return this.userLabels;
    }
    /**
     * @return Used to make sure changes to the settings block are atomic.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activationPolicy;
        private List<GetDatabaseInstanceSettingActiveDirectoryConfig> activeDirectoryConfigs;
        private List<GetDatabaseInstanceSettingAdvancedMachineFeature> advancedMachineFeatures;
        private String availabilityType;
        private List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations;
        private String collation;
        private String connectorEnforcement;
        private List<GetDatabaseInstanceSettingDataCacheConfig> dataCacheConfigs;
        private List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags;
        private Boolean deletionProtectionEnabled;
        private List<GetDatabaseInstanceSettingDenyMaintenancePeriod> denyMaintenancePeriods;
        private Boolean diskAutoresize;
        private Integer diskAutoresizeLimit;
        private Integer diskSize;
        private String diskType;
        private String edition;
        private List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs;
        private List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations;
        private List<GetDatabaseInstanceSettingLocationPreference> locationPreferences;
        private List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows;
        private List<GetDatabaseInstanceSettingPasswordValidationPolicy> passwordValidationPolicies;
        private String pricingPlan;
        private List<GetDatabaseInstanceSettingSqlServerAuditConfig> sqlServerAuditConfigs;
        private String tier;
        private String timeZone;
        private Map<String,String> userLabels;
        private Integer version;
        public Builder() {}
        public Builder(GetDatabaseInstanceSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.activeDirectoryConfigs = defaults.activeDirectoryConfigs;
    	      this.advancedMachineFeatures = defaults.advancedMachineFeatures;
    	      this.availabilityType = defaults.availabilityType;
    	      this.backupConfigurations = defaults.backupConfigurations;
    	      this.collation = defaults.collation;
    	      this.connectorEnforcement = defaults.connectorEnforcement;
    	      this.dataCacheConfigs = defaults.dataCacheConfigs;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.deletionProtectionEnabled = defaults.deletionProtectionEnabled;
    	      this.denyMaintenancePeriods = defaults.denyMaintenancePeriods;
    	      this.diskAutoresize = defaults.diskAutoresize;
    	      this.diskAutoresizeLimit = defaults.diskAutoresizeLimit;
    	      this.diskSize = defaults.diskSize;
    	      this.diskType = defaults.diskType;
    	      this.edition = defaults.edition;
    	      this.insightsConfigs = defaults.insightsConfigs;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.locationPreferences = defaults.locationPreferences;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.passwordValidationPolicies = defaults.passwordValidationPolicies;
    	      this.pricingPlan = defaults.pricingPlan;
    	      this.sqlServerAuditConfigs = defaults.sqlServerAuditConfigs;
    	      this.tier = defaults.tier;
    	      this.timeZone = defaults.timeZone;
    	      this.userLabels = defaults.userLabels;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder activationPolicy(String activationPolicy) {
            if (activationPolicy == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "activationPolicy");
            }
            this.activationPolicy = activationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder activeDirectoryConfigs(List<GetDatabaseInstanceSettingActiveDirectoryConfig> activeDirectoryConfigs) {
            if (activeDirectoryConfigs == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "activeDirectoryConfigs");
            }
            this.activeDirectoryConfigs = activeDirectoryConfigs;
            return this;
        }
        public Builder activeDirectoryConfigs(GetDatabaseInstanceSettingActiveDirectoryConfig... activeDirectoryConfigs) {
            return activeDirectoryConfigs(List.of(activeDirectoryConfigs));
        }
        @CustomType.Setter
        public Builder advancedMachineFeatures(List<GetDatabaseInstanceSettingAdvancedMachineFeature> advancedMachineFeatures) {
            if (advancedMachineFeatures == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "advancedMachineFeatures");
            }
            this.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }
        public Builder advancedMachineFeatures(GetDatabaseInstanceSettingAdvancedMachineFeature... advancedMachineFeatures) {
            return advancedMachineFeatures(List.of(advancedMachineFeatures));
        }
        @CustomType.Setter
        public Builder availabilityType(String availabilityType) {
            if (availabilityType == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "availabilityType");
            }
            this.availabilityType = availabilityType;
            return this;
        }
        @CustomType.Setter
        public Builder backupConfigurations(List<GetDatabaseInstanceSettingBackupConfiguration> backupConfigurations) {
            if (backupConfigurations == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "backupConfigurations");
            }
            this.backupConfigurations = backupConfigurations;
            return this;
        }
        public Builder backupConfigurations(GetDatabaseInstanceSettingBackupConfiguration... backupConfigurations) {
            return backupConfigurations(List.of(backupConfigurations));
        }
        @CustomType.Setter
        public Builder collation(String collation) {
            if (collation == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "collation");
            }
            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder connectorEnforcement(String connectorEnforcement) {
            if (connectorEnforcement == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "connectorEnforcement");
            }
            this.connectorEnforcement = connectorEnforcement;
            return this;
        }
        @CustomType.Setter
        public Builder dataCacheConfigs(List<GetDatabaseInstanceSettingDataCacheConfig> dataCacheConfigs) {
            if (dataCacheConfigs == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "dataCacheConfigs");
            }
            this.dataCacheConfigs = dataCacheConfigs;
            return this;
        }
        public Builder dataCacheConfigs(GetDatabaseInstanceSettingDataCacheConfig... dataCacheConfigs) {
            return dataCacheConfigs(List.of(dataCacheConfigs));
        }
        @CustomType.Setter
        public Builder databaseFlags(List<GetDatabaseInstanceSettingDatabaseFlag> databaseFlags) {
            if (databaseFlags == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "databaseFlags");
            }
            this.databaseFlags = databaseFlags;
            return this;
        }
        public Builder databaseFlags(GetDatabaseInstanceSettingDatabaseFlag... databaseFlags) {
            return databaseFlags(List.of(databaseFlags));
        }
        @CustomType.Setter
        public Builder deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
            if (deletionProtectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "deletionProtectionEnabled");
            }
            this.deletionProtectionEnabled = deletionProtectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder denyMaintenancePeriods(List<GetDatabaseInstanceSettingDenyMaintenancePeriod> denyMaintenancePeriods) {
            if (denyMaintenancePeriods == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "denyMaintenancePeriods");
            }
            this.denyMaintenancePeriods = denyMaintenancePeriods;
            return this;
        }
        public Builder denyMaintenancePeriods(GetDatabaseInstanceSettingDenyMaintenancePeriod... denyMaintenancePeriods) {
            return denyMaintenancePeriods(List.of(denyMaintenancePeriods));
        }
        @CustomType.Setter
        public Builder diskAutoresize(Boolean diskAutoresize) {
            if (diskAutoresize == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "diskAutoresize");
            }
            this.diskAutoresize = diskAutoresize;
            return this;
        }
        @CustomType.Setter
        public Builder diskAutoresizeLimit(Integer diskAutoresizeLimit) {
            if (diskAutoresizeLimit == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "diskAutoresizeLimit");
            }
            this.diskAutoresizeLimit = diskAutoresizeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(Integer diskSize) {
            if (diskSize == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "diskSize");
            }
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder edition(String edition) {
            if (edition == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "edition");
            }
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder insightsConfigs(List<GetDatabaseInstanceSettingInsightsConfig> insightsConfigs) {
            if (insightsConfigs == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "insightsConfigs");
            }
            this.insightsConfigs = insightsConfigs;
            return this;
        }
        public Builder insightsConfigs(GetDatabaseInstanceSettingInsightsConfig... insightsConfigs) {
            return insightsConfigs(List.of(insightsConfigs));
        }
        @CustomType.Setter
        public Builder ipConfigurations(List<GetDatabaseInstanceSettingIpConfiguration> ipConfigurations) {
            if (ipConfigurations == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "ipConfigurations");
            }
            this.ipConfigurations = ipConfigurations;
            return this;
        }
        public Builder ipConfigurations(GetDatabaseInstanceSettingIpConfiguration... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }
        @CustomType.Setter
        public Builder locationPreferences(List<GetDatabaseInstanceSettingLocationPreference> locationPreferences) {
            if (locationPreferences == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "locationPreferences");
            }
            this.locationPreferences = locationPreferences;
            return this;
        }
        public Builder locationPreferences(GetDatabaseInstanceSettingLocationPreference... locationPreferences) {
            return locationPreferences(List.of(locationPreferences));
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetDatabaseInstanceSettingMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetDatabaseInstanceSettingMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder passwordValidationPolicies(List<GetDatabaseInstanceSettingPasswordValidationPolicy> passwordValidationPolicies) {
            if (passwordValidationPolicies == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "passwordValidationPolicies");
            }
            this.passwordValidationPolicies = passwordValidationPolicies;
            return this;
        }
        public Builder passwordValidationPolicies(GetDatabaseInstanceSettingPasswordValidationPolicy... passwordValidationPolicies) {
            return passwordValidationPolicies(List.of(passwordValidationPolicies));
        }
        @CustomType.Setter
        public Builder pricingPlan(String pricingPlan) {
            if (pricingPlan == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "pricingPlan");
            }
            this.pricingPlan = pricingPlan;
            return this;
        }
        @CustomType.Setter
        public Builder sqlServerAuditConfigs(List<GetDatabaseInstanceSettingSqlServerAuditConfig> sqlServerAuditConfigs) {
            if (sqlServerAuditConfigs == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "sqlServerAuditConfigs");
            }
            this.sqlServerAuditConfigs = sqlServerAuditConfigs;
            return this;
        }
        public Builder sqlServerAuditConfigs(GetDatabaseInstanceSettingSqlServerAuditConfig... sqlServerAuditConfigs) {
            return sqlServerAuditConfigs(List.of(sqlServerAuditConfigs));
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            if (tier == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "tier");
            }
            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder userLabels(Map<String,String> userLabels) {
            if (userLabels == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "userLabels");
            }
            this.userLabels = userLabels;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceSetting", "version");
            }
            this.version = version;
            return this;
        }
        public GetDatabaseInstanceSetting build() {
            final var _resultValue = new GetDatabaseInstanceSetting();
            _resultValue.activationPolicy = activationPolicy;
            _resultValue.activeDirectoryConfigs = activeDirectoryConfigs;
            _resultValue.advancedMachineFeatures = advancedMachineFeatures;
            _resultValue.availabilityType = availabilityType;
            _resultValue.backupConfigurations = backupConfigurations;
            _resultValue.collation = collation;
            _resultValue.connectorEnforcement = connectorEnforcement;
            _resultValue.dataCacheConfigs = dataCacheConfigs;
            _resultValue.databaseFlags = databaseFlags;
            _resultValue.deletionProtectionEnabled = deletionProtectionEnabled;
            _resultValue.denyMaintenancePeriods = denyMaintenancePeriods;
            _resultValue.diskAutoresize = diskAutoresize;
            _resultValue.diskAutoresizeLimit = diskAutoresizeLimit;
            _resultValue.diskSize = diskSize;
            _resultValue.diskType = diskType;
            _resultValue.edition = edition;
            _resultValue.insightsConfigs = insightsConfigs;
            _resultValue.ipConfigurations = ipConfigurations;
            _resultValue.locationPreferences = locationPreferences;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.passwordValidationPolicies = passwordValidationPolicies;
            _resultValue.pricingPlan = pricingPlan;
            _resultValue.sqlServerAuditConfigs = sqlServerAuditConfigs;
            _resultValue.tier = tier;
            _resultValue.timeZone = timeZone;
            _resultValue.userLabels = userLabels;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
