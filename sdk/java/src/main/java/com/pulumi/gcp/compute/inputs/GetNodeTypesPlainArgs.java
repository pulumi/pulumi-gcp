// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodeTypesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeTypesPlainArgs Empty = new GetNodeTypesPlainArgs();

    /**
     * ID of the project to list available node types for.
     * Should match the project the nodes of this type will be deployed to.
     * Defaults to the project that the provider is authenticated with.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return ID of the project to list available node types for.
     * Should match the project the nodes of this type will be deployed to.
     * Defaults to the project that the provider is authenticated with.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The zone to list node types for. Should be in zone of intended node groups and region of referencing node template. If `zone` is not specified, the provider-level zone must be set and is used
     * instead.
     * 
     */
    @Import(name="zone")
    private @Nullable String zone;

    /**
     * @return The zone to list node types for. Should be in zone of intended node groups and region of referencing node template. If `zone` is not specified, the provider-level zone must be set and is used
     * instead.
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    private GetNodeTypesPlainArgs() {}

    private GetNodeTypesPlainArgs(GetNodeTypesPlainArgs $) {
        this.project = $.project;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeTypesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeTypesPlainArgs $;

        public Builder() {
            $ = new GetNodeTypesPlainArgs();
        }

        public Builder(GetNodeTypesPlainArgs defaults) {
            $ = new GetNodeTypesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param project ID of the project to list available node types for.
         * Should match the project the nodes of this type will be deployed to.
         * Defaults to the project that the provider is authenticated with.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param zone The zone to list node types for. Should be in zone of intended node groups and region of referencing node template. If `zone` is not specified, the provider-level zone must be set and is used
         * instead.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable String zone) {
            $.zone = zone;
            return this;
        }

        public GetNodeTypesPlainArgs build() {
            return $;
        }
    }

}
