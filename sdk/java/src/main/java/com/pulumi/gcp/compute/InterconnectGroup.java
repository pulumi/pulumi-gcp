// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.InterconnectGroupArgs;
import com.pulumi.gcp.compute.inputs.InterconnectGroupState;
import com.pulumi.gcp.compute.outputs.InterconnectGroupConfigured;
import com.pulumi.gcp.compute.outputs.InterconnectGroupIntent;
import com.pulumi.gcp.compute.outputs.InterconnectGroupInterconnect;
import com.pulumi.gcp.compute.outputs.InterconnectGroupPhysicalStructure;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An interconnect group resource allows customers to create, analyze, and
 * expand their redundant connections.
 * 
 * To get more information about InterconnectGroup, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/interconnects)
 * * How-to Guides
 *     * [Create a Dedicated Interconnect](https://cloud.google.com/network-connectivity/docs/interconnect/concepts/dedicated-overview)
 * 
 * ## Example Usage
 * 
 * ### Interconnect Group Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.InterconnectGroup;
 * import com.pulumi.gcp.compute.InterconnectGroupArgs;
 * import com.pulumi.gcp.compute.inputs.InterconnectGroupIntentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example_interconnect_group = new InterconnectGroup("example-interconnect-group", InterconnectGroupArgs.builder()
 *             .name("example-interconnect-group")
 *             .intent(InterconnectGroupIntentArgs.builder()
 *                 .topologyCapability("NO_SLA")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * InterconnectGroup can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/global/interconnectGroups/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, InterconnectGroup can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/interconnectGroup:InterconnectGroup default projects/{{project}}/global/interconnectGroups/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/interconnectGroup:InterconnectGroup default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/interconnectGroup:InterconnectGroup default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/interconnectGroup:InterconnectGroup")
public class InterconnectGroup extends com.pulumi.resources.CustomResource {
    /**
     * The status of the group as configured. This has the same
     * structure as the operational field reported by the OperationalStatus
     * method, but does not take into account the operational status of each
     * resource.
     * Structure is documented below.
     * 
     */
    @Export(name="configureds", refs={List.class,InterconnectGroupConfigured.class}, tree="[0,1]")
    private Output<List<InterconnectGroupConfigured>> configureds;

    /**
     * @return The status of the group as configured. This has the same
     * structure as the operational field reported by the OperationalStatus
     * method, but does not take into account the operational status of each
     * resource.
     * Structure is documented below.
     * 
     */
    public Output<List<InterconnectGroupConfigured>> configureds() {
        return this.configureds;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The user&#39;s intent for this group. This is the only required field besides
     * the name that must be specified on group creation.
     * Structure is documented below.
     * 
     */
    @Export(name="intent", refs={InterconnectGroupIntent.class}, tree="[0]")
    private Output<InterconnectGroupIntent> intent;

    /**
     * @return The user&#39;s intent for this group. This is the only required field besides
     * the name that must be specified on group creation.
     * Structure is documented below.
     * 
     */
    public Output<InterconnectGroupIntent> intent() {
        return this.intent;
    }
    /**
     * Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
     * strings. Users are encouraged, but not required, to use their preferred
     * format for resource links as keys.
     * Note that there are add-members and remove-members methods in gcloud.
     * The size of this map is limited by an &#34;Interconnects per group&#34; quota.
     * Structure is documented below.
     * 
     */
    @Export(name="interconnects", refs={List.class,InterconnectGroupInterconnect.class}, tree="[0,1]")
    private Output</* @Nullable */ List<InterconnectGroupInterconnect>> interconnects;

    /**
     * @return Interconnects in the InterconnectGroup. Keys are arbitrary user-specified
     * strings. Users are encouraged, but not required, to use their preferred
     * format for resource links as keys.
     * Note that there are add-members and remove-members methods in gcloud.
     * The size of this map is limited by an &#34;Interconnects per group&#34; quota.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<InterconnectGroupInterconnect>>> interconnects() {
        return Codegen.optional(this.interconnects);
    }
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * An analysis of the physical layout of Interconnects in this
     * group. Every Interconnect in the group is shown once in this structure.
     * Structure is documented below.
     * 
     */
    @Export(name="physicalStructures", refs={List.class,InterconnectGroupPhysicalStructure.class}, tree="[0,1]")
    private Output<List<InterconnectGroupPhysicalStructure>> physicalStructures;

    /**
     * @return An analysis of the physical layout of Interconnects in this
     * group. Every Interconnect in the group is shown once in this structure.
     * Structure is documented below.
     * 
     */
    public Output<List<InterconnectGroupPhysicalStructure>> physicalStructures() {
        return this.physicalStructures;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InterconnectGroup(java.lang.String name) {
        this(name, InterconnectGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InterconnectGroup(java.lang.String name, InterconnectGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InterconnectGroup(java.lang.String name, InterconnectGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/interconnectGroup:InterconnectGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private InterconnectGroup(java.lang.String name, Output<java.lang.String> id, @Nullable InterconnectGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/interconnectGroup:InterconnectGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static InterconnectGroupArgs makeArgs(InterconnectGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InterconnectGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InterconnectGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable InterconnectGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InterconnectGroup(name, id, state, options);
    }
}
