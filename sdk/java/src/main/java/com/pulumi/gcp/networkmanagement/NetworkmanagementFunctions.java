// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkmanagement;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunArgs;
import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunPlainArgs;
import com.pulumi.gcp.networkmanagement.outputs.GetConnectivityTestRunResult;
import java.util.concurrent.CompletableFuture;

public final class NetworkmanagementFunctions {
    /**
     * !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
     * 
     * A connectivity test is a static analysis of your resource configurations
     * that enables you to evaluate connectivity to and from Google Cloud
     * resources in your Virtual Private Cloud (VPC) network. This data source allows
     * you to trigger a rerun operation on a connectivity test and return the results.
     * 
     * To get more information about connectivity tests, see:
     * 
     * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
     * 
     * ## Example Usage
     * 
     * ### Network Management Connectivity Test Run Instances
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.compute.Network;
     * import com.pulumi.gcp.compute.NetworkArgs;
     * import com.pulumi.gcp.compute.ComputeFunctions;
     * import com.pulumi.gcp.compute.inputs.GetImageArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTest;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestSourceArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestDestinationArgs;
     * import com.pulumi.gcp.networkmanagement.NetworkmanagementFunctions;
     * import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var vpc = new Network("vpc", NetworkArgs.builder()
     *             .name("conn-test-net")
     *             .build());
     * 
     *         final var debian9 = ComputeFunctions.getImage(GetImageArgs.builder()
     *             .family("debian-11")
     *             .project("debian-cloud")
     *             .build());
     * 
     *         var source = new Instance("source", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("source-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var destination = new Instance("destination", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("dest-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var instance_test = new ConnectivityTest("instance-test", ConnectivityTestArgs.builder()
     *             .name("conn-test-instances")
     *             .source(ConnectivityTestSourceArgs.builder()
     *                 .instance(source.id())
     *                 .build())
     *             .destination(ConnectivityTestDestinationArgs.builder()
     *                 .instance(destination.id())
     *                 .build())
     *             .protocol("TCP")
     *             .labels(Map.of("env", "test"))
     *             .build());
     * 
     *         final var instance-test-run = NetworkmanagementFunctions.getConnectivityTestRun(GetConnectivityTestRunArgs.builder()
     *             .name(instance_test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectivityTestRunResult> getConnectivityTestRun(GetConnectivityTestRunArgs args) {
        return getConnectivityTestRun(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
     * 
     * A connectivity test is a static analysis of your resource configurations
     * that enables you to evaluate connectivity to and from Google Cloud
     * resources in your Virtual Private Cloud (VPC) network. This data source allows
     * you to trigger a rerun operation on a connectivity test and return the results.
     * 
     * To get more information about connectivity tests, see:
     * 
     * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
     * 
     * ## Example Usage
     * 
     * ### Network Management Connectivity Test Run Instances
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.compute.Network;
     * import com.pulumi.gcp.compute.NetworkArgs;
     * import com.pulumi.gcp.compute.ComputeFunctions;
     * import com.pulumi.gcp.compute.inputs.GetImageArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTest;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestSourceArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestDestinationArgs;
     * import com.pulumi.gcp.networkmanagement.NetworkmanagementFunctions;
     * import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var vpc = new Network("vpc", NetworkArgs.builder()
     *             .name("conn-test-net")
     *             .build());
     * 
     *         final var debian9 = ComputeFunctions.getImage(GetImageArgs.builder()
     *             .family("debian-11")
     *             .project("debian-cloud")
     *             .build());
     * 
     *         var source = new Instance("source", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("source-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var destination = new Instance("destination", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("dest-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var instance_test = new ConnectivityTest("instance-test", ConnectivityTestArgs.builder()
     *             .name("conn-test-instances")
     *             .source(ConnectivityTestSourceArgs.builder()
     *                 .instance(source.id())
     *                 .build())
     *             .destination(ConnectivityTestDestinationArgs.builder()
     *                 .instance(destination.id())
     *                 .build())
     *             .protocol("TCP")
     *             .labels(Map.of("env", "test"))
     *             .build());
     * 
     *         final var instance-test-run = NetworkmanagementFunctions.getConnectivityTestRun(GetConnectivityTestRunArgs.builder()
     *             .name(instance_test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectivityTestRunResult> getConnectivityTestRunPlain(GetConnectivityTestRunPlainArgs args) {
        return getConnectivityTestRunPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
     * 
     * A connectivity test is a static analysis of your resource configurations
     * that enables you to evaluate connectivity to and from Google Cloud
     * resources in your Virtual Private Cloud (VPC) network. This data source allows
     * you to trigger a rerun operation on a connectivity test and return the results.
     * 
     * To get more information about connectivity tests, see:
     * 
     * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
     * 
     * ## Example Usage
     * 
     * ### Network Management Connectivity Test Run Instances
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.compute.Network;
     * import com.pulumi.gcp.compute.NetworkArgs;
     * import com.pulumi.gcp.compute.ComputeFunctions;
     * import com.pulumi.gcp.compute.inputs.GetImageArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTest;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestSourceArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestDestinationArgs;
     * import com.pulumi.gcp.networkmanagement.NetworkmanagementFunctions;
     * import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var vpc = new Network("vpc", NetworkArgs.builder()
     *             .name("conn-test-net")
     *             .build());
     * 
     *         final var debian9 = ComputeFunctions.getImage(GetImageArgs.builder()
     *             .family("debian-11")
     *             .project("debian-cloud")
     *             .build());
     * 
     *         var source = new Instance("source", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("source-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var destination = new Instance("destination", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("dest-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var instance_test = new ConnectivityTest("instance-test", ConnectivityTestArgs.builder()
     *             .name("conn-test-instances")
     *             .source(ConnectivityTestSourceArgs.builder()
     *                 .instance(source.id())
     *                 .build())
     *             .destination(ConnectivityTestDestinationArgs.builder()
     *                 .instance(destination.id())
     *                 .build())
     *             .protocol("TCP")
     *             .labels(Map.of("env", "test"))
     *             .build());
     * 
     *         final var instance-test-run = NetworkmanagementFunctions.getConnectivityTestRun(GetConnectivityTestRunArgs.builder()
     *             .name(instance_test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectivityTestRunResult> getConnectivityTestRun(GetConnectivityTestRunArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", TypeShape.of(GetConnectivityTestRunResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
     * 
     * A connectivity test is a static analysis of your resource configurations
     * that enables you to evaluate connectivity to and from Google Cloud
     * resources in your Virtual Private Cloud (VPC) network. This data source allows
     * you to trigger a rerun operation on a connectivity test and return the results.
     * 
     * To get more information about connectivity tests, see:
     * 
     * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
     * 
     * ## Example Usage
     * 
     * ### Network Management Connectivity Test Run Instances
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.compute.Network;
     * import com.pulumi.gcp.compute.NetworkArgs;
     * import com.pulumi.gcp.compute.ComputeFunctions;
     * import com.pulumi.gcp.compute.inputs.GetImageArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTest;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestSourceArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestDestinationArgs;
     * import com.pulumi.gcp.networkmanagement.NetworkmanagementFunctions;
     * import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var vpc = new Network("vpc", NetworkArgs.builder()
     *             .name("conn-test-net")
     *             .build());
     * 
     *         final var debian9 = ComputeFunctions.getImage(GetImageArgs.builder()
     *             .family("debian-11")
     *             .project("debian-cloud")
     *             .build());
     * 
     *         var source = new Instance("source", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("source-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var destination = new Instance("destination", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("dest-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var instance_test = new ConnectivityTest("instance-test", ConnectivityTestArgs.builder()
     *             .name("conn-test-instances")
     *             .source(ConnectivityTestSourceArgs.builder()
     *                 .instance(source.id())
     *                 .build())
     *             .destination(ConnectivityTestDestinationArgs.builder()
     *                 .instance(destination.id())
     *                 .build())
     *             .protocol("TCP")
     *             .labels(Map.of("env", "test"))
     *             .build());
     * 
     *         final var instance-test-run = NetworkmanagementFunctions.getConnectivityTestRun(GetConnectivityTestRunArgs.builder()
     *             .name(instance_test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectivityTestRunResult> getConnectivityTestRun(GetConnectivityTestRunArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", TypeShape.of(GetConnectivityTestRunResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; This datasource triggers side effects on the target resource. It will take a long time to refresh (i.e. `pulumi preview` will take much longer than usual) and may modify the state of the parent resource or other copies of the resource copying the same parent.
     * 
     * A connectivity test is a static analysis of your resource configurations
     * that enables you to evaluate connectivity to and from Google Cloud
     * resources in your Virtual Private Cloud (VPC) network. This data source allows
     * you to trigger a rerun operation on a connectivity test and return the results.
     * 
     * To get more information about connectivity tests, see:
     * 
     * * [API documentation](https://cloud.google.com/network-intelligence-center/docs/reference/networkmanagement/rest/v1/projects.locations.global.connectivityTests/rerun)
     * * How-to Guides
     *     * [Official Documentation](https://cloud.google.com/network-intelligence-center/docs)
     * 
     * ## Example Usage
     * 
     * ### Network Management Connectivity Test Run Instances
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.compute.Network;
     * import com.pulumi.gcp.compute.NetworkArgs;
     * import com.pulumi.gcp.compute.ComputeFunctions;
     * import com.pulumi.gcp.compute.inputs.GetImageArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTest;
     * import com.pulumi.gcp.networkmanagement.ConnectivityTestArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestSourceArgs;
     * import com.pulumi.gcp.networkmanagement.inputs.ConnectivityTestDestinationArgs;
     * import com.pulumi.gcp.networkmanagement.NetworkmanagementFunctions;
     * import com.pulumi.gcp.networkmanagement.inputs.GetConnectivityTestRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var vpc = new Network("vpc", NetworkArgs.builder()
     *             .name("conn-test-net")
     *             .build());
     * 
     *         final var debian9 = ComputeFunctions.getImage(GetImageArgs.builder()
     *             .family("debian-11")
     *             .project("debian-cloud")
     *             .build());
     * 
     *         var source = new Instance("source", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("source-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var destination = new Instance("destination", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
     *                     .build())
     *                 .network(vpc.id())
     *                 .build())
     *             .name("dest-vm")
     *             .machineType("e2-medium")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image(debian9.id())
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var instance_test = new ConnectivityTest("instance-test", ConnectivityTestArgs.builder()
     *             .name("conn-test-instances")
     *             .source(ConnectivityTestSourceArgs.builder()
     *                 .instance(source.id())
     *                 .build())
     *             .destination(ConnectivityTestDestinationArgs.builder()
     *                 .instance(destination.id())
     *                 .build())
     *             .protocol("TCP")
     *             .labels(Map.of("env", "test"))
     *             .build());
     * 
     *         final var instance-test-run = NetworkmanagementFunctions.getConnectivityTestRun(GetConnectivityTestRunArgs.builder()
     *             .name(instance_test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectivityTestRunResult> getConnectivityTestRunPlain(GetConnectivityTestRunPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:networkmanagement/getConnectivityTestRun:getConnectivityTestRun", TypeShape.of(GetConnectivityTestRunResult.class), args, Utilities.withVersion(options));
    }
}
