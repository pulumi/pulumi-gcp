// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMavenArtifactArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMavenArtifactArgs Empty = new GetMavenArtifactArgs();

    /**
     * The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
     * 
     */
    @Import(name="artifactId", required=true)
    private Output<String> artifactId;

    /**
     * @return The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
     * 
     */
    public Output<String> artifactId() {
        return this.artifactId;
    }

    /**
     * Group ID for the artifact. Example: `com.google.guava`
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return Group ID for the artifact. Example: `com.google.guava`
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The location of the Artifact Registry repository.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the Artifact Registry repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project that owns the repository. If not provided, the provider-level project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project that owns the repository. If not provided, the provider-level project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID of the repository containing the Maven artifact.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The ID of the repository containing the Maven artifact.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    private GetMavenArtifactArgs() {}

    private GetMavenArtifactArgs(GetMavenArtifactArgs $) {
        this.artifactId = $.artifactId;
        this.groupId = $.groupId;
        this.location = $.location;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMavenArtifactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMavenArtifactArgs $;

        public Builder() {
            $ = new GetMavenArtifactArgs();
        }

        public Builder(GetMavenArtifactArgs defaults) {
            $ = new GetMavenArtifactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifactId The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
         * 
         * @return builder
         * 
         */
        public Builder artifactId(Output<String> artifactId) {
            $.artifactId = artifactId;
            return this;
        }

        /**
         * @param artifactId The name of the artifact to fetch. Can optionally include a specific version (e.g., `my_artifact:1.2.3`). If no version is provided, the latest version is used.
         * 
         * @return builder
         * 
         */
        public Builder artifactId(String artifactId) {
            return artifactId(Output.of(artifactId));
        }

        /**
         * @param groupId Group ID for the artifact. Example: `com.google.guava`
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Group ID for the artifact. Example: `com.google.guava`
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param location The location of the Artifact Registry repository.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Artifact Registry repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project that owns the repository. If not provided, the provider-level project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project that owns the repository. If not provided, the provider-level project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param repositoryId The ID of the repository containing the Maven artifact.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID of the repository containing the Maven artifact.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GetMavenArtifactArgs build() {
            if ($.artifactId == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactArgs", "artifactId");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactArgs", "groupId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactArgs", "location");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetMavenArtifactArgs", "repositoryId");
            }
            return $;
        }
    }

}
