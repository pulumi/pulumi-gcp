// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.appengine.outputs.StandardAppVersionAutomaticScalingStandardSchedulerSettings;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StandardAppVersionAutomaticScaling {
    /**
     * @return Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    private @Nullable Integer maxConcurrentRequests;
    /**
     * @return Maximum number of idle instances that should be maintained for this version.
     * 
     */
    private @Nullable Integer maxIdleInstances;
    /**
     * @return Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    private @Nullable String maxPendingLatency;
    /**
     * @return Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    private @Nullable Integer minIdleInstances;
    /**
     * @return Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    private @Nullable String minPendingLatency;
    /**
     * @return Scheduler settings for standard environment.
     * Structure is documented below.
     * 
     */
    private @Nullable StandardAppVersionAutomaticScalingStandardSchedulerSettings standardSchedulerSettings;

    private StandardAppVersionAutomaticScaling() {}
    /**
     * @return Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * 
     */
    public Optional<Integer> maxConcurrentRequests() {
        return Optional.ofNullable(this.maxConcurrentRequests);
    }
    /**
     * @return Maximum number of idle instances that should be maintained for this version.
     * 
     */
    public Optional<Integer> maxIdleInstances() {
        return Optional.ofNullable(this.maxIdleInstances);
    }
    /**
     * @return Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<String> maxPendingLatency() {
        return Optional.ofNullable(this.maxPendingLatency);
    }
    /**
     * @return Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     * 
     */
    public Optional<Integer> minIdleInstances() {
        return Optional.ofNullable(this.minIdleInstances);
    }
    /**
     * @return Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<String> minPendingLatency() {
        return Optional.ofNullable(this.minPendingLatency);
    }
    /**
     * @return Scheduler settings for standard environment.
     * Structure is documented below.
     * 
     */
    public Optional<StandardAppVersionAutomaticScalingStandardSchedulerSettings> standardSchedulerSettings() {
        return Optional.ofNullable(this.standardSchedulerSettings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardAppVersionAutomaticScaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer maxConcurrentRequests;
        private @Nullable Integer maxIdleInstances;
        private @Nullable String maxPendingLatency;
        private @Nullable Integer minIdleInstances;
        private @Nullable String minPendingLatency;
        private @Nullable StandardAppVersionAutomaticScalingStandardSchedulerSettings standardSchedulerSettings;
        public Builder() {}
        public Builder(StandardAppVersionAutomaticScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxConcurrentRequests = defaults.maxConcurrentRequests;
    	      this.maxIdleInstances = defaults.maxIdleInstances;
    	      this.maxPendingLatency = defaults.maxPendingLatency;
    	      this.minIdleInstances = defaults.minIdleInstances;
    	      this.minPendingLatency = defaults.minPendingLatency;
    	      this.standardSchedulerSettings = defaults.standardSchedulerSettings;
        }

        @CustomType.Setter
        public Builder maxConcurrentRequests(@Nullable Integer maxConcurrentRequests) {
            this.maxConcurrentRequests = maxConcurrentRequests;
            return this;
        }
        @CustomType.Setter
        public Builder maxIdleInstances(@Nullable Integer maxIdleInstances) {
            this.maxIdleInstances = maxIdleInstances;
            return this;
        }
        @CustomType.Setter
        public Builder maxPendingLatency(@Nullable String maxPendingLatency) {
            this.maxPendingLatency = maxPendingLatency;
            return this;
        }
        @CustomType.Setter
        public Builder minIdleInstances(@Nullable Integer minIdleInstances) {
            this.minIdleInstances = minIdleInstances;
            return this;
        }
        @CustomType.Setter
        public Builder minPendingLatency(@Nullable String minPendingLatency) {
            this.minPendingLatency = minPendingLatency;
            return this;
        }
        @CustomType.Setter
        public Builder standardSchedulerSettings(@Nullable StandardAppVersionAutomaticScalingStandardSchedulerSettings standardSchedulerSettings) {
            this.standardSchedulerSettings = standardSchedulerSettings;
            return this;
        }
        public StandardAppVersionAutomaticScaling build() {
            final var o = new StandardAppVersionAutomaticScaling();
            o.maxConcurrentRequests = maxConcurrentRequests;
            o.maxIdleInstances = maxIdleInstances;
            o.maxPendingLatency = maxPendingLatency;
            o.minIdleInstances = minIdleInstances;
            o.minPendingLatency = minPendingLatency;
            o.standardSchedulerSettings = standardSchedulerSettings;
            return o;
        }
    }
}
