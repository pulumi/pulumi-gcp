// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabConfigAuthorizerCredentialArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabConfigReadAuthorizerCredentialArgs;
import java.lang.String;
import java.util.Objects;


public final class ConnectionGitlabConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGitlabConfigArgs Empty = new ConnectionGitlabConfigArgs();

    /**
     * Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="authorizerCredential", required=true)
    private Output<ConnectionGitlabConfigAuthorizerCredentialArgs> authorizerCredential;

    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionGitlabConfigAuthorizerCredentialArgs> authorizerCredential() {
        return this.authorizerCredential;
    }

    /**
     * Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="readAuthorizerCredential", required=true)
    private Output<ConnectionGitlabConfigReadAuthorizerCredentialArgs> readAuthorizerCredential;

    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionGitlabConfigReadAuthorizerCredentialArgs> readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }

    /**
     * Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to validate
     * webhooks.
     * 
     */
    @Import(name="webhookSecretSecretVersion", required=true)
    private Output<String> webhookSecretSecretVersion;

    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to validate
     * webhooks.
     * 
     */
    public Output<String> webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    private ConnectionGitlabConfigArgs() {}

    private ConnectionGitlabConfigArgs(ConnectionGitlabConfigArgs $) {
        this.authorizerCredential = $.authorizerCredential;
        this.readAuthorizerCredential = $.readAuthorizerCredential;
        this.webhookSecretSecretVersion = $.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGitlabConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGitlabConfigArgs $;

        public Builder() {
            $ = new ConnectionGitlabConfigArgs();
        }

        public Builder(ConnectionGitlabConfigArgs defaults) {
            $ = new ConnectionGitlabConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(Output<ConnectionGitlabConfigAuthorizerCredentialArgs> authorizerCredential) {
            $.authorizerCredential = authorizerCredential;
            return this;
        }

        /**
         * @param authorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(ConnectionGitlabConfigAuthorizerCredentialArgs authorizerCredential) {
            return authorizerCredential(Output.of(authorizerCredential));
        }

        /**
         * @param readAuthorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(Output<ConnectionGitlabConfigReadAuthorizerCredentialArgs> readAuthorizerCredential) {
            $.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }

        /**
         * @param readAuthorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(ConnectionGitlabConfigReadAuthorizerCredentialArgs readAuthorizerCredential) {
            return readAuthorizerCredential(Output.of(readAuthorizerCredential));
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
         * formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to validate
         * webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(Output<String> webhookSecretSecretVersion) {
            $.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
         * formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to validate
         * webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            return webhookSecretSecretVersion(Output.of(webhookSecretSecretVersion));
        }

        public ConnectionGitlabConfigArgs build() {
            if ($.authorizerCredential == null) {
                throw new MissingRequiredPropertyException("ConnectionGitlabConfigArgs", "authorizerCredential");
            }
            if ($.readAuthorizerCredential == null) {
                throw new MissingRequiredPropertyException("ConnectionGitlabConfigArgs", "readAuthorizerCredential");
            }
            if ($.webhookSecretSecretVersion == null) {
                throw new MissingRequiredPropertyException("ConnectionGitlabConfigArgs", "webhookSecretSecretVersion");
            }
            return $;
        }
    }

}
