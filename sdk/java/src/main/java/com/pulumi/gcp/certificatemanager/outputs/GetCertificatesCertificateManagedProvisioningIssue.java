// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificatesCertificateManagedProvisioningIssue {
    /**
     * @return Human readable explanation about the issue. Provided to help address
     * the configuration issues.
     * Not guaranteed to be stable. For programmatic access use &#39;reason&#39; field.
     * 
     */
    private String details;
    /**
     * @return Reason for provisioning failures.
     * 
     */
    private String reason;

    private GetCertificatesCertificateManagedProvisioningIssue() {}
    /**
     * @return Human readable explanation about the issue. Provided to help address
     * the configuration issues.
     * Not guaranteed to be stable. For programmatic access use &#39;reason&#39; field.
     * 
     */
    public String details() {
        return this.details;
    }
    /**
     * @return Reason for provisioning failures.
     * 
     */
    public String reason() {
        return this.reason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificateManagedProvisioningIssue defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String details;
        private String reason;
        public Builder() {}
        public Builder(GetCertificatesCertificateManagedProvisioningIssue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.reason = defaults.reason;
        }

        @CustomType.Setter
        public Builder details(String details) {
            if (details == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManagedProvisioningIssue", "details");
            }
            this.details = details;
            return this;
        }
        @CustomType.Setter
        public Builder reason(String reason) {
            if (reason == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificateManagedProvisioningIssue", "reason");
            }
            this.reason = reason;
            return this;
        }
        public GetCertificatesCertificateManagedProvisioningIssue build() {
            final var _resultValue = new GetCertificatesCertificateManagedProvisioningIssue();
            _resultValue.details = details;
            _resultValue.reason = reason;
            return _resultValue;
        }
    }
}
