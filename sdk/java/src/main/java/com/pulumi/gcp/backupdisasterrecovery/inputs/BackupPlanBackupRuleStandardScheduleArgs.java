// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.inputs.BackupPlanBackupRuleStandardScheduleBackupWindowArgs;
import com.pulumi.gcp.backupdisasterrecovery.inputs.BackupPlanBackupRuleStandardScheduleWeekDayOfMonthArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPlanBackupRuleStandardScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPlanBackupRuleStandardScheduleArgs Empty = new BackupPlanBackupRuleStandardScheduleArgs();

    /**
     * A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
     * `NOT_RUN` if they do not start by the end of the window.
     * Structure is documented below.
     * 
     */
    @Import(name="backupWindow")
    private @Nullable Output<BackupPlanBackupRuleStandardScheduleBackupWindowArgs> backupWindow;

    /**
     * @return A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
     * `NOT_RUN` if they do not start by the end of the window.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackupPlanBackupRuleStandardScheduleBackupWindowArgs>> backupWindow() {
        return Optional.ofNullable(this.backupWindow);
    }

    /**
     * Specifies days of months like 1, 5, or 14 on which jobs will run.
     * 
     */
    @Import(name="daysOfMonths")
    private @Nullable Output<List<Integer>> daysOfMonths;

    /**
     * @return Specifies days of months like 1, 5, or 14 on which jobs will run.
     * 
     */
    public Optional<Output<List<Integer>>> daysOfMonths() {
        return Optional.ofNullable(this.daysOfMonths);
    }

    /**
     * Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
     * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<String>> daysOfWeeks;

    /**
     * @return Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
     * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
     * This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
     * 
     */
    @Import(name="hourlyFrequency")
    private @Nullable Output<Integer> hourlyFrequency;

    /**
     * @return Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
     * This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
     * 
     */
    public Optional<Output<Integer>> hourlyFrequency() {
        return Optional.ofNullable(this.hourlyFrequency);
    }

    /**
     * Specifies values of months
     * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
     * 
     */
    @Import(name="months")
    private @Nullable Output<List<String>> months;

    /**
     * @return Specifies values of months
     * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
     * 
     */
    public Optional<Output<List<String>>> months() {
        return Optional.ofNullable(this.months);
    }

    /**
     * RecurrenceType enumerates the applicable periodicity for the schedule.
     * Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     * 
     */
    @Import(name="recurrenceType", required=true)
    private Output<String> recurrenceType;

    /**
     * @return RecurrenceType enumerates the applicable periodicity for the schedule.
     * Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     * 
     */
    public Output<String> recurrenceType() {
        return this.recurrenceType;
    }

    /**
     * The time zone to be used when interpreting the schedule.
     * 
     */
    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    /**
     * @return The time zone to be used when interpreting the schedule.
     * 
     */
    public Output<String> timeZone() {
        return this.timeZone;
    }

    /**
     * Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
     * Structure is documented below.
     * 
     */
    @Import(name="weekDayOfMonth")
    private @Nullable Output<BackupPlanBackupRuleStandardScheduleWeekDayOfMonthArgs> weekDayOfMonth;

    /**
     * @return Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackupPlanBackupRuleStandardScheduleWeekDayOfMonthArgs>> weekDayOfMonth() {
        return Optional.ofNullable(this.weekDayOfMonth);
    }

    private BackupPlanBackupRuleStandardScheduleArgs() {}

    private BackupPlanBackupRuleStandardScheduleArgs(BackupPlanBackupRuleStandardScheduleArgs $) {
        this.backupWindow = $.backupWindow;
        this.daysOfMonths = $.daysOfMonths;
        this.daysOfWeeks = $.daysOfWeeks;
        this.hourlyFrequency = $.hourlyFrequency;
        this.months = $.months;
        this.recurrenceType = $.recurrenceType;
        this.timeZone = $.timeZone;
        this.weekDayOfMonth = $.weekDayOfMonth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPlanBackupRuleStandardScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPlanBackupRuleStandardScheduleArgs $;

        public Builder() {
            $ = new BackupPlanBackupRuleStandardScheduleArgs();
        }

        public Builder(BackupPlanBackupRuleStandardScheduleArgs defaults) {
            $ = new BackupPlanBackupRuleStandardScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupWindow A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
         * `NOT_RUN` if they do not start by the end of the window.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupWindow(@Nullable Output<BackupPlanBackupRuleStandardScheduleBackupWindowArgs> backupWindow) {
            $.backupWindow = backupWindow;
            return this;
        }

        /**
         * @param backupWindow A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
         * `NOT_RUN` if they do not start by the end of the window.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupWindow(BackupPlanBackupRuleStandardScheduleBackupWindowArgs backupWindow) {
            return backupWindow(Output.of(backupWindow));
        }

        /**
         * @param daysOfMonths Specifies days of months like 1, 5, or 14 on which jobs will run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(@Nullable Output<List<Integer>> daysOfMonths) {
            $.daysOfMonths = daysOfMonths;
            return this;
        }

        /**
         * @param daysOfMonths Specifies days of months like 1, 5, or 14 on which jobs will run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(List<Integer> daysOfMonths) {
            return daysOfMonths(Output.of(daysOfMonths));
        }

        /**
         * @param daysOfMonths Specifies days of months like 1, 5, or 14 on which jobs will run.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonths(Integer... daysOfMonths) {
            return daysOfMonths(List.of(daysOfMonths));
        }

        /**
         * @param daysOfWeeks Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
         * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
         * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for `recurrence_type`, `WEEKLY` and is not applicable otherwise.
         * Each value may be one of: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param hourlyFrequency Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
         * This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
         * 
         * @return builder
         * 
         */
        public Builder hourlyFrequency(@Nullable Output<Integer> hourlyFrequency) {
            $.hourlyFrequency = hourlyFrequency;
            return this;
        }

        /**
         * @param hourlyFrequency Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
         * This is required for `recurrence_type`, `HOURLY` and is not applicable otherwise.
         * 
         * @return builder
         * 
         */
        public Builder hourlyFrequency(Integer hourlyFrequency) {
            return hourlyFrequency(Output.of(hourlyFrequency));
        }

        /**
         * @param months Specifies values of months
         * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
         * 
         * @return builder
         * 
         */
        public Builder months(@Nullable Output<List<String>> months) {
            $.months = months;
            return this;
        }

        /**
         * @param months Specifies values of months
         * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
         * 
         * @return builder
         * 
         */
        public Builder months(List<String> months) {
            return months(Output.of(months));
        }

        /**
         * @param months Specifies values of months
         * Each value may be one of: `MONTH_UNSPECIFIED`, `JANUARY`, `FEBRUARY`, `MARCH`, `APRIL`, `MAY`, `JUNE`, `JULY`, `AUGUST`, `SEPTEMBER`, `OCTOBER`, `NOVEMBER`, `DECEMBER`.
         * 
         * @return builder
         * 
         */
        public Builder months(String... months) {
            return months(List.of(months));
        }

        /**
         * @param recurrenceType RecurrenceType enumerates the applicable periodicity for the schedule.
         * Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(Output<String> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        /**
         * @param recurrenceType RecurrenceType enumerates the applicable periodicity for the schedule.
         * Possible values are: `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        /**
         * @param timeZone The time zone to be used when interpreting the schedule.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone to be used when interpreting the schedule.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param weekDayOfMonth Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder weekDayOfMonth(@Nullable Output<BackupPlanBackupRuleStandardScheduleWeekDayOfMonthArgs> weekDayOfMonth) {
            $.weekDayOfMonth = weekDayOfMonth;
            return this;
        }

        /**
         * @param weekDayOfMonth Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder weekDayOfMonth(BackupPlanBackupRuleStandardScheduleWeekDayOfMonthArgs weekDayOfMonth) {
            return weekDayOfMonth(Output.of(weekDayOfMonth));
        }

        public BackupPlanBackupRuleStandardScheduleArgs build() {
            if ($.recurrenceType == null) {
                throw new MissingRequiredPropertyException("BackupPlanBackupRuleStandardScheduleArgs", "recurrenceType");
            }
            if ($.timeZone == null) {
                throw new MissingRequiredPropertyException("BackupPlanBackupRuleStandardScheduleArgs", "timeZone");
            }
            return $;
        }
    }

}
