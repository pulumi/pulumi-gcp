// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetClusterAddonsConfigLustreCsiDriverConfig {
    /**
     * @return If set to true, the Lustre CSI driver will initialize LNet (the virtual network layer for Lustre kernel module) using port 6988.
     * 										This flag is required to workaround a port conflict with the gke-metadata-server on GKE nodes.
     * 
     */
    private Boolean enableLegacyLustrePort;
    /**
     * @return Whether the Lustre CSI driver is enabled for this cluster.
     * 
     */
    private Boolean enabled;

    private GetClusterAddonsConfigLustreCsiDriverConfig() {}
    /**
     * @return If set to true, the Lustre CSI driver will initialize LNet (the virtual network layer for Lustre kernel module) using port 6988.
     * 										This flag is required to workaround a port conflict with the gke-metadata-server on GKE nodes.
     * 
     */
    public Boolean enableLegacyLustrePort() {
        return this.enableLegacyLustrePort;
    }
    /**
     * @return Whether the Lustre CSI driver is enabled for this cluster.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterAddonsConfigLustreCsiDriverConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableLegacyLustrePort;
        private Boolean enabled;
        public Builder() {}
        public Builder(GetClusterAddonsConfigLustreCsiDriverConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableLegacyLustrePort = defaults.enableLegacyLustrePort;
    	      this.enabled = defaults.enabled;
        }

        @CustomType.Setter
        public Builder enableLegacyLustrePort(Boolean enableLegacyLustrePort) {
            if (enableLegacyLustrePort == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfigLustreCsiDriverConfig", "enableLegacyLustrePort");
            }
            this.enableLegacyLustrePort = enableLegacyLustrePort;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetClusterAddonsConfigLustreCsiDriverConfig", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        public GetClusterAddonsConfigLustreCsiDriverConfig build() {
            final var _resultValue = new GetClusterAddonsConfigLustreCsiDriverConfig();
            _resultValue.enableLegacyLustrePort = enableLegacyLustrePort;
            _resultValue.enabled = enabled;
            return _resultValue;
        }
    }
}
