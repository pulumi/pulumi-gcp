// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.gkeonprem.VMwareNodePoolArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolState;
import com.pulumi.gcp.gkeonprem.outputs.VMwareNodePoolConfig;
import com.pulumi.gcp.gkeonprem.outputs.VMwareNodePoolNodePoolAutoscaling;
import com.pulumi.gcp.gkeonprem.outputs.VMwareNodePoolStatus;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Google Vmware Node Pool.
 * 
 * ## Example Usage
 * 
 * ### Gkeonprem Vmware Node Pool Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkeonprem.VMwareCluster;
 * import com.pulumi.gcp.gkeonprem.VMwareClusterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterNetworkConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterNetworkConfigDhcpIpConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterControlPlaneNodeArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerVipConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerMetalLbConfigArgs;
 * import com.pulumi.gcp.gkeonprem.VMwareNodePool;
 * import com.pulumi.gcp.gkeonprem.VMwareNodePoolArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_basic = new VMwareCluster("default-basic", VMwareClusterArgs.builder()
 *             .name("my-cluster")
 *             .location("us-west1")
 *             .adminClusterMembership("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test")
 *             .description("test cluster")
 *             .onPremVersion("1.13.1-gke.35")
 *             .networkConfig(VMwareClusterNetworkConfigArgs.builder()
 *                 .serviceAddressCidrBlocks("10.96.0.0/12")
 *                 .podAddressCidrBlocks("192.168.0.0/16")
 *                 .dhcpIpConfig(VMwareClusterNetworkConfigDhcpIpConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .controlPlaneNode(VMwareClusterControlPlaneNodeArgs.builder()
 *                 .cpus(4)
 *                 .memory(8192)
 *                 .replicas(1)
 *                 .build())
 *             .loadBalancer(VMwareClusterLoadBalancerArgs.builder()
 *                 .vipConfig(VMwareClusterLoadBalancerVipConfigArgs.builder()
 *                     .controlPlaneVip("10.251.133.5")
 *                     .ingressVip("10.251.135.19")
 *                     .build())
 *                 .metalLbConfig(VMwareClusterLoadBalancerMetalLbConfigArgs.builder()
 *                     .addressPools(                    
 *                         VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs.builder()
 *                             .pool("ingress-ip")
 *                             .manualAssign("true")
 *                             .addresses("10.251.135.19")
 *                             .build(),
 *                         VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs.builder()
 *                             .pool("lb-test-ip")
 *                             .manualAssign("true")
 *                             .addresses("10.251.135.19")
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var nodepool_basic = new VMwareNodePool("nodepool-basic", VMwareNodePoolArgs.builder()
 *             .name("my-nodepool")
 *             .location("us-west1")
 *             .vmwareCluster(default_basic.name())
 *             .config(VMwareNodePoolConfigArgs.builder()
 *                 .replicas(3)
 *                 .imageType("ubuntu_containerd")
 *                 .enableLoadBalancer(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Gkeonprem Vmware Node Pool Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkeonprem.VMwareCluster;
 * import com.pulumi.gcp.gkeonprem.VMwareClusterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterNetworkConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterNetworkConfigDhcpIpConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterControlPlaneNodeArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerVipConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterLoadBalancerMetalLbConfigArgs;
 * import com.pulumi.gcp.gkeonprem.VMwareNodePool;
 * import com.pulumi.gcp.gkeonprem.VMwareNodePoolArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigVsphereConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolNodePoolAutoscalingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_full = new VMwareCluster("default-full", VMwareClusterArgs.builder()
 *             .name("my-cluster")
 *             .location("us-west1")
 *             .adminClusterMembership("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test")
 *             .description("test cluster")
 *             .onPremVersion("1.13.1-gke.35")
 *             .networkConfig(VMwareClusterNetworkConfigArgs.builder()
 *                 .serviceAddressCidrBlocks("10.96.0.0/12")
 *                 .podAddressCidrBlocks("192.168.0.0/16")
 *                 .dhcpIpConfig(VMwareClusterNetworkConfigDhcpIpConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .controlPlaneNode(VMwareClusterControlPlaneNodeArgs.builder()
 *                 .cpus(4)
 *                 .memory(8192)
 *                 .replicas(1)
 *                 .build())
 *             .loadBalancer(VMwareClusterLoadBalancerArgs.builder()
 *                 .vipConfig(VMwareClusterLoadBalancerVipConfigArgs.builder()
 *                     .controlPlaneVip("10.251.133.5")
 *                     .ingressVip("10.251.135.19")
 *                     .build())
 *                 .metalLbConfig(VMwareClusterLoadBalancerMetalLbConfigArgs.builder()
 *                     .addressPools(                    
 *                         VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs.builder()
 *                             .pool("ingress-ip")
 *                             .manualAssign("true")
 *                             .addresses("10.251.135.19")
 *                             .build(),
 *                         VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs.builder()
 *                             .pool("lb-test-ip")
 *                             .manualAssign("true")
 *                             .addresses("10.251.135.19")
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var nodepool_full = new VMwareNodePool("nodepool-full", VMwareNodePoolArgs.builder()
 *             .name("my-nodepool")
 *             .location("us-west1")
 *             .vmwareCluster(default_full.name())
 *             .annotations()
 *             .config(VMwareNodePoolConfigArgs.builder()
 *                 .cpus(4)
 *                 .memoryMb(8196)
 *                 .replicas(3)
 *                 .imageType("ubuntu_containerd")
 *                 .image("image")
 *                 .bootDiskSizeGb(10)
 *                 .taints(                
 *                     VMwareNodePoolConfigTaintArgs.builder()
 *                         .key("key")
 *                         .value("value")
 *                         .build(),
 *                     VMwareNodePoolConfigTaintArgs.builder()
 *                         .key("key")
 *                         .value("value")
 *                         .effect("NO_SCHEDULE")
 *                         .build())
 *                 .labels()
 *                 .vsphereConfig(VMwareNodePoolConfigVsphereConfigArgs.builder()
 *                     .datastore("test-datastore")
 *                     .tags(                    
 *                         VMwareNodePoolConfigVsphereConfigTagArgs.builder()
 *                             .category("test-category-1")
 *                             .tag("tag-1")
 *                             .build(),
 *                         VMwareNodePoolConfigVsphereConfigTagArgs.builder()
 *                             .category("test-category-2")
 *                             .tag("tag-2")
 *                             .build())
 *                     .hostGroups(                    
 *                         "host1",
 *                         "host2")
 *                     .build())
 *                 .enableLoadBalancer(true)
 *                 .build())
 *             .nodePoolAutoscaling(VMwareNodePoolNodePoolAutoscalingArgs.builder()
 *                 .minReplicas(1)
 *                 .maxReplicas(5)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * VmwareNodePool can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{vmware_cluster}}/{{name}}`
 * 
 * * `{{location}}/{{vmware_cluster}}/{{name}}`
 * 
 * When using the `pulumi import` command, VmwareNodePool can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{project}}/{{location}}/{{vmware_cluster}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{location}}/{{vmware_cluster}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:gkeonprem/vMwareNodePool:VMwareNodePool")
public class VMwareNodePool extends com.pulumi.resources.CustomResource {
    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of
     * the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of
     * the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * The node configuration of the node pool.
     * Structure is documented below.
     * 
     */
    @Export(name="config", refs={VMwareNodePoolConfig.class}, tree="[0]")
    private Output<VMwareNodePoolConfig> config;

    /**
     * @return The node configuration of the node pool.
     * Structure is documented below.
     * 
     */
    public Output<VMwareNodePoolConfig> config() {
        return this.config;
    }
    /**
     * The time the cluster was created, in RFC3339 text format.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time the cluster was created, in RFC3339 text format.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The time the cluster was deleted, in RFC3339 text format.
     * 
     */
    @Export(name="deleteTime", refs={String.class}, tree="[0]")
    private Output<String> deleteTime;

    /**
     * @return The time the cluster was deleted, in RFC3339 text format.
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    /**
     * The display name for the node pool.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The display name for the node pool.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The location of the resource.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The vmware node pool name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The vmware node pool name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Node Pool autoscaling config for the node pool.
     * 
     */
    @Export(name="nodePoolAutoscaling", refs={VMwareNodePoolNodePoolAutoscaling.class}, tree="[0]")
    private Output</* @Nullable */ VMwareNodePoolNodePoolAutoscaling> nodePoolAutoscaling;

    /**
     * @return Node Pool autoscaling config for the node pool.
     * 
     */
    public Output<Optional<VMwareNodePoolNodePoolAutoscaling>> nodePoolAutoscaling() {
        return Codegen.optional(this.nodePoolAutoscaling);
    }
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     * 
     */
    @Export(name="onPremVersion", refs={String.class}, tree="[0]")
    private Output<String> onPremVersion;

    /**
     * @return Anthos version for the node pool. Defaults to the user cluster version.
     * 
     */
    public Output<String> onPremVersion() {
        return this.onPremVersion;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * If set, there are currently changes in flight to the node pool.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return If set, there are currently changes in flight to the node pool.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * (Output)
     * The lifecycle state of the condition.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return (Output)
     * The lifecycle state of the condition.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     * 
     */
    @Export(name="statuses", refs={List.class,VMwareNodePoolStatus.class}, tree="[0,1]")
    private Output<List<VMwareNodePoolStatus>> statuses;

    /**
     * @return ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     * 
     */
    public Output<List<VMwareNodePoolStatus>> statuses() {
        return this.statuses;
    }
    /**
     * The unique identifier of the node pool.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return The unique identifier of the node pool.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time the cluster was last updated, in RFC3339 text format.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The cluster this node pool belongs to.
     * 
     */
    @Export(name="vmwareCluster", refs={String.class}, tree="[0]")
    private Output<String> vmwareCluster;

    /**
     * @return The cluster this node pool belongs to.
     * 
     */
    public Output<String> vmwareCluster() {
        return this.vmwareCluster;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VMwareNodePool(java.lang.String name) {
        this(name, VMwareNodePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VMwareNodePool(java.lang.String name, VMwareNodePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VMwareNodePool(java.lang.String name, VMwareNodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkeonprem/vMwareNodePool:VMwareNodePool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VMwareNodePool(java.lang.String name, Output<java.lang.String> id, @Nullable VMwareNodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkeonprem/vMwareNodePool:VMwareNodePool", name, state, makeResourceOptions(options, id), false);
    }

    private static VMwareNodePoolArgs makeArgs(VMwareNodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VMwareNodePoolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VMwareNodePool get(java.lang.String name, Output<java.lang.String> id, @Nullable VMwareNodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VMwareNodePool(name, id, state, options);
    }
}
