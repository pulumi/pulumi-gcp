// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterNodePoolNodeConfigKubeletConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterNodePoolNodeConfigKubeletConfigArgs Empty = new ClusterNodePoolNodeConfigKubeletConfigArgs();

    /**
     * Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods. The allowed sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`, and `net.*`.
     * 
     */
    @Import(name="allowedUnsafeSysctls")
    private @Nullable Output<List<String>> allowedUnsafeSysctls;

    /**
     * @return Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods. The allowed sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`, and `net.*`.
     * 
     */
    public Optional<Output<List<String>>> allowedUnsafeSysctls() {
        return Optional.ofNullable(this.allowedUnsafeSysctls);
    }

    /**
     * Defines the maximum number of container log files that can be present for a container. The integer must be between 2 and 10, inclusive.
     * 
     */
    @Import(name="containerLogMaxFiles")
    private @Nullable Output<Integer> containerLogMaxFiles;

    /**
     * @return Defines the maximum number of container log files that can be present for a container. The integer must be between 2 and 10, inclusive.
     * 
     */
    public Optional<Output<Integer>> containerLogMaxFiles() {
        return Optional.ofNullable(this.containerLogMaxFiles);
    }

    /**
     * Defines the maximum size of the
     * container log file before it is rotated. Specified as a positive number and a
     * unit suffix, such as `&#34;100Ki&#34;`, `&#34;10Mi&#34;`. Valid units are &#34;Ki&#34;, &#34;Mi&#34;, &#34;Gi&#34;.
     * The value must be between `&#34;10Mi&#34;` and `&#34;500Mi&#34;`, inclusive. And the total container log size
     * (`container_log_max_size` * `container_log_max_files`) cannot exceed 1% of the total storage of the node.
     * 
     */
    @Import(name="containerLogMaxSize")
    private @Nullable Output<String> containerLogMaxSize;

    /**
     * @return Defines the maximum size of the
     * container log file before it is rotated. Specified as a positive number and a
     * unit suffix, such as `&#34;100Ki&#34;`, `&#34;10Mi&#34;`. Valid units are &#34;Ki&#34;, &#34;Mi&#34;, &#34;Gi&#34;.
     * The value must be between `&#34;10Mi&#34;` and `&#34;500Mi&#34;`, inclusive. And the total container log size
     * (`container_log_max_size` * `container_log_max_files`) cannot exceed 1% of the total storage of the node.
     * 
     */
    public Optional<Output<String>> containerLogMaxSize() {
        return Optional.ofNullable(this.containerLogMaxSize);
    }

    /**
     * If true, enables CPU CFS quota enforcement for
     * containers that specify CPU limits.
     * 
     */
    @Import(name="cpuCfsQuota")
    private @Nullable Output<Boolean> cpuCfsQuota;

    /**
     * @return If true, enables CPU CFS quota enforcement for
     * containers that specify CPU limits.
     * 
     */
    public Optional<Output<Boolean>> cpuCfsQuota() {
        return Optional.ofNullable(this.cpuCfsQuota);
    }

    /**
     * The CPU CFS quota period value. Specified
     * as a sequence of decimal numbers, each with optional fraction and a unit suffix,
     * such as `&#34;300ms&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;,
     * &#34;h&#34;. The value must be a positive duration.
     * 
     */
    @Import(name="cpuCfsQuotaPeriod")
    private @Nullable Output<String> cpuCfsQuotaPeriod;

    /**
     * @return The CPU CFS quota period value. Specified
     * as a sequence of decimal numbers, each with optional fraction and a unit suffix,
     * such as `&#34;300ms&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;,
     * &#34;h&#34;. The value must be a positive duration.
     * 
     */
    public Optional<Output<String>> cpuCfsQuotaPeriod() {
        return Optional.ofNullable(this.cpuCfsQuotaPeriod);
    }

    /**
     * The CPU management policy on the node. See
     * [K8S CPU Management Policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/).
     * One of `&#34;none&#34;` or `&#34;static&#34;`. If unset (or set to the empty string `&#34;&#34;`), the API will treat the field as if set to &#34;none&#34;.
     * Prior to the 6.4.0 this field was marked as required. The workaround for the required field
     * is setting the empty string `&#34;&#34;`, which will function identically to not setting this field.
     * 
     */
    @Import(name="cpuManagerPolicy")
    private @Nullable Output<String> cpuManagerPolicy;

    /**
     * @return The CPU management policy on the node. See
     * [K8S CPU Management Policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/).
     * One of `&#34;none&#34;` or `&#34;static&#34;`. If unset (or set to the empty string `&#34;&#34;`), the API will treat the field as if set to &#34;none&#34;.
     * Prior to the 6.4.0 this field was marked as required. The workaround for the required field
     * is setting the empty string `&#34;&#34;`, which will function identically to not setting this field.
     * 
     */
    public Optional<Output<String>> cpuManagerPolicy() {
        return Optional.ofNullable(this.cpuManagerPolicy);
    }

    /**
     * Defines the percent of disk usage after which image garbage collection is always run. The integer must be between 10 and 85, inclusive.
     * 
     */
    @Import(name="imageGcHighThresholdPercent")
    private @Nullable Output<Integer> imageGcHighThresholdPercent;

    /**
     * @return Defines the percent of disk usage after which image garbage collection is always run. The integer must be between 10 and 85, inclusive.
     * 
     */
    public Optional<Output<Integer>> imageGcHighThresholdPercent() {
        return Optional.ofNullable(this.imageGcHighThresholdPercent);
    }

    /**
     * Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The integer must be between 10 and 85, inclusive.
     * 
     */
    @Import(name="imageGcLowThresholdPercent")
    private @Nullable Output<Integer> imageGcLowThresholdPercent;

    /**
     * @return Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The integer must be between 10 and 85, inclusive.
     * 
     */
    public Optional<Output<Integer>> imageGcLowThresholdPercent() {
        return Optional.ofNullable(this.imageGcLowThresholdPercent);
    }

    /**
     * Defines the maximum age an image can be unused before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`, and `&#34;2h45m&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;, &#34;h&#34;. The value must be a positive duration.
     * 
     */
    @Import(name="imageMaximumGcAge")
    private @Nullable Output<String> imageMaximumGcAge;

    /**
     * @return Defines the maximum age an image can be unused before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`, and `&#34;2h45m&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;, &#34;h&#34;. The value must be a positive duration.
     * 
     */
    public Optional<Output<String>> imageMaximumGcAge() {
        return Optional.ofNullable(this.imageMaximumGcAge);
    }

    /**
     * Defines the minimum age for an unused image before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`. The value cannot be greater than &#34;2m&#34;.
     * 
     */
    @Import(name="imageMinimumGcAge")
    private @Nullable Output<String> imageMinimumGcAge;

    /**
     * @return Defines the minimum age for an unused image before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`. The value cannot be greater than &#34;2m&#34;.
     * 
     */
    public Optional<Output<String>> imageMinimumGcAge() {
        return Optional.ofNullable(this.imageMinimumGcAge);
    }

    /**
     * Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    @Import(name="insecureKubeletReadonlyPortEnabled")
    private @Nullable Output<String> insecureKubeletReadonlyPortEnabled;

    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    public Optional<Output<String>> insecureKubeletReadonlyPortEnabled() {
        return Optional.ofNullable(this.insecureKubeletReadonlyPortEnabled);
    }

    /**
     * Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
     * 
     */
    @Import(name="podPidsLimit")
    private @Nullable Output<Integer> podPidsLimit;

    /**
     * @return Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
     * 
     */
    public Optional<Output<Integer>> podPidsLimit() {
        return Optional.ofNullable(this.podPidsLimit);
    }

    /**
     * Defines whether to enable single process OOM killer. If true, the processes in the container will be OOM killed individually instead of as a group.
     * 
     */
    @Import(name="singleProcessOomKill")
    private @Nullable Output<Boolean> singleProcessOomKill;

    /**
     * @return Defines whether to enable single process OOM killer. If true, the processes in the container will be OOM killed individually instead of as a group.
     * 
     */
    public Optional<Output<Boolean>> singleProcessOomKill() {
        return Optional.ofNullable(this.singleProcessOomKill);
    }

    private ClusterNodePoolNodeConfigKubeletConfigArgs() {}

    private ClusterNodePoolNodeConfigKubeletConfigArgs(ClusterNodePoolNodeConfigKubeletConfigArgs $) {
        this.allowedUnsafeSysctls = $.allowedUnsafeSysctls;
        this.containerLogMaxFiles = $.containerLogMaxFiles;
        this.containerLogMaxSize = $.containerLogMaxSize;
        this.cpuCfsQuota = $.cpuCfsQuota;
        this.cpuCfsQuotaPeriod = $.cpuCfsQuotaPeriod;
        this.cpuManagerPolicy = $.cpuManagerPolicy;
        this.imageGcHighThresholdPercent = $.imageGcHighThresholdPercent;
        this.imageGcLowThresholdPercent = $.imageGcLowThresholdPercent;
        this.imageMaximumGcAge = $.imageMaximumGcAge;
        this.imageMinimumGcAge = $.imageMinimumGcAge;
        this.insecureKubeletReadonlyPortEnabled = $.insecureKubeletReadonlyPortEnabled;
        this.podPidsLimit = $.podPidsLimit;
        this.singleProcessOomKill = $.singleProcessOomKill;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterNodePoolNodeConfigKubeletConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterNodePoolNodeConfigKubeletConfigArgs $;

        public Builder() {
            $ = new ClusterNodePoolNodeConfigKubeletConfigArgs();
        }

        public Builder(ClusterNodePoolNodeConfigKubeletConfigArgs defaults) {
            $ = new ClusterNodePoolNodeConfigKubeletConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedUnsafeSysctls Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods. The allowed sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`, and `net.*`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUnsafeSysctls(@Nullable Output<List<String>> allowedUnsafeSysctls) {
            $.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }

        /**
         * @param allowedUnsafeSysctls Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods. The allowed sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`, and `net.*`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUnsafeSysctls(List<String> allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(Output.of(allowedUnsafeSysctls));
        }

        /**
         * @param allowedUnsafeSysctls Defines a comma-separated allowlist of unsafe sysctls or sysctl patterns which can be set on the Pods. The allowed sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`, and `net.*`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }

        /**
         * @param containerLogMaxFiles Defines the maximum number of container log files that can be present for a container. The integer must be between 2 and 10, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxFiles(@Nullable Output<Integer> containerLogMaxFiles) {
            $.containerLogMaxFiles = containerLogMaxFiles;
            return this;
        }

        /**
         * @param containerLogMaxFiles Defines the maximum number of container log files that can be present for a container. The integer must be between 2 and 10, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxFiles(Integer containerLogMaxFiles) {
            return containerLogMaxFiles(Output.of(containerLogMaxFiles));
        }

        /**
         * @param containerLogMaxSize Defines the maximum size of the
         * container log file before it is rotated. Specified as a positive number and a
         * unit suffix, such as `&#34;100Ki&#34;`, `&#34;10Mi&#34;`. Valid units are &#34;Ki&#34;, &#34;Mi&#34;, &#34;Gi&#34;.
         * The value must be between `&#34;10Mi&#34;` and `&#34;500Mi&#34;`, inclusive. And the total container log size
         * (`container_log_max_size` * `container_log_max_files`) cannot exceed 1% of the total storage of the node.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxSize(@Nullable Output<String> containerLogMaxSize) {
            $.containerLogMaxSize = containerLogMaxSize;
            return this;
        }

        /**
         * @param containerLogMaxSize Defines the maximum size of the
         * container log file before it is rotated. Specified as a positive number and a
         * unit suffix, such as `&#34;100Ki&#34;`, `&#34;10Mi&#34;`. Valid units are &#34;Ki&#34;, &#34;Mi&#34;, &#34;Gi&#34;.
         * The value must be between `&#34;10Mi&#34;` and `&#34;500Mi&#34;`, inclusive. And the total container log size
         * (`container_log_max_size` * `container_log_max_files`) cannot exceed 1% of the total storage of the node.
         * 
         * @return builder
         * 
         */
        public Builder containerLogMaxSize(String containerLogMaxSize) {
            return containerLogMaxSize(Output.of(containerLogMaxSize));
        }

        /**
         * @param cpuCfsQuota If true, enables CPU CFS quota enforcement for
         * containers that specify CPU limits.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuota(@Nullable Output<Boolean> cpuCfsQuota) {
            $.cpuCfsQuota = cpuCfsQuota;
            return this;
        }

        /**
         * @param cpuCfsQuota If true, enables CPU CFS quota enforcement for
         * containers that specify CPU limits.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuota(Boolean cpuCfsQuota) {
            return cpuCfsQuota(Output.of(cpuCfsQuota));
        }

        /**
         * @param cpuCfsQuotaPeriod The CPU CFS quota period value. Specified
         * as a sequence of decimal numbers, each with optional fraction and a unit suffix,
         * such as `&#34;300ms&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;,
         * &#34;h&#34;. The value must be a positive duration.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaPeriod(@Nullable Output<String> cpuCfsQuotaPeriod) {
            $.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }

        /**
         * @param cpuCfsQuotaPeriod The CPU CFS quota period value. Specified
         * as a sequence of decimal numbers, each with optional fraction and a unit suffix,
         * such as `&#34;300ms&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;,
         * &#34;h&#34;. The value must be a positive duration.
         * 
         * @return builder
         * 
         */
        public Builder cpuCfsQuotaPeriod(String cpuCfsQuotaPeriod) {
            return cpuCfsQuotaPeriod(Output.of(cpuCfsQuotaPeriod));
        }

        /**
         * @param cpuManagerPolicy The CPU management policy on the node. See
         * [K8S CPU Management Policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/).
         * One of `&#34;none&#34;` or `&#34;static&#34;`. If unset (or set to the empty string `&#34;&#34;`), the API will treat the field as if set to &#34;none&#34;.
         * Prior to the 6.4.0 this field was marked as required. The workaround for the required field
         * is setting the empty string `&#34;&#34;`, which will function identically to not setting this field.
         * 
         * @return builder
         * 
         */
        public Builder cpuManagerPolicy(@Nullable Output<String> cpuManagerPolicy) {
            $.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }

        /**
         * @param cpuManagerPolicy The CPU management policy on the node. See
         * [K8S CPU Management Policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/).
         * One of `&#34;none&#34;` or `&#34;static&#34;`. If unset (or set to the empty string `&#34;&#34;`), the API will treat the field as if set to &#34;none&#34;.
         * Prior to the 6.4.0 this field was marked as required. The workaround for the required field
         * is setting the empty string `&#34;&#34;`, which will function identically to not setting this field.
         * 
         * @return builder
         * 
         */
        public Builder cpuManagerPolicy(String cpuManagerPolicy) {
            return cpuManagerPolicy(Output.of(cpuManagerPolicy));
        }

        /**
         * @param imageGcHighThresholdPercent Defines the percent of disk usage after which image garbage collection is always run. The integer must be between 10 and 85, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder imageGcHighThresholdPercent(@Nullable Output<Integer> imageGcHighThresholdPercent) {
            $.imageGcHighThresholdPercent = imageGcHighThresholdPercent;
            return this;
        }

        /**
         * @param imageGcHighThresholdPercent Defines the percent of disk usage after which image garbage collection is always run. The integer must be between 10 and 85, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder imageGcHighThresholdPercent(Integer imageGcHighThresholdPercent) {
            return imageGcHighThresholdPercent(Output.of(imageGcHighThresholdPercent));
        }

        /**
         * @param imageGcLowThresholdPercent Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The integer must be between 10 and 85, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder imageGcLowThresholdPercent(@Nullable Output<Integer> imageGcLowThresholdPercent) {
            $.imageGcLowThresholdPercent = imageGcLowThresholdPercent;
            return this;
        }

        /**
         * @param imageGcLowThresholdPercent Defines the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The integer must be between 10 and 85, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder imageGcLowThresholdPercent(Integer imageGcLowThresholdPercent) {
            return imageGcLowThresholdPercent(Output.of(imageGcLowThresholdPercent));
        }

        /**
         * @param imageMaximumGcAge Defines the maximum age an image can be unused before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`, and `&#34;2h45m&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;, &#34;h&#34;. The value must be a positive duration.
         * 
         * @return builder
         * 
         */
        public Builder imageMaximumGcAge(@Nullable Output<String> imageMaximumGcAge) {
            $.imageMaximumGcAge = imageMaximumGcAge;
            return this;
        }

        /**
         * @param imageMaximumGcAge Defines the maximum age an image can be unused before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`, and `&#34;2h45m&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;, &#34;h&#34;. The value must be a positive duration.
         * 
         * @return builder
         * 
         */
        public Builder imageMaximumGcAge(String imageMaximumGcAge) {
            return imageMaximumGcAge(Output.of(imageMaximumGcAge));
        }

        /**
         * @param imageMinimumGcAge Defines the minimum age for an unused image before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`. The value cannot be greater than &#34;2m&#34;.
         * 
         * @return builder
         * 
         */
        public Builder imageMinimumGcAge(@Nullable Output<String> imageMinimumGcAge) {
            $.imageMinimumGcAge = imageMinimumGcAge;
            return this;
        }

        /**
         * @param imageMinimumGcAge Defines the minimum age for an unused image before it is garbage collected. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as `&#34;300s&#34;`, `&#34;1.5m&#34;`. The value cannot be greater than &#34;2m&#34;.
         * 
         * @return builder
         * 
         */
        public Builder imageMinimumGcAge(String imageMinimumGcAge) {
            return imageMinimumGcAge(Output.of(imageMinimumGcAge));
        }

        /**
         * @param insecureKubeletReadonlyPortEnabled Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
         * 
         * @return builder
         * 
         */
        public Builder insecureKubeletReadonlyPortEnabled(@Nullable Output<String> insecureKubeletReadonlyPortEnabled) {
            $.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            return this;
        }

        /**
         * @param insecureKubeletReadonlyPortEnabled Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
         * 
         * @return builder
         * 
         */
        public Builder insecureKubeletReadonlyPortEnabled(String insecureKubeletReadonlyPortEnabled) {
            return insecureKubeletReadonlyPortEnabled(Output.of(insecureKubeletReadonlyPortEnabled));
        }

        /**
         * @param podPidsLimit Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
         * 
         * @return builder
         * 
         */
        public Builder podPidsLimit(@Nullable Output<Integer> podPidsLimit) {
            $.podPidsLimit = podPidsLimit;
            return this;
        }

        /**
         * @param podPidsLimit Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
         * 
         * @return builder
         * 
         */
        public Builder podPidsLimit(Integer podPidsLimit) {
            return podPidsLimit(Output.of(podPidsLimit));
        }

        /**
         * @param singleProcessOomKill Defines whether to enable single process OOM killer. If true, the processes in the container will be OOM killed individually instead of as a group.
         * 
         * @return builder
         * 
         */
        public Builder singleProcessOomKill(@Nullable Output<Boolean> singleProcessOomKill) {
            $.singleProcessOomKill = singleProcessOomKill;
            return this;
        }

        /**
         * @param singleProcessOomKill Defines whether to enable single process OOM killer. If true, the processes in the container will be OOM killed individually instead of as a group.
         * 
         * @return builder
         * 
         */
        public Builder singleProcessOomKill(Boolean singleProcessOomKill) {
            return singleProcessOomKill(Output.of(singleProcessOomKill));
        }

        public ClusterNodePoolNodeConfigKubeletConfigArgs build() {
            return $;
        }
    }

}
