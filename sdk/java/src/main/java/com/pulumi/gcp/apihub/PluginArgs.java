// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apihub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apihub.inputs.PluginActionsConfigArgs;
import com.pulumi.gcp.apihub.inputs.PluginConfigTemplateArgs;
import com.pulumi.gcp.apihub.inputs.PluginDocumentationArgs;
import com.pulumi.gcp.apihub.inputs.PluginHostingServiceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluginArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluginArgs Empty = new PluginArgs();

    /**
     * The configuration of actions supported by the plugin.
     * Structure is documented below.
     * 
     */
    @Import(name="actionsConfigs")
    private @Nullable Output<List<PluginActionsConfigArgs>> actionsConfigs;

    /**
     * @return The configuration of actions supported by the plugin.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PluginActionsConfigArgs>>> actionsConfigs() {
        return Optional.ofNullable(this.actionsConfigs);
    }

    /**
     * ConfigTemplate represents the configuration template for a plugin.
     * Structure is documented below.
     * 
     */
    @Import(name="configTemplate")
    private @Nullable Output<PluginConfigTemplateArgs> configTemplate;

    /**
     * @return ConfigTemplate represents the configuration template for a plugin.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PluginConfigTemplateArgs>> configTemplate() {
        return Optional.ofNullable(this.configTemplate);
    }

    /**
     * The plugin description. Max length is 2000 characters (Unicode code
     * points).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The plugin description. Max length is 2000 characters (Unicode code
     * points).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the plugin. Max length is 50 characters (Unicode code
     * points).
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the plugin. Max length is 50 characters (Unicode code
     * points).
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Documentation details.
     * Structure is documented below.
     * 
     */
    @Import(name="documentation")
    private @Nullable Output<PluginDocumentationArgs> documentation;

    /**
     * @return Documentation details.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PluginDocumentationArgs>> documentation() {
        return Optional.ofNullable(this.documentation);
    }

    /**
     * The information related to the service implemented by the plugin
     * developer, used to invoke the plugin&#39;s functionality.
     * Structure is documented below.
     * 
     */
    @Import(name="hostingService")
    private @Nullable Output<PluginHostingServiceArgs> hostingService;

    /**
     * @return The information related to the service implemented by the plugin
     * developer, used to invoke the plugin&#39;s functionality.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PluginHostingServiceArgs>> hostingService() {
        return Optional.ofNullable(this.hostingService);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Possible values:
     * PLUGIN_CATEGORY_UNSPECIFIED
     * API_GATEWAY
     * API_PRODUCER
     * 
     */
    @Import(name="pluginCategory")
    private @Nullable Output<String> pluginCategory;

    /**
     * @return Possible values:
     * PLUGIN_CATEGORY_UNSPECIFIED
     * API_GATEWAY
     * API_PRODUCER
     * 
     */
    public Optional<Output<String>> pluginCategory() {
        return Optional.ofNullable(this.pluginCategory);
    }

    /**
     * The ID to use for the Plugin resource, which will become the final
     * component of the Plugin&#39;s resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     *   the specified id is already used by another Plugin resource in the API hub
     *   instance.
     * * If not provided, a system generated id will be used.
     *   This value should be 4-63 characters, overall resource name which will be
     *   of format
     *   `projects/{project}/locations/{location}/plugins/{plugin}`,
     *   its length is limited to 1000 characters and valid characters are
     *   /a-z[0-9]-_/.
     * 
     */
    @Import(name="pluginId", required=true)
    private Output<String> pluginId;

    /**
     * @return The ID to use for the Plugin resource, which will become the final
     * component of the Plugin&#39;s resource name. This field is optional.
     * * If provided, the same will be used. The service will throw an error if
     *   the specified id is already used by another Plugin resource in the API hub
     *   instance.
     * * If not provided, a system generated id will be used.
     *   This value should be 4-63 characters, overall resource name which will be
     *   of format
     *   `projects/{project}/locations/{location}/plugins/{plugin}`,
     *   its length is limited to 1000 characters and valid characters are
     *   /a-z[0-9]-_/.
     * 
     */
    public Output<String> pluginId() {
        return this.pluginId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private PluginArgs() {}

    private PluginArgs(PluginArgs $) {
        this.actionsConfigs = $.actionsConfigs;
        this.configTemplate = $.configTemplate;
        this.description = $.description;
        this.displayName = $.displayName;
        this.documentation = $.documentation;
        this.hostingService = $.hostingService;
        this.location = $.location;
        this.pluginCategory = $.pluginCategory;
        this.pluginId = $.pluginId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginArgs $;

        public Builder() {
            $ = new PluginArgs();
        }

        public Builder(PluginArgs defaults) {
            $ = new PluginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionsConfigs The configuration of actions supported by the plugin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder actionsConfigs(@Nullable Output<List<PluginActionsConfigArgs>> actionsConfigs) {
            $.actionsConfigs = actionsConfigs;
            return this;
        }

        /**
         * @param actionsConfigs The configuration of actions supported by the plugin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder actionsConfigs(List<PluginActionsConfigArgs> actionsConfigs) {
            return actionsConfigs(Output.of(actionsConfigs));
        }

        /**
         * @param actionsConfigs The configuration of actions supported by the plugin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder actionsConfigs(PluginActionsConfigArgs... actionsConfigs) {
            return actionsConfigs(List.of(actionsConfigs));
        }

        /**
         * @param configTemplate ConfigTemplate represents the configuration template for a plugin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configTemplate(@Nullable Output<PluginConfigTemplateArgs> configTemplate) {
            $.configTemplate = configTemplate;
            return this;
        }

        /**
         * @param configTemplate ConfigTemplate represents the configuration template for a plugin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configTemplate(PluginConfigTemplateArgs configTemplate) {
            return configTemplate(Output.of(configTemplate));
        }

        /**
         * @param description The plugin description. Max length is 2000 characters (Unicode code
         * points).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The plugin description. Max length is 2000 characters (Unicode code
         * points).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the plugin. Max length is 50 characters (Unicode code
         * points).
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the plugin. Max length is 50 characters (Unicode code
         * points).
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentation Documentation details.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder documentation(@Nullable Output<PluginDocumentationArgs> documentation) {
            $.documentation = documentation;
            return this;
        }

        /**
         * @param documentation Documentation details.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder documentation(PluginDocumentationArgs documentation) {
            return documentation(Output.of(documentation));
        }

        /**
         * @param hostingService The information related to the service implemented by the plugin
         * developer, used to invoke the plugin&#39;s functionality.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hostingService(@Nullable Output<PluginHostingServiceArgs> hostingService) {
            $.hostingService = hostingService;
            return this;
        }

        /**
         * @param hostingService The information related to the service implemented by the plugin
         * developer, used to invoke the plugin&#39;s functionality.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hostingService(PluginHostingServiceArgs hostingService) {
            return hostingService(Output.of(hostingService));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param pluginCategory Possible values:
         * PLUGIN_CATEGORY_UNSPECIFIED
         * API_GATEWAY
         * API_PRODUCER
         * 
         * @return builder
         * 
         */
        public Builder pluginCategory(@Nullable Output<String> pluginCategory) {
            $.pluginCategory = pluginCategory;
            return this;
        }

        /**
         * @param pluginCategory Possible values:
         * PLUGIN_CATEGORY_UNSPECIFIED
         * API_GATEWAY
         * API_PRODUCER
         * 
         * @return builder
         * 
         */
        public Builder pluginCategory(String pluginCategory) {
            return pluginCategory(Output.of(pluginCategory));
        }

        /**
         * @param pluginId The ID to use for the Plugin resource, which will become the final
         * component of the Plugin&#39;s resource name. This field is optional.
         * * If provided, the same will be used. The service will throw an error if
         *   the specified id is already used by another Plugin resource in the API hub
         *   instance.
         * * If not provided, a system generated id will be used.
         *   This value should be 4-63 characters, overall resource name which will be
         *   of format
         *   `projects/{project}/locations/{location}/plugins/{plugin}`,
         *   its length is limited to 1000 characters and valid characters are
         *   /a-z[0-9]-_/.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(Output<String> pluginId) {
            $.pluginId = pluginId;
            return this;
        }

        /**
         * @param pluginId The ID to use for the Plugin resource, which will become the final
         * component of the Plugin&#39;s resource name. This field is optional.
         * * If provided, the same will be used. The service will throw an error if
         *   the specified id is already used by another Plugin resource in the API hub
         *   instance.
         * * If not provided, a system generated id will be used.
         *   This value should be 4-63 characters, overall resource name which will be
         *   of format
         *   `projects/{project}/locations/{location}/plugins/{plugin}`,
         *   its length is limited to 1000 characters and valid characters are
         *   /a-z[0-9]-_/.
         * 
         * @return builder
         * 
         */
        public Builder pluginId(String pluginId) {
            return pluginId(Output.of(pluginId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public PluginArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("PluginArgs", "displayName");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PluginArgs", "location");
            }
            if ($.pluginId == null) {
                throw new MissingRequiredPropertyException("PluginArgs", "pluginId");
            }
            return $;
        }
    }

}
