// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.chronicle.inputs.RuleCompilationDiagnosticArgs;
import com.pulumi.gcp.chronicle.inputs.RuleSeverityArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleState extends com.pulumi.resources.ResourceArgs {

    public static final RuleState Empty = new RuleState();

    /**
     * Output only. The run frequencies that are allowed for the rule.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Import(name="allowedRunFrequencies")
    private @Nullable Output<List<String>> allowedRunFrequencies;

    /**
     * @return Output only. The run frequencies that are allowed for the rule.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Optional<Output<List<String>>> allowedRunFrequencies() {
        return Optional.ofNullable(this.allowedRunFrequencies);
    }

    /**
     * Output only. The author of the rule. Extracted from the meta section of text.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return Output only. The author of the rule. Extracted from the meta section of text.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
     * such as compilation errors and compilation warnings.
     * Populated in FULL view.
     * Structure is documented below.
     * 
     */
    @Import(name="compilationDiagnostics")
    private @Nullable Output<List<RuleCompilationDiagnosticArgs>> compilationDiagnostics;

    /**
     * @return Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
     * such as compilation errors and compilation warnings.
     * Populated in FULL view.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RuleCompilationDiagnosticArgs>>> compilationDiagnostics() {
        return Optional.ofNullable(this.compilationDiagnostics);
    }

    /**
     * Output only. The current compilation state of the rule.
     * Populated in FULL view.
     * Possible values:
     * COMPILATION_STATE_UNSPECIFIED
     * SUCCEEDED
     * FAILED
     * 
     */
    @Import(name="compilationState")
    private @Nullable Output<String> compilationState;

    /**
     * @return Output only. The current compilation state of the rule.
     * Populated in FULL view.
     * Possible values:
     * COMPILATION_STATE_UNSPECIFIED
     * SUCCEEDED
     * FAILED
     * 
     */
    public Optional<Output<String>> compilationState() {
        return Optional.ofNullable(this.compilationState);
    }

    /**
     * Output only. The timestamp of when the rule was created.
     * Populated in FULL view.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The timestamp of when the rule was created.
     * Populated in FULL view.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Output only. Resource names of the data tables used in this rule.
     * 
     */
    @Import(name="dataTables")
    private @Nullable Output<List<String>> dataTables;

    /**
     * @return Output only. Resource names of the data tables used in this rule.
     * 
     */
    public Optional<Output<List<String>>> dataTables() {
        return Optional.ofNullable(this.dataTables);
    }

    /**
     * Policy to determine if the rule should be deleted forcefully.
     * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
     * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
     * rule has no associated retrohunts, including completed retrohunts, and no
     * associated detections. Regardless of this field&#39;s value, the rule
     * deployment associated with this rule will also be deleted.
     * Possible values: DEFAULT, FORCE
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return Policy to determine if the rule should be deleted forcefully.
     * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
     * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
     * rule has no associated retrohunts, including completed retrohunts, and no
     * associated detections. Regardless of this field&#39;s value, the rule
     * deployment associated with this rule will also be deleted.
     * Possible values: DEFAULT, FORCE
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * The display name of the severity level. Extracted from the meta section of
     * the rule text.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the severity level. Extracted from the meta section of
     * the rule text.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The etag for this rule.
     * If this is provided on update, the request will succeed if and only if it
     * matches the server-computed value, and will fail with an ABORTED error
     * otherwise.
     * Populated in BASIC view and FULL view.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return The etag for this rule.
     * If this is provided on update, the request will succeed if and only if it
     * matches the server-computed value, and will fail with an ABORTED error
     * otherwise.
     * Populated in BASIC view and FULL view.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Output only. Additional metadata specified in the meta section of text.
     * Populated in FULL view.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Output only. Additional metadata specified in the meta section of text.
     * Populated in FULL view.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Output only. Indicate the rule can run in near real time live rule.
     * If this is true, the rule uses the near real time live rule when the run
     * frequency is set to LIVE.
     * 
     */
    @Import(name="nearRealTimeLiveRuleEligible")
    private @Nullable Output<Boolean> nearRealTimeLiveRuleEligible;

    /**
     * @return Output only. Indicate the rule can run in near real time live rule.
     * If this is true, the rule uses the near real time live rule when the run
     * frequency is set to LIVE.
     * 
     */
    public Optional<Output<Boolean>> nearRealTimeLiveRuleEligible() {
        return Optional.ofNullable(this.nearRealTimeLiveRuleEligible);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Output only. Resource names of the reference lists used in this rule.
     * Populated in FULL view.
     * 
     */
    @Import(name="referenceLists")
    private @Nullable Output<List<String>> referenceLists;

    /**
     * @return Output only. Resource names of the reference lists used in this rule.
     * Populated in FULL view.
     * 
     */
    public Optional<Output<List<String>>> referenceLists() {
        return Optional.ofNullable(this.referenceLists);
    }

    /**
     * Output only. The timestamp of when the rule revision was created.
     * Populated in FULL, REVISION_METADATA_ONLY views.
     * 
     */
    @Import(name="revisionCreateTime")
    private @Nullable Output<String> revisionCreateTime;

    /**
     * @return Output only. The timestamp of when the rule revision was created.
     * Populated in FULL, REVISION_METADATA_ONLY views.
     * 
     */
    public Optional<Output<String>> revisionCreateTime() {
        return Optional.ofNullable(this.revisionCreateTime);
    }

    /**
     * Output only. The revision ID of the rule.
     * A new revision is created whenever the rule text is changed in any way.
     * Format: v_{10 digits}_{9 digits}
     * Populated in REVISION_METADATA_ONLY view and FULL view.
     * 
     */
    @Import(name="revisionId")
    private @Nullable Output<String> revisionId;

    /**
     * @return Output only. The revision ID of the rule.
     * A new revision is created whenever the rule text is changed in any way.
     * Format: v_{10 digits}_{9 digits}
     * Populated in REVISION_METADATA_ONLY view and FULL view.
     * 
     */
    public Optional<Output<String>> revisionId() {
        return Optional.ofNullable(this.revisionId);
    }

    /**
     * Rule Id is the ID of the Rule.
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return Rule Id is the ID of the Rule.
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * Resource name of the DataAccessScope bound to this rule.
     * Populated in BASIC view and FULL view.
     * If reference lists are used in the rule, validations will be performed
     * against this scope to ensure that the reference lists are compatible with
     * both the user&#39;s and the rule&#39;s scopes.
     * The scope should be in the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Resource name of the DataAccessScope bound to this rule.
     * Populated in BASIC view and FULL view.
     * If reference lists are used in the rule, validations will be performed
     * against this scope to ensure that the reference lists are compatible with
     * both the user&#39;s and the rule&#39;s scopes.
     * The scope should be in the format:
     * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * (Output)
     * Output only. The severity of a rule&#39;s compilation diagnostic.
     * Possible values:
     * SEVERITY_UNSPECIFIED
     * WARNING
     * ERROR
     * 
     */
    @Import(name="severities")
    private @Nullable Output<List<RuleSeverityArgs>> severities;

    /**
     * @return (Output)
     * Output only. The severity of a rule&#39;s compilation diagnostic.
     * Possible values:
     * SEVERITY_UNSPECIFIED
     * WARNING
     * ERROR
     * 
     */
    public Optional<Output<List<RuleSeverityArgs>>> severities() {
        return Optional.ofNullable(this.severities);
    }

    /**
     * The YARA-L content of the rule.
     * Populated in FULL view.
     * 
     */
    @Import(name="text")
    private @Nullable Output<String> text;

    /**
     * @return The YARA-L content of the rule.
     * Populated in FULL view.
     * 
     */
    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    /**
     * Possible values:
     * RULE_TYPE_UNSPECIFIED
     * SINGLE_EVENT
     * MULTI_EVENT
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Possible values:
     * RULE_TYPE_UNSPECIFIED
     * SINGLE_EVENT
     * MULTI_EVENT
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RuleState() {}

    private RuleState(RuleState $) {
        this.allowedRunFrequencies = $.allowedRunFrequencies;
        this.author = $.author;
        this.compilationDiagnostics = $.compilationDiagnostics;
        this.compilationState = $.compilationState;
        this.createTime = $.createTime;
        this.dataTables = $.dataTables;
        this.deletionPolicy = $.deletionPolicy;
        this.displayName = $.displayName;
        this.etag = $.etag;
        this.instance = $.instance;
        this.location = $.location;
        this.metadata = $.metadata;
        this.name = $.name;
        this.nearRealTimeLiveRuleEligible = $.nearRealTimeLiveRuleEligible;
        this.project = $.project;
        this.referenceLists = $.referenceLists;
        this.revisionCreateTime = $.revisionCreateTime;
        this.revisionId = $.revisionId;
        this.ruleId = $.ruleId;
        this.scope = $.scope;
        this.severities = $.severities;
        this.text = $.text;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleState $;

        public Builder() {
            $ = new RuleState();
        }

        public Builder(RuleState defaults) {
            $ = new RuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedRunFrequencies Output only. The run frequencies that are allowed for the rule.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder allowedRunFrequencies(@Nullable Output<List<String>> allowedRunFrequencies) {
            $.allowedRunFrequencies = allowedRunFrequencies;
            return this;
        }

        /**
         * @param allowedRunFrequencies Output only. The run frequencies that are allowed for the rule.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder allowedRunFrequencies(List<String> allowedRunFrequencies) {
            return allowedRunFrequencies(Output.of(allowedRunFrequencies));
        }

        /**
         * @param allowedRunFrequencies Output only. The run frequencies that are allowed for the rule.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder allowedRunFrequencies(String... allowedRunFrequencies) {
            return allowedRunFrequencies(List.of(allowedRunFrequencies));
        }

        /**
         * @param author Output only. The author of the rule. Extracted from the meta section of text.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author Output only. The author of the rule. Extracted from the meta section of text.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param compilationDiagnostics Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
         * such as compilation errors and compilation warnings.
         * Populated in FULL view.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder compilationDiagnostics(@Nullable Output<List<RuleCompilationDiagnosticArgs>> compilationDiagnostics) {
            $.compilationDiagnostics = compilationDiagnostics;
            return this;
        }

        /**
         * @param compilationDiagnostics Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
         * such as compilation errors and compilation warnings.
         * Populated in FULL view.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder compilationDiagnostics(List<RuleCompilationDiagnosticArgs> compilationDiagnostics) {
            return compilationDiagnostics(Output.of(compilationDiagnostics));
        }

        /**
         * @param compilationDiagnostics Output only. A list of a rule&#39;s corresponding compilation diagnostic messages
         * such as compilation errors and compilation warnings.
         * Populated in FULL view.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder compilationDiagnostics(RuleCompilationDiagnosticArgs... compilationDiagnostics) {
            return compilationDiagnostics(List.of(compilationDiagnostics));
        }

        /**
         * @param compilationState Output only. The current compilation state of the rule.
         * Populated in FULL view.
         * Possible values:
         * COMPILATION_STATE_UNSPECIFIED
         * SUCCEEDED
         * FAILED
         * 
         * @return builder
         * 
         */
        public Builder compilationState(@Nullable Output<String> compilationState) {
            $.compilationState = compilationState;
            return this;
        }

        /**
         * @param compilationState Output only. The current compilation state of the rule.
         * Populated in FULL view.
         * Possible values:
         * COMPILATION_STATE_UNSPECIFIED
         * SUCCEEDED
         * FAILED
         * 
         * @return builder
         * 
         */
        public Builder compilationState(String compilationState) {
            return compilationState(Output.of(compilationState));
        }

        /**
         * @param createTime Output only. The timestamp of when the rule was created.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The timestamp of when the rule was created.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataTables Output only. Resource names of the data tables used in this rule.
         * 
         * @return builder
         * 
         */
        public Builder dataTables(@Nullable Output<List<String>> dataTables) {
            $.dataTables = dataTables;
            return this;
        }

        /**
         * @param dataTables Output only. Resource names of the data tables used in this rule.
         * 
         * @return builder
         * 
         */
        public Builder dataTables(List<String> dataTables) {
            return dataTables(Output.of(dataTables));
        }

        /**
         * @param dataTables Output only. Resource names of the data tables used in this rule.
         * 
         * @return builder
         * 
         */
        public Builder dataTables(String... dataTables) {
            return dataTables(List.of(dataTables));
        }

        /**
         * @param deletionPolicy Policy to determine if the rule should be deleted forcefully.
         * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
         * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
         * rule has no associated retrohunts, including completed retrohunts, and no
         * associated detections. Regardless of this field&#39;s value, the rule
         * deployment associated with this rule will also be deleted.
         * Possible values: DEFAULT, FORCE
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy Policy to determine if the rule should be deleted forcefully.
         * If deletionPolicy = &#34;FORCE&#34;, any retrohunts and any detections associated with the rule
         * will also be deleted. If deletionPolicy = &#34;DEFAULT&#34;, the call will only succeed if the
         * rule has no associated retrohunts, including completed retrohunts, and no
         * associated detections. Regardless of this field&#39;s value, the rule
         * deployment associated with this rule will also be deleted.
         * Possible values: DEFAULT, FORCE
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param displayName The display name of the severity level. Extracted from the meta section of
         * the rule text.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the severity level. Extracted from the meta section of
         * the rule text.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param etag The etag for this rule.
         * If this is provided on update, the request will succeed if and only if it
         * matches the server-computed value, and will fail with an ABORTED error
         * otherwise.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag The etag for this rule.
         * If this is provided on update, the request will succeed if and only if it
         * matches the server-computed value, and will fail with an ABORTED error
         * otherwise.
         * Populated in BASIC view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param metadata Output only. Additional metadata specified in the meta section of text.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Output only. Additional metadata specified in the meta section of text.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
         * Format:
         * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full resource name for the rule. This unique identifier is generated using values provided for the URL parameters.
         * Format:
         * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nearRealTimeLiveRuleEligible Output only. Indicate the rule can run in near real time live rule.
         * If this is true, the rule uses the near real time live rule when the run
         * frequency is set to LIVE.
         * 
         * @return builder
         * 
         */
        public Builder nearRealTimeLiveRuleEligible(@Nullable Output<Boolean> nearRealTimeLiveRuleEligible) {
            $.nearRealTimeLiveRuleEligible = nearRealTimeLiveRuleEligible;
            return this;
        }

        /**
         * @param nearRealTimeLiveRuleEligible Output only. Indicate the rule can run in near real time live rule.
         * If this is true, the rule uses the near real time live rule when the run
         * frequency is set to LIVE.
         * 
         * @return builder
         * 
         */
        public Builder nearRealTimeLiveRuleEligible(Boolean nearRealTimeLiveRuleEligible) {
            return nearRealTimeLiveRuleEligible(Output.of(nearRealTimeLiveRuleEligible));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param referenceLists Output only. Resource names of the reference lists used in this rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder referenceLists(@Nullable Output<List<String>> referenceLists) {
            $.referenceLists = referenceLists;
            return this;
        }

        /**
         * @param referenceLists Output only. Resource names of the reference lists used in this rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder referenceLists(List<String> referenceLists) {
            return referenceLists(Output.of(referenceLists));
        }

        /**
         * @param referenceLists Output only. Resource names of the reference lists used in this rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder referenceLists(String... referenceLists) {
            return referenceLists(List.of(referenceLists));
        }

        /**
         * @param revisionCreateTime Output only. The timestamp of when the rule revision was created.
         * Populated in FULL, REVISION_METADATA_ONLY views.
         * 
         * @return builder
         * 
         */
        public Builder revisionCreateTime(@Nullable Output<String> revisionCreateTime) {
            $.revisionCreateTime = revisionCreateTime;
            return this;
        }

        /**
         * @param revisionCreateTime Output only. The timestamp of when the rule revision was created.
         * Populated in FULL, REVISION_METADATA_ONLY views.
         * 
         * @return builder
         * 
         */
        public Builder revisionCreateTime(String revisionCreateTime) {
            return revisionCreateTime(Output.of(revisionCreateTime));
        }

        /**
         * @param revisionId Output only. The revision ID of the rule.
         * A new revision is created whenever the rule text is changed in any way.
         * Format: v_{10 digits}_{9 digits}
         * Populated in REVISION_METADATA_ONLY view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder revisionId(@Nullable Output<String> revisionId) {
            $.revisionId = revisionId;
            return this;
        }

        /**
         * @param revisionId Output only. The revision ID of the rule.
         * A new revision is created whenever the rule text is changed in any way.
         * Format: v_{10 digits}_{9 digits}
         * Populated in REVISION_METADATA_ONLY view and FULL view.
         * 
         * @return builder
         * 
         */
        public Builder revisionId(String revisionId) {
            return revisionId(Output.of(revisionId));
        }

        /**
         * @param ruleId Rule Id is the ID of the Rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId Rule Id is the ID of the Rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param scope Resource name of the DataAccessScope bound to this rule.
         * Populated in BASIC view and FULL view.
         * If reference lists are used in the rule, validations will be performed
         * against this scope to ensure that the reference lists are compatible with
         * both the user&#39;s and the rule&#39;s scopes.
         * The scope should be in the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Resource name of the DataAccessScope bound to this rule.
         * Populated in BASIC view and FULL view.
         * If reference lists are used in the rule, validations will be performed
         * against this scope to ensure that the reference lists are compatible with
         * both the user&#39;s and the rule&#39;s scopes.
         * The scope should be in the format:
         * &#34;projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param severities (Output)
         * Output only. The severity of a rule&#39;s compilation diagnostic.
         * Possible values:
         * SEVERITY_UNSPECIFIED
         * WARNING
         * ERROR
         * 
         * @return builder
         * 
         */
        public Builder severities(@Nullable Output<List<RuleSeverityArgs>> severities) {
            $.severities = severities;
            return this;
        }

        /**
         * @param severities (Output)
         * Output only. The severity of a rule&#39;s compilation diagnostic.
         * Possible values:
         * SEVERITY_UNSPECIFIED
         * WARNING
         * ERROR
         * 
         * @return builder
         * 
         */
        public Builder severities(List<RuleSeverityArgs> severities) {
            return severities(Output.of(severities));
        }

        /**
         * @param severities (Output)
         * Output only. The severity of a rule&#39;s compilation diagnostic.
         * Possible values:
         * SEVERITY_UNSPECIFIED
         * WARNING
         * ERROR
         * 
         * @return builder
         * 
         */
        public Builder severities(RuleSeverityArgs... severities) {
            return severities(List.of(severities));
        }

        /**
         * @param text The YARA-L content of the rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The YARA-L content of the rule.
         * Populated in FULL view.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        /**
         * @param type Possible values:
         * RULE_TYPE_UNSPECIFIED
         * SINGLE_EVENT
         * MULTI_EVENT
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Possible values:
         * RULE_TYPE_UNSPECIFIED
         * SINGLE_EVENT
         * MULTI_EVENT
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RuleState build() {
            return $;
        }
    }

}
