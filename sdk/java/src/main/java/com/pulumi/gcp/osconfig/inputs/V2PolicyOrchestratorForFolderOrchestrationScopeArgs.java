// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestrationScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestrationScopeArgs Empty = new V2PolicyOrchestratorForFolderOrchestrationScopeArgs();

    /**
     * Selectors of the orchestration scope. There is a logical AND between each
     * selector defined.
     * When there is no explicit `ResourceHierarchySelector` selector specified,
     * the scope is by default bounded to the parent of the policy orchestrator
     * resource.
     * Structure is documented below.
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<List<V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs>> selectors;

    /**
     * @return Selectors of the orchestration scope. There is a logical AND between each
     * selector defined.
     * When there is no explicit `ResourceHierarchySelector` selector specified,
     * the scope is by default bounded to the parent of the policy orchestrator
     * resource.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs>>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    private V2PolicyOrchestratorForFolderOrchestrationScopeArgs() {}

    private V2PolicyOrchestratorForFolderOrchestrationScopeArgs(V2PolicyOrchestratorForFolderOrchestrationScopeArgs $) {
        this.selectors = $.selectors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestrationScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestrationScopeArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestrationScopeArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestrationScopeArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestrationScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param selectors Selectors of the orchestration scope. There is a logical AND between each
         * selector defined.
         * When there is no explicit `ResourceHierarchySelector` selector specified,
         * the scope is by default bounded to the parent of the policy orchestrator
         * resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<List<V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Selectors of the orchestration scope. There is a logical AND between each
         * selector defined.
         * When there is no explicit `ResourceHierarchySelector` selector specified,
         * the scope is by default bounded to the parent of the policy orchestrator
         * resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors Selectors of the orchestration scope. There is a logical AND between each
         * selector defined.
         * When there is no explicit `ResourceHierarchySelector` selector specified,
         * the scope is by default bounded to the parent of the policy orchestrator
         * resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectors(V2PolicyOrchestratorForFolderOrchestrationScopeSelectorArgs... selectors) {
            return selectors(List.of(selectors));
        }

        public V2PolicyOrchestratorForFolderOrchestrationScopeArgs build() {
            return $;
        }
    }

}
