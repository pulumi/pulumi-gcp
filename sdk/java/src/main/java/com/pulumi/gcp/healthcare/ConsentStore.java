// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.healthcare.ConsentStoreArgs;
import com.pulumi.gcp.healthcare.inputs.ConsentStoreState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The Consent Management API is a tool for tracking user consents and the documentation associated with the consents.
 * 
 * To get more information about ConsentStore, see:
 * 
 * * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.consentStores)
 * * How-to Guides
 *     * [Creating a Consent store](https://cloud.google.com/healthcare/docs/how-tos/consent)
 * 
 * ## Example Usage
 * ### Healthcare Consent Store Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.healthcare.Dataset;
 * import com.pulumi.gcp.healthcare.DatasetArgs;
 * import com.pulumi.gcp.healthcare.ConsentStore;
 * import com.pulumi.gcp.healthcare.ConsentStoreArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dataset = new Dataset(&#34;dataset&#34;, DatasetArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var my_consent = new ConsentStore(&#34;my-consent&#34;, ConsentStoreArgs.builder()        
 *             .dataset(dataset.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Healthcare Consent Store Full
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.healthcare.Dataset;
 * import com.pulumi.gcp.healthcare.DatasetArgs;
 * import com.pulumi.gcp.healthcare.ConsentStore;
 * import com.pulumi.gcp.healthcare.ConsentStoreArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dataset = new Dataset(&#34;dataset&#34;, DatasetArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var my_consent = new ConsentStore(&#34;my-consent&#34;, ConsentStoreArgs.builder()        
 *             .dataset(dataset.id())
 *             .enableConsentCreateOnUpdate(true)
 *             .defaultConsentTtl(&#34;90000s&#34;)
 *             .labels(Map.of(&#34;label1&#34;, &#34;labelvalue1&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Healthcare Consent Store Iam
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.healthcare.Dataset;
 * import com.pulumi.gcp.healthcare.DatasetArgs;
 * import com.pulumi.gcp.healthcare.ConsentStore;
 * import com.pulumi.gcp.healthcare.ConsentStoreArgs;
 * import com.pulumi.gcp.serviceAccount.Account;
 * import com.pulumi.gcp.serviceAccount.AccountArgs;
 * import com.pulumi.gcp.healthcare.ConsentStoreIamMember;
 * import com.pulumi.gcp.healthcare.ConsentStoreIamMemberArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dataset = new Dataset(&#34;dataset&#34;, DatasetArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var my_consent = new ConsentStore(&#34;my-consent&#34;, ConsentStoreArgs.builder()        
 *             .dataset(dataset.id())
 *             .build());
 * 
 *         var test_account = new Account(&#34;test-account&#34;, AccountArgs.builder()        
 *             .accountId(&#34;my-account&#34;)
 *             .displayName(&#34;Test Service Account&#34;)
 *             .build());
 * 
 *         var test_iam = new ConsentStoreIamMember(&#34;test-iam&#34;, ConsentStoreIamMemberArgs.builder()        
 *             .dataset(dataset.id())
 *             .consentStoreId(my_consent.name())
 *             .role(&#34;roles/editor&#34;)
 *             .member(test_account.email().applyValue(email -&gt; String.format(&#34;serviceAccount:%s&#34;, email)))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ConsentStore can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:healthcare/consentStore:ConsentStore default {{dataset}}/consentStores/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:healthcare/consentStore:ConsentStore")
public class ConsentStore extends com.pulumi.resources.CustomResource {
    /**
     * Identifies the dataset addressed by this request. Must be in the format
     * &#39;projects/{project}/locations/{location}/datasets/{dataset}&#39;
     * 
     */
    @Export(name="dataset", type=String.class, parameters={})
    private Output<String> dataset;

    /**
     * @return Identifies the dataset addressed by this request. Must be in the format
     * &#39;projects/{project}/locations/{location}/datasets/{dataset}&#39;
     * 
     */
    public Output<String> dataset() {
        return this.dataset;
    }
    /**
     * Default time to live for consents in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Export(name="defaultConsentTtl", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultConsentTtl;

    /**
     * @return Default time to live for consents in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Output<Optional<String>> defaultConsentTtl() {
        return Codegen.optional(this.defaultConsentTtl);
    }
    /**
     * If true, [consents.patch] [google.cloud.healthcare.v1.consent.UpdateConsent] creates the consent if it does not already exist.
     * 
     */
    @Export(name="enableConsentCreateOnUpdate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableConsentCreateOnUpdate;

    /**
     * @return If true, [consents.patch] [google.cloud.healthcare.v1.consent.UpdateConsent] creates the consent if it does not already exist.
     * 
     */
    public Output<Optional<Boolean>> enableConsentCreateOnUpdate() {
        return Codegen.optional(this.enableConsentCreateOnUpdate);
    }
    /**
     * User-supplied key-value pairs used to organize Consent stores.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
     * conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`
     * Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
     * bytes, and must conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`
     * No more than 64 labels can be associated with a given store.
     * An object containing a list of &#34;key&#34;: value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return User-supplied key-value pairs used to organize Consent stores.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
     * conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`
     * Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
     * bytes, and must conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`
     * No more than 64 labels can be associated with a given store.
     * An object containing a list of &#34;key&#34;: value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The name of this ConsentStore, for example:
     * &#34;consent1&#34;
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of this ConsentStore, for example:
     * &#34;consent1&#34;
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConsentStore(String name) {
        this(name, ConsentStoreArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConsentStore(String name, ConsentStoreArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConsentStore(String name, ConsentStoreArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:healthcare/consentStore:ConsentStore", name, args == null ? ConsentStoreArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConsentStore(String name, Output<String> id, @Nullable ConsentStoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:healthcare/consentStore:ConsentStore", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConsentStore get(String name, Output<String> id, @Nullable ConsentStoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConsentStore(name, id, state, options);
    }
}
