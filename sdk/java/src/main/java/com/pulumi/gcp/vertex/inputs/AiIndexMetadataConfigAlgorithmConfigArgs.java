// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiIndexMetadataConfigAlgorithmConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiIndexMetadataConfigAlgorithmConfigArgs Empty = new AiIndexMetadataConfigAlgorithmConfigArgs();

    /**
     * Configuration options for using brute force search, which simply implements the
     * standard linear search in the database for each query.
     * 
     */
    @Import(name="bruteForceConfig")
    private @Nullable Output<AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs> bruteForceConfig;

    /**
     * @return Configuration options for using brute force search, which simply implements the
     * standard linear search in the database for each query.
     * 
     */
    public Optional<Output<AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs>> bruteForceConfig() {
        return Optional.ofNullable(this.bruteForceConfig);
    }

    /**
     * Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
     * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
     * Structure is documented below.
     * 
     */
    @Import(name="treeAhConfig")
    private @Nullable Output<AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs> treeAhConfig;

    /**
     * @return Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
     * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs>> treeAhConfig() {
        return Optional.ofNullable(this.treeAhConfig);
    }

    private AiIndexMetadataConfigAlgorithmConfigArgs() {}

    private AiIndexMetadataConfigAlgorithmConfigArgs(AiIndexMetadataConfigAlgorithmConfigArgs $) {
        this.bruteForceConfig = $.bruteForceConfig;
        this.treeAhConfig = $.treeAhConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiIndexMetadataConfigAlgorithmConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiIndexMetadataConfigAlgorithmConfigArgs $;

        public Builder() {
            $ = new AiIndexMetadataConfigAlgorithmConfigArgs();
        }

        public Builder(AiIndexMetadataConfigAlgorithmConfigArgs defaults) {
            $ = new AiIndexMetadataConfigAlgorithmConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bruteForceConfig Configuration options for using brute force search, which simply implements the
         * standard linear search in the database for each query.
         * 
         * @return builder
         * 
         */
        public Builder bruteForceConfig(@Nullable Output<AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs> bruteForceConfig) {
            $.bruteForceConfig = bruteForceConfig;
            return this;
        }

        /**
         * @param bruteForceConfig Configuration options for using brute force search, which simply implements the
         * standard linear search in the database for each query.
         * 
         * @return builder
         * 
         */
        public Builder bruteForceConfig(AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs bruteForceConfig) {
            return bruteForceConfig(Output.of(bruteForceConfig));
        }

        /**
         * @param treeAhConfig Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
         * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder treeAhConfig(@Nullable Output<AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs> treeAhConfig) {
            $.treeAhConfig = treeAhConfig;
            return this;
        }

        /**
         * @param treeAhConfig Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
         * Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder treeAhConfig(AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs treeAhConfig) {
            return treeAhConfig(Output.of(treeAhConfig));
        }

        public AiIndexMetadataConfigAlgorithmConfigArgs build() {
            return $;
        }
    }

}
