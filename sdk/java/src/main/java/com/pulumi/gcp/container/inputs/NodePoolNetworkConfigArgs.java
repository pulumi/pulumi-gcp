// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.NodePoolNetworkConfigAdditionalNodeNetworkConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNetworkConfigAdditionalPodNetworkConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNetworkConfigPodCidrOverprovisionConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNetworkConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNetworkConfigArgs Empty = new NodePoolNetworkConfigArgs();

    /**
     * We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.
     * Structure is documented below
     * 
     */
    @Import(name="additionalNodeNetworkConfigs")
    private @Nullable Output<List<NodePoolNetworkConfigAdditionalNodeNetworkConfigArgs>> additionalNodeNetworkConfigs;

    /**
     * @return We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.
     * Structure is documented below
     * 
     */
    public Optional<Output<List<NodePoolNetworkConfigAdditionalNodeNetworkConfigArgs>>> additionalNodeNetworkConfigs() {
        return Optional.ofNullable(this.additionalNodeNetworkConfigs);
    }

    /**
     * We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.
     * Structure is documented below
     * 
     */
    @Import(name="additionalPodNetworkConfigs")
    private @Nullable Output<List<NodePoolNetworkConfigAdditionalPodNetworkConfigArgs>> additionalPodNetworkConfigs;

    /**
     * @return We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.
     * Structure is documented below
     * 
     */
    public Optional<Output<List<NodePoolNetworkConfigAdditionalPodNetworkConfigArgs>>> additionalPodNetworkConfigs() {
        return Optional.ofNullable(this.additionalPodNetworkConfigs);
    }

    /**
     * Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified.
     * 
     */
    @Import(name="createPodRange")
    private @Nullable Output<Boolean> createPodRange;

    /**
     * @return Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified.
     * 
     */
    public Optional<Output<Boolean>> createPodRange() {
        return Optional.ofNullable(this.createPodRange);
    }

    /**
     * Whether nodes have internal IP addresses only.
     * 
     */
    @Import(name="enablePrivateNodes")
    private @Nullable Output<Boolean> enablePrivateNodes;

    /**
     * @return Whether nodes have internal IP addresses only.
     * 
     */
    public Optional<Output<Boolean>> enablePrivateNodes() {
        return Optional.ofNullable(this.enablePrivateNodes);
    }

    @Import(name="podCidrOverprovisionConfig")
    private @Nullable Output<NodePoolNetworkConfigPodCidrOverprovisionConfigArgs> podCidrOverprovisionConfig;

    public Optional<Output<NodePoolNetworkConfigPodCidrOverprovisionConfigArgs>> podCidrOverprovisionConfig() {
        return Optional.ofNullable(this.podCidrOverprovisionConfig);
    }

    /**
     * The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
     * 
     */
    @Import(name="podIpv4CidrBlock")
    private @Nullable Output<String> podIpv4CidrBlock;

    /**
     * @return The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
     * 
     */
    public Optional<Output<String>> podIpv4CidrBlock() {
        return Optional.ofNullable(this.podIpv4CidrBlock);
    }

    /**
     * The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID.
     * 
     */
    @Import(name="podRange")
    private @Nullable Output<String> podRange;

    /**
     * @return The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID.
     * 
     */
    public Optional<Output<String>> podRange() {
        return Optional.ofNullable(this.podRange);
    }

    private NodePoolNetworkConfigArgs() {}

    private NodePoolNetworkConfigArgs(NodePoolNetworkConfigArgs $) {
        this.additionalNodeNetworkConfigs = $.additionalNodeNetworkConfigs;
        this.additionalPodNetworkConfigs = $.additionalPodNetworkConfigs;
        this.createPodRange = $.createPodRange;
        this.enablePrivateNodes = $.enablePrivateNodes;
        this.podCidrOverprovisionConfig = $.podCidrOverprovisionConfig;
        this.podIpv4CidrBlock = $.podIpv4CidrBlock;
        this.podRange = $.podRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNetworkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNetworkConfigArgs $;

        public Builder() {
            $ = new NodePoolNetworkConfigArgs();
        }

        public Builder(NodePoolNetworkConfigArgs defaults) {
            $ = new NodePoolNetworkConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalNodeNetworkConfigs We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder additionalNodeNetworkConfigs(@Nullable Output<List<NodePoolNetworkConfigAdditionalNodeNetworkConfigArgs>> additionalNodeNetworkConfigs) {
            $.additionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
            return this;
        }

        /**
         * @param additionalNodeNetworkConfigs We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder additionalNodeNetworkConfigs(List<NodePoolNetworkConfigAdditionalNodeNetworkConfigArgs> additionalNodeNetworkConfigs) {
            return additionalNodeNetworkConfigs(Output.of(additionalNodeNetworkConfigs));
        }

        /**
         * @param additionalNodeNetworkConfigs We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder additionalNodeNetworkConfigs(NodePoolNetworkConfigAdditionalNodeNetworkConfigArgs... additionalNodeNetworkConfigs) {
            return additionalNodeNetworkConfigs(List.of(additionalNodeNetworkConfigs));
        }

        /**
         * @param additionalPodNetworkConfigs We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder additionalPodNetworkConfigs(@Nullable Output<List<NodePoolNetworkConfigAdditionalPodNetworkConfigArgs>> additionalPodNetworkConfigs) {
            $.additionalPodNetworkConfigs = additionalPodNetworkConfigs;
            return this;
        }

        /**
         * @param additionalPodNetworkConfigs We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder additionalPodNetworkConfigs(List<NodePoolNetworkConfigAdditionalPodNetworkConfigArgs> additionalPodNetworkConfigs) {
            return additionalPodNetworkConfigs(Output.of(additionalPodNetworkConfigs));
        }

        /**
         * @param additionalPodNetworkConfigs We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder additionalPodNetworkConfigs(NodePoolNetworkConfigAdditionalPodNetworkConfigArgs... additionalPodNetworkConfigs) {
            return additionalPodNetworkConfigs(List.of(additionalPodNetworkConfigs));
        }

        /**
         * @param createPodRange Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified.
         * 
         * @return builder
         * 
         */
        public Builder createPodRange(@Nullable Output<Boolean> createPodRange) {
            $.createPodRange = createPodRange;
            return this;
        }

        /**
         * @param createPodRange Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified.
         * 
         * @return builder
         * 
         */
        public Builder createPodRange(Boolean createPodRange) {
            return createPodRange(Output.of(createPodRange));
        }

        /**
         * @param enablePrivateNodes Whether nodes have internal IP addresses only.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(@Nullable Output<Boolean> enablePrivateNodes) {
            $.enablePrivateNodes = enablePrivateNodes;
            return this;
        }

        /**
         * @param enablePrivateNodes Whether nodes have internal IP addresses only.
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            return enablePrivateNodes(Output.of(enablePrivateNodes));
        }

        public Builder podCidrOverprovisionConfig(@Nullable Output<NodePoolNetworkConfigPodCidrOverprovisionConfigArgs> podCidrOverprovisionConfig) {
            $.podCidrOverprovisionConfig = podCidrOverprovisionConfig;
            return this;
        }

        public Builder podCidrOverprovisionConfig(NodePoolNetworkConfigPodCidrOverprovisionConfigArgs podCidrOverprovisionConfig) {
            return podCidrOverprovisionConfig(Output.of(podCidrOverprovisionConfig));
        }

        /**
         * @param podIpv4CidrBlock The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder podIpv4CidrBlock(@Nullable Output<String> podIpv4CidrBlock) {
            $.podIpv4CidrBlock = podIpv4CidrBlock;
            return this;
        }

        /**
         * @param podIpv4CidrBlock The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
         * 
         * @return builder
         * 
         */
        public Builder podIpv4CidrBlock(String podIpv4CidrBlock) {
            return podIpv4CidrBlock(Output.of(podIpv4CidrBlock));
        }

        /**
         * @param podRange The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID.
         * 
         * @return builder
         * 
         */
        public Builder podRange(@Nullable Output<String> podRange) {
            $.podRange = podRange;
            return this;
        }

        /**
         * @param podRange The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID.
         * 
         * @return builder
         * 
         */
        public Builder podRange(String podRange) {
            return podRange(Output.of(podRange));
        }

        public NodePoolNetworkConfigArgs build() {
            return $;
        }
    }

}
