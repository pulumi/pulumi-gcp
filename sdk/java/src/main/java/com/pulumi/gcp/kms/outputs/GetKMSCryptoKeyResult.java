// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.outputs.GetKMSCryptoKeyPrimary;
import com.pulumi.gcp.kms.outputs.GetKMSCryptoKeyVersionTemplate;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKMSCryptoKeyResult {
    private String cryptoKeyBackend;
    private String destroyScheduledDuration;
    private Map<String,String> effectiveLabels;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean importOnly;
    private String keyRing;
    private Map<String,String> labels;
    private String name;
    private List<GetKMSCryptoKeyPrimary> primaries;
    private Map<String,String> pulumiLabels;
    /**
     * @return Defines the cryptographic capabilities of the key.
     * 
     */
    private String purpose;
    /**
     * @return Every time this period passes, generate a new CryptoKeyVersion and set it as
     * the primary. The first rotation will take place after the specified period. The rotation period has the format
     * of a decimal number with up to 9 fractional digits, followed by the letter s (seconds).
     * 
     */
    private String rotationPeriod;
    private Boolean skipInitialVersionCreation;
    private List<GetKMSCryptoKeyVersionTemplate> versionTemplates;

    private GetKMSCryptoKeyResult() {}
    public String cryptoKeyBackend() {
        return this.cryptoKeyBackend;
    }
    public String destroyScheduledDuration() {
        return this.destroyScheduledDuration;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean importOnly() {
        return this.importOnly;
    }
    public String keyRing() {
        return this.keyRing;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public List<GetKMSCryptoKeyPrimary> primaries() {
        return this.primaries;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * @return Defines the cryptographic capabilities of the key.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return Every time this period passes, generate a new CryptoKeyVersion and set it as
     * the primary. The first rotation will take place after the specified period. The rotation period has the format
     * of a decimal number with up to 9 fractional digits, followed by the letter s (seconds).
     * 
     */
    public String rotationPeriod() {
        return this.rotationPeriod;
    }
    public Boolean skipInitialVersionCreation() {
        return this.skipInitialVersionCreation;
    }
    public List<GetKMSCryptoKeyVersionTemplate> versionTemplates() {
        return this.versionTemplates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKMSCryptoKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cryptoKeyBackend;
        private String destroyScheduledDuration;
        private Map<String,String> effectiveLabels;
        private String id;
        private Boolean importOnly;
        private String keyRing;
        private Map<String,String> labels;
        private String name;
        private List<GetKMSCryptoKeyPrimary> primaries;
        private Map<String,String> pulumiLabels;
        private String purpose;
        private String rotationPeriod;
        private Boolean skipInitialVersionCreation;
        private List<GetKMSCryptoKeyVersionTemplate> versionTemplates;
        public Builder() {}
        public Builder(GetKMSCryptoKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKeyBackend = defaults.cryptoKeyBackend;
    	      this.destroyScheduledDuration = defaults.destroyScheduledDuration;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.id = defaults.id;
    	      this.importOnly = defaults.importOnly;
    	      this.keyRing = defaults.keyRing;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.primaries = defaults.primaries;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.purpose = defaults.purpose;
    	      this.rotationPeriod = defaults.rotationPeriod;
    	      this.skipInitialVersionCreation = defaults.skipInitialVersionCreation;
    	      this.versionTemplates = defaults.versionTemplates;
        }

        @CustomType.Setter
        public Builder cryptoKeyBackend(String cryptoKeyBackend) {
            if (cryptoKeyBackend == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "cryptoKeyBackend");
            }
            this.cryptoKeyBackend = cryptoKeyBackend;
            return this;
        }
        @CustomType.Setter
        public Builder destroyScheduledDuration(String destroyScheduledDuration) {
            if (destroyScheduledDuration == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "destroyScheduledDuration");
            }
            this.destroyScheduledDuration = destroyScheduledDuration;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder importOnly(Boolean importOnly) {
            if (importOnly == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "importOnly");
            }
            this.importOnly = importOnly;
            return this;
        }
        @CustomType.Setter
        public Builder keyRing(String keyRing) {
            if (keyRing == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "keyRing");
            }
            this.keyRing = keyRing;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primaries(List<GetKMSCryptoKeyPrimary> primaries) {
            if (primaries == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "primaries");
            }
            this.primaries = primaries;
            return this;
        }
        public Builder primaries(GetKMSCryptoKeyPrimary... primaries) {
            return primaries(List.of(primaries));
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            if (purpose == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "purpose");
            }
            this.purpose = purpose;
            return this;
        }
        @CustomType.Setter
        public Builder rotationPeriod(String rotationPeriod) {
            if (rotationPeriod == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "rotationPeriod");
            }
            this.rotationPeriod = rotationPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder skipInitialVersionCreation(Boolean skipInitialVersionCreation) {
            if (skipInitialVersionCreation == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "skipInitialVersionCreation");
            }
            this.skipInitialVersionCreation = skipInitialVersionCreation;
            return this;
        }
        @CustomType.Setter
        public Builder versionTemplates(List<GetKMSCryptoKeyVersionTemplate> versionTemplates) {
            if (versionTemplates == null) {
              throw new MissingRequiredPropertyException("GetKMSCryptoKeyResult", "versionTemplates");
            }
            this.versionTemplates = versionTemplates;
            return this;
        }
        public Builder versionTemplates(GetKMSCryptoKeyVersionTemplate... versionTemplates) {
            return versionTemplates(List.of(versionTemplates));
        }
        public GetKMSCryptoKeyResult build() {
            final var _resultValue = new GetKMSCryptoKeyResult();
            _resultValue.cryptoKeyBackend = cryptoKeyBackend;
            _resultValue.destroyScheduledDuration = destroyScheduledDuration;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.id = id;
            _resultValue.importOnly = importOnly;
            _resultValue.keyRing = keyRing;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.primaries = primaries;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.purpose = purpose;
            _resultValue.rotationPeriod = rotationPeriod;
            _resultValue.skipInitialVersionCreation = skipInitialVersionCreation;
            _resultValue.versionTemplates = versionTemplates;
            return _resultValue;
        }
    }
}
