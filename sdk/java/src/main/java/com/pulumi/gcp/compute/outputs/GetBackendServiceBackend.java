// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackendServiceBackend {
    private String balancingMode;
    private Double capacityScaler;
    /**
     * @return Textual description for the Backend Service.
     * 
     */
    private String description;
    private String group;
    private Integer maxConnections;
    private Integer maxConnectionsPerEndpoint;
    private Integer maxConnectionsPerInstance;
    private Integer maxRate;
    private Double maxRatePerEndpoint;
    private Double maxRatePerInstance;
    private Double maxUtilization;

    private GetBackendServiceBackend() {}
    public String balancingMode() {
        return this.balancingMode;
    }
    public Double capacityScaler() {
        return this.capacityScaler;
    }
    /**
     * @return Textual description for the Backend Service.
     * 
     */
    public String description() {
        return this.description;
    }
    public String group() {
        return this.group;
    }
    public Integer maxConnections() {
        return this.maxConnections;
    }
    public Integer maxConnectionsPerEndpoint() {
        return this.maxConnectionsPerEndpoint;
    }
    public Integer maxConnectionsPerInstance() {
        return this.maxConnectionsPerInstance;
    }
    public Integer maxRate() {
        return this.maxRate;
    }
    public Double maxRatePerEndpoint() {
        return this.maxRatePerEndpoint;
    }
    public Double maxRatePerInstance() {
        return this.maxRatePerInstance;
    }
    public Double maxUtilization() {
        return this.maxUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String balancingMode;
        private Double capacityScaler;
        private String description;
        private String group;
        private Integer maxConnections;
        private Integer maxConnectionsPerEndpoint;
        private Integer maxConnectionsPerInstance;
        private Integer maxRate;
        private Double maxRatePerEndpoint;
        private Double maxRatePerInstance;
        private Double maxUtilization;
        public Builder() {}
        public Builder(GetBackendServiceBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.balancingMode = defaults.balancingMode;
    	      this.capacityScaler = defaults.capacityScaler;
    	      this.description = defaults.description;
    	      this.group = defaults.group;
    	      this.maxConnections = defaults.maxConnections;
    	      this.maxConnectionsPerEndpoint = defaults.maxConnectionsPerEndpoint;
    	      this.maxConnectionsPerInstance = defaults.maxConnectionsPerInstance;
    	      this.maxRate = defaults.maxRate;
    	      this.maxRatePerEndpoint = defaults.maxRatePerEndpoint;
    	      this.maxRatePerInstance = defaults.maxRatePerInstance;
    	      this.maxUtilization = defaults.maxUtilization;
        }

        @CustomType.Setter
        public Builder balancingMode(String balancingMode) {
            if (balancingMode == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "balancingMode");
            }
            this.balancingMode = balancingMode;
            return this;
        }
        @CustomType.Setter
        public Builder capacityScaler(Double capacityScaler) {
            if (capacityScaler == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "capacityScaler");
            }
            this.capacityScaler = capacityScaler;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionsPerEndpoint(Integer maxConnectionsPerEndpoint) {
            if (maxConnectionsPerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxConnectionsPerEndpoint");
            }
            this.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionsPerInstance(Integer maxConnectionsPerInstance) {
            if (maxConnectionsPerInstance == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxConnectionsPerInstance");
            }
            this.maxConnectionsPerInstance = maxConnectionsPerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxRate(Integer maxRate) {
            if (maxRate == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxRate");
            }
            this.maxRate = maxRate;
            return this;
        }
        @CustomType.Setter
        public Builder maxRatePerEndpoint(Double maxRatePerEndpoint) {
            if (maxRatePerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxRatePerEndpoint");
            }
            this.maxRatePerEndpoint = maxRatePerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder maxRatePerInstance(Double maxRatePerInstance) {
            if (maxRatePerInstance == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxRatePerInstance");
            }
            this.maxRatePerInstance = maxRatePerInstance;
            return this;
        }
        @CustomType.Setter
        public Builder maxUtilization(Double maxUtilization) {
            if (maxUtilization == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceBackend", "maxUtilization");
            }
            this.maxUtilization = maxUtilization;
            return this;
        }
        public GetBackendServiceBackend build() {
            final var _resultValue = new GetBackendServiceBackend();
            _resultValue.balancingMode = balancingMode;
            _resultValue.capacityScaler = capacityScaler;
            _resultValue.description = description;
            _resultValue.group = group;
            _resultValue.maxConnections = maxConnections;
            _resultValue.maxConnectionsPerEndpoint = maxConnectionsPerEndpoint;
            _resultValue.maxConnectionsPerInstance = maxConnectionsPerInstance;
            _resultValue.maxRate = maxRate;
            _resultValue.maxRatePerEndpoint = maxRatePerEndpoint;
            _resultValue.maxRatePerInstance = maxRatePerInstance;
            _resultValue.maxUtilization = maxUtilization;
            return _resultValue;
        }
    }
}
