// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterUserManagedKeysConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterUserManagedKeysConfigArgs Empty = new ClusterUserManagedKeysConfigArgs();

    /**
     * The Certificate Authority Service caPool to use for the aggreation CA in this cluster.
     * 
     */
    @Import(name="aggregationCa")
    private @Nullable Output<String> aggregationCa;

    /**
     * @return The Certificate Authority Service caPool to use for the aggreation CA in this cluster.
     * 
     */
    public Optional<Output<String>> aggregationCa() {
        return Optional.ofNullable(this.aggregationCa);
    }

    /**
     * The Certificate Authority Service caPool to use for the cluster CA in this cluster.
     * 
     */
    @Import(name="clusterCa")
    private @Nullable Output<String> clusterCa;

    /**
     * @return The Certificate Authority Service caPool to use for the cluster CA in this cluster.
     * 
     */
    public Optional<Output<String>> clusterCa() {
        return Optional.ofNullable(this.clusterCa);
    }

    /**
     * The Cloud KMS cryptoKey to use for Confidential Hyperdisk on the control plane nodes.
     * 
     */
    @Import(name="controlPlaneDiskEncryptionKey")
    private @Nullable Output<String> controlPlaneDiskEncryptionKey;

    /**
     * @return The Cloud KMS cryptoKey to use for Confidential Hyperdisk on the control plane nodes.
     * 
     */
    public Optional<Output<String>> controlPlaneDiskEncryptionKey() {
        return Optional.ofNullable(this.controlPlaneDiskEncryptionKey);
    }

    /**
     * The Certificate Authority Service caPool to use for the etcd API CA in this cluster.
     * 
     */
    @Import(name="etcdApiCa")
    private @Nullable Output<String> etcdApiCa;

    /**
     * @return The Certificate Authority Service caPool to use for the etcd API CA in this cluster.
     * 
     */
    public Optional<Output<String>> etcdApiCa() {
        return Optional.ofNullable(this.etcdApiCa);
    }

    /**
     * The Certificate Authority Service caPool to use for the etcd peer CA in this cluster.
     * 
     */
    @Import(name="etcdPeerCa")
    private @Nullable Output<String> etcdPeerCa;

    /**
     * @return The Certificate Authority Service caPool to use for the etcd peer CA in this cluster.
     * 
     */
    public Optional<Output<String>> etcdPeerCa() {
        return Optional.ofNullable(this.etcdPeerCa);
    }

    /**
     * Resource path of the Cloud KMS cryptoKey to use for encryption of internal etcd backups.
     * 
     */
    @Import(name="gkeopsEtcdBackupEncryptionKey")
    private @Nullable Output<String> gkeopsEtcdBackupEncryptionKey;

    /**
     * @return Resource path of the Cloud KMS cryptoKey to use for encryption of internal etcd backups.
     * 
     */
    public Optional<Output<String>> gkeopsEtcdBackupEncryptionKey() {
        return Optional.ofNullable(this.gkeopsEtcdBackupEncryptionKey);
    }

    /**
     * The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
     * 
     */
    @Import(name="serviceAccountSigningKeys")
    private @Nullable Output<List<String>> serviceAccountSigningKeys;

    /**
     * @return The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
     * 
     */
    public Optional<Output<List<String>>> serviceAccountSigningKeys() {
        return Optional.ofNullable(this.serviceAccountSigningKeys);
    }

    /**
     * The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
     * 
     */
    @Import(name="serviceAccountVerificationKeys")
    private @Nullable Output<List<String>> serviceAccountVerificationKeys;

    /**
     * @return The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
     * 
     */
    public Optional<Output<List<String>>> serviceAccountVerificationKeys() {
        return Optional.ofNullable(this.serviceAccountVerificationKeys);
    }

    private ClusterUserManagedKeysConfigArgs() {}

    private ClusterUserManagedKeysConfigArgs(ClusterUserManagedKeysConfigArgs $) {
        this.aggregationCa = $.aggregationCa;
        this.clusterCa = $.clusterCa;
        this.controlPlaneDiskEncryptionKey = $.controlPlaneDiskEncryptionKey;
        this.etcdApiCa = $.etcdApiCa;
        this.etcdPeerCa = $.etcdPeerCa;
        this.gkeopsEtcdBackupEncryptionKey = $.gkeopsEtcdBackupEncryptionKey;
        this.serviceAccountSigningKeys = $.serviceAccountSigningKeys;
        this.serviceAccountVerificationKeys = $.serviceAccountVerificationKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterUserManagedKeysConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterUserManagedKeysConfigArgs $;

        public Builder() {
            $ = new ClusterUserManagedKeysConfigArgs();
        }

        public Builder(ClusterUserManagedKeysConfigArgs defaults) {
            $ = new ClusterUserManagedKeysConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationCa The Certificate Authority Service caPool to use for the aggreation CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder aggregationCa(@Nullable Output<String> aggregationCa) {
            $.aggregationCa = aggregationCa;
            return this;
        }

        /**
         * @param aggregationCa The Certificate Authority Service caPool to use for the aggreation CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder aggregationCa(String aggregationCa) {
            return aggregationCa(Output.of(aggregationCa));
        }

        /**
         * @param clusterCa The Certificate Authority Service caPool to use for the cluster CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCa(@Nullable Output<String> clusterCa) {
            $.clusterCa = clusterCa;
            return this;
        }

        /**
         * @param clusterCa The Certificate Authority Service caPool to use for the cluster CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCa(String clusterCa) {
            return clusterCa(Output.of(clusterCa));
        }

        /**
         * @param controlPlaneDiskEncryptionKey The Cloud KMS cryptoKey to use for Confidential Hyperdisk on the control plane nodes.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneDiskEncryptionKey(@Nullable Output<String> controlPlaneDiskEncryptionKey) {
            $.controlPlaneDiskEncryptionKey = controlPlaneDiskEncryptionKey;
            return this;
        }

        /**
         * @param controlPlaneDiskEncryptionKey The Cloud KMS cryptoKey to use for Confidential Hyperdisk on the control plane nodes.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneDiskEncryptionKey(String controlPlaneDiskEncryptionKey) {
            return controlPlaneDiskEncryptionKey(Output.of(controlPlaneDiskEncryptionKey));
        }

        /**
         * @param etcdApiCa The Certificate Authority Service caPool to use for the etcd API CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder etcdApiCa(@Nullable Output<String> etcdApiCa) {
            $.etcdApiCa = etcdApiCa;
            return this;
        }

        /**
         * @param etcdApiCa The Certificate Authority Service caPool to use for the etcd API CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder etcdApiCa(String etcdApiCa) {
            return etcdApiCa(Output.of(etcdApiCa));
        }

        /**
         * @param etcdPeerCa The Certificate Authority Service caPool to use for the etcd peer CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder etcdPeerCa(@Nullable Output<String> etcdPeerCa) {
            $.etcdPeerCa = etcdPeerCa;
            return this;
        }

        /**
         * @param etcdPeerCa The Certificate Authority Service caPool to use for the etcd peer CA in this cluster.
         * 
         * @return builder
         * 
         */
        public Builder etcdPeerCa(String etcdPeerCa) {
            return etcdPeerCa(Output.of(etcdPeerCa));
        }

        /**
         * @param gkeopsEtcdBackupEncryptionKey Resource path of the Cloud KMS cryptoKey to use for encryption of internal etcd backups.
         * 
         * @return builder
         * 
         */
        public Builder gkeopsEtcdBackupEncryptionKey(@Nullable Output<String> gkeopsEtcdBackupEncryptionKey) {
            $.gkeopsEtcdBackupEncryptionKey = gkeopsEtcdBackupEncryptionKey;
            return this;
        }

        /**
         * @param gkeopsEtcdBackupEncryptionKey Resource path of the Cloud KMS cryptoKey to use for encryption of internal etcd backups.
         * 
         * @return builder
         * 
         */
        public Builder gkeopsEtcdBackupEncryptionKey(String gkeopsEtcdBackupEncryptionKey) {
            return gkeopsEtcdBackupEncryptionKey(Output.of(gkeopsEtcdBackupEncryptionKey));
        }

        /**
         * @param serviceAccountSigningKeys The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountSigningKeys(@Nullable Output<List<String>> serviceAccountSigningKeys) {
            $.serviceAccountSigningKeys = serviceAccountSigningKeys;
            return this;
        }

        /**
         * @param serviceAccountSigningKeys The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountSigningKeys(List<String> serviceAccountSigningKeys) {
            return serviceAccountSigningKeys(Output.of(serviceAccountSigningKeys));
        }

        /**
         * @param serviceAccountSigningKeys The Cloud KMS cryptoKeyVersions to use for signing service account JWTs issued by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountSigningKeys(String... serviceAccountSigningKeys) {
            return serviceAccountSigningKeys(List.of(serviceAccountSigningKeys));
        }

        /**
         * @param serviceAccountVerificationKeys The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountVerificationKeys(@Nullable Output<List<String>> serviceAccountVerificationKeys) {
            $.serviceAccountVerificationKeys = serviceAccountVerificationKeys;
            return this;
        }

        /**
         * @param serviceAccountVerificationKeys The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountVerificationKeys(List<String> serviceAccountVerificationKeys) {
            return serviceAccountVerificationKeys(Output.of(serviceAccountVerificationKeys));
        }

        /**
         * @param serviceAccountVerificationKeys The Cloud KMS cryptoKeyVersions to use for verifying service account JWTs issued by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountVerificationKeys(String... serviceAccountVerificationKeys) {
            return serviceAccountVerificationKeys(List.of(serviceAccountVerificationKeys));
        }

        public ClusterUserManagedKeysConfigArgs build() {
            return $;
        }
    }

}
