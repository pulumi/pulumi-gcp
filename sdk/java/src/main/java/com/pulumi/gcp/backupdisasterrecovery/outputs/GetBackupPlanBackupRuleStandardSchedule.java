// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetBackupPlanBackupRuleStandardScheduleBackupWindow;
import com.pulumi.gcp.backupdisasterrecovery.outputs.GetBackupPlanBackupRuleStandardScheduleWeekDayOfMonth;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackupPlanBackupRuleStandardSchedule {
    /**
     * @return A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
     * &#39;NOT_RUN&#39; if they do not start by the end of the window.
     * 
     */
    private List<GetBackupPlanBackupRuleStandardScheduleBackupWindow> backupWindows;
    /**
     * @return Specifies days of months like 1, 5, or 14 on which jobs will run.
     * 
     */
    private List<Integer> daysOfMonths;
    /**
     * @return Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for &#39;recurrence_type&#39;, &#39;WEEKLY&#39; and is not applicable otherwise. Possible values: [&#34;DAY_OF_WEEK_UNSPECIFIED&#34;, &#34;MONDAY&#34;, &#34;TUESDAY&#34;, &#34;WEDNESDAY&#34;, &#34;THURSDAY&#34;, &#34;FRIDAY&#34;, &#34;SATURDAY&#34;]
     * 
     */
    private List<String> daysOfWeeks;
    /**
     * @return Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
     * This is required for &#39;recurrence_type&#39;, &#39;HOURLY&#39; and is not applicable otherwise.
     * 
     */
    private Integer hourlyFrequency;
    /**
     * @return Specifies values of months Possible values: [&#34;MONTH_UNSPECIFIED&#34;, &#34;JANUARY&#34;, &#34;FEBRUARY&#34;, &#34;MARCH&#34;, &#34;APRIL&#34;, &#34;MAY&#34;, &#34;JUNE&#34;, &#34;JULY&#34;, &#34;AUGUST&#34;, &#34;SEPTEMBER&#34;, &#34;OCTOBER&#34;, &#34;NOVEMBER&#34;, &#34;DECEMBER&#34;]
     * 
     */
    private List<String> months;
    /**
     * @return RecurrenceType enumerates the applicable periodicity for the schedule. Possible values: [&#34;HOURLY&#34;, &#34;DAILY&#34;, &#34;WEEKLY&#34;, &#34;MONTHLY&#34;, &#34;YEARLY&#34;]
     * 
     */
    private String recurrenceType;
    /**
     * @return The time zone to be used when interpreting the schedule.
     * 
     */
    private String timeZone;
    /**
     * @return Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
     * 
     */
    private List<GetBackupPlanBackupRuleStandardScheduleWeekDayOfMonth> weekDayOfMonths;

    private GetBackupPlanBackupRuleStandardSchedule() {}
    /**
     * @return A BackupWindow defines the window of the day during which backup jobs will run. Jobs are queued at the beginning of the window and will be marked as
     * &#39;NOT_RUN&#39; if they do not start by the end of the window.
     * 
     */
    public List<GetBackupPlanBackupRuleStandardScheduleBackupWindow> backupWindows() {
        return this.backupWindows;
    }
    /**
     * @return Specifies days of months like 1, 5, or 14 on which jobs will run.
     * 
     */
    public List<Integer> daysOfMonths() {
        return this.daysOfMonths;
    }
    /**
     * @return Specifies days of week like MONDAY or TUESDAY, on which jobs will run. This is required for &#39;recurrence_type&#39;, &#39;WEEKLY&#39; and is not applicable otherwise. Possible values: [&#34;DAY_OF_WEEK_UNSPECIFIED&#34;, &#34;MONDAY&#34;, &#34;TUESDAY&#34;, &#34;WEDNESDAY&#34;, &#34;THURSDAY&#34;, &#34;FRIDAY&#34;, &#34;SATURDAY&#34;]
     * 
     */
    public List<String> daysOfWeeks() {
        return this.daysOfWeeks;
    }
    /**
     * @return Specifies frequency for hourly backups. An hourly frequency of 2 means jobs will run every 2 hours from start time till end time defined.
     * This is required for &#39;recurrence_type&#39;, &#39;HOURLY&#39; and is not applicable otherwise.
     * 
     */
    public Integer hourlyFrequency() {
        return this.hourlyFrequency;
    }
    /**
     * @return Specifies values of months Possible values: [&#34;MONTH_UNSPECIFIED&#34;, &#34;JANUARY&#34;, &#34;FEBRUARY&#34;, &#34;MARCH&#34;, &#34;APRIL&#34;, &#34;MAY&#34;, &#34;JUNE&#34;, &#34;JULY&#34;, &#34;AUGUST&#34;, &#34;SEPTEMBER&#34;, &#34;OCTOBER&#34;, &#34;NOVEMBER&#34;, &#34;DECEMBER&#34;]
     * 
     */
    public List<String> months() {
        return this.months;
    }
    /**
     * @return RecurrenceType enumerates the applicable periodicity for the schedule. Possible values: [&#34;HOURLY&#34;, &#34;DAILY&#34;, &#34;WEEKLY&#34;, &#34;MONTHLY&#34;, &#34;YEARLY&#34;]
     * 
     */
    public String recurrenceType() {
        return this.recurrenceType;
    }
    /**
     * @return The time zone to be used when interpreting the schedule.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }
    /**
     * @return Specifies a week day of the month like FIRST SUNDAY or LAST MONDAY, on which jobs will run.
     * 
     */
    public List<GetBackupPlanBackupRuleStandardScheduleWeekDayOfMonth> weekDayOfMonths() {
        return this.weekDayOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupPlanBackupRuleStandardSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetBackupPlanBackupRuleStandardScheduleBackupWindow> backupWindows;
        private List<Integer> daysOfMonths;
        private List<String> daysOfWeeks;
        private Integer hourlyFrequency;
        private List<String> months;
        private String recurrenceType;
        private String timeZone;
        private List<GetBackupPlanBackupRuleStandardScheduleWeekDayOfMonth> weekDayOfMonths;
        public Builder() {}
        public Builder(GetBackupPlanBackupRuleStandardSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupWindows = defaults.backupWindows;
    	      this.daysOfMonths = defaults.daysOfMonths;
    	      this.daysOfWeeks = defaults.daysOfWeeks;
    	      this.hourlyFrequency = defaults.hourlyFrequency;
    	      this.months = defaults.months;
    	      this.recurrenceType = defaults.recurrenceType;
    	      this.timeZone = defaults.timeZone;
    	      this.weekDayOfMonths = defaults.weekDayOfMonths;
        }

        @CustomType.Setter
        public Builder backupWindows(List<GetBackupPlanBackupRuleStandardScheduleBackupWindow> backupWindows) {
            if (backupWindows == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "backupWindows");
            }
            this.backupWindows = backupWindows;
            return this;
        }
        public Builder backupWindows(GetBackupPlanBackupRuleStandardScheduleBackupWindow... backupWindows) {
            return backupWindows(List.of(backupWindows));
        }
        @CustomType.Setter
        public Builder daysOfMonths(List<Integer> daysOfMonths) {
            if (daysOfMonths == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "daysOfMonths");
            }
            this.daysOfMonths = daysOfMonths;
            return this;
        }
        public Builder daysOfMonths(Integer... daysOfMonths) {
            return daysOfMonths(List.of(daysOfMonths));
        }
        @CustomType.Setter
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            if (daysOfWeeks == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "daysOfWeeks");
            }
            this.daysOfWeeks = daysOfWeeks;
            return this;
        }
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }
        @CustomType.Setter
        public Builder hourlyFrequency(Integer hourlyFrequency) {
            if (hourlyFrequency == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "hourlyFrequency");
            }
            this.hourlyFrequency = hourlyFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder months(List<String> months) {
            if (months == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "months");
            }
            this.months = months;
            return this;
        }
        public Builder months(String... months) {
            return months(List.of(months));
        }
        @CustomType.Setter
        public Builder recurrenceType(String recurrenceType) {
            if (recurrenceType == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "recurrenceType");
            }
            this.recurrenceType = recurrenceType;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder weekDayOfMonths(List<GetBackupPlanBackupRuleStandardScheduleWeekDayOfMonth> weekDayOfMonths) {
            if (weekDayOfMonths == null) {
              throw new MissingRequiredPropertyException("GetBackupPlanBackupRuleStandardSchedule", "weekDayOfMonths");
            }
            this.weekDayOfMonths = weekDayOfMonths;
            return this;
        }
        public Builder weekDayOfMonths(GetBackupPlanBackupRuleStandardScheduleWeekDayOfMonth... weekDayOfMonths) {
            return weekDayOfMonths(List.of(weekDayOfMonths));
        }
        public GetBackupPlanBackupRuleStandardSchedule build() {
            final var _resultValue = new GetBackupPlanBackupRuleStandardSchedule();
            _resultValue.backupWindows = backupWindows;
            _resultValue.daysOfMonths = daysOfMonths;
            _resultValue.daysOfWeeks = daysOfWeeks;
            _resultValue.hourlyFrequency = hourlyFrequency;
            _resultValue.months = months;
            _resultValue.recurrenceType = recurrenceType;
            _resultValue.timeZone = timeZone;
            _resultValue.weekDayOfMonths = weekDayOfMonths;
            return _resultValue;
        }
    }
}
