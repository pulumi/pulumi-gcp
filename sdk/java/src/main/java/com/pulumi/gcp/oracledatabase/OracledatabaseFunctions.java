// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabaseArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasePlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesPlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructureArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructurePlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresPlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterPlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersPlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesPlainArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetDbServersArgs;
import com.pulumi.gcp.oracledatabase.inputs.GetDbServersPlainArgs;
import com.pulumi.gcp.oracledatabase.outputs.GetAutonomousDatabaseResult;
import com.pulumi.gcp.oracledatabase.outputs.GetAutonomousDatabasesResult;
import com.pulumi.gcp.oracledatabase.outputs.GetCloudExadataInfrastructureResult;
import com.pulumi.gcp.oracledatabase.outputs.GetCloudExadataInfrastructuresResult;
import com.pulumi.gcp.oracledatabase.outputs.GetCloudVmClusterResult;
import com.pulumi.gcp.oracledatabase.outputs.GetCloudVmClustersResult;
import com.pulumi.gcp.oracledatabase.outputs.GetDbNodesResult;
import com.pulumi.gcp.oracledatabase.outputs.GetDbServersResult;
import java.util.concurrent.CompletableFuture;

public final class OracledatabaseFunctions {
    /**
     * Get information about an AutonomousDatabase.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getAutonomousDatabase(GetAutonomousDatabaseArgs.builder()
     *             .location("us-east4")
     *             .autonomousDatabaseId("autonomous_database_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAutonomousDatabaseResult> getAutonomousDatabase(GetAutonomousDatabaseArgs args) {
        return getAutonomousDatabase(args, InvokeOptions.Empty);
    }
    /**
     * Get information about an AutonomousDatabase.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getAutonomousDatabase(GetAutonomousDatabaseArgs.builder()
     *             .location("us-east4")
     *             .autonomousDatabaseId("autonomous_database_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAutonomousDatabaseResult> getAutonomousDatabasePlain(GetAutonomousDatabasePlainArgs args) {
        return getAutonomousDatabasePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about an AutonomousDatabase.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getAutonomousDatabase(GetAutonomousDatabaseArgs.builder()
     *             .location("us-east4")
     *             .autonomousDatabaseId("autonomous_database_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAutonomousDatabaseResult> getAutonomousDatabase(GetAutonomousDatabaseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getAutonomousDatabase:getAutonomousDatabase", TypeShape.of(GetAutonomousDatabaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about an AutonomousDatabase.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getAutonomousDatabase(GetAutonomousDatabaseArgs.builder()
     *             .location("us-east4")
     *             .autonomousDatabaseId("autonomous_database_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAutonomousDatabaseResult> getAutonomousDatabase(GetAutonomousDatabaseArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getAutonomousDatabase:getAutonomousDatabase", TypeShape.of(GetAutonomousDatabaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about an AutonomousDatabase.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getAutonomousDatabase(GetAutonomousDatabaseArgs.builder()
     *             .location("us-east4")
     *             .autonomousDatabaseId("autonomous_database_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAutonomousDatabaseResult> getAutonomousDatabasePlain(GetAutonomousDatabasePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getAutonomousDatabase:getAutonomousDatabase", TypeShape.of(GetAutonomousDatabaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all AutonomousDatabases.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-adbs = OracledatabaseFunctions.getAutonomousDatabases(GetAutonomousDatabasesArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAutonomousDatabasesResult> getAutonomousDatabases(GetAutonomousDatabasesArgs args) {
        return getAutonomousDatabases(args, InvokeOptions.Empty);
    }
    /**
     * List all AutonomousDatabases.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-adbs = OracledatabaseFunctions.getAutonomousDatabases(GetAutonomousDatabasesArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAutonomousDatabasesResult> getAutonomousDatabasesPlain(GetAutonomousDatabasesPlainArgs args) {
        return getAutonomousDatabasesPlain(args, InvokeOptions.Empty);
    }
    /**
     * List all AutonomousDatabases.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-adbs = OracledatabaseFunctions.getAutonomousDatabases(GetAutonomousDatabasesArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAutonomousDatabasesResult> getAutonomousDatabases(GetAutonomousDatabasesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getAutonomousDatabases:getAutonomousDatabases", TypeShape.of(GetAutonomousDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all AutonomousDatabases.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-adbs = OracledatabaseFunctions.getAutonomousDatabases(GetAutonomousDatabasesArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAutonomousDatabasesResult> getAutonomousDatabases(GetAutonomousDatabasesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getAutonomousDatabases:getAutonomousDatabases", TypeShape.of(GetAutonomousDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all AutonomousDatabases.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.autonomousDatabases).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetAutonomousDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-adbs = OracledatabaseFunctions.getAutonomousDatabases(GetAutonomousDatabasesArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAutonomousDatabasesResult> getAutonomousDatabasesPlain(GetAutonomousDatabasesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getAutonomousDatabases:getAutonomousDatabases", TypeShape.of(GetAutonomousDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about an ExadataInfrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructureId("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudExadataInfrastructureResult> getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs args) {
        return getCloudExadataInfrastructure(args, InvokeOptions.Empty);
    }
    /**
     * Get information about an ExadataInfrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructureId("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudExadataInfrastructureResult> getCloudExadataInfrastructurePlain(GetCloudExadataInfrastructurePlainArgs args) {
        return getCloudExadataInfrastructurePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about an ExadataInfrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructureId("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudExadataInfrastructureResult> getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudExadataInfrastructure:getCloudExadataInfrastructure", TypeShape.of(GetCloudExadataInfrastructureResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about an ExadataInfrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructureId("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudExadataInfrastructureResult> getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudExadataInfrastructure:getCloudExadataInfrastructure", TypeShape.of(GetCloudExadataInfrastructureResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about an ExadataInfrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructureArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-instance = OracledatabaseFunctions.getCloudExadataInfrastructure(GetCloudExadataInfrastructureArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructureId("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudExadataInfrastructureResult> getCloudExadataInfrastructurePlain(GetCloudExadataInfrastructurePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getCloudExadataInfrastructure:getCloudExadataInfrastructure", TypeShape.of(GetCloudExadataInfrastructureResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all ExadataInfrastructures.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExadatas = OracledatabaseFunctions.getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudExadataInfrastructuresResult> getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs args) {
        return getCloudExadataInfrastructures(args, InvokeOptions.Empty);
    }
    /**
     * List all ExadataInfrastructures.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExadatas = OracledatabaseFunctions.getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudExadataInfrastructuresResult> getCloudExadataInfrastructuresPlain(GetCloudExadataInfrastructuresPlainArgs args) {
        return getCloudExadataInfrastructuresPlain(args, InvokeOptions.Empty);
    }
    /**
     * List all ExadataInfrastructures.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExadatas = OracledatabaseFunctions.getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudExadataInfrastructuresResult> getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudExadataInfrastructures:getCloudExadataInfrastructures", TypeShape.of(GetCloudExadataInfrastructuresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all ExadataInfrastructures.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExadatas = OracledatabaseFunctions.getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudExadataInfrastructuresResult> getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudExadataInfrastructures:getCloudExadataInfrastructures", TypeShape.of(GetCloudExadataInfrastructuresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all ExadataInfrastructures.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudExadataInfrastructuresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myExadatas = OracledatabaseFunctions.getCloudExadataInfrastructures(GetCloudExadataInfrastructuresArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudExadataInfrastructuresResult> getCloudExadataInfrastructuresPlain(GetCloudExadataInfrastructuresPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getCloudExadataInfrastructures:getCloudExadataInfrastructures", TypeShape.of(GetCloudExadataInfrastructuresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a CloudVmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-vmcluster = OracledatabaseFunctions.getCloudVmCluster(GetCloudVmClusterArgs.builder()
     *             .location("us-east4")
     *             .cloudVmClusterId("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudVmClusterResult> getCloudVmCluster(GetCloudVmClusterArgs args) {
        return getCloudVmCluster(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a CloudVmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-vmcluster = OracledatabaseFunctions.getCloudVmCluster(GetCloudVmClusterArgs.builder()
     *             .location("us-east4")
     *             .cloudVmClusterId("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudVmClusterResult> getCloudVmClusterPlain(GetCloudVmClusterPlainArgs args) {
        return getCloudVmClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information about a CloudVmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-vmcluster = OracledatabaseFunctions.getCloudVmCluster(GetCloudVmClusterArgs.builder()
     *             .location("us-east4")
     *             .cloudVmClusterId("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudVmClusterResult> getCloudVmCluster(GetCloudVmClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudVmCluster:getCloudVmCluster", TypeShape.of(GetCloudVmClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a CloudVmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-vmcluster = OracledatabaseFunctions.getCloudVmCluster(GetCloudVmClusterArgs.builder()
     *             .location("us-east4")
     *             .cloudVmClusterId("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudVmClusterResult> getCloudVmCluster(GetCloudVmClusterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudVmCluster:getCloudVmCluster", TypeShape.of(GetCloudVmClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information about a CloudVmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-vmcluster = OracledatabaseFunctions.getCloudVmCluster(GetCloudVmClusterArgs.builder()
     *             .location("us-east4")
     *             .cloudVmClusterId("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudVmClusterResult> getCloudVmClusterPlain(GetCloudVmClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getCloudVmCluster:getCloudVmCluster", TypeShape.of(GetCloudVmClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all CloudVmClusters.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myVmclusters = OracledatabaseFunctions.getCloudVmClusters(GetCloudVmClustersArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudVmClustersResult> getCloudVmClusters(GetCloudVmClustersArgs args) {
        return getCloudVmClusters(args, InvokeOptions.Empty);
    }
    /**
     * List all CloudVmClusters.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myVmclusters = OracledatabaseFunctions.getCloudVmClusters(GetCloudVmClustersArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudVmClustersResult> getCloudVmClustersPlain(GetCloudVmClustersPlainArgs args) {
        return getCloudVmClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * List all CloudVmClusters.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myVmclusters = OracledatabaseFunctions.getCloudVmClusters(GetCloudVmClustersArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudVmClustersResult> getCloudVmClusters(GetCloudVmClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudVmClusters:getCloudVmClusters", TypeShape.of(GetCloudVmClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all CloudVmClusters.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myVmclusters = OracledatabaseFunctions.getCloudVmClusters(GetCloudVmClustersArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetCloudVmClustersResult> getCloudVmClusters(GetCloudVmClustersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getCloudVmClusters:getCloudVmClusters", TypeShape.of(GetCloudVmClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all CloudVmClusters.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetCloudVmClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myVmclusters = OracledatabaseFunctions.getCloudVmClusters(GetCloudVmClustersArgs.builder()
     *             .location("us-east4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetCloudVmClustersResult> getCloudVmClustersPlain(GetCloudVmClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getCloudVmClusters:getCloudVmClusters", TypeShape.of(GetCloudVmClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all DbNodes of a Cloud VmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters.dbNodes).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbNodes = OracledatabaseFunctions.getDbNodes(GetDbNodesArgs.builder()
     *             .location("us-east4")
     *             .cloudVmCluster("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_nodes` - List of dbNodes. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbnodes&#34;&gt;&lt;/a&gt; The `db_nodes` block supports:
     * 
     * * `name` - The name of the database node resource in the following format: projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}/dbNodes/{db_node}
     * 
     * * `properties` - Various properties of the database node. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid`- OCID of database node.
     * 
     * * `ocpu_count` - OCPU count per database node.
     * 
     * * `memory_size_gb` - The allocated memory in GBs on the database node.
     * 
     * * `db_node_storage_size_gb` - The allocated local node storage in GBs on the database node.
     * 
     * * `db_server_ocid` - The OCID of the Database server associated with the database node.
     * 
     * * `hostname` - The host name for the database node.
     * 
     * * `state` - State of the database node.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Possible values for `state` are:&lt;br&gt;
     * `PROVISIONING` - Indicates that the resource is being provisioned.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UPDATING` - Indicates that the resource is being updated.&lt;br&gt;
     * `STOPPING` - Indicates that the resource is being stopped.&lt;br&gt;
     * `STOPPED` - Indicates that the resource is stopped.&lt;br&gt;
     * `STARTING` - Indicates that the resource is being started.&lt;br&gt;
     * `TERMINATING` - Indicates that the resource is being terminated.&lt;br&gt;
     * `TERMINATED` - Indicates that the resource is terminated.&lt;br&gt;
     * `FAILED` - Indicates that the resource has failed.&lt;br&gt;
     * 
     * * `total_cpu_core_count` - The total number of CPU cores reserved on the database node.
     * 
     */
    public static Output<GetDbNodesResult> getDbNodes(GetDbNodesArgs args) {
        return getDbNodes(args, InvokeOptions.Empty);
    }
    /**
     * List all DbNodes of a Cloud VmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters.dbNodes).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbNodes = OracledatabaseFunctions.getDbNodes(GetDbNodesArgs.builder()
     *             .location("us-east4")
     *             .cloudVmCluster("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_nodes` - List of dbNodes. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbnodes&#34;&gt;&lt;/a&gt; The `db_nodes` block supports:
     * 
     * * `name` - The name of the database node resource in the following format: projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}/dbNodes/{db_node}
     * 
     * * `properties` - Various properties of the database node. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid`- OCID of database node.
     * 
     * * `ocpu_count` - OCPU count per database node.
     * 
     * * `memory_size_gb` - The allocated memory in GBs on the database node.
     * 
     * * `db_node_storage_size_gb` - The allocated local node storage in GBs on the database node.
     * 
     * * `db_server_ocid` - The OCID of the Database server associated with the database node.
     * 
     * * `hostname` - The host name for the database node.
     * 
     * * `state` - State of the database node.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Possible values for `state` are:&lt;br&gt;
     * `PROVISIONING` - Indicates that the resource is being provisioned.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UPDATING` - Indicates that the resource is being updated.&lt;br&gt;
     * `STOPPING` - Indicates that the resource is being stopped.&lt;br&gt;
     * `STOPPED` - Indicates that the resource is stopped.&lt;br&gt;
     * `STARTING` - Indicates that the resource is being started.&lt;br&gt;
     * `TERMINATING` - Indicates that the resource is being terminated.&lt;br&gt;
     * `TERMINATED` - Indicates that the resource is terminated.&lt;br&gt;
     * `FAILED` - Indicates that the resource has failed.&lt;br&gt;
     * 
     * * `total_cpu_core_count` - The total number of CPU cores reserved on the database node.
     * 
     */
    public static CompletableFuture<GetDbNodesResult> getDbNodesPlain(GetDbNodesPlainArgs args) {
        return getDbNodesPlain(args, InvokeOptions.Empty);
    }
    /**
     * List all DbNodes of a Cloud VmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters.dbNodes).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbNodes = OracledatabaseFunctions.getDbNodes(GetDbNodesArgs.builder()
     *             .location("us-east4")
     *             .cloudVmCluster("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_nodes` - List of dbNodes. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbnodes&#34;&gt;&lt;/a&gt; The `db_nodes` block supports:
     * 
     * * `name` - The name of the database node resource in the following format: projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}/dbNodes/{db_node}
     * 
     * * `properties` - Various properties of the database node. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid`- OCID of database node.
     * 
     * * `ocpu_count` - OCPU count per database node.
     * 
     * * `memory_size_gb` - The allocated memory in GBs on the database node.
     * 
     * * `db_node_storage_size_gb` - The allocated local node storage in GBs on the database node.
     * 
     * * `db_server_ocid` - The OCID of the Database server associated with the database node.
     * 
     * * `hostname` - The host name for the database node.
     * 
     * * `state` - State of the database node.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Possible values for `state` are:&lt;br&gt;
     * `PROVISIONING` - Indicates that the resource is being provisioned.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UPDATING` - Indicates that the resource is being updated.&lt;br&gt;
     * `STOPPING` - Indicates that the resource is being stopped.&lt;br&gt;
     * `STOPPED` - Indicates that the resource is stopped.&lt;br&gt;
     * `STARTING` - Indicates that the resource is being started.&lt;br&gt;
     * `TERMINATING` - Indicates that the resource is being terminated.&lt;br&gt;
     * `TERMINATED` - Indicates that the resource is terminated.&lt;br&gt;
     * `FAILED` - Indicates that the resource has failed.&lt;br&gt;
     * 
     * * `total_cpu_core_count` - The total number of CPU cores reserved on the database node.
     * 
     */
    public static Output<GetDbNodesResult> getDbNodes(GetDbNodesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getDbNodes:getDbNodes", TypeShape.of(GetDbNodesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all DbNodes of a Cloud VmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters.dbNodes).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbNodes = OracledatabaseFunctions.getDbNodes(GetDbNodesArgs.builder()
     *             .location("us-east4")
     *             .cloudVmCluster("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_nodes` - List of dbNodes. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbnodes&#34;&gt;&lt;/a&gt; The `db_nodes` block supports:
     * 
     * * `name` - The name of the database node resource in the following format: projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}/dbNodes/{db_node}
     * 
     * * `properties` - Various properties of the database node. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid`- OCID of database node.
     * 
     * * `ocpu_count` - OCPU count per database node.
     * 
     * * `memory_size_gb` - The allocated memory in GBs on the database node.
     * 
     * * `db_node_storage_size_gb` - The allocated local node storage in GBs on the database node.
     * 
     * * `db_server_ocid` - The OCID of the Database server associated with the database node.
     * 
     * * `hostname` - The host name for the database node.
     * 
     * * `state` - State of the database node.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Possible values for `state` are:&lt;br&gt;
     * `PROVISIONING` - Indicates that the resource is being provisioned.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UPDATING` - Indicates that the resource is being updated.&lt;br&gt;
     * `STOPPING` - Indicates that the resource is being stopped.&lt;br&gt;
     * `STOPPED` - Indicates that the resource is stopped.&lt;br&gt;
     * `STARTING` - Indicates that the resource is being started.&lt;br&gt;
     * `TERMINATING` - Indicates that the resource is being terminated.&lt;br&gt;
     * `TERMINATED` - Indicates that the resource is terminated.&lt;br&gt;
     * `FAILED` - Indicates that the resource has failed.&lt;br&gt;
     * 
     * * `total_cpu_core_count` - The total number of CPU cores reserved on the database node.
     * 
     */
    public static Output<GetDbNodesResult> getDbNodes(GetDbNodesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getDbNodes:getDbNodes", TypeShape.of(GetDbNodesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all DbNodes of a Cloud VmCluster.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudVmClusters.dbNodes).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbNodes = OracledatabaseFunctions.getDbNodes(GetDbNodesArgs.builder()
     *             .location("us-east4")
     *             .cloudVmCluster("vmcluster-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_nodes` - List of dbNodes. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbnodes&#34;&gt;&lt;/a&gt; The `db_nodes` block supports:
     * 
     * * `name` - The name of the database node resource in the following format: projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}/dbNodes/{db_node}
     * 
     * * `properties` - Various properties of the database node. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid`- OCID of database node.
     * 
     * * `ocpu_count` - OCPU count per database node.
     * 
     * * `memory_size_gb` - The allocated memory in GBs on the database node.
     * 
     * * `db_node_storage_size_gb` - The allocated local node storage in GBs on the database node.
     * 
     * * `db_server_ocid` - The OCID of the Database server associated with the database node.
     * 
     * * `hostname` - The host name for the database node.
     * 
     * * `state` - State of the database node.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Possible values for `state` are:&lt;br&gt;
     * `PROVISIONING` - Indicates that the resource is being provisioned.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UPDATING` - Indicates that the resource is being updated.&lt;br&gt;
     * `STOPPING` - Indicates that the resource is being stopped.&lt;br&gt;
     * `STOPPED` - Indicates that the resource is stopped.&lt;br&gt;
     * `STARTING` - Indicates that the resource is being started.&lt;br&gt;
     * `TERMINATING` - Indicates that the resource is being terminated.&lt;br&gt;
     * `TERMINATED` - Indicates that the resource is terminated.&lt;br&gt;
     * `FAILED` - Indicates that the resource has failed.&lt;br&gt;
     * 
     * * `total_cpu_core_count` - The total number of CPU cores reserved on the database node.
     * 
     */
    public static CompletableFuture<GetDbNodesResult> getDbNodesPlain(GetDbNodesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getDbNodes:getDbNodes", TypeShape.of(GetDbNodesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all DbServers of a Cloud Exdata Infrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbServers = OracledatabaseFunctions.getDbServers(GetDbServersArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructure("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_servers` - List of dbServers. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbservers&#34;&gt;&lt;/a&gt; The `db_servers` block supports:
     * 
     * * `display_name` - User friendly name for the resource.
     * 
     * * `properties` - Various properties of the databse server. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid` - The OCID of database server.
     * 
     * * `ocpu_count` - The OCPU count per database.
     * 
     * * `max_ocpu_count` - The total number of CPU cores available.
     * 
     * * `memory_size_gb` - The allocated memory in gigabytes on the database server.
     * 
     * * `max_memory_size_gb` - The total memory available in gigabytes.
     * 
     * * `db_node_storage_size_gb` - The local storage per VM.
     * 
     * * `max_db_node_storage_size_gb` - The total local node storage available in GBs.
     * 
     * * `vm_count` - The VM count per database.
     * 
     * * `state` - The current state of the database server.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Allowed values for `state` are:&lt;br&gt;
     * `CREATING` - Indicates that the resource is being created.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UNAVAILABLE` - Indicates that the resource is unavailable.&lt;br&gt;
     * `DELETING` - Indicates that the resource is being deleted.&lt;br&gt;
     * `DELETED` - Indicates that the resource has been deleted.&lt;br&gt;
     * 
     * * `db_node_ids` - The OCID of database nodes associated with the database server.
     * 
     */
    public static Output<GetDbServersResult> getDbServers(GetDbServersArgs args) {
        return getDbServers(args, InvokeOptions.Empty);
    }
    /**
     * List all DbServers of a Cloud Exdata Infrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbServers = OracledatabaseFunctions.getDbServers(GetDbServersArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructure("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_servers` - List of dbServers. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbservers&#34;&gt;&lt;/a&gt; The `db_servers` block supports:
     * 
     * * `display_name` - User friendly name for the resource.
     * 
     * * `properties` - Various properties of the databse server. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid` - The OCID of database server.
     * 
     * * `ocpu_count` - The OCPU count per database.
     * 
     * * `max_ocpu_count` - The total number of CPU cores available.
     * 
     * * `memory_size_gb` - The allocated memory in gigabytes on the database server.
     * 
     * * `max_memory_size_gb` - The total memory available in gigabytes.
     * 
     * * `db_node_storage_size_gb` - The local storage per VM.
     * 
     * * `max_db_node_storage_size_gb` - The total local node storage available in GBs.
     * 
     * * `vm_count` - The VM count per database.
     * 
     * * `state` - The current state of the database server.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Allowed values for `state` are:&lt;br&gt;
     * `CREATING` - Indicates that the resource is being created.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UNAVAILABLE` - Indicates that the resource is unavailable.&lt;br&gt;
     * `DELETING` - Indicates that the resource is being deleted.&lt;br&gt;
     * `DELETED` - Indicates that the resource has been deleted.&lt;br&gt;
     * 
     * * `db_node_ids` - The OCID of database nodes associated with the database server.
     * 
     */
    public static CompletableFuture<GetDbServersResult> getDbServersPlain(GetDbServersPlainArgs args) {
        return getDbServersPlain(args, InvokeOptions.Empty);
    }
    /**
     * List all DbServers of a Cloud Exdata Infrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbServers = OracledatabaseFunctions.getDbServers(GetDbServersArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructure("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_servers` - List of dbServers. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbservers&#34;&gt;&lt;/a&gt; The `db_servers` block supports:
     * 
     * * `display_name` - User friendly name for the resource.
     * 
     * * `properties` - Various properties of the databse server. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid` - The OCID of database server.
     * 
     * * `ocpu_count` - The OCPU count per database.
     * 
     * * `max_ocpu_count` - The total number of CPU cores available.
     * 
     * * `memory_size_gb` - The allocated memory in gigabytes on the database server.
     * 
     * * `max_memory_size_gb` - The total memory available in gigabytes.
     * 
     * * `db_node_storage_size_gb` - The local storage per VM.
     * 
     * * `max_db_node_storage_size_gb` - The total local node storage available in GBs.
     * 
     * * `vm_count` - The VM count per database.
     * 
     * * `state` - The current state of the database server.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Allowed values for `state` are:&lt;br&gt;
     * `CREATING` - Indicates that the resource is being created.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UNAVAILABLE` - Indicates that the resource is unavailable.&lt;br&gt;
     * `DELETING` - Indicates that the resource is being deleted.&lt;br&gt;
     * `DELETED` - Indicates that the resource has been deleted.&lt;br&gt;
     * 
     * * `db_node_ids` - The OCID of database nodes associated with the database server.
     * 
     */
    public static Output<GetDbServersResult> getDbServers(GetDbServersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getDbServers:getDbServers", TypeShape.of(GetDbServersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all DbServers of a Cloud Exdata Infrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbServers = OracledatabaseFunctions.getDbServers(GetDbServersArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructure("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_servers` - List of dbServers. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbservers&#34;&gt;&lt;/a&gt; The `db_servers` block supports:
     * 
     * * `display_name` - User friendly name for the resource.
     * 
     * * `properties` - Various properties of the databse server. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid` - The OCID of database server.
     * 
     * * `ocpu_count` - The OCPU count per database.
     * 
     * * `max_ocpu_count` - The total number of CPU cores available.
     * 
     * * `memory_size_gb` - The allocated memory in gigabytes on the database server.
     * 
     * * `max_memory_size_gb` - The total memory available in gigabytes.
     * 
     * * `db_node_storage_size_gb` - The local storage per VM.
     * 
     * * `max_db_node_storage_size_gb` - The total local node storage available in GBs.
     * 
     * * `vm_count` - The VM count per database.
     * 
     * * `state` - The current state of the database server.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Allowed values for `state` are:&lt;br&gt;
     * `CREATING` - Indicates that the resource is being created.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UNAVAILABLE` - Indicates that the resource is unavailable.&lt;br&gt;
     * `DELETING` - Indicates that the resource is being deleted.&lt;br&gt;
     * `DELETED` - Indicates that the resource has been deleted.&lt;br&gt;
     * 
     * * `db_node_ids` - The OCID of database nodes associated with the database server.
     * 
     */
    public static Output<GetDbServersResult> getDbServers(GetDbServersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:oracledatabase/getDbServers:getDbServers", TypeShape.of(GetDbServersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * List all DbServers of a Cloud Exdata Infrastructure.
     * 
     * For more information see the
     * [API](https://cloud.google.com/oracle/database/docs/reference/rest/v1/projects.locations.cloudExadataInfrastructures.dbServers).
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.oracledatabase.OracledatabaseFunctions;
     * import com.pulumi.gcp.oracledatabase.inputs.GetDbServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myDbServers = OracledatabaseFunctions.getDbServers(GetDbServersArgs.builder()
     *             .location("us-east4")
     *             .cloudExadataInfrastructure("exadata-id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * * `db_servers` - List of dbServers. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_dbservers&#34;&gt;&lt;/a&gt; The `db_servers` block supports:
     * 
     * * `display_name` - User friendly name for the resource.
     * 
     * * `properties` - Various properties of the databse server. Structure is documented below.
     * 
     * &lt;a name=&#34;nested_properties&#34;&gt;&lt;/a&gt; The `properties` block supports:
     * 
     * * `ocid` - The OCID of database server.
     * 
     * * `ocpu_count` - The OCPU count per database.
     * 
     * * `max_ocpu_count` - The total number of CPU cores available.
     * 
     * * `memory_size_gb` - The allocated memory in gigabytes on the database server.
     * 
     * * `max_memory_size_gb` - The total memory available in gigabytes.
     * 
     * * `db_node_storage_size_gb` - The local storage per VM.
     * 
     * * `max_db_node_storage_size_gb` - The total local node storage available in GBs.
     * 
     * * `vm_count` - The VM count per database.
     * 
     * * `state` - The current state of the database server.
     * &lt;a name=&#34;nested_states&#34;&gt;&lt;/a&gt;Allowed values for `state` are:&lt;br&gt;
     * `CREATING` - Indicates that the resource is being created.&lt;br&gt;
     * `AVAILABLE` - Indicates that the resource is available.&lt;br&gt;
     * `UNAVAILABLE` - Indicates that the resource is unavailable.&lt;br&gt;
     * `DELETING` - Indicates that the resource is being deleted.&lt;br&gt;
     * `DELETED` - Indicates that the resource has been deleted.&lt;br&gt;
     * 
     * * `db_node_ids` - The OCID of database nodes associated with the database server.
     * 
     */
    public static CompletableFuture<GetDbServersResult> getDbServersPlain(GetDbServersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:oracledatabase/getDbServers:getDbServers", TypeShape.of(GetDbServersResult.class), args, Utilities.withVersion(options));
    }
}
