// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigAuxiliaryNodeGroupNodeGroupArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterClusterConfigAuxiliaryNodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterClusterConfigAuxiliaryNodeGroupArgs Empty = new ClusterClusterConfigAuxiliaryNodeGroupArgs();

    /**
     * A node group ID. Generated if not specified. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.
     * 
     */
    @Import(name="nodeGroupId")
    private @Nullable Output<String> nodeGroupId;

    /**
     * @return A node group ID. Generated if not specified. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.
     * 
     */
    public Optional<Output<String>> nodeGroupId() {
        return Optional.ofNullable(this.nodeGroupId);
    }

    /**
     * Node group configuration.
     * 
     */
    @Import(name="nodeGroups", required=true)
    private Output<List<ClusterClusterConfigAuxiliaryNodeGroupNodeGroupArgs>> nodeGroups;

    /**
     * @return Node group configuration.
     * 
     */
    public Output<List<ClusterClusterConfigAuxiliaryNodeGroupNodeGroupArgs>> nodeGroups() {
        return this.nodeGroups;
    }

    private ClusterClusterConfigAuxiliaryNodeGroupArgs() {}

    private ClusterClusterConfigAuxiliaryNodeGroupArgs(ClusterClusterConfigAuxiliaryNodeGroupArgs $) {
        this.nodeGroupId = $.nodeGroupId;
        this.nodeGroups = $.nodeGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterClusterConfigAuxiliaryNodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterClusterConfigAuxiliaryNodeGroupArgs $;

        public Builder() {
            $ = new ClusterClusterConfigAuxiliaryNodeGroupArgs();
        }

        public Builder(ClusterClusterConfigAuxiliaryNodeGroupArgs defaults) {
            $ = new ClusterClusterConfigAuxiliaryNodeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeGroupId A node group ID. Generated if not specified. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupId(@Nullable Output<String> nodeGroupId) {
            $.nodeGroupId = nodeGroupId;
            return this;
        }

        /**
         * @param nodeGroupId A node group ID. Generated if not specified. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroupId(String nodeGroupId) {
            return nodeGroupId(Output.of(nodeGroupId));
        }

        /**
         * @param nodeGroups Node group configuration.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroups(Output<List<ClusterClusterConfigAuxiliaryNodeGroupNodeGroupArgs>> nodeGroups) {
            $.nodeGroups = nodeGroups;
            return this;
        }

        /**
         * @param nodeGroups Node group configuration.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroups(List<ClusterClusterConfigAuxiliaryNodeGroupNodeGroupArgs> nodeGroups) {
            return nodeGroups(Output.of(nodeGroups));
        }

        /**
         * @param nodeGroups Node group configuration.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroups(ClusterClusterConfigAuxiliaryNodeGroupNodeGroupArgs... nodeGroups) {
            return nodeGroups(List.of(nodeGroups));
        }

        public ClusterClusterConfigAuxiliaryNodeGroupArgs build() {
            if ($.nodeGroups == null) {
                throw new MissingRequiredPropertyException("ClusterClusterConfigAuxiliaryNodeGroupArgs", "nodeGroups");
            }
            return $;
        }
    }

}
