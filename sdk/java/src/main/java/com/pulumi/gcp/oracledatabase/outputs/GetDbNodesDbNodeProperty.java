// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbNodesDbNodeProperty {
    /**
     * @return Output only
     * 
     */
    private Integer dbNodeStorageSizeGb;
    /**
     * @return Output only
     * 
     */
    private String dbServerOcid;
    /**
     * @return Output only
     * 
     */
    private String hostname;
    /**
     * @return Output only
     * 
     */
    private Integer memorySizeGb;
    /**
     * @return Output only
     * 
     */
    private String ocid;
    /**
     * @return Output only
     * 
     */
    private Integer ocpuCount;
    /**
     * @return Output only
     * 
     */
    private String state;
    /**
     * @return Output only
     * 
     */
    private Integer totalCpuCoreCount;

    private GetDbNodesDbNodeProperty() {}
    /**
     * @return Output only
     * 
     */
    public Integer dbNodeStorageSizeGb() {
        return this.dbNodeStorageSizeGb;
    }
    /**
     * @return Output only
     * 
     */
    public String dbServerOcid() {
        return this.dbServerOcid;
    }
    /**
     * @return Output only
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Output only
     * 
     */
    public Integer memorySizeGb() {
        return this.memorySizeGb;
    }
    /**
     * @return Output only
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return Output only
     * 
     */
    public Integer ocpuCount() {
        return this.ocpuCount;
    }
    /**
     * @return Output only
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Output only
     * 
     */
    public Integer totalCpuCoreCount() {
        return this.totalCpuCoreCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbNodesDbNodeProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dbNodeStorageSizeGb;
        private String dbServerOcid;
        private String hostname;
        private Integer memorySizeGb;
        private String ocid;
        private Integer ocpuCount;
        private String state;
        private Integer totalCpuCoreCount;
        public Builder() {}
        public Builder(GetDbNodesDbNodeProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbNodeStorageSizeGb = defaults.dbNodeStorageSizeGb;
    	      this.dbServerOcid = defaults.dbServerOcid;
    	      this.hostname = defaults.hostname;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.ocid = defaults.ocid;
    	      this.ocpuCount = defaults.ocpuCount;
    	      this.state = defaults.state;
    	      this.totalCpuCoreCount = defaults.totalCpuCoreCount;
        }

        @CustomType.Setter
        public Builder dbNodeStorageSizeGb(Integer dbNodeStorageSizeGb) {
            if (dbNodeStorageSizeGb == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "dbNodeStorageSizeGb");
            }
            this.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerOcid(String dbServerOcid) {
            if (dbServerOcid == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "dbServerOcid");
            }
            this.dbServerOcid = dbServerOcid;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGb(Integer memorySizeGb) {
            if (memorySizeGb == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "memorySizeGb");
            }
            this.memorySizeGb = memorySizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuCount(Integer ocpuCount) {
            if (ocpuCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "ocpuCount");
            }
            this.ocpuCount = ocpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder totalCpuCoreCount(Integer totalCpuCoreCount) {
            if (totalCpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNodeProperty", "totalCpuCoreCount");
            }
            this.totalCpuCoreCount = totalCpuCoreCount;
            return this;
        }
        public GetDbNodesDbNodeProperty build() {
            final var _resultValue = new GetDbNodesDbNodeProperty();
            _resultValue.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            _resultValue.dbServerOcid = dbServerOcid;
            _resultValue.hostname = hostname;
            _resultValue.memorySizeGb = memorySizeGb;
            _resultValue.ocid = ocid;
            _resultValue.ocpuCount = ocpuCount;
            _resultValue.state = state;
            _resultValue.totalCpuCoreCount = totalCpuCoreCount;
            return _resultValue;
        }
    }
}
