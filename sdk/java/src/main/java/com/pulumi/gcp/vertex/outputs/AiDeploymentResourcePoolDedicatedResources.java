// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.outputs.AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec;
import com.pulumi.gcp.vertex.outputs.AiDeploymentResourcePoolDedicatedResourcesMachineSpec;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AiDeploymentResourcePoolDedicatedResources {
    /**
     * @return A list of the metric specifications that overrides a resource utilization metric.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec> autoscalingMetricSpecs;
    /**
     * @return The specification of a single machine used by the prediction
     * Structure is documented below.
     * 
     */
    private AiDeploymentResourcePoolDedicatedResourcesMachineSpec machineSpec;
    /**
     * @return The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
     * 
     */
    private @Nullable Integer maxReplicaCount;
    /**
     * @return The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
     * 
     */
    private Integer minReplicaCount;

    private AiDeploymentResourcePoolDedicatedResources() {}
    /**
     * @return A list of the metric specifications that overrides a resource utilization metric.
     * Structure is documented below.
     * 
     */
    public List<AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec> autoscalingMetricSpecs() {
        return this.autoscalingMetricSpecs == null ? List.of() : this.autoscalingMetricSpecs;
    }
    /**
     * @return The specification of a single machine used by the prediction
     * Structure is documented below.
     * 
     */
    public AiDeploymentResourcePoolDedicatedResourcesMachineSpec machineSpec() {
        return this.machineSpec;
    }
    /**
     * @return The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
     * 
     */
    public Optional<Integer> maxReplicaCount() {
        return Optional.ofNullable(this.maxReplicaCount);
    }
    /**
     * @return The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
     * 
     */
    public Integer minReplicaCount() {
        return this.minReplicaCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiDeploymentResourcePoolDedicatedResources defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec> autoscalingMetricSpecs;
        private AiDeploymentResourcePoolDedicatedResourcesMachineSpec machineSpec;
        private @Nullable Integer maxReplicaCount;
        private Integer minReplicaCount;
        public Builder() {}
        public Builder(AiDeploymentResourcePoolDedicatedResources defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingMetricSpecs = defaults.autoscalingMetricSpecs;
    	      this.machineSpec = defaults.machineSpec;
    	      this.maxReplicaCount = defaults.maxReplicaCount;
    	      this.minReplicaCount = defaults.minReplicaCount;
        }

        @CustomType.Setter
        public Builder autoscalingMetricSpecs(@Nullable List<AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec> autoscalingMetricSpecs) {

            this.autoscalingMetricSpecs = autoscalingMetricSpecs;
            return this;
        }
        public Builder autoscalingMetricSpecs(AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec... autoscalingMetricSpecs) {
            return autoscalingMetricSpecs(List.of(autoscalingMetricSpecs));
        }
        @CustomType.Setter
        public Builder machineSpec(AiDeploymentResourcePoolDedicatedResourcesMachineSpec machineSpec) {
            if (machineSpec == null) {
              throw new MissingRequiredPropertyException("AiDeploymentResourcePoolDedicatedResources", "machineSpec");
            }
            this.machineSpec = machineSpec;
            return this;
        }
        @CustomType.Setter
        public Builder maxReplicaCount(@Nullable Integer maxReplicaCount) {

            this.maxReplicaCount = maxReplicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder minReplicaCount(Integer minReplicaCount) {
            if (minReplicaCount == null) {
              throw new MissingRequiredPropertyException("AiDeploymentResourcePoolDedicatedResources", "minReplicaCount");
            }
            this.minReplicaCount = minReplicaCount;
            return this;
        }
        public AiDeploymentResourcePoolDedicatedResources build() {
            final var _resultValue = new AiDeploymentResourcePoolDedicatedResources();
            _resultValue.autoscalingMetricSpecs = autoscalingMetricSpecs;
            _resultValue.machineSpec = machineSpec;
            _resultValue.maxReplicaCount = maxReplicaCount;
            _resultValue.minReplicaCount = minReplicaCount;
            return _resultValue;
        }
    }
}
