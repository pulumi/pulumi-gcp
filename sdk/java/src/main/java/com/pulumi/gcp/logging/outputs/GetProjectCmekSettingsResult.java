// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectCmekSettingsResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `&#39;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]&#39;`
     * To enable CMEK for the bucket, set this field to a valid kmsKeyName for which the associated service account has the required cloudkms.cryptoKeyEncrypterDecrypter roles assigned for the key.
     * The Cloud KMS key used by the bucket can be updated by changing the kmsKeyName to a new valid key name. Encryption operations that are in progress will be completed with the key that was in use when they started. Decryption operations will be completed using the key that was used at the time of encryption unless access to that key has been revoked.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    private @Nullable String kmsKeyName;
    /**
     * @return The CryptoKeyVersion resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `&#39;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]/cryptoKeyVersions/[VERSION]&#39;`
     * For example:
     * &#34;projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key/cryptoKeyVersions/1&#34;
     * This is a read-only field used to convey the specific configured CryptoKeyVersion of kms_key that has been configured. It will be populated in cases where the CMEK settings are bound to a single key version.
     * 
     */
    private String kmsKeyVersionName;
    /**
     * @return The resource name of the CMEK settings.
     * 
     */
    private String name;
    private String project;
    /**
     * @return The service account associated with a project for which CMEK will apply.
     * Before enabling CMEK for a logging bucket, you must first assign the cloudkms.cryptoKeyEncrypterDecrypter role to the service account associated with the project for which CMEK will apply. Use [v2.getCmekSettings](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getCmekSettings#google.logging.v2.ConfigServiceV2.GetCmekSettings) to obtain the service account ID.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    private String serviceAccountId;

    private GetProjectCmekSettingsResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `&#39;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]&#39;`
     * To enable CMEK for the bucket, set this field to a valid kmsKeyName for which the associated service account has the required cloudkms.cryptoKeyEncrypterDecrypter roles assigned for the key.
     * The Cloud KMS key used by the bucket can be updated by changing the kmsKeyName to a new valid key name. Encryption operations that are in progress will be completed with the key that was in use when they started. Decryption operations will be completed using the key that was used at the time of encryption unless access to that key has been revoked.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    public Optional<String> kmsKeyName() {
        return Optional.ofNullable(this.kmsKeyName);
    }
    /**
     * @return The CryptoKeyVersion resource name for the configured Cloud KMS key.
     * KMS key name format:
     * `&#39;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]/cryptoKeyVersions/[VERSION]&#39;`
     * For example:
     * &#34;projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key/cryptoKeyVersions/1&#34;
     * This is a read-only field used to convey the specific configured CryptoKeyVersion of kms_key that has been configured. It will be populated in cases where the CMEK settings are bound to a single key version.
     * 
     */
    public String kmsKeyVersionName() {
        return this.kmsKeyVersionName;
    }
    /**
     * @return The resource name of the CMEK settings.
     * 
     */
    public String name() {
        return this.name;
    }
    public String project() {
        return this.project;
    }
    /**
     * @return The service account associated with a project for which CMEK will apply.
     * Before enabling CMEK for a logging bucket, you must first assign the cloudkms.cryptoKeyEncrypterDecrypter role to the service account associated with the project for which CMEK will apply. Use [v2.getCmekSettings](https://cloud.google.com/logging/docs/reference/v2/rest/v2/TopLevel/getCmekSettings#google.logging.v2.ConfigServiceV2.GetCmekSettings) to obtain the service account ID.
     * See [Enabling CMEK for Logging Buckets](https://cloud.google.com/logging/docs/routing/managed-encryption-storage) for more information.
     * 
     */
    public String serviceAccountId() {
        return this.serviceAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectCmekSettingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable String kmsKeyName;
        private String kmsKeyVersionName;
        private String name;
        private String project;
        private String serviceAccountId;
        public Builder() {}
        public Builder(GetProjectCmekSettingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.kmsKeyVersionName = defaults.kmsKeyVersionName;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.serviceAccountId = defaults.serviceAccountId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyName(@Nullable String kmsKeyName) {
            this.kmsKeyName = kmsKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyVersionName(String kmsKeyVersionName) {
            this.kmsKeyVersionName = Objects.requireNonNull(kmsKeyVersionName);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountId(String serviceAccountId) {
            this.serviceAccountId = Objects.requireNonNull(serviceAccountId);
            return this;
        }
        public GetProjectCmekSettingsResult build() {
            final var o = new GetProjectCmekSettingsResult();
            o.id = id;
            o.kmsKeyName = kmsKeyName;
            o.kmsKeyVersionName = kmsKeyVersionName;
            o.name = name;
            o.project = project;
            o.serviceAccountId = serviceAccountId;
            return o;
        }
    }
}
