// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPolicyArgs Empty = new BackupPolicyArgs();

    /**
     * Number of daily backups to keep. Note that the minimum daily backup limit is 2.
     * 
     */
    @Import(name="dailyBackupLimit", required=true)
    private Output<Integer> dailyBackupLimit;

    /**
     * @return Number of daily backups to keep. Note that the minimum daily backup limit is 2.
     * 
     */
    public Output<Integer> dailyBackupLimit() {
        return this.dailyBackupLimit;
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If enabled, make backups automatically according to the schedules.
     * This will be applied to all volumes that have this policy attached and enforced on volume level.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If enabled, make backups automatically according to the schedules.
     * This will be applied to all volumes that have this policy attached and enforced on volume level.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the region for the policy to apply to.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Name of the region for the policy to apply to.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
     * 
     */
    @Import(name="monthlyBackupLimit", required=true)
    private Output<Integer> monthlyBackupLimit;

    /**
     * @return Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
     * 
     */
    public Output<Integer> monthlyBackupLimit() {
        return this.monthlyBackupLimit;
    }

    /**
     * The name of the backup policy. Needs to be unique per location.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the backup policy. Needs to be unique per location.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
     * 
     */
    @Import(name="weeklyBackupLimit", required=true)
    private Output<Integer> weeklyBackupLimit;

    /**
     * @return Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
     * 
     */
    public Output<Integer> weeklyBackupLimit() {
        return this.weeklyBackupLimit;
    }

    private BackupPolicyArgs() {}

    private BackupPolicyArgs(BackupPolicyArgs $) {
        this.dailyBackupLimit = $.dailyBackupLimit;
        this.description = $.description;
        this.enabled = $.enabled;
        this.labels = $.labels;
        this.location = $.location;
        this.monthlyBackupLimit = $.monthlyBackupLimit;
        this.name = $.name;
        this.project = $.project;
        this.weeklyBackupLimit = $.weeklyBackupLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPolicyArgs $;

        public Builder() {
            $ = new BackupPolicyArgs();
        }

        public Builder(BackupPolicyArgs defaults) {
            $ = new BackupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyBackupLimit Number of daily backups to keep. Note that the minimum daily backup limit is 2.
         * 
         * @return builder
         * 
         */
        public Builder dailyBackupLimit(Output<Integer> dailyBackupLimit) {
            $.dailyBackupLimit = dailyBackupLimit;
            return this;
        }

        /**
         * @param dailyBackupLimit Number of daily backups to keep. Note that the minimum daily backup limit is 2.
         * 
         * @return builder
         * 
         */
        public Builder dailyBackupLimit(Integer dailyBackupLimit) {
            return dailyBackupLimit(Output.of(dailyBackupLimit));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled If enabled, make backups automatically according to the schedules.
         * This will be applied to all volumes that have this policy attached and enforced on volume level.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If enabled, make backups automatically according to the schedules.
         * This will be applied to all volumes that have this policy attached and enforced on volume level.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Name of the region for the policy to apply to.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Name of the region for the policy to apply to.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param monthlyBackupLimit Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
         * 
         * @return builder
         * 
         */
        public Builder monthlyBackupLimit(Output<Integer> monthlyBackupLimit) {
            $.monthlyBackupLimit = monthlyBackupLimit;
            return this;
        }

        /**
         * @param monthlyBackupLimit Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
         * 
         * @return builder
         * 
         */
        public Builder monthlyBackupLimit(Integer monthlyBackupLimit) {
            return monthlyBackupLimit(Output.of(monthlyBackupLimit));
        }

        /**
         * @param name The name of the backup policy. Needs to be unique per location.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the backup policy. Needs to be unique per location.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param weeklyBackupLimit Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
         * 
         * @return builder
         * 
         */
        public Builder weeklyBackupLimit(Output<Integer> weeklyBackupLimit) {
            $.weeklyBackupLimit = weeklyBackupLimit;
            return this;
        }

        /**
         * @param weeklyBackupLimit Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
         * 
         * @return builder
         * 
         */
        public Builder weeklyBackupLimit(Integer weeklyBackupLimit) {
            return weeklyBackupLimit(Output.of(weeklyBackupLimit));
        }

        public BackupPolicyArgs build() {
            if ($.dailyBackupLimit == null) {
                throw new MissingRequiredPropertyException("BackupPolicyArgs", "dailyBackupLimit");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("BackupPolicyArgs", "location");
            }
            if ($.monthlyBackupLimit == null) {
                throw new MissingRequiredPropertyException("BackupPolicyArgs", "monthlyBackupLimit");
            }
            if ($.weeklyBackupLimit == null) {
                throw new MissingRequiredPropertyException("BackupPolicyArgs", "weeklyBackupLimit");
            }
            return $;
        }
    }

}
