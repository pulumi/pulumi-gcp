// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecAwsS3CompatibleDataSourceS3MetadataArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransferJobTransferSpecAwsS3CompatibleDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferJobTransferSpecAwsS3CompatibleDataSourceArgs Empty = new TransferJobTransferSpecAwsS3CompatibleDataSourceArgs();

    /**
     * Name of the bucket.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Name of the bucket.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Endpoint of the storage service.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return Endpoint of the storage service.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Specifies the path to transfer objects.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Specifies the path to transfer objects.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * S3 compatible metadata.
     * 
     */
    @Import(name="s3Metadata")
    private @Nullable Output<TransferJobTransferSpecAwsS3CompatibleDataSourceS3MetadataArgs> s3Metadata;

    /**
     * @return S3 compatible metadata.
     * 
     */
    public Optional<Output<TransferJobTransferSpecAwsS3CompatibleDataSourceS3MetadataArgs>> s3Metadata() {
        return Optional.ofNullable(this.s3Metadata);
    }

    private TransferJobTransferSpecAwsS3CompatibleDataSourceArgs() {}

    private TransferJobTransferSpecAwsS3CompatibleDataSourceArgs(TransferJobTransferSpecAwsS3CompatibleDataSourceArgs $) {
        this.bucketName = $.bucketName;
        this.endpoint = $.endpoint;
        this.path = $.path;
        this.region = $.region;
        this.s3Metadata = $.s3Metadata;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferJobTransferSpecAwsS3CompatibleDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferJobTransferSpecAwsS3CompatibleDataSourceArgs $;

        public Builder() {
            $ = new TransferJobTransferSpecAwsS3CompatibleDataSourceArgs();
        }

        public Builder(TransferJobTransferSpecAwsS3CompatibleDataSourceArgs defaults) {
            $ = new TransferJobTransferSpecAwsS3CompatibleDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param endpoint Endpoint of the storage service.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Endpoint of the storage service.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param path Specifies the path to transfer objects.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Specifies the path to transfer objects.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param region Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param s3Metadata S3 compatible metadata.
         * 
         * @return builder
         * 
         */
        public Builder s3Metadata(@Nullable Output<TransferJobTransferSpecAwsS3CompatibleDataSourceS3MetadataArgs> s3Metadata) {
            $.s3Metadata = s3Metadata;
            return this;
        }

        /**
         * @param s3Metadata S3 compatible metadata.
         * 
         * @return builder
         * 
         */
        public Builder s3Metadata(TransferJobTransferSpecAwsS3CompatibleDataSourceS3MetadataArgs s3Metadata) {
            return s3Metadata(Output.of(s3Metadata));
        }

        public TransferJobTransferSpecAwsS3CompatibleDataSourceArgs build() {
            if ($.bucketName == null) {
                throw new MissingRequiredPropertyException("TransferJobTransferSpecAwsS3CompatibleDataSourceArgs", "bucketName");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("TransferJobTransferSpecAwsS3CompatibleDataSourceArgs", "endpoint");
            }
            return $;
        }
    }

}
