// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgAptArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgDebArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgGoogetArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgMsiArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgRpmArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgYumArgs;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgZypperArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs Empty = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs();

    /**
     * A package managed by APT.
     * - install: `apt-get update &amp;&amp; apt-get -y install [name]`
     * - remove: `apt-get -y remove [name]`
     *   Structure is documented below.
     * 
     */
    @Import(name="apt")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgAptArgs> apt;

    /**
     * @return A package managed by APT.
     * - install: `apt-get update &amp;&amp; apt-get -y install [name]`
     * - remove: `apt-get -y remove [name]`
     *   Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgAptArgs>> apt() {
        return Optional.ofNullable(this.apt);
    }

    /**
     * A deb package file. dpkg packages only support INSTALLED state.
     * Structure is documented below.
     * 
     */
    @Import(name="deb")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgDebArgs> deb;

    /**
     * @return A deb package file. dpkg packages only support INSTALLED state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgDebArgs>> deb() {
        return Optional.ofNullable(this.deb);
    }

    /**
     * The desired state the agent should maintain for this package.
     * Possible values are: `INSTALLED`, `REMOVED`.
     * 
     */
    @Import(name="desiredState", required=true)
    private Output<String> desiredState;

    /**
     * @return The desired state the agent should maintain for this package.
     * Possible values are: `INSTALLED`, `REMOVED`.
     * 
     */
    public Output<String> desiredState() {
        return this.desiredState;
    }

    /**
     * A package managed by GooGet.
     * - install: `googet -noconfirm install package`
     * - remove: `googet -noconfirm remove package`
     *   Structure is documented below.
     * 
     */
    @Import(name="googet")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgGoogetArgs> googet;

    /**
     * @return A package managed by GooGet.
     * - install: `googet -noconfirm install package`
     * - remove: `googet -noconfirm remove package`
     *   Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgGoogetArgs>> googet() {
        return Optional.ofNullable(this.googet);
    }

    /**
     * An MSI package. MSI packages only support INSTALLED state.
     * Structure is documented below.
     * 
     */
    @Import(name="msi")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgMsiArgs> msi;

    /**
     * @return An MSI package. MSI packages only support INSTALLED state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgMsiArgs>> msi() {
        return Optional.ofNullable(this.msi);
    }

    /**
     * An RPM package file. RPM packages only support INSTALLED state.
     * Structure is documented below.
     * 
     */
    @Import(name="rpm")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgRpmArgs> rpm;

    /**
     * @return An RPM package file. RPM packages only support INSTALLED state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgRpmArgs>> rpm() {
        return Optional.ofNullable(this.rpm);
    }

    /**
     * A package managed by YUM.
     * - install: `yum -y install package`
     * - remove: `yum -y remove package`
     *   Structure is documented below.
     * 
     */
    @Import(name="yum")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgYumArgs> yum;

    /**
     * @return A package managed by YUM.
     * - install: `yum -y install package`
     * - remove: `yum -y remove package`
     *   Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgYumArgs>> yum() {
        return Optional.ofNullable(this.yum);
    }

    /**
     * A package managed by Zypper.
     * - install: `zypper -y install package`
     * - remove: `zypper -y rm package`
     *   Structure is documented below.
     * 
     */
    @Import(name="zypper")
    private @Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgZypperArgs> zypper;

    /**
     * @return A package managed by Zypper.
     * - install: `zypper -y install package`
     * - remove: `zypper -y rm package`
     *   Structure is documented below.
     * 
     */
    public Optional<Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgZypperArgs>> zypper() {
        return Optional.ofNullable(this.zypper);
    }

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs() {}

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs $) {
        this.apt = $.apt;
        this.deb = $.deb;
        this.desiredState = $.desiredState;
        this.googet = $.googet;
        this.msi = $.msi;
        this.rpm = $.rpm;
        this.yum = $.yum;
        this.zypper = $.zypper;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apt A package managed by APT.
         * - install: `apt-get update &amp;&amp; apt-get -y install [name]`
         * - remove: `apt-get -y remove [name]`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder apt(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgAptArgs> apt) {
            $.apt = apt;
            return this;
        }

        /**
         * @param apt A package managed by APT.
         * - install: `apt-get update &amp;&amp; apt-get -y install [name]`
         * - remove: `apt-get -y remove [name]`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder apt(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgAptArgs apt) {
            return apt(Output.of(apt));
        }

        /**
         * @param deb A deb package file. dpkg packages only support INSTALLED state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deb(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgDebArgs> deb) {
            $.deb = deb;
            return this;
        }

        /**
         * @param deb A deb package file. dpkg packages only support INSTALLED state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder deb(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgDebArgs deb) {
            return deb(Output.of(deb));
        }

        /**
         * @param desiredState The desired state the agent should maintain for this package.
         * Possible values are: `INSTALLED`, `REMOVED`.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState The desired state the agent should maintain for this package.
         * Possible values are: `INSTALLED`, `REMOVED`.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param googet A package managed by GooGet.
         * - install: `googet -noconfirm install package`
         * - remove: `googet -noconfirm remove package`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder googet(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgGoogetArgs> googet) {
            $.googet = googet;
            return this;
        }

        /**
         * @param googet A package managed by GooGet.
         * - install: `googet -noconfirm install package`
         * - remove: `googet -noconfirm remove package`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder googet(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgGoogetArgs googet) {
            return googet(Output.of(googet));
        }

        /**
         * @param msi An MSI package. MSI packages only support INSTALLED state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder msi(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgMsiArgs> msi) {
            $.msi = msi;
            return this;
        }

        /**
         * @param msi An MSI package. MSI packages only support INSTALLED state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder msi(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgMsiArgs msi) {
            return msi(Output.of(msi));
        }

        /**
         * @param rpm An RPM package file. RPM packages only support INSTALLED state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rpm(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgRpmArgs> rpm) {
            $.rpm = rpm;
            return this;
        }

        /**
         * @param rpm An RPM package file. RPM packages only support INSTALLED state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rpm(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgRpmArgs rpm) {
            return rpm(Output.of(rpm));
        }

        /**
         * @param yum A package managed by YUM.
         * - install: `yum -y install package`
         * - remove: `yum -y remove package`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder yum(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgYumArgs> yum) {
            $.yum = yum;
            return this;
        }

        /**
         * @param yum A package managed by YUM.
         * - install: `yum -y install package`
         * - remove: `yum -y remove package`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder yum(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgYumArgs yum) {
            return yum(Output.of(yum));
        }

        /**
         * @param zypper A package managed by Zypper.
         * - install: `zypper -y install package`
         * - remove: `zypper -y rm package`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder zypper(@Nullable Output<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgZypperArgs> zypper) {
            $.zypper = zypper;
            return this;
        }

        /**
         * @param zypper A package managed by Zypper.
         * - install: `zypper -y install package`
         * - remove: `zypper -y rm package`
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder zypper(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgZypperArgs zypper) {
            return zypper(Output.of(zypper));
        }

        public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs build() {
            if ($.desiredState == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupResourcePkgArgs", "desiredState");
            }
            return $;
        }
    }

}
