// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs;
import java.util.List;
import java.util.Objects;


public final class PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs Empty = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs();

    /**
     * InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
     * all findings that correspond to infoTypes that were requested in InspectConfig.
     * Structure is documented below.
     * 
     */
    @Import(name="infoTypes", required=true)
    private Output<List<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs>> infoTypes;

    /**
     * @return InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
     * all findings that correspond to infoTypes that were requested in InspectConfig.
     * Structure is documented below.
     * 
     */
    public Output<List<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs>> infoTypes() {
        return this.infoTypes;
    }

    private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs() {}

    private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs $) {
        this.infoTypes = $.infoTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs $;

        public Builder() {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs();
        }

        public Builder(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs defaults) {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param infoTypes InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
         * all findings that correspond to infoTypes that were requested in InspectConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infoTypes(Output<List<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs>> infoTypes) {
            $.infoTypes = infoTypes;
            return this;
        }

        /**
         * @param infoTypes InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
         * all findings that correspond to infoTypes that were requested in InspectConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infoTypes(List<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs> infoTypes) {
            return infoTypes(Output.of(infoTypes));
        }

        /**
         * @param infoTypes InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
         * all findings that correspond to infoTypes that were requested in InspectConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder infoTypes(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesInfoTypeArgs... infoTypes) {
            return infoTypes(List.of(infoTypes));
        }

        public PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs build() {
            $.infoTypes = Objects.requireNonNull($.infoTypes, "expected parameter 'infoTypes' to be non-null");
            return $;
        }
    }

}
