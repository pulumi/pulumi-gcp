// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iot.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryEventNotificationConfigItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryEventNotificationConfigItemArgs Empty = new RegistryEventNotificationConfigItemArgs();

    /**
     * PubSub topic name to publish device events.
     * 
     */
    @Import(name="pubsubTopicName", required=true)
    private Output<String> pubsubTopicName;

    /**
     * @return PubSub topic name to publish device events.
     * 
     */
    public Output<String> pubsubTopicName() {
        return this.pubsubTopicName;
    }

    /**
     * If the subfolder name matches this string exactly, this
     * configuration will be used. The string must not include the
     * leading &#39;/&#39; character. If empty, all strings are matched. Empty
     * value can only be used for the last `event_notification_configs`
     * item.
     * 
     */
    @Import(name="subfolderMatches")
    private @Nullable Output<String> subfolderMatches;

    /**
     * @return If the subfolder name matches this string exactly, this
     * configuration will be used. The string must not include the
     * leading &#39;/&#39; character. If empty, all strings are matched. Empty
     * value can only be used for the last `event_notification_configs`
     * item.
     * 
     */
    public Optional<Output<String>> subfolderMatches() {
        return Optional.ofNullable(this.subfolderMatches);
    }

    private RegistryEventNotificationConfigItemArgs() {}

    private RegistryEventNotificationConfigItemArgs(RegistryEventNotificationConfigItemArgs $) {
        this.pubsubTopicName = $.pubsubTopicName;
        this.subfolderMatches = $.subfolderMatches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryEventNotificationConfigItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryEventNotificationConfigItemArgs $;

        public Builder() {
            $ = new RegistryEventNotificationConfigItemArgs();
        }

        public Builder(RegistryEventNotificationConfigItemArgs defaults) {
            $ = new RegistryEventNotificationConfigItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pubsubTopicName PubSub topic name to publish device events.
         * 
         * @return builder
         * 
         */
        public Builder pubsubTopicName(Output<String> pubsubTopicName) {
            $.pubsubTopicName = pubsubTopicName;
            return this;
        }

        /**
         * @param pubsubTopicName PubSub topic name to publish device events.
         * 
         * @return builder
         * 
         */
        public Builder pubsubTopicName(String pubsubTopicName) {
            return pubsubTopicName(Output.of(pubsubTopicName));
        }

        /**
         * @param subfolderMatches If the subfolder name matches this string exactly, this
         * configuration will be used. The string must not include the
         * leading &#39;/&#39; character. If empty, all strings are matched. Empty
         * value can only be used for the last `event_notification_configs`
         * item.
         * 
         * @return builder
         * 
         */
        public Builder subfolderMatches(@Nullable Output<String> subfolderMatches) {
            $.subfolderMatches = subfolderMatches;
            return this;
        }

        /**
         * @param subfolderMatches If the subfolder name matches this string exactly, this
         * configuration will be used. The string must not include the
         * leading &#39;/&#39; character. If empty, all strings are matched. Empty
         * value can only be used for the last `event_notification_configs`
         * item.
         * 
         * @return builder
         * 
         */
        public Builder subfolderMatches(String subfolderMatches) {
            return subfolderMatches(Output.of(subfolderMatches));
        }

        public RegistryEventNotificationConfigItemArgs build() {
            $.pubsubTopicName = Objects.requireNonNull($.pubsubTopicName, "expected parameter 'pubsubTopicName' to be non-null");
            return $;
        }
    }

}
