// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.discoveryengine.SchemaArgs;
import com.pulumi.gcp.discoveryengine.inputs.SchemaState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Schema defines the structure and layout of a type of document data.
 * 
 * To get more information about Schema, see:
 * 
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.schemas)
 * * How-to Guides
 *     * [Provide a schema for your data store](https://cloud.google.com/generative-ai-app-builder/docs/provide-schema)
 * 
 * ## Example Usage
 * 
 * ### Discoveryengine Schema Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.discoveryengine.DataStore;
 * import com.pulumi.gcp.discoveryengine.DataStoreArgs;
 * import com.pulumi.gcp.discoveryengine.Schema;
 * import com.pulumi.gcp.discoveryengine.SchemaArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var basicDataStore = new DataStore("basicDataStore", DataStoreArgs.builder()
 *             .location("global")
 *             .dataStoreId("data-store-id")
 *             .displayName("tf-test-structured-datastore")
 *             .industryVertical("GENERIC")
 *             .contentConfig("NO_CONTENT")
 *             .solutionTypes("SOLUTION_TYPE_SEARCH")
 *             .createAdvancedSiteSearch(false)
 *             .skipDefaultSchemaCreation(true)
 *             .build());
 * 
 *         var basic = new Schema("basic", SchemaArgs.builder()
 *             .location(basicDataStore.location())
 *             .dataStoreId(basicDataStore.dataStoreId())
 *             .schemaId("schema-id")
 *             .jsonSchema("{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"datetime_detection\":true,\"type\":\"object\",\"geolocation_detection\":true}")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Schema can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}/schemas/{{schema_id}}`
 * 
 * * `{{project}}/{{location}}/{{data_store_id}}/{{schema_id}}`
 * 
 * * `{{location}}/{{data_store_id}}/{{schema_id}}`
 * 
 * When using the `pulumi import` command, Schema can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/schema:Schema default projects/{{project}}/locations/{{location}}/collections/default_collection/dataStores/{{data_store_id}}/schemas/{{schema_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/schema:Schema default {{project}}/{{location}}/{{data_store_id}}/{{schema_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/schema:Schema default {{location}}/{{data_store_id}}/{{schema_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:discoveryengine/schema:Schema")
public class Schema extends com.pulumi.resources.CustomResource {
    /**
     * The unique id of the data store.
     * 
     */
    @Export(name="dataStoreId", refs={String.class}, tree="[0]")
    private Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     */
    public Output<String> dataStoreId() {
        return this.dataStoreId;
    }
    /**
     * The JSON representation of the schema.
     * 
     */
    @Export(name="jsonSchema", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> jsonSchema;

    /**
     * @return The JSON representation of the schema.
     * 
     */
    public Output<Optional<String>> jsonSchema() {
        return Codegen.optional(this.jsonSchema);
    }
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The unique full resource name of the schema. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique full resource name of the schema. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The unique id of the schema.
     * 
     * ***
     * 
     */
    @Export(name="schemaId", refs={String.class}, tree="[0]")
    private Output<String> schemaId;

    /**
     * @return The unique id of the schema.
     * 
     * ***
     * 
     */
    public Output<String> schemaId() {
        return this.schemaId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Schema(java.lang.String name) {
        this(name, SchemaArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Schema(java.lang.String name, SchemaArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Schema(java.lang.String name, SchemaArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:discoveryengine/schema:Schema", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Schema(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:discoveryengine/schema:Schema", name, state, makeResourceOptions(options, id), false);
    }

    private static SchemaArgs makeArgs(SchemaArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SchemaArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Schema get(java.lang.String name, Output<java.lang.String> id, @Nullable SchemaState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Schema(name, id, state, options);
    }
}
