// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.datastream.StreamArgs;
import com.pulumi.gcp.datastream.inputs.StreamState;
import com.pulumi.gcp.datastream.outputs.StreamBackfillAll;
import com.pulumi.gcp.datastream.outputs.StreamBackfillNone;
import com.pulumi.gcp.datastream.outputs.StreamDestinationConfig;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfig;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A resource representing streaming data from a source to a destination.
 * 
 * To get more information about Stream, see:
 * 
 * * [API documentation](https://cloud.google.com/datastream/docs/reference/rest/v1/projects.locations.streams)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/datastream/docs/create-a-stream)
 * 
 * ## Example Usage
 * ### Datastream Stream Full
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
 * import com.pulumi.gcp.sql.Database;
 * import com.pulumi.gcp.sql.DatabaseArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileMysqlProfileArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketIAMMember;
 * import com.pulumi.gcp.storage.BucketIAMMemberArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileGcsProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigGcsDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllMysqlExcludedObjectsArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var instance = new DatabaseInstance(&#34;instance&#34;, DatabaseInstanceArgs.builder()        
 *             .databaseVersion(&#34;MYSQL_8_0&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier(&#34;db-f1-micro&#34;)
 *                 .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
 *                     .enabled(true)
 *                     .binaryLogEnabled(true)
 *                     .build())
 *                 .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
 *                     .authorizedNetworks(                    
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.71.242.81&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.72.28.29&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.67.6.157&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.67.234.134&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.72.239.218&#34;)
 *                             .build())
 *                     .build())
 *                 .build())
 *             .deletionProtection(true)
 *             .build());
 * 
 *         var db = new Database(&#34;db&#34;, DatabaseArgs.builder()        
 *             .instance(instance.name())
 *             .build());
 * 
 *         var pwd = new RandomPassword(&#34;pwd&#34;, RandomPasswordArgs.builder()        
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var user = new User(&#34;user&#34;, UserArgs.builder()        
 *             .instance(instance.name())
 *             .host(&#34;%&#34;)
 *             .password(pwd.result())
 *             .build());
 * 
 *         var sourceConnectionProfile = new ConnectionProfile(&#34;sourceConnectionProfile&#34;, ConnectionProfileArgs.builder()        
 *             .displayName(&#34;Source connection profile&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;source-profile&#34;)
 *             .mysqlProfile(ConnectionProfileMysqlProfileArgs.builder()
 *                 .hostname(instance.publicIpAddress())
 *                 .username(user.name())
 *                 .password(user.password())
 *                 .build())
 *             .build());
 * 
 *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
 *             .location(&#34;US&#34;)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var viewer = new BucketIAMMember(&#34;viewer&#34;, BucketIAMMemberArgs.builder()        
 *             .bucket(bucket.name())
 *             .role(&#34;roles/storage.objectViewer&#34;)
 *             .member(String.format(&#34;serviceAccount:service-%s@gcp-sa-datastream.iam.gserviceaccount.com&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.number())))
 *             .build());
 * 
 *         var creator = new BucketIAMMember(&#34;creator&#34;, BucketIAMMemberArgs.builder()        
 *             .bucket(bucket.name())
 *             .role(&#34;roles/storage.objectCreator&#34;)
 *             .member(String.format(&#34;serviceAccount:service-%s@gcp-sa-datastream.iam.gserviceaccount.com&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.number())))
 *             .build());
 * 
 *         var reader = new BucketIAMMember(&#34;reader&#34;, BucketIAMMemberArgs.builder()        
 *             .bucket(bucket.name())
 *             .role(&#34;roles/storage.legacyBucketReader&#34;)
 *             .member(String.format(&#34;serviceAccount:service-%s@gcp-sa-datastream.iam.gserviceaccount.com&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.number())))
 *             .build());
 * 
 *         var keyUser = new CryptoKeyIAMMember(&#34;keyUser&#34;, CryptoKeyIAMMemberArgs.builder()        
 *             .cryptoKeyId(&#34;kms-name&#34;)
 *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
 *             .member(String.format(&#34;serviceAccount:service-%s@gcp-sa-datastream.iam.gserviceaccount.com&#34;, project.applyValue(getProjectResult -&gt; getProjectResult.number())))
 *             .build());
 * 
 *         var destinationConnectionProfile = new ConnectionProfile(&#34;destinationConnectionProfile&#34;, ConnectionProfileArgs.builder()        
 *             .displayName(&#34;Connection profile&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;destination-profile&#34;)
 *             .gcsProfile(ConnectionProfileGcsProfileArgs.builder()
 *                 .bucket(bucket.name())
 *                 .rootPath(&#34;/path&#34;)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new Stream(&#34;default&#34;, StreamArgs.builder()        
 *             .streamId(&#34;my-stream&#34;)
 *             .desiredState(&#34;NOT_STARTED&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .displayName(&#34;my stream&#34;)
 *             .labels(Map.of(&#34;key&#34;, &#34;value&#34;))
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(sourceConnectionProfile.id())
 *                 .mysqlSourceConfig(StreamSourceConfigMysqlSourceConfigArgs.builder()
 *                     .includeObjects(StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs.builder()
 *                         .mysqlDatabases(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs.builder()
 *                             .database(&#34;my-database&#34;)
 *                             .mysqlTables(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                                 .table(&#34;includedTable&#34;)
 *                                 .mysqlColumns(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs.builder()
 *                                     .column(&#34;includedColumn&#34;)
 *                                     .dataType(&#34;VARCHAR&#34;)
 *                                     .collation(&#34;utf8mb4&#34;)
 *                                     .primaryKey(false)
 *                                     .nullable(false)
 *                                     .ordinalPosition(0)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .excludeObjects(StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs.builder()
 *                         .mysqlDatabases(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs.builder()
 *                             .database(&#34;my-database&#34;)
 *                             .mysqlTables(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                                 .table(&#34;excludedTable&#34;)
 *                                 .mysqlColumns(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs.builder()
 *                                     .column(&#34;excludedColumn&#34;)
 *                                     .dataType(&#34;VARCHAR&#34;)
 *                                     .collation(&#34;utf8mb4&#34;)
 *                                     .primaryKey(false)
 *                                     .nullable(false)
 *                                     .ordinalPosition(0)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .maxConcurrentCdcTasks(5)
 *                     .build())
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destinationConnectionProfile.id())
 *                 .gcsDestinationConfig(StreamDestinationConfigGcsDestinationConfigArgs.builder()
 *                     .path(&#34;mydata&#34;)
 *                     .fileRotationMb(200)
 *                     .fileRotationInterval(&#34;900s&#34;)
 *                     .jsonFileFormat(StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs.builder()
 *                         .schemaFileFormat(&#34;NO_SCHEMA_FILE&#34;)
 *                         .compression(&#34;GZIP&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillAll(StreamBackfillAllArgs.builder()
 *                 .mysqlExcludedObjects(StreamBackfillAllMysqlExcludedObjectsArgs.builder()
 *                     .mysqlDatabases(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs.builder()
 *                         .database(&#34;my-database&#34;)
 *                         .mysqlTables(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                             .table(&#34;excludedTable&#34;)
 *                             .mysqlColumns(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs.builder()
 *                                 .column(&#34;excludedColumn&#34;)
 *                                 .dataType(&#34;VARCHAR&#34;)
 *                                 .collation(&#34;utf8mb4&#34;)
 *                                 .primaryKey(false)
 *                                 .nullable(false)
 *                                 .ordinalPosition(0)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .customerManagedEncryptionKey(&#34;kms-name&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(keyUser)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Datastream Stream Bigquery
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
 * import com.pulumi.gcp.sql.Database;
 * import com.pulumi.gcp.sql.DatabaseArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileMysqlProfileArgs;
 * import com.pulumi.gcp.bigquery.BigqueryFunctions;
 * import com.pulumi.gcp.bigquery.inputs.GetDefaultServiceAccountArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileBigqueryProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillNoneArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var instance = new DatabaseInstance(&#34;instance&#34;, DatabaseInstanceArgs.builder()        
 *             .databaseVersion(&#34;MYSQL_8_0&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier(&#34;db-f1-micro&#34;)
 *                 .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
 *                     .enabled(true)
 *                     .binaryLogEnabled(true)
 *                     .build())
 *                 .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
 *                     .authorizedNetworks(                    
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.71.242.81&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.72.28.29&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.67.6.157&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.67.234.134&#34;)
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value(&#34;34.72.239.218&#34;)
 *                             .build())
 *                     .build())
 *                 .build())
 *             .deletionProtection(true)
 *             .build());
 * 
 *         var db = new Database(&#34;db&#34;, DatabaseArgs.builder()        
 *             .instance(instance.name())
 *             .build());
 * 
 *         var pwd = new RandomPassword(&#34;pwd&#34;, RandomPasswordArgs.builder()        
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var user = new User(&#34;user&#34;, UserArgs.builder()        
 *             .instance(instance.name())
 *             .host(&#34;%&#34;)
 *             .password(pwd.result())
 *             .build());
 * 
 *         var sourceConnectionProfile = new ConnectionProfile(&#34;sourceConnectionProfile&#34;, ConnectionProfileArgs.builder()        
 *             .displayName(&#34;Source connection profile&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;source-profile&#34;)
 *             .mysqlProfile(ConnectionProfileMysqlProfileArgs.builder()
 *                 .hostname(instance.publicIpAddress())
 *                 .username(user.name())
 *                 .password(user.password())
 *                 .build())
 *             .build());
 * 
 *         final var bqSa = BigqueryFunctions.getDefaultServiceAccount();
 * 
 *         var bigqueryKeyUser = new CryptoKeyIAMMember(&#34;bigqueryKeyUser&#34;, CryptoKeyIAMMemberArgs.builder()        
 *             .cryptoKeyId(&#34;bigquery-kms-name&#34;)
 *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
 *             .member(String.format(&#34;serviceAccount:%s&#34;, bqSa.applyValue(getDefaultServiceAccountResult -&gt; getDefaultServiceAccountResult.email())))
 *             .build());
 * 
 *         var destinationConnectionProfile = new ConnectionProfile(&#34;destinationConnectionProfile&#34;, ConnectionProfileArgs.builder()        
 *             .displayName(&#34;Connection profile&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .connectionProfileId(&#34;destination-profile&#34;)
 *             .bigqueryProfile()
 *             .build());
 * 
 *         var default_ = new Stream(&#34;default&#34;, StreamArgs.builder()        
 *             .streamId(&#34;my-stream&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .displayName(&#34;my stream&#34;)
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(sourceConnectionProfile.id())
 *                 .mysqlSourceConfig()
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destinationConnectionProfile.id())
 *                 .bigqueryDestinationConfig(StreamDestinationConfigBigqueryDestinationConfigArgs.builder()
 *                     .sourceHierarchyDatasets(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs.builder()
 *                         .datasetTemplate(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs.builder()
 *                             .location(&#34;us-central1&#34;)
 *                             .kmsKeyName(&#34;bigquery-kms-name&#34;)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillNone()
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(bigqueryKeyUser)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Stream can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:datastream/stream:Stream default projects/{{project}}/locations/{{location}}/streams/{{stream_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:datastream/stream:Stream default {{project}}/{{location}}/{{stream_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:datastream/stream:Stream default {{location}}/{{stream_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:datastream/stream:Stream")
public class Stream extends com.pulumi.resources.CustomResource {
    /**
     * Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * Structure is documented below.
     * 
     */
    @Export(name="backfillAll", type=StreamBackfillAll.class, parameters={})
    private Output</* @Nullable */ StreamBackfillAll> backfillAll;

    /**
     * @return Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * Structure is documented below.
     * 
     */
    public Output<Optional<StreamBackfillAll>> backfillAll() {
        return Codegen.optional(this.backfillAll);
    }
    /**
     * Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    @Export(name="backfillNone", type=StreamBackfillNone.class, parameters={})
    private Output</* @Nullable */ StreamBackfillNone> backfillNone;

    /**
     * @return Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    public Output<Optional<StreamBackfillNone>> backfillNone() {
        return Codegen.optional(this.backfillNone);
    }
    /**
     * A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
     * will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Export(name="customerManagedEncryptionKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> customerManagedEncryptionKey;

    /**
     * @return A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
     * will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    public Output<Optional<String>> customerManagedEncryptionKey() {
        return Codegen.optional(this.customerManagedEncryptionKey);
    }
    /**
     * Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
     * 
     */
    @Export(name="desiredState", type=String.class, parameters={})
    private Output</* @Nullable */ String> desiredState;

    /**
     * @return Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
     * 
     */
    public Output<Optional<String>> desiredState() {
        return Codegen.optional(this.desiredState);
    }
    /**
     * Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="destinationConfig", type=StreamDestinationConfig.class, parameters={})
    private Output<StreamDestinationConfig> destinationConfig;

    /**
     * @return Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Output<StreamDestinationConfig> destinationConfig() {
        return this.destinationConfig;
    }
    /**
     * Display name.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Labels.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The name of the location this stream is located in.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The name of the location this stream is located in.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The stream&#39;s name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The stream&#39;s name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="sourceConfig", type=StreamSourceConfig.class, parameters={})
    private Output<StreamSourceConfig> sourceConfig;

    /**
     * @return Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Output<StreamSourceConfig> sourceConfig() {
        return this.sourceConfig;
    }
    /**
     * The state of the stream.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return The state of the stream.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The stream identifier.
     * 
     */
    @Export(name="streamId", type=String.class, parameters={})
    private Output<String> streamId;

    /**
     * @return The stream identifier.
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Stream(String name) {
        this(name, StreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Stream(String name, StreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Stream(String name, StreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:datastream/stream:Stream", name, args == null ? StreamArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Stream(String name, Output<String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:datastream/stream:Stream", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Stream get(String name, Output<String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Stream(name, id, state, options);
    }
}
