// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.datastream.StreamArgs;
import com.pulumi.gcp.datastream.inputs.StreamState;
import com.pulumi.gcp.datastream.outputs.StreamBackfillAll;
import com.pulumi.gcp.datastream.outputs.StreamBackfillNone;
import com.pulumi.gcp.datastream.outputs.StreamDestinationConfig;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A resource representing streaming data from a source to a destination.
 * 
 * To get more information about Stream, see:
 * 
 * * [API documentation](https://cloud.google.com/datastream/docs/reference/rest/v1/projects.locations.streams)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/datastream/docs/create-a-stream)
 * 
 * ## Example Usage
 * 
 * ### Datastream Stream Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
 * import com.pulumi.gcp.sql.Database;
 * import com.pulumi.gcp.sql.DatabaseArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileMysqlProfileArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketIAMMember;
 * import com.pulumi.gcp.storage.BucketIAMMemberArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileGcsProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigGcsDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllMysqlExcludedObjectsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
 *             .name("my-instance")
 *             .databaseVersion("MYSQL_8_0")
 *             .region("us-central1")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-f1-micro")
 *                 .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
 *                     .enabled(true)
 *                     .binaryLogEnabled(true)
 *                     .build())
 *                 .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
 *                     .authorizedNetworks(                    
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.71.242.81")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.72.28.29")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.67.6.157")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.67.234.134")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.72.239.218")
 *                             .build())
 *                     .build())
 *                 .build())
 *             .deletionProtection(true)
 *             .build());
 * 
 *         var db = new Database("db", DatabaseArgs.builder()
 *             .instance(instance.name())
 *             .name("db")
 *             .build());
 * 
 *         var pwd = new RandomPassword("pwd", RandomPasswordArgs.builder()
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var user = new User("user", UserArgs.builder()
 *             .name("user")
 *             .instance(instance.name())
 *             .host("%")
 *             .password(pwd.result())
 *             .build());
 * 
 *         var sourceConnectionProfile = new ConnectionProfile("sourceConnectionProfile", ConnectionProfileArgs.builder()
 *             .displayName("Source connection profile")
 *             .location("us-central1")
 *             .connectionProfileId("source-profile")
 *             .mysqlProfile(ConnectionProfileMysqlProfileArgs.builder()
 *                 .hostname(instance.publicIpAddress())
 *                 .username(user.name())
 *                 .password(user.password())
 *                 .build())
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name("my-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var viewer = new BucketIAMMember("viewer", BucketIAMMemberArgs.builder()
 *             .bucket(bucket.name())
 *             .role("roles/storage.objectViewer")
 *             .member(String.format("serviceAccount:service-%s{@literal @}gcp-sa-datastream.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
 *             .build());
 * 
 *         var creator = new BucketIAMMember("creator", BucketIAMMemberArgs.builder()
 *             .bucket(bucket.name())
 *             .role("roles/storage.objectCreator")
 *             .member(String.format("serviceAccount:service-%s{@literal @}gcp-sa-datastream.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
 *             .build());
 * 
 *         var reader = new BucketIAMMember("reader", BucketIAMMemberArgs.builder()
 *             .bucket(bucket.name())
 *             .role("roles/storage.legacyBucketReader")
 *             .member(String.format("serviceAccount:service-%s{@literal @}gcp-sa-datastream.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
 *             .build());
 * 
 *         var keyUser = new CryptoKeyIAMMember("keyUser", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId("kms-name")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:service-%s{@literal @}gcp-sa-datastream.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
 *             .build());
 * 
 *         var destinationConnectionProfile = new ConnectionProfile("destinationConnectionProfile", ConnectionProfileArgs.builder()
 *             .displayName("Connection profile")
 *             .location("us-central1")
 *             .connectionProfileId("destination-profile")
 *             .gcsProfile(ConnectionProfileGcsProfileArgs.builder()
 *                 .bucket(bucket.name())
 *                 .rootPath("/path")
 *                 .build())
 *             .build());
 * 
 *         var default_ = new Stream("default", StreamArgs.builder()
 *             .streamId("my-stream")
 *             .desiredState("NOT_STARTED")
 *             .location("us-central1")
 *             .displayName("my stream")
 *             .labels(Map.of("key", "value"))
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(sourceConnectionProfile.id())
 *                 .mysqlSourceConfig(StreamSourceConfigMysqlSourceConfigArgs.builder()
 *                     .includeObjects(StreamSourceConfigMysqlSourceConfigIncludeObjectsArgs.builder()
 *                         .mysqlDatabases(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseArgs.builder()
 *                             .database("my-database")
 *                             .mysqlTables(                            
 *                                 StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                                     .table("includedTable")
 *                                     .mysqlColumns(StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs.builder()
 *                                         .column("includedColumn")
 *                                         .dataType("VARCHAR")
 *                                         .collation("utf8mb4")
 *                                         .primaryKey(false)
 *                                         .nullable(false)
 *                                         .ordinalPosition(0)
 *                                         .build())
 *                                     .build(),
 *                                 StreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                                     .table("includedTable_2")
 *                                     .build())
 *                             .build())
 *                         .build())
 *                     .excludeObjects(StreamSourceConfigMysqlSourceConfigExcludeObjectsArgs.builder()
 *                         .mysqlDatabases(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseArgs.builder()
 *                             .database("my-database")
 *                             .mysqlTables(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                                 .table("excludedTable")
 *                                 .mysqlColumns(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumnArgs.builder()
 *                                     .column("excludedColumn")
 *                                     .dataType("VARCHAR")
 *                                     .collation("utf8mb4")
 *                                     .primaryKey(false)
 *                                     .nullable(false)
 *                                     .ordinalPosition(0)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .maxConcurrentCdcTasks(5)
 *                     .build())
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destinationConnectionProfile.id())
 *                 .gcsDestinationConfig(StreamDestinationConfigGcsDestinationConfigArgs.builder()
 *                     .path("mydata")
 *                     .fileRotationMb(200)
 *                     .fileRotationInterval("60s")
 *                     .jsonFileFormat(StreamDestinationConfigGcsDestinationConfigJsonFileFormatArgs.builder()
 *                         .schemaFileFormat("NO_SCHEMA_FILE")
 *                         .compression("GZIP")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillAll(StreamBackfillAllArgs.builder()
 *                 .mysqlExcludedObjects(StreamBackfillAllMysqlExcludedObjectsArgs.builder()
 *                     .mysqlDatabases(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseArgs.builder()
 *                         .database("my-database")
 *                         .mysqlTables(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableArgs.builder()
 *                             .table("excludedTable")
 *                             .mysqlColumns(StreamBackfillAllMysqlExcludedObjectsMysqlDatabaseMysqlTableMysqlColumnArgs.builder()
 *                                 .column("excludedColumn")
 *                                 .dataType("VARCHAR")
 *                                 .collation("utf8mb4")
 *                                 .primaryKey(false)
 *                                 .nullable(false)
 *                                 .ordinalPosition(0)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .customerManagedEncryptionKey("kms-name")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Datastream Stream Postgresql
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfilePostgresqlProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileBigqueryProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigPostgresqlSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllPostgresqlExcludedObjectsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var source = new ConnectionProfile("source", ConnectionProfileArgs.builder()
 *             .displayName("Postgresql Source")
 *             .location("us-central1")
 *             .connectionProfileId("source-profile")
 *             .postgresqlProfile(ConnectionProfilePostgresqlProfileArgs.builder()
 *                 .hostname("hostname")
 *                 .port(3306)
 *                 .username("user")
 *                 .password("pass")
 *                 .database("postgres")
 *                 .build())
 *             .build());
 * 
 *         var destination = new ConnectionProfile("destination", ConnectionProfileArgs.builder()
 *             .displayName("BigQuery Destination")
 *             .location("us-central1")
 *             .connectionProfileId("destination-profile")
 *             .bigqueryProfile()
 *             .build());
 * 
 *         var default_ = new Stream("default", StreamArgs.builder()
 *             .displayName("Postgres to BigQuery")
 *             .location("us-central1")
 *             .streamId("my-stream")
 *             .desiredState("RUNNING")
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(source.id())
 *                 .postgresqlSourceConfig(StreamSourceConfigPostgresqlSourceConfigArgs.builder()
 *                     .maxConcurrentBackfillTasks(12)
 *                     .publication("publication")
 *                     .replicationSlot("replication_slot")
 *                     .includeObjects(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsArgs.builder()
 *                         .postgresqlSchemas(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaArgs.builder()
 *                             .schema("schema")
 *                             .postgresqlTables(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTableArgs.builder()
 *                                 .table("table")
 *                                 .postgresqlColumns(StreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs.builder()
 *                                     .column("column")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .excludeObjects(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsArgs.builder()
 *                         .postgresqlSchemas(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaArgs.builder()
 *                             .schema("schema")
 *                             .postgresqlTables(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTableArgs.builder()
 *                                 .table("table")
 *                                 .postgresqlColumns(StreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs.builder()
 *                                     .column("column")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destination.id())
 *                 .bigqueryDestinationConfig(StreamDestinationConfigBigqueryDestinationConfigArgs.builder()
 *                     .dataFreshness("900s")
 *                     .sourceHierarchyDatasets(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs.builder()
 *                         .datasetTemplate(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs.builder()
 *                             .location("us-central1")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillAll(StreamBackfillAllArgs.builder()
 *                 .postgresqlExcludedObjects(StreamBackfillAllPostgresqlExcludedObjectsArgs.builder()
 *                     .postgresqlSchemas(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaArgs.builder()
 *                         .schema("schema")
 *                         .postgresqlTables(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTableArgs.builder()
 *                             .table("table")
 *                             .postgresqlColumns(StreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemaPostgresqlTablePostgresqlColumnArgs.builder()
 *                                 .column("column")
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Datastream Stream Oracle
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileOracleProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileBigqueryProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigOracleSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigOracleSourceConfigIncludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigOracleSourceConfigExcludeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigOracleSourceConfigDropLargeObjectsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllOracleExcludedObjectsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var source = new ConnectionProfile("source", ConnectionProfileArgs.builder()
 *             .displayName("Oracle Source")
 *             .location("us-central1")
 *             .connectionProfileId("source-profile")
 *             .oracleProfile(ConnectionProfileOracleProfileArgs.builder()
 *                 .hostname("hostname")
 *                 .port(1521)
 *                 .username("user")
 *                 .password("pass")
 *                 .databaseService("ORCL")
 *                 .build())
 *             .build());
 * 
 *         var destination = new ConnectionProfile("destination", ConnectionProfileArgs.builder()
 *             .displayName("BigQuery Destination")
 *             .location("us-central1")
 *             .connectionProfileId("destination-profile")
 *             .bigqueryProfile()
 *             .build());
 * 
 *         var stream5 = new Stream("stream5", StreamArgs.builder()
 *             .displayName("Oracle to BigQuery")
 *             .location("us-central1")
 *             .streamId("my-stream")
 *             .desiredState("RUNNING")
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(source.id())
 *                 .oracleSourceConfig(StreamSourceConfigOracleSourceConfigArgs.builder()
 *                     .maxConcurrentCdcTasks(8)
 *                     .maxConcurrentBackfillTasks(12)
 *                     .includeObjects(StreamSourceConfigOracleSourceConfigIncludeObjectsArgs.builder()
 *                         .oracleSchemas(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaArgs.builder()
 *                             .schema("schema")
 *                             .oracleTables(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableArgs.builder()
 *                                 .table("table")
 *                                 .oracleColumns(StreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemaOracleTableOracleColumnArgs.builder()
 *                                     .column("column")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .excludeObjects(StreamSourceConfigOracleSourceConfigExcludeObjectsArgs.builder()
 *                         .oracleSchemas(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaArgs.builder()
 *                             .schema("schema")
 *                             .oracleTables(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableArgs.builder()
 *                                 .table("table")
 *                                 .oracleColumns(StreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemaOracleTableOracleColumnArgs.builder()
 *                                     .column("column")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .dropLargeObjects()
 *                     .build())
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destination.id())
 *                 .bigqueryDestinationConfig(StreamDestinationConfigBigqueryDestinationConfigArgs.builder()
 *                     .dataFreshness("900s")
 *                     .sourceHierarchyDatasets(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs.builder()
 *                         .datasetTemplate(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs.builder()
 *                             .location("us-central1")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillAll(StreamBackfillAllArgs.builder()
 *                 .oracleExcludedObjects(StreamBackfillAllOracleExcludedObjectsArgs.builder()
 *                     .oracleSchemas(StreamBackfillAllOracleExcludedObjectsOracleSchemaArgs.builder()
 *                         .schema("schema")
 *                         .oracleTables(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableArgs.builder()
 *                             .table("table")
 *                             .oracleColumns(StreamBackfillAllOracleExcludedObjectsOracleSchemaOracleTableOracleColumnArgs.builder()
 *                                 .column("column")
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Datastream Stream Postgresql Bigquery Dataset Id
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.bigquery.Dataset;
 * import com.pulumi.gcp.bigquery.DatasetArgs;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileBigqueryProfileArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileMysqlProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
 * import com.pulumi.gcp.sql.Database;
 * import com.pulumi.gcp.sql.DatabaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var postgres = new Dataset("postgres", DatasetArgs.builder()
 *             .datasetId("postgres")
 *             .friendlyName("postgres")
 *             .description("Database of postgres")
 *             .location("us-central1")
 *             .build());
 * 
 *         var destinationConnectionProfile2 = new ConnectionProfile("destinationConnectionProfile2", ConnectionProfileArgs.builder()
 *             .displayName("Connection profile")
 *             .location("us-central1")
 *             .connectionProfileId("dest-profile")
 *             .bigqueryProfile()
 *             .build());
 * 
 *         var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
 *             .name("instance-name")
 *             .databaseVersion("MYSQL_8_0")
 *             .region("us-central1")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-f1-micro")
 *                 .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
 *                     .enabled(true)
 *                     .binaryLogEnabled(true)
 *                     .build())
 *                 .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
 *                     .authorizedNetworks(                    
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.71.242.81")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.72.28.29")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.67.6.157")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.67.234.134")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.72.239.218")
 *                             .build())
 *                     .build())
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var pwd = new RandomPassword("pwd", RandomPasswordArgs.builder()
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var user = new User("user", UserArgs.builder()
 *             .name("my-user")
 *             .instance(instance.name())
 *             .host("%")
 *             .password(pwd.result())
 *             .build());
 * 
 *         var sourceConnectionProfile = new ConnectionProfile("sourceConnectionProfile", ConnectionProfileArgs.builder()
 *             .displayName("Source connection profile")
 *             .location("us-central1")
 *             .connectionProfileId("source-profile")
 *             .mysqlProfile(ConnectionProfileMysqlProfileArgs.builder()
 *                 .hostname(instance.publicIpAddress())
 *                 .username(user.name())
 *                 .password(user.password())
 *                 .build())
 *             .build());
 * 
 *         var default_ = new Stream("default", StreamArgs.builder()
 *             .displayName("postgres to bigQuery")
 *             .location("us-central1")
 *             .streamId("postgres-bigquery")
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(sourceConnectionProfile.id())
 *                 .mysqlSourceConfig()
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destinationConnectionProfile2.id())
 *                 .bigqueryDestinationConfig(StreamDestinationConfigBigqueryDestinationConfigArgs.builder()
 *                     .dataFreshness("900s")
 *                     .singleTargetDataset(StreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetArgs.builder()
 *                         .datasetId(postgres.id())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillAll()
 *             .build());
 * 
 *         var db = new Database("db", DatabaseArgs.builder()
 *             .instance(instance.name())
 *             .name("db")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Datastream Stream Bigquery
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
 * import com.pulumi.gcp.sql.Database;
 * import com.pulumi.gcp.sql.DatabaseArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.datastream.ConnectionProfile;
 * import com.pulumi.gcp.datastream.ConnectionProfileArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileMysqlProfileArgs;
 * import com.pulumi.gcp.bigquery.BigqueryFunctions;
 * import com.pulumi.gcp.bigquery.inputs.GetDefaultServiceAccountArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.datastream.inputs.ConnectionProfileBigqueryProfileArgs;
 * import com.pulumi.gcp.datastream.Stream;
 * import com.pulumi.gcp.datastream.StreamArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamSourceConfigMysqlSourceConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs;
 * import com.pulumi.gcp.datastream.inputs.StreamBackfillNoneArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
 *             .name("my-instance")
 *             .databaseVersion("MYSQL_8_0")
 *             .region("us-central1")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-f1-micro")
 *                 .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
 *                     .enabled(true)
 *                     .binaryLogEnabled(true)
 *                     .build())
 *                 .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
 *                     .authorizedNetworks(                    
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.71.242.81")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.72.28.29")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.67.6.157")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.67.234.134")
 *                             .build(),
 *                         DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkArgs.builder()
 *                             .value("34.72.239.218")
 *                             .build())
 *                     .build())
 *                 .build())
 *             .deletionProtection(true)
 *             .build());
 * 
 *         var db = new Database("db", DatabaseArgs.builder()
 *             .instance(instance.name())
 *             .name("db")
 *             .build());
 * 
 *         var pwd = new RandomPassword("pwd", RandomPasswordArgs.builder()
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var user = new User("user", UserArgs.builder()
 *             .name("user")
 *             .instance(instance.name())
 *             .host("%")
 *             .password(pwd.result())
 *             .build());
 * 
 *         var sourceConnectionProfile = new ConnectionProfile("sourceConnectionProfile", ConnectionProfileArgs.builder()
 *             .displayName("Source connection profile")
 *             .location("us-central1")
 *             .connectionProfileId("source-profile")
 *             .mysqlProfile(ConnectionProfileMysqlProfileArgs.builder()
 *                 .hostname(instance.publicIpAddress())
 *                 .username(user.name())
 *                 .password(user.password())
 *                 .build())
 *             .build());
 * 
 *         final var bqSa = BigqueryFunctions.getDefaultServiceAccount();
 * 
 *         var bigqueryKeyUser = new CryptoKeyIAMMember("bigqueryKeyUser", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId("bigquery-kms-name")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:%s", bqSa.applyValue(getDefaultServiceAccountResult -> getDefaultServiceAccountResult.email())))
 *             .build());
 * 
 *         var destinationConnectionProfile = new ConnectionProfile("destinationConnectionProfile", ConnectionProfileArgs.builder()
 *             .displayName("Connection profile")
 *             .location("us-central1")
 *             .connectionProfileId("destination-profile")
 *             .bigqueryProfile()
 *             .build());
 * 
 *         var default_ = new Stream("default", StreamArgs.builder()
 *             .streamId("my-stream")
 *             .location("us-central1")
 *             .displayName("my stream")
 *             .sourceConfig(StreamSourceConfigArgs.builder()
 *                 .sourceConnectionProfile(sourceConnectionProfile.id())
 *                 .mysqlSourceConfig()
 *                 .build())
 *             .destinationConfig(StreamDestinationConfigArgs.builder()
 *                 .destinationConnectionProfile(destinationConnectionProfile.id())
 *                 .bigqueryDestinationConfig(StreamDestinationConfigBigqueryDestinationConfigArgs.builder()
 *                     .sourceHierarchyDatasets(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsArgs.builder()
 *                         .datasetTemplate(StreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateArgs.builder()
 *                             .location("us-central1")
 *                             .kmsKeyName("bigquery-kms-name")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .backfillNone()
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Stream can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/streams/{{stream_id}}`
 * 
 * * `{{project}}/{{location}}/{{stream_id}}`
 * 
 * * `{{location}}/{{stream_id}}`
 * 
 * When using the `pulumi import` command, Stream can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:datastream/stream:Stream default projects/{{project}}/locations/{{location}}/streams/{{stream_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:datastream/stream:Stream default {{project}}/{{location}}/{{stream_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:datastream/stream:Stream default {{location}}/{{stream_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:datastream/stream:Stream")
public class Stream extends com.pulumi.resources.CustomResource {
    /**
     * Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * 
     */
    @Export(name="backfillAll", refs={StreamBackfillAll.class}, tree="[0]")
    private Output</* @Nullable */ StreamBackfillAll> backfillAll;

    /**
     * @return Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * 
     */
    public Output<Optional<StreamBackfillAll>> backfillAll() {
        return Codegen.optional(this.backfillAll);
    }
    /**
     * Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    @Export(name="backfillNone", refs={StreamBackfillNone.class}, tree="[0]")
    private Output</* @Nullable */ StreamBackfillNone> backfillNone;

    /**
     * @return Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    public Output<Optional<StreamBackfillNone>> backfillNone() {
        return Codegen.optional(this.backfillNone);
    }
    /**
     * A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be
     * encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Export(name="customerManagedEncryptionKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customerManagedEncryptionKey;

    /**
     * @return A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be
     * encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    public Output<Optional<String>> customerManagedEncryptionKey() {
        return Codegen.optional(this.customerManagedEncryptionKey);
    }
    /**
     * Desired state of the Stream. Set this field to &#39;RUNNING&#39; to start the stream, and &#39;PAUSED&#39; to pause the stream.
     * 
     */
    @Export(name="desiredState", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> desiredState;

    /**
     * @return Desired state of the Stream. Set this field to &#39;RUNNING&#39; to start the stream, and &#39;PAUSED&#39; to pause the stream.
     * 
     */
    public Output<Optional<String>> desiredState() {
        return Codegen.optional(this.desiredState);
    }
    /**
     * Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="destinationConfig", refs={StreamDestinationConfig.class}, tree="[0]")
    private Output<StreamDestinationConfig> destinationConfig;

    /**
     * @return Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Output<StreamDestinationConfig> destinationConfig() {
        return this.destinationConfig;
    }
    /**
     * Display name.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The name of the location this stream is located in.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The name of the location this stream is located in.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The stream&#39;s name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The stream&#39;s name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="sourceConfig", refs={StreamSourceConfig.class}, tree="[0]")
    private Output<StreamSourceConfig> sourceConfig;

    /**
     * @return Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Output<StreamSourceConfig> sourceConfig() {
        return this.sourceConfig;
    }
    /**
     * The state of the stream.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of the stream.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The stream identifier.
     * 
     */
    @Export(name="streamId", refs={String.class}, tree="[0]")
    private Output<String> streamId;

    /**
     * @return The stream identifier.
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Stream(String name) {
        this(name, StreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Stream(String name, StreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Stream(String name, StreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:datastream/stream:Stream", name, args == null ? StreamArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Stream(String name, Output<String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:datastream/stream:Stream", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Stream get(String name, Output<String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Stream(name, id, state, options);
    }
}
