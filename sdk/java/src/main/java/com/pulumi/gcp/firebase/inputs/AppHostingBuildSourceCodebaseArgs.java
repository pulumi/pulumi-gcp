// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebase.inputs.AppHostingBuildSourceCodebaseAuthorArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingBuildSourceCodebaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingBuildSourceCodebaseArgs Empty = new AppHostingBuildSourceCodebaseArgs();

    /**
     * (Output)
     * Version control metadata for a user associated with a resolved codebase.
     * Currently assumes a Git user.
     * Structure is documented below.
     * 
     */
    @Import(name="authors")
    private @Nullable Output<List<AppHostingBuildSourceCodebaseAuthorArgs>> authors;

    /**
     * @return (Output)
     * Version control metadata for a user associated with a resolved codebase.
     * Currently assumes a Git user.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AppHostingBuildSourceCodebaseAuthorArgs>>> authors() {
        return Optional.ofNullable(this.authors);
    }

    /**
     * The branch in the codebase to build from, using the latest commit.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return The branch in the codebase to build from, using the latest commit.
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The commit in the codebase to build from.
     * 
     * &lt;a name=&#34;nestedSourceCodebaseAuthor&#34;&gt;&lt;/a&gt;The `author` block contains:
     * 
     */
    @Import(name="commit")
    private @Nullable Output<String> commit;

    /**
     * @return The commit in the codebase to build from.
     * 
     * &lt;a name=&#34;nestedSourceCodebaseAuthor&#34;&gt;&lt;/a&gt;The `author` block contains:
     * 
     */
    public Optional<Output<String>> commit() {
        return Optional.ofNullable(this.commit);
    }

    /**
     * (Output)
     * The message of a codebase change.
     * 
     */
    @Import(name="commitMessage")
    private @Nullable Output<String> commitMessage;

    /**
     * @return (Output)
     * The message of a codebase change.
     * 
     */
    public Optional<Output<String>> commitMessage() {
        return Optional.ofNullable(this.commitMessage);
    }

    /**
     * (Output)
     * The time the change was made.
     * 
     */
    @Import(name="commitTime")
    private @Nullable Output<String> commitTime;

    /**
     * @return (Output)
     * The time the change was made.
     * 
     */
    public Optional<Output<String>> commitTime() {
        return Optional.ofNullable(this.commitTime);
    }

    /**
     * (Output)
     * The &#39;name&#39; field in a Git user&#39;s git.config. Required by Git.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Output)
     * The &#39;name&#39; field in a Git user&#39;s git.config. Required by Git.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Output)
     * The full SHA-1 hash of a Git commit, if available.
     * 
     */
    @Import(name="hash")
    private @Nullable Output<String> hash;

    /**
     * @return (Output)
     * The full SHA-1 hash of a Git commit, if available.
     * 
     */
    public Optional<Output<String>> hash() {
        return Optional.ofNullable(this.hash);
    }

    /**
     * (Output)
     * A URI linking to the codebase on an hosting provider&#39;s website. May
     * not be valid if the commit has been rebased or force-pushed out of
     * existence in the linked repository.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return (Output)
     * A URI linking to the codebase on an hosting provider&#39;s website. May
     * not be valid if the commit has been rebased or force-pushed out of
     * existence in the linked repository.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private AppHostingBuildSourceCodebaseArgs() {}

    private AppHostingBuildSourceCodebaseArgs(AppHostingBuildSourceCodebaseArgs $) {
        this.authors = $.authors;
        this.branch = $.branch;
        this.commit = $.commit;
        this.commitMessage = $.commitMessage;
        this.commitTime = $.commitTime;
        this.displayName = $.displayName;
        this.hash = $.hash;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingBuildSourceCodebaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingBuildSourceCodebaseArgs $;

        public Builder() {
            $ = new AppHostingBuildSourceCodebaseArgs();
        }

        public Builder(AppHostingBuildSourceCodebaseArgs defaults) {
            $ = new AppHostingBuildSourceCodebaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authors (Output)
         * Version control metadata for a user associated with a resolved codebase.
         * Currently assumes a Git user.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authors(@Nullable Output<List<AppHostingBuildSourceCodebaseAuthorArgs>> authors) {
            $.authors = authors;
            return this;
        }

        /**
         * @param authors (Output)
         * Version control metadata for a user associated with a resolved codebase.
         * Currently assumes a Git user.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authors(List<AppHostingBuildSourceCodebaseAuthorArgs> authors) {
            return authors(Output.of(authors));
        }

        /**
         * @param authors (Output)
         * Version control metadata for a user associated with a resolved codebase.
         * Currently assumes a Git user.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authors(AppHostingBuildSourceCodebaseAuthorArgs... authors) {
            return authors(List.of(authors));
        }

        /**
         * @param branch The branch in the codebase to build from, using the latest commit.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch The branch in the codebase to build from, using the latest commit.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param commit The commit in the codebase to build from.
         * 
         * &lt;a name=&#34;nestedSourceCodebaseAuthor&#34;&gt;&lt;/a&gt;The `author` block contains:
         * 
         * @return builder
         * 
         */
        public Builder commit(@Nullable Output<String> commit) {
            $.commit = commit;
            return this;
        }

        /**
         * @param commit The commit in the codebase to build from.
         * 
         * &lt;a name=&#34;nestedSourceCodebaseAuthor&#34;&gt;&lt;/a&gt;The `author` block contains:
         * 
         * @return builder
         * 
         */
        public Builder commit(String commit) {
            return commit(Output.of(commit));
        }

        /**
         * @param commitMessage (Output)
         * The message of a codebase change.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(@Nullable Output<String> commitMessage) {
            $.commitMessage = commitMessage;
            return this;
        }

        /**
         * @param commitMessage (Output)
         * The message of a codebase change.
         * 
         * @return builder
         * 
         */
        public Builder commitMessage(String commitMessage) {
            return commitMessage(Output.of(commitMessage));
        }

        /**
         * @param commitTime (Output)
         * The time the change was made.
         * 
         * @return builder
         * 
         */
        public Builder commitTime(@Nullable Output<String> commitTime) {
            $.commitTime = commitTime;
            return this;
        }

        /**
         * @param commitTime (Output)
         * The time the change was made.
         * 
         * @return builder
         * 
         */
        public Builder commitTime(String commitTime) {
            return commitTime(Output.of(commitTime));
        }

        /**
         * @param displayName (Output)
         * The &#39;name&#39; field in a Git user&#39;s git.config. Required by Git.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Output)
         * The &#39;name&#39; field in a Git user&#39;s git.config. Required by Git.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param hash (Output)
         * The full SHA-1 hash of a Git commit, if available.
         * 
         * @return builder
         * 
         */
        public Builder hash(@Nullable Output<String> hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param hash (Output)
         * The full SHA-1 hash of a Git commit, if available.
         * 
         * @return builder
         * 
         */
        public Builder hash(String hash) {
            return hash(Output.of(hash));
        }

        /**
         * @param uri (Output)
         * A URI linking to the codebase on an hosting provider&#39;s website. May
         * not be valid if the commit has been rebased or force-pushed out of
         * existence in the linked repository.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri (Output)
         * A URI linking to the codebase on an hosting provider&#39;s website. May
         * not be valid if the commit has been rebased or force-pushed out of
         * existence in the linked repository.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public AppHostingBuildSourceCodebaseArgs build() {
            return $;
        }
    }

}
