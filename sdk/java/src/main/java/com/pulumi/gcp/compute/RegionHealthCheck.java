// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.RegionHealthCheckArgs;
import com.pulumi.gcp.compute.inputs.RegionHealthCheckState;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckGrpcHealthCheck;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckHttp2HealthCheck;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckHttpHealthCheck;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckHttpsHealthCheck;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckLogConfig;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckSslHealthCheck;
import com.pulumi.gcp.compute.outputs.RegionHealthCheckTcpHealthCheck;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Health Checks determine whether instances are responsive and able to do work.
 * They are an important part of a comprehensive load balancing configuration,
 * as they enable monitoring instances behind load balancers.
 * 
 * Health Checks poll instances at a specified interval. Instances that
 * do not respond successfully to some number of probes in a row are marked
 * as unhealthy. No new connections are sent to unhealthy instances,
 * though existing connections will continue. The health check will
 * continue to poll unhealthy instances. If an instance later responds
 * successfully to some number of consecutive probes, it is marked
 * healthy again and can receive new connections.
 * 
 * To get more information about RegionHealthCheck, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionHealthChecks)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/health-checks)
 * 
 * ## Example Usage
 * ### Region Health Check Tcp
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcp_region_health_check = new RegionHealthCheck(&#34;tcp-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(RegionHealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Tcp Full
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcp_region_health_check = new RegionHealthCheck(&#34;tcp-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .description(&#34;Health check via tcp&#34;)
 *             .healthyThreshold(4)
 *             .tcpHealthCheck(RegionHealthCheckTcpHealthCheckArgs.builder()
 *                 .portName(&#34;health-check-port&#34;)
 *                 .portSpecification(&#34;USE_NAMED_PORT&#34;)
 *                 .proxyHeader(&#34;NONE&#34;)
 *                 .request(&#34;ARE YOU HEALTHY?&#34;)
 *                 .response(&#34;I AM HEALTHY&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .unhealthyThreshold(5)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Ssl
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ssl_region_health_check = new RegionHealthCheck(&#34;ssl-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .sslHealthCheck(RegionHealthCheckSslHealthCheckArgs.builder()
 *                 .port(&#34;443&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Ssl Full
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ssl_region_health_check = new RegionHealthCheck(&#34;ssl-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .description(&#34;Health check via ssl&#34;)
 *             .healthyThreshold(4)
 *             .sslHealthCheck(RegionHealthCheckSslHealthCheckArgs.builder()
 *                 .portName(&#34;health-check-port&#34;)
 *                 .portSpecification(&#34;USE_NAMED_PORT&#34;)
 *                 .proxyHeader(&#34;NONE&#34;)
 *                 .request(&#34;ARE YOU HEALTHY?&#34;)
 *                 .response(&#34;I AM HEALTHY&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .unhealthyThreshold(5)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Http
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http_region_health_check = new RegionHealthCheck(&#34;http-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Http Logs
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http_region_health_check = new RegionHealthCheck(&#34;http-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .logConfig(RegionHealthCheckLogConfigArgs.builder()
 *                 .enable(true)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Http Full
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http_region_health_check = new RegionHealthCheck(&#34;http-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .description(&#34;Health check via http&#34;)
 *             .healthyThreshold(4)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .host(&#34;1.2.3.4&#34;)
 *                 .portName(&#34;health-check-port&#34;)
 *                 .portSpecification(&#34;USE_NAMED_PORT&#34;)
 *                 .proxyHeader(&#34;NONE&#34;)
 *                 .requestPath(&#34;/mypath&#34;)
 *                 .response(&#34;I AM HEALTHY&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .unhealthyThreshold(5)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Https
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var https_region_health_check = new RegionHealthCheck(&#34;https-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .httpsHealthCheck(RegionHealthCheckHttpsHealthCheckArgs.builder()
 *                 .port(&#34;443&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Https Full
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var https_region_health_check = new RegionHealthCheck(&#34;https-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .description(&#34;Health check via https&#34;)
 *             .healthyThreshold(4)
 *             .httpsHealthCheck(RegionHealthCheckHttpsHealthCheckArgs.builder()
 *                 .host(&#34;1.2.3.4&#34;)
 *                 .portName(&#34;health-check-port&#34;)
 *                 .portSpecification(&#34;USE_NAMED_PORT&#34;)
 *                 .proxyHeader(&#34;NONE&#34;)
 *                 .requestPath(&#34;/mypath&#34;)
 *                 .response(&#34;I AM HEALTHY&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .unhealthyThreshold(5)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Http2
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http2_region_health_check = new RegionHealthCheck(&#34;http2-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .http2HealthCheck(RegionHealthCheckHttp2HealthCheckArgs.builder()
 *                 .port(&#34;443&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Http2 Full
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http2_region_health_check = new RegionHealthCheck(&#34;http2-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .description(&#34;Health check via http2&#34;)
 *             .healthyThreshold(4)
 *             .http2HealthCheck(RegionHealthCheckHttp2HealthCheckArgs.builder()
 *                 .host(&#34;1.2.3.4&#34;)
 *                 .portName(&#34;health-check-port&#34;)
 *                 .portSpecification(&#34;USE_NAMED_PORT&#34;)
 *                 .proxyHeader(&#34;NONE&#34;)
 *                 .requestPath(&#34;/mypath&#34;)
 *                 .response(&#34;I AM HEALTHY&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .unhealthyThreshold(5)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Grpc
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var grpc_region_health_check = new RegionHealthCheck(&#34;grpc-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .grpcHealthCheck(RegionHealthCheckGrpcHealthCheckArgs.builder()
 *                 .port(&#34;443&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Region Health Check Grpc Full
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var grpc_region_health_check = new RegionHealthCheck(&#34;grpc-region-health-check&#34;, RegionHealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .grpcHealthCheck(RegionHealthCheckGrpcHealthCheckArgs.builder()
 *                 .grpcServiceName(&#34;testservice&#34;)
 *                 .portName(&#34;health-check-port&#34;)
 *                 .portSpecification(&#34;USE_NAMED_PORT&#34;)
 *                 .build())
 *             .timeoutSec(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * RegionHealthCheck can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default projects/{{project}}/regions/{{region}}/healthChecks/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/regionHealthCheck:RegionHealthCheck default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/regionHealthCheck:RegionHealthCheck")
public class RegionHealthCheck extends com.pulumi.resources.CustomResource {
    /**
     * How often (in seconds) to send a health check. The default value is 5
     * seconds.
     * 
     */
    @Export(name="checkIntervalSec", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> checkIntervalSec;

    /**
     * @return How often (in seconds) to send a health check. The default value is 5
     * seconds.
     * 
     */
    public Output<Optional<Integer>> checkIntervalSec() {
        return Codegen.optional(this.checkIntervalSec);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", type=String.class, parameters={})
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="grpcHealthCheck", type=RegionHealthCheckGrpcHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckGrpcHealthCheck> grpcHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionHealthCheckGrpcHealthCheck>> grpcHealthCheck() {
        return Codegen.optional(this.grpcHealthCheck);
    }
    /**
     * A so-far unhealthy instance will be marked healthy after this many
     * consecutive successes. The default value is 2.
     * 
     */
    @Export(name="healthyThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> healthyThreshold;

    /**
     * @return A so-far unhealthy instance will be marked healthy after this many
     * consecutive successes. The default value is 2.
     * 
     */
    public Output<Optional<Integer>> healthyThreshold() {
        return Codegen.optional(this.healthyThreshold);
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="http2HealthCheck", type=RegionHealthCheckHttp2HealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckHttp2HealthCheck> http2HealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionHealthCheckHttp2HealthCheck>> http2HealthCheck() {
        return Codegen.optional(this.http2HealthCheck);
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="httpHealthCheck", type=RegionHealthCheckHttpHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckHttpHealthCheck> httpHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionHealthCheckHttpHealthCheck>> httpHealthCheck() {
        return Codegen.optional(this.httpHealthCheck);
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="httpsHealthCheck", type=RegionHealthCheckHttpsHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckHttpsHealthCheck> httpsHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionHealthCheckHttpsHealthCheck>> httpsHealthCheck() {
        return Codegen.optional(this.httpsHealthCheck);
    }
    /**
     * Configure logging on this health check.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", type=RegionHealthCheckLogConfig.class, parameters={})
    private Output<RegionHealthCheckLogConfig> logConfig;

    /**
     * @return Configure logging on this health check.
     * Structure is documented below.
     * 
     */
    public Output<RegionHealthCheckLogConfig> logConfig() {
        return this.logConfig;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The Region in which the created health check should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The Region in which the created health check should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="sslHealthCheck", type=RegionHealthCheckSslHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckSslHealthCheck> sslHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionHealthCheckSslHealthCheck>> sslHealthCheck() {
        return Codegen.optional(this.sslHealthCheck);
    }
    /**
     * A nested object resource
     * Structure is documented below.
     * 
     */
    @Export(name="tcpHealthCheck", type=RegionHealthCheckTcpHealthCheck.class, parameters={})
    private Output</* @Nullable */ RegionHealthCheckTcpHealthCheck> tcpHealthCheck;

    /**
     * @return A nested object resource
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionHealthCheckTcpHealthCheck>> tcpHealthCheck() {
        return Codegen.optional(this.tcpHealthCheck);
    }
    /**
     * How long (in seconds) to wait before claiming failure.
     * The default value is 5 seconds.  It is invalid for timeoutSec to have
     * greater value than checkIntervalSec.
     * 
     */
    @Export(name="timeoutSec", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> timeoutSec;

    /**
     * @return How long (in seconds) to wait before claiming failure.
     * The default value is 5 seconds.  It is invalid for timeoutSec to have
     * greater value than checkIntervalSec.
     * 
     */
    public Output<Optional<Integer>> timeoutSec() {
        return Codegen.optional(this.timeoutSec);
    }
    /**
     * The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * A so-far healthy instance will be marked unhealthy after this many
     * consecutive failures. The default value is 2.
     * 
     */
    @Export(name="unhealthyThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> unhealthyThreshold;

    /**
     * @return A so-far healthy instance will be marked unhealthy after this many
     * consecutive failures. The default value is 2.
     * 
     */
    public Output<Optional<Integer>> unhealthyThreshold() {
        return Codegen.optional(this.unhealthyThreshold);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionHealthCheck(String name) {
        this(name, RegionHealthCheckArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionHealthCheck(String name, @Nullable RegionHealthCheckArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionHealthCheck(String name, @Nullable RegionHealthCheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionHealthCheck:RegionHealthCheck", name, args == null ? RegionHealthCheckArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RegionHealthCheck(String name, Output<String> id, @Nullable RegionHealthCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionHealthCheck:RegionHealthCheck", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionHealthCheck get(String name, Output<String> id, @Nullable RegionHealthCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegionHealthCheck(name, id, state, options);
    }
}
