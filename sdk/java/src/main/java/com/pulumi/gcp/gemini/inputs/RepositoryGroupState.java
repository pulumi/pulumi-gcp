// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gemini.inputs.RepositoryGroupRepositoryArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryGroupState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryGroupState Empty = new RepositoryGroupState();

    /**
     * Required. Id of the Code Repository Index.
     * 
     */
    @Import(name="codeRepositoryIndex")
    private @Nullable Output<String> codeRepositoryIndex;

    /**
     * @return Required. Id of the Code Repository Index.
     * 
     */
    public Optional<Output<String>> codeRepositoryIndex() {
        return Optional.ofNullable(this.codeRepositoryIndex);
    }

    /**
     * Output only. Create time stamp.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Create time stamp.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the Code Repository Index, for example `us-central1`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the Code Repository Index, for example `us-central1`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Immutable. Identifier. Name of Repository Group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Immutable. Identifier. Name of Repository Group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Required. List of repositories to group.
     * Structure is documented below.
     * 
     */
    @Import(name="repositories")
    private @Nullable Output<List<RepositoryGroupRepositoryArgs>> repositories;

    /**
     * @return Required. List of repositories to group.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RepositoryGroupRepositoryArgs>>> repositories() {
        return Optional.ofNullable(this.repositories);
    }

    /**
     * Required. Id of the Repository Group.
     * 
     */
    @Import(name="repositoryGroupId")
    private @Nullable Output<String> repositoryGroupId;

    /**
     * @return Required. Id of the Repository Group.
     * 
     */
    public Optional<Output<String>> repositoryGroupId() {
        return Optional.ofNullable(this.repositoryGroupId);
    }

    /**
     * Output only. Update time stamp.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. Update time stamp.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private RepositoryGroupState() {}

    private RepositoryGroupState(RepositoryGroupState $) {
        this.codeRepositoryIndex = $.codeRepositoryIndex;
        this.createTime = $.createTime;
        this.effectiveLabels = $.effectiveLabels;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.repositories = $.repositories;
        this.repositoryGroupId = $.repositoryGroupId;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryGroupState $;

        public Builder() {
            $ = new RepositoryGroupState();
        }

        public Builder(RepositoryGroupState defaults) {
            $ = new RepositoryGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeRepositoryIndex Required. Id of the Code Repository Index.
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndex(@Nullable Output<String> codeRepositoryIndex) {
            $.codeRepositoryIndex = codeRepositoryIndex;
            return this;
        }

        /**
         * @param codeRepositoryIndex Required. Id of the Code Repository Index.
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndex(String codeRepositoryIndex) {
            return codeRepositoryIndex(Output.of(codeRepositoryIndex));
        }

        /**
         * @param createTime Output only. Create time stamp.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Create time stamp.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Immutable. Identifier. Name of Repository Group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Immutable. Identifier. Name of Repository Group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param repositories Required. List of repositories to group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repositories(@Nullable Output<List<RepositoryGroupRepositoryArgs>> repositories) {
            $.repositories = repositories;
            return this;
        }

        /**
         * @param repositories Required. List of repositories to group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repositories(List<RepositoryGroupRepositoryArgs> repositories) {
            return repositories(Output.of(repositories));
        }

        /**
         * @param repositories Required. List of repositories to group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repositories(RepositoryGroupRepositoryArgs... repositories) {
            return repositories(List.of(repositories));
        }

        /**
         * @param repositoryGroupId Required. Id of the Repository Group.
         * 
         * @return builder
         * 
         */
        public Builder repositoryGroupId(@Nullable Output<String> repositoryGroupId) {
            $.repositoryGroupId = repositoryGroupId;
            return this;
        }

        /**
         * @param repositoryGroupId Required. Id of the Repository Group.
         * 
         * @return builder
         * 
         */
        public Builder repositoryGroupId(String repositoryGroupId) {
            return repositoryGroupId(Output.of(repositoryGroupId));
        }

        /**
         * @param updateTime Output only. Update time stamp.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. Update time stamp.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public RepositoryGroupState build() {
            return $;
        }
    }

}
