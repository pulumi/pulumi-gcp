// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.inputs.ClusterMasterAuthClientCertificateConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterMasterAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMasterAuthArgs Empty = new ClusterMasterAuthArgs();

    /**
     * Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<String> clientCertificate;

    /**
     * @return Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
     * 
     */
    public Optional<Output<String>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * Whether client certificate authorization is enabled for this cluster.  For example:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     * This block also contains several computed attributes, documented below.
     * 
     */
    @Import(name="clientCertificateConfig", required=true)
    private Output<ClusterMasterAuthClientCertificateConfigArgs> clientCertificateConfig;

    /**
     * @return Whether client certificate authorization is enabled for this cluster.  For example:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     * This block also contains several computed attributes, documented below.
     * 
     */
    public Output<ClusterMasterAuthClientCertificateConfigArgs> clientCertificateConfig() {
        return this.clientCertificateConfig;
    }

    /**
     * Base64 encoded private key used by clients to authenticate to the cluster endpoint.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return Base64 encoded private key used by clients to authenticate to the cluster endpoint.
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * Base64 encoded public certificate that is the root of trust for the cluster.
     * 
     */
    @Import(name="clusterCaCertificate")
    private @Nullable Output<String> clusterCaCertificate;

    /**
     * @return Base64 encoded public certificate that is the root of trust for the cluster.
     * 
     */
    public Optional<Output<String>> clusterCaCertificate() {
        return Optional.ofNullable(this.clusterCaCertificate);
    }

    private ClusterMasterAuthArgs() {}

    private ClusterMasterAuthArgs(ClusterMasterAuthArgs $) {
        this.clientCertificate = $.clientCertificate;
        this.clientCertificateConfig = $.clientCertificateConfig;
        this.clientKey = $.clientKey;
        this.clusterCaCertificate = $.clusterCaCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMasterAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMasterAuthArgs $;

        public Builder() {
            $ = new ClusterMasterAuthArgs();
        }

        public Builder(ClusterMasterAuthArgs defaults) {
            $ = new ClusterMasterAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificate Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(@Nullable Output<String> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificate Base64 encoded public certificate used by clients to authenticate to the cluster endpoint.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(String clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        /**
         * @param clientCertificateConfig Whether client certificate authorization is enabled for this cluster.  For example:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * 
         * This block also contains several computed attributes, documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateConfig(Output<ClusterMasterAuthClientCertificateConfigArgs> clientCertificateConfig) {
            $.clientCertificateConfig = clientCertificateConfig;
            return this;
        }

        /**
         * @param clientCertificateConfig Whether client certificate authorization is enabled for this cluster.  For example:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * 
         * This block also contains several computed attributes, documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateConfig(ClusterMasterAuthClientCertificateConfigArgs clientCertificateConfig) {
            return clientCertificateConfig(Output.of(clientCertificateConfig));
        }

        /**
         * @param clientKey Base64 encoded private key used by clients to authenticate to the cluster endpoint.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey Base64 encoded private key used by clients to authenticate to the cluster endpoint.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param clusterCaCertificate Base64 encoded public certificate that is the root of trust for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCaCertificate(@Nullable Output<String> clusterCaCertificate) {
            $.clusterCaCertificate = clusterCaCertificate;
            return this;
        }

        /**
         * @param clusterCaCertificate Base64 encoded public certificate that is the root of trust for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCaCertificate(String clusterCaCertificate) {
            return clusterCaCertificate(Output.of(clusterCaCertificate));
        }

        public ClusterMasterAuthArgs build() {
            if ($.clientCertificateConfig == null) {
                throw new MissingRequiredPropertyException("ClusterMasterAuthArgs", "clientCertificateConfig");
            }
            return $;
        }
    }

}
