// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolDefaultNodeConfigDefaultContainerdConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolDefaultNodeConfigDefaultGcfsConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterNodePoolDefaultNodeConfigDefault {
    /**
     * @return Parameters for containerd configuration.
     * 
     */
    private List<GetClusterNodePoolDefaultNodeConfigDefaultContainerdConfig> containerdConfigs;
    /**
     * @return GCFS configuration for this node.
     * 
     */
    private List<GetClusterNodePoolDefaultNodeConfigDefaultGcfsConfig> gcfsConfigs;
    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    private String insecureKubeletReadonlyPortEnabled;
    /**
     * @return Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
     * 
     */
    private String loggingVariant;

    private GetClusterNodePoolDefaultNodeConfigDefault() {}
    /**
     * @return Parameters for containerd configuration.
     * 
     */
    public List<GetClusterNodePoolDefaultNodeConfigDefaultContainerdConfig> containerdConfigs() {
        return this.containerdConfigs;
    }
    /**
     * @return GCFS configuration for this node.
     * 
     */
    public List<GetClusterNodePoolDefaultNodeConfigDefaultGcfsConfig> gcfsConfigs() {
        return this.gcfsConfigs;
    }
    /**
     * @return Controls whether the kubelet read-only port is enabled. It is strongly recommended to set this to `FALSE`. Possible values: `TRUE`, `FALSE`.
     * 
     */
    public String insecureKubeletReadonlyPortEnabled() {
        return this.insecureKubeletReadonlyPortEnabled;
    }
    /**
     * @return Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
     * 
     */
    public String loggingVariant() {
        return this.loggingVariant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodePoolDefaultNodeConfigDefault defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterNodePoolDefaultNodeConfigDefaultContainerdConfig> containerdConfigs;
        private List<GetClusterNodePoolDefaultNodeConfigDefaultGcfsConfig> gcfsConfigs;
        private String insecureKubeletReadonlyPortEnabled;
        private String loggingVariant;
        public Builder() {}
        public Builder(GetClusterNodePoolDefaultNodeConfigDefault defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerdConfigs = defaults.containerdConfigs;
    	      this.gcfsConfigs = defaults.gcfsConfigs;
    	      this.insecureKubeletReadonlyPortEnabled = defaults.insecureKubeletReadonlyPortEnabled;
    	      this.loggingVariant = defaults.loggingVariant;
        }

        @CustomType.Setter
        public Builder containerdConfigs(List<GetClusterNodePoolDefaultNodeConfigDefaultContainerdConfig> containerdConfigs) {
            if (containerdConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolDefaultNodeConfigDefault", "containerdConfigs");
            }
            this.containerdConfigs = containerdConfigs;
            return this;
        }
        public Builder containerdConfigs(GetClusterNodePoolDefaultNodeConfigDefaultContainerdConfig... containerdConfigs) {
            return containerdConfigs(List.of(containerdConfigs));
        }
        @CustomType.Setter
        public Builder gcfsConfigs(List<GetClusterNodePoolDefaultNodeConfigDefaultGcfsConfig> gcfsConfigs) {
            if (gcfsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolDefaultNodeConfigDefault", "gcfsConfigs");
            }
            this.gcfsConfigs = gcfsConfigs;
            return this;
        }
        public Builder gcfsConfigs(GetClusterNodePoolDefaultNodeConfigDefaultGcfsConfig... gcfsConfigs) {
            return gcfsConfigs(List.of(gcfsConfigs));
        }
        @CustomType.Setter
        public Builder insecureKubeletReadonlyPortEnabled(String insecureKubeletReadonlyPortEnabled) {
            if (insecureKubeletReadonlyPortEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolDefaultNodeConfigDefault", "insecureKubeletReadonlyPortEnabled");
            }
            this.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder loggingVariant(String loggingVariant) {
            if (loggingVariant == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolDefaultNodeConfigDefault", "loggingVariant");
            }
            this.loggingVariant = loggingVariant;
            return this;
        }
        public GetClusterNodePoolDefaultNodeConfigDefault build() {
            final var _resultValue = new GetClusterNodePoolDefaultNodeConfigDefault();
            _resultValue.containerdConfigs = containerdConfigs;
            _resultValue.gcfsConfigs = gcfsConfigs;
            _resultValue.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
            _resultValue.loggingVariant = loggingVariant;
            return _resultValue;
        }
    }
}
