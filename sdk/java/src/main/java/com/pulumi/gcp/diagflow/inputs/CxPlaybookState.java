// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxPlaybookInstructionArgs;
import com.pulumi.gcp.diagflow.inputs.CxPlaybookLlmModelSettingsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxPlaybookState extends com.pulumi.resources.ResourceArgs {

    public static final CxPlaybookState Empty = new CxPlaybookState();

    /**
     * The timestamp of initial playbook creation.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp of initial playbook creation.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The human-readable name of the playbook, unique within an agent.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The human-readable name of the playbook, unique within an agent.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
     * 
     */
    @Import(name="goal")
    private @Nullable Output<String> goal;

    /**
     * @return High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
     * 
     */
    public Optional<Output<String>> goal() {
        return Optional.ofNullable(this.goal);
    }

    /**
     * Instruction to accomplish target goal.
     * Structure is documented below.
     * 
     */
    @Import(name="instruction")
    private @Nullable Output<CxPlaybookInstructionArgs> instruction;

    /**
     * @return Instruction to accomplish target goal.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxPlaybookInstructionArgs>> instruction() {
        return Optional.ofNullable(this.instruction);
    }

    /**
     * Llm model settings for the playbook.
     * Structure is documented below.
     * 
     */
    @Import(name="llmModelSettings")
    private @Nullable Output<CxPlaybookLlmModelSettingsArgs> llmModelSettings;

    /**
     * @return Llm model settings for the playbook.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxPlaybookLlmModelSettingsArgs>> llmModelSettings() {
        return Optional.ofNullable(this.llmModelSettings);
    }

    /**
     * The unique identifier of the Playbook.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique identifier of the Playbook.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The agent to create a Playbook for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The agent to create a Playbook for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     * 
     */
    @Import(name="playbookType")
    private @Nullable Output<String> playbookType;

    /**
     * @return Type of the playbook.
     * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
     * 
     */
    public Optional<Output<String>> playbookType() {
        return Optional.ofNullable(this.playbookType);
    }

    /**
     * The resource name of flows referenced by the current playbook in the instructions.
     * 
     */
    @Import(name="referencedFlows")
    private @Nullable Output<List<String>> referencedFlows;

    /**
     * @return The resource name of flows referenced by the current playbook in the instructions.
     * 
     */
    public Optional<Output<List<String>>> referencedFlows() {
        return Optional.ofNullable(this.referencedFlows);
    }

    /**
     * The resource name of other playbooks referenced by the current playbook in the instructions.
     * 
     */
    @Import(name="referencedPlaybooks")
    private @Nullable Output<List<String>> referencedPlaybooks;

    /**
     * @return The resource name of other playbooks referenced by the current playbook in the instructions.
     * 
     */
    public Optional<Output<List<String>>> referencedPlaybooks() {
        return Optional.ofNullable(this.referencedPlaybooks);
    }

    /**
     * The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     * 
     */
    @Import(name="referencedTools")
    private @Nullable Output<List<String>> referencedTools;

    /**
     * @return The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
     * 
     */
    public Optional<Output<List<String>>> referencedTools() {
        return Optional.ofNullable(this.referencedTools);
    }

    /**
     * Estimated number of tokes current playbook takes when sent to the LLM.
     * 
     */
    @Import(name="tokenCount")
    private @Nullable Output<String> tokenCount;

    /**
     * @return Estimated number of tokes current playbook takes when sent to the LLM.
     * 
     */
    public Optional<Output<String>> tokenCount() {
        return Optional.ofNullable(this.tokenCount);
    }

    /**
     * Last time the playbook version was updated.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Last time the playbook version was updated.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private CxPlaybookState() {}

    private CxPlaybookState(CxPlaybookState $) {
        this.createTime = $.createTime;
        this.displayName = $.displayName;
        this.goal = $.goal;
        this.instruction = $.instruction;
        this.llmModelSettings = $.llmModelSettings;
        this.name = $.name;
        this.parent = $.parent;
        this.playbookType = $.playbookType;
        this.referencedFlows = $.referencedFlows;
        this.referencedPlaybooks = $.referencedPlaybooks;
        this.referencedTools = $.referencedTools;
        this.tokenCount = $.tokenCount;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxPlaybookState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxPlaybookState $;

        public Builder() {
            $ = new CxPlaybookState();
        }

        public Builder(CxPlaybookState defaults) {
            $ = new CxPlaybookState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The timestamp of initial playbook creation.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp of initial playbook creation.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param displayName The human-readable name of the playbook, unique within an agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the playbook, unique within an agent.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param goal High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
         * 
         * @return builder
         * 
         */
        public Builder goal(@Nullable Output<String> goal) {
            $.goal = goal;
            return this;
        }

        /**
         * @param goal High level description of the goal the playbook intend to accomplish. A goal should be concise since it&#39;s visible to other playbooks that may reference this playbook.
         * 
         * @return builder
         * 
         */
        public Builder goal(String goal) {
            return goal(Output.of(goal));
        }

        /**
         * @param instruction Instruction to accomplish target goal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder instruction(@Nullable Output<CxPlaybookInstructionArgs> instruction) {
            $.instruction = instruction;
            return this;
        }

        /**
         * @param instruction Instruction to accomplish target goal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder instruction(CxPlaybookInstructionArgs instruction) {
            return instruction(Output.of(instruction));
        }

        /**
         * @param llmModelSettings Llm model settings for the playbook.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder llmModelSettings(@Nullable Output<CxPlaybookLlmModelSettingsArgs> llmModelSettings) {
            $.llmModelSettings = llmModelSettings;
            return this;
        }

        /**
         * @param llmModelSettings Llm model settings for the playbook.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder llmModelSettings(CxPlaybookLlmModelSettingsArgs llmModelSettings) {
            return llmModelSettings(Output.of(llmModelSettings));
        }

        /**
         * @param name The unique identifier of the Playbook.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique identifier of the Playbook.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/playbooks/&lt;Playbook ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent The agent to create a Playbook for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The agent to create a Playbook for.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param playbookType Type of the playbook.
         * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
         * 
         * @return builder
         * 
         */
        public Builder playbookType(@Nullable Output<String> playbookType) {
            $.playbookType = playbookType;
            return this;
        }

        /**
         * @param playbookType Type of the playbook.
         * Possible values are: `PLAYBOOK_TYPE_UNSPECIFIED`, `TASK`, `ROUTINE`.
         * 
         * @return builder
         * 
         */
        public Builder playbookType(String playbookType) {
            return playbookType(Output.of(playbookType));
        }

        /**
         * @param referencedFlows The resource name of flows referenced by the current playbook in the instructions.
         * 
         * @return builder
         * 
         */
        public Builder referencedFlows(@Nullable Output<List<String>> referencedFlows) {
            $.referencedFlows = referencedFlows;
            return this;
        }

        /**
         * @param referencedFlows The resource name of flows referenced by the current playbook in the instructions.
         * 
         * @return builder
         * 
         */
        public Builder referencedFlows(List<String> referencedFlows) {
            return referencedFlows(Output.of(referencedFlows));
        }

        /**
         * @param referencedFlows The resource name of flows referenced by the current playbook in the instructions.
         * 
         * @return builder
         * 
         */
        public Builder referencedFlows(String... referencedFlows) {
            return referencedFlows(List.of(referencedFlows));
        }

        /**
         * @param referencedPlaybooks The resource name of other playbooks referenced by the current playbook in the instructions.
         * 
         * @return builder
         * 
         */
        public Builder referencedPlaybooks(@Nullable Output<List<String>> referencedPlaybooks) {
            $.referencedPlaybooks = referencedPlaybooks;
            return this;
        }

        /**
         * @param referencedPlaybooks The resource name of other playbooks referenced by the current playbook in the instructions.
         * 
         * @return builder
         * 
         */
        public Builder referencedPlaybooks(List<String> referencedPlaybooks) {
            return referencedPlaybooks(Output.of(referencedPlaybooks));
        }

        /**
         * @param referencedPlaybooks The resource name of other playbooks referenced by the current playbook in the instructions.
         * 
         * @return builder
         * 
         */
        public Builder referencedPlaybooks(String... referencedPlaybooks) {
            return referencedPlaybooks(List.of(referencedPlaybooks));
        }

        /**
         * @param referencedTools The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
         * 
         * @return builder
         * 
         */
        public Builder referencedTools(@Nullable Output<List<String>> referencedTools) {
            $.referencedTools = referencedTools;
            return this;
        }

        /**
         * @param referencedTools The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
         * 
         * @return builder
         * 
         */
        public Builder referencedTools(List<String> referencedTools) {
            return referencedTools(Output.of(referencedTools));
        }

        /**
         * @param referencedTools The resource name of tools referenced by the current playbook in the instructions. If not provided explicitly, they are will be implied using the tool being referenced in goal and steps.
         * 
         * @return builder
         * 
         */
        public Builder referencedTools(String... referencedTools) {
            return referencedTools(List.of(referencedTools));
        }

        /**
         * @param tokenCount Estimated number of tokes current playbook takes when sent to the LLM.
         * 
         * @return builder
         * 
         */
        public Builder tokenCount(@Nullable Output<String> tokenCount) {
            $.tokenCount = tokenCount;
            return this;
        }

        /**
         * @param tokenCount Estimated number of tokes current playbook takes when sent to the LLM.
         * 
         * @return builder
         * 
         */
        public Builder tokenCount(String tokenCount) {
            return tokenCount(Output.of(tokenCount));
        }

        /**
         * @param updateTime Last time the playbook version was updated.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Last time the playbook version was updated.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted. Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public CxPlaybookState build() {
            return $;
        }
    }

}
