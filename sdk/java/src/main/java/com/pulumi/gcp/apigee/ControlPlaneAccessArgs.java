// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlPlaneAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlPlaneAccessArgs Empty = new ControlPlaneAccessArgs();

    /**
     * Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * 
     */
    @Import(name="analyticsPublisherIdentities")
    private @Nullable Output<List<String>> analyticsPublisherIdentities;

    /**
     * @return Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * 
     */
    public Optional<Output<List<String>>> analyticsPublisherIdentities() {
        return Optional.ofNullable(this.analyticsPublisherIdentities);
    }

    /**
     * Name of the Apigee organization.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Apigee organization.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     * 
     */
    @Import(name="synchronizerIdentities")
    private @Nullable Output<List<String>> synchronizerIdentities;

    /**
     * @return Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     * 
     */
    public Optional<Output<List<String>>> synchronizerIdentities() {
        return Optional.ofNullable(this.synchronizerIdentities);
    }

    private ControlPlaneAccessArgs() {}

    private ControlPlaneAccessArgs(ControlPlaneAccessArgs $) {
        this.analyticsPublisherIdentities = $.analyticsPublisherIdentities;
        this.name = $.name;
        this.synchronizerIdentities = $.synchronizerIdentities;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlPlaneAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlPlaneAccessArgs $;

        public Builder() {
            $ = new ControlPlaneAccessArgs();
        }

        public Builder(ControlPlaneAccessArgs defaults) {
            $ = new ControlPlaneAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyticsPublisherIdentities Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
         * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
         * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
         * 
         * @return builder
         * 
         */
        public Builder analyticsPublisherIdentities(@Nullable Output<List<String>> analyticsPublisherIdentities) {
            $.analyticsPublisherIdentities = analyticsPublisherIdentities;
            return this;
        }

        /**
         * @param analyticsPublisherIdentities Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
         * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
         * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
         * 
         * @return builder
         * 
         */
        public Builder analyticsPublisherIdentities(List<String> analyticsPublisherIdentities) {
            return analyticsPublisherIdentities(Output.of(analyticsPublisherIdentities));
        }

        /**
         * @param analyticsPublisherIdentities Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
         * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
         * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
         * 
         * @return builder
         * 
         */
        public Builder analyticsPublisherIdentities(String... analyticsPublisherIdentities) {
            return analyticsPublisherIdentities(List.of(analyticsPublisherIdentities));
        }

        /**
         * @param name Name of the Apigee organization.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Apigee organization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param synchronizerIdentities Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
         * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
         * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
         * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
         * 
         * @return builder
         * 
         */
        public Builder synchronizerIdentities(@Nullable Output<List<String>> synchronizerIdentities) {
            $.synchronizerIdentities = synchronizerIdentities;
            return this;
        }

        /**
         * @param synchronizerIdentities Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
         * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
         * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
         * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
         * 
         * @return builder
         * 
         */
        public Builder synchronizerIdentities(List<String> synchronizerIdentities) {
            return synchronizerIdentities(Output.of(synchronizerIdentities));
        }

        /**
         * @param synchronizerIdentities Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
         * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
         * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
         * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
         * 
         * @return builder
         * 
         */
        public Builder synchronizerIdentities(String... synchronizerIdentities) {
            return synchronizerIdentities(List.of(synchronizerIdentities));
        }

        public ControlPlaneAccessArgs build() {
            return $;
        }
    }

}
