// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionNetworkEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final RegionNetworkEndpointState Empty = new RegionNetworkEndpointState();

    /**
     * Client destination port for the `GCE_VM_IP_PORTMAP` NEG.
     * 
     */
    @Import(name="clientDestinationPort")
    private @Nullable Output<Integer> clientDestinationPort;

    /**
     * @return Client destination port for the `GCE_VM_IP_PORTMAP` NEG.
     * 
     */
    public Optional<Output<Integer>> clientDestinationPort() {
        return Optional.ofNullable(this.clientDestinationPort);
    }

    /**
     * Fully qualified domain name of network endpoint.
     * This can only be specified when network_endpoint_type of the NEG is INTERNET_FQDN_PORT.
     * 
     */
    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    /**
     * @return Fully qualified domain name of network endpoint.
     * This can only be specified when network_endpoint_type of the NEG is INTERNET_FQDN_PORT.
     * 
     */
    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * The name for a specific VM instance that the IP address belongs to.
     * This is required for network endpoints of type GCE_VM_IP_PORTMAP.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    /**
     * @return The name for a specific VM instance that the IP address belongs to.
     * This is required for network endpoints of type GCE_VM_IP_PORTMAP.
     * 
     */
    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * IPv4 address external endpoint.
     * This can only be specified when network_endpoint_type of the NEG is INTERNET_IP_PORT.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IPv4 address external endpoint.
     * This can only be specified when network_endpoint_type of the NEG is INTERNET_IP_PORT.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The unique identifier number for the resource. This identifier is defined by the server.
     * 
     */
    @Import(name="networkEndpointId")
    private @Nullable Output<Integer> networkEndpointId;

    /**
     * @return The unique identifier number for the resource. This identifier is defined by the server.
     * 
     */
    public Optional<Output<Integer>> networkEndpointId() {
        return Optional.ofNullable(this.networkEndpointId);
    }

    /**
     * Port number of network endpoint.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port number of network endpoint.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Region where the containing network endpoint group is located.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where the containing network endpoint group is located.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The network endpoint group this endpoint is part of.
     * 
     */
    @Import(name="regionNetworkEndpointGroup")
    private @Nullable Output<String> regionNetworkEndpointGroup;

    /**
     * @return The network endpoint group this endpoint is part of.
     * 
     */
    public Optional<Output<String>> regionNetworkEndpointGroup() {
        return Optional.ofNullable(this.regionNetworkEndpointGroup);
    }

    private RegionNetworkEndpointState() {}

    private RegionNetworkEndpointState(RegionNetworkEndpointState $) {
        this.clientDestinationPort = $.clientDestinationPort;
        this.fqdn = $.fqdn;
        this.instance = $.instance;
        this.ipAddress = $.ipAddress;
        this.networkEndpointId = $.networkEndpointId;
        this.port = $.port;
        this.project = $.project;
        this.region = $.region;
        this.regionNetworkEndpointGroup = $.regionNetworkEndpointGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionNetworkEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionNetworkEndpointState $;

        public Builder() {
            $ = new RegionNetworkEndpointState();
        }

        public Builder(RegionNetworkEndpointState defaults) {
            $ = new RegionNetworkEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientDestinationPort Client destination port for the `GCE_VM_IP_PORTMAP` NEG.
         * 
         * @return builder
         * 
         */
        public Builder clientDestinationPort(@Nullable Output<Integer> clientDestinationPort) {
            $.clientDestinationPort = clientDestinationPort;
            return this;
        }

        /**
         * @param clientDestinationPort Client destination port for the `GCE_VM_IP_PORTMAP` NEG.
         * 
         * @return builder
         * 
         */
        public Builder clientDestinationPort(Integer clientDestinationPort) {
            return clientDestinationPort(Output.of(clientDestinationPort));
        }

        /**
         * @param fqdn Fully qualified domain name of network endpoint.
         * This can only be specified when network_endpoint_type of the NEG is INTERNET_FQDN_PORT.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn Fully qualified domain name of network endpoint.
         * This can only be specified when network_endpoint_type of the NEG is INTERNET_FQDN_PORT.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param instance The name for a specific VM instance that the IP address belongs to.
         * This is required for network endpoints of type GCE_VM_IP_PORTMAP.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The name for a specific VM instance that the IP address belongs to.
         * This is required for network endpoints of type GCE_VM_IP_PORTMAP.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param ipAddress IPv4 address external endpoint.
         * This can only be specified when network_endpoint_type of the NEG is INTERNET_IP_PORT.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IPv4 address external endpoint.
         * This can only be specified when network_endpoint_type of the NEG is INTERNET_IP_PORT.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param networkEndpointId The unique identifier number for the resource. This identifier is defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder networkEndpointId(@Nullable Output<Integer> networkEndpointId) {
            $.networkEndpointId = networkEndpointId;
            return this;
        }

        /**
         * @param networkEndpointId The unique identifier number for the resource. This identifier is defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder networkEndpointId(Integer networkEndpointId) {
            return networkEndpointId(Output.of(networkEndpointId));
        }

        /**
         * @param port Port number of network endpoint.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port number of network endpoint.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Region where the containing network endpoint group is located.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where the containing network endpoint group is located.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionNetworkEndpointGroup The network endpoint group this endpoint is part of.
         * 
         * @return builder
         * 
         */
        public Builder regionNetworkEndpointGroup(@Nullable Output<String> regionNetworkEndpointGroup) {
            $.regionNetworkEndpointGroup = regionNetworkEndpointGroup;
            return this;
        }

        /**
         * @param regionNetworkEndpointGroup The network endpoint group this endpoint is part of.
         * 
         * @return builder
         * 
         */
        public Builder regionNetworkEndpointGroup(String regionNetworkEndpointGroup) {
            return regionNetworkEndpointGroup(Output.of(regionNetworkEndpointGroup));
        }

        public RegionNetworkEndpointState build() {
            return $;
        }
    }

}
