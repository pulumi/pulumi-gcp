// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.netapp.VolumeArgs;
import com.pulumi.gcp.netapp.inputs.VolumeState;
import com.pulumi.gcp.netapp.outputs.VolumeBackupConfig;
import com.pulumi.gcp.netapp.outputs.VolumeExportPolicy;
import com.pulumi.gcp.netapp.outputs.VolumeMountOption;
import com.pulumi.gcp.netapp.outputs.VolumeRestoreParameters;
import com.pulumi.gcp.netapp.outputs.VolumeSnapshotPolicy;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A volume is a file system container in a storage pool that stores application, database, and user data.
 * 
 * You can create a volume&#39;s capacity using the available capacity in the storage pool and you can define and resize the capacity without disruption to any processes.
 * 
 * Storage pool settings apply to the volumes contained within them automatically.
 * 
 * To get more information about Volume, see:
 * 
 * * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.volumes)
 * * How-to Guides
 *     * [Documentation](https://cloud.google.com/netapp/volumes/docs/configure-and-use/volumes/overview)
 *     * [Quickstart](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-volume)
 * 
 * ## Example Usage
 * 
 * ### Netapp Volume Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
 * import com.pulumi.gcp.netapp.StoragePool;
 * import com.pulumi.gcp.netapp.StoragePoolArgs;
 * import com.pulumi.gcp.netapp.Volume;
 * import com.pulumi.gcp.netapp.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
 *             .name("test-network")
 *             .build());
 * 
 *         var defaultStoragePool = new StoragePool("defaultStoragePool", StoragePoolArgs.builder()
 *             .name("test-pool")
 *             .location("us-west2")
 *             .serviceLevel("PREMIUM")
 *             .capacityGib("2048")
 *             .network(default_.id())
 *             .build());
 * 
 *         var testVolume = new Volume("testVolume", VolumeArgs.builder()
 *             .location("us-west2")
 *             .name("test-volume")
 *             .capacityGib("100")
 *             .shareName("test-volume")
 *             .storagePool(defaultStoragePool.name())
 *             .protocols("NFSV3")
 *             .deletionPolicy("DEFAULT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Volume can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/volumes/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Volume can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:netapp/volume:Volume default projects/{{project}}/locations/{{location}}/volumes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/volume:Volume default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:netapp/volume:Volume default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:netapp/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
     * 
     */
    @Export(name="activeDirectory", refs={String.class}, tree="[0]")
    private Output<String> activeDirectory;

    /**
     * @return Reports the resource name of the Active Directory policy being used. Inherited from storage pool.
     * 
     */
    public Output<String> activeDirectory() {
        return this.activeDirectory;
    }
    /**
     * Backup configuration for the volume.
     * Structure is documented below.
     * 
     */
    @Export(name="backupConfig", refs={VolumeBackupConfig.class}, tree="[0]")
    private Output</* @Nullable */ VolumeBackupConfig> backupConfig;

    /**
     * @return Backup configuration for the volume.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VolumeBackupConfig>> backupConfig() {
        return Codegen.optional(this.backupConfig);
    }
    /**
     * Capacity of the volume (in GiB).
     * 
     */
    @Export(name="capacityGib", refs={String.class}, tree="[0]")
    private Output<String> capacityGib;

    /**
     * @return Capacity of the volume (in GiB).
     * 
     */
    public Output<String> capacityGib() {
        return this.capacityGib;
    }
    /**
     * Create time of the volume. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Create time of the volume. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     * 
     */
    @Export(name="deletionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deletionPolicy;

    /**
     * @return Policy to determine if the volume should be deleted forcefully.
     * Volumes may have nested snapshot resources. Deleting such a volume will fail.
     * Setting this parameter to FORCE will delete volumes including nested snapshots.
     * Possible values: DEFAULT, FORCE.
     * 
     */
    public Output<Optional<String>> deletionPolicy() {
        return Codegen.optional(this.deletionPolicy);
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
     * 
     */
    @Export(name="encryptionType", refs={String.class}, tree="[0]")
    private Output<String> encryptionType;

    /**
     * @return Reports the data-at-rest encryption type of the volume. Inherited from storage pool.
     * 
     */
    public Output<String> encryptionType() {
        return this.encryptionType;
    }
    /**
     * Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     * 
     */
    @Export(name="exportPolicy", refs={VolumeExportPolicy.class}, tree="[0]")
    private Output</* @Nullable */ VolumeExportPolicy> exportPolicy;

    /**
     * @return Export policy of the volume for NFSV3 and/or NFSV4.1 access.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VolumeExportPolicy>> exportPolicy() {
        return Codegen.optional(this.exportPolicy);
    }
    /**
     * Indicates whether the volume is part of a volume replication relationship.
     * 
     */
    @Export(name="hasReplication", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> hasReplication;

    /**
     * @return Indicates whether the volume is part of a volume replication relationship.
     * 
     */
    public Output<Boolean> hasReplication() {
        return this.hasReplication;
    }
    /**
     * Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     * 
     */
    @Export(name="kerberosEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> kerberosEnabled;

    /**
     * @return Flag indicating if the volume is a kerberos volume or not, export policy rules control kerberos security modes (krb5, krb5i, krb5p).
     * 
     */
    public Output<Optional<Boolean>> kerberosEnabled() {
        return Codegen.optional(this.kerberosEnabled);
    }
    /**
     * Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
     * 
     */
    @Export(name="kmsConfig", refs={String.class}, tree="[0]")
    private Output<String> kmsConfig;

    /**
     * @return Reports the CMEK policy resurce name being used for volume encryption. Inherited from storage pool.
     * 
     */
    public Output<String> kmsConfig() {
        return this.kmsConfig;
    }
    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
     * 
     */
    @Export(name="ldapEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ldapEnabled;

    /**
     * @return Flag indicating if the volume is NFS LDAP enabled or not. Inherited from storage pool.
     * 
     */
    public Output<Boolean> ldapEnabled() {
        return this.ldapEnabled;
    }
    /**
     * Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Name of the pool location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Reports mount instructions for this volume.
     * Structure is documented below.
     * 
     */
    @Export(name="mountOptions", refs={List.class,VolumeMountOption.class}, tree="[0,1]")
    private Output<List<VolumeMountOption>> mountOptions;

    /**
     * @return Reports mount instructions for this volume.
     * Structure is documented below.
     * 
     */
    public Output<List<VolumeMountOption>> mountOptions() {
        return this.mountOptions;
    }
    /**
     * The name of the volume. Needs to be unique per location.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the volume. Needs to be unique per location.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
     * 
     */
    @Export(name="network", refs={String.class}, tree="[0]")
    private Output<String> network;

    /**
     * @return VPC network name with format: `projects/{{project}}/global/networks/{{network}}`. Inherited from storage pool.
     * 
     */
    public Output<String> network() {
        return this.network;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     * 
     */
    @Export(name="protocols", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> protocols;

    /**
     * @return The protocol of the volume. Allowed combinations are `[&#39;NFSV3&#39;]`, `[&#39;NFSV4&#39;]`, `[&#39;SMB&#39;]`, `[&#39;NFSV3&#39;, &#39;NFSV4&#39;]`, `[&#39;SMB&#39;, &#39;NFSV3&#39;]` and `[&#39;SMB&#39;, &#39;NFSV4&#39;]`.
     * Each value may be one of: `NFSV3`, `NFSV4`, `SMB`.
     * 
     */
    public Output<List<String>> protocols() {
        return this.protocols;
    }
    /**
     * Name of the Private Service Access allocated range. Inherited from storage pool.
     * 
     */
    @Export(name="psaRange", refs={String.class}, tree="[0]")
    private Output<String> psaRange;

    /**
     * @return Name of the Private Service Access allocated range. Inherited from storage pool.
     * 
     */
    public Output<String> psaRange() {
        return this.psaRange;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Specifies the replica zone for regional volume.
     * 
     */
    @Export(name="replicaZone", refs={String.class}, tree="[0]")
    private Output<String> replicaZone;

    /**
     * @return Specifies the replica zone for regional volume.
     * 
     */
    public Output<String> replicaZone() {
        return this.replicaZone;
    }
    /**
     * Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     * 
     */
    @Export(name="restoreParameters", refs={VolumeRestoreParameters.class}, tree="[0]")
    private Output</* @Nullable */ VolumeRestoreParameters> restoreParameters;

    /**
     * @return Used to create this volume from a snapshot (= cloning) or an backup.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VolumeRestoreParameters>> restoreParameters() {
        return Codegen.optional(this.restoreParameters);
    }
    /**
     * List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     * 
     */
    @Export(name="restrictedActions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> restrictedActions;

    /**
     * @return List of actions that are restricted on this volume.
     * Each value may be one of: `DELETE`.
     * 
     */
    public Output<Optional<List<String>>> restrictedActions() {
        return Codegen.optional(this.restrictedActions);
    }
    /**
     * Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     * 
     */
    @Export(name="securityStyle", refs={String.class}, tree="[0]")
    private Output<String> securityStyle;

    /**
     * @return Security Style of the Volume. Use UNIX to use UNIX or NFSV4 ACLs for file permissions.
     * Use NTFS to use NTFS ACLs for file permissions. Can only be set for volumes which use SMB together with NFS as protocol.
     * Possible values are: `NTFS`, `UNIX`.
     * 
     */
    public Output<String> securityStyle() {
        return this.securityStyle;
    }
    /**
     * Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTERME, STANDARD, FLEX.
     * 
     */
    @Export(name="serviceLevel", refs={String.class}, tree="[0]")
    private Output<String> serviceLevel;

    /**
     * @return Service level of the volume. Inherited from storage pool. Supported values are : PREMIUM, EXTERME, STANDARD, FLEX.
     * 
     */
    public Output<String> serviceLevel() {
        return this.serviceLevel;
    }
    /**
     * Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     * 
     */
    @Export(name="shareName", refs={String.class}, tree="[0]")
    private Output<String> shareName;

    /**
     * @return Share name (SMB) or export path (NFS) of the volume. Needs to be unique per location.
     * 
     */
    public Output<String> shareName() {
        return this.shareName;
    }
    /**
     * Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     * 
     */
    @Export(name="smbSettings", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> smbSettings;

    /**
     * @return Settings for volumes with SMB access.
     * Each value may be one of: `ENCRYPT_DATA`, `BROWSABLE`, `CHANGE_NOTIFY`, `NON_BROWSABLE`, `OPLOCKS`, `SHOW_SNAPSHOT`, `SHOW_PREVIOUS_VERSIONS`, `ACCESS_BASED_ENUMERATION`, `CONTINUOUSLY_AVAILABLE`.
     * 
     */
    public Output<List<String>> smbSettings() {
        return this.smbSettings;
    }
    /**
     * If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume&#39;s snapshots. Will enable &#34;Previous Versions&#34; support for SMB.
     * 
     */
    @Export(name="snapshotDirectory", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> snapshotDirectory;

    /**
     * @return If enabled, a NFS volume will contain a read-only .snapshot directory which provides access to each of the volume&#39;s snapshots. Will enable &#34;Previous Versions&#34; support for SMB.
     * 
     */
    public Output<Optional<Boolean>> snapshotDirectory() {
        return Codegen.optional(this.snapshotDirectory);
    }
    /**
     * Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
     * Structure is documented below.
     * 
     */
    @Export(name="snapshotPolicy", refs={VolumeSnapshotPolicy.class}, tree="[0]")
    private Output</* @Nullable */ VolumeSnapshotPolicy> snapshotPolicy;

    /**
     * @return Snapshot policy defines the schedule for automatic snapshot creation.
     * To disable automatic snapshot creation you have to remove the whole snapshot_policy block.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VolumeSnapshotPolicy>> snapshotPolicy() {
        return Codegen.optional(this.snapshotPolicy);
    }
    /**
     * State of the volume.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State of the volume.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * State details of the volume.
     * 
     */
    @Export(name="stateDetails", refs={String.class}, tree="[0]")
    private Output<String> stateDetails;

    /**
     * @return State details of the volume.
     * 
     */
    public Output<String> stateDetails() {
        return this.stateDetails;
    }
    /**
     * Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
     * 
     */
    @Export(name="storagePool", refs={String.class}, tree="[0]")
    private Output<String> storagePool;

    /**
     * @return Name of the storage pool to create the volume in. Pool needs enough spare capacity to accomodate the volume.
     * 
     */
    public Output<String> storagePool() {
        return this.storagePool;
    }
    /**
     * Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     * 
     */
    @Export(name="unixPermissions", refs={String.class}, tree="[0]")
    private Output<String> unixPermissions;

    /**
     * @return Unix permission the mount point will be created with. Default is 0770. Applicable for UNIX security style volumes only.
     * 
     */
    public Output<String> unixPermissions() {
        return this.unixPermissions;
    }
    /**
     * Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
     * 
     */
    @Export(name="usedGib", refs={String.class}, tree="[0]")
    private Output<String> usedGib;

    /**
     * @return Used capacity of the volume (in GiB). This is computed periodically and it does not represent the realtime usage.
     * 
     */
    public Output<String> usedGib() {
        return this.usedGib;
    }
    /**
     * Specifies the active zone for regional volume.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return Specifies the active zone for regional volume.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(java.lang.String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(java.lang.String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(java.lang.String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/volume:Volume", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Volume(java.lang.String name, Output<java.lang.String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:netapp/volume:Volume", name, state, makeResourceOptions(options, id), false);
    }

    private static VolumeArgs makeArgs(VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VolumeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(java.lang.String name, Output<java.lang.String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
