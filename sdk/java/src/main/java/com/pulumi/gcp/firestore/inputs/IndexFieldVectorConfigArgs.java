// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firestore.inputs.IndexFieldVectorConfigFlatArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IndexFieldVectorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexFieldVectorConfigArgs Empty = new IndexFieldVectorConfigArgs();

    /**
     * The resulting index will only include vectors of this dimension, and can be used for vector search
     * with the same dimension.
     * 
     */
    @Import(name="dimension")
    private @Nullable Output<Integer> dimension;

    /**
     * @return The resulting index will only include vectors of this dimension, and can be used for vector search
     * with the same dimension.
     * 
     */
    public Optional<Output<Integer>> dimension() {
        return Optional.ofNullable(this.dimension);
    }

    /**
     * Indicates the vector index is a flat index.
     * 
     */
    @Import(name="flat")
    private @Nullable Output<IndexFieldVectorConfigFlatArgs> flat;

    /**
     * @return Indicates the vector index is a flat index.
     * 
     */
    public Optional<Output<IndexFieldVectorConfigFlatArgs>> flat() {
        return Optional.ofNullable(this.flat);
    }

    private IndexFieldVectorConfigArgs() {}

    private IndexFieldVectorConfigArgs(IndexFieldVectorConfigArgs $) {
        this.dimension = $.dimension;
        this.flat = $.flat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexFieldVectorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexFieldVectorConfigArgs $;

        public Builder() {
            $ = new IndexFieldVectorConfigArgs();
        }

        public Builder(IndexFieldVectorConfigArgs defaults) {
            $ = new IndexFieldVectorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dimension The resulting index will only include vectors of this dimension, and can be used for vector search
         * with the same dimension.
         * 
         * @return builder
         * 
         */
        public Builder dimension(@Nullable Output<Integer> dimension) {
            $.dimension = dimension;
            return this;
        }

        /**
         * @param dimension The resulting index will only include vectors of this dimension, and can be used for vector search
         * with the same dimension.
         * 
         * @return builder
         * 
         */
        public Builder dimension(Integer dimension) {
            return dimension(Output.of(dimension));
        }

        /**
         * @param flat Indicates the vector index is a flat index.
         * 
         * @return builder
         * 
         */
        public Builder flat(@Nullable Output<IndexFieldVectorConfigFlatArgs> flat) {
            $.flat = flat;
            return this;
        }

        /**
         * @param flat Indicates the vector index is a flat index.
         * 
         * @return builder
         * 
         */
        public Builder flat(IndexFieldVectorConfigFlatArgs flat) {
            return flat(Output.of(flat));
        }

        public IndexFieldVectorConfigArgs build() {
            return $;
        }
    }

}
