// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservationAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final ReservationAssignmentState Empty = new ReservationAssignmentState();

    /**
     * The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
     * 
     */
    @Import(name="assignee")
    private @Nullable Output<String> assignee;

    /**
     * @return The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
     * 
     */
    public Optional<Output<String>> assignee() {
        return Optional.ofNullable(this.assignee);
    }

    /**
     * Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
     * 
     */
    @Import(name="jobType")
    private @Nullable Output<String> jobType;

    /**
     * @return Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
     * 
     */
    public Optional<Output<String>> jobType() {
        return Optional.ofNullable(this.jobType);
    }

    /**
     * The location for the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Output only. The resource name of the assignment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Output only. The resource name of the assignment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The reservation for the resource
     * 
     */
    @Import(name="reservation")
    private @Nullable Output<String> reservation;

    /**
     * @return The reservation for the resource
     * 
     */
    public Optional<Output<String>> reservation() {
        return Optional.ofNullable(this.reservation);
    }

    /**
     * Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ReservationAssignmentState() {}

    private ReservationAssignmentState(ReservationAssignmentState $) {
        this.assignee = $.assignee;
        this.jobType = $.jobType;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.reservation = $.reservation;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservationAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservationAssignmentState $;

        public Builder() {
            $ = new ReservationAssignmentState();
        }

        public Builder(ReservationAssignmentState defaults) {
            $ = new ReservationAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignee The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
         * 
         * @return builder
         * 
         */
        public Builder assignee(@Nullable Output<String> assignee) {
            $.assignee = assignee;
            return this;
        }

        /**
         * @param assignee The resource which will use the reservation. E.g. projects/myproject, folders/123, organizations/456.
         * 
         * @return builder
         * 
         */
        public Builder assignee(String assignee) {
            return assignee(Output.of(assignee));
        }

        /**
         * @param jobType Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
         * 
         * @return builder
         * 
         */
        public Builder jobType(@Nullable Output<String> jobType) {
            $.jobType = jobType;
            return this;
        }

        /**
         * @param jobType Types of job, which could be specified when using the reservation. Possible values: JOB_TYPE_UNSPECIFIED, PIPELINE, QUERY
         * 
         * @return builder
         * 
         */
        public Builder jobType(String jobType) {
            return jobType(Output.of(jobType));
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Output only. The resource name of the assignment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Output only. The resource name of the assignment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param reservation The reservation for the resource
         * 
         * @return builder
         * 
         */
        public Builder reservation(@Nullable Output<String> reservation) {
            $.reservation = reservation;
            return this;
        }

        /**
         * @param reservation The reservation for the resource
         * 
         * @return builder
         * 
         */
        public Builder reservation(String reservation) {
            return reservation(Output.of(reservation));
        }

        /**
         * @param state Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Assignment will remain in PENDING state if no active capacity commitment is present. It will become ACTIVE when some capacity commitment becomes active. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ReservationAssignmentState build() {
            return $;
        }
    }

}
