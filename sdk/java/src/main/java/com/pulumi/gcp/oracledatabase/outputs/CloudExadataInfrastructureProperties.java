// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.outputs.CloudExadataInfrastructurePropertiesCustomerContact;
import com.pulumi.gcp.oracledatabase.outputs.CloudExadataInfrastructurePropertiesMaintenanceWindow;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CloudExadataInfrastructureProperties {
    /**
     * @return (Output)
     * The requested number of additional storage servers activated for the
     * Exadata Infrastructure.
     * 
     */
    private @Nullable Integer activatedStorageCount;
    /**
     * @return (Output)
     * The requested number of additional storage servers for the Exadata
     * Infrastructure.
     * 
     */
    private @Nullable Integer additionalStorageCount;
    /**
     * @return (Output)
     * The available storage can be allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    private @Nullable Integer availableStorageSizeGb;
    /**
     * @return The number of compute servers for the Exadata Infrastructure.
     * 
     */
    private @Nullable Integer computeCount;
    /**
     * @return (Output)
     * The number of enabled CPU cores.
     * 
     */
    private @Nullable Integer cpuCount;
    /**
     * @return The list of customer contacts.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CloudExadataInfrastructurePropertiesCustomerContact> customerContacts;
    /**
     * @return (Output)
     * Size, in terabytes, of the DATA disk group.
     * 
     */
    private @Nullable Double dataStorageSizeTb;
    /**
     * @return (Output)
     * The local node storage allocated in GBs.
     * 
     */
    private @Nullable Integer dbNodeStorageSizeGb;
    /**
     * @return (Output)
     * The software version of the database servers (dom0) in the Exadata
     * Infrastructure.
     * 
     */
    private @Nullable String dbServerVersion;
    /**
     * @return Maintenance window as defined by Oracle.
     * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
     * Structure is documented below.
     * 
     */
    private @Nullable CloudExadataInfrastructurePropertiesMaintenanceWindow maintenanceWindow;
    /**
     * @return (Output)
     * The total number of CPU cores available.
     * 
     */
    private @Nullable Integer maxCpuCount;
    /**
     * @return (Output)
     * The total available DATA disk group size.
     * 
     */
    private @Nullable Double maxDataStorageTb;
    /**
     * @return (Output)
     * The total local node storage available in GBs.
     * 
     */
    private @Nullable Integer maxDbNodeStorageSizeGb;
    /**
     * @return (Output)
     * The total memory available in GBs.
     * 
     */
    private @Nullable Integer maxMemoryGb;
    /**
     * @return (Output)
     * The memory allocated in GBs.
     * 
     */
    private @Nullable Integer memorySizeGb;
    /**
     * @return (Output)
     * The monthly software version of the database servers (dom0)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    private @Nullable String monthlyDbServerVersion;
    /**
     * @return (Output)
     * The monthly software version of the storage servers (cells)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    private @Nullable String monthlyStorageServerVersion;
    /**
     * @return (Output)
     * The OCID of the next maintenance run.
     * 
     */
    private @Nullable String nextMaintenanceRunId;
    /**
     * @return (Output)
     * The time when the next maintenance run will occur.
     * 
     */
    private @Nullable String nextMaintenanceRunTime;
    /**
     * @return (Output)
     * The time when the next security maintenance run will occur.
     * 
     */
    private @Nullable String nextSecurityMaintenanceRunTime;
    /**
     * @return (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    private @Nullable String ociUrl;
    /**
     * @return (Output)
     * OCID of created infra.
     * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
     * 
     */
    private @Nullable String ocid;
    /**
     * @return The shape of the Exadata Infrastructure. The shape determines the
     * amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    private String shape;
    /**
     * @return (Output)
     * The current lifecycle state of the Exadata Infrastructure.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    private @Nullable String state;
    /**
     * @return The number of Cloud Exadata storage servers for the Exadata Infrastructure.
     * 
     */
    private @Nullable Integer storageCount;
    /**
     * @return (Output)
     * The software version of the storage servers (cells) in the Exadata
     * Infrastructure.
     * 
     */
    private @Nullable String storageServerVersion;
    /**
     * @return The total storage allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    private @Nullable Integer totalStorageSizeGb;

    private CloudExadataInfrastructureProperties() {}
    /**
     * @return (Output)
     * The requested number of additional storage servers activated for the
     * Exadata Infrastructure.
     * 
     */
    public Optional<Integer> activatedStorageCount() {
        return Optional.ofNullable(this.activatedStorageCount);
    }
    /**
     * @return (Output)
     * The requested number of additional storage servers for the Exadata
     * Infrastructure.
     * 
     */
    public Optional<Integer> additionalStorageCount() {
        return Optional.ofNullable(this.additionalStorageCount);
    }
    /**
     * @return (Output)
     * The available storage can be allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    public Optional<Integer> availableStorageSizeGb() {
        return Optional.ofNullable(this.availableStorageSizeGb);
    }
    /**
     * @return The number of compute servers for the Exadata Infrastructure.
     * 
     */
    public Optional<Integer> computeCount() {
        return Optional.ofNullable(this.computeCount);
    }
    /**
     * @return (Output)
     * The number of enabled CPU cores.
     * 
     */
    public Optional<Integer> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }
    /**
     * @return The list of customer contacts.
     * Structure is documented below.
     * 
     */
    public List<CloudExadataInfrastructurePropertiesCustomerContact> customerContacts() {
        return this.customerContacts == null ? List.of() : this.customerContacts;
    }
    /**
     * @return (Output)
     * Size, in terabytes, of the DATA disk group.
     * 
     */
    public Optional<Double> dataStorageSizeTb() {
        return Optional.ofNullable(this.dataStorageSizeTb);
    }
    /**
     * @return (Output)
     * The local node storage allocated in GBs.
     * 
     */
    public Optional<Integer> dbNodeStorageSizeGb() {
        return Optional.ofNullable(this.dbNodeStorageSizeGb);
    }
    /**
     * @return (Output)
     * The software version of the database servers (dom0) in the Exadata
     * Infrastructure.
     * 
     */
    public Optional<String> dbServerVersion() {
        return Optional.ofNullable(this.dbServerVersion);
    }
    /**
     * @return Maintenance window as defined by Oracle.
     * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
     * Structure is documented below.
     * 
     */
    public Optional<CloudExadataInfrastructurePropertiesMaintenanceWindow> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return (Output)
     * The total number of CPU cores available.
     * 
     */
    public Optional<Integer> maxCpuCount() {
        return Optional.ofNullable(this.maxCpuCount);
    }
    /**
     * @return (Output)
     * The total available DATA disk group size.
     * 
     */
    public Optional<Double> maxDataStorageTb() {
        return Optional.ofNullable(this.maxDataStorageTb);
    }
    /**
     * @return (Output)
     * The total local node storage available in GBs.
     * 
     */
    public Optional<Integer> maxDbNodeStorageSizeGb() {
        return Optional.ofNullable(this.maxDbNodeStorageSizeGb);
    }
    /**
     * @return (Output)
     * The total memory available in GBs.
     * 
     */
    public Optional<Integer> maxMemoryGb() {
        return Optional.ofNullable(this.maxMemoryGb);
    }
    /**
     * @return (Output)
     * The memory allocated in GBs.
     * 
     */
    public Optional<Integer> memorySizeGb() {
        return Optional.ofNullable(this.memorySizeGb);
    }
    /**
     * @return (Output)
     * The monthly software version of the database servers (dom0)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    public Optional<String> monthlyDbServerVersion() {
        return Optional.ofNullable(this.monthlyDbServerVersion);
    }
    /**
     * @return (Output)
     * The monthly software version of the storage servers (cells)
     * in the Exadata Infrastructure. Example: 20.1.15
     * 
     */
    public Optional<String> monthlyStorageServerVersion() {
        return Optional.ofNullable(this.monthlyStorageServerVersion);
    }
    /**
     * @return (Output)
     * The OCID of the next maintenance run.
     * 
     */
    public Optional<String> nextMaintenanceRunId() {
        return Optional.ofNullable(this.nextMaintenanceRunId);
    }
    /**
     * @return (Output)
     * The time when the next maintenance run will occur.
     * 
     */
    public Optional<String> nextMaintenanceRunTime() {
        return Optional.ofNullable(this.nextMaintenanceRunTime);
    }
    /**
     * @return (Output)
     * The time when the next security maintenance run will occur.
     * 
     */
    public Optional<String> nextSecurityMaintenanceRunTime() {
        return Optional.ofNullable(this.nextSecurityMaintenanceRunTime);
    }
    /**
     * @return (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    public Optional<String> ociUrl() {
        return Optional.ofNullable(this.ociUrl);
    }
    /**
     * @return (Output)
     * OCID of created infra.
     * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
     * 
     */
    public Optional<String> ocid() {
        return Optional.ofNullable(this.ocid);
    }
    /**
     * @return The shape of the Exadata Infrastructure. The shape determines the
     * amount of CPU, storage, and memory resources allocated to the instance.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return (Output)
     * The current lifecycle state of the Exadata Infrastructure.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The number of Cloud Exadata storage servers for the Exadata Infrastructure.
     * 
     */
    public Optional<Integer> storageCount() {
        return Optional.ofNullable(this.storageCount);
    }
    /**
     * @return (Output)
     * The software version of the storage servers (cells) in the Exadata
     * Infrastructure.
     * 
     */
    public Optional<String> storageServerVersion() {
        return Optional.ofNullable(this.storageServerVersion);
    }
    /**
     * @return The total storage allocated to the Exadata Infrastructure
     * resource, in gigabytes (GB).
     * 
     */
    public Optional<Integer> totalStorageSizeGb() {
        return Optional.ofNullable(this.totalStorageSizeGb);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudExadataInfrastructureProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer activatedStorageCount;
        private @Nullable Integer additionalStorageCount;
        private @Nullable Integer availableStorageSizeGb;
        private @Nullable Integer computeCount;
        private @Nullable Integer cpuCount;
        private @Nullable List<CloudExadataInfrastructurePropertiesCustomerContact> customerContacts;
        private @Nullable Double dataStorageSizeTb;
        private @Nullable Integer dbNodeStorageSizeGb;
        private @Nullable String dbServerVersion;
        private @Nullable CloudExadataInfrastructurePropertiesMaintenanceWindow maintenanceWindow;
        private @Nullable Integer maxCpuCount;
        private @Nullable Double maxDataStorageTb;
        private @Nullable Integer maxDbNodeStorageSizeGb;
        private @Nullable Integer maxMemoryGb;
        private @Nullable Integer memorySizeGb;
        private @Nullable String monthlyDbServerVersion;
        private @Nullable String monthlyStorageServerVersion;
        private @Nullable String nextMaintenanceRunId;
        private @Nullable String nextMaintenanceRunTime;
        private @Nullable String nextSecurityMaintenanceRunTime;
        private @Nullable String ociUrl;
        private @Nullable String ocid;
        private String shape;
        private @Nullable String state;
        private @Nullable Integer storageCount;
        private @Nullable String storageServerVersion;
        private @Nullable Integer totalStorageSizeGb;
        public Builder() {}
        public Builder(CloudExadataInfrastructureProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activatedStorageCount = defaults.activatedStorageCount;
    	      this.additionalStorageCount = defaults.additionalStorageCount;
    	      this.availableStorageSizeGb = defaults.availableStorageSizeGb;
    	      this.computeCount = defaults.computeCount;
    	      this.cpuCount = defaults.cpuCount;
    	      this.customerContacts = defaults.customerContacts;
    	      this.dataStorageSizeTb = defaults.dataStorageSizeTb;
    	      this.dbNodeStorageSizeGb = defaults.dbNodeStorageSizeGb;
    	      this.dbServerVersion = defaults.dbServerVersion;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDataStorageTb = defaults.maxDataStorageTb;
    	      this.maxDbNodeStorageSizeGb = defaults.maxDbNodeStorageSizeGb;
    	      this.maxMemoryGb = defaults.maxMemoryGb;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.monthlyDbServerVersion = defaults.monthlyDbServerVersion;
    	      this.monthlyStorageServerVersion = defaults.monthlyStorageServerVersion;
    	      this.nextMaintenanceRunId = defaults.nextMaintenanceRunId;
    	      this.nextMaintenanceRunTime = defaults.nextMaintenanceRunTime;
    	      this.nextSecurityMaintenanceRunTime = defaults.nextSecurityMaintenanceRunTime;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.shape = defaults.shape;
    	      this.state = defaults.state;
    	      this.storageCount = defaults.storageCount;
    	      this.storageServerVersion = defaults.storageServerVersion;
    	      this.totalStorageSizeGb = defaults.totalStorageSizeGb;
        }

        @CustomType.Setter
        public Builder activatedStorageCount(@Nullable Integer activatedStorageCount) {

            this.activatedStorageCount = activatedStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder additionalStorageCount(@Nullable Integer additionalStorageCount) {

            this.additionalStorageCount = additionalStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder availableStorageSizeGb(@Nullable Integer availableStorageSizeGb) {

            this.availableStorageSizeGb = availableStorageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder computeCount(@Nullable Integer computeCount) {

            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCount(@Nullable Integer cpuCount) {

            this.cpuCount = cpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder customerContacts(@Nullable List<CloudExadataInfrastructurePropertiesCustomerContact> customerContacts) {

            this.customerContacts = customerContacts;
            return this;
        }
        public Builder customerContacts(CloudExadataInfrastructurePropertiesCustomerContact... customerContacts) {
            return customerContacts(List.of(customerContacts));
        }
        @CustomType.Setter
        public Builder dataStorageSizeTb(@Nullable Double dataStorageSizeTb) {

            this.dataStorageSizeTb = dataStorageSizeTb;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeGb(@Nullable Integer dbNodeStorageSizeGb) {

            this.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerVersion(@Nullable String dbServerVersion) {

            this.dbServerVersion = dbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(@Nullable CloudExadataInfrastructurePropertiesMaintenanceWindow maintenanceWindow) {

            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder maxCpuCount(@Nullable Integer maxCpuCount) {

            this.maxCpuCount = maxCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxDataStorageTb(@Nullable Double maxDataStorageTb) {

            this.maxDataStorageTb = maxDataStorageTb;
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageSizeGb(@Nullable Integer maxDbNodeStorageSizeGb) {

            this.maxDbNodeStorageSizeGb = maxDbNodeStorageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryGb(@Nullable Integer maxMemoryGb) {

            this.maxMemoryGb = maxMemoryGb;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGb(@Nullable Integer memorySizeGb) {

            this.memorySizeGb = memorySizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyDbServerVersion(@Nullable String monthlyDbServerVersion) {

            this.monthlyDbServerVersion = monthlyDbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyStorageServerVersion(@Nullable String monthlyStorageServerVersion) {

            this.monthlyStorageServerVersion = monthlyStorageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder nextMaintenanceRunId(@Nullable String nextMaintenanceRunId) {

            this.nextMaintenanceRunId = nextMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder nextMaintenanceRunTime(@Nullable String nextMaintenanceRunTime) {

            this.nextMaintenanceRunTime = nextMaintenanceRunTime;
            return this;
        }
        @CustomType.Setter
        public Builder nextSecurityMaintenanceRunTime(@Nullable String nextSecurityMaintenanceRunTime) {

            this.nextSecurityMaintenanceRunTime = nextSecurityMaintenanceRunTime;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(@Nullable String ociUrl) {

            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(@Nullable String ocid) {

            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("CloudExadataInfrastructureProperties", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageCount(@Nullable Integer storageCount) {

            this.storageCount = storageCount;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerVersion(@Nullable String storageServerVersion) {

            this.storageServerVersion = storageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder totalStorageSizeGb(@Nullable Integer totalStorageSizeGb) {

            this.totalStorageSizeGb = totalStorageSizeGb;
            return this;
        }
        public CloudExadataInfrastructureProperties build() {
            final var _resultValue = new CloudExadataInfrastructureProperties();
            _resultValue.activatedStorageCount = activatedStorageCount;
            _resultValue.additionalStorageCount = additionalStorageCount;
            _resultValue.availableStorageSizeGb = availableStorageSizeGb;
            _resultValue.computeCount = computeCount;
            _resultValue.cpuCount = cpuCount;
            _resultValue.customerContacts = customerContacts;
            _resultValue.dataStorageSizeTb = dataStorageSizeTb;
            _resultValue.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            _resultValue.dbServerVersion = dbServerVersion;
            _resultValue.maintenanceWindow = maintenanceWindow;
            _resultValue.maxCpuCount = maxCpuCount;
            _resultValue.maxDataStorageTb = maxDataStorageTb;
            _resultValue.maxDbNodeStorageSizeGb = maxDbNodeStorageSizeGb;
            _resultValue.maxMemoryGb = maxMemoryGb;
            _resultValue.memorySizeGb = memorySizeGb;
            _resultValue.monthlyDbServerVersion = monthlyDbServerVersion;
            _resultValue.monthlyStorageServerVersion = monthlyStorageServerVersion;
            _resultValue.nextMaintenanceRunId = nextMaintenanceRunId;
            _resultValue.nextMaintenanceRunTime = nextMaintenanceRunTime;
            _resultValue.nextSecurityMaintenanceRunTime = nextSecurityMaintenanceRunTime;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.shape = shape;
            _resultValue.state = state;
            _resultValue.storageCount = storageCount;
            _resultValue.storageServerVersion = storageServerVersion;
            _resultValue.totalStorageSizeGb = totalStorageSizeGb;
            return _resultValue;
        }
    }
}
