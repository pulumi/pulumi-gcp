// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudrunv2.outputs.JobTemplateTemplateContainerEnv;
import com.pulumi.gcp.cloudrunv2.outputs.JobTemplateTemplateContainerLivenessProbe;
import com.pulumi.gcp.cloudrunv2.outputs.JobTemplateTemplateContainerPort;
import com.pulumi.gcp.cloudrunv2.outputs.JobTemplateTemplateContainerResources;
import com.pulumi.gcp.cloudrunv2.outputs.JobTemplateTemplateContainerStartupProbe;
import com.pulumi.gcp.cloudrunv2.outputs.JobTemplateTemplateContainerVolumeMount;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobTemplateTemplateContainer {
    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    private @Nullable List<JobTemplateTemplateContainerEnv> envs;
    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    private String image;
    /**
     * @return Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    private @Nullable JobTemplateTemplateContainerLivenessProbe livenessProbe;
    /**
     * @return Volume&#39;s name.
     * 
     */
    private @Nullable String name;
    /**
     * @return List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
     * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
     * Structure is documented below.
     * 
     */
    private @Nullable List<JobTemplateTemplateContainerPort> ports;
    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * Structure is documented below.
     * 
     */
    private @Nullable JobTemplateTemplateContainerResources resources;
    /**
     * @return Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    private @Nullable JobTemplateTemplateContainerStartupProbe startupProbe;
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Structure is documented below.
     * 
     */
    private @Nullable List<JobTemplateTemplateContainerVolumeMount> volumeMounts;
    /**
     * @return Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
     * 
     */
    private @Nullable String workingDir;

    private JobTemplateTemplateContainer() {}
    /**
     * @return Arguments to the entrypoint. The docker image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return Entrypoint array. Not executed within a shell. The docker image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return List of environment variables to set in the container.
     * Structure is documented below.
     * 
     */
    public List<JobTemplateTemplateContainerEnv> envs() {
        return this.envs == null ? List.of() : this.envs;
    }
    /**
     * @return URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    public Optional<JobTemplateTemplateContainerLivenessProbe> livenessProbe() {
        return Optional.ofNullable(this.livenessProbe);
    }
    /**
     * @return Volume&#39;s name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
     * If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
     * Structure is documented below.
     * 
     */
    public List<JobTemplateTemplateContainerPort> ports() {
        return this.ports == null ? List.of() : this.ports;
    }
    /**
     * @return Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * Structure is documented below.
     * 
     */
    public Optional<JobTemplateTemplateContainerResources> resources() {
        return Optional.ofNullable(this.resources);
    }
    /**
     * @return Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * Structure is documented below.
     * 
     */
    public Optional<JobTemplateTemplateContainerStartupProbe> startupProbe() {
        return Optional.ofNullable(this.startupProbe);
    }
    /**
     * @return Volume to mount into the container&#39;s filesystem.
     * Structure is documented below.
     * 
     */
    public List<JobTemplateTemplateContainerVolumeMount> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }
    /**
     * @return Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image.
     * 
     */
    public Optional<String> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobTemplateTemplateContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> args;
        private @Nullable List<String> commands;
        private @Nullable List<JobTemplateTemplateContainerEnv> envs;
        private String image;
        private @Nullable JobTemplateTemplateContainerLivenessProbe livenessProbe;
        private @Nullable String name;
        private @Nullable List<JobTemplateTemplateContainerPort> ports;
        private @Nullable JobTemplateTemplateContainerResources resources;
        private @Nullable JobTemplateTemplateContainerStartupProbe startupProbe;
        private @Nullable List<JobTemplateTemplateContainerVolumeMount> volumeMounts;
        private @Nullable String workingDir;
        public Builder() {}
        public Builder(JobTemplateTemplateContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.commands = defaults.commands;
    	      this.envs = defaults.envs;
    	      this.image = defaults.image;
    	      this.livenessProbe = defaults.livenessProbe;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.resources = defaults.resources;
    	      this.startupProbe = defaults.startupProbe;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {
            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {
            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder envs(@Nullable List<JobTemplateTemplateContainerEnv> envs) {
            this.envs = envs;
            return this;
        }
        public Builder envs(JobTemplateTemplateContainerEnv... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        @CustomType.Setter
        public Builder livenessProbe(@Nullable JobTemplateTemplateContainerLivenessProbe livenessProbe) {
            this.livenessProbe = livenessProbe;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ports(@Nullable List<JobTemplateTemplateContainerPort> ports) {
            this.ports = ports;
            return this;
        }
        public Builder ports(JobTemplateTemplateContainerPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder resources(@Nullable JobTemplateTemplateContainerResources resources) {
            this.resources = resources;
            return this;
        }
        @CustomType.Setter
        public Builder startupProbe(@Nullable JobTemplateTemplateContainerStartupProbe startupProbe) {
            this.startupProbe = startupProbe;
            return this;
        }
        @CustomType.Setter
        public Builder volumeMounts(@Nullable List<JobTemplateTemplateContainerVolumeMount> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(JobTemplateTemplateContainerVolumeMount... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        @CustomType.Setter
        public Builder workingDir(@Nullable String workingDir) {
            this.workingDir = workingDir;
            return this;
        }
        public JobTemplateTemplateContainer build() {
            final var o = new JobTemplateTemplateContainer();
            o.args = args;
            o.commands = commands;
            o.envs = envs;
            o.image = image;
            o.livenessProbe = livenessProbe;
            o.name = name;
            o.ports = ports;
            o.resources = resources;
            o.startupProbe = startupProbe;
            o.volumeMounts = volumeMounts;
            o.workingDir = workingDir;
            return o;
        }
    }
}
