// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaState extends com.pulumi.resources.ResourceArgs {

    public static final SchemaState Empty = new SchemaState();

    /**
     * The unique id of the data store.
     * 
     */
    @Import(name="dataStoreId")
    private @Nullable Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     */
    public Optional<Output<String>> dataStoreId() {
        return Optional.ofNullable(this.dataStoreId);
    }

    /**
     * The JSON representation of the schema.
     * 
     */
    @Import(name="jsonSchema")
    private @Nullable Output<String> jsonSchema;

    /**
     * @return The JSON representation of the schema.
     * 
     */
    public Optional<Output<String>> jsonSchema() {
        return Optional.ofNullable(this.jsonSchema);
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full resource name of the schema. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full resource name of the schema. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The unique id of the schema.
     * 
     * ***
     * 
     */
    @Import(name="schemaId")
    private @Nullable Output<String> schemaId;

    /**
     * @return The unique id of the schema.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> schemaId() {
        return Optional.ofNullable(this.schemaId);
    }

    private SchemaState() {}

    private SchemaState(SchemaState $) {
        this.dataStoreId = $.dataStoreId;
        this.jsonSchema = $.jsonSchema;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.schemaId = $.schemaId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaState $;

        public Builder() {
            $ = new SchemaState();
        }

        public Builder(SchemaState defaults) {
            $ = new SchemaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(@Nullable Output<String> dataStoreId) {
            $.dataStoreId = dataStoreId;
            return this;
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(String dataStoreId) {
            return dataStoreId(Output.of(dataStoreId));
        }

        /**
         * @param jsonSchema The JSON representation of the schema.
         * 
         * @return builder
         * 
         */
        public Builder jsonSchema(@Nullable Output<String> jsonSchema) {
            $.jsonSchema = jsonSchema;
            return this;
        }

        /**
         * @param jsonSchema The JSON representation of the schema.
         * 
         * @return builder
         * 
         */
        public Builder jsonSchema(String jsonSchema) {
            return jsonSchema(Output.of(jsonSchema));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full resource name of the schema. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full resource name of the schema. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param schemaId The unique id of the schema.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder schemaId(@Nullable Output<String> schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        /**
         * @param schemaId The unique id of the schema.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder schemaId(String schemaId) {
            return schemaId(Output.of(schemaId));
        }

        public SchemaState build() {
            return $;
        }
    }

}
