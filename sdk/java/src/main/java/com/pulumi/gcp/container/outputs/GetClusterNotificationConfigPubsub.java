// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterNotificationConfigPubsubFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterNotificationConfigPubsub {
    /**
     * @return Whether or not the notification config is enabled
     * 
     */
    private Boolean enabled;
    /**
     * @return Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
     * 
     */
    private List<GetClusterNotificationConfigPubsubFilter> filters;
    /**
     * @return The pubsub topic to push upgrade notifications to. Must be in the same project as the cluster. Must be in the format: projects/{project}/topics/{topic}.
     * 
     */
    private String topic;

    private GetClusterNotificationConfigPubsub() {}
    /**
     * @return Whether or not the notification config is enabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
     * 
     */
    public List<GetClusterNotificationConfigPubsubFilter> filters() {
        return this.filters;
    }
    /**
     * @return The pubsub topic to push upgrade notifications to. Must be in the same project as the cluster. Must be in the format: projects/{project}/topics/{topic}.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNotificationConfigPubsub defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private List<GetClusterNotificationConfigPubsubFilter> filters;
        private String topic;
        public Builder() {}
        public Builder(GetClusterNotificationConfigPubsub defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.filters = defaults.filters;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetClusterNotificationConfigPubsub", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder filters(List<GetClusterNotificationConfigPubsubFilter> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetClusterNotificationConfigPubsub", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(GetClusterNotificationConfigPubsubFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            if (topic == null) {
              throw new MissingRequiredPropertyException("GetClusterNotificationConfigPubsub", "topic");
            }
            this.topic = topic;
            return this;
        }
        public GetClusterNotificationConfigPubsub build() {
            final var _resultValue = new GetClusterNotificationConfigPubsub();
            _resultValue.enabled = enabled;
            _resultValue.filters = filters;
            _resultValue.topic = topic;
            return _resultValue;
        }
    }
}
