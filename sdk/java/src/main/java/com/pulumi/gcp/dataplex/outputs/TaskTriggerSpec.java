// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TaskTriggerSpec {
    /**
     * @return Prevent the task from executing. This does not cancel already running tasks. It is intended to temporarily disable RECURRING tasks.
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return Number of retry attempts before aborting. Set to zero to never attempt to retry a failed task.
     * 
     */
    private @Nullable Integer maxRetries;
    /**
     * @return Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: &#39;CRON_TZ=${IANA_TIME_ZONE}&#39; or &#39;TZ=${IANA_TIME_ZONE}&#39;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.
     * 
     */
    private @Nullable String schedule;
    /**
     * @return The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.
     * 
     */
    private @Nullable String startTime;
    /**
     * @return Trigger type of the user-specified Task
     * Possible values are: `ON_DEMAND`, `RECURRING`.
     * 
     */
    private String type;

    private TaskTriggerSpec() {}
    /**
     * @return Prevent the task from executing. This does not cancel already running tasks. It is intended to temporarily disable RECURRING tasks.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return Number of retry attempts before aborting. Set to zero to never attempt to retry a failed task.
     * 
     */
    public Optional<Integer> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }
    /**
     * @return Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: &#39;CRON_TZ=${IANA_TIME_ZONE}&#39; or &#39;TZ=${IANA_TIME_ZONE}&#39;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.
     * 
     */
    public Optional<String> schedule() {
        return Optional.ofNullable(this.schedule);
    }
    /**
     * @return The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return Trigger type of the user-specified Task
     * Possible values are: `ON_DEMAND`, `RECURRING`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskTriggerSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean disabled;
        private @Nullable Integer maxRetries;
        private @Nullable String schedule;
        private @Nullable String startTime;
        private String type;
        public Builder() {}
        public Builder(TaskTriggerSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabled = defaults.disabled;
    	      this.maxRetries = defaults.maxRetries;
    	      this.schedule = defaults.schedule;
    	      this.startTime = defaults.startTime;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxRetries(@Nullable Integer maxRetries) {
            this.maxRetries = maxRetries;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(@Nullable String schedule) {
            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public TaskTriggerSpec build() {
            final var o = new TaskTriggerSpec();
            o.disabled = disabled;
            o.maxRetries = maxRetries;
            o.schedule = schedule;
            o.startTime = startTime;
            o.type = type;
            return o;
        }
    }
}
