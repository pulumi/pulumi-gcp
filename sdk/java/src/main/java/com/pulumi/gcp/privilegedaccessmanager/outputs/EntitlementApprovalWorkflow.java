// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.privilegedaccessmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.privilegedaccessmanager.outputs.EntitlementApprovalWorkflowManualApprovals;
import java.util.Objects;

@CustomType
public final class EntitlementApprovalWorkflow {
    /**
     * @return A manual approval workflow where users who are designated as approvers need to call the ApproveGrant/DenyGrant APIs for an Grant.
     * The workflow can consist of multiple serial steps where each step defines who can act as Approver in that step and how many of those users should approve before the workflow moves to the next step.
     * This can be used to create approval workflows such as
     * * Require an approval from any user in a group G.
     * * Require an approval from any k number of users from a Group G.
     * * Require an approval from any user in a group G and then from a user U. etc.
     *   A single user might be part of `approvers` ACL for multiple steps in this workflow but they can only approve once and that approval will only be considered to satisfy the approval step at which it was granted.
     *   Structure is documented below.
     * 
     */
    private EntitlementApprovalWorkflowManualApprovals manualApprovals;

    private EntitlementApprovalWorkflow() {}
    /**
     * @return A manual approval workflow where users who are designated as approvers need to call the ApproveGrant/DenyGrant APIs for an Grant.
     * The workflow can consist of multiple serial steps where each step defines who can act as Approver in that step and how many of those users should approve before the workflow moves to the next step.
     * This can be used to create approval workflows such as
     * * Require an approval from any user in a group G.
     * * Require an approval from any k number of users from a Group G.
     * * Require an approval from any user in a group G and then from a user U. etc.
     *   A single user might be part of `approvers` ACL for multiple steps in this workflow but they can only approve once and that approval will only be considered to satisfy the approval step at which it was granted.
     *   Structure is documented below.
     * 
     */
    public EntitlementApprovalWorkflowManualApprovals manualApprovals() {
        return this.manualApprovals;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EntitlementApprovalWorkflow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private EntitlementApprovalWorkflowManualApprovals manualApprovals;
        public Builder() {}
        public Builder(EntitlementApprovalWorkflow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.manualApprovals = defaults.manualApprovals;
        }

        @CustomType.Setter
        public Builder manualApprovals(EntitlementApprovalWorkflowManualApprovals manualApprovals) {
            if (manualApprovals == null) {
              throw new MissingRequiredPropertyException("EntitlementApprovalWorkflow", "manualApprovals");
            }
            this.manualApprovals = manualApprovals;
            return this;
        }
        public EntitlementApprovalWorkflow build() {
            final var _resultValue = new EntitlementApprovalWorkflow();
            _resultValue.manualApprovals = manualApprovals;
            return _resultValue;
        }
    }
}
