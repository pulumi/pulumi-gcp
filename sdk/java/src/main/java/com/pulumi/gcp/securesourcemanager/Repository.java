// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
import com.pulumi.gcp.securesourcemanager.inputs.RepositoryState;
import com.pulumi.gcp.securesourcemanager.outputs.RepositoryInitialConfig;
import com.pulumi.gcp.securesourcemanager.outputs.RepositoryUri;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Repositories store source code. It supports all Git SCM client commands and has built-in pull requests and issue tracking. Both HTTPS and SSH authentication are supported.
 * 
 * To get more information about Repository, see:
 * 
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
 * 
 * ## Example Usage
 * 
 * ### Secure Source Manager Repository Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.Repository;
 * import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-instance")
 *             .build());
 * 
 *         var default_ = new Repository("default", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .instance(instance.name())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Secure Source Manager Repository Initial Config
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.Repository;
 * import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
 * import com.pulumi.gcp.securesourcemanager.inputs.RepositoryInitialConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-instance")
 *             .build());
 * 
 *         var default_ = new Repository("default", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("my-repository")
 *             .instance(instance.name())
 *             .description("This is a test repository")
 *             .initialConfig(RepositoryInitialConfigArgs.builder()
 *                 .defaultBranch("main")
 *                 .gitignores("python")
 *                 .license("mit")
 *                 .readme("default")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Repository can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`
 * 
 * * `{{project}}/{{location}}/{{repository_id}}`
 * 
 * * `{{location}}/{{repository_id}}`
 * 
 * * `{{repository_id}}`
 * 
 * When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default {{project}}/{{location}}/{{repository_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default {{location}}/{{repository_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/repository:Repository default {{repository_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:securesourcemanager/repository:Repository")
public class Repository extends com.pulumi.resources.CustomResource {
    /**
     * Time the repository was created in UTC.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the repository was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Description of the repository, which cannot exceed 500 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the repository, which cannot exceed 500 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Initial configurations for the repository.
     * Structure is documented below.
     * 
     */
    @Export(name="initialConfig", refs={RepositoryInitialConfig.class}, tree="[0]")
    private Output</* @Nullable */ RepositoryInitialConfig> initialConfig;

    /**
     * @return Initial configurations for the repository.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RepositoryInitialConfig>> initialConfig() {
        return Codegen.optional(this.initialConfig);
    }
    /**
     * The name of the instance in which the repository is hosted.
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output<String> instance;

    /**
     * @return The name of the instance in which the repository is hosted.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }
    /**
     * The location for the Repository.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the Repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name for the Repository.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name for the Repository.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The ID for the Repository.
     * 
     * ***
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return The ID for the Repository.
     * 
     * ***
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }
    /**
     * Unique identifier of the repository.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Unique identifier of the repository.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Time the repository was updated in UTC.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the repository was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * URIs for the repository.
     * Structure is documented below.
     * 
     */
    @Export(name="uris", refs={List.class,RepositoryUri.class}, tree="[0,1]")
    private Output<List<RepositoryUri>> uris;

    /**
     * @return URIs for the repository.
     * Structure is documented below.
     * 
     */
    public Output<List<RepositoryUri>> uris() {
        return this.uris;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repository(String name) {
        this(name, RepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repository(String name, RepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repository(String name, RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/repository:Repository", name, args == null ? RepositoryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Repository(String name, Output<String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/repository:Repository", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repository get(String name, Output<String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Repository(name, id, state, options);
    }
}
