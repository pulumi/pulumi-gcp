// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerPoolTemplateVolumeGcsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerPoolTemplateVolumeGcsArgs Empty = new WorkerPoolTemplateVolumeGcsArgs();

    /**
     * GCS Bucket name
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return GCS Bucket name
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * A list of flags to pass to the gcsfuse command for configuring this volume.
     * Flags should be passed without leading dashes.
     * 
     */
    @Import(name="mountOptions")
    private @Nullable Output<List<String>> mountOptions;

    /**
     * @return A list of flags to pass to the gcsfuse command for configuring this volume.
     * Flags should be passed without leading dashes.
     * 
     */
    public Optional<Output<List<String>>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * If true, mount the GCS bucket as read-only
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return If true, mount the GCS bucket as read-only
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    private WorkerPoolTemplateVolumeGcsArgs() {}

    private WorkerPoolTemplateVolumeGcsArgs(WorkerPoolTemplateVolumeGcsArgs $) {
        this.bucket = $.bucket;
        this.mountOptions = $.mountOptions;
        this.readOnly = $.readOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerPoolTemplateVolumeGcsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerPoolTemplateVolumeGcsArgs $;

        public Builder() {
            $ = new WorkerPoolTemplateVolumeGcsArgs();
        }

        public Builder(WorkerPoolTemplateVolumeGcsArgs defaults) {
            $ = new WorkerPoolTemplateVolumeGcsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket GCS Bucket name
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket GCS Bucket name
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param mountOptions A list of flags to pass to the gcsfuse command for configuring this volume.
         * Flags should be passed without leading dashes.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(@Nullable Output<List<String>> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        /**
         * @param mountOptions A list of flags to pass to the gcsfuse command for configuring this volume.
         * Flags should be passed without leading dashes.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(List<String> mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        /**
         * @param mountOptions A list of flags to pass to the gcsfuse command for configuring this volume.
         * Flags should be passed without leading dashes.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(String... mountOptions) {
            return mountOptions(List.of(mountOptions));
        }

        /**
         * @param readOnly If true, mount the GCS bucket as read-only
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly If true, mount the GCS bucket as read-only
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public WorkerPoolTemplateVolumeGcsArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("WorkerPoolTemplateVolumeGcsArgs", "bucket");
            }
            return $;
        }
    }

}
