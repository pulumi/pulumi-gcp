// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterClusterAutoscalingAutoProvisioningDefault;
import com.pulumi.gcp.container.outputs.GetClusterClusterAutoscalingResourceLimit;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterClusterAutoscaling {
    /**
     * @return Contains defaults for a node pool created by NAP.
     * 
     */
    private List<GetClusterClusterAutoscalingAutoProvisioningDefault> autoProvisioningDefaults;
    /**
     * @return Configuration options for the Autoscaling profile feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability when deciding to remove nodes from a cluster. Can be BALANCED or OPTIMIZE_UTILIZATION. Defaults to BALANCED.
     * 
     */
    private String autoscalingProfile;
    /**
     * @return Whether node auto-provisioning is enabled. Resource limits for cpu and memory must be defined to enable node auto-provisioning.
     * 
     */
    private Boolean enabled;
    /**
     * @return Global constraints for machine resources in the cluster. Configuring the cpu and memory types is required if node auto-provisioning is enabled. These limits will apply to node pool autoscaling in addition to node auto-provisioning.
     * 
     */
    private List<GetClusterClusterAutoscalingResourceLimit> resourceLimits;

    private GetClusterClusterAutoscaling() {}
    /**
     * @return Contains defaults for a node pool created by NAP.
     * 
     */
    public List<GetClusterClusterAutoscalingAutoProvisioningDefault> autoProvisioningDefaults() {
        return this.autoProvisioningDefaults;
    }
    /**
     * @return Configuration options for the Autoscaling profile feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability when deciding to remove nodes from a cluster. Can be BALANCED or OPTIMIZE_UTILIZATION. Defaults to BALANCED.
     * 
     */
    public String autoscalingProfile() {
        return this.autoscalingProfile;
    }
    /**
     * @return Whether node auto-provisioning is enabled. Resource limits for cpu and memory must be defined to enable node auto-provisioning.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Global constraints for machine resources in the cluster. Configuring the cpu and memory types is required if node auto-provisioning is enabled. These limits will apply to node pool autoscaling in addition to node auto-provisioning.
     * 
     */
    public List<GetClusterClusterAutoscalingResourceLimit> resourceLimits() {
        return this.resourceLimits;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterClusterAutoscaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterClusterAutoscalingAutoProvisioningDefault> autoProvisioningDefaults;
        private String autoscalingProfile;
        private Boolean enabled;
        private List<GetClusterClusterAutoscalingResourceLimit> resourceLimits;
        public Builder() {}
        public Builder(GetClusterClusterAutoscaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoProvisioningDefaults = defaults.autoProvisioningDefaults;
    	      this.autoscalingProfile = defaults.autoscalingProfile;
    	      this.enabled = defaults.enabled;
    	      this.resourceLimits = defaults.resourceLimits;
        }

        @CustomType.Setter
        public Builder autoProvisioningDefaults(List<GetClusterClusterAutoscalingAutoProvisioningDefault> autoProvisioningDefaults) {
            if (autoProvisioningDefaults == null) {
              throw new MissingRequiredPropertyException("GetClusterClusterAutoscaling", "autoProvisioningDefaults");
            }
            this.autoProvisioningDefaults = autoProvisioningDefaults;
            return this;
        }
        public Builder autoProvisioningDefaults(GetClusterClusterAutoscalingAutoProvisioningDefault... autoProvisioningDefaults) {
            return autoProvisioningDefaults(List.of(autoProvisioningDefaults));
        }
        @CustomType.Setter
        public Builder autoscalingProfile(String autoscalingProfile) {
            if (autoscalingProfile == null) {
              throw new MissingRequiredPropertyException("GetClusterClusterAutoscaling", "autoscalingProfile");
            }
            this.autoscalingProfile = autoscalingProfile;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetClusterClusterAutoscaling", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder resourceLimits(List<GetClusterClusterAutoscalingResourceLimit> resourceLimits) {
            if (resourceLimits == null) {
              throw new MissingRequiredPropertyException("GetClusterClusterAutoscaling", "resourceLimits");
            }
            this.resourceLimits = resourceLimits;
            return this;
        }
        public Builder resourceLimits(GetClusterClusterAutoscalingResourceLimit... resourceLimits) {
            return resourceLimits(List.of(resourceLimits));
        }
        public GetClusterClusterAutoscaling build() {
            final var _resultValue = new GetClusterClusterAutoscaling();
            _resultValue.autoProvisioningDefaults = autoProvisioningDefaults;
            _resultValue.autoscalingProfile = autoscalingProfile;
            _resultValue.enabled = enabled;
            _resultValue.resourceLimits = resourceLimits;
            return _resultValue;
        }
    }
}
