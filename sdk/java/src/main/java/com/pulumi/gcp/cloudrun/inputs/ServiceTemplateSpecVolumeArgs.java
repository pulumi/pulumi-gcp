// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecVolumeCsiArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecVolumeEmptyDirArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecVolumeNfsArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceTemplateSpecVolumeSecretArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTemplateSpecVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecVolumeArgs Empty = new ServiceTemplateSpecVolumeArgs();

    /**
     * A filesystem specified by the Container Storage Interface (CSI).
     * Structure is documented below.
     * 
     */
    @Import(name="csi")
    private @Nullable Output<ServiceTemplateSpecVolumeCsiArgs> csi;

    /**
     * @return A filesystem specified by the Container Storage Interface (CSI).
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateSpecVolumeCsiArgs>> csi() {
        return Optional.ofNullable(this.csi);
    }

    /**
     * Ephemeral storage which can be backed by real disks (HD, SSD), network storage or memory (i.e. tmpfs). For now only in memory (tmpfs) is supported. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
     * Structure is documented below.
     * 
     */
    @Import(name="emptyDir")
    private @Nullable Output<ServiceTemplateSpecVolumeEmptyDirArgs> emptyDir;

    /**
     * @return Ephemeral storage which can be backed by real disks (HD, SSD), network storage or memory (i.e. tmpfs). For now only in memory (tmpfs) is supported. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateSpecVolumeEmptyDirArgs>> emptyDir() {
        return Optional.ofNullable(this.emptyDir);
    }

    /**
     * Volume&#39;s name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Volume&#39;s name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A filesystem backed by a Network File System share. This filesystem requires the
     * run.googleapis.com/execution-environment annotation to be unset or set to &#34;gen2&#34;
     * Structure is documented below.
     * 
     */
    @Import(name="nfs")
    private @Nullable Output<ServiceTemplateSpecVolumeNfsArgs> nfs;

    /**
     * @return A filesystem backed by a Network File System share. This filesystem requires the
     * run.googleapis.com/execution-environment annotation to be unset or set to &#34;gen2&#34;
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateSpecVolumeNfsArgs>> nfs() {
        return Optional.ofNullable(this.nfs);
    }

    /**
     * The secret&#39;s value will be presented as the content of a file whose
     * name is defined in the item path. If no items are defined, the name of
     * the file is the secret_name.
     * Structure is documented below.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<ServiceTemplateSpecVolumeSecretArgs> secret;

    /**
     * @return The secret&#39;s value will be presented as the content of a file whose
     * name is defined in the item path. If no items are defined, the name of
     * the file is the secret_name.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateSpecVolumeSecretArgs>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private ServiceTemplateSpecVolumeArgs() {}

    private ServiceTemplateSpecVolumeArgs(ServiceTemplateSpecVolumeArgs $) {
        this.csi = $.csi;
        this.emptyDir = $.emptyDir;
        this.name = $.name;
        this.nfs = $.nfs;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateSpecVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateSpecVolumeArgs $;

        public Builder() {
            $ = new ServiceTemplateSpecVolumeArgs();
        }

        public Builder(ServiceTemplateSpecVolumeArgs defaults) {
            $ = new ServiceTemplateSpecVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param csi A filesystem specified by the Container Storage Interface (CSI).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder csi(@Nullable Output<ServiceTemplateSpecVolumeCsiArgs> csi) {
            $.csi = csi;
            return this;
        }

        /**
         * @param csi A filesystem specified by the Container Storage Interface (CSI).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder csi(ServiceTemplateSpecVolumeCsiArgs csi) {
            return csi(Output.of(csi));
        }

        /**
         * @param emptyDir Ephemeral storage which can be backed by real disks (HD, SSD), network storage or memory (i.e. tmpfs). For now only in memory (tmpfs) is supported. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder emptyDir(@Nullable Output<ServiceTemplateSpecVolumeEmptyDirArgs> emptyDir) {
            $.emptyDir = emptyDir;
            return this;
        }

        /**
         * @param emptyDir Ephemeral storage which can be backed by real disks (HD, SSD), network storage or memory (i.e. tmpfs). For now only in memory (tmpfs) is supported. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder emptyDir(ServiceTemplateSpecVolumeEmptyDirArgs emptyDir) {
            return emptyDir(Output.of(emptyDir));
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nfs A filesystem backed by a Network File System share. This filesystem requires the
         * run.googleapis.com/execution-environment annotation to be unset or set to &#34;gen2&#34;
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nfs(@Nullable Output<ServiceTemplateSpecVolumeNfsArgs> nfs) {
            $.nfs = nfs;
            return this;
        }

        /**
         * @param nfs A filesystem backed by a Network File System share. This filesystem requires the
         * run.googleapis.com/execution-environment annotation to be unset or set to &#34;gen2&#34;
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nfs(ServiceTemplateSpecVolumeNfsArgs nfs) {
            return nfs(Output.of(nfs));
        }

        /**
         * @param secret The secret&#39;s value will be presented as the content of a file whose
         * name is defined in the item path. If no items are defined, the name of
         * the file is the secret_name.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<ServiceTemplateSpecVolumeSecretArgs> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret The secret&#39;s value will be presented as the content of a file whose
         * name is defined in the item path. If no items are defined, the name of
         * the file is the secret_name.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secret(ServiceTemplateSpecVolumeSecretArgs secret) {
            return secret(Output.of(secret));
        }

        public ServiceTemplateSpecVolumeArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceTemplateSpecVolumeArgs", "name");
            }
            return $;
        }
    }

}
