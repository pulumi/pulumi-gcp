// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceClusterAutoscalingConfig {
    /**
     * @return The target CPU utilization for autoscaling, in percentage. Must be between 10 and 80.
     * 
     */
    private Integer cpuTarget;
    /**
     * @return The maximum number of nodes for autoscaling.
     * 
     */
    private Integer maxNodes;
    /**
     * @return The minimum number of nodes for autoscaling.
     * 
     */
    private Integer minNodes;
    /**
     * @return The target storage utilization for autoscaling, in GB, for each node in a cluster. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16 TiB) for an HDD cluster. If not set, whatever is already set for the cluster will not change, or if the cluster is just being created, it will use the default value of 2560 for SSD clusters and 8192 for HDD clusters.
     * 
     * !&gt; **Warning**: Only one of `autoscaling_config` or `num_nodes` should be set for a cluster. If both are set, `num_nodes` is ignored. If none is set, autoscaling will be disabled and sized to the current node count.
     * 
     */
    private @Nullable Integer storageTarget;

    private InstanceClusterAutoscalingConfig() {}
    /**
     * @return The target CPU utilization for autoscaling, in percentage. Must be between 10 and 80.
     * 
     */
    public Integer cpuTarget() {
        return this.cpuTarget;
    }
    /**
     * @return The maximum number of nodes for autoscaling.
     * 
     */
    public Integer maxNodes() {
        return this.maxNodes;
    }
    /**
     * @return The minimum number of nodes for autoscaling.
     * 
     */
    public Integer minNodes() {
        return this.minNodes;
    }
    /**
     * @return The target storage utilization for autoscaling, in GB, for each node in a cluster. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16 TiB) for an HDD cluster. If not set, whatever is already set for the cluster will not change, or if the cluster is just being created, it will use the default value of 2560 for SSD clusters and 8192 for HDD clusters.
     * 
     * !&gt; **Warning**: Only one of `autoscaling_config` or `num_nodes` should be set for a cluster. If both are set, `num_nodes` is ignored. If none is set, autoscaling will be disabled and sized to the current node count.
     * 
     */
    public Optional<Integer> storageTarget() {
        return Optional.ofNullable(this.storageTarget);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceClusterAutoscalingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cpuTarget;
        private Integer maxNodes;
        private Integer minNodes;
        private @Nullable Integer storageTarget;
        public Builder() {}
        public Builder(InstanceClusterAutoscalingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuTarget = defaults.cpuTarget;
    	      this.maxNodes = defaults.maxNodes;
    	      this.minNodes = defaults.minNodes;
    	      this.storageTarget = defaults.storageTarget;
        }

        @CustomType.Setter
        public Builder cpuTarget(Integer cpuTarget) {
            this.cpuTarget = Objects.requireNonNull(cpuTarget);
            return this;
        }
        @CustomType.Setter
        public Builder maxNodes(Integer maxNodes) {
            this.maxNodes = Objects.requireNonNull(maxNodes);
            return this;
        }
        @CustomType.Setter
        public Builder minNodes(Integer minNodes) {
            this.minNodes = Objects.requireNonNull(minNodes);
            return this;
        }
        @CustomType.Setter
        public Builder storageTarget(@Nullable Integer storageTarget) {
            this.storageTarget = storageTarget;
            return this;
        }
        public InstanceClusterAutoscalingConfig build() {
            final var o = new InstanceClusterAutoscalingConfig();
            o.cpuTarget = cpuTarget;
            o.maxNodes = maxNodes;
            o.minNodes = minNodes;
            o.storageTarget = storageTarget;
            return o;
        }
    }
}
