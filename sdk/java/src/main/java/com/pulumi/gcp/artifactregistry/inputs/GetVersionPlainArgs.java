// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVersionPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVersionPlainArgs Empty = new GetVersionPlainArgs();

    /**
     * The location of the artifact registry.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location of the artifact registry.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * The name of the package.
     * 
     */
    @Import(name="packageName", required=true)
    private String packageName;

    /**
     * @return The name of the package.
     * 
     */
    public String packageName() {
        return this.packageName;
    }

    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The last part of the repository name to fetch from.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return The last part of the repository name to fetch from.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * The name of the version.
     * 
     */
    @Import(name="versionName", required=true)
    private String versionName;

    /**
     * @return The name of the version.
     * 
     */
    public String versionName() {
        return this.versionName;
    }

    /**
     * The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
     * 
     */
    @Import(name="view")
    private @Nullable String view;

    /**
     * @return The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
     * 
     */
    public Optional<String> view() {
        return Optional.ofNullable(this.view);
    }

    private GetVersionPlainArgs() {}

    private GetVersionPlainArgs(GetVersionPlainArgs $) {
        this.location = $.location;
        this.packageName = $.packageName;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
        this.versionName = $.versionName;
        this.view = $.view;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVersionPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVersionPlainArgs $;

        public Builder() {
            $ = new GetVersionPlainArgs();
        }

        public Builder(GetVersionPlainArgs defaults) {
            $ = new GetVersionPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location of the artifact registry.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param packageName The name of the package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repositoryId The last part of the repository name to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param versionName The name of the version.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param view The view, which determines what version information is returned in a response. Possible values are `&#34;BASIC&#34;` and `&#34;FULL&#34;`. Defaults to `&#34;BASIC&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder view(@Nullable String view) {
            $.view = view;
            return this;
        }

        public GetVersionPlainArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetVersionPlainArgs", "location");
            }
            if ($.packageName == null) {
                throw new MissingRequiredPropertyException("GetVersionPlainArgs", "packageName");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetVersionPlainArgs", "repositoryId");
            }
            if ($.versionName == null) {
                throw new MissingRequiredPropertyException("GetVersionPlainArgs", "versionName");
            }
            return $;
        }
    }

}
