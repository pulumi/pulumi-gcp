// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionSqlHourlyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionSqlHourlyArgs Empty = new AlertPolicyConditionConditionSqlHourlyArgs();

    /**
     * The number of minutes after the hour (in UTC) to run the query.
     * Must be greater than or equal to 0 minutes and less than or equal to
     * 59 minutes.  If left unspecified, then an arbitrary offset is used.
     * 
     */
    @Import(name="minuteOffset")
    private @Nullable Output<Integer> minuteOffset;

    /**
     * @return The number of minutes after the hour (in UTC) to run the query.
     * Must be greater than or equal to 0 minutes and less than or equal to
     * 59 minutes.  If left unspecified, then an arbitrary offset is used.
     * 
     */
    public Optional<Output<Integer>> minuteOffset() {
        return Optional.ofNullable(this.minuteOffset);
    }

    /**
     * Number of hours between runs. The interval must be greater than or
     * equal to 1 hour and less than or equal to 48 hours.
     * 
     */
    @Import(name="periodicity", required=true)
    private Output<Integer> periodicity;

    /**
     * @return Number of hours between runs. The interval must be greater than or
     * equal to 1 hour and less than or equal to 48 hours.
     * 
     */
    public Output<Integer> periodicity() {
        return this.periodicity;
    }

    private AlertPolicyConditionConditionSqlHourlyArgs() {}

    private AlertPolicyConditionConditionSqlHourlyArgs(AlertPolicyConditionConditionSqlHourlyArgs $) {
        this.minuteOffset = $.minuteOffset;
        this.periodicity = $.periodicity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionConditionSqlHourlyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionConditionSqlHourlyArgs $;

        public Builder() {
            $ = new AlertPolicyConditionConditionSqlHourlyArgs();
        }

        public Builder(AlertPolicyConditionConditionSqlHourlyArgs defaults) {
            $ = new AlertPolicyConditionConditionSqlHourlyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minuteOffset The number of minutes after the hour (in UTC) to run the query.
         * Must be greater than or equal to 0 minutes and less than or equal to
         * 59 minutes.  If left unspecified, then an arbitrary offset is used.
         * 
         * @return builder
         * 
         */
        public Builder minuteOffset(@Nullable Output<Integer> minuteOffset) {
            $.minuteOffset = minuteOffset;
            return this;
        }

        /**
         * @param minuteOffset The number of minutes after the hour (in UTC) to run the query.
         * Must be greater than or equal to 0 minutes and less than or equal to
         * 59 minutes.  If left unspecified, then an arbitrary offset is used.
         * 
         * @return builder
         * 
         */
        public Builder minuteOffset(Integer minuteOffset) {
            return minuteOffset(Output.of(minuteOffset));
        }

        /**
         * @param periodicity Number of hours between runs. The interval must be greater than or
         * equal to 1 hour and less than or equal to 48 hours.
         * 
         * @return builder
         * 
         */
        public Builder periodicity(Output<Integer> periodicity) {
            $.periodicity = periodicity;
            return this;
        }

        /**
         * @param periodicity Number of hours between runs. The interval must be greater than or
         * equal to 1 hour and less than or equal to 48 hours.
         * 
         * @return builder
         * 
         */
        public Builder periodicity(Integer periodicity) {
            return periodicity(Output.of(periodicity));
        }

        public AlertPolicyConditionConditionSqlHourlyArgs build() {
            if ($.periodicity == null) {
                throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlHourlyArgs", "periodicity");
            }
            return $;
        }
    }

}
