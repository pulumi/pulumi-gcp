// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerPoolInstanceSplitArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerPoolInstanceSplitArgs Empty = new WorkerPoolInstanceSplitArgs();

    /**
     * Specifies percent of the instance split to this Revision. This defaults to zero if unspecified.
     * 
     */
    @Import(name="percent")
    private @Nullable Output<Integer> percent;

    /**
     * @return Specifies percent of the instance split to this Revision. This defaults to zero if unspecified.
     * 
     */
    public Optional<Output<Integer>> percent() {
        return Optional.ofNullable(this.percent);
    }

    /**
     * Revision to which to assign this portion of instances, if split allocation is by revision.
     * 
     */
    @Import(name="revision")
    private @Nullable Output<String> revision;

    /**
     * @return Revision to which to assign this portion of instances, if split allocation is by revision.
     * 
     */
    public Optional<Output<String>> revision() {
        return Optional.ofNullable(this.revision);
    }

    /**
     * The allocation type for this instance split.
     * Possible values are: `INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST`, `INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The allocation type for this instance split.
     * Possible values are: `INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST`, `INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private WorkerPoolInstanceSplitArgs() {}

    private WorkerPoolInstanceSplitArgs(WorkerPoolInstanceSplitArgs $) {
        this.percent = $.percent;
        this.revision = $.revision;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerPoolInstanceSplitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerPoolInstanceSplitArgs $;

        public Builder() {
            $ = new WorkerPoolInstanceSplitArgs();
        }

        public Builder(WorkerPoolInstanceSplitArgs defaults) {
            $ = new WorkerPoolInstanceSplitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param percent Specifies percent of the instance split to this Revision. This defaults to zero if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder percent(@Nullable Output<Integer> percent) {
            $.percent = percent;
            return this;
        }

        /**
         * @param percent Specifies percent of the instance split to this Revision. This defaults to zero if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder percent(Integer percent) {
            return percent(Output.of(percent));
        }

        /**
         * @param revision Revision to which to assign this portion of instances, if split allocation is by revision.
         * 
         * @return builder
         * 
         */
        public Builder revision(@Nullable Output<String> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision Revision to which to assign this portion of instances, if split allocation is by revision.
         * 
         * @return builder
         * 
         */
        public Builder revision(String revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param type The allocation type for this instance split.
         * Possible values are: `INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST`, `INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The allocation type for this instance split.
         * Possible values are: `INSTANCE_SPLIT_ALLOCATION_TYPE_LATEST`, `INSTANCE_SPLIT_ALLOCATION_TYPE_REVISION`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public WorkerPoolInstanceSplitArgs build() {
            return $;
        }
    }

}
