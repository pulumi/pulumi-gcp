// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.lustre.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    private String capacityGib;
    private String createTime;
    private String description;
    private Map<String,String> effectiveLabels;
    private String filesystem;
    private Boolean gkeSupportEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String instanceId;
    private Map<String,String> labels;
    private String location;
    private String mountPoint;
    private String name;
    private String network;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String state;
    private String updateTime;
    private @Nullable String zone;

    private GetInstanceResult() {}
    public String capacityGib() {
        return this.capacityGib;
    }
    public String createTime() {
        return this.createTime;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String filesystem() {
        return this.filesystem;
    }
    public Boolean gkeSupportEnabled() {
        return this.gkeSupportEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instanceId() {
        return this.instanceId;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public String mountPoint() {
        return this.mountPoint;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String state() {
        return this.state;
    }
    public String updateTime() {
        return this.updateTime;
    }
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String capacityGib;
        private String createTime;
        private String description;
        private Map<String,String> effectiveLabels;
        private String filesystem;
        private Boolean gkeSupportEnabled;
        private String id;
        private String instanceId;
        private Map<String,String> labels;
        private String location;
        private String mountPoint;
        private String name;
        private String network;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String state;
        private String updateTime;
        private @Nullable String zone;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityGib = defaults.capacityGib;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.filesystem = defaults.filesystem;
    	      this.gkeSupportEnabled = defaults.gkeSupportEnabled;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.mountPoint = defaults.mountPoint;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder capacityGib(String capacityGib) {
            if (capacityGib == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "capacityGib");
            }
            this.capacityGib = capacityGib;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder filesystem(String filesystem) {
            if (filesystem == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "filesystem");
            }
            this.filesystem = filesystem;
            return this;
        }
        @CustomType.Setter
        public Builder gkeSupportEnabled(Boolean gkeSupportEnabled) {
            if (gkeSupportEnabled == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "gkeSupportEnabled");
            }
            this.gkeSupportEnabled = gkeSupportEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder mountPoint(String mountPoint) {
            if (mountPoint == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "mountPoint");
            }
            this.mountPoint = mountPoint;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {

            this.zone = zone;
            return this;
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.capacityGib = capacityGib;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.filesystem = filesystem;
            _resultValue.gkeSupportEnabled = gkeSupportEnabled;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.mountPoint = mountPoint;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.state = state;
            _resultValue.updateTime = updateTime;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
