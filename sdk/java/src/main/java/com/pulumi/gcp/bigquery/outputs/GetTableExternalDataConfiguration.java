// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationAvroOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationBigtableOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationCsvOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationGoogleSheetsOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationHivePartitioningOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationJsonOption;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationParquetOption;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTableExternalDataConfiguration {
    /**
     * @return Let BigQuery try to autodetect the schema and format of the table.
     * 
     */
    private Boolean autodetect;
    /**
     * @return Additional options if sourceFormat is set to &#34;AVRO&#34;
     * 
     */
    private List<GetTableExternalDataConfigurationAvroOption> avroOptions;
    /**
     * @return Additional options if sourceFormat is set to BIGTABLE.
     * 
     */
    private List<GetTableExternalDataConfigurationBigtableOption> bigtableOptions;
    /**
     * @return The compression type of the data source. Valid values are &#34;NONE&#34; or &#34;GZIP&#34;.
     * 
     */
    private String compression;
    /**
     * @return The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connectionId can have the form &#34;&lt;project&gt;.&lt;location&gt;.&lt;connection_id&gt;&#34; or &#34;projects/&lt;project&gt;/locations/&lt;location&gt;/connections/&lt;connection_id&gt;&#34;.
     * 
     */
    private String connectionId;
    /**
     * @return Additional properties to set if sourceFormat is set to &#34;CSV&#34;.
     * 
     */
    private List<GetTableExternalDataConfigurationCsvOption> csvOptions;
    /**
     * @return Specifies how source URIs are interpreted for constructing the file set to load.  By default source URIs are expanded against the underlying storage.  Other options include specifying manifest files. Only applicable to object storage systems.
     * 
     */
    private String fileSetSpecType;
    /**
     * @return Additional options if sourceFormat is set to &#34;GOOGLE_SHEETS&#34;.
     * 
     */
    private List<GetTableExternalDataConfigurationGoogleSheetsOption> googleSheetsOptions;
    /**
     * @return When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
     * 
     */
    private List<GetTableExternalDataConfigurationHivePartitioningOption> hivePartitioningOptions;
    /**
     * @return Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
     * 
     */
    private Boolean ignoreUnknownValues;
    /**
     * @return Load option to be used together with sourceFormat newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and sourceFormat must be set to NEWLINE_DELIMITED_JSON).
     * 
     */
    private String jsonExtension;
    /**
     * @return Additional properties to set if sourceFormat is set to JSON.
     * 
     */
    private List<GetTableExternalDataConfigurationJsonOption> jsonOptions;
    /**
     * @return The maximum number of bad records that BigQuery can ignore when reading data.
     * 
     */
    private Integer maxBadRecords;
    /**
     * @return Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
     * 
     */
    private String metadataCacheMode;
    /**
     * @return Object Metadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the sourceUris. If ObjectMetadata is set, sourceFormat should be omitted.
     * 
     */
    private String objectMetadata;
    /**
     * @return Additional properties to set if sourceFormat is set to PARQUET.
     * 
     */
    private List<GetTableExternalDataConfigurationParquetOption> parquetOptions;
    /**
     * @return When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
     * 
     */
    private String referenceFileSchemaUri;
    /**
     * @return A JSON schema for the external table. Schema is required for CSV and JSON formats and is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats when using external tables.
     * 
     */
    private String schema;
    /**
     * @return Please see sourceFormat under ExternalDataConfiguration in Bigquery&#39;s public API documentation (https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externaldataconfiguration) for supported formats. To use &#34;GOOGLE_SHEETS&#34; the scopes must include &#34;googleapis.com/auth/drive.readonly&#34;.
     * 
     */
    private String sourceFormat;
    /**
     * @return A list of the fully-qualified URIs that point to your data in Google Cloud.
     * 
     */
    private List<String> sourceUris;

    private GetTableExternalDataConfiguration() {}
    /**
     * @return Let BigQuery try to autodetect the schema and format of the table.
     * 
     */
    public Boolean autodetect() {
        return this.autodetect;
    }
    /**
     * @return Additional options if sourceFormat is set to &#34;AVRO&#34;
     * 
     */
    public List<GetTableExternalDataConfigurationAvroOption> avroOptions() {
        return this.avroOptions;
    }
    /**
     * @return Additional options if sourceFormat is set to BIGTABLE.
     * 
     */
    public List<GetTableExternalDataConfigurationBigtableOption> bigtableOptions() {
        return this.bigtableOptions;
    }
    /**
     * @return The compression type of the data source. Valid values are &#34;NONE&#34; or &#34;GZIP&#34;.
     * 
     */
    public String compression() {
        return this.compression;
    }
    /**
     * @return The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connectionId can have the form &#34;&lt;project&gt;.&lt;location&gt;.&lt;connection_id&gt;&#34; or &#34;projects/&lt;project&gt;/locations/&lt;location&gt;/connections/&lt;connection_id&gt;&#34;.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return Additional properties to set if sourceFormat is set to &#34;CSV&#34;.
     * 
     */
    public List<GetTableExternalDataConfigurationCsvOption> csvOptions() {
        return this.csvOptions;
    }
    /**
     * @return Specifies how source URIs are interpreted for constructing the file set to load.  By default source URIs are expanded against the underlying storage.  Other options include specifying manifest files. Only applicable to object storage systems.
     * 
     */
    public String fileSetSpecType() {
        return this.fileSetSpecType;
    }
    /**
     * @return Additional options if sourceFormat is set to &#34;GOOGLE_SHEETS&#34;.
     * 
     */
    public List<GetTableExternalDataConfigurationGoogleSheetsOption> googleSheetsOptions() {
        return this.googleSheetsOptions;
    }
    /**
     * @return When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
     * 
     */
    public List<GetTableExternalDataConfigurationHivePartitioningOption> hivePartitioningOptions() {
        return this.hivePartitioningOptions;
    }
    /**
     * @return Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
     * 
     */
    public Boolean ignoreUnknownValues() {
        return this.ignoreUnknownValues;
    }
    /**
     * @return Load option to be used together with sourceFormat newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and sourceFormat must be set to NEWLINE_DELIMITED_JSON).
     * 
     */
    public String jsonExtension() {
        return this.jsonExtension;
    }
    /**
     * @return Additional properties to set if sourceFormat is set to JSON.
     * 
     */
    public List<GetTableExternalDataConfigurationJsonOption> jsonOptions() {
        return this.jsonOptions;
    }
    /**
     * @return The maximum number of bad records that BigQuery can ignore when reading data.
     * 
     */
    public Integer maxBadRecords() {
        return this.maxBadRecords;
    }
    /**
     * @return Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
     * 
     */
    public String metadataCacheMode() {
        return this.metadataCacheMode;
    }
    /**
     * @return Object Metadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the sourceUris. If ObjectMetadata is set, sourceFormat should be omitted.
     * 
     */
    public String objectMetadata() {
        return this.objectMetadata;
    }
    /**
     * @return Additional properties to set if sourceFormat is set to PARQUET.
     * 
     */
    public List<GetTableExternalDataConfigurationParquetOption> parquetOptions() {
        return this.parquetOptions;
    }
    /**
     * @return When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
     * 
     */
    public String referenceFileSchemaUri() {
        return this.referenceFileSchemaUri;
    }
    /**
     * @return A JSON schema for the external table. Schema is required for CSV and JSON formats and is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats when using external tables.
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return Please see sourceFormat under ExternalDataConfiguration in Bigquery&#39;s public API documentation (https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externaldataconfiguration) for supported formats. To use &#34;GOOGLE_SHEETS&#34; the scopes must include &#34;googleapis.com/auth/drive.readonly&#34;.
     * 
     */
    public String sourceFormat() {
        return this.sourceFormat;
    }
    /**
     * @return A list of the fully-qualified URIs that point to your data in Google Cloud.
     * 
     */
    public List<String> sourceUris() {
        return this.sourceUris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableExternalDataConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autodetect;
        private List<GetTableExternalDataConfigurationAvroOption> avroOptions;
        private List<GetTableExternalDataConfigurationBigtableOption> bigtableOptions;
        private String compression;
        private String connectionId;
        private List<GetTableExternalDataConfigurationCsvOption> csvOptions;
        private String fileSetSpecType;
        private List<GetTableExternalDataConfigurationGoogleSheetsOption> googleSheetsOptions;
        private List<GetTableExternalDataConfigurationHivePartitioningOption> hivePartitioningOptions;
        private Boolean ignoreUnknownValues;
        private String jsonExtension;
        private List<GetTableExternalDataConfigurationJsonOption> jsonOptions;
        private Integer maxBadRecords;
        private String metadataCacheMode;
        private String objectMetadata;
        private List<GetTableExternalDataConfigurationParquetOption> parquetOptions;
        private String referenceFileSchemaUri;
        private String schema;
        private String sourceFormat;
        private List<String> sourceUris;
        public Builder() {}
        public Builder(GetTableExternalDataConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodetect = defaults.autodetect;
    	      this.avroOptions = defaults.avroOptions;
    	      this.bigtableOptions = defaults.bigtableOptions;
    	      this.compression = defaults.compression;
    	      this.connectionId = defaults.connectionId;
    	      this.csvOptions = defaults.csvOptions;
    	      this.fileSetSpecType = defaults.fileSetSpecType;
    	      this.googleSheetsOptions = defaults.googleSheetsOptions;
    	      this.hivePartitioningOptions = defaults.hivePartitioningOptions;
    	      this.ignoreUnknownValues = defaults.ignoreUnknownValues;
    	      this.jsonExtension = defaults.jsonExtension;
    	      this.jsonOptions = defaults.jsonOptions;
    	      this.maxBadRecords = defaults.maxBadRecords;
    	      this.metadataCacheMode = defaults.metadataCacheMode;
    	      this.objectMetadata = defaults.objectMetadata;
    	      this.parquetOptions = defaults.parquetOptions;
    	      this.referenceFileSchemaUri = defaults.referenceFileSchemaUri;
    	      this.schema = defaults.schema;
    	      this.sourceFormat = defaults.sourceFormat;
    	      this.sourceUris = defaults.sourceUris;
        }

        @CustomType.Setter
        public Builder autodetect(Boolean autodetect) {
            if (autodetect == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "autodetect");
            }
            this.autodetect = autodetect;
            return this;
        }
        @CustomType.Setter
        public Builder avroOptions(List<GetTableExternalDataConfigurationAvroOption> avroOptions) {
            if (avroOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "avroOptions");
            }
            this.avroOptions = avroOptions;
            return this;
        }
        public Builder avroOptions(GetTableExternalDataConfigurationAvroOption... avroOptions) {
            return avroOptions(List.of(avroOptions));
        }
        @CustomType.Setter
        public Builder bigtableOptions(List<GetTableExternalDataConfigurationBigtableOption> bigtableOptions) {
            if (bigtableOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "bigtableOptions");
            }
            this.bigtableOptions = bigtableOptions;
            return this;
        }
        public Builder bigtableOptions(GetTableExternalDataConfigurationBigtableOption... bigtableOptions) {
            return bigtableOptions(List.of(bigtableOptions));
        }
        @CustomType.Setter
        public Builder compression(String compression) {
            if (compression == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "compression");
            }
            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder csvOptions(List<GetTableExternalDataConfigurationCsvOption> csvOptions) {
            if (csvOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "csvOptions");
            }
            this.csvOptions = csvOptions;
            return this;
        }
        public Builder csvOptions(GetTableExternalDataConfigurationCsvOption... csvOptions) {
            return csvOptions(List.of(csvOptions));
        }
        @CustomType.Setter
        public Builder fileSetSpecType(String fileSetSpecType) {
            if (fileSetSpecType == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "fileSetSpecType");
            }
            this.fileSetSpecType = fileSetSpecType;
            return this;
        }
        @CustomType.Setter
        public Builder googleSheetsOptions(List<GetTableExternalDataConfigurationGoogleSheetsOption> googleSheetsOptions) {
            if (googleSheetsOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "googleSheetsOptions");
            }
            this.googleSheetsOptions = googleSheetsOptions;
            return this;
        }
        public Builder googleSheetsOptions(GetTableExternalDataConfigurationGoogleSheetsOption... googleSheetsOptions) {
            return googleSheetsOptions(List.of(googleSheetsOptions));
        }
        @CustomType.Setter
        public Builder hivePartitioningOptions(List<GetTableExternalDataConfigurationHivePartitioningOption> hivePartitioningOptions) {
            if (hivePartitioningOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "hivePartitioningOptions");
            }
            this.hivePartitioningOptions = hivePartitioningOptions;
            return this;
        }
        public Builder hivePartitioningOptions(GetTableExternalDataConfigurationHivePartitioningOption... hivePartitioningOptions) {
            return hivePartitioningOptions(List.of(hivePartitioningOptions));
        }
        @CustomType.Setter
        public Builder ignoreUnknownValues(Boolean ignoreUnknownValues) {
            if (ignoreUnknownValues == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "ignoreUnknownValues");
            }
            this.ignoreUnknownValues = ignoreUnknownValues;
            return this;
        }
        @CustomType.Setter
        public Builder jsonExtension(String jsonExtension) {
            if (jsonExtension == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "jsonExtension");
            }
            this.jsonExtension = jsonExtension;
            return this;
        }
        @CustomType.Setter
        public Builder jsonOptions(List<GetTableExternalDataConfigurationJsonOption> jsonOptions) {
            if (jsonOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "jsonOptions");
            }
            this.jsonOptions = jsonOptions;
            return this;
        }
        public Builder jsonOptions(GetTableExternalDataConfigurationJsonOption... jsonOptions) {
            return jsonOptions(List.of(jsonOptions));
        }
        @CustomType.Setter
        public Builder maxBadRecords(Integer maxBadRecords) {
            if (maxBadRecords == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "maxBadRecords");
            }
            this.maxBadRecords = maxBadRecords;
            return this;
        }
        @CustomType.Setter
        public Builder metadataCacheMode(String metadataCacheMode) {
            if (metadataCacheMode == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "metadataCacheMode");
            }
            this.metadataCacheMode = metadataCacheMode;
            return this;
        }
        @CustomType.Setter
        public Builder objectMetadata(String objectMetadata) {
            if (objectMetadata == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "objectMetadata");
            }
            this.objectMetadata = objectMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder parquetOptions(List<GetTableExternalDataConfigurationParquetOption> parquetOptions) {
            if (parquetOptions == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "parquetOptions");
            }
            this.parquetOptions = parquetOptions;
            return this;
        }
        public Builder parquetOptions(GetTableExternalDataConfigurationParquetOption... parquetOptions) {
            return parquetOptions(List.of(parquetOptions));
        }
        @CustomType.Setter
        public Builder referenceFileSchemaUri(String referenceFileSchemaUri) {
            if (referenceFileSchemaUri == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "referenceFileSchemaUri");
            }
            this.referenceFileSchemaUri = referenceFileSchemaUri;
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            if (schema == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "schema");
            }
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder sourceFormat(String sourceFormat) {
            if (sourceFormat == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "sourceFormat");
            }
            this.sourceFormat = sourceFormat;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUris(List<String> sourceUris) {
            if (sourceUris == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfiguration", "sourceUris");
            }
            this.sourceUris = sourceUris;
            return this;
        }
        public Builder sourceUris(String... sourceUris) {
            return sourceUris(List.of(sourceUris));
        }
        public GetTableExternalDataConfiguration build() {
            final var _resultValue = new GetTableExternalDataConfiguration();
            _resultValue.autodetect = autodetect;
            _resultValue.avroOptions = avroOptions;
            _resultValue.bigtableOptions = bigtableOptions;
            _resultValue.compression = compression;
            _resultValue.connectionId = connectionId;
            _resultValue.csvOptions = csvOptions;
            _resultValue.fileSetSpecType = fileSetSpecType;
            _resultValue.googleSheetsOptions = googleSheetsOptions;
            _resultValue.hivePartitioningOptions = hivePartitioningOptions;
            _resultValue.ignoreUnknownValues = ignoreUnknownValues;
            _resultValue.jsonExtension = jsonExtension;
            _resultValue.jsonOptions = jsonOptions;
            _resultValue.maxBadRecords = maxBadRecords;
            _resultValue.metadataCacheMode = metadataCacheMode;
            _resultValue.objectMetadata = objectMetadata;
            _resultValue.parquetOptions = parquetOptions;
            _resultValue.referenceFileSchemaUri = referenceFileSchemaUri;
            _resultValue.schema = schema;
            _resultValue.sourceFormat = sourceFormat;
            _resultValue.sourceUris = sourceUris;
            return _resultValue;
        }
    }
}
