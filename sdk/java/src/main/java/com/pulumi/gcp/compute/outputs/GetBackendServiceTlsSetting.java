// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetBackendServiceTlsSettingSubjectAltName;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBackendServiceTlsSetting {
    /**
     * @return Reference to the BackendAuthenticationConfig resource from the networksecurity.googleapis.com namespace.
     * Can be used in authenticating TLS connections to the backend, as specified by the authenticationMode field.
     * Can only be specified if authenticationMode is not NONE.
     * 
     */
    private String authenticationConfig;
    /**
     * @return Server Name Indication - see RFC3546 section 3.1. If set, the load balancer sends this string as the SNI hostname in the
     * TLS connection to the backend, and requires that this string match a Subject Alternative Name (SAN) in the backend&#39;s
     * server certificate. With a Regional Internet NEG backend, if the SNI is specified here, the load balancer uses it
     * regardless of whether the Regional Internet NEG is specified with FQDN or IP address and port.
     * 
     */
    private String sni;
    /**
     * @return A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
     * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
     * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
     * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
     * subjectAltNames.
     * 
     */
    private List<GetBackendServiceTlsSettingSubjectAltName> subjectAltNames;

    private GetBackendServiceTlsSetting() {}
    /**
     * @return Reference to the BackendAuthenticationConfig resource from the networksecurity.googleapis.com namespace.
     * Can be used in authenticating TLS connections to the backend, as specified by the authenticationMode field.
     * Can only be specified if authenticationMode is not NONE.
     * 
     */
    public String authenticationConfig() {
        return this.authenticationConfig;
    }
    /**
     * @return Server Name Indication - see RFC3546 section 3.1. If set, the load balancer sends this string as the SNI hostname in the
     * TLS connection to the backend, and requires that this string match a Subject Alternative Name (SAN) in the backend&#39;s
     * server certificate. With a Regional Internet NEG backend, if the SNI is specified here, the load balancer uses it
     * regardless of whether the Regional Internet NEG is specified with FQDN or IP address and port.
     * 
     */
    public String sni() {
        return this.sni;
    }
    /**
     * @return A list of Subject Alternative Names (SANs) that the Load Balancer verifies during a TLS handshake with the backend.
     * When the server presents its X.509 certificate to the Load Balancer, the Load Balancer inspects the certificate&#39;s SAN field,
     * and requires that at least one SAN match one of the subjectAltNames in the list. This field is limited to 5 entries.
     * When both sni and subjectAltNames are specified, the load balancer matches the backend certificate&#39;s SAN only to
     * subjectAltNames.
     * 
     */
    public List<GetBackendServiceTlsSettingSubjectAltName> subjectAltNames() {
        return this.subjectAltNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceTlsSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationConfig;
        private String sni;
        private List<GetBackendServiceTlsSettingSubjectAltName> subjectAltNames;
        public Builder() {}
        public Builder(GetBackendServiceTlsSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationConfig = defaults.authenticationConfig;
    	      this.sni = defaults.sni;
    	      this.subjectAltNames = defaults.subjectAltNames;
        }

        @CustomType.Setter
        public Builder authenticationConfig(String authenticationConfig) {
            if (authenticationConfig == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceTlsSetting", "authenticationConfig");
            }
            this.authenticationConfig = authenticationConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sni(String sni) {
            if (sni == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceTlsSetting", "sni");
            }
            this.sni = sni;
            return this;
        }
        @CustomType.Setter
        public Builder subjectAltNames(List<GetBackendServiceTlsSettingSubjectAltName> subjectAltNames) {
            if (subjectAltNames == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceTlsSetting", "subjectAltNames");
            }
            this.subjectAltNames = subjectAltNames;
            return this;
        }
        public Builder subjectAltNames(GetBackendServiceTlsSettingSubjectAltName... subjectAltNames) {
            return subjectAltNames(List.of(subjectAltNames));
        }
        public GetBackendServiceTlsSetting build() {
            final var _resultValue = new GetBackendServiceTlsSetting();
            _resultValue.authenticationConfig = authenticationConfig;
            _resultValue.sni = sni;
            _resultValue.subjectAltNames = subjectAltNames;
            return _resultValue;
        }
    }
}
