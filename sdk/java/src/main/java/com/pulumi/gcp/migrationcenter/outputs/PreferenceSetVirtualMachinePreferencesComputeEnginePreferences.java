// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.migrationcenter.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.migrationcenter.outputs.PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PreferenceSetVirtualMachinePreferencesComputeEnginePreferences {
    /**
     * @return License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan. Possible values: `LICENSE_TYPE_UNSPECIFIED`, `LICENSE_TYPE_DEFAULT`, `LICENSE_TYPE_BRING_YOUR_OWN_LICENSE`
     * 
     */
    private @Nullable String licenseType;
    /**
     * @return The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
     * Structure is documented below.
     * 
     */
    private @Nullable PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences machinePreferences;

    private PreferenceSetVirtualMachinePreferencesComputeEnginePreferences() {}
    /**
     * @return License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan. Possible values: `LICENSE_TYPE_UNSPECIFIED`, `LICENSE_TYPE_DEFAULT`, `LICENSE_TYPE_BRING_YOUR_OWN_LICENSE`
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }
    /**
     * @return The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
     * Structure is documented below.
     * 
     */
    public Optional<PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences> machinePreferences() {
        return Optional.ofNullable(this.machinePreferences);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreferenceSetVirtualMachinePreferencesComputeEnginePreferences defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String licenseType;
        private @Nullable PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences machinePreferences;
        public Builder() {}
        public Builder(PreferenceSetVirtualMachinePreferencesComputeEnginePreferences defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.licenseType = defaults.licenseType;
    	      this.machinePreferences = defaults.machinePreferences;
        }

        @CustomType.Setter
        public Builder licenseType(@Nullable String licenseType) {

            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder machinePreferences(@Nullable PreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferences machinePreferences) {

            this.machinePreferences = machinePreferences;
            return this;
        }
        public PreferenceSetVirtualMachinePreferencesComputeEnginePreferences build() {
            final var _resultValue = new PreferenceSetVirtualMachinePreferencesComputeEnginePreferences();
            _resultValue.licenseType = licenseType;
            _resultValue.machinePreferences = machinePreferences;
            return _resultValue;
        }
    }
}
