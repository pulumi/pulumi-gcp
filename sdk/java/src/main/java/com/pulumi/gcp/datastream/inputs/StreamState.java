// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllArgs;
import com.pulumi.gcp.datastream.inputs.StreamBackfillNoneArgs;
import com.pulumi.gcp.datastream.inputs.StreamDestinationConfigArgs;
import com.pulumi.gcp.datastream.inputs.StreamSourceConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamState extends com.pulumi.resources.ResourceArgs {

    public static final StreamState Empty = new StreamState();

    /**
     * Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * Structure is documented below.
     * 
     */
    @Import(name="backfillAll")
    private @Nullable Output<StreamBackfillAllArgs> backfillAll;

    /**
     * @return Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamBackfillAllArgs>> backfillAll() {
        return Optional.ofNullable(this.backfillAll);
    }

    /**
     * Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    @Import(name="backfillNone")
    private @Nullable Output<StreamBackfillNoneArgs> backfillNone;

    /**
     * @return Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
     * 
     */
    public Optional<Output<StreamBackfillNoneArgs>> backfillNone() {
        return Optional.ofNullable(this.backfillNone);
    }

    /**
     * A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
     * will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    @Import(name="customerManagedEncryptionKey")
    private @Nullable Output<String> customerManagedEncryptionKey;

    /**
     * @return A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
     * will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     * 
     */
    public Optional<Output<String>> customerManagedEncryptionKey() {
        return Optional.ofNullable(this.customerManagedEncryptionKey);
    }

    /**
     * Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationConfig")
    private @Nullable Output<StreamDestinationConfigArgs> destinationConfig;

    /**
     * @return Destination connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamDestinationConfigArgs>> destinationConfig() {
        return Optional.ofNullable(this.destinationConfig);
    }

    /**
     * Display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the location this stream is located in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location this stream is located in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The stream&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The stream&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceConfig")
    private @Nullable Output<StreamSourceConfigArgs> sourceConfig;

    /**
     * @return Source connection profile configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamSourceConfigArgs>> sourceConfig() {
        return Optional.ofNullable(this.sourceConfig);
    }

    /**
     * The state of the stream.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the stream.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The stream identifier.
     * 
     */
    @Import(name="streamId")
    private @Nullable Output<String> streamId;

    /**
     * @return The stream identifier.
     * 
     */
    public Optional<Output<String>> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    private StreamState() {}

    private StreamState(StreamState $) {
        this.backfillAll = $.backfillAll;
        this.backfillNone = $.backfillNone;
        this.customerManagedEncryptionKey = $.customerManagedEncryptionKey;
        this.desiredState = $.desiredState;
        this.destinationConfig = $.destinationConfig;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.sourceConfig = $.sourceConfig;
        this.state = $.state;
        this.streamId = $.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamState $;

        public Builder() {
            $ = new StreamState();
        }

        public Builder(StreamState defaults) {
            $ = new StreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backfillAll Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backfillAll(@Nullable Output<StreamBackfillAllArgs> backfillAll) {
            $.backfillAll = backfillAll;
            return this;
        }

        /**
         * @param backfillAll Backfill strategy to automatically backfill the Stream&#39;s objects. Specific objects can be excluded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backfillAll(StreamBackfillAllArgs backfillAll) {
            return backfillAll(Output.of(backfillAll));
        }

        /**
         * @param backfillNone Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
         * 
         * @return builder
         * 
         */
        public Builder backfillNone(@Nullable Output<StreamBackfillNoneArgs> backfillNone) {
            $.backfillNone = backfillNone;
            return this;
        }

        /**
         * @param backfillNone Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
         * 
         * @return builder
         * 
         */
        public Builder backfillNone(StreamBackfillNoneArgs backfillNone) {
            return backfillNone(Output.of(backfillNone));
        }

        /**
         * @param customerManagedEncryptionKey A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
         * will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryptionKey(@Nullable Output<String> customerManagedEncryptionKey) {
            $.customerManagedEncryptionKey = customerManagedEncryptionKey;
            return this;
        }

        /**
         * @param customerManagedEncryptionKey A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
         * will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryptionKey(String customerManagedEncryptionKey) {
            return customerManagedEncryptionKey(Output.of(customerManagedEncryptionKey));
        }

        /**
         * @param desiredState Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState Desired state of the Stream. Set this field to `RUNNING` to start the stream, and `PAUSED` to pause the stream.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param destinationConfig Destination connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(@Nullable Output<StreamDestinationConfigArgs> destinationConfig) {
            $.destinationConfig = destinationConfig;
            return this;
        }

        /**
         * @param destinationConfig Destination connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfig(StreamDestinationConfigArgs destinationConfig) {
            return destinationConfig(Output.of(destinationConfig));
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The name of the location this stream is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this stream is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The stream&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The stream&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param sourceConfig Source connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceConfig(@Nullable Output<StreamSourceConfigArgs> sourceConfig) {
            $.sourceConfig = sourceConfig;
            return this;
        }

        /**
         * @param sourceConfig Source connection profile configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceConfig(StreamSourceConfigArgs sourceConfig) {
            return sourceConfig(Output.of(sourceConfig));
        }

        /**
         * @param state The state of the stream.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the stream.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streamId The stream identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamId(@Nullable Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The stream identifier.
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public StreamState build() {
            return $;
        }
    }

}
