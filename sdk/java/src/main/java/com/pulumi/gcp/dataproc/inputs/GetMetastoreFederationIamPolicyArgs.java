// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetastoreFederationIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetastoreFederationIamPolicyArgs Empty = new GetMetastoreFederationIamPolicyArgs();

    @Import(name="federationId", required=true)
    private Output<String> federationId;

    public Output<String> federationId() {
        return this.federationId;
    }

    /**
     * The location where the metastore federation should reside.
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where the metastore federation should reside.
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetMetastoreFederationIamPolicyArgs() {}

    private GetMetastoreFederationIamPolicyArgs(GetMetastoreFederationIamPolicyArgs $) {
        this.federationId = $.federationId;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetastoreFederationIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetastoreFederationIamPolicyArgs $;

        public Builder() {
            $ = new GetMetastoreFederationIamPolicyArgs();
        }

        public Builder(GetMetastoreFederationIamPolicyArgs defaults) {
            $ = new GetMetastoreFederationIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder federationId(Output<String> federationId) {
            $.federationId = federationId;
            return this;
        }

        public Builder federationId(String federationId) {
            return federationId(Output.of(federationId));
        }

        /**
         * @param location The location where the metastore federation should reside.
         * Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the metastore federation should reside.
         * Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetMetastoreFederationIamPolicyArgs build() {
            if ($.federationId == null) {
                throw new MissingRequiredPropertyException("GetMetastoreFederationIamPolicyArgs", "federationId");
            }
            return $;
        }
    }

}
