// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UnitKindOutputVariableMappingToArgs extends com.pulumi.resources.ResourceArgs {

    public static final UnitKindOutputVariableMappingToArgs Empty = new UnitKindOutputVariableMappingToArgs();

    /**
     * Alias of the dependency that the inputVariable will pass its value to
     * 
     */
    @Import(name="dependency", required=true)
    private Output<String> dependency;

    /**
     * @return Alias of the dependency that the inputVariable will pass its value to
     * 
     */
    public Output<String> dependency() {
        return this.dependency;
    }

    /**
     * Tells SaaS Runtime if this mapping should be used during lookup or not
     * 
     */
    @Import(name="ignoreForLookup")
    private @Nullable Output<Boolean> ignoreForLookup;

    /**
     * @return Tells SaaS Runtime if this mapping should be used during lookup or not
     * 
     */
    public Optional<Output<Boolean>> ignoreForLookup() {
        return Optional.ofNullable(this.ignoreForLookup);
    }

    /**
     * Name of the inputVariable on the dependency
     * 
     */
    @Import(name="inputVariable", required=true)
    private Output<String> inputVariable;

    /**
     * @return Name of the inputVariable on the dependency
     * 
     */
    public Output<String> inputVariable() {
        return this.inputVariable;
    }

    private UnitKindOutputVariableMappingToArgs() {}

    private UnitKindOutputVariableMappingToArgs(UnitKindOutputVariableMappingToArgs $) {
        this.dependency = $.dependency;
        this.ignoreForLookup = $.ignoreForLookup;
        this.inputVariable = $.inputVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UnitKindOutputVariableMappingToArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UnitKindOutputVariableMappingToArgs $;

        public Builder() {
            $ = new UnitKindOutputVariableMappingToArgs();
        }

        public Builder(UnitKindOutputVariableMappingToArgs defaults) {
            $ = new UnitKindOutputVariableMappingToArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependency Alias of the dependency that the inputVariable will pass its value to
         * 
         * @return builder
         * 
         */
        public Builder dependency(Output<String> dependency) {
            $.dependency = dependency;
            return this;
        }

        /**
         * @param dependency Alias of the dependency that the inputVariable will pass its value to
         * 
         * @return builder
         * 
         */
        public Builder dependency(String dependency) {
            return dependency(Output.of(dependency));
        }

        /**
         * @param ignoreForLookup Tells SaaS Runtime if this mapping should be used during lookup or not
         * 
         * @return builder
         * 
         */
        public Builder ignoreForLookup(@Nullable Output<Boolean> ignoreForLookup) {
            $.ignoreForLookup = ignoreForLookup;
            return this;
        }

        /**
         * @param ignoreForLookup Tells SaaS Runtime if this mapping should be used during lookup or not
         * 
         * @return builder
         * 
         */
        public Builder ignoreForLookup(Boolean ignoreForLookup) {
            return ignoreForLookup(Output.of(ignoreForLookup));
        }

        /**
         * @param inputVariable Name of the inputVariable on the dependency
         * 
         * @return builder
         * 
         */
        public Builder inputVariable(Output<String> inputVariable) {
            $.inputVariable = inputVariable;
            return this;
        }

        /**
         * @param inputVariable Name of the inputVariable on the dependency
         * 
         * @return builder
         * 
         */
        public Builder inputVariable(String inputVariable) {
            return inputVariable(Output.of(inputVariable));
        }

        public UnitKindOutputVariableMappingToArgs build() {
            if ($.dependency == null) {
                throw new MissingRequiredPropertyException("UnitKindOutputVariableMappingToArgs", "dependency");
            }
            if ($.inputVariable == null) {
                throw new MissingRequiredPropertyException("UnitKindOutputVariableMappingToArgs", "inputVariable");
            }
            return $;
        }
    }

}
