// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.chronicle.RetrohuntArgs;
import com.pulumi.gcp.chronicle.inputs.RetrohuntState;
import com.pulumi.gcp.chronicle.outputs.RetrohuntExecutionInterval;
import com.pulumi.gcp.chronicle.outputs.RetrohuntProcessInterval;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Retrohunt is an execution of a Rule over a time range in the past.
 * 
 * To get more information about Retrohunt, see:
 * 
 * * [API documentation](https://cloud.google.com/chronicle/docs/reference/rest/v1/projects.locations.instances.rules.retrohunts)
 * * How-to Guides
 *     * [Google SecOps Guides](https://cloud.google.com/chronicle/docs/secops/secops-overview)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Retrohunt can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}`
 * 
 * * `{{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
 * 
 * * `{{location}}/{{instance}}/{{rule}}/{{retrohunt}}`
 * 
 * When using the `pulumi import` command, Retrohunt can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/retrohunt:Retrohunt default projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/retrohunts/{{retrohunt}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{project}}/{{location}}/{{instance}}/{{rule}}/{{retrohunt}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:chronicle/retrohunt:Retrohunt default {{location}}/{{instance}}/{{rule}}/{{retrohunt}}
 * ```
 * 
 */
@ResourceType(type="gcp:chronicle/retrohunt:Retrohunt")
public class Retrohunt extends com.pulumi.resources.CustomResource {
    /**
     * The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     * 
     */
    @Export(name="RetrohuntId", refs={String.class}, tree="[0]")
    private Output<String> RetrohuntId;

    /**
     * @return The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     * 
     */
    public Output<String> RetrohuntId() {
        return this.RetrohuntId;
    }
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    @Export(name="executionIntervals", refs={List.class,RetrohuntExecutionInterval.class}, tree="[0,1]")
    private Output<List<RetrohuntExecutionInterval>> executionIntervals;

    /**
     * @return Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    public Output<List<RetrohuntExecutionInterval>> executionIntervals() {
        return this.executionIntervals;
    }
    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Export(name="instance", refs={String.class}, tree="[0]")
    private Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Output<String> instance() {
        return this.instance;
    }
    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id{@literal @}revision_id}.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id{@literal @}revision_id}.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    @Export(name="processInterval", refs={RetrohuntProcessInterval.class}, tree="[0]")
    private Output<RetrohuntProcessInterval> processInterval;

    /**
     * @return Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    public Output<RetrohuntProcessInterval> processInterval() {
        return this.processInterval;
    }
    /**
     * Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
     * 
     */
    @Export(name="progressPercentage", refs={Double.class}, tree="[0]")
    private Output<Double> progressPercentage;

    /**
     * @return Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
     * 
     */
    public Output<Double> progressPercentage() {
        return this.progressPercentage;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The Rule ID of the rule.
     * 
     */
    @Export(name="rule", refs={String.class}, tree="[0]")
    private Output<String> rule;

    /**
     * @return The Rule ID of the rule.
     * 
     */
    public Output<String> rule() {
        return this.rule;
    }
    /**
     * Output only. The state of the retrohunt.
     * Possible values:
     * RUNNING
     * DONE
     * CANCELLED
     * FAILED
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. The state of the retrohunt.
     * Possible values:
     * RUNNING
     * DONE
     * CANCELLED
     * FAILED
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Retrohunt(java.lang.String name) {
        this(name, RetrohuntArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Retrohunt(java.lang.String name, RetrohuntArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Retrohunt(java.lang.String name, RetrohuntArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/retrohunt:Retrohunt", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Retrohunt(java.lang.String name, Output<java.lang.String> id, @Nullable RetrohuntState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:chronicle/retrohunt:Retrohunt", name, state, makeResourceOptions(options, id), false);
    }

    private static RetrohuntArgs makeArgs(RetrohuntArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RetrohuntArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Retrohunt get(java.lang.String name, Output<java.lang.String> id, @Nullable RetrohuntState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Retrohunt(name, id, state, options);
    }
}
