// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ConnectionCryptoKeyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionCryptoKeyConfigArgs Empty = new ConnectionCryptoKeyConfigArgs();

    /**
     * Required. The name of the key which is used to encrypt/decrypt customer data. For key
     * in Cloud KMS, the key should be in the format of
     * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     * 
     */
    @Import(name="keyReference", required=true)
    private Output<String> keyReference;

    /**
     * @return Required. The name of the key which is used to encrypt/decrypt customer data. For key
     * in Cloud KMS, the key should be in the format of
     * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     * 
     */
    public Output<String> keyReference() {
        return this.keyReference;
    }

    private ConnectionCryptoKeyConfigArgs() {}

    private ConnectionCryptoKeyConfigArgs(ConnectionCryptoKeyConfigArgs $) {
        this.keyReference = $.keyReference;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionCryptoKeyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionCryptoKeyConfigArgs $;

        public Builder() {
            $ = new ConnectionCryptoKeyConfigArgs();
        }

        public Builder(ConnectionCryptoKeyConfigArgs defaults) {
            $ = new ConnectionCryptoKeyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyReference Required. The name of the key which is used to encrypt/decrypt customer data. For key
         * in Cloud KMS, the key should be in the format of
         * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
         * 
         * @return builder
         * 
         */
        public Builder keyReference(Output<String> keyReference) {
            $.keyReference = keyReference;
            return this;
        }

        /**
         * @param keyReference Required. The name of the key which is used to encrypt/decrypt customer data. For key
         * in Cloud KMS, the key should be in the format of
         * `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
         * 
         * @return builder
         * 
         */
        public Builder keyReference(String keyReference) {
            return keyReference(Output.of(keyReference));
        }

        public ConnectionCryptoKeyConfigArgs build() {
            if ($.keyReference == null) {
                throw new MissingRequiredPropertyException("ConnectionCryptoKeyConfigArgs", "keyReference");
            }
            return $;
        }
    }

}
