// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.secretmanager.outputs.GetSecretReplication;
import com.pulumi.gcp.secretmanager.outputs.GetSecretRotation;
import com.pulumi.gcp.secretmanager.outputs.GetSecretTopic;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecretResult {
    private Map<String,String> annotations;
    private String createTime;
    private Boolean deletionProtection;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    private String expireTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private List<GetSecretReplication> replications;
    private List<GetSecretRotation> rotations;
    private String secretId;
    private Map<String,String> tags;
    private List<GetSecretTopic> topics;
    private String ttl;
    private Map<String,String> versionAliases;
    private String versionDestroyTtl;

    private GetSecretResult() {}
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public String createTime() {
        return this.createTime;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetSecretReplication> replications() {
        return this.replications;
    }
    public List<GetSecretRotation> rotations() {
        return this.rotations;
    }
    public String secretId() {
        return this.secretId;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    public List<GetSecretTopic> topics() {
        return this.topics;
    }
    public String ttl() {
        return this.ttl;
    }
    public Map<String,String> versionAliases() {
        return this.versionAliases;
    }
    public String versionDestroyTtl() {
        return this.versionDestroyTtl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String createTime;
        private Boolean deletionProtection;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private String expireTime;
        private String id;
        private Map<String,String> labels;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private List<GetSecretReplication> replications;
        private List<GetSecretRotation> rotations;
        private String secretId;
        private Map<String,String> tags;
        private List<GetSecretTopic> topics;
        private String ttl;
        private Map<String,String> versionAliases;
        private String versionDestroyTtl;
        public Builder() {}
        public Builder(GetSecretResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.createTime = defaults.createTime;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.replications = defaults.replications;
    	      this.rotations = defaults.rotations;
    	      this.secretId = defaults.secretId;
    	      this.tags = defaults.tags;
    	      this.topics = defaults.topics;
    	      this.ttl = defaults.ttl;
    	      this.versionAliases = defaults.versionAliases;
    	      this.versionDestroyTtl = defaults.versionDestroyTtl;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder replications(List<GetSecretReplication> replications) {
            if (replications == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "replications");
            }
            this.replications = replications;
            return this;
        }
        public Builder replications(GetSecretReplication... replications) {
            return replications(List.of(replications));
        }
        @CustomType.Setter
        public Builder rotations(List<GetSecretRotation> rotations) {
            if (rotations == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "rotations");
            }
            this.rotations = rotations;
            return this;
        }
        public Builder rotations(GetSecretRotation... rotations) {
            return rotations(List.of(rotations));
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<GetSecretTopic> topics) {
            if (topics == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "topics");
            }
            this.topics = topics;
            return this;
        }
        public Builder topics(GetSecretTopic... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder ttl(String ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder versionAliases(Map<String,String> versionAliases) {
            if (versionAliases == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "versionAliases");
            }
            this.versionAliases = versionAliases;
            return this;
        }
        @CustomType.Setter
        public Builder versionDestroyTtl(String versionDestroyTtl) {
            if (versionDestroyTtl == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "versionDestroyTtl");
            }
            this.versionDestroyTtl = versionDestroyTtl;
            return this;
        }
        public GetSecretResult build() {
            final var _resultValue = new GetSecretResult();
            _resultValue.annotations = annotations;
            _resultValue.createTime = createTime;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.expireTime = expireTime;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.replications = replications;
            _resultValue.rotations = rotations;
            _resultValue.secretId = secretId;
            _resultValue.tags = tags;
            _resultValue.topics = topics;
            _resultValue.ttl = ttl;
            _resultValue.versionAliases = versionAliases;
            _resultValue.versionDestroyTtl = versionDestroyTtl;
            return _resultValue;
        }
    }
}
