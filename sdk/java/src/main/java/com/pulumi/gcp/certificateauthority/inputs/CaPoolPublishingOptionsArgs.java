// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CaPoolPublishingOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CaPoolPublishingOptionsArgs Empty = new CaPoolPublishingOptionsArgs();

    /**
     * Specifies the encoding format of each CertificateAuthority&#39;s CA
     * certificate and CRLs. If this is omitted, CA certificates and CRLs
     * will be published in PEM.
     * Possible values are: `PEM`, `DER`.
     * 
     */
    @Import(name="encodingFormat")
    private @Nullable Output<String> encodingFormat;

    /**
     * @return Specifies the encoding format of each CertificateAuthority&#39;s CA
     * certificate and CRLs. If this is omitted, CA certificates and CRLs
     * will be published in PEM.
     * Possible values are: `PEM`, `DER`.
     * 
     */
    public Optional<Output<String>> encodingFormat() {
        return Optional.ofNullable(this.encodingFormat);
    }

    /**
     * When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34;
     * X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
     * X.509 extension will not be written in issued certificates.
     * 
     */
    @Import(name="publishCaCert", required=true)
    private Output<Boolean> publishCaCert;

    /**
     * @return When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34;
     * X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
     * X.509 extension will not be written in issued certificates.
     * 
     */
    public Output<Boolean> publishCaCert() {
        return this.publishCaCert;
    }

    /**
     * When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension
     * in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
     * be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
     * also rebuilt shortly after a certificate is revoked.
     * 
     */
    @Import(name="publishCrl", required=true)
    private Output<Boolean> publishCrl;

    /**
     * @return When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension
     * in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
     * be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
     * also rebuilt shortly after a certificate is revoked.
     * 
     */
    public Output<Boolean> publishCrl() {
        return this.publishCrl;
    }

    private CaPoolPublishingOptionsArgs() {}

    private CaPoolPublishingOptionsArgs(CaPoolPublishingOptionsArgs $) {
        this.encodingFormat = $.encodingFormat;
        this.publishCaCert = $.publishCaCert;
        this.publishCrl = $.publishCrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CaPoolPublishingOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CaPoolPublishingOptionsArgs $;

        public Builder() {
            $ = new CaPoolPublishingOptionsArgs();
        }

        public Builder(CaPoolPublishingOptionsArgs defaults) {
            $ = new CaPoolPublishingOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encodingFormat Specifies the encoding format of each CertificateAuthority&#39;s CA
         * certificate and CRLs. If this is omitted, CA certificates and CRLs
         * will be published in PEM.
         * Possible values are: `PEM`, `DER`.
         * 
         * @return builder
         * 
         */
        public Builder encodingFormat(@Nullable Output<String> encodingFormat) {
            $.encodingFormat = encodingFormat;
            return this;
        }

        /**
         * @param encodingFormat Specifies the encoding format of each CertificateAuthority&#39;s CA
         * certificate and CRLs. If this is omitted, CA certificates and CRLs
         * will be published in PEM.
         * Possible values are: `PEM`, `DER`.
         * 
         * @return builder
         * 
         */
        public Builder encodingFormat(String encodingFormat) {
            return encodingFormat(Output.of(encodingFormat));
        }

        /**
         * @param publishCaCert When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34;
         * X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
         * X.509 extension will not be written in issued certificates.
         * 
         * @return builder
         * 
         */
        public Builder publishCaCert(Output<Boolean> publishCaCert) {
            $.publishCaCert = publishCaCert;
            return this;
        }

        /**
         * @param publishCaCert When true, publishes each CertificateAuthority&#39;s CA certificate and includes its URL in the &#34;Authority Information Access&#34;
         * X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
         * X.509 extension will not be written in issued certificates.
         * 
         * @return builder
         * 
         */
        public Builder publishCaCert(Boolean publishCaCert) {
            return publishCaCert(Output.of(publishCaCert));
        }

        /**
         * @param publishCrl When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension
         * in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
         * be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
         * also rebuilt shortly after a certificate is revoked.
         * 
         * @return builder
         * 
         */
        public Builder publishCrl(Output<Boolean> publishCrl) {
            $.publishCrl = publishCrl;
            return this;
        }

        /**
         * @param publishCrl When true, publishes each CertificateAuthority&#39;s CRL and includes its URL in the &#34;CRL Distribution Points&#34; X.509 extension
         * in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
         * be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
         * also rebuilt shortly after a certificate is revoked.
         * 
         * @return builder
         * 
         */
        public Builder publishCrl(Boolean publishCrl) {
            return publishCrl(Output.of(publishCrl));
        }

        public CaPoolPublishingOptionsArgs build() {
            $.publishCaCert = Objects.requireNonNull($.publishCaCert, "expected parameter 'publishCaCert' to be non-null");
            $.publishCrl = Objects.requireNonNull($.publishCrl, "expected parameter 'publishCrl' to be non-null");
            return $;
        }
    }

}
