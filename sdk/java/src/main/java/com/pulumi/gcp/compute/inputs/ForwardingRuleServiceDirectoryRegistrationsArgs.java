// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleServiceDirectoryRegistrationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleServiceDirectoryRegistrationsArgs Empty = new ForwardingRuleServiceDirectoryRegistrationsArgs();

    /**
     * Service Directory namespace to register the forwarding rule under.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Service Directory namespace to register the forwarding rule under.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Service Directory service to register the forwarding rule under.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Service Directory service to register the forwarding rule under.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    private ForwardingRuleServiceDirectoryRegistrationsArgs() {}

    private ForwardingRuleServiceDirectoryRegistrationsArgs(ForwardingRuleServiceDirectoryRegistrationsArgs $) {
        this.namespace = $.namespace;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleServiceDirectoryRegistrationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleServiceDirectoryRegistrationsArgs $;

        public Builder() {
            $ = new ForwardingRuleServiceDirectoryRegistrationsArgs();
        }

        public Builder(ForwardingRuleServiceDirectoryRegistrationsArgs defaults) {
            $ = new ForwardingRuleServiceDirectoryRegistrationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace Service Directory namespace to register the forwarding rule under.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Service Directory namespace to register the forwarding rule under.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param service Service Directory service to register the forwarding rule under.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Service Directory service to register the forwarding rule under.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ForwardingRuleServiceDirectoryRegistrationsArgs build() {
            return $;
        }
    }

}
