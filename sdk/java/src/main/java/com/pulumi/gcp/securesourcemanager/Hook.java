// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.securesourcemanager.HookArgs;
import com.pulumi.gcp.securesourcemanager.inputs.HookState;
import com.pulumi.gcp.securesourcemanager.outputs.HookPushOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Hook is a user-defined HTTP callback triggered by an event.
 * 
 * To get more information about Hook, see:
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Hook can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}`
 * 
 * * `{{project}}/{{location}}/{{repository_id}}/{{hook_id}}`
 * 
 * * `{{location}}/{{repository_id}}/{{hook_id}}`
 * 
 * * `{{hook_id}}`
 * 
 * When using the `pulumi import` command, Hook can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/hooks/{{hook_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default {{project}}/{{location}}/{{repository_id}}/{{hook_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default {{location}}/{{repository_id}}/{{hook_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/hook:Hook default {{hook_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:securesourcemanager/hook:Hook")
public class Hook extends com.pulumi.resources.CustomResource {
    /**
     * Create timestamp.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Create timestamp.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     * 
     */
    @Export(name="events", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> events;

    /**
     * @return The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     * 
     */
    public Output<List<String>> events() {
        return this.events;
    }
    /**
     * The ID for the Hook.
     * 
     */
    @Export(name="hookId", refs={String.class}, tree="[0]")
    private Output<String> hookId;

    /**
     * @return The ID for the Hook.
     * 
     */
    public Output<String> hookId() {
        return this.hookId;
    }
    /**
     * The location for the Repository.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the Repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * A unique identifier for a Hook. The name should be of the format:
     * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A unique identifier for a Hook. The name should be of the format:
     * `projects/{project}/locations/{location_id}/repositories/{repository_id}/hooks/{hook_id}`
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The trigger option for push events.
     * Structure is documented below.
     * 
     */
    @Export(name="pushOption", refs={HookPushOption.class}, tree="[0]")
    private Output<HookPushOption> pushOption;

    /**
     * @return The trigger option for push events.
     * Structure is documented below.
     * 
     */
    public Output<HookPushOption> pushOption() {
        return this.pushOption;
    }
    /**
     * The ID for the Repository.
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return The ID for the Repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }
    /**
     * The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Export(name="sensitiveQueryString", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sensitiveQueryString;

    /**
     * @return The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<Optional<String>> sensitiveQueryString() {
        return Codegen.optional(this.sensitiveQueryString);
    }
    /**
     * The target URI to which the payloads will be delivered.
     * 
     */
    @Export(name="targetUri", refs={String.class}, tree="[0]")
    private Output<String> targetUri;

    /**
     * @return The target URI to which the payloads will be delivered.
     * 
     */
    public Output<String> targetUri() {
        return this.targetUri;
    }
    /**
     * Unique identifier of the hook.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Unique identifier of the hook.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Update timestamp.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Update timestamp.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Hook(java.lang.String name) {
        this(name, HookArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Hook(java.lang.String name, HookArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Hook(java.lang.String name, HookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/hook:Hook", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Hook(java.lang.String name, Output<java.lang.String> id, @Nullable HookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/hook:Hook", name, state, makeResourceOptions(options, id), false);
    }

    private static HookArgs makeArgs(HookArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HookArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "sensitiveQueryString"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Hook get(java.lang.String name, Output<java.lang.String> id, @Nullable HookState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Hook(name, id, state, options);
    }
}
