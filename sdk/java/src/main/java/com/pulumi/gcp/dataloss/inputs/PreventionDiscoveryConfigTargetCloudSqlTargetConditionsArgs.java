// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs Empty = new PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs();

    /**
     * Database engines that should be profiled. Optional. Defaults to ALL_SUPPORTED_DATABASE_ENGINES if unspecified.
     * Each value may be one of: `ALL_SUPPORTED_DATABASE_ENGINES`, `MYSQL`, `POSTGRES`.
     * 
     */
    @Import(name="databaseEngines")
    private @Nullable Output<List<String>> databaseEngines;

    /**
     * @return Database engines that should be profiled. Optional. Defaults to ALL_SUPPORTED_DATABASE_ENGINES if unspecified.
     * Each value may be one of: `ALL_SUPPORTED_DATABASE_ENGINES`, `MYSQL`, `POSTGRES`.
     * 
     */
    public Optional<Output<List<String>>> databaseEngines() {
        return Optional.ofNullable(this.databaseEngines);
    }

    /**
     * Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
     * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
     * 
     */
    @Import(name="types")
    private @Nullable Output<List<String>> types;

    /**
     * @return Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
     * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
     * 
     */
    public Optional<Output<List<String>>> types() {
        return Optional.ofNullable(this.types);
    }

    private PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs() {}

    private PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs(PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs $) {
        this.databaseEngines = $.databaseEngines;
        this.types = $.types;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs();
        }

        public Builder(PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs defaults) {
            $ = new PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseEngines Database engines that should be profiled. Optional. Defaults to ALL_SUPPORTED_DATABASE_ENGINES if unspecified.
         * Each value may be one of: `ALL_SUPPORTED_DATABASE_ENGINES`, `MYSQL`, `POSTGRES`.
         * 
         * @return builder
         * 
         */
        public Builder databaseEngines(@Nullable Output<List<String>> databaseEngines) {
            $.databaseEngines = databaseEngines;
            return this;
        }

        /**
         * @param databaseEngines Database engines that should be profiled. Optional. Defaults to ALL_SUPPORTED_DATABASE_ENGINES if unspecified.
         * Each value may be one of: `ALL_SUPPORTED_DATABASE_ENGINES`, `MYSQL`, `POSTGRES`.
         * 
         * @return builder
         * 
         */
        public Builder databaseEngines(List<String> databaseEngines) {
            return databaseEngines(Output.of(databaseEngines));
        }

        /**
         * @param databaseEngines Database engines that should be profiled. Optional. Defaults to ALL_SUPPORTED_DATABASE_ENGINES if unspecified.
         * Each value may be one of: `ALL_SUPPORTED_DATABASE_ENGINES`, `MYSQL`, `POSTGRES`.
         * 
         * @return builder
         * 
         */
        public Builder databaseEngines(String... databaseEngines) {
            return databaseEngines(List.of(databaseEngines));
        }

        /**
         * @param types Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
         * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
         * 
         * @return builder
         * 
         */
        public Builder types(@Nullable Output<List<String>> types) {
            $.types = types;
            return this;
        }

        /**
         * @param types Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
         * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
         * 
         * @return builder
         * 
         */
        public Builder types(List<String> types) {
            return types(Output.of(types));
        }

        /**
         * @param types Data profiles will only be generated for the database resource types specified in this field. If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
         * Each value may be one of: `DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES`, `DATABASE_RESOURCE_TYPE_TABLE`.
         * 
         * @return builder
         * 
         */
        public Builder types(String... types) {
            return types(List.of(types));
        }

        public PreventionDiscoveryConfigTargetCloudSqlTargetConditionsArgs build() {
            return $;
        }
    }

}
