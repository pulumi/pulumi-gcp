// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTemplateSpecVolumeNfsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTemplateSpecVolumeNfsArgs Empty = new ServiceTemplateSpecVolumeNfsArgs();

    /**
     * Path exported by the NFS server
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Path exported by the NFS server
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * If true, mount the NFS volume as read only in all mounts. Defaults to false.
     * 
     * ***
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return If true, mount the NFS volume as read only in all mounts. Defaults to false.
     * 
     * ***
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * IP address or hostname of the NFS server
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return IP address or hostname of the NFS server
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    private ServiceTemplateSpecVolumeNfsArgs() {}

    private ServiceTemplateSpecVolumeNfsArgs(ServiceTemplateSpecVolumeNfsArgs $) {
        this.path = $.path;
        this.readOnly = $.readOnly;
        this.server = $.server;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTemplateSpecVolumeNfsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTemplateSpecVolumeNfsArgs $;

        public Builder() {
            $ = new ServiceTemplateSpecVolumeNfsArgs();
        }

        public Builder(ServiceTemplateSpecVolumeNfsArgs defaults) {
            $ = new ServiceTemplateSpecVolumeNfsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path Path exported by the NFS server
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path exported by the NFS server
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param readOnly If true, mount the NFS volume as read only in all mounts. Defaults to false.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly If true, mount the NFS volume as read only in all mounts. Defaults to false.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param server IP address or hostname of the NFS server
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server IP address or hostname of the NFS server
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        public ServiceTemplateSpecVolumeNfsArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("ServiceTemplateSpecVolumeNfsArgs", "path");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("ServiceTemplateSpecVolumeNfsArgs", "server");
            }
            return $;
        }
    }

}
