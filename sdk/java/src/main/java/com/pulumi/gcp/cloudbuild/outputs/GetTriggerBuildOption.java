// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudbuild.outputs.GetTriggerBuildOptionVolume;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTriggerBuildOption {
    private Integer diskSizeGb;
    private Boolean dynamicSubstitutions;
    private List<String> envs;
    private String logStreamingOption;
    private String logging;
    private String machineType;
    private String requestedVerifyOption;
    private List<String> secretEnvs;
    private List<String> sourceProvenanceHashes;
    private String substitutionOption;
    private List<GetTriggerBuildOptionVolume> volumes;
    private String workerPool;

    private GetTriggerBuildOption() {}
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    public Boolean dynamicSubstitutions() {
        return this.dynamicSubstitutions;
    }
    public List<String> envs() {
        return this.envs;
    }
    public String logStreamingOption() {
        return this.logStreamingOption;
    }
    public String logging() {
        return this.logging;
    }
    public String machineType() {
        return this.machineType;
    }
    public String requestedVerifyOption() {
        return this.requestedVerifyOption;
    }
    public List<String> secretEnvs() {
        return this.secretEnvs;
    }
    public List<String> sourceProvenanceHashes() {
        return this.sourceProvenanceHashes;
    }
    public String substitutionOption() {
        return this.substitutionOption;
    }
    public List<GetTriggerBuildOptionVolume> volumes() {
        return this.volumes;
    }
    public String workerPool() {
        return this.workerPool;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTriggerBuildOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer diskSizeGb;
        private Boolean dynamicSubstitutions;
        private List<String> envs;
        private String logStreamingOption;
        private String logging;
        private String machineType;
        private String requestedVerifyOption;
        private List<String> secretEnvs;
        private List<String> sourceProvenanceHashes;
        private String substitutionOption;
        private List<GetTriggerBuildOptionVolume> volumes;
        private String workerPool;
        public Builder() {}
        public Builder(GetTriggerBuildOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.dynamicSubstitutions = defaults.dynamicSubstitutions;
    	      this.envs = defaults.envs;
    	      this.logStreamingOption = defaults.logStreamingOption;
    	      this.logging = defaults.logging;
    	      this.machineType = defaults.machineType;
    	      this.requestedVerifyOption = defaults.requestedVerifyOption;
    	      this.secretEnvs = defaults.secretEnvs;
    	      this.sourceProvenanceHashes = defaults.sourceProvenanceHashes;
    	      this.substitutionOption = defaults.substitutionOption;
    	      this.volumes = defaults.volumes;
    	      this.workerPool = defaults.workerPool;
        }

        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicSubstitutions(Boolean dynamicSubstitutions) {
            if (dynamicSubstitutions == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "dynamicSubstitutions");
            }
            this.dynamicSubstitutions = dynamicSubstitutions;
            return this;
        }
        @CustomType.Setter
        public Builder envs(List<String> envs) {
            if (envs == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "envs");
            }
            this.envs = envs;
            return this;
        }
        public Builder envs(String... envs) {
            return envs(List.of(envs));
        }
        @CustomType.Setter
        public Builder logStreamingOption(String logStreamingOption) {
            if (logStreamingOption == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "logStreamingOption");
            }
            this.logStreamingOption = logStreamingOption;
            return this;
        }
        @CustomType.Setter
        public Builder logging(String logging) {
            if (logging == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "logging");
            }
            this.logging = logging;
            return this;
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            if (machineType == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "machineType");
            }
            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder requestedVerifyOption(String requestedVerifyOption) {
            if (requestedVerifyOption == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "requestedVerifyOption");
            }
            this.requestedVerifyOption = requestedVerifyOption;
            return this;
        }
        @CustomType.Setter
        public Builder secretEnvs(List<String> secretEnvs) {
            if (secretEnvs == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "secretEnvs");
            }
            this.secretEnvs = secretEnvs;
            return this;
        }
        public Builder secretEnvs(String... secretEnvs) {
            return secretEnvs(List.of(secretEnvs));
        }
        @CustomType.Setter
        public Builder sourceProvenanceHashes(List<String> sourceProvenanceHashes) {
            if (sourceProvenanceHashes == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "sourceProvenanceHashes");
            }
            this.sourceProvenanceHashes = sourceProvenanceHashes;
            return this;
        }
        public Builder sourceProvenanceHashes(String... sourceProvenanceHashes) {
            return sourceProvenanceHashes(List.of(sourceProvenanceHashes));
        }
        @CustomType.Setter
        public Builder substitutionOption(String substitutionOption) {
            if (substitutionOption == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "substitutionOption");
            }
            this.substitutionOption = substitutionOption;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetTriggerBuildOptionVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetTriggerBuildOptionVolume... volumes) {
            return volumes(List.of(volumes));
        }
        @CustomType.Setter
        public Builder workerPool(String workerPool) {
            if (workerPool == null) {
              throw new MissingRequiredPropertyException("GetTriggerBuildOption", "workerPool");
            }
            this.workerPool = workerPool;
            return this;
        }
        public GetTriggerBuildOption build() {
            final var _resultValue = new GetTriggerBuildOption();
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.dynamicSubstitutions = dynamicSubstitutions;
            _resultValue.envs = envs;
            _resultValue.logStreamingOption = logStreamingOption;
            _resultValue.logging = logging;
            _resultValue.machineType = machineType;
            _resultValue.requestedVerifyOption = requestedVerifyOption;
            _resultValue.secretEnvs = secretEnvs;
            _resultValue.sourceProvenanceHashes = sourceProvenanceHashes;
            _resultValue.substitutionOption = substitutionOption;
            _resultValue.volumes = volumes;
            _resultValue.workerPool = workerPool;
            return _resultValue;
        }
    }
}
