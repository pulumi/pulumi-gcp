// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkforcePoolProviderKeyKeyDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkforcePoolProviderKeyKeyDataArgs Empty = new WorkforcePoolProviderKeyKeyDataArgs();

    /**
     * (Output)
     * The format of the key.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return (Output)
     * The format of the key.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * (Output)
     * The key data. The format of the key is represented by the format field.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return (Output)
     * The key data. The format of the key is represented by the format field.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The specifications for the key.
     * Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`.
     * 
     */
    @Import(name="keySpec", required=true)
    private Output<String> keySpec;

    /**
     * @return The specifications for the key.
     * Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`.
     * 
     */
    public Output<String> keySpec() {
        return this.keySpec;
    }

    /**
     * (Output)
     * Latest timestamp when this key is valid. Attempts to use this key after this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Import(name="notAfterTime")
    private @Nullable Output<String> notAfterTime;

    /**
     * @return (Output)
     * Latest timestamp when this key is valid. Attempts to use this key after this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<Output<String>> notAfterTime() {
        return Optional.ofNullable(this.notAfterTime);
    }

    /**
     * (Output)
     * Earliest timestamp when this key is valid. Attempts to use this key before this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    @Import(name="notBeforeTime")
    private @Nullable Output<String> notBeforeTime;

    /**
     * @return (Output)
     * Earliest timestamp when this key is valid. Attempts to use this key before this time will fail.
     * Only present if the key data represents a X.509 certificate.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
     * Offsets other than &#34;Z&#34; are also accepted.
     * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
     * 
     */
    public Optional<Output<String>> notBeforeTime() {
        return Optional.ofNullable(this.notBeforeTime);
    }

    private WorkforcePoolProviderKeyKeyDataArgs() {}

    private WorkforcePoolProviderKeyKeyDataArgs(WorkforcePoolProviderKeyKeyDataArgs $) {
        this.format = $.format;
        this.key = $.key;
        this.keySpec = $.keySpec;
        this.notAfterTime = $.notAfterTime;
        this.notBeforeTime = $.notBeforeTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkforcePoolProviderKeyKeyDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkforcePoolProviderKeyKeyDataArgs $;

        public Builder() {
            $ = new WorkforcePoolProviderKeyKeyDataArgs();
        }

        public Builder(WorkforcePoolProviderKeyKeyDataArgs defaults) {
            $ = new WorkforcePoolProviderKeyKeyDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param format (Output)
         * The format of the key.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format (Output)
         * The format of the key.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param key (Output)
         * The key data. The format of the key is represented by the format field.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key (Output)
         * The key data. The format of the key is represented by the format field.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param keySpec The specifications for the key.
         * Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`.
         * 
         * @return builder
         * 
         */
        public Builder keySpec(Output<String> keySpec) {
            $.keySpec = keySpec;
            return this;
        }

        /**
         * @param keySpec The specifications for the key.
         * Possible values are: `RSA_2048`, `RSA_3072`, `RSA_4096`.
         * 
         * @return builder
         * 
         */
        public Builder keySpec(String keySpec) {
            return keySpec(Output.of(keySpec));
        }

        /**
         * @param notAfterTime (Output)
         * Latest timestamp when this key is valid. Attempts to use this key after this time will fail.
         * Only present if the key data represents a X.509 certificate.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
         * Offsets other than &#34;Z&#34; are also accepted.
         * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notAfterTime(@Nullable Output<String> notAfterTime) {
            $.notAfterTime = notAfterTime;
            return this;
        }

        /**
         * @param notAfterTime (Output)
         * Latest timestamp when this key is valid. Attempts to use this key after this time will fail.
         * Only present if the key data represents a X.509 certificate.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
         * Offsets other than &#34;Z&#34; are also accepted.
         * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notAfterTime(String notAfterTime) {
            return notAfterTime(Output.of(notAfterTime));
        }

        /**
         * @param notBeforeTime (Output)
         * Earliest timestamp when this key is valid. Attempts to use this key before this time will fail.
         * Only present if the key data represents a X.509 certificate.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
         * Offsets other than &#34;Z&#34; are also accepted.
         * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeTime(@Nullable Output<String> notBeforeTime) {
            $.notBeforeTime = notBeforeTime;
            return this;
        }

        /**
         * @param notBeforeTime (Output)
         * Earliest timestamp when this key is valid. Attempts to use this key before this time will fail.
         * Only present if the key data represents a X.509 certificate.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits.
         * Offsets other than &#34;Z&#34; are also accepted.
         * Examples: &#34;2014-10-02T15:01:23Z&#34;, &#34;2014-10-02T15:01:23.045123456Z&#34; or &#34;2014-10-02T15:01:23+05:30&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeTime(String notBeforeTime) {
            return notBeforeTime(Output.of(notBeforeTime));
        }

        public WorkforcePoolProviderKeyKeyDataArgs build() {
            if ($.keySpec == null) {
                throw new MissingRequiredPropertyException("WorkforcePoolProviderKeyKeyDataArgs", "keySpec");
            }
            return $;
        }
    }

}
