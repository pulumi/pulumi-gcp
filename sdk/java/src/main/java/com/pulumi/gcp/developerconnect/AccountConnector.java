// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.developerconnect.AccountConnectorArgs;
import com.pulumi.gcp.developerconnect.inputs.AccountConnectorState;
import com.pulumi.gcp.developerconnect.outputs.AccountConnectorProviderOauthConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Description
 * 
 * ## Example Usage
 * 
 * ### Developer Connect Account Connector Github
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.AccountConnector;
 * import com.pulumi.gcp.developerconnect.AccountConnectorArgs;
 * import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_account_connector = new AccountConnector("my-account-connector", AccountConnectorArgs.builder()
 *             .location("us-central1")
 *             .accountConnectorId("tf-test-ac")
 *             .providerOauthConfig(AccountConnectorProviderOauthConfigArgs.builder()
 *                 .systemProviderId("GITHUB")
 *                 .scopes("repo")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Account Connector Gitlab
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.AccountConnector;
 * import com.pulumi.gcp.developerconnect.AccountConnectorArgs;
 * import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_account_connector = new AccountConnector("my-account-connector", AccountConnectorArgs.builder()
 *             .location("us-central1")
 *             .accountConnectorId("tf-test-ac")
 *             .providerOauthConfig(AccountConnectorProviderOauthConfigArgs.builder()
 *                 .systemProviderId("GITLAB")
 *                 .scopes("api")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Account Connector Google
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.AccountConnector;
 * import com.pulumi.gcp.developerconnect.AccountConnectorArgs;
 * import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_account_connector = new AccountConnector("my-account-connector", AccountConnectorArgs.builder()
 *             .location("us-central1")
 *             .accountConnectorId("tf-test-ac")
 *             .providerOauthConfig(AccountConnectorProviderOauthConfigArgs.builder()
 *                 .systemProviderId("GOOGLE")
 *                 .scopes("https://www.googleapis.com/auth/drive.readonly")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Account Connector Sentry
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.AccountConnector;
 * import com.pulumi.gcp.developerconnect.AccountConnectorArgs;
 * import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_account_connector = new AccountConnector("my-account-connector", AccountConnectorArgs.builder()
 *             .location("us-central1")
 *             .accountConnectorId("tf-test-ac")
 *             .providerOauthConfig(AccountConnectorProviderOauthConfigArgs.builder()
 *                 .systemProviderId("SENTRY")
 *                 .scopes("org:read")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Developer Connect Account Connector Rovo
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.developerconnect.AccountConnector;
 * import com.pulumi.gcp.developerconnect.AccountConnectorArgs;
 * import com.pulumi.gcp.developerconnect.inputs.AccountConnectorProviderOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_account_connector = new AccountConnector("my-account-connector", AccountConnectorArgs.builder()
 *             .location("us-central1")
 *             .accountConnectorId("tf-test-ac")
 *             .providerOauthConfig(AccountConnectorProviderOauthConfigArgs.builder()
 *                 .systemProviderId("ROVO")
 *                 .scopes("rovo")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * AccountConnector can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}`
 * 
 * * `{{project}}/{{location}}/{{account_connector_id}}`
 * 
 * * `{{location}}/{{account_connector_id}}`
 * 
 * When using the `pulumi import` command, AccountConnector can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{project}}/{{location}}/{{account_connector_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:developerconnect/accountConnector:AccountConnector default {{location}}/{{account_connector_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:developerconnect/accountConnector:AccountConnector")
public class AccountConnector extends com.pulumi.resources.CustomResource {
    /**
     * Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector&#39;s resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     * 
     * ***
     * 
     */
    @Export(name="accountConnectorId", refs={String.class}, tree="[0]")
    private Output<String> accountConnectorId;

    /**
     * @return Required. The ID to use for the AccountConnector, which will become the final
     * component of the AccountConnector&#39;s resource name. Its format should adhere
     * to https://google.aip.dev/122#resource-id-segments Names must be unique
     * per-project per-location.
     * 
     * ***
     * 
     */
    public Output<String> accountConnectorId() {
        return this.accountConnectorId;
    }
    /**
     * Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Optional. Allows users to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Output only. The timestamp when the userConnection was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The timestamp when the userConnection was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the resource.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name of the userConnection, in the format
     * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of the userConnection, in the format
     * `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Output only. Start OAuth flow by clicking on this URL.
     * 
     */
    @Export(name="oauthStartUri", refs={String.class}, tree="[0]")
    private Output<String> oauthStartUri;

    /**
     * @return Output only. Start OAuth flow by clicking on this URL.
     * 
     */
    public Output<String> oauthStartUri() {
        return this.oauthStartUri;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     * 
     */
    @Export(name="providerOauthConfig", refs={AccountConnectorProviderOauthConfig.class}, tree="[0]")
    private Output</* @Nullable */ AccountConnectorProviderOauthConfig> providerOauthConfig;

    /**
     * @return ProviderOAuthConfig is the OAuth config for a provider.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AccountConnectorProviderOauthConfig>> providerOauthConfig() {
        return Codegen.optional(this.providerOauthConfig);
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. The timestamp when the userConnection was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The timestamp when the userConnection was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AccountConnector(java.lang.String name) {
        this(name, AccountConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AccountConnector(java.lang.String name, AccountConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AccountConnector(java.lang.String name, AccountConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:developerconnect/accountConnector:AccountConnector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AccountConnector(java.lang.String name, Output<java.lang.String> id, @Nullable AccountConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:developerconnect/accountConnector:AccountConnector", name, state, makeResourceOptions(options, id), false);
    }

    private static AccountConnectorArgs makeArgs(AccountConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AccountConnectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AccountConnector get(java.lang.String name, Output<java.lang.String> id, @Nullable AccountConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AccountConnector(name, id, state, options);
    }
}
