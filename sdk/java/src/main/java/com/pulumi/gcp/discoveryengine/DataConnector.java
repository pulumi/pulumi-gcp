// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.discoveryengine.DataConnectorArgs;
import com.pulumi.gcp.discoveryengine.inputs.DataConnectorState;
import com.pulumi.gcp.discoveryengine.outputs.DataConnectorEntity;
import com.pulumi.gcp.discoveryengine.outputs.DataConnectorError;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * DataConnector manages the connection to external data sources for all data stores grouped
 * under a Collection. It&#39;s a singleton resource of Collection. The initialization is only
 * supported through DataConnectorService.SetUpDataConnector method, which will create a new
 * Collection and initialize its DataConnector.
 * 
 * To get more information about DataConnector, see:
 * 
 * * [API documentation](https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1alpha#dataconnectorservice)
 * * How-to Guides
 *     * [Introduction](https://cloud.google.com/agentspace/docs/introduction-to-connectors-and-data-stores)
 * 
 * ## Example Usage
 * 
 * ### Discoveryengine Dataconnector Jira Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.discoveryengine.DataConnector;
 * import com.pulumi.gcp.discoveryengine.DataConnectorArgs;
 * import com.pulumi.gcp.discoveryengine.inputs.DataConnectorEntityArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var jira_basic = new DataConnector("jira-basic", DataConnectorArgs.builder()
 *             .location("global")
 *             .collectionId("collection-id")
 *             .collectionDisplayName("tf-test-dataconnector-jira")
 *             .dataSource("jira")
 *             .params(Map.ofEntries(
 *                 Map.entry("instance_id", "33db20a3-dc45-4305-a505-d70b68599840"),
 *                 Map.entry("instance_uri", "https://vaissptbots1.atlassian.net/"),
 *                 Map.entry("client_secret", "client-secret"),
 *                 Map.entry("client_id", "client-id"),
 *                 Map.entry("refresh_token", "fill-in-the-blank")
 *             ))
 *             .refreshInterval("86400s")
 *             .entities(            
 *                 DataConnectorEntityArgs.builder()
 *                     .entityName("project")
 *                     .build(),
 *                 DataConnectorEntityArgs.builder()
 *                     .entityName("issue")
 *                     .build(),
 *                 DataConnectorEntityArgs.builder()
 *                     .entityName("attachment")
 *                     .build(),
 *                 DataConnectorEntityArgs.builder()
 *                     .entityName("comment")
 *                     .build(),
 *                 DataConnectorEntityArgs.builder()
 *                     .entityName("worklog")
 *                     .build())
 *             .staticIpEnabled(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * DataConnector can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector`
 * 
 * * `{{project}}/{{location}}/{{collection_id}}`
 * 
 * * `{{location}}/{{collection_id}}`
 * 
 * When using the `pulumi import` command, DataConnector can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/dataConnector:DataConnector default projects/{{project}}/locations/{{location}}/collections/{{collection_id}}/dataConnector
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/dataConnector:DataConnector default {{project}}/{{location}}/{{collection_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:discoveryengine/dataConnector:DataConnector default {{location}}/{{collection_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:discoveryengine/dataConnector:DataConnector")
public class DataConnector extends com.pulumi.resources.CustomResource {
    /**
     * State of the action connector. This reflects whether the action connector
     * is initializing, active or has encountered errors. The possible value can be:
     * &#39;STATE_UNSPECIFIED&#39;, &#39;CREATING&#39;, &#39;ACTIVE&#39;, &#39;FAILED&#39;, &#39;RUNNING&#39;, &#39;WARNING&#39;,
     * &#39;INITIALIZATION_FAILED&#39;, &#39;UPDATING&#39;.
     * 
     */
    @Export(name="actionState", refs={String.class}, tree="[0]")
    private Output<String> actionState;

    /**
     * @return State of the action connector. This reflects whether the action connector
     * is initializing, active or has encountered errors. The possible value can be:
     * &#39;STATE_UNSPECIFIED&#39;, &#39;CREATING&#39;, &#39;ACTIVE&#39;, &#39;FAILED&#39;, &#39;RUNNING&#39;, &#39;WARNING&#39;,
     * &#39;INITIALIZATION_FAILED&#39;, &#39;UPDATING&#39;.
     * 
     */
    public Output<String> actionState() {
        return this.actionState;
    }
    /**
     * User actions that must be completed before the connector can start syncing data.
     * The possible values can be: &#39;ALLOWLIST_STATIC_IP&#39;, &#39;ALLOWLIST_IN_SERVICE_ATTACHMENT&#39;.
     * 
     */
    @Export(name="blockingReasons", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> blockingReasons;

    /**
     * @return User actions that must be completed before the connector can start syncing data.
     * The possible values can be: &#39;ALLOWLIST_STATIC_IP&#39;, &#39;ALLOWLIST_IN_SERVICE_ATTACHMENT&#39;.
     * 
     */
    public Output<List<String>> blockingReasons() {
        return this.blockingReasons;
    }
    /**
     * The display name of the Collection.
     * Should be human readable, used to display collections in the Console
     * Dashboard. UTF-8 encoded string with limit of 1024 characters.
     * 
     */
    @Export(name="collectionDisplayName", refs={String.class}, tree="[0]")
    private Output<String> collectionDisplayName;

    /**
     * @return The display name of the Collection.
     * Should be human readable, used to display collections in the Console
     * Dashboard. UTF-8 encoded string with limit of 1024 characters.
     * 
     */
    public Output<String> collectionDisplayName() {
        return this.collectionDisplayName;
    }
    /**
     * The ID to use for the Collection, which will become the final component
     * of the Collection&#39;s resource name. A new Collection is created as
     * part of the DataConnector setup. DataConnector is a singleton
     * resource under Collection, managing all DataStores of the Collection.
     * This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
     * standard with a length limit of 63 characters. Otherwise, an
     * INVALID_ARGUMENT error is returned.
     * 
     */
    @Export(name="collectionId", refs={String.class}, tree="[0]")
    private Output<String> collectionId;

    /**
     * @return The ID to use for the Collection, which will become the final component
     * of the Collection&#39;s resource name. A new Collection is created as
     * part of the DataConnector setup. DataConnector is a singleton
     * resource under Collection, managing all DataStores of the Collection.
     * This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
     * standard with a length limit of 63 characters. Otherwise, an
     * INVALID_ARGUMENT error is returned.
     * 
     */
    public Output<String> collectionId() {
        return this.collectionId;
    }
    /**
     * The type of connector. Each source can only map to one type.
     * For example, salesforce, confluence and jira have THIRD_PARTY connector
     * type. It is not mutable once set by system. The possible value can be:
     * &#39;CONNECTOR_TYPE_UNSPECIFIED&#39;, &#39;THIRD_PARTY&#39;, &#39;GCP_FHIR&#39;, &#39;BIG_QUERY&#39;,
     * &#39;GCS&#39;, &#39;GOOGLE_MAIL&#39;, &#39;GOOGLE_CALENDAR&#39;, &#39;GOOGLE_DRIVE&#39;,
     * &#39;NATIVE_CLOUD_IDENTITY&#39;, &#39;THIRD_PARTY_FEDERATED&#39;, &#39;THIRD_PARTY_EUA&#39;, &#39;GCNV&#39;.
     * 
     */
    @Export(name="connectorType", refs={String.class}, tree="[0]")
    private Output<String> connectorType;

    /**
     * @return The type of connector. Each source can only map to one type.
     * For example, salesforce, confluence and jira have THIRD_PARTY connector
     * type. It is not mutable once set by system. The possible value can be:
     * &#39;CONNECTOR_TYPE_UNSPECIFIED&#39;, &#39;THIRD_PARTY&#39;, &#39;GCP_FHIR&#39;, &#39;BIG_QUERY&#39;,
     * &#39;GCS&#39;, &#39;GOOGLE_MAIL&#39;, &#39;GOOGLE_CALENDAR&#39;, &#39;GOOGLE_DRIVE&#39;,
     * &#39;NATIVE_CLOUD_IDENTITY&#39;, &#39;THIRD_PARTY_FEDERATED&#39;, &#39;THIRD_PARTY_EUA&#39;, &#39;GCNV&#39;.
     * 
     */
    public Output<String> connectorType() {
        return this.connectorType;
    }
    /**
     * Timestamp when the DataConnector was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Timestamp when the DataConnector was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The name of the data source.
     * Supported values: `salesforce`, `jira`, `confluence`, `bigquery`.
     * 
     */
    @Export(name="dataSource", refs={String.class}, tree="[0]")
    private Output<String> dataSource;

    /**
     * @return The name of the data source.
     * Supported values: `salesforce`, `jira`, `confluence`, `bigquery`.
     * 
     */
    public Output<String> dataSource() {
        return this.dataSource;
    }
    /**
     * List of entities from the connected data source to ingest.
     * Structure is documented below.
     * 
     */
    @Export(name="entities", refs={List.class,DataConnectorEntity.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DataConnectorEntity>> entities;

    /**
     * @return List of entities from the connected data source to ingest.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<DataConnectorEntity>>> entities() {
        return Codegen.optional(this.entities);
    }
    /**
     * The errors from initialization or from the latest connector run.
     * Structure is documented below.
     * 
     */
    @Export(name="errors", refs={List.class,DataConnectorError.class}, tree="[0,1]")
    private Output<List<DataConnectorError>> errors;

    /**
     * @return The errors from initialization or from the latest connector run.
     * Structure is documented below.
     * 
     */
    public Output<List<DataConnectorError>> errors() {
        return this.errors;
    }
    /**
     * Params needed to access the source in the format of json string.
     * 
     */
    @Export(name="jsonParams", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> jsonParams;

    /**
     * @return Params needed to access the source in the format of json string.
     * 
     */
    public Output<Optional<String>> jsonParams() {
        return Codegen.optional(this.jsonParams);
    }
    /**
     * The KMS key to be used to protect the DataStores managed by this connector.
     * Must be set for requests that need to comply with CMEK Org Policy
     * protections.
     * If this field is set and processed successfully, the DataStores created by
     * this connector will be protected by the KMS key.
     * 
     */
    @Export(name="kmsKeyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKeyName;

    /**
     * @return The KMS key to be used to protect the DataStores managed by this connector.
     * Must be set for requests that need to comply with CMEK Org Policy
     * protections.
     * If this field is set and processed successfully, the DataStores created by
     * this connector will be protected by the KMS key.
     * 
     */
    public Output<Optional<String>> kmsKeyName() {
        return Codegen.optional(this.kmsKeyName);
    }
    /**
     * For periodic connectors only, the last time a data sync was completed.
     * 
     */
    @Export(name="lastSyncTime", refs={String.class}, tree="[0]")
    private Output<String> lastSyncTime;

    /**
     * @return For periodic connectors only, the last time a data sync was completed.
     * 
     */
    public Output<String> lastSyncTime() {
        return this.lastSyncTime;
    }
    /**
     * The most recent timestamp when this [DataConnector][] was paused,
     * affecting all functionalities such as data synchronization.
     * Pausing a connector has the following effects:
     * - All functionalities, including data synchronization, are halted.
     * - Any ongoing data synchronization job will be canceled.
     * - No future data synchronization runs will be scheduled nor can be
     *   triggered.
     * 
     */
    @Export(name="latestPauseTime", refs={String.class}, tree="[0]")
    private Output<String> latestPauseTime;

    /**
     * @return The most recent timestamp when this [DataConnector][] was paused,
     * affecting all functionalities such as data synchronization.
     * Pausing a connector has the following effects:
     * - All functionalities, including data synchronization, are halted.
     * - Any ongoing data synchronization job will be canceled.
     * - No future data synchronization runs will be scheduled nor can be
     *   triggered.
     * 
     */
    public Output<String> latestPauseTime() {
        return this.latestPauseTime;
    }
    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The full resource name of the Data Connector.
     * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataConnector`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The full resource name of the Data Connector.
     * Format: `projects/*&#47;locations/*&#47;collections/*&#47;dataConnector`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Params needed to access the source in the format of String-to-String (Key, Value) pairs.
     * 
     */
    @Export(name="params", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> params;

    /**
     * @return Params needed to access the source in the format of String-to-String (Key, Value) pairs.
     * 
     */
    public Output<Optional<Map<String,String>>> params() {
        return Codegen.optional(this.params);
    }
    /**
     * The tenant project ID associated with private connectivity connectors.
     * This project must be allowlisted by in order for the connector to function.
     * 
     */
    @Export(name="privateConnectivityProjectId", refs={String.class}, tree="[0]")
    private Output<String> privateConnectivityProjectId;

    /**
     * @return The tenant project ID associated with private connectivity connectors.
     * This project must be allowlisted by in order for the connector to function.
     * 
     */
    public Output<String> privateConnectivityProjectId() {
        return this.privateConnectivityProjectId;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The real-time sync state. The possible values can be:
     * &#39;STATE_UNSPECIFIED&#39;, &#39;CREATING&#39;, &#39;ACTIVE&#39;, &#39;FAILED&#39;, &#39;RUNNING&#39;, &#39;WARNING&#39;,
     * &#39;INITIALIZATION_FAILED&#39;, &#39;UPDATING&#39;.
     * 
     */
    @Export(name="realtimeState", refs={String.class}, tree="[0]")
    private Output<String> realtimeState;

    /**
     * @return The real-time sync state. The possible values can be:
     * &#39;STATE_UNSPECIFIED&#39;, &#39;CREATING&#39;, &#39;ACTIVE&#39;, &#39;FAILED&#39;, &#39;RUNNING&#39;, &#39;WARNING&#39;,
     * &#39;INITIALIZATION_FAILED&#39;, &#39;UPDATING&#39;.
     * 
     */
    public Output<String> realtimeState() {
        return this.realtimeState;
    }
    /**
     * The refresh interval for data sync. If duration is set to 0, the data will
     * be synced in real time. The streaming feature is not supported yet. The
     * minimum is 30 minutes and maximum is 7 days. When the refresh interval is
     * set to the same value as the incremental refresh interval, incremental
     * sync will be disabled.
     * 
     */
    @Export(name="refreshInterval", refs={String.class}, tree="[0]")
    private Output<String> refreshInterval;

    /**
     * @return The refresh interval for data sync. If duration is set to 0, the data will
     * be synced in real time. The streaming feature is not supported yet. The
     * minimum is 30 minutes and maximum is 7 days. When the refresh interval is
     * set to the same value as the incremental refresh interval, incremental
     * sync will be disabled.
     * 
     */
    public Output<String> refreshInterval() {
        return this.refreshInterval;
    }
    /**
     * The state of connector. The possible value can be:
     * &#39;STATE_UNSPECIFIED&#39;, &#39;CREATING&#39;, &#39;ACTIVE&#39;, &#39;FAILED&#39;, &#39;RUNNING&#39;, &#39;WARNING&#39;,
     * &#39;INITIALIZATION_FAILED&#39;, &#39;UPDATING&#39;.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of connector. The possible value can be:
     * &#39;STATE_UNSPECIFIED&#39;, &#39;CREATING&#39;, &#39;ACTIVE&#39;, &#39;FAILED&#39;, &#39;RUNNING&#39;, &#39;WARNING&#39;,
     * &#39;INITIALIZATION_FAILED&#39;, &#39;UPDATING&#39;.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The static IP addresses used by this connector.
     * 
     */
    @Export(name="staticIpAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> staticIpAddresses;

    /**
     * @return The static IP addresses used by this connector.
     * 
     */
    public Output<List<String>> staticIpAddresses() {
        return this.staticIpAddresses;
    }
    /**
     * Whether customer has enabled static IP addresses for this connector.
     * 
     */
    @Export(name="staticIpEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> staticIpEnabled;

    /**
     * @return Whether customer has enabled static IP addresses for this connector.
     * 
     */
    public Output<Optional<Boolean>> staticIpEnabled() {
        return Codegen.optional(this.staticIpEnabled);
    }
    /**
     * Timestamp when the DataConnector was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Timestamp when the DataConnector was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataConnector(java.lang.String name) {
        this(name, DataConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataConnector(java.lang.String name, DataConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataConnector(java.lang.String name, DataConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:discoveryengine/dataConnector:DataConnector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DataConnector(java.lang.String name, Output<java.lang.String> id, @Nullable DataConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:discoveryengine/dataConnector:DataConnector", name, state, makeResourceOptions(options, id), false);
    }

    private static DataConnectorArgs makeArgs(DataConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DataConnectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataConnector get(java.lang.String name, Output<java.lang.String> id, @Nullable DataConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataConnector(name, id, state, options);
    }
}
