// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupVaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupVaultArgs Empty = new BackupVaultArgs();

    /**
     * Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
     * Default value is `WITHIN_ORGANIZATION`.
     * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
     * 
     */
    @Import(name="accessRestriction")
    private @Nullable Output<String> accessRestriction;

    /**
     * @return Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
     * Default value is `WITHIN_ORGANIZATION`.
     * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
     * 
     */
    public Optional<Output<String>> accessRestriction() {
        return Optional.ofNullable(this.accessRestriction);
    }

    /**
     * Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
     * 
     */
    @Import(name="allowMissing")
    private @Nullable Output<Boolean> allowMissing;

    /**
     * @return Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
     * 
     */
    public Optional<Output<Boolean>> allowMissing() {
        return Optional.ofNullable(this.allowMissing);
    }

    /**
     * Optional. User annotations. See https://google.aip.dev/128#annotations
     * Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. User annotations. See https://google.aip.dev/128#annotations
     * Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
     * 
     */
    @Import(name="backupMinimumEnforcedRetentionDuration", required=true)
    private Output<String> backupMinimumEnforcedRetentionDuration;

    /**
     * @return Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
     * 
     */
    public Output<String> backupMinimumEnforcedRetentionDuration() {
        return this.backupMinimumEnforcedRetentionDuration;
    }

    /**
     * Required. ID of the requesting object.
     * 
     */
    @Import(name="backupVaultId", required=true)
    private Output<String> backupVaultId;

    /**
     * @return Required. ID of the requesting object.
     * 
     */
    public Output<String> backupVaultId() {
        return this.backupVaultId;
    }

    /**
     * Optional. The description of the BackupVault instance (2048 characters or less).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. The description of the BackupVault instance (2048 characters or less).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. Time after which the BackupVault resource is locked.
     * 
     */
    @Import(name="effectiveTime")
    private @Nullable Output<String> effectiveTime;

    /**
     * @return Optional. Time after which the BackupVault resource is locked.
     * 
     */
    public Optional<Output<String>> effectiveTime() {
        return Optional.ofNullable(this.effectiveTime);
    }

    /**
     * (Optional, Deprecated)
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     * &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
     * 
     * @deprecated
     * `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
     * 
     */
    @Deprecated /* `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead. */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return (Optional, Deprecated)
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     * &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
     * 
     * @deprecated
     * `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
     * 
     */
    @Deprecated /* `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead. */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * If set, allow update to extend the minimum enforced retention for backup vault. This overrides
     * the restriction against conflicting retention periods. This conflict may occur when the
     * expiration schedule defined by the associated backup plan is shorter than the minimum
     * retention set by the backup vault.
     * 
     */
    @Import(name="forceUpdate")
    private @Nullable Output<Boolean> forceUpdate;

    /**
     * @return If set, allow update to extend the minimum enforced retention for backup vault. This overrides
     * the restriction against conflicting retention periods. This conflict may occur when the
     * expiration schedule defined by the associated backup plan is shorter than the minimum
     * retention set by the backup vault.
     * 
     */
    public Optional<Output<Boolean>> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }

    /**
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     */
    @Import(name="ignoreBackupPlanReferences")
    private @Nullable Output<Boolean> ignoreBackupPlanReferences;

    /**
     * @return If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     */
    public Optional<Output<Boolean>> ignoreBackupPlanReferences() {
        return Optional.ofNullable(this.ignoreBackupPlanReferences);
    }

    /**
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * 
     */
    @Import(name="ignoreInactiveDatasources")
    private @Nullable Output<Boolean> ignoreInactiveDatasources;

    /**
     * @return If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * 
     */
    public Optional<Output<Boolean>> ignoreInactiveDatasources() {
        return Optional.ofNullable(this.ignoreInactiveDatasources);
    }

    /**
     * Optional. Resource labels to represent user provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Resource labels to represent user provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The GCP location for the backup vault.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The GCP location for the backup vault.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private BackupVaultArgs() {}

    private BackupVaultArgs(BackupVaultArgs $) {
        this.accessRestriction = $.accessRestriction;
        this.allowMissing = $.allowMissing;
        this.annotations = $.annotations;
        this.backupMinimumEnforcedRetentionDuration = $.backupMinimumEnforcedRetentionDuration;
        this.backupVaultId = $.backupVaultId;
        this.description = $.description;
        this.effectiveTime = $.effectiveTime;
        this.forceDelete = $.forceDelete;
        this.forceUpdate = $.forceUpdate;
        this.ignoreBackupPlanReferences = $.ignoreBackupPlanReferences;
        this.ignoreInactiveDatasources = $.ignoreInactiveDatasources;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupVaultArgs $;

        public Builder() {
            $ = new BackupVaultArgs();
        }

        public Builder(BackupVaultArgs defaults) {
            $ = new BackupVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessRestriction Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
         * Default value is `WITHIN_ORGANIZATION`.
         * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
         * 
         * @return builder
         * 
         */
        public Builder accessRestriction(@Nullable Output<String> accessRestriction) {
            $.accessRestriction = accessRestriction;
            return this;
        }

        /**
         * @param accessRestriction Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
         * Default value is `WITHIN_ORGANIZATION`.
         * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
         * 
         * @return builder
         * 
         */
        public Builder accessRestriction(String accessRestriction) {
            return accessRestriction(Output.of(accessRestriction));
        }

        /**
         * @param allowMissing Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
         * 
         * @return builder
         * 
         */
        public Builder allowMissing(@Nullable Output<Boolean> allowMissing) {
            $.allowMissing = allowMissing;
            return this;
        }

        /**
         * @param allowMissing Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
         * 
         * @return builder
         * 
         */
        public Builder allowMissing(Boolean allowMissing) {
            return allowMissing(Output.of(allowMissing));
        }

        /**
         * @param annotations Optional. User annotations. See https://google.aip.dev/128#annotations
         * Stores small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. User annotations. See https://google.aip.dev/128#annotations
         * Stores small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param backupMinimumEnforcedRetentionDuration Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
         * 
         * @return builder
         * 
         */
        public Builder backupMinimumEnforcedRetentionDuration(Output<String> backupMinimumEnforcedRetentionDuration) {
            $.backupMinimumEnforcedRetentionDuration = backupMinimumEnforcedRetentionDuration;
            return this;
        }

        /**
         * @param backupMinimumEnforcedRetentionDuration Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
         * 
         * @return builder
         * 
         */
        public Builder backupMinimumEnforcedRetentionDuration(String backupMinimumEnforcedRetentionDuration) {
            return backupMinimumEnforcedRetentionDuration(Output.of(backupMinimumEnforcedRetentionDuration));
        }

        /**
         * @param backupVaultId Required. ID of the requesting object.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultId(Output<String> backupVaultId) {
            $.backupVaultId = backupVaultId;
            return this;
        }

        /**
         * @param backupVaultId Required. ID of the requesting object.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultId(String backupVaultId) {
            return backupVaultId(Output.of(backupVaultId));
        }

        /**
         * @param description Optional. The description of the BackupVault instance (2048 characters or less).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. The description of the BackupVault instance (2048 characters or less).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveTime Optional. Time after which the BackupVault resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTime(@Nullable Output<String> effectiveTime) {
            $.effectiveTime = effectiveTime;
            return this;
        }

        /**
         * @param effectiveTime Optional. Time after which the BackupVault resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTime(String effectiveTime) {
            return effectiveTime(Output.of(effectiveTime));
        }

        /**
         * @param forceDelete (Optional, Deprecated)
         * If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
         * 
         */
        @Deprecated /* `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead. */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete (Optional, Deprecated)
         * If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * &gt; **Warning:** `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead.
         * 
         */
        @Deprecated /* `force_delete` is deprecated and will be removed in a future major release. Use `ignore_inactive_datasources` instead. */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param forceUpdate If set, allow update to extend the minimum enforced retention for backup vault. This overrides
         * the restriction against conflicting retention periods. This conflict may occur when the
         * expiration schedule defined by the associated backup plan is shorter than the minimum
         * retention set by the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(@Nullable Output<Boolean> forceUpdate) {
            $.forceUpdate = forceUpdate;
            return this;
        }

        /**
         * @param forceUpdate If set, allow update to extend the minimum enforced retention for backup vault. This overrides
         * the restriction against conflicting retention periods. This conflict may occur when the
         * expiration schedule defined by the associated backup plan is shorter than the minimum
         * retention set by the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(Boolean forceUpdate) {
            return forceUpdate(Output.of(forceUpdate));
        }

        /**
         * @param ignoreBackupPlanReferences If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * @return builder
         * 
         */
        public Builder ignoreBackupPlanReferences(@Nullable Output<Boolean> ignoreBackupPlanReferences) {
            $.ignoreBackupPlanReferences = ignoreBackupPlanReferences;
            return this;
        }

        /**
         * @param ignoreBackupPlanReferences If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * @return builder
         * 
         */
        public Builder ignoreBackupPlanReferences(Boolean ignoreBackupPlanReferences) {
            return ignoreBackupPlanReferences(Output.of(ignoreBackupPlanReferences));
        }

        /**
         * @param ignoreInactiveDatasources If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * 
         * @return builder
         * 
         */
        public Builder ignoreInactiveDatasources(@Nullable Output<Boolean> ignoreInactiveDatasources) {
            $.ignoreInactiveDatasources = ignoreInactiveDatasources;
            return this;
        }

        /**
         * @param ignoreInactiveDatasources If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * 
         * @return builder
         * 
         */
        public Builder ignoreInactiveDatasources(Boolean ignoreInactiveDatasources) {
            return ignoreInactiveDatasources(Output.of(ignoreInactiveDatasources));
        }

        /**
         * @param labels Optional. Resource labels to represent user provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Resource labels to represent user provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The GCP location for the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The GCP location for the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public BackupVaultArgs build() {
            if ($.backupMinimumEnforcedRetentionDuration == null) {
                throw new MissingRequiredPropertyException("BackupVaultArgs", "backupMinimumEnforcedRetentionDuration");
            }
            if ($.backupVaultId == null) {
                throw new MissingRequiredPropertyException("BackupVaultArgs", "backupVaultId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("BackupVaultArgs", "location");
            }
            return $;
        }
    }

}
