// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod {
    /**
     * @return Defines grace period for the imagefs.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    private @Nullable String imagefsAvailable;
    /**
     * @return Defines grace period for the imagefs.inodesFree soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    private @Nullable String imagefsInodesFree;
    /**
     * @return Defines grace period for the memory.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`, such as `&#34;30s&#34;`, `&#34;1m30s&#34;`, `&#34;2.5m&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;, &#34;h&#34;.
     * 
     */
    private @Nullable String memoryAvailable;
    /**
     * @return Defines grace period for the nodefs.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    private @Nullable String nodefsAvailable;
    /**
     * @return Defines grace period for the nodefs.inodesFree soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    private @Nullable String nodefsInodesFree;
    /**
     * @return Defines grace period for the pid.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    private @Nullable String pidAvailable;

    private ClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod() {}
    /**
     * @return Defines grace period for the imagefs.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    public Optional<String> imagefsAvailable() {
        return Optional.ofNullable(this.imagefsAvailable);
    }
    /**
     * @return Defines grace period for the imagefs.inodesFree soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    public Optional<String> imagefsInodesFree() {
        return Optional.ofNullable(this.imagefsInodesFree);
    }
    /**
     * @return Defines grace period for the memory.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`, such as `&#34;30s&#34;`, `&#34;1m30s&#34;`, `&#34;2.5m&#34;`. Valid time units are &#34;ns&#34;, &#34;us&#34; (or &#34;µs&#34;), &#34;ms&#34;, &#34;s&#34;, &#34;m&#34;, &#34;h&#34;.
     * 
     */
    public Optional<String> memoryAvailable() {
        return Optional.ofNullable(this.memoryAvailable);
    }
    /**
     * @return Defines grace period for the nodefs.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    public Optional<String> nodefsAvailable() {
        return Optional.ofNullable(this.nodefsAvailable);
    }
    /**
     * @return Defines grace period for the nodefs.inodesFree soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    public Optional<String> nodefsInodesFree() {
        return Optional.ofNullable(this.nodefsInodesFree);
    }
    /**
     * @return Defines grace period for the pid.available soft eviction threshold. The value must be a positive duration string no more than `&#34;5m&#34;`.
     * 
     */
    public Optional<String> pidAvailable() {
        return Optional.ofNullable(this.pidAvailable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String imagefsAvailable;
        private @Nullable String imagefsInodesFree;
        private @Nullable String memoryAvailable;
        private @Nullable String nodefsAvailable;
        private @Nullable String nodefsInodesFree;
        private @Nullable String pidAvailable;
        public Builder() {}
        public Builder(ClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imagefsAvailable = defaults.imagefsAvailable;
    	      this.imagefsInodesFree = defaults.imagefsInodesFree;
    	      this.memoryAvailable = defaults.memoryAvailable;
    	      this.nodefsAvailable = defaults.nodefsAvailable;
    	      this.nodefsInodesFree = defaults.nodefsInodesFree;
    	      this.pidAvailable = defaults.pidAvailable;
        }

        @CustomType.Setter
        public Builder imagefsAvailable(@Nullable String imagefsAvailable) {

            this.imagefsAvailable = imagefsAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder imagefsInodesFree(@Nullable String imagefsInodesFree) {

            this.imagefsInodesFree = imagefsInodesFree;
            return this;
        }
        @CustomType.Setter
        public Builder memoryAvailable(@Nullable String memoryAvailable) {

            this.memoryAvailable = memoryAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder nodefsAvailable(@Nullable String nodefsAvailable) {

            this.nodefsAvailable = nodefsAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder nodefsInodesFree(@Nullable String nodefsInodesFree) {

            this.nodefsInodesFree = nodefsInodesFree;
            return this;
        }
        @CustomType.Setter
        public Builder pidAvailable(@Nullable String pidAvailable) {

            this.pidAvailable = pidAvailable;
            return this;
        }
        public ClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod build() {
            final var _resultValue = new ClusterNodePoolNodeConfigKubeletConfigEvictionSoftGracePeriod();
            _resultValue.imagefsAvailable = imagefsAvailable;
            _resultValue.imagefsInodesFree = imagefsInodesFree;
            _resultValue.memoryAvailable = memoryAvailable;
            _resultValue.nodefsAvailable = nodefsAvailable;
            _resultValue.nodefsInodesFree = nodefsInodesFree;
            _resultValue.pidAvailable = pidAvailable;
            return _resultValue;
        }
    }
}
