// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.bigtable.outputs.InstanceClusterAutoscalingConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceCluster {
    /**
     * @return [Autoscaling](https://cloud.google.com/bigtable/docs/autoscaling#parameters) config for the cluster, contains the following arguments:
     * 
     */
    private @Nullable InstanceClusterAutoscalingConfig autoscalingConfig;
    /**
     * @return The ID of the Cloud Bigtable cluster. Must be 6-30 characters and must only contain hyphens, lowercase letters and numbers.
     * 
     */
    private String clusterId;
    /**
     * @return Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster.
     * 
     * &gt; **Note**: Removing the field entirely from the config will cause the provider to default to the backend value.
     * 
     * !&gt; **Warning**: Modifying this field will cause the provider to delete/recreate the entire resource.
     * 
     * !&gt; **Warning:** Modifying the `storage_type`, `zone` or `kms_key_name` of an existing cluster (by
     * `cluster_id`) will cause the provider to delete/recreate the entire
     * `gcp.bigtable.Instance` resource. If these values are changing, use a new
     * `cluster_id`.
     * 
     */
    private @Nullable String kmsKeyName;
    /**
     * @return The number of nodes in the cluster.
     * If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.
     * 
     */
    private @Nullable Integer numNodes;
    /**
     * @return The storage type to use. One of `&#34;SSD&#34;` or
     * `&#34;HDD&#34;`. Defaults to `&#34;SSD&#34;`.
     * 
     */
    private @Nullable String storageType;
    /**
     * @return The zone to create the Cloud Bigtable cluster in. If it not
     * specified, the provider zone is used. Each cluster must have a different zone in the same region. Zones that support
     * Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
     * 
     */
    private @Nullable String zone;

    private InstanceCluster() {}
    /**
     * @return [Autoscaling](https://cloud.google.com/bigtable/docs/autoscaling#parameters) config for the cluster, contains the following arguments:
     * 
     */
    public Optional<InstanceClusterAutoscalingConfig> autoscalingConfig() {
        return Optional.ofNullable(this.autoscalingConfig);
    }
    /**
     * @return The ID of the Cloud Bigtable cluster. Must be 6-30 characters and must only contain hyphens, lowercase letters and numbers.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster.
     * 
     * &gt; **Note**: Removing the field entirely from the config will cause the provider to default to the backend value.
     * 
     * !&gt; **Warning**: Modifying this field will cause the provider to delete/recreate the entire resource.
     * 
     * !&gt; **Warning:** Modifying the `storage_type`, `zone` or `kms_key_name` of an existing cluster (by
     * `cluster_id`) will cause the provider to delete/recreate the entire
     * `gcp.bigtable.Instance` resource. If these values are changing, use a new
     * `cluster_id`.
     * 
     */
    public Optional<String> kmsKeyName() {
        return Optional.ofNullable(this.kmsKeyName);
    }
    /**
     * @return The number of nodes in the cluster.
     * If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.
     * 
     */
    public Optional<Integer> numNodes() {
        return Optional.ofNullable(this.numNodes);
    }
    /**
     * @return The storage type to use. One of `&#34;SSD&#34;` or
     * `&#34;HDD&#34;`. Defaults to `&#34;SSD&#34;`.
     * 
     */
    public Optional<String> storageType() {
        return Optional.ofNullable(this.storageType);
    }
    /**
     * @return The zone to create the Cloud Bigtable cluster in. If it not
     * specified, the provider zone is used. Each cluster must have a different zone in the same region. Zones that support
     * Bigtable instances are noted on the [Cloud Bigtable locations page](https://cloud.google.com/bigtable/docs/locations).
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable InstanceClusterAutoscalingConfig autoscalingConfig;
        private String clusterId;
        private @Nullable String kmsKeyName;
        private @Nullable Integer numNodes;
        private @Nullable String storageType;
        private @Nullable String zone;
        public Builder() {}
        public Builder(InstanceCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingConfig = defaults.autoscalingConfig;
    	      this.clusterId = defaults.clusterId;
    	      this.kmsKeyName = defaults.kmsKeyName;
    	      this.numNodes = defaults.numNodes;
    	      this.storageType = defaults.storageType;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder autoscalingConfig(@Nullable InstanceClusterAutoscalingConfig autoscalingConfig) {
            this.autoscalingConfig = autoscalingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyName(@Nullable String kmsKeyName) {
            this.kmsKeyName = kmsKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder numNodes(@Nullable Integer numNodes) {
            this.numNodes = numNodes;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(@Nullable String storageType) {
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }
        public InstanceCluster build() {
            final var o = new InstanceCluster();
            o.autoscalingConfig = autoscalingConfig;
            o.clusterId = clusterId;
            o.kmsKeyName = kmsKeyName;
            o.numNodes = numNodes;
            o.storageType = storageType;
            o.zone = zone;
            return o;
        }
    }
}
