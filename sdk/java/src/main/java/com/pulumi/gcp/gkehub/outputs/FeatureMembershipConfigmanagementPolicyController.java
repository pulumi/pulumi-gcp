// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.gkehub.outputs.FeatureMembershipConfigmanagementPolicyControllerMonitoring;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FeatureMembershipConfigmanagementPolicyController {
    /**
     * @return Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    private final @Nullable String auditIntervalSeconds;
    /**
     * @return Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * @return The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    private final @Nullable List<String> exemptableNamespaces;
    /**
     * @return Logs all denies and dry run failures.
     * 
     */
    private final @Nullable Boolean logDeniesEnabled;
    /**
     * @return Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\&#34;cloudmonitoring\&#34;, \&#34;prometheus\&#34;]. Default: [\&#34;cloudmonitoring\&#34;, \&#34;prometheus\&#34;]
     * 
     */
    private final @Nullable FeatureMembershipConfigmanagementPolicyControllerMonitoring monitoring;
    /**
     * @return Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
     * 
     */
    private final @Nullable Boolean mutationEnabled;
    /**
     * @return Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    private final @Nullable Boolean referentialRulesEnabled;
    /**
     * @return Installs the default template library along with Policy Controller.
     * 
     */
    private final @Nullable Boolean templateLibraryInstalled;

    @CustomType.Constructor
    private FeatureMembershipConfigmanagementPolicyController(
        @CustomType.Parameter("auditIntervalSeconds") @Nullable String auditIntervalSeconds,
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("exemptableNamespaces") @Nullable List<String> exemptableNamespaces,
        @CustomType.Parameter("logDeniesEnabled") @Nullable Boolean logDeniesEnabled,
        @CustomType.Parameter("monitoring") @Nullable FeatureMembershipConfigmanagementPolicyControllerMonitoring monitoring,
        @CustomType.Parameter("mutationEnabled") @Nullable Boolean mutationEnabled,
        @CustomType.Parameter("referentialRulesEnabled") @Nullable Boolean referentialRulesEnabled,
        @CustomType.Parameter("templateLibraryInstalled") @Nullable Boolean templateLibraryInstalled) {
        this.auditIntervalSeconds = auditIntervalSeconds;
        this.enabled = enabled;
        this.exemptableNamespaces = exemptableNamespaces;
        this.logDeniesEnabled = logDeniesEnabled;
        this.monitoring = monitoring;
        this.mutationEnabled = mutationEnabled;
        this.referentialRulesEnabled = referentialRulesEnabled;
        this.templateLibraryInstalled = templateLibraryInstalled;
    }

    /**
     * @return Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     * 
     */
    public Optional<String> auditIntervalSeconds() {
        return Optional.ofNullable(this.auditIntervalSeconds);
    }
    /**
     * @return Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     * 
     */
    public List<String> exemptableNamespaces() {
        return this.exemptableNamespaces == null ? List.of() : this.exemptableNamespaces;
    }
    /**
     * @return Logs all denies and dry run failures.
     * 
     */
    public Optional<Boolean> logDeniesEnabled() {
        return Optional.ofNullable(this.logDeniesEnabled);
    }
    /**
     * @return Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\&#34;cloudmonitoring\&#34;, \&#34;prometheus\&#34;]. Default: [\&#34;cloudmonitoring\&#34;, \&#34;prometheus\&#34;]
     * 
     */
    public Optional<FeatureMembershipConfigmanagementPolicyControllerMonitoring> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }
    /**
     * @return Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
     * 
     */
    public Optional<Boolean> mutationEnabled() {
        return Optional.ofNullable(this.mutationEnabled);
    }
    /**
     * @return Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     * 
     */
    public Optional<Boolean> referentialRulesEnabled() {
        return Optional.ofNullable(this.referentialRulesEnabled);
    }
    /**
     * @return Installs the default template library along with Policy Controller.
     * 
     */
    public Optional<Boolean> templateLibraryInstalled() {
        return Optional.ofNullable(this.templateLibraryInstalled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureMembershipConfigmanagementPolicyController defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String auditIntervalSeconds;
        private @Nullable Boolean enabled;
        private @Nullable List<String> exemptableNamespaces;
        private @Nullable Boolean logDeniesEnabled;
        private @Nullable FeatureMembershipConfigmanagementPolicyControllerMonitoring monitoring;
        private @Nullable Boolean mutationEnabled;
        private @Nullable Boolean referentialRulesEnabled;
        private @Nullable Boolean templateLibraryInstalled;

        public Builder() {
    	      // Empty
        }

        public Builder(FeatureMembershipConfigmanagementPolicyController defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditIntervalSeconds = defaults.auditIntervalSeconds;
    	      this.enabled = defaults.enabled;
    	      this.exemptableNamespaces = defaults.exemptableNamespaces;
    	      this.logDeniesEnabled = defaults.logDeniesEnabled;
    	      this.monitoring = defaults.monitoring;
    	      this.mutationEnabled = defaults.mutationEnabled;
    	      this.referentialRulesEnabled = defaults.referentialRulesEnabled;
    	      this.templateLibraryInstalled = defaults.templateLibraryInstalled;
        }

        public Builder auditIntervalSeconds(@Nullable String auditIntervalSeconds) {
            this.auditIntervalSeconds = auditIntervalSeconds;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder exemptableNamespaces(@Nullable List<String> exemptableNamespaces) {
            this.exemptableNamespaces = exemptableNamespaces;
            return this;
        }
        public Builder exemptableNamespaces(String... exemptableNamespaces) {
            return exemptableNamespaces(List.of(exemptableNamespaces));
        }
        public Builder logDeniesEnabled(@Nullable Boolean logDeniesEnabled) {
            this.logDeniesEnabled = logDeniesEnabled;
            return this;
        }
        public Builder monitoring(@Nullable FeatureMembershipConfigmanagementPolicyControllerMonitoring monitoring) {
            this.monitoring = monitoring;
            return this;
        }
        public Builder mutationEnabled(@Nullable Boolean mutationEnabled) {
            this.mutationEnabled = mutationEnabled;
            return this;
        }
        public Builder referentialRulesEnabled(@Nullable Boolean referentialRulesEnabled) {
            this.referentialRulesEnabled = referentialRulesEnabled;
            return this;
        }
        public Builder templateLibraryInstalled(@Nullable Boolean templateLibraryInstalled) {
            this.templateLibraryInstalled = templateLibraryInstalled;
            return this;
        }        public FeatureMembershipConfigmanagementPolicyController build() {
            return new FeatureMembershipConfigmanagementPolicyController(auditIntervalSeconds, enabled, exemptableNamespaces, logDeniesEnabled, monitoring, mutationEnabled, referentialRulesEnabled, templateLibraryInstalled);
        }
    }
}
