// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobLoadParquetOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobLoadParquetOptionsArgs Empty = new JobLoadParquetOptionsArgs();

    /**
     * If sourceFormat is set to PARQUET, indicates whether to use schema inference specifically for Parquet LIST logical type.
     * 
     */
    @Import(name="enableListInference")
    private @Nullable Output<Boolean> enableListInference;

    /**
     * @return If sourceFormat is set to PARQUET, indicates whether to use schema inference specifically for Parquet LIST logical type.
     * 
     */
    public Optional<Output<Boolean>> enableListInference() {
        return Optional.ofNullable(this.enableListInference);
    }

    /**
     * If sourceFormat is set to PARQUET, indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
     * 
     */
    @Import(name="enumAsString")
    private @Nullable Output<Boolean> enumAsString;

    /**
     * @return If sourceFormat is set to PARQUET, indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
     * 
     */
    public Optional<Output<Boolean>> enumAsString() {
        return Optional.ofNullable(this.enumAsString);
    }

    private JobLoadParquetOptionsArgs() {}

    private JobLoadParquetOptionsArgs(JobLoadParquetOptionsArgs $) {
        this.enableListInference = $.enableListInference;
        this.enumAsString = $.enumAsString;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobLoadParquetOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobLoadParquetOptionsArgs $;

        public Builder() {
            $ = new JobLoadParquetOptionsArgs();
        }

        public Builder(JobLoadParquetOptionsArgs defaults) {
            $ = new JobLoadParquetOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableListInference If sourceFormat is set to PARQUET, indicates whether to use schema inference specifically for Parquet LIST logical type.
         * 
         * @return builder
         * 
         */
        public Builder enableListInference(@Nullable Output<Boolean> enableListInference) {
            $.enableListInference = enableListInference;
            return this;
        }

        /**
         * @param enableListInference If sourceFormat is set to PARQUET, indicates whether to use schema inference specifically for Parquet LIST logical type.
         * 
         * @return builder
         * 
         */
        public Builder enableListInference(Boolean enableListInference) {
            return enableListInference(Output.of(enableListInference));
        }

        /**
         * @param enumAsString If sourceFormat is set to PARQUET, indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
         * 
         * @return builder
         * 
         */
        public Builder enumAsString(@Nullable Output<Boolean> enumAsString) {
            $.enumAsString = enumAsString;
            return this;
        }

        /**
         * @param enumAsString If sourceFormat is set to PARQUET, indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
         * 
         * @return builder
         * 
         */
        public Builder enumAsString(Boolean enumAsString) {
            return enumAsString(Output.of(enumAsString));
        }

        public JobLoadParquetOptionsArgs build() {
            return $;
        }
    }

}
