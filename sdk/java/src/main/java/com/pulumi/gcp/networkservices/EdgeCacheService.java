// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkservices.EdgeCacheServiceArgs;
import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceState;
import com.pulumi.gcp.networkservices.outputs.EdgeCacheServiceLogConfig;
import com.pulumi.gcp.networkservices.outputs.EdgeCacheServiceRouting;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * EdgeCacheService defines the IP addresses, protocols, security policies, cache policies and routing configuration.
 * 
 * &gt; **Warning:** These resources require allow-listing to use, and are not openly available to all Cloud customers. Engage with your Cloud account team to discuss how to onboard.
 * 
 * ## Example Usage
 * 
 * ### Network Services Edge Cache Service Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheOrigin;
 * import com.pulumi.gcp.networkservices.EdgeCacheOriginArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheOriginTimeoutArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheService;
 * import com.pulumi.gcp.networkservices.EdgeCacheServiceArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dest = new Bucket("dest", BucketArgs.builder()
 *             .name("my-bucket")
 *             .location("US")
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var instance = new EdgeCacheOrigin("instance", EdgeCacheOriginArgs.builder()
 *             .name("my-origin")
 *             .originAddress(dest.url())
 *             .description("The default bucket for media edge test")
 *             .maxAttempts(2)
 *             .timeout(EdgeCacheOriginTimeoutArgs.builder()
 *                 .connectTimeout("10s")
 *                 .build())
 *             .build());
 * 
 *         var instanceEdgeCacheService = new EdgeCacheService("instanceEdgeCacheService", EdgeCacheServiceArgs.builder()
 *             .name("my-service")
 *             .description("some description")
 *             .routing(EdgeCacheServiceRoutingArgs.builder()
 *                 .hostRules(EdgeCacheServiceRoutingHostRuleArgs.builder()
 *                     .description("host rule description")
 *                     .hosts("sslcert.tf-test.club")
 *                     .pathMatcher("routes")
 *                     .build())
 *                 .pathMatchers(EdgeCacheServiceRoutingPathMatcherArgs.builder()
 *                     .name("routes")
 *                     .routeRules(EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                         .description("a route rule to match against")
 *                         .priority("1")
 *                         .matchRules(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .prefixMatch("/")
 *                             .build())
 *                         .origin(instance.name())
 *                         .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                             .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                 .cacheMode("CACHE_ALL_STATIC")
 *                                 .defaultTtl("3600s")
 *                                 .build())
 *                             .build())
 *                         .headerAction(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs.builder()
 *                             .responseHeaderToAdds(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs.builder()
 *                                 .headerName("x-cache-status")
 *                                 .headerValue("{cdn_cache_status}")
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Services Edge Cache Service Advanced
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheOrigin;
 * import com.pulumi.gcp.networkservices.EdgeCacheOriginArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheOriginTimeoutArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheService;
 * import com.pulumi.gcp.networkservices.EdgeCacheServiceArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceLogConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var dest = new Bucket("dest", BucketArgs.builder()
 *             .name("my-bucket")
 *             .location("US")
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var google = new EdgeCacheOrigin("google", EdgeCacheOriginArgs.builder()
 *             .name("origin-google")
 *             .originAddress("google.com")
 *             .description("The default bucket for media edge test")
 *             .maxAttempts(2)
 *             .timeout(EdgeCacheOriginTimeoutArgs.builder()
 *                 .connectTimeout("10s")
 *                 .build())
 *             .build());
 * 
 *         var instance = new EdgeCacheOrigin("instance", EdgeCacheOriginArgs.builder()
 *             .name("my-origin")
 *             .originAddress(dest.url())
 *             .description("The default bucket for media edge test")
 *             .maxAttempts(2)
 *             .timeout(EdgeCacheOriginTimeoutArgs.builder()
 *                 .connectTimeout("10s")
 *                 .build())
 *             .build());
 * 
 *         var instanceEdgeCacheService = new EdgeCacheService("instanceEdgeCacheService", EdgeCacheServiceArgs.builder()
 *             .name("my-service")
 *             .description("some description")
 *             .disableQuic(true)
 *             .disableHttp2(true)
 *             .labels(Map.of("a", "b"))
 *             .routing(EdgeCacheServiceRoutingArgs.builder()
 *                 .hostRules(                
 *                     EdgeCacheServiceRoutingHostRuleArgs.builder()
 *                         .description("host rule description")
 *                         .hosts("sslcert.tf-test.club")
 *                         .pathMatcher("routes")
 *                         .build(),
 *                     EdgeCacheServiceRoutingHostRuleArgs.builder()
 *                         .description("host rule2")
 *                         .hosts("sslcert.tf-test2.club")
 *                         .pathMatcher("routes")
 *                         .build(),
 *                     EdgeCacheServiceRoutingHostRuleArgs.builder()
 *                         .description("host rule3")
 *                         .hosts("sslcert.tf-test3.club")
 *                         .pathMatcher("routesAdvanced")
 *                         .build())
 *                 .pathMatchers(                
 *                     EdgeCacheServiceRoutingPathMatcherArgs.builder()
 *                         .name("routes")
 *                         .routeRules(EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                             .description("a route rule to match against")
 *                             .priority("1")
 *                             .matchRules(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                 .prefixMatch("/")
 *                                 .build())
 *                             .origin(instance.name())
 *                             .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                                 .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                     .cacheMode("CACHE_ALL_STATIC")
 *                                     .defaultTtl("3600s")
 *                                     .build())
 *                                 .build())
 *                             .headerAction(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs.builder()
 *                                 .responseHeaderToAdds(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs.builder()
 *                                     .headerName("x-cache-status")
 *                                     .headerValue("{cdn_cache_status}")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     EdgeCacheServiceRoutingPathMatcherArgs.builder()
 *                         .name("routesAdvanced")
 *                         .description("an advanced ruleset")
 *                         .routeRules(                        
 *                             EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                                 .description("an advanced route rule to match against")
 *                                 .priority("1")
 *                                 .matchRules(                                
 *                                     EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                         .prefixMatch("/potato/")
 *                                         .queryParameterMatches(                                        
 *                                             EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                                                 .name("debug")
 *                                                 .presentMatch(true)
 *                                                 .build(),
 *                                             EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                                                 .name("state")
 *                                                 .exactMatch("debug")
 *                                                 .build())
 *                                         .build(),
 *                                     EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                         .fullPathMatch("/apple")
 *                                         .build())
 *                                 .headerAction(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs.builder()
 *                                     .requestHeaderToAdds(                                    
 *                                         EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs.builder()
 *                                             .headerName("debug")
 *                                             .headerValue("true")
 *                                             .replace(true)
 *                                             .build(),
 *                                         EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs.builder()
 *                                             .headerName("potato")
 *                                             .headerValue("plant")
 *                                             .build())
 *                                     .responseHeaderToAdds(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs.builder()
 *                                         .headerName("potato")
 *                                         .headerValue("plant")
 *                                         .replace(true)
 *                                         .build())
 *                                     .requestHeaderToRemoves(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs.builder()
 *                                         .headerName("prod")
 *                                         .build())
 *                                     .responseHeaderToRemoves(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs.builder()
 *                                         .headerName("prod")
 *                                         .build())
 *                                     .build())
 *                                 .origin(instance.name())
 *                                 .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                                     .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                         .cacheMode("CACHE_ALL_STATIC")
 *                                         .defaultTtl("3800s")
 *                                         .clientTtl("3600s")
 *                                         .maxTtl("9000s")
 *                                         .cacheKeyPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs.builder()
 *                                             .includeProtocol(true)
 *                                             .excludeHost(true)
 *                                             .includedQueryParameters(                                            
 *                                                 "apple",
 *                                                 "dev",
 *                                                 "santa",
 *                                                 "claus")
 *                                             .includedHeaderNames("banana")
 *                                             .includedCookieNames("orange")
 *                                             .build())
 *                                         .negativeCaching(true)
 *                                         .signedRequestMode("DISABLED")
 *                                         .negativeCachingPolicy(Map.of("500", "3000s"))
 *                                         .build())
 *                                     .urlRewrite(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteArgs.builder()
 *                                         .pathPrefixRewrite("/dev")
 *                                         .hostRewrite("dev.club")
 *                                         .build())
 *                                     .corsPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs.builder()
 *                                         .maxAge("2500s")
 *                                         .allowCredentials(true)
 *                                         .allowOrigins("*")
 *                                         .allowMethods("GET")
 *                                         .allowHeaders("dev")
 *                                         .exposeHeaders("prod")
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                                 .description("a second route rule to match against")
 *                                 .priority("2")
 *                                 .matchRules(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                     .fullPathMatch("/yay")
 *                                     .build())
 *                                 .origin(instance.name())
 *                                 .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                                     .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                         .cacheMode("CACHE_ALL_STATIC")
 *                                         .defaultTtl("3600s")
 *                                         .cacheKeyPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyArgs.builder()
 *                                             .excludedQueryParameters("dev")
 *                                             .build())
 *                                         .build())
 *                                     .corsPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyArgs.builder()
 *                                         .maxAge("3000s")
 *                                         .allowHeaders("dev")
 *                                         .disabled(true)
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                         .build())
 *                 .build())
 *             .logConfig(EdgeCacheServiceLogConfigArgs.builder()
 *                 .enable(true)
 *                 .sampleRate(0.01)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Services Edge Cache Service Dual Token
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheKeyset;
 * import com.pulumi.gcp.networkservices.EdgeCacheKeysetArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheKeysetPublicKeyArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheKeysetValidationSharedKeyArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheOrigin;
 * import com.pulumi.gcp.networkservices.EdgeCacheOriginArgs;
 * import com.pulumi.gcp.networkservices.EdgeCacheService;
 * import com.pulumi.gcp.networkservices.EdgeCacheServiceArgs;
 * import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var secret_basic = new Secret("secret-basic", SecretArgs.builder()
 *             .secretId("secret-name")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secret_version_basic = new SecretVersion("secret-version-basic", SecretVersionArgs.builder()
 *             .secret(secret_basic.id())
 *             .secretData("secret-data")
 *             .build());
 * 
 *         var keyset = new EdgeCacheKeyset("keyset", EdgeCacheKeysetArgs.builder()
 *             .name("keyset-name")
 *             .description("The default keyset")
 *             .publicKeys(EdgeCacheKeysetPublicKeyArgs.builder()
 *                 .id("my-public-key")
 *                 .managed(true)
 *                 .build())
 *             .validationSharedKeys(EdgeCacheKeysetValidationSharedKeyArgs.builder()
 *                 .secretVersion(secret_version_basic.id())
 *                 .build())
 *             .build());
 * 
 *         var instance = new EdgeCacheOrigin("instance", EdgeCacheOriginArgs.builder()
 *             .name("my-origin")
 *             .originAddress("gs://media-edge-default")
 *             .description("The default bucket for media edge test")
 *             .build());
 * 
 *         var instanceEdgeCacheService = new EdgeCacheService("instanceEdgeCacheService", EdgeCacheServiceArgs.builder()
 *             .name("my-service")
 *             .description("some description")
 *             .routing(EdgeCacheServiceRoutingArgs.builder()
 *                 .hostRules(EdgeCacheServiceRoutingHostRuleArgs.builder()
 *                     .description("host rule description")
 *                     .hosts("sslcert.tf-test.club")
 *                     .pathMatcher("routes")
 *                     .build())
 *                 .pathMatchers(EdgeCacheServiceRoutingPathMatcherArgs.builder()
 *                     .name("routes")
 *                     .routeRules(                    
 *                         EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                             .description("a route rule to match against master playlist")
 *                             .priority("1")
 *                             .matchRules(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                 .pathTemplateMatch("/master.m3u8")
 *                                 .build())
 *                             .origin(instance.name())
 *                             .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                                 .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                     .signedRequestMode("REQUIRE_TOKENS")
 *                                     .signedRequestKeyset(keyset.id())
 *                                     .signedTokenOptions(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs.builder()
 *                                         .tokenQueryParameter("edge-cache-token")
 *                                         .build())
 *                                     .signedRequestMaximumExpirationTtl("600s")
 *                                     .addSignatures(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs.builder()
 *                                         .actions("GENERATE_COOKIE")
 *                                         .keyset(keyset.id())
 *                                         .copiedParameters(                                        
 *                                             "PathGlobs",
 *                                             "SessionID")
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build(),
 *                         EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                             .description("a route rule to match against all playlists")
 *                             .priority("2")
 *                             .matchRules(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                 .pathTemplateMatch("/*.m3u8")
 *                                 .build())
 *                             .origin(instance.name())
 *                             .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                                 .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                     .signedRequestMode("REQUIRE_TOKENS")
 *                                     .signedRequestKeyset(keyset.id())
 *                                     .signedTokenOptions(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs.builder()
 *                                         .tokenQueryParameter("hdnts")
 *                                         .allowedSignatureAlgorithms(                                        
 *                                             "ED25519",
 *                                             "HMAC_SHA_256",
 *                                             "HMAC_SHA1")
 *                                         .build())
 *                                     .addSignatures(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs.builder()
 *                                         .actions("GENERATE_TOKEN_HLS_COOKIELESS")
 *                                         .keyset(keyset.id())
 *                                         .tokenTtl("1200s")
 *                                         .tokenQueryParameter("hdntl")
 *                                         .copiedParameters("URLPrefix")
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build(),
 *                         EdgeCacheServiceRoutingPathMatcherRouteRuleArgs.builder()
 *                             .description("a route rule to match against")
 *                             .priority("3")
 *                             .matchRules(EdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleArgs.builder()
 *                                 .pathTemplateMatch("/**.m3u8")
 *                                 .build())
 *                             .origin(instance.name())
 *                             .routeAction(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionArgs.builder()
 *                                 .cdnPolicy(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyArgs.builder()
 *                                     .signedRequestMode("REQUIRE_TOKENS")
 *                                     .signedRequestKeyset(keyset.id())
 *                                     .signedTokenOptions(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsArgs.builder()
 *                                         .tokenQueryParameter("hdntl")
 *                                         .build())
 *                                     .addSignatures(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesArgs.builder()
 *                                         .actions("PROPAGATE_TOKEN_HLS_COOKIELESS")
 *                                         .tokenQueryParameter("hdntl")
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * EdgeCacheService can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/global/edgeCacheServices/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, EdgeCacheService can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default projects/{{project}}/locations/global/edgeCacheServices/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/edgeCacheService:EdgeCacheService default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkservices/edgeCacheService:EdgeCacheService")
public class EdgeCacheService extends com.pulumi.resources.CustomResource {
    /**
     * A human-readable description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A human-readable description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Disables HTTP/2.
     * HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use and reduces connection setup overhead by sending multiple streams over the same connection.
     * Some legacy HTTP clients may have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from being advertised and negotiated.
     * 
     */
    @Export(name="disableHttp2", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disableHttp2;

    /**
     * @return Disables HTTP/2.
     * HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use and reduces connection setup overhead by sending multiple streams over the same connection.
     * Some legacy HTTP clients may have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from being advertised and negotiated.
     * 
     */
    public Output<Optional<Boolean>> disableHttp2() {
        return Codegen.optional(this.disableHttp2);
    }
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     * 
     */
    @Export(name="disableQuic", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disableQuic;

    /**
     * @return HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     * 
     */
    public Output<Boolean> disableQuic() {
        return this.disableQuic;
    }
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
     * 
     */
    @Export(name="edgeSecurityPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> edgeSecurityPolicy;

    /**
     * @return Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
     * 
     */
    public Output<Optional<String>> edgeSecurityPolicy() {
        return Codegen.optional(this.edgeSecurityPolicy);
    }
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
     * Note that only &#34;global&#34; certificates with a &#34;scope&#34; of &#34;EDGE_CACHE&#34; can be attached to an EdgeCacheService.
     * 
     */
    @Export(name="edgeSslCertificates", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> edgeSslCertificates;

    /**
     * @return URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
     * Note that only &#34;global&#34; certificates with a &#34;scope&#34; of &#34;EDGE_CACHE&#34; can be attached to an EdgeCacheService.
     * 
     */
    public Output<Optional<List<String>>> edgeSslCertificates() {
        return Codegen.optional(this.edgeSslCertificates);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
     * 
     */
    @Export(name="ipv4Addresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> ipv4Addresses;

    /**
     * @return The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
     * 
     */
    public Output<List<String>> ipv4Addresses() {
        return this.ipv4Addresses;
    }
    /**
     * The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
     * 
     */
    @Export(name="ipv6Addresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> ipv6Addresses;

    /**
     * @return The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
     * 
     */
    public Output<List<String>> ipv6Addresses() {
        return this.ipv6Addresses;
    }
    /**
     * Set of label tags associated with the EdgeCache resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the EdgeCache resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", refs={EdgeCacheServiceLogConfig.class}, tree="[0]")
    private Output</* @Nullable */ EdgeCacheServiceLogConfig> logConfig;

    /**
     * @return Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to Cloud Logging.
     * Structure is documented below.
     * 
     */
    public Output<Optional<EdgeCacheServiceLogConfig>> logConfig() {
        return Codegen.optional(this.logConfig);
    }
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is created.
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Require TLS (HTTPS) for all clients connecting to this service.
     * Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
     * You must have at least one (1) edgeSslCertificate specified to enable this.
     * 
     */
    @Export(name="requireTls", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requireTls;

    /**
     * @return Require TLS (HTTPS) for all clients connecting to this service.
     * Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
     * You must have at least one (1) edgeSslCertificate specified to enable this.
     * 
     */
    public Output<Boolean> requireTls() {
        return this.requireTls;
    }
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     * Structure is documented below.
     * 
     */
    @Export(name="routing", refs={EdgeCacheServiceRouting.class}, tree="[0]")
    private Output<EdgeCacheServiceRouting> routing;

    /**
     * @return Defines how requests are routed, modified, cached and/or which origin content is filled from.
     * Structure is documented below.
     * 
     */
    public Output<EdgeCacheServiceRouting> routing() {
        return this.routing;
    }
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService.
     * If not set, the EdgeCacheService has no SSL policy configured, and will default to the &#34;COMPATIBLE&#34; policy.
     * 
     */
    @Export(name="sslPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sslPolicy;

    /**
     * @return URL of the SslPolicy resource that will be associated with the EdgeCacheService.
     * If not set, the EdgeCacheService has no SSL policy configured, and will default to the &#34;COMPATIBLE&#34; policy.
     * 
     */
    public Output<Optional<String>> sslPolicy() {
        return Codegen.optional(this.sslPolicy);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EdgeCacheService(java.lang.String name) {
        this(name, EdgeCacheServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EdgeCacheService(java.lang.String name, EdgeCacheServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EdgeCacheService(java.lang.String name, EdgeCacheServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/edgeCacheService:EdgeCacheService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private EdgeCacheService(java.lang.String name, Output<java.lang.String> id, @Nullable EdgeCacheServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/edgeCacheService:EdgeCacheService", name, state, makeResourceOptions(options, id), false);
    }

    private static EdgeCacheServiceArgs makeArgs(EdgeCacheServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EdgeCacheServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EdgeCacheService get(java.lang.String name, Output<java.lang.String> id, @Nullable EdgeCacheServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EdgeCacheService(name, id, state, options);
    }
}
