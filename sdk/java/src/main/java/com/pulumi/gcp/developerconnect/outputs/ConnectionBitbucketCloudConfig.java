// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.outputs.ConnectionBitbucketCloudConfigAuthorizerCredential;
import com.pulumi.gcp.developerconnect.outputs.ConnectionBitbucketCloudConfigReadAuthorizerCredential;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ConnectionBitbucketCloudConfig {
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    private ConnectionBitbucketCloudConfigAuthorizerCredential authorizerCredential;
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    private ConnectionBitbucketCloudConfigReadAuthorizerCredential readAuthorizerCredential;
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
     * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
     * validate and create webhooks.
     * 
     */
    private String webhookSecretSecretVersion;
    /**
     * @return Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
     * 
     */
    private String workspace;

    private ConnectionBitbucketCloudConfig() {}
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public ConnectionBitbucketCloudConfigAuthorizerCredential authorizerCredential() {
        return this.authorizerCredential;
    }
    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public ConnectionBitbucketCloudConfigReadAuthorizerCredential readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }
    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
     * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
     * validate and create webhooks.
     * 
     */
    public String webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }
    /**
     * @return Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
     * 
     */
    public String workspace() {
        return this.workspace;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionBitbucketCloudConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ConnectionBitbucketCloudConfigAuthorizerCredential authorizerCredential;
        private ConnectionBitbucketCloudConfigReadAuthorizerCredential readAuthorizerCredential;
        private String webhookSecretSecretVersion;
        private String workspace;
        public Builder() {}
        public Builder(ConnectionBitbucketCloudConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizerCredential = defaults.authorizerCredential;
    	      this.readAuthorizerCredential = defaults.readAuthorizerCredential;
    	      this.webhookSecretSecretVersion = defaults.webhookSecretSecretVersion;
    	      this.workspace = defaults.workspace;
        }

        @CustomType.Setter
        public Builder authorizerCredential(ConnectionBitbucketCloudConfigAuthorizerCredential authorizerCredential) {
            if (authorizerCredential == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfig", "authorizerCredential");
            }
            this.authorizerCredential = authorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder readAuthorizerCredential(ConnectionBitbucketCloudConfigReadAuthorizerCredential readAuthorizerCredential) {
            if (readAuthorizerCredential == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfig", "readAuthorizerCredential");
            }
            this.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            if (webhookSecretSecretVersion == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfig", "webhookSecretSecretVersion");
            }
            this.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }
        @CustomType.Setter
        public Builder workspace(String workspace) {
            if (workspace == null) {
              throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfig", "workspace");
            }
            this.workspace = workspace;
            return this;
        }
        public ConnectionBitbucketCloudConfig build() {
            final var _resultValue = new ConnectionBitbucketCloudConfig();
            _resultValue.authorizerCredential = authorizerCredential;
            _resultValue.readAuthorizerCredential = readAuthorizerCredential;
            _resultValue.webhookSecretSecretVersion = webhookSecretSecretVersion;
            _resultValue.workspace = workspace;
            return _resultValue;
        }
    }
}
