// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.secretmanager.outputs.GetRegionalSecretsSecretCustomerManagedEncryption;
import com.pulumi.gcp.secretmanager.outputs.GetRegionalSecretsSecretRotation;
import com.pulumi.gcp.secretmanager.outputs.GetRegionalSecretsSecretTopic;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegionalSecretsSecret {
    /**
     * @return Custom metadata about the regional secret.
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return The time at which the regional secret was created.
     * 
     */
    private String createTime;
    /**
     * @return Customer Managed Encryption for the regional secret.
     * Structure is documented below.
     * 
     */
    private List<GetRegionalSecretsSecretCustomerManagedEncryption> customerManagedEncryptions;
    private Boolean deletionProtection;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    /**
     * @return Timestamp in UTC when the regional secret is scheduled to expire.
     * 
     */
    private String expireTime;
    /**
     * @return The labels assigned to this regional secret.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The location of the regional secret.
     * 
     */
    private String location;
    /**
     * @return The resource name of the Pub/Sub topic that will be published to.
     * 
     */
    private String name;
    /**
     * @return The ID of the project.
     * 
     */
    private String project;
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    private Map<String,String> pulumiLabels;
    /**
     * @return The rotation time and period for a regional secret.
     * Structure is documented below.
     * 
     */
    private List<GetRegionalSecretsSecretRotation> rotations;
    /**
     * @return The unique name of the resource.
     * 
     */
    private String secretId;
    /**
     * @return A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the regional secret or its versions.
     * Structure is documented below.
     * 
     */
    private List<GetRegionalSecretsSecretTopic> topics;
    /**
     * @return The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
     * terminated by &#39;s&#39;. Example: &#34;3.5s&#34;. Only one of &#39;ttl&#39; or &#39;expire_time&#39; can be provided.
     * 
     */
    private String ttl;
    /**
     * @return Mapping from version alias to version name.
     * 
     */
    private Map<String,String> versionAliases;
    /**
     * @return The version destroy ttl for the regional secret version.
     * 
     */
    private String versionDestroyTtl;

    private GetRegionalSecretsSecret() {}
    /**
     * @return Custom metadata about the regional secret.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return The time at which the regional secret was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Customer Managed Encryption for the regional secret.
     * Structure is documented below.
     * 
     */
    public List<GetRegionalSecretsSecretCustomerManagedEncryption> customerManagedEncryptions() {
        return this.customerManagedEncryptions;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * @return Timestamp in UTC when the regional secret is scheduled to expire.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The labels assigned to this regional secret.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The location of the regional secret.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The resource name of the Pub/Sub topic that will be published to.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the project.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * @return The rotation time and period for a regional secret.
     * Structure is documented below.
     * 
     */
    public List<GetRegionalSecretsSecretRotation> rotations() {
        return this.rotations;
    }
    /**
     * @return The unique name of the resource.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the regional secret or its versions.
     * Structure is documented below.
     * 
     */
    public List<GetRegionalSecretsSecretTopic> topics() {
        return this.topics;
    }
    /**
     * @return The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
     * terminated by &#39;s&#39;. Example: &#34;3.5s&#34;. Only one of &#39;ttl&#39; or &#39;expire_time&#39; can be provided.
     * 
     */
    public String ttl() {
        return this.ttl;
    }
    /**
     * @return Mapping from version alias to version name.
     * 
     */
    public Map<String,String> versionAliases() {
        return this.versionAliases;
    }
    /**
     * @return The version destroy ttl for the regional secret version.
     * 
     */
    public String versionDestroyTtl() {
        return this.versionDestroyTtl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionalSecretsSecret defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String createTime;
        private List<GetRegionalSecretsSecretCustomerManagedEncryption> customerManagedEncryptions;
        private Boolean deletionProtection;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private String expireTime;
        private Map<String,String> labels;
        private String location;
        private String name;
        private String project;
        private Map<String,String> pulumiLabels;
        private List<GetRegionalSecretsSecretRotation> rotations;
        private String secretId;
        private List<GetRegionalSecretsSecretTopic> topics;
        private String ttl;
        private Map<String,String> versionAliases;
        private String versionDestroyTtl;
        public Builder() {}
        public Builder(GetRegionalSecretsSecret defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.createTime = defaults.createTime;
    	      this.customerManagedEncryptions = defaults.customerManagedEncryptions;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.expireTime = defaults.expireTime;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.rotations = defaults.rotations;
    	      this.secretId = defaults.secretId;
    	      this.topics = defaults.topics;
    	      this.ttl = defaults.ttl;
    	      this.versionAliases = defaults.versionAliases;
    	      this.versionDestroyTtl = defaults.versionDestroyTtl;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder customerManagedEncryptions(List<GetRegionalSecretsSecretCustomerManagedEncryption> customerManagedEncryptions) {
            if (customerManagedEncryptions == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "customerManagedEncryptions");
            }
            this.customerManagedEncryptions = customerManagedEncryptions;
            return this;
        }
        public Builder customerManagedEncryptions(GetRegionalSecretsSecretCustomerManagedEncryption... customerManagedEncryptions) {
            return customerManagedEncryptions(List.of(customerManagedEncryptions));
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder rotations(List<GetRegionalSecretsSecretRotation> rotations) {
            if (rotations == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "rotations");
            }
            this.rotations = rotations;
            return this;
        }
        public Builder rotations(GetRegionalSecretsSecretRotation... rotations) {
            return rotations(List.of(rotations));
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<GetRegionalSecretsSecretTopic> topics) {
            if (topics == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "topics");
            }
            this.topics = topics;
            return this;
        }
        public Builder topics(GetRegionalSecretsSecretTopic... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder ttl(String ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder versionAliases(Map<String,String> versionAliases) {
            if (versionAliases == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "versionAliases");
            }
            this.versionAliases = versionAliases;
            return this;
        }
        @CustomType.Setter
        public Builder versionDestroyTtl(String versionDestroyTtl) {
            if (versionDestroyTtl == null) {
              throw new MissingRequiredPropertyException("GetRegionalSecretsSecret", "versionDestroyTtl");
            }
            this.versionDestroyTtl = versionDestroyTtl;
            return this;
        }
        public GetRegionalSecretsSecret build() {
            final var _resultValue = new GetRegionalSecretsSecret();
            _resultValue.annotations = annotations;
            _resultValue.createTime = createTime;
            _resultValue.customerManagedEncryptions = customerManagedEncryptions;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.expireTime = expireTime;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.rotations = rotations;
            _resultValue.secretId = secretId;
            _resultValue.topics = topics;
            _resultValue.ttl = ttl;
            _resultValue.versionAliases = versionAliases;
            _resultValue.versionDestroyTtl = versionDestroyTtl;
            return _resultValue;
        }
    }
}
