// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.FirewallPolicyWithRulesRuleMatchLayer4Config;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirewallPolicyWithRulesRuleMatch {
    /**
     * @return Address groups which should be matched against the traffic destination.
     * Maximum number of destination address groups is 10.
     * 
     */
    private @Nullable List<String> destAddressGroups;
    /**
     * @return Fully Qualified Domain Name (FQDN) which should be matched against
     * traffic destination. Maximum number of destination fqdn allowed is 100.
     * 
     */
    private @Nullable List<String> destFqdns;
    /**
     * @return Destination IP address range in CIDR format. Required for
     * EGRESS rules.
     * 
     */
    private @Nullable List<String> destIpRanges;
    /**
     * @return Network scope of the traffic destination.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    private @Nullable String destNetworkScope;
    /**
     * @return Region codes whose IP addresses will be used to match for destination
     * of traffic. Should be specified as 2 letter country code defined as per
     * ISO 3166 alpha-2 country codes. ex.&#34;US&#34;
     * Maximum number of destination region codes allowed is 5000.
     * 
     */
    private @Nullable List<String> destRegionCodes;
    /**
     * @return Names of Network Threat Intelligence lists.
     * The IPs in these lists will be matched against traffic destination.
     * 
     */
    private @Nullable List<String> destThreatIntelligences;
    /**
     * @return Pairs of IP protocols and ports that the rule should match.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_rule_rule_match_layer4_config&#34;&gt;&lt;/a&gt;The `layer4_config` block supports:
     * 
     */
    private List<FirewallPolicyWithRulesRuleMatchLayer4Config> layer4Configs;
    /**
     * @return Address groups which should be matched against the traffic source.
     * Maximum number of source address groups is 10.
     * 
     */
    private @Nullable List<String> srcAddressGroups;
    /**
     * @return Fully Qualified Domain Name (FQDN) which should be matched against
     * traffic source. Maximum number of source fqdn allowed is 100.
     * 
     */
    private @Nullable List<String> srcFqdns;
    /**
     * @return Source IP address range in CIDR format. Required for
     * INGRESS rules.
     * 
     */
    private @Nullable List<String> srcIpRanges;
    /**
     * @return Network scope of the traffic source.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    private @Nullable String srcNetworkScope;
    /**
     * @return Networks of the traffic source. It can be either a full or partial url.
     * 
     */
    private @Nullable List<String> srcNetworks;
    /**
     * @return Region codes whose IP addresses will be used to match for source
     * of traffic. Should be specified as 2 letter country code defined as per
     * ISO 3166 alpha-2 country codes. ex.&#34;US&#34;
     * Maximum number of source region codes allowed is 5000.
     * 
     */
    private @Nullable List<String> srcRegionCodes;
    /**
     * @return Names of Network Threat Intelligence lists.
     * The IPs in these lists will be matched against traffic source.
     * 
     */
    private @Nullable List<String> srcThreatIntelligences;

    private FirewallPolicyWithRulesRuleMatch() {}
    /**
     * @return Address groups which should be matched against the traffic destination.
     * Maximum number of destination address groups is 10.
     * 
     */
    public List<String> destAddressGroups() {
        return this.destAddressGroups == null ? List.of() : this.destAddressGroups;
    }
    /**
     * @return Fully Qualified Domain Name (FQDN) which should be matched against
     * traffic destination. Maximum number of destination fqdn allowed is 100.
     * 
     */
    public List<String> destFqdns() {
        return this.destFqdns == null ? List.of() : this.destFqdns;
    }
    /**
     * @return Destination IP address range in CIDR format. Required for
     * EGRESS rules.
     * 
     */
    public List<String> destIpRanges() {
        return this.destIpRanges == null ? List.of() : this.destIpRanges;
    }
    /**
     * @return Network scope of the traffic destination.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    public Optional<String> destNetworkScope() {
        return Optional.ofNullable(this.destNetworkScope);
    }
    /**
     * @return Region codes whose IP addresses will be used to match for destination
     * of traffic. Should be specified as 2 letter country code defined as per
     * ISO 3166 alpha-2 country codes. ex.&#34;US&#34;
     * Maximum number of destination region codes allowed is 5000.
     * 
     */
    public List<String> destRegionCodes() {
        return this.destRegionCodes == null ? List.of() : this.destRegionCodes;
    }
    /**
     * @return Names of Network Threat Intelligence lists.
     * The IPs in these lists will be matched against traffic destination.
     * 
     */
    public List<String> destThreatIntelligences() {
        return this.destThreatIntelligences == null ? List.of() : this.destThreatIntelligences;
    }
    /**
     * @return Pairs of IP protocols and ports that the rule should match.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_rule_rule_match_layer4_config&#34;&gt;&lt;/a&gt;The `layer4_config` block supports:
     * 
     */
    public List<FirewallPolicyWithRulesRuleMatchLayer4Config> layer4Configs() {
        return this.layer4Configs;
    }
    /**
     * @return Address groups which should be matched against the traffic source.
     * Maximum number of source address groups is 10.
     * 
     */
    public List<String> srcAddressGroups() {
        return this.srcAddressGroups == null ? List.of() : this.srcAddressGroups;
    }
    /**
     * @return Fully Qualified Domain Name (FQDN) which should be matched against
     * traffic source. Maximum number of source fqdn allowed is 100.
     * 
     */
    public List<String> srcFqdns() {
        return this.srcFqdns == null ? List.of() : this.srcFqdns;
    }
    /**
     * @return Source IP address range in CIDR format. Required for
     * INGRESS rules.
     * 
     */
    public List<String> srcIpRanges() {
        return this.srcIpRanges == null ? List.of() : this.srcIpRanges;
    }
    /**
     * @return Network scope of the traffic source.
     * Possible values are: `INTERNET`, `INTRA_VPC`, `NON_INTERNET`, `VPC_NETWORKS`.
     * 
     */
    public Optional<String> srcNetworkScope() {
        return Optional.ofNullable(this.srcNetworkScope);
    }
    /**
     * @return Networks of the traffic source. It can be either a full or partial url.
     * 
     */
    public List<String> srcNetworks() {
        return this.srcNetworks == null ? List.of() : this.srcNetworks;
    }
    /**
     * @return Region codes whose IP addresses will be used to match for source
     * of traffic. Should be specified as 2 letter country code defined as per
     * ISO 3166 alpha-2 country codes. ex.&#34;US&#34;
     * Maximum number of source region codes allowed is 5000.
     * 
     */
    public List<String> srcRegionCodes() {
        return this.srcRegionCodes == null ? List.of() : this.srcRegionCodes;
    }
    /**
     * @return Names of Network Threat Intelligence lists.
     * The IPs in these lists will be matched against traffic source.
     * 
     */
    public List<String> srcThreatIntelligences() {
        return this.srcThreatIntelligences == null ? List.of() : this.srcThreatIntelligences;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallPolicyWithRulesRuleMatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> destAddressGroups;
        private @Nullable List<String> destFqdns;
        private @Nullable List<String> destIpRanges;
        private @Nullable String destNetworkScope;
        private @Nullable List<String> destRegionCodes;
        private @Nullable List<String> destThreatIntelligences;
        private List<FirewallPolicyWithRulesRuleMatchLayer4Config> layer4Configs;
        private @Nullable List<String> srcAddressGroups;
        private @Nullable List<String> srcFqdns;
        private @Nullable List<String> srcIpRanges;
        private @Nullable String srcNetworkScope;
        private @Nullable List<String> srcNetworks;
        private @Nullable List<String> srcRegionCodes;
        private @Nullable List<String> srcThreatIntelligences;
        public Builder() {}
        public Builder(FirewallPolicyWithRulesRuleMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destAddressGroups = defaults.destAddressGroups;
    	      this.destFqdns = defaults.destFqdns;
    	      this.destIpRanges = defaults.destIpRanges;
    	      this.destNetworkScope = defaults.destNetworkScope;
    	      this.destRegionCodes = defaults.destRegionCodes;
    	      this.destThreatIntelligences = defaults.destThreatIntelligences;
    	      this.layer4Configs = defaults.layer4Configs;
    	      this.srcAddressGroups = defaults.srcAddressGroups;
    	      this.srcFqdns = defaults.srcFqdns;
    	      this.srcIpRanges = defaults.srcIpRanges;
    	      this.srcNetworkScope = defaults.srcNetworkScope;
    	      this.srcNetworks = defaults.srcNetworks;
    	      this.srcRegionCodes = defaults.srcRegionCodes;
    	      this.srcThreatIntelligences = defaults.srcThreatIntelligences;
        }

        @CustomType.Setter
        public Builder destAddressGroups(@Nullable List<String> destAddressGroups) {

            this.destAddressGroups = destAddressGroups;
            return this;
        }
        public Builder destAddressGroups(String... destAddressGroups) {
            return destAddressGroups(List.of(destAddressGroups));
        }
        @CustomType.Setter
        public Builder destFqdns(@Nullable List<String> destFqdns) {

            this.destFqdns = destFqdns;
            return this;
        }
        public Builder destFqdns(String... destFqdns) {
            return destFqdns(List.of(destFqdns));
        }
        @CustomType.Setter
        public Builder destIpRanges(@Nullable List<String> destIpRanges) {

            this.destIpRanges = destIpRanges;
            return this;
        }
        public Builder destIpRanges(String... destIpRanges) {
            return destIpRanges(List.of(destIpRanges));
        }
        @CustomType.Setter
        public Builder destNetworkScope(@Nullable String destNetworkScope) {

            this.destNetworkScope = destNetworkScope;
            return this;
        }
        @CustomType.Setter
        public Builder destRegionCodes(@Nullable List<String> destRegionCodes) {

            this.destRegionCodes = destRegionCodes;
            return this;
        }
        public Builder destRegionCodes(String... destRegionCodes) {
            return destRegionCodes(List.of(destRegionCodes));
        }
        @CustomType.Setter
        public Builder destThreatIntelligences(@Nullable List<String> destThreatIntelligences) {

            this.destThreatIntelligences = destThreatIntelligences;
            return this;
        }
        public Builder destThreatIntelligences(String... destThreatIntelligences) {
            return destThreatIntelligences(List.of(destThreatIntelligences));
        }
        @CustomType.Setter
        public Builder layer4Configs(List<FirewallPolicyWithRulesRuleMatchLayer4Config> layer4Configs) {
            if (layer4Configs == null) {
              throw new MissingRequiredPropertyException("FirewallPolicyWithRulesRuleMatch", "layer4Configs");
            }
            this.layer4Configs = layer4Configs;
            return this;
        }
        public Builder layer4Configs(FirewallPolicyWithRulesRuleMatchLayer4Config... layer4Configs) {
            return layer4Configs(List.of(layer4Configs));
        }
        @CustomType.Setter
        public Builder srcAddressGroups(@Nullable List<String> srcAddressGroups) {

            this.srcAddressGroups = srcAddressGroups;
            return this;
        }
        public Builder srcAddressGroups(String... srcAddressGroups) {
            return srcAddressGroups(List.of(srcAddressGroups));
        }
        @CustomType.Setter
        public Builder srcFqdns(@Nullable List<String> srcFqdns) {

            this.srcFqdns = srcFqdns;
            return this;
        }
        public Builder srcFqdns(String... srcFqdns) {
            return srcFqdns(List.of(srcFqdns));
        }
        @CustomType.Setter
        public Builder srcIpRanges(@Nullable List<String> srcIpRanges) {

            this.srcIpRanges = srcIpRanges;
            return this;
        }
        public Builder srcIpRanges(String... srcIpRanges) {
            return srcIpRanges(List.of(srcIpRanges));
        }
        @CustomType.Setter
        public Builder srcNetworkScope(@Nullable String srcNetworkScope) {

            this.srcNetworkScope = srcNetworkScope;
            return this;
        }
        @CustomType.Setter
        public Builder srcNetworks(@Nullable List<String> srcNetworks) {

            this.srcNetworks = srcNetworks;
            return this;
        }
        public Builder srcNetworks(String... srcNetworks) {
            return srcNetworks(List.of(srcNetworks));
        }
        @CustomType.Setter
        public Builder srcRegionCodes(@Nullable List<String> srcRegionCodes) {

            this.srcRegionCodes = srcRegionCodes;
            return this;
        }
        public Builder srcRegionCodes(String... srcRegionCodes) {
            return srcRegionCodes(List.of(srcRegionCodes));
        }
        @CustomType.Setter
        public Builder srcThreatIntelligences(@Nullable List<String> srcThreatIntelligences) {

            this.srcThreatIntelligences = srcThreatIntelligences;
            return this;
        }
        public Builder srcThreatIntelligences(String... srcThreatIntelligences) {
            return srcThreatIntelligences(List.of(srcThreatIntelligences));
        }
        public FirewallPolicyWithRulesRuleMatch build() {
            final var _resultValue = new FirewallPolicyWithRulesRuleMatch();
            _resultValue.destAddressGroups = destAddressGroups;
            _resultValue.destFqdns = destFqdns;
            _resultValue.destIpRanges = destIpRanges;
            _resultValue.destNetworkScope = destNetworkScope;
            _resultValue.destRegionCodes = destRegionCodes;
            _resultValue.destThreatIntelligences = destThreatIntelligences;
            _resultValue.layer4Configs = layer4Configs;
            _resultValue.srcAddressGroups = srcAddressGroups;
            _resultValue.srcFqdns = srcFqdns;
            _resultValue.srcIpRanges = srcIpRanges;
            _resultValue.srcNetworkScope = srcNetworkScope;
            _resultValue.srcNetworks = srcNetworks;
            _resultValue.srcRegionCodes = srcRegionCodes;
            _resultValue.srcThreatIntelligences = srcThreatIntelligences;
            return _resultValue;
        }
    }
}
