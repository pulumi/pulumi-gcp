// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.projects.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.projects.outputs.GetAncestryAncestor;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAncestryResult {
    /**
     * @return A list of the project&#39;s ancestors. Structure is defined below.
     * 
     */
    private List<GetAncestryAncestor> ancestors;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The optional user-assigned display name of the project.
     * 
     */
    private String orgId;
    /**
     * @return The parent&#39;s id.
     * 
     */
    private String parentId;
    /**
     * @return One of `&#34;folder&#34;` or `&#34;organization&#34;`.
     * 
     */
    private String parentType;
    private @Nullable String project;

    private GetAncestryResult() {}
    /**
     * @return A list of the project&#39;s ancestors. Structure is defined below.
     * 
     */
    public List<GetAncestryAncestor> ancestors() {
        return this.ancestors;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The optional user-assigned display name of the project.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return The parent&#39;s id.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return One of `&#34;folder&#34;` or `&#34;organization&#34;`.
     * 
     */
    public String parentType() {
        return this.parentType;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAncestryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAncestryAncestor> ancestors;
        private String id;
        private String orgId;
        private String parentId;
        private String parentType;
        private @Nullable String project;
        public Builder() {}
        public Builder(GetAncestryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ancestors = defaults.ancestors;
    	      this.id = defaults.id;
    	      this.orgId = defaults.orgId;
    	      this.parentId = defaults.parentId;
    	      this.parentType = defaults.parentType;
    	      this.project = defaults.project;
        }

        @CustomType.Setter
        public Builder ancestors(List<GetAncestryAncestor> ancestors) {
            if (ancestors == null) {
              throw new MissingRequiredPropertyException("GetAncestryResult", "ancestors");
            }
            this.ancestors = ancestors;
            return this;
        }
        public Builder ancestors(GetAncestryAncestor... ancestors) {
            return ancestors(List.of(ancestors));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAncestryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetAncestryResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            if (parentId == null) {
              throw new MissingRequiredPropertyException("GetAncestryResult", "parentId");
            }
            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder parentType(String parentType) {
            if (parentType == null) {
              throw new MissingRequiredPropertyException("GetAncestryResult", "parentType");
            }
            this.parentType = parentType;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        public GetAncestryResult build() {
            final var _resultValue = new GetAncestryResult();
            _resultValue.ancestors = ancestors;
            _resultValue.id = id;
            _resultValue.orgId = orgId;
            _resultValue.parentId = parentId;
            _resultValue.parentType = parentType;
            _resultValue.project = project;
            return _resultValue;
        }
    }
}
