// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeReplicationHybridPeeringDetailArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeReplicationHybridPeeringDetailArgs Empty = new VolumeReplicationHybridPeeringDetailArgs();

    /**
     * (Output)
     * Optional. Copy-paste-able commands to be used on user&#39;s ONTAP to accept peering requests.
     * 
     */
    @Import(name="command")
    private @Nullable Output<String> command;

    /**
     * @return (Output)
     * Optional. Copy-paste-able commands to be used on user&#39;s ONTAP to accept peering requests.
     * 
     */
    public Optional<Output<String>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * (Output)
     * Optional. Expiration time for the peering command to be executed on user&#39;s ONTAP.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted.
     * 
     */
    @Import(name="commandExpiryTime")
    private @Nullable Output<String> commandExpiryTime;

    /**
     * @return (Output)
     * Optional. Expiration time for the peering command to be executed on user&#39;s ONTAP.
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted.
     * 
     */
    public Optional<Output<String>> commandExpiryTime() {
        return Optional.ofNullable(this.commandExpiryTime);
    }

    /**
     * (Output)
     * Optional. Temporary passphrase generated to accept cluster peering command.
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return (Output)
     * Optional. Temporary passphrase generated to accept cluster peering command.
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * (Output)
     * Optional. Name of the user&#39;s local source cluster to be peered with the destination cluster.
     * 
     */
    @Import(name="peerClusterName")
    private @Nullable Output<String> peerClusterName;

    /**
     * @return (Output)
     * Optional. Name of the user&#39;s local source cluster to be peered with the destination cluster.
     * 
     */
    public Optional<Output<String>> peerClusterName() {
        return Optional.ofNullable(this.peerClusterName);
    }

    /**
     * (Output)
     * Optional. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
     * 
     */
    @Import(name="peerSvmName")
    private @Nullable Output<String> peerSvmName;

    /**
     * @return (Output)
     * Optional. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
     * 
     */
    public Optional<Output<String>> peerSvmName() {
        return Optional.ofNullable(this.peerSvmName);
    }

    /**
     * (Output)
     * Optional. Name of the user&#39;s local source volume to be peered with the destination volume.
     * 
     */
    @Import(name="peerVolumeName")
    private @Nullable Output<String> peerVolumeName;

    /**
     * @return (Output)
     * Optional. Name of the user&#39;s local source volume to be peered with the destination volume.
     * 
     */
    public Optional<Output<String>> peerVolumeName() {
        return Optional.ofNullable(this.peerVolumeName);
    }

    /**
     * (Output)
     * Optional. IP address of the subnet.
     * 
     */
    @Import(name="subnetIp")
    private @Nullable Output<String> subnetIp;

    /**
     * @return (Output)
     * Optional. IP address of the subnet.
     * 
     */
    public Optional<Output<String>> subnetIp() {
        return Optional.ofNullable(this.subnetIp);
    }

    private VolumeReplicationHybridPeeringDetailArgs() {}

    private VolumeReplicationHybridPeeringDetailArgs(VolumeReplicationHybridPeeringDetailArgs $) {
        this.command = $.command;
        this.commandExpiryTime = $.commandExpiryTime;
        this.passphrase = $.passphrase;
        this.peerClusterName = $.peerClusterName;
        this.peerSvmName = $.peerSvmName;
        this.peerVolumeName = $.peerVolumeName;
        this.subnetIp = $.subnetIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeReplicationHybridPeeringDetailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeReplicationHybridPeeringDetailArgs $;

        public Builder() {
            $ = new VolumeReplicationHybridPeeringDetailArgs();
        }

        public Builder(VolumeReplicationHybridPeeringDetailArgs defaults) {
            $ = new VolumeReplicationHybridPeeringDetailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param command (Output)
         * Optional. Copy-paste-able commands to be used on user&#39;s ONTAP to accept peering requests.
         * 
         * @return builder
         * 
         */
        public Builder command(@Nullable Output<String> command) {
            $.command = command;
            return this;
        }

        /**
         * @param command (Output)
         * Optional. Copy-paste-able commands to be used on user&#39;s ONTAP to accept peering requests.
         * 
         * @return builder
         * 
         */
        public Builder command(String command) {
            return command(Output.of(command));
        }

        /**
         * @param commandExpiryTime (Output)
         * Optional. Expiration time for the peering command to be executed on user&#39;s ONTAP.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted.
         * 
         * @return builder
         * 
         */
        public Builder commandExpiryTime(@Nullable Output<String> commandExpiryTime) {
            $.commandExpiryTime = commandExpiryTime;
            return this;
        }

        /**
         * @param commandExpiryTime (Output)
         * Optional. Expiration time for the peering command to be executed on user&#39;s ONTAP.
         * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than &#34;Z&#34; are also accepted.
         * 
         * @return builder
         * 
         */
        public Builder commandExpiryTime(String commandExpiryTime) {
            return commandExpiryTime(Output.of(commandExpiryTime));
        }

        /**
         * @param passphrase (Output)
         * Optional. Temporary passphrase generated to accept cluster peering command.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase (Output)
         * Optional. Temporary passphrase generated to accept cluster peering command.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param peerClusterName (Output)
         * Optional. Name of the user&#39;s local source cluster to be peered with the destination cluster.
         * 
         * @return builder
         * 
         */
        public Builder peerClusterName(@Nullable Output<String> peerClusterName) {
            $.peerClusterName = peerClusterName;
            return this;
        }

        /**
         * @param peerClusterName (Output)
         * Optional. Name of the user&#39;s local source cluster to be peered with the destination cluster.
         * 
         * @return builder
         * 
         */
        public Builder peerClusterName(String peerClusterName) {
            return peerClusterName(Output.of(peerClusterName));
        }

        /**
         * @param peerSvmName (Output)
         * Optional. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
         * 
         * @return builder
         * 
         */
        public Builder peerSvmName(@Nullable Output<String> peerSvmName) {
            $.peerSvmName = peerSvmName;
            return this;
        }

        /**
         * @param peerSvmName (Output)
         * Optional. Name of the user&#39;s local source vserver svm to be peered with the destination vserver svm.
         * 
         * @return builder
         * 
         */
        public Builder peerSvmName(String peerSvmName) {
            return peerSvmName(Output.of(peerSvmName));
        }

        /**
         * @param peerVolumeName (Output)
         * Optional. Name of the user&#39;s local source volume to be peered with the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder peerVolumeName(@Nullable Output<String> peerVolumeName) {
            $.peerVolumeName = peerVolumeName;
            return this;
        }

        /**
         * @param peerVolumeName (Output)
         * Optional. Name of the user&#39;s local source volume to be peered with the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder peerVolumeName(String peerVolumeName) {
            return peerVolumeName(Output.of(peerVolumeName));
        }

        /**
         * @param subnetIp (Output)
         * Optional. IP address of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetIp(@Nullable Output<String> subnetIp) {
            $.subnetIp = subnetIp;
            return this;
        }

        /**
         * @param subnetIp (Output)
         * Optional. IP address of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetIp(String subnetIp) {
            return subnetIp(Output.of(subnetIp));
        }

        public VolumeReplicationHybridPeeringDetailArgs build() {
            return $;
        }
    }

}
