// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlossaryCategoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlossaryCategoryArgs Empty = new GlossaryCategoryArgs();

    /**
     * The category id for creation.
     * 
     */
    @Import(name="categoryId")
    private @Nullable Output<String> categoryId;

    /**
     * @return The category id for creation.
     * 
     */
    public Optional<Output<String>> categoryId() {
        return Optional.ofNullable(this.categoryId);
    }

    /**
     * The user-mutable description of the GlossaryCategory.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The user-mutable description of the GlossaryCategory.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The glossary id for creation.
     * 
     */
    @Import(name="glossaryId")
    private @Nullable Output<String> glossaryId;

    /**
     * @return The glossary id for creation.
     * 
     */
    public Optional<Output<String>> glossaryId() {
        return Optional.ofNullable(this.glossaryId);
    }

    /**
     * User-defined labels for the GlossaryCategory.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels for the GlossaryCategory.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location where the glossary category should reside.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location where the glossary category should reside.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GlossaryCategoryArgs() {}

    private GlossaryCategoryArgs(GlossaryCategoryArgs $) {
        this.categoryId = $.categoryId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.glossaryId = $.glossaryId;
        this.labels = $.labels;
        this.location = $.location;
        this.parent = $.parent;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlossaryCategoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlossaryCategoryArgs $;

        public Builder() {
            $ = new GlossaryCategoryArgs();
        }

        public Builder(GlossaryCategoryArgs defaults) {
            $ = new GlossaryCategoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryId The category id for creation.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(@Nullable Output<String> categoryId) {
            $.categoryId = categoryId;
            return this;
        }

        /**
         * @param categoryId The category id for creation.
         * 
         * @return builder
         * 
         */
        public Builder categoryId(String categoryId) {
            return categoryId(Output.of(categoryId));
        }

        /**
         * @param description The user-mutable description of the GlossaryCategory.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The user-mutable description of the GlossaryCategory.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User friendly display name of the GlossaryCategory. This is user-mutable. This will be same as the categoryId, if not specified.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param glossaryId The glossary id for creation.
         * 
         * @return builder
         * 
         */
        public Builder glossaryId(@Nullable Output<String> glossaryId) {
            $.glossaryId = glossaryId;
            return this;
        }

        /**
         * @param glossaryId The glossary id for creation.
         * 
         * @return builder
         * 
         */
        public Builder glossaryId(String glossaryId) {
            return glossaryId(Output.of(glossaryId));
        }

        /**
         * @param labels User-defined labels for the GlossaryCategory.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels for the GlossaryCategory.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location where the glossary category should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the glossary category should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param parent The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The immediate parent of the GlossaryCategory in the resource-hierarchy. It can either be a Glossary or a Category. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{categoryId}
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GlossaryCategoryArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GlossaryCategoryArgs", "location");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("GlossaryCategoryArgs", "parent");
            }
            return $;
        }
    }

}
