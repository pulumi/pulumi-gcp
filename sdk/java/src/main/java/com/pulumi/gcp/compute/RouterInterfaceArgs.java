// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceArgs Empty = new RouterInterfaceArgs();

    /**
     * The name or resource link to the
     * VLAN interconnect for this interface. Changing this forces a new interface to
     * be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
     * 
     */
    @Import(name="interconnectAttachment")
    private @Nullable Output<String> interconnectAttachment;

    /**
     * @return The name or resource link to the
     * VLAN interconnect for this interface. Changing this forces a new interface to
     * be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
     * 
     */
    public Optional<Output<String>> interconnectAttachment() {
        return Optional.ofNullable(this.interconnectAttachment);
    }

    /**
     * IP address and range of the interface. The IP range must be
     * in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="ipRange")
    private @Nullable Output<String> ipRange;

    /**
     * @return IP address and range of the interface. The IP range must be
     * in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
     * 
     */
    public Optional<Output<String>> ipRange() {
        return Optional.ofNullable(this.ipRange);
    }

    /**
     * A unique name for the interface, required by GCE. Changing
     * this forces a new interface to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the interface, required by GCE. Changing
     * this forces a new interface to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The regional private internal IP address that is used
     * to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return The regional private internal IP address that is used
     * to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The ID of the project in which this interface&#39;s routerbelongs.
     * If it is not provided, the provider project is used. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which this interface&#39;s routerbelongs.
     * If it is not provided, the provider project is used. Changing this forces a new interface to be created.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The name of the interface that is redundant to
     * this interface. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="redundantInterface")
    private @Nullable Output<String> redundantInterface;

    /**
     * @return The name of the interface that is redundant to
     * this interface. Changing this forces a new interface to be created.
     * 
     */
    public Optional<Output<String>> redundantInterface() {
        return Optional.ofNullable(this.redundantInterface);
    }

    /**
     * The region this interface&#39;s router sits in.
     * If not specified, the project region will be used. Changing this forces a new interface to be created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region this interface&#39;s router sits in.
     * If not specified, the project region will be used. Changing this forces a new interface to be created.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the router this interface will be attached to.
     * Changing this forces a new interface to be created.
     * 
     */
    @Import(name="router", required=true)
    private Output<String> router;

    /**
     * @return The name of the router this interface will be attached to.
     * Changing this forces a new interface to be created.
     * 
     */
    public Output<String> router() {
        return this.router;
    }

    /**
     * The URI of the subnetwork resource that this interface
     * belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
     * 
     */
    @Import(name="subnetwork")
    private @Nullable Output<String> subnetwork;

    /**
     * @return The URI of the subnetwork resource that this interface
     * belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
     * 
     */
    public Optional<Output<String>> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }

    /**
     * The name or resource link to the VPN tunnel this
     * interface will be linked to. Changing this forces a new interface to be created. Only
     * one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
     * 
     */
    @Import(name="vpnTunnel")
    private @Nullable Output<String> vpnTunnel;

    /**
     * @return The name or resource link to the VPN tunnel this
     * interface will be linked to. Changing this forces a new interface to be created. Only
     * one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
     * 
     */
    public Optional<Output<String>> vpnTunnel() {
        return Optional.ofNullable(this.vpnTunnel);
    }

    private RouterInterfaceArgs() {}

    private RouterInterfaceArgs(RouterInterfaceArgs $) {
        this.interconnectAttachment = $.interconnectAttachment;
        this.ipRange = $.ipRange;
        this.name = $.name;
        this.privateIpAddress = $.privateIpAddress;
        this.project = $.project;
        this.redundantInterface = $.redundantInterface;
        this.region = $.region;
        this.router = $.router;
        this.subnetwork = $.subnetwork;
        this.vpnTunnel = $.vpnTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterInterfaceArgs $;

        public Builder() {
            $ = new RouterInterfaceArgs();
        }

        public Builder(RouterInterfaceArgs defaults) {
            $ = new RouterInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param interconnectAttachment The name or resource link to the
         * VLAN interconnect for this interface. Changing this forces a new interface to
         * be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder interconnectAttachment(@Nullable Output<String> interconnectAttachment) {
            $.interconnectAttachment = interconnectAttachment;
            return this;
        }

        /**
         * @param interconnectAttachment The name or resource link to the
         * VLAN interconnect for this interface. Changing this forces a new interface to
         * be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder interconnectAttachment(String interconnectAttachment) {
            return interconnectAttachment(Output.of(interconnectAttachment));
        }

        /**
         * @param ipRange IP address and range of the interface. The IP range must be
         * in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(@Nullable Output<String> ipRange) {
            $.ipRange = ipRange;
            return this;
        }

        /**
         * @param ipRange IP address and range of the interface. The IP range must be
         * in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(String ipRange) {
            return ipRange(Output.of(ipRange));
        }

        /**
         * @param name A unique name for the interface, required by GCE. Changing
         * this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the interface, required by GCE. Changing
         * this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateIpAddress The regional private internal IP address that is used
         * to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress The regional private internal IP address that is used
         * to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param project The ID of the project in which this interface&#39;s routerbelongs.
         * If it is not provided, the provider project is used. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which this interface&#39;s routerbelongs.
         * If it is not provided, the provider project is used. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param redundantInterface The name of the interface that is redundant to
         * this interface. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder redundantInterface(@Nullable Output<String> redundantInterface) {
            $.redundantInterface = redundantInterface;
            return this;
        }

        /**
         * @param redundantInterface The name of the interface that is redundant to
         * this interface. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder redundantInterface(String redundantInterface) {
            return redundantInterface(Output.of(redundantInterface));
        }

        /**
         * @param region The region this interface&#39;s router sits in.
         * If not specified, the project region will be used. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region this interface&#39;s router sits in.
         * If not specified, the project region will be used. Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param router The name of the router this interface will be attached to.
         * Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder router(Output<String> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router The name of the router this interface will be attached to.
         * Changing this forces a new interface to be created.
         * 
         * @return builder
         * 
         */
        public Builder router(String router) {
            return router(Output.of(router));
        }

        /**
         * @param subnetwork The URI of the subnetwork resource that this interface
         * belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(@Nullable Output<String> subnetwork) {
            $.subnetwork = subnetwork;
            return this;
        }

        /**
         * @param subnetwork The URI of the subnetwork resource that this interface
         * belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder subnetwork(String subnetwork) {
            return subnetwork(Output.of(subnetwork));
        }

        /**
         * @param vpnTunnel The name or resource link to the VPN tunnel this
         * interface will be linked to. Changing this forces a new interface to be created. Only
         * one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder vpnTunnel(@Nullable Output<String> vpnTunnel) {
            $.vpnTunnel = vpnTunnel;
            return this;
        }

        /**
         * @param vpnTunnel The name or resource link to the VPN tunnel this
         * interface will be linked to. Changing this forces a new interface to be created. Only
         * one of `vpn_tunnel`, `interconnect_attachment` or `subnetwork` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder vpnTunnel(String vpnTunnel) {
            return vpnTunnel(Output.of(vpnTunnel));
        }

        public RouterInterfaceArgs build() {
            $.router = Objects.requireNonNull($.router, "expected parameter 'router' to be non-null");
            return $;
        }
    }

}
