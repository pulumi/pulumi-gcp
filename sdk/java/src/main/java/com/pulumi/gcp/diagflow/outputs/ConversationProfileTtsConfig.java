// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.diagflow.outputs.ConversationProfileTtsConfigVoice;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConversationProfileTtsConfig {
    /**
     * @return An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
     * 
     */
    private @Nullable List<String> effectsProfileIds;
    /**
     * @return Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
     * 
     */
    private @Nullable Double pitch;
    /**
     * @return Speaking rate/speed, in the range [0.25, 4.0].
     * 
     */
    private @Nullable Double speakingRate;
    /**
     * @return The desired voice of the synthesized audio.
     * Structure is documented below.
     * 
     */
    private @Nullable ConversationProfileTtsConfigVoice voice;
    /**
     * @return Volume gain (in dB) of the normal native volume supported by the specific voice.
     * 
     */
    private @Nullable Double volumeGainDb;

    private ConversationProfileTtsConfig() {}
    /**
     * @return An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.
     * 
     */
    public List<String> effectsProfileIds() {
        return this.effectsProfileIds == null ? List.of() : this.effectsProfileIds;
    }
    /**
     * @return Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
     * 
     */
    public Optional<Double> pitch() {
        return Optional.ofNullable(this.pitch);
    }
    /**
     * @return Speaking rate/speed, in the range [0.25, 4.0].
     * 
     */
    public Optional<Double> speakingRate() {
        return Optional.ofNullable(this.speakingRate);
    }
    /**
     * @return The desired voice of the synthesized audio.
     * Structure is documented below.
     * 
     */
    public Optional<ConversationProfileTtsConfigVoice> voice() {
        return Optional.ofNullable(this.voice);
    }
    /**
     * @return Volume gain (in dB) of the normal native volume supported by the specific voice.
     * 
     */
    public Optional<Double> volumeGainDb() {
        return Optional.ofNullable(this.volumeGainDb);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConversationProfileTtsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> effectsProfileIds;
        private @Nullable Double pitch;
        private @Nullable Double speakingRate;
        private @Nullable ConversationProfileTtsConfigVoice voice;
        private @Nullable Double volumeGainDb;
        public Builder() {}
        public Builder(ConversationProfileTtsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.effectsProfileIds = defaults.effectsProfileIds;
    	      this.pitch = defaults.pitch;
    	      this.speakingRate = defaults.speakingRate;
    	      this.voice = defaults.voice;
    	      this.volumeGainDb = defaults.volumeGainDb;
        }

        @CustomType.Setter
        public Builder effectsProfileIds(@Nullable List<String> effectsProfileIds) {

            this.effectsProfileIds = effectsProfileIds;
            return this;
        }
        public Builder effectsProfileIds(String... effectsProfileIds) {
            return effectsProfileIds(List.of(effectsProfileIds));
        }
        @CustomType.Setter
        public Builder pitch(@Nullable Double pitch) {

            this.pitch = pitch;
            return this;
        }
        @CustomType.Setter
        public Builder speakingRate(@Nullable Double speakingRate) {

            this.speakingRate = speakingRate;
            return this;
        }
        @CustomType.Setter
        public Builder voice(@Nullable ConversationProfileTtsConfigVoice voice) {

            this.voice = voice;
            return this;
        }
        @CustomType.Setter
        public Builder volumeGainDb(@Nullable Double volumeGainDb) {

            this.volumeGainDb = volumeGainDb;
            return this;
        }
        public ConversationProfileTtsConfig build() {
            final var _resultValue = new ConversationProfileTtsConfig();
            _resultValue.effectsProfileIds = effectsProfileIds;
            _resultValue.pitch = pitch;
            _resultValue.speakingRate = speakingRate;
            _resultValue.voice = voice;
            _resultValue.volumeGainDb = volumeGainDb;
            return _resultValue;
        }
    }
}
