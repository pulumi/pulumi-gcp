// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRegionDiskPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRegionDiskPlainArgs Empty = new GetRegionDiskPlainArgs();

    /**
     * The name of a specific disk.
     * 
     * ***
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of a specific disk.
     * 
     * ***
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A reference to the region where the disk resides.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return A reference to the region where the disk resides.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    private GetRegionDiskPlainArgs() {}

    private GetRegionDiskPlainArgs(GetRegionDiskPlainArgs $) {
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegionDiskPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegionDiskPlainArgs $;

        public Builder() {
            $ = new GetRegionDiskPlainArgs();
        }

        public Builder(GetRegionDiskPlainArgs defaults) {
            $ = new GetRegionDiskPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of a specific disk.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param region A reference to the region where the disk resides.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        public GetRegionDiskPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetRegionDiskPlainArgs", "name");
            }
            return $;
        }
    }

}
