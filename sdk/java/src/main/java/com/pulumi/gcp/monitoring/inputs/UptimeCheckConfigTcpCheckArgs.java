// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.monitoring.inputs.UptimeCheckConfigTcpCheckPingConfigArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UptimeCheckConfigTcpCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final UptimeCheckConfigTcpCheckArgs Empty = new UptimeCheckConfigTcpCheckArgs();

    /**
     * Contains information needed to add pings to a TCP check.
     * Structure is documented below.
     * 
     */
    @Import(name="pingConfig")
    private @Nullable Output<UptimeCheckConfigTcpCheckPingConfigArgs> pingConfig;

    /**
     * @return Contains information needed to add pings to a TCP check.
     * Structure is documented below.
     * 
     */
    public Optional<Output<UptimeCheckConfigTcpCheckPingConfigArgs>> pingConfig() {
        return Optional.ofNullable(this.pingConfig);
    }

    /**
     * The port to the page to run the check against. Will be combined with host (specified within the `monitored_resource`) to construct the full URL.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port to the page to run the check against. Will be combined with host (specified within the `monitored_resource`) to construct the full URL.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    private UptimeCheckConfigTcpCheckArgs() {}

    private UptimeCheckConfigTcpCheckArgs(UptimeCheckConfigTcpCheckArgs $) {
        this.pingConfig = $.pingConfig;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UptimeCheckConfigTcpCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UptimeCheckConfigTcpCheckArgs $;

        public Builder() {
            $ = new UptimeCheckConfigTcpCheckArgs();
        }

        public Builder(UptimeCheckConfigTcpCheckArgs defaults) {
            $ = new UptimeCheckConfigTcpCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pingConfig Contains information needed to add pings to a TCP check.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pingConfig(@Nullable Output<UptimeCheckConfigTcpCheckPingConfigArgs> pingConfig) {
            $.pingConfig = pingConfig;
            return this;
        }

        /**
         * @param pingConfig Contains information needed to add pings to a TCP check.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pingConfig(UptimeCheckConfigTcpCheckPingConfigArgs pingConfig) {
            return pingConfig(Output.of(pingConfig));
        }

        /**
         * @param port The port to the page to run the check against. Will be combined with host (specified within the `monitored_resource`) to construct the full URL.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to the page to run the check against. Will be combined with host (specified within the `monitored_resource`) to construct the full URL.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public UptimeCheckConfigTcpCheckArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("UptimeCheckConfigTcpCheckArgs", "port");
            }
            return $;
        }
    }

}
