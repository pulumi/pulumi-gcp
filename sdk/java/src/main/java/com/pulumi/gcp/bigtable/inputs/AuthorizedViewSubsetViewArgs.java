// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigtable.inputs.AuthorizedViewSubsetViewFamilySubsetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizedViewSubsetViewArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizedViewSubsetViewArgs Empty = new AuthorizedViewSubsetViewArgs();

    /**
     * A group of column family subsets to be included in the authorized view. This can be specified multiple times. Structure is documented below.
     * 
     * ***
     * 
     */
    @Import(name="familySubsets")
    private @Nullable Output<List<AuthorizedViewSubsetViewFamilySubsetArgs>> familySubsets;

    /**
     * @return A group of column family subsets to be included in the authorized view. This can be specified multiple times. Structure is documented below.
     * 
     * ***
     * 
     */
    public Optional<Output<List<AuthorizedViewSubsetViewFamilySubsetArgs>>> familySubsets() {
        return Optional.ofNullable(this.familySubsets);
    }

    /**
     * A list of Base64-encoded row prefixes to be included in the authorized view. To provide access to all rows, include the empty string as a prefix (&#34;&#34;).
     * 
     */
    @Import(name="rowPrefixes")
    private @Nullable Output<List<String>> rowPrefixes;

    /**
     * @return A list of Base64-encoded row prefixes to be included in the authorized view. To provide access to all rows, include the empty string as a prefix (&#34;&#34;).
     * 
     */
    public Optional<Output<List<String>>> rowPrefixes() {
        return Optional.ofNullable(this.rowPrefixes);
    }

    private AuthorizedViewSubsetViewArgs() {}

    private AuthorizedViewSubsetViewArgs(AuthorizedViewSubsetViewArgs $) {
        this.familySubsets = $.familySubsets;
        this.rowPrefixes = $.rowPrefixes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizedViewSubsetViewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizedViewSubsetViewArgs $;

        public Builder() {
            $ = new AuthorizedViewSubsetViewArgs();
        }

        public Builder(AuthorizedViewSubsetViewArgs defaults) {
            $ = new AuthorizedViewSubsetViewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param familySubsets A group of column family subsets to be included in the authorized view. This can be specified multiple times. Structure is documented below.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder familySubsets(@Nullable Output<List<AuthorizedViewSubsetViewFamilySubsetArgs>> familySubsets) {
            $.familySubsets = familySubsets;
            return this;
        }

        /**
         * @param familySubsets A group of column family subsets to be included in the authorized view. This can be specified multiple times. Structure is documented below.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder familySubsets(List<AuthorizedViewSubsetViewFamilySubsetArgs> familySubsets) {
            return familySubsets(Output.of(familySubsets));
        }

        /**
         * @param familySubsets A group of column family subsets to be included in the authorized view. This can be specified multiple times. Structure is documented below.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder familySubsets(AuthorizedViewSubsetViewFamilySubsetArgs... familySubsets) {
            return familySubsets(List.of(familySubsets));
        }

        /**
         * @param rowPrefixes A list of Base64-encoded row prefixes to be included in the authorized view. To provide access to all rows, include the empty string as a prefix (&#34;&#34;).
         * 
         * @return builder
         * 
         */
        public Builder rowPrefixes(@Nullable Output<List<String>> rowPrefixes) {
            $.rowPrefixes = rowPrefixes;
            return this;
        }

        /**
         * @param rowPrefixes A list of Base64-encoded row prefixes to be included in the authorized view. To provide access to all rows, include the empty string as a prefix (&#34;&#34;).
         * 
         * @return builder
         * 
         */
        public Builder rowPrefixes(List<String> rowPrefixes) {
            return rowPrefixes(Output.of(rowPrefixes));
        }

        /**
         * @param rowPrefixes A list of Base64-encoded row prefixes to be included in the authorized view. To provide access to all rows, include the empty string as a prefix (&#34;&#34;).
         * 
         * @return builder
         * 
         */
        public Builder rowPrefixes(String... rowPrefixes) {
            return rowPrefixes(List.of(rowPrefixes));
        }

        public AuthorizedViewSubsetViewArgs build() {
            return $;
        }
    }

}
