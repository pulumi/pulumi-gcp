// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InternalRangeAllocationOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InternalRangeAllocationOptionsArgs Empty = new InternalRangeAllocationOptionsArgs();

    /**
     * Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
     * Possible values are: `RANDOM`, `FIRST_AVAILABLE`, `RANDOM_FIRST_N_AVAILABLE`, `FIRST_SMALLEST_FITTING`.
     * 
     */
    @Import(name="allocationStrategy")
    private @Nullable Output<String> allocationStrategy;

    /**
     * @return Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
     * Possible values are: `RANDOM`, `FIRST_AVAILABLE`, `RANDOM_FIRST_N_AVAILABLE`, `FIRST_SMALLEST_FITTING`.
     * 
     */
    public Optional<Output<String>> allocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }

    /**
     * Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
     * in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
     * 
     */
    @Import(name="firstAvailableRangesLookupSize")
    private @Nullable Output<Integer> firstAvailableRangesLookupSize;

    /**
     * @return Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
     * in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
     * 
     */
    public Optional<Output<Integer>> firstAvailableRangesLookupSize() {
        return Optional.ofNullable(this.firstAvailableRangesLookupSize);
    }

    private InternalRangeAllocationOptionsArgs() {}

    private InternalRangeAllocationOptionsArgs(InternalRangeAllocationOptionsArgs $) {
        this.allocationStrategy = $.allocationStrategy;
        this.firstAvailableRangesLookupSize = $.firstAvailableRangesLookupSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InternalRangeAllocationOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InternalRangeAllocationOptionsArgs $;

        public Builder() {
            $ = new InternalRangeAllocationOptionsArgs();
        }

        public Builder(InternalRangeAllocationOptionsArgs defaults) {
            $ = new InternalRangeAllocationOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationStrategy Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
         * Possible values are: `RANDOM`, `FIRST_AVAILABLE`, `RANDOM_FIRST_N_AVAILABLE`, `FIRST_SMALLEST_FITTING`.
         * 
         * @return builder
         * 
         */
        public Builder allocationStrategy(@Nullable Output<String> allocationStrategy) {
            $.allocationStrategy = allocationStrategy;
            return this;
        }

        /**
         * @param allocationStrategy Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
         * Possible values are: `RANDOM`, `FIRST_AVAILABLE`, `RANDOM_FIRST_N_AVAILABLE`, `FIRST_SMALLEST_FITTING`.
         * 
         * @return builder
         * 
         */
        public Builder allocationStrategy(String allocationStrategy) {
            return allocationStrategy(Output.of(allocationStrategy));
        }

        /**
         * @param firstAvailableRangesLookupSize Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
         * in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailableRangesLookupSize(@Nullable Output<Integer> firstAvailableRangesLookupSize) {
            $.firstAvailableRangesLookupSize = firstAvailableRangesLookupSize;
            return this;
        }

        /**
         * @param firstAvailableRangesLookupSize Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
         * in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
         * 
         * @return builder
         * 
         */
        public Builder firstAvailableRangesLookupSize(Integer firstAvailableRangesLookupSize) {
            return firstAvailableRangesLookupSize(Output.of(firstAvailableRangesLookupSize));
        }

        public InternalRangeAllocationOptionsArgs build() {
            return $;
        }
    }

}
