// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxGeneratorModelParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxGeneratorModelParameterArgs Empty = new CxGeneratorModelParameterArgs();

    /**
     * The maximum number of tokens to generate.
     * 
     */
    @Import(name="maxDecodeSteps")
    private @Nullable Output<Integer> maxDecodeSteps;

    /**
     * @return The maximum number of tokens to generate.
     * 
     */
    public Optional<Output<Integer>> maxDecodeSteps() {
        return Optional.ofNullable(this.maxDecodeSteps);
    }

    /**
     * The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
     * Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
     * 
     */
    @Import(name="temperature")
    private @Nullable Output<Double> temperature;

    /**
     * @return The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
     * Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
     * 
     */
    public Optional<Output<Double>> temperature() {
        return Optional.ofNullable(this.temperature);
    }

    /**
     * If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
     * Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
     * 
     */
    @Import(name="topK")
    private @Nullable Output<Integer> topK;

    /**
     * @return If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
     * Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
     * 
     */
    public Optional<Output<Integer>> topK() {
        return Optional.ofNullable(this.topK);
    }

    /**
     * If set, only the tokens comprising the top topP probability mass are considered.
     * If both topP and topK are set, topP will be used for further refining candidates selected with topK.
     * Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
     * 
     */
    @Import(name="topP")
    private @Nullable Output<Double> topP;

    /**
     * @return If set, only the tokens comprising the top topP probability mass are considered.
     * If both topP and topK are set, topP will be used for further refining candidates selected with topK.
     * Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
     * 
     */
    public Optional<Output<Double>> topP() {
        return Optional.ofNullable(this.topP);
    }

    private CxGeneratorModelParameterArgs() {}

    private CxGeneratorModelParameterArgs(CxGeneratorModelParameterArgs $) {
        this.maxDecodeSteps = $.maxDecodeSteps;
        this.temperature = $.temperature;
        this.topK = $.topK;
        this.topP = $.topP;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxGeneratorModelParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxGeneratorModelParameterArgs $;

        public Builder() {
            $ = new CxGeneratorModelParameterArgs();
        }

        public Builder(CxGeneratorModelParameterArgs defaults) {
            $ = new CxGeneratorModelParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxDecodeSteps The maximum number of tokens to generate.
         * 
         * @return builder
         * 
         */
        public Builder maxDecodeSteps(@Nullable Output<Integer> maxDecodeSteps) {
            $.maxDecodeSteps = maxDecodeSteps;
            return this;
        }

        /**
         * @param maxDecodeSteps The maximum number of tokens to generate.
         * 
         * @return builder
         * 
         */
        public Builder maxDecodeSteps(Integer maxDecodeSteps) {
            return maxDecodeSteps(Output.of(maxDecodeSteps));
        }

        /**
         * @param temperature The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
         * Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
         * 
         * @return builder
         * 
         */
        public Builder temperature(@Nullable Output<Double> temperature) {
            $.temperature = temperature;
            return this;
        }

        /**
         * @param temperature The temperature used for sampling. Temperature sampling occurs after both topP and topK have been applied.
         * Valid range: [0.0, 1.0] Low temperature = less random. High temperature = more random.
         * 
         * @return builder
         * 
         */
        public Builder temperature(Double temperature) {
            return temperature(Output.of(temperature));
        }

        /**
         * @param topK If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
         * Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
         * 
         * @return builder
         * 
         */
        public Builder topK(@Nullable Output<Integer> topK) {
            $.topK = topK;
            return this;
        }

        /**
         * @param topK If set, the sampling process in each step is limited to the topK tokens with highest probabilities.
         * Valid range: [1, 40] or 1000+. Small topK = less random. Large topK = more random.
         * 
         * @return builder
         * 
         */
        public Builder topK(Integer topK) {
            return topK(Output.of(topK));
        }

        /**
         * @param topP If set, only the tokens comprising the top topP probability mass are considered.
         * If both topP and topK are set, topP will be used for further refining candidates selected with topK.
         * Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
         * 
         * @return builder
         * 
         */
        public Builder topP(@Nullable Output<Double> topP) {
            $.topP = topP;
            return this;
        }

        /**
         * @param topP If set, only the tokens comprising the top topP probability mass are considered.
         * If both topP and topK are set, topP will be used for further refining candidates selected with topK.
         * Valid range: (0.0, 1.0]. Small topP = less random. Large topP = more random.
         * 
         * @return builder
         * 
         */
        public Builder topP(Double topP) {
            return topP(Output.of(topP));
        }

        public CxGeneratorModelParameterArgs build() {
            return $;
        }
    }

}
