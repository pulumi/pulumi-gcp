// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig {
    /**
     * @return Confidence threshold above which Adaptive Protection&#39;s auto-deploy takes actions.
     * 
     */
    private @Nullable Double autoDeployConfidenceThreshold;
    /**
     * @return Duration over which Adaptive Protection&#39;s auto-deployed actions last.
     * 
     */
    private @Nullable Integer autoDeployExpirationSec;
    /**
     * @return Impacted baseline threshold below which Adaptive Protection&#39;s auto-deploy takes actions.
     * 
     */
    private @Nullable Double autoDeployImpactedBaselineThreshold;
    /**
     * @return Load threshold above which Adaptive Protection automatically deploy threshold based on the backend load threshold and detect a new rule during an alerted attack.
     * 
     */
    private @Nullable Double autoDeployLoadThreshold;
    /**
     * @return Detection threshold based on absolute QPS.
     * 
     */
    private @Nullable Double detectionAbsoluteQps;
    /**
     * @return Detection threshold based on the backend service&#39;s load.
     * 
     */
    private @Nullable Double detectionLoadThreshold;
    /**
     * @return Detection threshold based on QPS relative to the average of baseline traffic.
     * 
     */
    private @Nullable Double detectionRelativeToBaselineQps;
    /**
     * @return The name of config. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the security policy.
     * 
     */
    private String name;
    /**
     * @return Configuration options for enabling Adaptive Protection to work on the specified service granularity. Structure is documented below.
     * 
     */
    private @Nullable List<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig> trafficGranularityConfigs;

    private SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig() {}
    /**
     * @return Confidence threshold above which Adaptive Protection&#39;s auto-deploy takes actions.
     * 
     */
    public Optional<Double> autoDeployConfidenceThreshold() {
        return Optional.ofNullable(this.autoDeployConfidenceThreshold);
    }
    /**
     * @return Duration over which Adaptive Protection&#39;s auto-deployed actions last.
     * 
     */
    public Optional<Integer> autoDeployExpirationSec() {
        return Optional.ofNullable(this.autoDeployExpirationSec);
    }
    /**
     * @return Impacted baseline threshold below which Adaptive Protection&#39;s auto-deploy takes actions.
     * 
     */
    public Optional<Double> autoDeployImpactedBaselineThreshold() {
        return Optional.ofNullable(this.autoDeployImpactedBaselineThreshold);
    }
    /**
     * @return Load threshold above which Adaptive Protection automatically deploy threshold based on the backend load threshold and detect a new rule during an alerted attack.
     * 
     */
    public Optional<Double> autoDeployLoadThreshold() {
        return Optional.ofNullable(this.autoDeployLoadThreshold);
    }
    /**
     * @return Detection threshold based on absolute QPS.
     * 
     */
    public Optional<Double> detectionAbsoluteQps() {
        return Optional.ofNullable(this.detectionAbsoluteQps);
    }
    /**
     * @return Detection threshold based on the backend service&#39;s load.
     * 
     */
    public Optional<Double> detectionLoadThreshold() {
        return Optional.ofNullable(this.detectionLoadThreshold);
    }
    /**
     * @return Detection threshold based on QPS relative to the average of baseline traffic.
     * 
     */
    public Optional<Double> detectionRelativeToBaselineQps() {
        return Optional.ofNullable(this.detectionRelativeToBaselineQps);
    }
    /**
     * @return The name of config. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the security policy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Configuration options for enabling Adaptive Protection to work on the specified service granularity. Structure is documented below.
     * 
     */
    public List<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig> trafficGranularityConfigs() {
        return this.trafficGranularityConfigs == null ? List.of() : this.trafficGranularityConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double autoDeployConfidenceThreshold;
        private @Nullable Integer autoDeployExpirationSec;
        private @Nullable Double autoDeployImpactedBaselineThreshold;
        private @Nullable Double autoDeployLoadThreshold;
        private @Nullable Double detectionAbsoluteQps;
        private @Nullable Double detectionLoadThreshold;
        private @Nullable Double detectionRelativeToBaselineQps;
        private String name;
        private @Nullable List<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig> trafficGranularityConfigs;
        public Builder() {}
        public Builder(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDeployConfidenceThreshold = defaults.autoDeployConfidenceThreshold;
    	      this.autoDeployExpirationSec = defaults.autoDeployExpirationSec;
    	      this.autoDeployImpactedBaselineThreshold = defaults.autoDeployImpactedBaselineThreshold;
    	      this.autoDeployLoadThreshold = defaults.autoDeployLoadThreshold;
    	      this.detectionAbsoluteQps = defaults.detectionAbsoluteQps;
    	      this.detectionLoadThreshold = defaults.detectionLoadThreshold;
    	      this.detectionRelativeToBaselineQps = defaults.detectionRelativeToBaselineQps;
    	      this.name = defaults.name;
    	      this.trafficGranularityConfigs = defaults.trafficGranularityConfigs;
        }

        @CustomType.Setter
        public Builder autoDeployConfidenceThreshold(@Nullable Double autoDeployConfidenceThreshold) {

            this.autoDeployConfidenceThreshold = autoDeployConfidenceThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder autoDeployExpirationSec(@Nullable Integer autoDeployExpirationSec) {

            this.autoDeployExpirationSec = autoDeployExpirationSec;
            return this;
        }
        @CustomType.Setter
        public Builder autoDeployImpactedBaselineThreshold(@Nullable Double autoDeployImpactedBaselineThreshold) {

            this.autoDeployImpactedBaselineThreshold = autoDeployImpactedBaselineThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder autoDeployLoadThreshold(@Nullable Double autoDeployLoadThreshold) {

            this.autoDeployLoadThreshold = autoDeployLoadThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder detectionAbsoluteQps(@Nullable Double detectionAbsoluteQps) {

            this.detectionAbsoluteQps = detectionAbsoluteQps;
            return this;
        }
        @CustomType.Setter
        public Builder detectionLoadThreshold(@Nullable Double detectionLoadThreshold) {

            this.detectionLoadThreshold = detectionLoadThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder detectionRelativeToBaselineQps(@Nullable Double detectionRelativeToBaselineQps) {

            this.detectionRelativeToBaselineQps = detectionRelativeToBaselineQps;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder trafficGranularityConfigs(@Nullable List<SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig> trafficGranularityConfigs) {

            this.trafficGranularityConfigs = trafficGranularityConfigs;
            return this;
        }
        public Builder trafficGranularityConfigs(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig... trafficGranularityConfigs) {
            return trafficGranularityConfigs(List.of(trafficGranularityConfigs));
        }
        public SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig build() {
            final var _resultValue = new SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig();
            _resultValue.autoDeployConfidenceThreshold = autoDeployConfidenceThreshold;
            _resultValue.autoDeployExpirationSec = autoDeployExpirationSec;
            _resultValue.autoDeployImpactedBaselineThreshold = autoDeployImpactedBaselineThreshold;
            _resultValue.autoDeployLoadThreshold = autoDeployLoadThreshold;
            _resultValue.detectionAbsoluteQps = detectionAbsoluteQps;
            _resultValue.detectionLoadThreshold = detectionLoadThreshold;
            _resultValue.detectionRelativeToBaselineQps = detectionRelativeToBaselineQps;
            _resultValue.name = name;
            _resultValue.trafficGranularityConfigs = trafficGranularityConfigs;
            return _resultValue;
        }
    }
}
