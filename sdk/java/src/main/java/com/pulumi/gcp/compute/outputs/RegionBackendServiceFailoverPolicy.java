// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionBackendServiceFailoverPolicy {
    /**
     * @return On failover or failback, this field indicates whether connection drain
     * will be honored. Setting this to true has the following effect: connections
     * to the old active pool are not drained. Connections to the new active pool
     * use the timeout of 10 min (currently fixed). Setting to false has the
     * following effect: both old and new connections will have a drain timeout
     * of 10 min.
     * This can be set to true only if the protocol is TCP.
     * The default is false.
     * 
     */
    private @Nullable Boolean disableConnectionDrainOnFailover;
    /**
     * @return This option is used only when no healthy VMs are detected in the primary
     * and backup instance groups. When set to true, traffic is dropped. When
     * set to false, new connections are sent across all VMs in the primary group.
     * The default is false.
     * 
     */
    private @Nullable Boolean dropTrafficIfUnhealthy;
    /**
     * @return The value of the field must be in [0, 1]. If the ratio of the healthy
     * VMs in the primary backend is at or below this number, traffic arriving
     * at the load-balanced IP will be directed to the failover backend.
     * In case where &#39;failoverRatio&#39; is not set or all the VMs in the backup
     * backend are unhealthy, the traffic will be directed back to the primary
     * backend in the &#34;force&#34; mode, where traffic will be spread to the healthy
     * VMs with the best effort, or to all VMs when no VM is healthy.
     * This field is only used with l4 load balancing.
     * 
     */
    private @Nullable Double failoverRatio;

    private RegionBackendServiceFailoverPolicy() {}
    /**
     * @return On failover or failback, this field indicates whether connection drain
     * will be honored. Setting this to true has the following effect: connections
     * to the old active pool are not drained. Connections to the new active pool
     * use the timeout of 10 min (currently fixed). Setting to false has the
     * following effect: both old and new connections will have a drain timeout
     * of 10 min.
     * This can be set to true only if the protocol is TCP.
     * The default is false.
     * 
     */
    public Optional<Boolean> disableConnectionDrainOnFailover() {
        return Optional.ofNullable(this.disableConnectionDrainOnFailover);
    }
    /**
     * @return This option is used only when no healthy VMs are detected in the primary
     * and backup instance groups. When set to true, traffic is dropped. When
     * set to false, new connections are sent across all VMs in the primary group.
     * The default is false.
     * 
     */
    public Optional<Boolean> dropTrafficIfUnhealthy() {
        return Optional.ofNullable(this.dropTrafficIfUnhealthy);
    }
    /**
     * @return The value of the field must be in [0, 1]. If the ratio of the healthy
     * VMs in the primary backend is at or below this number, traffic arriving
     * at the load-balanced IP will be directed to the failover backend.
     * In case where &#39;failoverRatio&#39; is not set or all the VMs in the backup
     * backend are unhealthy, the traffic will be directed back to the primary
     * backend in the &#34;force&#34; mode, where traffic will be spread to the healthy
     * VMs with the best effort, or to all VMs when no VM is healthy.
     * This field is only used with l4 load balancing.
     * 
     */
    public Optional<Double> failoverRatio() {
        return Optional.ofNullable(this.failoverRatio);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceFailoverPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean disableConnectionDrainOnFailover;
        private @Nullable Boolean dropTrafficIfUnhealthy;
        private @Nullable Double failoverRatio;
        public Builder() {}
        public Builder(RegionBackendServiceFailoverPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableConnectionDrainOnFailover = defaults.disableConnectionDrainOnFailover;
    	      this.dropTrafficIfUnhealthy = defaults.dropTrafficIfUnhealthy;
    	      this.failoverRatio = defaults.failoverRatio;
        }

        @CustomType.Setter
        public Builder disableConnectionDrainOnFailover(@Nullable Boolean disableConnectionDrainOnFailover) {
            this.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
            return this;
        }
        @CustomType.Setter
        public Builder dropTrafficIfUnhealthy(@Nullable Boolean dropTrafficIfUnhealthy) {
            this.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
            return this;
        }
        @CustomType.Setter
        public Builder failoverRatio(@Nullable Double failoverRatio) {
            this.failoverRatio = failoverRatio;
            return this;
        }
        public RegionBackendServiceFailoverPolicy build() {
            final var o = new RegionBackendServiceFailoverPolicy();
            o.disableConnectionDrainOnFailover = disableConnectionDrainOnFailover;
            o.dropTrafficIfUnhealthy = dropTrafficIfUnhealthy;
            o.failoverRatio = failoverRatio;
            return o;
        }
    }
}
