// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetGrpcProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetGrpcProxyArgs Empty = new TargetGrpcProxyArgs();

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the resource. Provided by the client when the resource
     * is created. The name must be 1-63 characters long, and comply
     * with RFC1035. Specifically, the name must be 1-63 characters long
     * and match the regular expression `a-z?` which
     * means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource
     * is created. The name must be 1-63 characters long, and comply
     * with RFC1035. Specifically, the name must be 1-63 characters long
     * and match the regular expression `a-z?` which
     * means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * URL to the UrlMap resource that defines the mapping from URL to
     * the BackendService. The protocol field in the BackendService
     * must be set to GRPC.
     * 
     */
    @Import(name="urlMap")
    private @Nullable Output<String> urlMap;

    /**
     * @return URL to the UrlMap resource that defines the mapping from URL to
     * the BackendService. The protocol field in the BackendService
     * must be set to GRPC.
     * 
     */
    public Optional<Output<String>> urlMap() {
        return Optional.ofNullable(this.urlMap);
    }

    /**
     * If true, indicates that the BackendServices referenced by
     * the urlMap may be accessed by gRPC applications without using
     * a sidecar proxy. This will enable configuration checks on urlMap
     * and its referenced BackendServices to not allow unsupported features.
     * A gRPC application must use &#34;xds:///&#34; scheme in the target URI
     * of the service it is connecting to. If false, indicates that the
     * BackendServices referenced by the urlMap will be accessed by gRPC
     * applications via a sidecar proxy. In this case, a gRPC application
     * must not use &#34;xds:///&#34; scheme in the target URI of the service
     * it is connecting to
     * 
     */
    @Import(name="validateForProxyless")
    private @Nullable Output<Boolean> validateForProxyless;

    /**
     * @return If true, indicates that the BackendServices referenced by
     * the urlMap may be accessed by gRPC applications without using
     * a sidecar proxy. This will enable configuration checks on urlMap
     * and its referenced BackendServices to not allow unsupported features.
     * A gRPC application must use &#34;xds:///&#34; scheme in the target URI
     * of the service it is connecting to. If false, indicates that the
     * BackendServices referenced by the urlMap will be accessed by gRPC
     * applications via a sidecar proxy. In this case, a gRPC application
     * must not use &#34;xds:///&#34; scheme in the target URI of the service
     * it is connecting to
     * 
     */
    public Optional<Output<Boolean>> validateForProxyless() {
        return Optional.ofNullable(this.validateForProxyless);
    }

    private TargetGrpcProxyArgs() {}

    private TargetGrpcProxyArgs(TargetGrpcProxyArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.project = $.project;
        this.urlMap = $.urlMap;
        this.validateForProxyless = $.validateForProxyless;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetGrpcProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetGrpcProxyArgs $;

        public Builder() {
            $ = new TargetGrpcProxyArgs();
        }

        public Builder(TargetGrpcProxyArgs defaults) {
            $ = new TargetGrpcProxyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource
         * is created. The name must be 1-63 characters long, and comply
         * with RFC1035. Specifically, the name must be 1-63 characters long
         * and match the regular expression `a-z?` which
         * means the first character must be a lowercase letter, and all
         * following characters must be a dash, lowercase letter, or digit,
         * except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource
         * is created. The name must be 1-63 characters long, and comply
         * with RFC1035. Specifically, the name must be 1-63 characters long
         * and match the regular expression `a-z?` which
         * means the first character must be a lowercase letter, and all
         * following characters must be a dash, lowercase letter, or digit,
         * except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param urlMap URL to the UrlMap resource that defines the mapping from URL to
         * the BackendService. The protocol field in the BackendService
         * must be set to GRPC.
         * 
         * @return builder
         * 
         */
        public Builder urlMap(@Nullable Output<String> urlMap) {
            $.urlMap = urlMap;
            return this;
        }

        /**
         * @param urlMap URL to the UrlMap resource that defines the mapping from URL to
         * the BackendService. The protocol field in the BackendService
         * must be set to GRPC.
         * 
         * @return builder
         * 
         */
        public Builder urlMap(String urlMap) {
            return urlMap(Output.of(urlMap));
        }

        /**
         * @param validateForProxyless If true, indicates that the BackendServices referenced by
         * the urlMap may be accessed by gRPC applications without using
         * a sidecar proxy. This will enable configuration checks on urlMap
         * and its referenced BackendServices to not allow unsupported features.
         * A gRPC application must use &#34;xds:///&#34; scheme in the target URI
         * of the service it is connecting to. If false, indicates that the
         * BackendServices referenced by the urlMap will be accessed by gRPC
         * applications via a sidecar proxy. In this case, a gRPC application
         * must not use &#34;xds:///&#34; scheme in the target URI of the service
         * it is connecting to
         * 
         * @return builder
         * 
         */
        public Builder validateForProxyless(@Nullable Output<Boolean> validateForProxyless) {
            $.validateForProxyless = validateForProxyless;
            return this;
        }

        /**
         * @param validateForProxyless If true, indicates that the BackendServices referenced by
         * the urlMap may be accessed by gRPC applications without using
         * a sidecar proxy. This will enable configuration checks on urlMap
         * and its referenced BackendServices to not allow unsupported features.
         * A gRPC application must use &#34;xds:///&#34; scheme in the target URI
         * of the service it is connecting to. If false, indicates that the
         * BackendServices referenced by the urlMap will be accessed by gRPC
         * applications via a sidecar proxy. In this case, a gRPC application
         * must not use &#34;xds:///&#34; scheme in the target URI of the service
         * it is connecting to
         * 
         * @return builder
         * 
         */
        public Builder validateForProxyless(Boolean validateForProxyless) {
            return validateForProxyless(Output.of(validateForProxyless));
        }

        public TargetGrpcProxyArgs build() {
            return $;
        }
    }

}
