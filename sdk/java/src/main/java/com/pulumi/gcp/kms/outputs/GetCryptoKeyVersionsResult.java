// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.outputs.GetCryptoKeyVersionsPublicKey;
import com.pulumi.gcp.kms.outputs.GetCryptoKeyVersionsVersion;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCryptoKeyVersionsResult {
    private String cryptoKey;
    private @Nullable String filter;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetCryptoKeyVersionsPublicKey> publicKeys;
    /**
     * @return A list of all the retrieved crypto key versions from the provided crypto key. This list is influenced by the provided filter argument.
     * 
     */
    private List<GetCryptoKeyVersionsVersion> versions;

    private GetCryptoKeyVersionsResult() {}
    public String cryptoKey() {
        return this.cryptoKey;
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetCryptoKeyVersionsPublicKey> publicKeys() {
        return this.publicKeys;
    }
    /**
     * @return A list of all the retrieved crypto key versions from the provided crypto key. This list is influenced by the provided filter argument.
     * 
     */
    public List<GetCryptoKeyVersionsVersion> versions() {
        return this.versions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoKeyVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cryptoKey;
        private @Nullable String filter;
        private String id;
        private List<GetCryptoKeyVersionsPublicKey> publicKeys;
        private List<GetCryptoKeyVersionsVersion> versions;
        public Builder() {}
        public Builder(GetCryptoKeyVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cryptoKey = defaults.cryptoKey;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.publicKeys = defaults.publicKeys;
    	      this.versions = defaults.versions;
        }

        @CustomType.Setter
        public Builder cryptoKey(String cryptoKey) {
            if (cryptoKey == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsResult", "cryptoKey");
            }
            this.cryptoKey = cryptoKey;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeys(List<GetCryptoKeyVersionsPublicKey> publicKeys) {
            if (publicKeys == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsResult", "publicKeys");
            }
            this.publicKeys = publicKeys;
            return this;
        }
        public Builder publicKeys(GetCryptoKeyVersionsPublicKey... publicKeys) {
            return publicKeys(List.of(publicKeys));
        }
        @CustomType.Setter
        public Builder versions(List<GetCryptoKeyVersionsVersion> versions) {
            if (versions == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsResult", "versions");
            }
            this.versions = versions;
            return this;
        }
        public Builder versions(GetCryptoKeyVersionsVersion... versions) {
            return versions(List.of(versions));
        }
        public GetCryptoKeyVersionsResult build() {
            final var _resultValue = new GetCryptoKeyVersionsResult();
            _resultValue.cryptoKey = cryptoKey;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.publicKeys = publicKeys;
            _resultValue.versions = versions;
            return _resultValue;
        }
    }
}
