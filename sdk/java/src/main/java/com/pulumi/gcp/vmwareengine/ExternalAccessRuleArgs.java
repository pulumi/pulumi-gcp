// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vmwareengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vmwareengine.inputs.ExternalAccessRuleDestinationIpRangeArgs;
import com.pulumi.gcp.vmwareengine.inputs.ExternalAccessRuleSourceIpRangeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExternalAccessRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExternalAccessRuleArgs Empty = new ExternalAccessRuleArgs();

    /**
     * The action that the external access rule performs.
     * Possible values are: `ALLOW`, `DENY`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action that the external access rule performs.
     * Possible values are: `ALLOW`, `DENY`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * User-provided description for the external access rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description for the external access rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If destination ranges are specified, the external access rule applies only to
     * traffic that has a destination IP address in these ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationIpRanges", required=true)
    private Output<List<ExternalAccessRuleDestinationIpRangeArgs>> destinationIpRanges;

    /**
     * @return If destination ranges are specified, the external access rule applies only to
     * traffic that has a destination IP address in these ranges.
     * Structure is documented below.
     * 
     */
    public Output<List<ExternalAccessRuleDestinationIpRangeArgs>> destinationIpRanges() {
        return this.destinationIpRanges;
    }

    /**
     * A list of destination ports to which the external access rule applies.
     * 
     */
    @Import(name="destinationPorts", required=true)
    private Output<List<String>> destinationPorts;

    /**
     * @return A list of destination ports to which the external access rule applies.
     * 
     */
    public Output<List<String>> destinationPorts() {
        return this.destinationPorts;
    }

    /**
     * The IP protocol to which the external access rule applies.
     * 
     */
    @Import(name="ipProtocol", required=true)
    private Output<String> ipProtocol;

    /**
     * @return The IP protocol to which the external access rule applies.
     * 
     */
    public Output<String> ipProtocol() {
        return this.ipProtocol;
    }

    /**
     * The ID of the external access rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ID of the external access rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The resource name of the network policy.
     * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
     * For example: projects/my-project/locations/us-west1-a/networkPolicies/my-policy
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return The resource name of the network policy.
     * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
     * For example: projects/my-project/locations/us-west1-a/networkPolicies/my-policy
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * External access rule priority, which determines the external access rule to use when multiple rules apply.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return External access rule priority, which determines the external access rule to use when multiple rules apply.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * If source ranges are specified, the external access rule applies only to
     * traffic that has a source IP address in these ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceIpRanges", required=true)
    private Output<List<ExternalAccessRuleSourceIpRangeArgs>> sourceIpRanges;

    /**
     * @return If source ranges are specified, the external access rule applies only to
     * traffic that has a source IP address in these ranges.
     * Structure is documented below.
     * 
     */
    public Output<List<ExternalAccessRuleSourceIpRangeArgs>> sourceIpRanges() {
        return this.sourceIpRanges;
    }

    /**
     * A list of source ports to which the external access rule applies.
     * 
     */
    @Import(name="sourcePorts", required=true)
    private Output<List<String>> sourcePorts;

    /**
     * @return A list of source ports to which the external access rule applies.
     * 
     */
    public Output<List<String>> sourcePorts() {
        return this.sourcePorts;
    }

    private ExternalAccessRuleArgs() {}

    private ExternalAccessRuleArgs(ExternalAccessRuleArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.destinationIpRanges = $.destinationIpRanges;
        this.destinationPorts = $.destinationPorts;
        this.ipProtocol = $.ipProtocol;
        this.name = $.name;
        this.parent = $.parent;
        this.priority = $.priority;
        this.sourceIpRanges = $.sourceIpRanges;
        this.sourcePorts = $.sourcePorts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExternalAccessRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExternalAccessRuleArgs $;

        public Builder() {
            $ = new ExternalAccessRuleArgs();
        }

        public Builder(ExternalAccessRuleArgs defaults) {
            $ = new ExternalAccessRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action that the external access rule performs.
         * Possible values are: `ALLOW`, `DENY`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action that the external access rule performs.
         * Possible values are: `ALLOW`, `DENY`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description User-provided description for the external access rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description for the external access rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationIpRanges If destination ranges are specified, the external access rule applies only to
         * traffic that has a destination IP address in these ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationIpRanges(Output<List<ExternalAccessRuleDestinationIpRangeArgs>> destinationIpRanges) {
            $.destinationIpRanges = destinationIpRanges;
            return this;
        }

        /**
         * @param destinationIpRanges If destination ranges are specified, the external access rule applies only to
         * traffic that has a destination IP address in these ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationIpRanges(List<ExternalAccessRuleDestinationIpRangeArgs> destinationIpRanges) {
            return destinationIpRanges(Output.of(destinationIpRanges));
        }

        /**
         * @param destinationIpRanges If destination ranges are specified, the external access rule applies only to
         * traffic that has a destination IP address in these ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationIpRanges(ExternalAccessRuleDestinationIpRangeArgs... destinationIpRanges) {
            return destinationIpRanges(List.of(destinationIpRanges));
        }

        /**
         * @param destinationPorts A list of destination ports to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder destinationPorts(Output<List<String>> destinationPorts) {
            $.destinationPorts = destinationPorts;
            return this;
        }

        /**
         * @param destinationPorts A list of destination ports to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder destinationPorts(List<String> destinationPorts) {
            return destinationPorts(Output.of(destinationPorts));
        }

        /**
         * @param destinationPorts A list of destination ports to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder destinationPorts(String... destinationPorts) {
            return destinationPorts(List.of(destinationPorts));
        }

        /**
         * @param ipProtocol The IP protocol to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(Output<String> ipProtocol) {
            $.ipProtocol = ipProtocol;
            return this;
        }

        /**
         * @param ipProtocol The IP protocol to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder ipProtocol(String ipProtocol) {
            return ipProtocol(Output.of(ipProtocol));
        }

        /**
         * @param name The ID of the external access rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ID of the external access rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent The resource name of the network policy.
         * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
         * For example: projects/my-project/locations/us-west1-a/networkPolicies/my-policy
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The resource name of the network policy.
         * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
         * For example: projects/my-project/locations/us-west1-a/networkPolicies/my-policy
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param priority External access rule priority, which determines the external access rule to use when multiple rules apply.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority External access rule priority, which determines the external access rule to use when multiple rules apply.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param sourceIpRanges If source ranges are specified, the external access rule applies only to
         * traffic that has a source IP address in these ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(Output<List<ExternalAccessRuleSourceIpRangeArgs>> sourceIpRanges) {
            $.sourceIpRanges = sourceIpRanges;
            return this;
        }

        /**
         * @param sourceIpRanges If source ranges are specified, the external access rule applies only to
         * traffic that has a source IP address in these ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(List<ExternalAccessRuleSourceIpRangeArgs> sourceIpRanges) {
            return sourceIpRanges(Output.of(sourceIpRanges));
        }

        /**
         * @param sourceIpRanges If source ranges are specified, the external access rule applies only to
         * traffic that has a source IP address in these ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpRanges(ExternalAccessRuleSourceIpRangeArgs... sourceIpRanges) {
            return sourceIpRanges(List.of(sourceIpRanges));
        }

        /**
         * @param sourcePorts A list of source ports to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(Output<List<String>> sourcePorts) {
            $.sourcePorts = sourcePorts;
            return this;
        }

        /**
         * @param sourcePorts A list of source ports to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(List<String> sourcePorts) {
            return sourcePorts(Output.of(sourcePorts));
        }

        /**
         * @param sourcePorts A list of source ports to which the external access rule applies.
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(String... sourcePorts) {
            return sourcePorts(List.of(sourcePorts));
        }

        public ExternalAccessRuleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "action");
            }
            if ($.destinationIpRanges == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "destinationIpRanges");
            }
            if ($.destinationPorts == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "destinationPorts");
            }
            if ($.ipProtocol == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "ipProtocol");
            }
            if ($.parent == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "parent");
            }
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "priority");
            }
            if ($.sourceIpRanges == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "sourceIpRanges");
            }
            if ($.sourcePorts == null) {
                throw new MissingRequiredPropertyException("ExternalAccessRuleArgs", "sourcePorts");
            }
            return $;
        }
    }

}
