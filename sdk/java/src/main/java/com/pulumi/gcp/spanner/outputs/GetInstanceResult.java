// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.spanner.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.spanner.outputs.GetInstanceAutoscalingConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    private List<GetInstanceAutoscalingConfig> autoscalingConfigs;
    private @Nullable String config;
    private String defaultBackupScheduleType;
    private @Nullable String displayName;
    private String edition;
    private Map<String,String> effectiveLabels;
    private Boolean forceDestroy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String instanceType;
    private Map<String,String> labels;
    private String name;
    private Integer numNodes;
    private Integer processingUnits;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String state;

    private GetInstanceResult() {}
    public List<GetInstanceAutoscalingConfig> autoscalingConfigs() {
        return this.autoscalingConfigs;
    }
    public Optional<String> config() {
        return Optional.ofNullable(this.config);
    }
    public String defaultBackupScheduleType() {
        return this.defaultBackupScheduleType;
    }
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public String edition() {
        return this.edition;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public Boolean forceDestroy() {
        return this.forceDestroy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instanceType() {
        return this.instanceType;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public Integer numNodes() {
        return this.numNodes;
    }
    public Integer processingUnits() {
        return this.processingUnits;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstanceAutoscalingConfig> autoscalingConfigs;
        private @Nullable String config;
        private String defaultBackupScheduleType;
        private @Nullable String displayName;
        private String edition;
        private Map<String,String> effectiveLabels;
        private Boolean forceDestroy;
        private String id;
        private String instanceType;
        private Map<String,String> labels;
        private String name;
        private Integer numNodes;
        private Integer processingUnits;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String state;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscalingConfigs = defaults.autoscalingConfigs;
    	      this.config = defaults.config;
    	      this.defaultBackupScheduleType = defaults.defaultBackupScheduleType;
    	      this.displayName = defaults.displayName;
    	      this.edition = defaults.edition;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.id = defaults.id;
    	      this.instanceType = defaults.instanceType;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.numNodes = defaults.numNodes;
    	      this.processingUnits = defaults.processingUnits;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder autoscalingConfigs(List<GetInstanceAutoscalingConfig> autoscalingConfigs) {
            if (autoscalingConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "autoscalingConfigs");
            }
            this.autoscalingConfigs = autoscalingConfigs;
            return this;
        }
        public Builder autoscalingConfigs(GetInstanceAutoscalingConfig... autoscalingConfigs) {
            return autoscalingConfigs(List.of(autoscalingConfigs));
        }
        @CustomType.Setter
        public Builder config(@Nullable String config) {

            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder defaultBackupScheduleType(String defaultBackupScheduleType) {
            if (defaultBackupScheduleType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "defaultBackupScheduleType");
            }
            this.defaultBackupScheduleType = defaultBackupScheduleType;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder edition(String edition) {
            if (edition == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "edition");
            }
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder forceDestroy(Boolean forceDestroy) {
            if (forceDestroy == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "forceDestroy");
            }
            this.forceDestroy = forceDestroy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numNodes(Integer numNodes) {
            if (numNodes == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "numNodes");
            }
            this.numNodes = numNodes;
            return this;
        }
        @CustomType.Setter
        public Builder processingUnits(Integer processingUnits) {
            if (processingUnits == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "processingUnits");
            }
            this.processingUnits = processingUnits;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.autoscalingConfigs = autoscalingConfigs;
            _resultValue.config = config;
            _resultValue.defaultBackupScheduleType = defaultBackupScheduleType;
            _resultValue.displayName = displayName;
            _resultValue.edition = edition;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.forceDestroy = forceDestroy;
            _resultValue.id = id;
            _resultValue.instanceType = instanceType;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.numNodes = numNodes;
            _resultValue.processingUnits = processingUnits;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
