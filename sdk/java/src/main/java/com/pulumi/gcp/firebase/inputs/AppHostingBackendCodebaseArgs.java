// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingBackendCodebaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingBackendCodebaseArgs Empty = new AppHostingBackendCodebaseArgs();

    /**
     * The resource name for the Developer Connect
     * [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
     * connected to this backend, in the format:
     * projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The resource name for the Developer Connect
     * [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
     * connected to this backend, in the format:
     * projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    /**
     * If `repository` is provided, the directory relative to the root of the
     * repository to use as the root for the deployed web app.
     * 
     */
    @Import(name="rootDirectory")
    private @Nullable Output<String> rootDirectory;

    /**
     * @return If `repository` is provided, the directory relative to the root of the
     * repository to use as the root for the deployed web app.
     * 
     */
    public Optional<Output<String>> rootDirectory() {
        return Optional.ofNullable(this.rootDirectory);
    }

    private AppHostingBackendCodebaseArgs() {}

    private AppHostingBackendCodebaseArgs(AppHostingBackendCodebaseArgs $) {
        this.repository = $.repository;
        this.rootDirectory = $.rootDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingBackendCodebaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingBackendCodebaseArgs $;

        public Builder() {
            $ = new AppHostingBackendCodebaseArgs();
        }

        public Builder(AppHostingBackendCodebaseArgs defaults) {
            $ = new AppHostingBackendCodebaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repository The resource name for the Developer Connect
         * [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
         * connected to this backend, in the format:
         * projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The resource name for the Developer Connect
         * [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
         * connected to this backend, in the format:
         * projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param rootDirectory If `repository` is provided, the directory relative to the root of the
         * repository to use as the root for the deployed web app.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(@Nullable Output<String> rootDirectory) {
            $.rootDirectory = rootDirectory;
            return this;
        }

        /**
         * @param rootDirectory If `repository` is provided, the directory relative to the root of the
         * repository to use as the root for the deployed web app.
         * 
         * @return builder
         * 
         */
        public Builder rootDirectory(String rootDirectory) {
            return rootDirectory(Output.of(rootDirectory));
        }

        public AppHostingBackendCodebaseArgs build() {
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("AppHostingBackendCodebaseArgs", "repository");
            }
            return $;
        }
    }

}
