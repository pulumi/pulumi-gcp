// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.migrationcenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.migrationcenter.inputs.PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs Empty = new PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs();

    /**
     * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with. Possible values: `COMMITMENT_PLAN_UNSPECIFIED`, `ON_DEMAND`, `COMMITMENT_1_YEAR`, `COMMITMENT_3_YEAR`
     * 
     */
    @Import(name="commitmentPlan")
    private @Nullable Output<String> commitmentPlan;

    /**
     * @return Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with. Possible values: `COMMITMENT_PLAN_UNSPECIFIED`, `ON_DEMAND`, `COMMITMENT_1_YEAR`, `COMMITMENT_3_YEAR`
     * 
     */
    public Optional<Output<String>> commitmentPlan() {
        return Optional.ofNullable(this.commitmentPlan);
    }

    /**
     * CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
     * 
     */
    @Import(name="cpuOvercommitRatio")
    private @Nullable Output<Double> cpuOvercommitRatio;

    /**
     * @return CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
     * 
     */
    public Optional<Output<Double>> cpuOvercommitRatio() {
        return Optional.ofNullable(this.cpuOvercommitRatio);
    }

    /**
     * Sole Tenancy nodes maintenance policy. Possible values: `HOST_MAINTENANCE_POLICY_UNSPECIFIED`, `HOST_MAINTENANCE_POLICY_DEFAULT`, `HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE`, `HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP`
     * 
     */
    @Import(name="hostMaintenancePolicy")
    private @Nullable Output<String> hostMaintenancePolicy;

    /**
     * @return Sole Tenancy nodes maintenance policy. Possible values: `HOST_MAINTENANCE_POLICY_UNSPECIFIED`, `HOST_MAINTENANCE_POLICY_DEFAULT`, `HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE`, `HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP`
     * 
     */
    public Optional<Output<String>> hostMaintenancePolicy() {
        return Optional.ofNullable(this.hostMaintenancePolicy);
    }

    /**
     * A list of sole tenant node types. An empty list means that all possible node types will be considered.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeTypes")
    private @Nullable Output<List<PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs>> nodeTypes;

    /**
     * @return A list of sole tenant node types. An empty list means that all possible node types will be considered.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs>>> nodeTypes() {
        return Optional.ofNullable(this.nodeTypes);
    }

    private PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs() {}

    private PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs(PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs $) {
        this.commitmentPlan = $.commitmentPlan;
        this.cpuOvercommitRatio = $.cpuOvercommitRatio;
        this.hostMaintenancePolicy = $.hostMaintenancePolicy;
        this.nodeTypes = $.nodeTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs $;

        public Builder() {
            $ = new PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs();
        }

        public Builder(PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs defaults) {
            $ = new PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commitmentPlan Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with. Possible values: `COMMITMENT_PLAN_UNSPECIFIED`, `ON_DEMAND`, `COMMITMENT_1_YEAR`, `COMMITMENT_3_YEAR`
         * 
         * @return builder
         * 
         */
        public Builder commitmentPlan(@Nullable Output<String> commitmentPlan) {
            $.commitmentPlan = commitmentPlan;
            return this;
        }

        /**
         * @param commitmentPlan Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with. Possible values: `COMMITMENT_PLAN_UNSPECIFIED`, `ON_DEMAND`, `COMMITMENT_1_YEAR`, `COMMITMENT_3_YEAR`
         * 
         * @return builder
         * 
         */
        public Builder commitmentPlan(String commitmentPlan) {
            return commitmentPlan(Output.of(commitmentPlan));
        }

        /**
         * @param cpuOvercommitRatio CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder cpuOvercommitRatio(@Nullable Output<Double> cpuOvercommitRatio) {
            $.cpuOvercommitRatio = cpuOvercommitRatio;
            return this;
        }

        /**
         * @param cpuOvercommitRatio CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder cpuOvercommitRatio(Double cpuOvercommitRatio) {
            return cpuOvercommitRatio(Output.of(cpuOvercommitRatio));
        }

        /**
         * @param hostMaintenancePolicy Sole Tenancy nodes maintenance policy. Possible values: `HOST_MAINTENANCE_POLICY_UNSPECIFIED`, `HOST_MAINTENANCE_POLICY_DEFAULT`, `HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE`, `HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP`
         * 
         * @return builder
         * 
         */
        public Builder hostMaintenancePolicy(@Nullable Output<String> hostMaintenancePolicy) {
            $.hostMaintenancePolicy = hostMaintenancePolicy;
            return this;
        }

        /**
         * @param hostMaintenancePolicy Sole Tenancy nodes maintenance policy. Possible values: `HOST_MAINTENANCE_POLICY_UNSPECIFIED`, `HOST_MAINTENANCE_POLICY_DEFAULT`, `HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE`, `HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP`
         * 
         * @return builder
         * 
         */
        public Builder hostMaintenancePolicy(String hostMaintenancePolicy) {
            return hostMaintenancePolicy(Output.of(hostMaintenancePolicy));
        }

        /**
         * @param nodeTypes A list of sole tenant node types. An empty list means that all possible node types will be considered.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypes(@Nullable Output<List<PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs>> nodeTypes) {
            $.nodeTypes = nodeTypes;
            return this;
        }

        /**
         * @param nodeTypes A list of sole tenant node types. An empty list means that all possible node types will be considered.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypes(List<PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs> nodeTypes) {
            return nodeTypes(Output.of(nodeTypes));
        }

        /**
         * @param nodeTypes A list of sole tenant node types. An empty list means that all possible node types will be considered.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypes(PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypeArgs... nodeTypes) {
            return nodeTypes(List.of(nodeTypes));
        }

        public PreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesArgs build() {
            return $;
        }
    }

}
