// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstancesInstance;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseInstancesResult {
    private @Nullable String databaseVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetDatabaseInstancesInstance> instances;
    private @Nullable String project;
    private @Nullable String region;
    private @Nullable String state;
    private @Nullable String tier;
    private @Nullable String zone;

    private GetDatabaseInstancesResult() {}
    public Optional<String> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetDatabaseInstancesInstance> instances() {
        return this.instances;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    public Optional<String> tier() {
        return Optional.ofNullable(this.tier);
    }
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstancesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String databaseVersion;
        private String id;
        private List<GetDatabaseInstancesInstance> instances;
        private @Nullable String project;
        private @Nullable String region;
        private @Nullable String state;
        private @Nullable String tier;
        private @Nullable String zone;
        public Builder() {}
        public Builder(GetDatabaseInstancesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.state = defaults.state;
    	      this.tier = defaults.tier;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder databaseVersion(@Nullable String databaseVersion) {

            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<GetDatabaseInstancesInstance> instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesResult", "instances");
            }
            this.instances = instances;
            return this;
        }
        public Builder instances(GetDatabaseInstancesInstance... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tier(@Nullable String tier) {

            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {

            this.zone = zone;
            return this;
        }
        public GetDatabaseInstancesResult build() {
            final var _resultValue = new GetDatabaseInstancesResult();
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.id = id;
            _resultValue.instances = instances;
            _resultValue.project = project;
            _resultValue.region = region;
            _resultValue.state = state;
            _resultValue.tier = tier;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
