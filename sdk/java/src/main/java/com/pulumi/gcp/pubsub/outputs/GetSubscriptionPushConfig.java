// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionPushConfigNoWrapper;
import com.pulumi.gcp.pubsub.outputs.GetSubscriptionPushConfigOidcToken;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSubscriptionPushConfig {
    /**
     * @return Endpoint configuration attributes.
     * 
     * Every endpoint has a set of API supported attributes that can
     * be used to control different aspects of the message delivery.
     * 
     * The currently supported attribute is x-goog-version, which you
     * can use to change the format of the pushed message. This
     * attribute indicates the version of the data expected by
     * the endpoint. This controls the shape of the pushed message
     * (i.e., its fields and metadata). The endpoint version is
     * based on the version of the Pub/Sub API.
     * 
     * If not present during the subscriptions.create call,
     * it will default to the version of the API used to make
     * such call. If not present during a subscriptions.modifyPushConfig
     * call, its value will not be changed. subscriptions.get
     * calls will always return a valid version, even if the
     * subscription was created without this attribute.
     * 
     * The possible values for this attribute are:
     * 
     * - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
     * - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
     * 
     */
    private Map<String,String> attributes;
    /**
     * @return When set, the payload to the push endpoint is not wrapped.Sets the
     * &#39;data&#39; field as the HTTP body for delivery.
     * 
     */
    private List<GetSubscriptionPushConfigNoWrapper> noWrappers;
    /**
     * @return If specified, Pub/Sub will generate and attach an OIDC JWT token as
     * an Authorization header in the HTTP request for every pushed message.
     * 
     */
    private List<GetSubscriptionPushConfigOidcToken> oidcTokens;
    /**
     * @return A URL locating the endpoint to which messages should be pushed.
     * For example, a Webhook endpoint might use
     * &#34;https://example.com/push&#34;.
     * 
     */
    private String pushEndpoint;

    private GetSubscriptionPushConfig() {}
    /**
     * @return Endpoint configuration attributes.
     * 
     * Every endpoint has a set of API supported attributes that can
     * be used to control different aspects of the message delivery.
     * 
     * The currently supported attribute is x-goog-version, which you
     * can use to change the format of the pushed message. This
     * attribute indicates the version of the data expected by
     * the endpoint. This controls the shape of the pushed message
     * (i.e., its fields and metadata). The endpoint version is
     * based on the version of the Pub/Sub API.
     * 
     * If not present during the subscriptions.create call,
     * it will default to the version of the API used to make
     * such call. If not present during a subscriptions.modifyPushConfig
     * call, its value will not be changed. subscriptions.get
     * calls will always return a valid version, even if the
     * subscription was created without this attribute.
     * 
     * The possible values for this attribute are:
     * 
     * - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
     * - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
     * 
     */
    public Map<String,String> attributes() {
        return this.attributes;
    }
    /**
     * @return When set, the payload to the push endpoint is not wrapped.Sets the
     * &#39;data&#39; field as the HTTP body for delivery.
     * 
     */
    public List<GetSubscriptionPushConfigNoWrapper> noWrappers() {
        return this.noWrappers;
    }
    /**
     * @return If specified, Pub/Sub will generate and attach an OIDC JWT token as
     * an Authorization header in the HTTP request for every pushed message.
     * 
     */
    public List<GetSubscriptionPushConfigOidcToken> oidcTokens() {
        return this.oidcTokens;
    }
    /**
     * @return A URL locating the endpoint to which messages should be pushed.
     * For example, a Webhook endpoint might use
     * &#34;https://example.com/push&#34;.
     * 
     */
    public String pushEndpoint() {
        return this.pushEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionPushConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> attributes;
        private List<GetSubscriptionPushConfigNoWrapper> noWrappers;
        private List<GetSubscriptionPushConfigOidcToken> oidcTokens;
        private String pushEndpoint;
        public Builder() {}
        public Builder(GetSubscriptionPushConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.noWrappers = defaults.noWrappers;
    	      this.oidcTokens = defaults.oidcTokens;
    	      this.pushEndpoint = defaults.pushEndpoint;
        }

        @CustomType.Setter
        public Builder attributes(Map<String,String> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPushConfig", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder noWrappers(List<GetSubscriptionPushConfigNoWrapper> noWrappers) {
            if (noWrappers == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPushConfig", "noWrappers");
            }
            this.noWrappers = noWrappers;
            return this;
        }
        public Builder noWrappers(GetSubscriptionPushConfigNoWrapper... noWrappers) {
            return noWrappers(List.of(noWrappers));
        }
        @CustomType.Setter
        public Builder oidcTokens(List<GetSubscriptionPushConfigOidcToken> oidcTokens) {
            if (oidcTokens == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPushConfig", "oidcTokens");
            }
            this.oidcTokens = oidcTokens;
            return this;
        }
        public Builder oidcTokens(GetSubscriptionPushConfigOidcToken... oidcTokens) {
            return oidcTokens(List.of(oidcTokens));
        }
        @CustomType.Setter
        public Builder pushEndpoint(String pushEndpoint) {
            if (pushEndpoint == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionPushConfig", "pushEndpoint");
            }
            this.pushEndpoint = pushEndpoint;
            return this;
        }
        public GetSubscriptionPushConfig build() {
            final var _resultValue = new GetSubscriptionPushConfig();
            _resultValue.attributes = attributes;
            _resultValue.noWrappers = noWrappers;
            _resultValue.oidcTokens = oidcTokens;
            _resultValue.pushEndpoint = pushEndpoint;
            return _resultValue;
        }
    }
}
