// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AuthorizedViewSubsetViewFamilySubset {
    /**
     * @return Name of the column family to be included in the authorized view. The specified column family must exist in the parent table of this authorized view.
     * 
     */
    private String familyName;
    /**
     * @return A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
     * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
     * 
     */
    private @Nullable List<String> qualifierPrefixes;
    /**
     * @return A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
     * 
     */
    private @Nullable List<String> qualifiers;

    private AuthorizedViewSubsetViewFamilySubset() {}
    /**
     * @return Name of the column family to be included in the authorized view. The specified column family must exist in the parent table of this authorized view.
     * 
     */
    public String familyName() {
        return this.familyName;
    }
    /**
     * @return A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
     * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
     * 
     */
    public List<String> qualifierPrefixes() {
        return this.qualifierPrefixes == null ? List.of() : this.qualifierPrefixes;
    }
    /**
     * @return A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
     * 
     */
    public List<String> qualifiers() {
        return this.qualifiers == null ? List.of() : this.qualifiers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizedViewSubsetViewFamilySubset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String familyName;
        private @Nullable List<String> qualifierPrefixes;
        private @Nullable List<String> qualifiers;
        public Builder() {}
        public Builder(AuthorizedViewSubsetViewFamilySubset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.familyName = defaults.familyName;
    	      this.qualifierPrefixes = defaults.qualifierPrefixes;
    	      this.qualifiers = defaults.qualifiers;
        }

        @CustomType.Setter
        public Builder familyName(String familyName) {
            if (familyName == null) {
              throw new MissingRequiredPropertyException("AuthorizedViewSubsetViewFamilySubset", "familyName");
            }
            this.familyName = familyName;
            return this;
        }
        @CustomType.Setter
        public Builder qualifierPrefixes(@Nullable List<String> qualifierPrefixes) {

            this.qualifierPrefixes = qualifierPrefixes;
            return this;
        }
        public Builder qualifierPrefixes(String... qualifierPrefixes) {
            return qualifierPrefixes(List.of(qualifierPrefixes));
        }
        @CustomType.Setter
        public Builder qualifiers(@Nullable List<String> qualifiers) {

            this.qualifiers = qualifiers;
            return this;
        }
        public Builder qualifiers(String... qualifiers) {
            return qualifiers(List.of(qualifiers));
        }
        public AuthorizedViewSubsetViewFamilySubset build() {
            final var _resultValue = new AuthorizedViewSubsetViewFamilySubset();
            _resultValue.familyName = familyName;
            _resultValue.qualifierPrefixes = qualifierPrefixes;
            _resultValue.qualifiers = qualifiers;
            return _resultValue;
        }
    }
}
