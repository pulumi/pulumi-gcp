// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.CmekConfigSingleRegionKeyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CmekConfigState extends com.pulumi.resources.ResourceArgs {

    public static final CmekConfigState Empty = new CmekConfigState();

    /**
     * The unique id of the cmek config.
     * 
     */
    @Import(name="cmekConfigId")
    private @Nullable Output<String> cmekConfigId;

    /**
     * @return The unique id of the cmek config.
     * 
     */
    public Optional<Output<String>> cmekConfigId() {
        return Optional.ofNullable(this.cmekConfigId);
    }

    /**
     * The default CmekConfig for the Customer.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return The default CmekConfig for the Customer.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * KMS key resource name which will be used to encrypt resources
     * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return KMS key resource name which will be used to encrypt resources
     * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * KMS key version resource name which will be used to encrypt resources
     * `&lt;kms_key&gt;/cryptoKeyVersions/{keyVersion}`.
     * 
     */
    @Import(name="kmsKeyVersion")
    private @Nullable Output<String> kmsKeyVersion;

    /**
     * @return KMS key version resource name which will be used to encrypt resources
     * `&lt;kms_key&gt;/cryptoKeyVersions/{keyVersion}`.
     * 
     */
    public Optional<Output<String>> kmsKeyVersion() {
        return Optional.ofNullable(this.kmsKeyVersion);
    }

    /**
     * The timestamp of the last key rotation.
     * 
     */
    @Import(name="lastRotationTimestampMicros")
    private @Nullable Output<Integer> lastRotationTimestampMicros;

    /**
     * @return The timestamp of the last key rotation.
     * 
     */
    public Optional<Output<Integer>> lastRotationTimestampMicros() {
        return Optional.ofNullable(this.lastRotationTimestampMicros);
    }

    /**
     * The geographic location where the CMEK config should reside. The value can
     * only be one of &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the CMEK config should reside. The value can
     * only be one of &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full resource name of the cmek config. Values are of the format
     * `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full resource name of the cmek config. Values are of the format
     * `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the NotebookLM Corpus is ready to be used.
     * 
     */
    @Import(name="notebooklmState")
    private @Nullable Output<String> notebooklmState;

    /**
     * @return Whether the NotebookLM Corpus is ready to be used.
     * 
     */
    public Optional<Output<String>> notebooklmState() {
        return Optional.ofNullable(this.notebooklmState);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Set the following CmekConfig as the default to be used for child resources
     * if one is not specified. The default value is true.
     * 
     */
    @Import(name="setDefault")
    private @Nullable Output<Boolean> setDefault;

    /**
     * @return Set the following CmekConfig as the default to be used for child resources
     * if one is not specified. The default value is true.
     * 
     */
    public Optional<Output<Boolean>> setDefault() {
        return Optional.ofNullable(this.setDefault);
    }

    /**
     * Single-regional CMEKs that are required for some VAIS features.
     * Structure is documented below.
     * 
     */
    @Import(name="singleRegionKeys")
    private @Nullable Output<List<CmekConfigSingleRegionKeyArgs>> singleRegionKeys;

    /**
     * @return Single-regional CMEKs that are required for some VAIS features.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<CmekConfigSingleRegionKeyArgs>>> singleRegionKeys() {
        return Optional.ofNullable(this.singleRegionKeys);
    }

    /**
     * The state of the CmekConfig.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the CmekConfig.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private CmekConfigState() {}

    private CmekConfigState(CmekConfigState $) {
        this.cmekConfigId = $.cmekConfigId;
        this.isDefault = $.isDefault;
        this.kmsKey = $.kmsKey;
        this.kmsKeyVersion = $.kmsKeyVersion;
        this.lastRotationTimestampMicros = $.lastRotationTimestampMicros;
        this.location = $.location;
        this.name = $.name;
        this.notebooklmState = $.notebooklmState;
        this.project = $.project;
        this.setDefault = $.setDefault;
        this.singleRegionKeys = $.singleRegionKeys;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CmekConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CmekConfigState $;

        public Builder() {
            $ = new CmekConfigState();
        }

        public Builder(CmekConfigState defaults) {
            $ = new CmekConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cmekConfigId The unique id of the cmek config.
         * 
         * @return builder
         * 
         */
        public Builder cmekConfigId(@Nullable Output<String> cmekConfigId) {
            $.cmekConfigId = cmekConfigId;
            return this;
        }

        /**
         * @param cmekConfigId The unique id of the cmek config.
         * 
         * @return builder
         * 
         */
        public Builder cmekConfigId(String cmekConfigId) {
            return cmekConfigId(Output.of(cmekConfigId));
        }

        /**
         * @param isDefault The default CmekConfig for the Customer.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault The default CmekConfig for the Customer.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param kmsKey KMS key resource name which will be used to encrypt resources
         * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey KMS key resource name which will be used to encrypt resources
         * `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        /**
         * @param kmsKeyVersion KMS key version resource name which will be used to encrypt resources
         * `&lt;kms_key&gt;/cryptoKeyVersions/{keyVersion}`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyVersion(@Nullable Output<String> kmsKeyVersion) {
            $.kmsKeyVersion = kmsKeyVersion;
            return this;
        }

        /**
         * @param kmsKeyVersion KMS key version resource name which will be used to encrypt resources
         * `&lt;kms_key&gt;/cryptoKeyVersions/{keyVersion}`.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyVersion(String kmsKeyVersion) {
            return kmsKeyVersion(Output.of(kmsKeyVersion));
        }

        /**
         * @param lastRotationTimestampMicros The timestamp of the last key rotation.
         * 
         * @return builder
         * 
         */
        public Builder lastRotationTimestampMicros(@Nullable Output<Integer> lastRotationTimestampMicros) {
            $.lastRotationTimestampMicros = lastRotationTimestampMicros;
            return this;
        }

        /**
         * @param lastRotationTimestampMicros The timestamp of the last key rotation.
         * 
         * @return builder
         * 
         */
        public Builder lastRotationTimestampMicros(Integer lastRotationTimestampMicros) {
            return lastRotationTimestampMicros(Output.of(lastRotationTimestampMicros));
        }

        /**
         * @param location The geographic location where the CMEK config should reside. The value can
         * only be one of &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the CMEK config should reside. The value can
         * only be one of &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full resource name of the cmek config. Values are of the format
         * `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full resource name of the cmek config. Values are of the format
         * `projects/{project}/locations/{location}/cmekConfigs/{cmek_config_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notebooklmState Whether the NotebookLM Corpus is ready to be used.
         * 
         * @return builder
         * 
         */
        public Builder notebooklmState(@Nullable Output<String> notebooklmState) {
            $.notebooklmState = notebooklmState;
            return this;
        }

        /**
         * @param notebooklmState Whether the NotebookLM Corpus is ready to be used.
         * 
         * @return builder
         * 
         */
        public Builder notebooklmState(String notebooklmState) {
            return notebooklmState(Output.of(notebooklmState));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param setDefault Set the following CmekConfig as the default to be used for child resources
         * if one is not specified. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder setDefault(@Nullable Output<Boolean> setDefault) {
            $.setDefault = setDefault;
            return this;
        }

        /**
         * @param setDefault Set the following CmekConfig as the default to be used for child resources
         * if one is not specified. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder setDefault(Boolean setDefault) {
            return setDefault(Output.of(setDefault));
        }

        /**
         * @param singleRegionKeys Single-regional CMEKs that are required for some VAIS features.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder singleRegionKeys(@Nullable Output<List<CmekConfigSingleRegionKeyArgs>> singleRegionKeys) {
            $.singleRegionKeys = singleRegionKeys;
            return this;
        }

        /**
         * @param singleRegionKeys Single-regional CMEKs that are required for some VAIS features.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder singleRegionKeys(List<CmekConfigSingleRegionKeyArgs> singleRegionKeys) {
            return singleRegionKeys(Output.of(singleRegionKeys));
        }

        /**
         * @param singleRegionKeys Single-regional CMEKs that are required for some VAIS features.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder singleRegionKeys(CmekConfigSingleRegionKeyArgs... singleRegionKeys) {
            return singleRegionKeys(List.of(singleRegionKeys));
        }

        /**
         * @param state The state of the CmekConfig.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the CmekConfig.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public CmekConfigState build() {
            return $;
        }
    }

}
