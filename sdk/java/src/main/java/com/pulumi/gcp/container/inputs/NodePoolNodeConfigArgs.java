// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigAdvancedMachineFeaturesArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigConfidentialNodesArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigContainerdConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigEffectiveTaintArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigEphemeralStorageConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigEphemeralStorageLocalSsdConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigFastSocketArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigGcfsConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigGuestAcceleratorArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigGvnicArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigHostMaintenancePolicyArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigKubeletConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigLinuxNodeConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigLocalNvmeSsdBlockConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigReservationAffinityArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigSandboxConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigSecondaryBootDiskArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigShieldedInstanceConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigSoleTenantConfigArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigTaintArgs;
import com.pulumi.gcp.container.inputs.NodePoolNodeConfigWorkloadMetadataConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolNodeConfigArgs Empty = new NodePoolNodeConfigArgs();

    /**
     * Specifies options for controlling advanced machine features.
     * 
     */
    @Import(name="advancedMachineFeatures")
    private @Nullable Output<NodePoolNodeConfigAdvancedMachineFeaturesArgs> advancedMachineFeatures;

    /**
     * @return Specifies options for controlling advanced machine features.
     * 
     */
    public Optional<Output<NodePoolNodeConfigAdvancedMachineFeaturesArgs>> advancedMachineFeatures() {
        return Optional.ofNullable(this.advancedMachineFeatures);
    }

    /**
     * The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
     * 
     */
    @Import(name="bootDiskKmsKey")
    private @Nullable Output<String> bootDiskKmsKey;

    /**
     * @return The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
     * 
     */
    public Optional<Output<String>> bootDiskKmsKey() {
        return Optional.ofNullable(this.bootDiskKmsKey);
    }

    /**
     * Configuration for Confidential Nodes feature. Structure is documented below.
     * 
     */
    @Import(name="confidentialNodes")
    private @Nullable Output<NodePoolNodeConfigConfidentialNodesArgs> confidentialNodes;

    /**
     * @return Configuration for Confidential Nodes feature. Structure is documented below.
     * 
     */
    public Optional<Output<NodePoolNodeConfigConfidentialNodesArgs>> confidentialNodes() {
        return Optional.ofNullable(this.confidentialNodes);
    }

    /**
     * Parameters for containerd configuration.
     * 
     */
    @Import(name="containerdConfig")
    private @Nullable Output<NodePoolNodeConfigContainerdConfigArgs> containerdConfig;

    /**
     * @return Parameters for containerd configuration.
     * 
     */
    public Optional<Output<NodePoolNodeConfigContainerdConfigArgs>> containerdConfig() {
        return Optional.ofNullable(this.containerdConfig);
    }

    /**
     * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<Integer> diskSizeGb;

    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    public Optional<Output<Integer>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * List of kubernetes taints applied to each node.
     * 
     */
    @Import(name="effectiveTaints")
    private @Nullable Output<List<NodePoolNodeConfigEffectiveTaintArgs>> effectiveTaints;

    /**
     * @return List of kubernetes taints applied to each node.
     * 
     */
    public Optional<Output<List<NodePoolNodeConfigEffectiveTaintArgs>>> effectiveTaints() {
        return Optional.ofNullable(this.effectiveTaints);
    }

    /**
     * If enabled boot disks are configured with confidential mode.
     * 
     */
    @Import(name="enableConfidentialStorage")
    private @Nullable Output<Boolean> enableConfidentialStorage;

    /**
     * @return If enabled boot disks are configured with confidential mode.
     * 
     */
    public Optional<Output<Boolean>> enableConfidentialStorage() {
        return Optional.ofNullable(this.enableConfidentialStorage);
    }

    /**
     * Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    @Import(name="ephemeralStorageConfig")
    private @Nullable Output<NodePoolNodeConfigEphemeralStorageConfigArgs> ephemeralStorageConfig;

    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    public Optional<Output<NodePoolNodeConfigEphemeralStorageConfigArgs>> ephemeralStorageConfig() {
        return Optional.ofNullable(this.ephemeralStorageConfig);
    }

    /**
     * Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    @Import(name="ephemeralStorageLocalSsdConfig")
    private @Nullable Output<NodePoolNodeConfigEphemeralStorageLocalSsdConfigArgs> ephemeralStorageLocalSsdConfig;

    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    public Optional<Output<NodePoolNodeConfigEphemeralStorageLocalSsdConfigArgs>> ephemeralStorageLocalSsdConfig() {
        return Optional.ofNullable(this.ephemeralStorageLocalSsdConfig);
    }

    /**
     * Enable or disable NCCL Fast Socket in the node pool.
     * 
     */
    @Import(name="fastSocket")
    private @Nullable Output<NodePoolNodeConfigFastSocketArgs> fastSocket;

    /**
     * @return Enable or disable NCCL Fast Socket in the node pool.
     * 
     */
    public Optional<Output<NodePoolNodeConfigFastSocketArgs>> fastSocket() {
        return Optional.ofNullable(this.fastSocket);
    }

    /**
     * GCFS configuration for this node.
     * 
     */
    @Import(name="gcfsConfig")
    private @Nullable Output<NodePoolNodeConfigGcfsConfigArgs> gcfsConfig;

    /**
     * @return GCFS configuration for this node.
     * 
     */
    public Optional<Output<NodePoolNodeConfigGcfsConfigArgs>> gcfsConfig() {
        return Optional.ofNullable(this.gcfsConfig);
    }

    /**
     * List of the type and count of accelerator cards attached to the instance.
     * 
     */
    @Import(name="guestAccelerators")
    private @Nullable Output<List<NodePoolNodeConfigGuestAcceleratorArgs>> guestAccelerators;

    /**
     * @return List of the type and count of accelerator cards attached to the instance.
     * 
     */
    public Optional<Output<List<NodePoolNodeConfigGuestAcceleratorArgs>>> guestAccelerators() {
        return Optional.ofNullable(this.guestAccelerators);
    }

    /**
     * Enable or disable gvnic in the node pool.
     * 
     */
    @Import(name="gvnic")
    private @Nullable Output<NodePoolNodeConfigGvnicArgs> gvnic;

    /**
     * @return Enable or disable gvnic in the node pool.
     * 
     */
    public Optional<Output<NodePoolNodeConfigGvnicArgs>> gvnic() {
        return Optional.ofNullable(this.gvnic);
    }

    /**
     * The maintenance policy for the hosts on which the GKE VMs run on.
     * 
     */
    @Import(name="hostMaintenancePolicy")
    private @Nullable Output<NodePoolNodeConfigHostMaintenancePolicyArgs> hostMaintenancePolicy;

    /**
     * @return The maintenance policy for the hosts on which the GKE VMs run on.
     * 
     */
    public Optional<Output<NodePoolNodeConfigHostMaintenancePolicyArgs>> hostMaintenancePolicy() {
        return Optional.ofNullable(this.hostMaintenancePolicy);
    }

    /**
     * The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Node kubelet configs.
     * 
     */
    @Import(name="kubeletConfig")
    private @Nullable Output<NodePoolNodeConfigKubeletConfigArgs> kubeletConfig;

    /**
     * @return Node kubelet configs.
     * 
     */
    public Optional<Output<NodePoolNodeConfigKubeletConfigArgs>> kubeletConfig() {
        return Optional.ofNullable(this.kubeletConfig);
    }

    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Parameters that can be configured on Linux nodes.
     * 
     */
    @Import(name="linuxNodeConfig")
    private @Nullable Output<NodePoolNodeConfigLinuxNodeConfigArgs> linuxNodeConfig;

    /**
     * @return Parameters that can be configured on Linux nodes.
     * 
     */
    public Optional<Output<NodePoolNodeConfigLinuxNodeConfigArgs>> linuxNodeConfig() {
        return Optional.ofNullable(this.linuxNodeConfig);
    }

    /**
     * Parameters for raw-block local NVMe SSDs.
     * 
     */
    @Import(name="localNvmeSsdBlockConfig")
    private @Nullable Output<NodePoolNodeConfigLocalNvmeSsdBlockConfigArgs> localNvmeSsdBlockConfig;

    /**
     * @return Parameters for raw-block local NVMe SSDs.
     * 
     */
    public Optional<Output<NodePoolNodeConfigLocalNvmeSsdBlockConfigArgs>> localNvmeSsdBlockConfig() {
        return Optional.ofNullable(this.localNvmeSsdBlockConfig);
    }

    /**
     * The number of local SSD disks to be attached to the node.
     * 
     */
    @Import(name="localSsdCount")
    private @Nullable Output<Integer> localSsdCount;

    /**
     * @return The number of local SSD disks to be attached to the node.
     * 
     */
    public Optional<Output<Integer>> localSsdCount() {
        return Optional.ofNullable(this.localSsdCount);
    }

    /**
     * Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
     * 
     */
    @Import(name="loggingVariant")
    private @Nullable Output<String> loggingVariant;

    /**
     * @return Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
     * 
     */
    public Optional<Output<String>> loggingVariant() {
        return Optional.ofNullable(this.loggingVariant);
    }

    /**
     * The name of a Google Compute Engine machine type.
     * 
     */
    @Import(name="machineType")
    private @Nullable Output<String> machineType;

    /**
     * @return The name of a Google Compute Engine machine type.
     * 
     */
    public Optional<Output<String>> machineType() {
        return Optional.ofNullable(this.machineType);
    }

    /**
     * The metadata key/value pairs assigned to instances in the cluster.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return The metadata key/value pairs assigned to instances in the cluster.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
     * 
     */
    @Import(name="minCpuPlatform")
    private @Nullable Output<String> minCpuPlatform;

    /**
     * @return Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
     * 
     */
    public Optional<Output<String>> minCpuPlatform() {
        return Optional.ofNullable(this.minCpuPlatform);
    }

    /**
     * Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
     * 
     */
    @Import(name="nodeGroup")
    private @Nullable Output<String> nodeGroup;

    /**
     * @return Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
     * 
     */
    public Optional<Output<String>> nodeGroup() {
        return Optional.ofNullable(this.nodeGroup);
    }

    /**
     * The set of Google API scopes to be made available on all of the node VMs.
     * 
     */
    @Import(name="oauthScopes")
    private @Nullable Output<List<String>> oauthScopes;

    /**
     * @return The set of Google API scopes to be made available on all of the node VMs.
     * 
     */
    public Optional<Output<List<String>>> oauthScopes() {
        return Optional.ofNullable(this.oauthScopes);
    }

    /**
     * Whether the nodes are created as preemptible VM instances.
     * 
     */
    @Import(name="preemptible")
    private @Nullable Output<Boolean> preemptible;

    /**
     * @return Whether the nodes are created as preemptible VM instances.
     * 
     */
    public Optional<Output<Boolean>> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }

    /**
     * The reservation affinity configuration for the node pool.
     * 
     */
    @Import(name="reservationAffinity")
    private @Nullable Output<NodePoolNodeConfigReservationAffinityArgs> reservationAffinity;

    /**
     * @return The reservation affinity configuration for the node pool.
     * 
     */
    public Optional<Output<NodePoolNodeConfigReservationAffinityArgs>> reservationAffinity() {
        return Optional.ofNullable(this.reservationAffinity);
    }

    /**
     * The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
     * 
     */
    @Import(name="resourceLabels")
    private @Nullable Output<Map<String,String>> resourceLabels;

    /**
     * @return The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
     * 
     */
    public Optional<Output<Map<String,String>>> resourceLabels() {
        return Optional.ofNullable(this.resourceLabels);
    }

    /**
     * A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    @Import(name="resourceManagerTags")
    private @Nullable Output<Map<String,Object>> resourceManagerTags;

    /**
     * @return A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    public Optional<Output<Map<String,Object>>> resourceManagerTags() {
        return Optional.ofNullable(this.resourceManagerTags);
    }

    /**
     * Sandbox configuration for this node.
     * 
     */
    @Import(name="sandboxConfig")
    private @Nullable Output<NodePoolNodeConfigSandboxConfigArgs> sandboxConfig;

    /**
     * @return Sandbox configuration for this node.
     * 
     */
    public Optional<Output<NodePoolNodeConfigSandboxConfigArgs>> sandboxConfig() {
        return Optional.ofNullable(this.sandboxConfig);
    }

    /**
     * Secondary boot disks for preloading data or container images.
     * 
     */
    @Import(name="secondaryBootDisks")
    private @Nullable Output<List<NodePoolNodeConfigSecondaryBootDiskArgs>> secondaryBootDisks;

    /**
     * @return Secondary boot disks for preloading data or container images.
     * 
     */
    public Optional<Output<List<NodePoolNodeConfigSecondaryBootDiskArgs>>> secondaryBootDisks() {
        return Optional.ofNullable(this.secondaryBootDisks);
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Shielded Instance options.
     * 
     */
    @Import(name="shieldedInstanceConfig")
    private @Nullable Output<NodePoolNodeConfigShieldedInstanceConfigArgs> shieldedInstanceConfig;

    /**
     * @return Shielded Instance options.
     * 
     */
    public Optional<Output<NodePoolNodeConfigShieldedInstanceConfigArgs>> shieldedInstanceConfig() {
        return Optional.ofNullable(this.shieldedInstanceConfig);
    }

    /**
     * Node affinity options for sole tenant node pools.
     * 
     */
    @Import(name="soleTenantConfig")
    private @Nullable Output<NodePoolNodeConfigSoleTenantConfigArgs> soleTenantConfig;

    /**
     * @return Node affinity options for sole tenant node pools.
     * 
     */
    public Optional<Output<NodePoolNodeConfigSoleTenantConfigArgs>> soleTenantConfig() {
        return Optional.ofNullable(this.soleTenantConfig);
    }

    /**
     * Whether the nodes are created as spot VM instances.
     * 
     */
    @Import(name="spot")
    private @Nullable Output<Boolean> spot;

    /**
     * @return Whether the nodes are created as spot VM instances.
     * 
     */
    public Optional<Output<Boolean>> spot() {
        return Optional.ofNullable(this.spot);
    }

    /**
     * The list of instance tags applied to all nodes.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The list of instance tags applied to all nodes.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * List of Kubernetes taints to be applied to each node.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<NodePoolNodeConfigTaintArgs>> taints;

    /**
     * @return List of Kubernetes taints to be applied to each node.
     * 
     */
    public Optional<Output<List<NodePoolNodeConfigTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * The workload metadata configuration for this node.
     * 
     */
    @Import(name="workloadMetadataConfig")
    private @Nullable Output<NodePoolNodeConfigWorkloadMetadataConfigArgs> workloadMetadataConfig;

    /**
     * @return The workload metadata configuration for this node.
     * 
     */
    public Optional<Output<NodePoolNodeConfigWorkloadMetadataConfigArgs>> workloadMetadataConfig() {
        return Optional.ofNullable(this.workloadMetadataConfig);
    }

    private NodePoolNodeConfigArgs() {}

    private NodePoolNodeConfigArgs(NodePoolNodeConfigArgs $) {
        this.advancedMachineFeatures = $.advancedMachineFeatures;
        this.bootDiskKmsKey = $.bootDiskKmsKey;
        this.confidentialNodes = $.confidentialNodes;
        this.containerdConfig = $.containerdConfig;
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
        this.effectiveTaints = $.effectiveTaints;
        this.enableConfidentialStorage = $.enableConfidentialStorage;
        this.ephemeralStorageConfig = $.ephemeralStorageConfig;
        this.ephemeralStorageLocalSsdConfig = $.ephemeralStorageLocalSsdConfig;
        this.fastSocket = $.fastSocket;
        this.gcfsConfig = $.gcfsConfig;
        this.guestAccelerators = $.guestAccelerators;
        this.gvnic = $.gvnic;
        this.hostMaintenancePolicy = $.hostMaintenancePolicy;
        this.imageType = $.imageType;
        this.kubeletConfig = $.kubeletConfig;
        this.labels = $.labels;
        this.linuxNodeConfig = $.linuxNodeConfig;
        this.localNvmeSsdBlockConfig = $.localNvmeSsdBlockConfig;
        this.localSsdCount = $.localSsdCount;
        this.loggingVariant = $.loggingVariant;
        this.machineType = $.machineType;
        this.metadata = $.metadata;
        this.minCpuPlatform = $.minCpuPlatform;
        this.nodeGroup = $.nodeGroup;
        this.oauthScopes = $.oauthScopes;
        this.preemptible = $.preemptible;
        this.reservationAffinity = $.reservationAffinity;
        this.resourceLabels = $.resourceLabels;
        this.resourceManagerTags = $.resourceManagerTags;
        this.sandboxConfig = $.sandboxConfig;
        this.secondaryBootDisks = $.secondaryBootDisks;
        this.serviceAccount = $.serviceAccount;
        this.shieldedInstanceConfig = $.shieldedInstanceConfig;
        this.soleTenantConfig = $.soleTenantConfig;
        this.spot = $.spot;
        this.tags = $.tags;
        this.taints = $.taints;
        this.workloadMetadataConfig = $.workloadMetadataConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolNodeConfigArgs $;

        public Builder() {
            $ = new NodePoolNodeConfigArgs();
        }

        public Builder(NodePoolNodeConfigArgs defaults) {
            $ = new NodePoolNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedMachineFeatures Specifies options for controlling advanced machine features.
         * 
         * @return builder
         * 
         */
        public Builder advancedMachineFeatures(@Nullable Output<NodePoolNodeConfigAdvancedMachineFeaturesArgs> advancedMachineFeatures) {
            $.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }

        /**
         * @param advancedMachineFeatures Specifies options for controlling advanced machine features.
         * 
         * @return builder
         * 
         */
        public Builder advancedMachineFeatures(NodePoolNodeConfigAdvancedMachineFeaturesArgs advancedMachineFeatures) {
            return advancedMachineFeatures(Output.of(advancedMachineFeatures));
        }

        /**
         * @param bootDiskKmsKey The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder bootDiskKmsKey(@Nullable Output<String> bootDiskKmsKey) {
            $.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }

        /**
         * @param bootDiskKmsKey The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder bootDiskKmsKey(String bootDiskKmsKey) {
            return bootDiskKmsKey(Output.of(bootDiskKmsKey));
        }

        /**
         * @param confidentialNodes Configuration for Confidential Nodes feature. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder confidentialNodes(@Nullable Output<NodePoolNodeConfigConfidentialNodesArgs> confidentialNodes) {
            $.confidentialNodes = confidentialNodes;
            return this;
        }

        /**
         * @param confidentialNodes Configuration for Confidential Nodes feature. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder confidentialNodes(NodePoolNodeConfigConfidentialNodesArgs confidentialNodes) {
            return confidentialNodes(Output.of(confidentialNodes));
        }

        /**
         * @param containerdConfig Parameters for containerd configuration.
         * 
         * @return builder
         * 
         */
        public Builder containerdConfig(@Nullable Output<NodePoolNodeConfigContainerdConfigArgs> containerdConfig) {
            $.containerdConfig = containerdConfig;
            return this;
        }

        /**
         * @param containerdConfig Parameters for containerd configuration.
         * 
         * @return builder
         * 
         */
        public Builder containerdConfig(NodePoolNodeConfigContainerdConfigArgs containerdConfig) {
            return containerdConfig(Output.of(containerdConfig));
        }

        /**
         * @param diskSizeGb Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param diskType Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param effectiveTaints List of kubernetes taints applied to each node.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTaints(@Nullable Output<List<NodePoolNodeConfigEffectiveTaintArgs>> effectiveTaints) {
            $.effectiveTaints = effectiveTaints;
            return this;
        }

        /**
         * @param effectiveTaints List of kubernetes taints applied to each node.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTaints(List<NodePoolNodeConfigEffectiveTaintArgs> effectiveTaints) {
            return effectiveTaints(Output.of(effectiveTaints));
        }

        /**
         * @param effectiveTaints List of kubernetes taints applied to each node.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTaints(NodePoolNodeConfigEffectiveTaintArgs... effectiveTaints) {
            return effectiveTaints(List.of(effectiveTaints));
        }

        /**
         * @param enableConfidentialStorage If enabled boot disks are configured with confidential mode.
         * 
         * @return builder
         * 
         */
        public Builder enableConfidentialStorage(@Nullable Output<Boolean> enableConfidentialStorage) {
            $.enableConfidentialStorage = enableConfidentialStorage;
            return this;
        }

        /**
         * @param enableConfidentialStorage If enabled boot disks are configured with confidential mode.
         * 
         * @return builder
         * 
         */
        public Builder enableConfidentialStorage(Boolean enableConfidentialStorage) {
            return enableConfidentialStorage(Output.of(enableConfidentialStorage));
        }

        /**
         * @param ephemeralStorageConfig Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorageConfig(@Nullable Output<NodePoolNodeConfigEphemeralStorageConfigArgs> ephemeralStorageConfig) {
            $.ephemeralStorageConfig = ephemeralStorageConfig;
            return this;
        }

        /**
         * @param ephemeralStorageConfig Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorageConfig(NodePoolNodeConfigEphemeralStorageConfigArgs ephemeralStorageConfig) {
            return ephemeralStorageConfig(Output.of(ephemeralStorageConfig));
        }

        /**
         * @param ephemeralStorageLocalSsdConfig Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorageLocalSsdConfig(@Nullable Output<NodePoolNodeConfigEphemeralStorageLocalSsdConfigArgs> ephemeralStorageLocalSsdConfig) {
            $.ephemeralStorageLocalSsdConfig = ephemeralStorageLocalSsdConfig;
            return this;
        }

        /**
         * @param ephemeralStorageLocalSsdConfig Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorageLocalSsdConfig(NodePoolNodeConfigEphemeralStorageLocalSsdConfigArgs ephemeralStorageLocalSsdConfig) {
            return ephemeralStorageLocalSsdConfig(Output.of(ephemeralStorageLocalSsdConfig));
        }

        /**
         * @param fastSocket Enable or disable NCCL Fast Socket in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder fastSocket(@Nullable Output<NodePoolNodeConfigFastSocketArgs> fastSocket) {
            $.fastSocket = fastSocket;
            return this;
        }

        /**
         * @param fastSocket Enable or disable NCCL Fast Socket in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder fastSocket(NodePoolNodeConfigFastSocketArgs fastSocket) {
            return fastSocket(Output.of(fastSocket));
        }

        /**
         * @param gcfsConfig GCFS configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder gcfsConfig(@Nullable Output<NodePoolNodeConfigGcfsConfigArgs> gcfsConfig) {
            $.gcfsConfig = gcfsConfig;
            return this;
        }

        /**
         * @param gcfsConfig GCFS configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder gcfsConfig(NodePoolNodeConfigGcfsConfigArgs gcfsConfig) {
            return gcfsConfig(Output.of(gcfsConfig));
        }

        /**
         * @param guestAccelerators List of the type and count of accelerator cards attached to the instance.
         * 
         * @return builder
         * 
         */
        public Builder guestAccelerators(@Nullable Output<List<NodePoolNodeConfigGuestAcceleratorArgs>> guestAccelerators) {
            $.guestAccelerators = guestAccelerators;
            return this;
        }

        /**
         * @param guestAccelerators List of the type and count of accelerator cards attached to the instance.
         * 
         * @return builder
         * 
         */
        public Builder guestAccelerators(List<NodePoolNodeConfigGuestAcceleratorArgs> guestAccelerators) {
            return guestAccelerators(Output.of(guestAccelerators));
        }

        /**
         * @param guestAccelerators List of the type and count of accelerator cards attached to the instance.
         * 
         * @return builder
         * 
         */
        public Builder guestAccelerators(NodePoolNodeConfigGuestAcceleratorArgs... guestAccelerators) {
            return guestAccelerators(List.of(guestAccelerators));
        }

        /**
         * @param gvnic Enable or disable gvnic in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder gvnic(@Nullable Output<NodePoolNodeConfigGvnicArgs> gvnic) {
            $.gvnic = gvnic;
            return this;
        }

        /**
         * @param gvnic Enable or disable gvnic in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder gvnic(NodePoolNodeConfigGvnicArgs gvnic) {
            return gvnic(Output.of(gvnic));
        }

        /**
         * @param hostMaintenancePolicy The maintenance policy for the hosts on which the GKE VMs run on.
         * 
         * @return builder
         * 
         */
        public Builder hostMaintenancePolicy(@Nullable Output<NodePoolNodeConfigHostMaintenancePolicyArgs> hostMaintenancePolicy) {
            $.hostMaintenancePolicy = hostMaintenancePolicy;
            return this;
        }

        /**
         * @param hostMaintenancePolicy The maintenance policy for the hosts on which the GKE VMs run on.
         * 
         * @return builder
         * 
         */
        public Builder hostMaintenancePolicy(NodePoolNodeConfigHostMaintenancePolicyArgs hostMaintenancePolicy) {
            return hostMaintenancePolicy(Output.of(hostMaintenancePolicy));
        }

        /**
         * @param imageType The image type to use for this node. Note that for a given image type, the latest version of it will be used.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The image type to use for this node. Note that for a given image type, the latest version of it will be used.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param kubeletConfig Node kubelet configs.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfig(@Nullable Output<NodePoolNodeConfigKubeletConfigArgs> kubeletConfig) {
            $.kubeletConfig = kubeletConfig;
            return this;
        }

        /**
         * @param kubeletConfig Node kubelet configs.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfig(NodePoolNodeConfigKubeletConfigArgs kubeletConfig) {
            return kubeletConfig(Output.of(kubeletConfig));
        }

        /**
         * @param labels The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param linuxNodeConfig Parameters that can be configured on Linux nodes.
         * 
         * @return builder
         * 
         */
        public Builder linuxNodeConfig(@Nullable Output<NodePoolNodeConfigLinuxNodeConfigArgs> linuxNodeConfig) {
            $.linuxNodeConfig = linuxNodeConfig;
            return this;
        }

        /**
         * @param linuxNodeConfig Parameters that can be configured on Linux nodes.
         * 
         * @return builder
         * 
         */
        public Builder linuxNodeConfig(NodePoolNodeConfigLinuxNodeConfigArgs linuxNodeConfig) {
            return linuxNodeConfig(Output.of(linuxNodeConfig));
        }

        /**
         * @param localNvmeSsdBlockConfig Parameters for raw-block local NVMe SSDs.
         * 
         * @return builder
         * 
         */
        public Builder localNvmeSsdBlockConfig(@Nullable Output<NodePoolNodeConfigLocalNvmeSsdBlockConfigArgs> localNvmeSsdBlockConfig) {
            $.localNvmeSsdBlockConfig = localNvmeSsdBlockConfig;
            return this;
        }

        /**
         * @param localNvmeSsdBlockConfig Parameters for raw-block local NVMe SSDs.
         * 
         * @return builder
         * 
         */
        public Builder localNvmeSsdBlockConfig(NodePoolNodeConfigLocalNvmeSsdBlockConfigArgs localNvmeSsdBlockConfig) {
            return localNvmeSsdBlockConfig(Output.of(localNvmeSsdBlockConfig));
        }

        /**
         * @param localSsdCount The number of local SSD disks to be attached to the node.
         * 
         * @return builder
         * 
         */
        public Builder localSsdCount(@Nullable Output<Integer> localSsdCount) {
            $.localSsdCount = localSsdCount;
            return this;
        }

        /**
         * @param localSsdCount The number of local SSD disks to be attached to the node.
         * 
         * @return builder
         * 
         */
        public Builder localSsdCount(Integer localSsdCount) {
            return localSsdCount(Output.of(localSsdCount));
        }

        /**
         * @param loggingVariant Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
         * 
         * @return builder
         * 
         */
        public Builder loggingVariant(@Nullable Output<String> loggingVariant) {
            $.loggingVariant = loggingVariant;
            return this;
        }

        /**
         * @param loggingVariant Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
         * 
         * @return builder
         * 
         */
        public Builder loggingVariant(String loggingVariant) {
            return loggingVariant(Output.of(loggingVariant));
        }

        /**
         * @param machineType The name of a Google Compute Engine machine type.
         * 
         * @return builder
         * 
         */
        public Builder machineType(@Nullable Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineType The name of a Google Compute Engine machine type.
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        /**
         * @param metadata The metadata key/value pairs assigned to instances in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata The metadata key/value pairs assigned to instances in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param minCpuPlatform Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
         * 
         * @return builder
         * 
         */
        public Builder minCpuPlatform(@Nullable Output<String> minCpuPlatform) {
            $.minCpuPlatform = minCpuPlatform;
            return this;
        }

        /**
         * @param minCpuPlatform Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
         * 
         * @return builder
         * 
         */
        public Builder minCpuPlatform(String minCpuPlatform) {
            return minCpuPlatform(Output.of(minCpuPlatform));
        }

        /**
         * @param nodeGroup Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroup(@Nullable Output<String> nodeGroup) {
            $.nodeGroup = nodeGroup;
            return this;
        }

        /**
         * @param nodeGroup Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeGroup(String nodeGroup) {
            return nodeGroup(Output.of(nodeGroup));
        }

        /**
         * @param oauthScopes The set of Google API scopes to be made available on all of the node VMs.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(@Nullable Output<List<String>> oauthScopes) {
            $.oauthScopes = oauthScopes;
            return this;
        }

        /**
         * @param oauthScopes The set of Google API scopes to be made available on all of the node VMs.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(List<String> oauthScopes) {
            return oauthScopes(Output.of(oauthScopes));
        }

        /**
         * @param oauthScopes The set of Google API scopes to be made available on all of the node VMs.
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }

        /**
         * @param preemptible Whether the nodes are created as preemptible VM instances.
         * 
         * @return builder
         * 
         */
        public Builder preemptible(@Nullable Output<Boolean> preemptible) {
            $.preemptible = preemptible;
            return this;
        }

        /**
         * @param preemptible Whether the nodes are created as preemptible VM instances.
         * 
         * @return builder
         * 
         */
        public Builder preemptible(Boolean preemptible) {
            return preemptible(Output.of(preemptible));
        }

        /**
         * @param reservationAffinity The reservation affinity configuration for the node pool.
         * 
         * @return builder
         * 
         */
        public Builder reservationAffinity(@Nullable Output<NodePoolNodeConfigReservationAffinityArgs> reservationAffinity) {
            $.reservationAffinity = reservationAffinity;
            return this;
        }

        /**
         * @param reservationAffinity The reservation affinity configuration for the node pool.
         * 
         * @return builder
         * 
         */
        public Builder reservationAffinity(NodePoolNodeConfigReservationAffinityArgs reservationAffinity) {
            return reservationAffinity(Output.of(reservationAffinity));
        }

        /**
         * @param resourceLabels The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder resourceLabels(@Nullable Output<Map<String,String>> resourceLabels) {
            $.resourceLabels = resourceLabels;
            return this;
        }

        /**
         * @param resourceLabels The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
         * 
         * @return builder
         * 
         */
        public Builder resourceLabels(Map<String,String> resourceLabels) {
            return resourceLabels(Output.of(resourceLabels));
        }

        /**
         * @param resourceManagerTags A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
         * 
         * @return builder
         * 
         */
        public Builder resourceManagerTags(@Nullable Output<Map<String,Object>> resourceManagerTags) {
            $.resourceManagerTags = resourceManagerTags;
            return this;
        }

        /**
         * @param resourceManagerTags A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
         * 
         * @return builder
         * 
         */
        public Builder resourceManagerTags(Map<String,Object> resourceManagerTags) {
            return resourceManagerTags(Output.of(resourceManagerTags));
        }

        /**
         * @param sandboxConfig Sandbox configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder sandboxConfig(@Nullable Output<NodePoolNodeConfigSandboxConfigArgs> sandboxConfig) {
            $.sandboxConfig = sandboxConfig;
            return this;
        }

        /**
         * @param sandboxConfig Sandbox configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder sandboxConfig(NodePoolNodeConfigSandboxConfigArgs sandboxConfig) {
            return sandboxConfig(Output.of(sandboxConfig));
        }

        /**
         * @param secondaryBootDisks Secondary boot disks for preloading data or container images.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBootDisks(@Nullable Output<List<NodePoolNodeConfigSecondaryBootDiskArgs>> secondaryBootDisks) {
            $.secondaryBootDisks = secondaryBootDisks;
            return this;
        }

        /**
         * @param secondaryBootDisks Secondary boot disks for preloading data or container images.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBootDisks(List<NodePoolNodeConfigSecondaryBootDiskArgs> secondaryBootDisks) {
            return secondaryBootDisks(Output.of(secondaryBootDisks));
        }

        /**
         * @param secondaryBootDisks Secondary boot disks for preloading data or container images.
         * 
         * @return builder
         * 
         */
        public Builder secondaryBootDisks(NodePoolNodeConfigSecondaryBootDiskArgs... secondaryBootDisks) {
            return secondaryBootDisks(List.of(secondaryBootDisks));
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the node VMs.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the node VMs.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param shieldedInstanceConfig Shielded Instance options.
         * 
         * @return builder
         * 
         */
        public Builder shieldedInstanceConfig(@Nullable Output<NodePoolNodeConfigShieldedInstanceConfigArgs> shieldedInstanceConfig) {
            $.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }

        /**
         * @param shieldedInstanceConfig Shielded Instance options.
         * 
         * @return builder
         * 
         */
        public Builder shieldedInstanceConfig(NodePoolNodeConfigShieldedInstanceConfigArgs shieldedInstanceConfig) {
            return shieldedInstanceConfig(Output.of(shieldedInstanceConfig));
        }

        /**
         * @param soleTenantConfig Node affinity options for sole tenant node pools.
         * 
         * @return builder
         * 
         */
        public Builder soleTenantConfig(@Nullable Output<NodePoolNodeConfigSoleTenantConfigArgs> soleTenantConfig) {
            $.soleTenantConfig = soleTenantConfig;
            return this;
        }

        /**
         * @param soleTenantConfig Node affinity options for sole tenant node pools.
         * 
         * @return builder
         * 
         */
        public Builder soleTenantConfig(NodePoolNodeConfigSoleTenantConfigArgs soleTenantConfig) {
            return soleTenantConfig(Output.of(soleTenantConfig));
        }

        /**
         * @param spot Whether the nodes are created as spot VM instances.
         * 
         * @return builder
         * 
         */
        public Builder spot(@Nullable Output<Boolean> spot) {
            $.spot = spot;
            return this;
        }

        /**
         * @param spot Whether the nodes are created as spot VM instances.
         * 
         * @return builder
         * 
         */
        public Builder spot(Boolean spot) {
            return spot(Output.of(spot));
        }

        /**
         * @param tags The list of instance tags applied to all nodes.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of instance tags applied to all nodes.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of instance tags applied to all nodes.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param taints List of Kubernetes taints to be applied to each node.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<NodePoolNodeConfigTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints List of Kubernetes taints to be applied to each node.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<NodePoolNodeConfigTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints List of Kubernetes taints to be applied to each node.
         * 
         * @return builder
         * 
         */
        public Builder taints(NodePoolNodeConfigTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param workloadMetadataConfig The workload metadata configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder workloadMetadataConfig(@Nullable Output<NodePoolNodeConfigWorkloadMetadataConfigArgs> workloadMetadataConfig) {
            $.workloadMetadataConfig = workloadMetadataConfig;
            return this;
        }

        /**
         * @param workloadMetadataConfig The workload metadata configuration for this node.
         * 
         * @return builder
         * 
         */
        public Builder workloadMetadataConfig(NodePoolNodeConfigWorkloadMetadataConfigArgs workloadMetadataConfig) {
            return workloadMetadataConfig(Output.of(workloadMetadataConfig));
        }

        public NodePoolNodeConfigArgs build() {
            return $;
        }
    }

}
