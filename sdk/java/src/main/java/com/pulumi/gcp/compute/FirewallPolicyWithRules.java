// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.FirewallPolicyWithRulesArgs;
import com.pulumi.gcp.compute.inputs.FirewallPolicyWithRulesState;
import com.pulumi.gcp.compute.outputs.FirewallPolicyWithRulesPredefinedRule;
import com.pulumi.gcp.compute.outputs.FirewallPolicyWithRulesRule;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The Compute FirewallPolicy with rules resource. It declaratively manges all
 * rules in the firewall policy.
 * 
 * ## Example Usage
 * 
 * ### Compute Firewall Policy With Rules Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.networksecurity.AddressGroup;
 * import com.pulumi.gcp.networksecurity.AddressGroupArgs;
 * import com.pulumi.gcp.networksecurity.SecurityProfile;
 * import com.pulumi.gcp.networksecurity.SecurityProfileArgs;
 * import com.pulumi.gcp.networksecurity.SecurityProfileGroup;
 * import com.pulumi.gcp.networksecurity.SecurityProfileGroupArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.tags.TagKey;
 * import com.pulumi.gcp.tags.TagKeyArgs;
 * import com.pulumi.gcp.tags.TagValue;
 * import com.pulumi.gcp.tags.TagValueArgs;
 * import com.pulumi.gcp.compute.FirewallPolicyWithRules;
 * import com.pulumi.gcp.compute.FirewallPolicyWithRulesArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallPolicyWithRulesRuleArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallPolicyWithRulesRuleMatchArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var addressGroup1 = new AddressGroup("addressGroup1", AddressGroupArgs.builder()
 *             .name("address-group")
 *             .parent("organizations/123456789")
 *             .description("Global address group")
 *             .location("global")
 *             .items("208.80.154.224/32")
 *             .type("IPV4")
 *             .capacity(100)
 *             .build());
 * 
 *         var securityProfile1 = new SecurityProfile("securityProfile1", SecurityProfileArgs.builder()
 *             .name("sp")
 *             .type("THREAT_PREVENTION")
 *             .parent("organizations/123456789")
 *             .location("global")
 *             .build());
 * 
 *         var securityProfileGroup1 = new SecurityProfileGroup("securityProfileGroup1", SecurityProfileGroupArgs.builder()
 *             .name("spg")
 *             .parent("organizations/123456789")
 *             .description("my description")
 *             .threatPreventionProfile(securityProfile1.id())
 *             .build());
 * 
 *         var network = new Network("network", NetworkArgs.builder()
 *             .name("network")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var basicKey = new TagKey("basicKey", TagKeyArgs.builder()
 *             .description("For keyname resources.")
 *             .parent("organizations/123456789")
 *             .purpose("GCE_FIREWALL")
 *             .shortName("tag-key")
 *             .purposeData(Map.of("organization", "auto"))
 *             .build());
 * 
 *         var basicValue = new TagValue("basicValue", TagValueArgs.builder()
 *             .description("For valuename resources.")
 *             .parent(basicKey.id())
 *             .shortName("tag-value")
 *             .build());
 * 
 *         var primary = new FirewallPolicyWithRules("primary", FirewallPolicyWithRulesArgs.builder()
 *             .shortName("fw-policy")
 *             .description("Terraform test")
 *             .parent("organizations/123456789")
 *             .rules(            
 *                 FirewallPolicyWithRulesRuleArgs.builder()
 *                     .description("tcp rule")
 *                     .priority(1000)
 *                     .enableLogging(true)
 *                     .action("allow")
 *                     .direction("EGRESS")
 *                     .targetResources(network.selfLink())
 *                     .match(FirewallPolicyWithRulesRuleMatchArgs.builder()
 *                         .destIpRanges("11.100.0.1/32")
 *                         .destFqdns(                        
 *                             "www.yyy.com",
 *                             "www.zzz.com")
 *                         .destRegionCodes(                        
 *                             "HK",
 *                             "IN")
 *                         .destThreatIntelligences(                        
 *                             "iplist-search-engines-crawlers",
 *                             "iplist-tor-exit-nodes")
 *                         .destAddressGroups(addressGroup1.id())
 *                         .layer4Configs(FirewallPolicyWithRulesRuleMatchLayer4ConfigArgs.builder()
 *                             .ipProtocol("tcp")
 *                             .ports(                            
 *                                 "8080",
 *                                 "7070")
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 FirewallPolicyWithRulesRuleArgs.builder()
 *                     .description("udp rule")
 *                     .priority(2000)
 *                     .enableLogging(false)
 *                     .action("deny")
 *                     .direction("INGRESS")
 *                     .disabled(true)
 *                     .match(FirewallPolicyWithRulesRuleMatchArgs.builder()
 *                         .srcIpRanges("0.0.0.0/0")
 *                         .srcFqdns(                        
 *                             "www.abc.com",
 *                             "www.def.com")
 *                         .srcRegionCodes(                        
 *                             "US",
 *                             "CA")
 *                         .srcThreatIntelligences(                        
 *                             "iplist-known-malicious-ips",
 *                             "iplist-public-clouds")
 *                         .srcAddressGroups(addressGroup1.id())
 *                         .layer4Configs(FirewallPolicyWithRulesRuleMatchLayer4ConfigArgs.builder()
 *                             .ipProtocol("udp")
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 FirewallPolicyWithRulesRuleArgs.builder()
 *                     .description("security profile group rule")
 *                     .ruleName("tcp rule")
 *                     .priority(3000)
 *                     .enableLogging(false)
 *                     .action("apply_security_profile_group")
 *                     .direction("INGRESS")
 *                     .targetServiceAccounts("test}{@literal @}{@code google.com")
 *                     .securityProfileGroup(securityProfileGroup1.id().applyValue(_id -> String.format("//networksecurity.googleapis.com/%s", _id)))
 *                     .tlsInspect(true)
 *                     .match(FirewallPolicyWithRulesRuleMatchArgs.builder()
 *                         .srcIpRanges("0.0.0.0/0")
 *                         .layer4Configs(FirewallPolicyWithRulesRuleMatchLayer4ConfigArgs.builder()
 *                             .ipProtocol("tcp")
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 FirewallPolicyWithRulesRuleArgs.builder()
 *                     .description("secure tags")
 *                     .ruleName("secure tags rule")
 *                     .priority(4000)
 *                     .enableLogging(false)
 *                     .action("allow")
 *                     .direction("INGRESS")
 *                     .targetSecureTags(FirewallPolicyWithRulesRuleTargetSecureTagArgs.builder()
 *                         .name(basicValue.id())
 *                         .build())
 *                     .match(FirewallPolicyWithRulesRuleMatchArgs.builder()
 *                         .srcIpRanges("11.100.0.1/32")
 *                         .srcSecureTags(FirewallPolicyWithRulesRuleMatchSrcSecureTagArgs.builder()
 *                             .name(basicValue.id())
 *                             .build())
 *                         .layer4Configs(FirewallPolicyWithRulesRuleMatchLayer4ConfigArgs.builder()
 *                             .ipProtocol("tcp")
 *                             .ports("8080")
 *                             .build())
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * FirewallPolicyWithRules can be imported using any of these accepted formats:
 * 
 * * `locations/global/firewallPolicies/{{policy_id}}`
 * 
 * * `{{policy_id}}`
 * 
 * When using the `pulumi import` command, FirewallPolicyWithRules can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/firewallPolicyWithRules:FirewallPolicyWithRules default locations/global/firewallPolicies/{{policy_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/firewallPolicyWithRules:FirewallPolicyWithRules default {{policy_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/firewallPolicyWithRules:FirewallPolicyWithRules")
public class FirewallPolicyWithRules extends com.pulumi.resources.CustomResource {
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Fingerprint of the resource. This field is used internally during updates of this resource.
     * 
     */
    @Export(name="fingerprint", refs={String.class}, tree="[0]")
    private Output<String> fingerprint;

    /**
     * @return Fingerprint of the resource. This field is used internally during updates of this resource.
     * 
     */
    public Output<String> fingerprint() {
        return this.fingerprint;
    }
    /**
     * The parent of this FirewallPolicy in the Cloud Resource Hierarchy.
     * Format: organizations/{organization_id} or folders/{folder_id}
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output<String> parent;

    /**
     * @return The parent of this FirewallPolicy in the Cloud Resource Hierarchy.
     * Format: organizations/{organization_id} or folders/{folder_id}
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    @Export(name="policyId", refs={String.class}, tree="[0]")
    private Output<String> policyId;

    /**
     * @return The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }
    /**
     * A list of pre-define firewall policy rules.
     * Structure is documented below.
     * 
     */
    @Export(name="predefinedRules", refs={List.class,FirewallPolicyWithRulesPredefinedRule.class}, tree="[0,1]")
    private Output<List<FirewallPolicyWithRulesPredefinedRule>> predefinedRules;

    /**
     * @return A list of pre-define firewall policy rules.
     * Structure is documented below.
     * 
     */
    public Output<List<FirewallPolicyWithRulesPredefinedRule>> predefinedRules() {
        return this.predefinedRules;
    }
    /**
     * Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
     * 
     */
    @Export(name="ruleTupleCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> ruleTupleCount;

    /**
     * @return Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
     * 
     */
    public Output<Integer> ruleTupleCount() {
        return this.ruleTupleCount;
    }
    /**
     * A list of firewall policy rules.
     * Structure is documented below.
     * 
     */
    @Export(name="rules", refs={List.class,FirewallPolicyWithRulesRule.class}, tree="[0,1]")
    private Output<List<FirewallPolicyWithRulesRule>> rules;

    /**
     * @return A list of firewall policy rules.
     * Structure is documented below.
     * 
     */
    public Output<List<FirewallPolicyWithRulesRule>> rules() {
        return this.rules;
    }
    /**
     * Server-defined URL for the resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * Server-defined URL for this resource with the resource id.
     * 
     */
    @Export(name="selfLinkWithId", refs={String.class}, tree="[0]")
    private Output<String> selfLinkWithId;

    /**
     * @return Server-defined URL for this resource with the resource id.
     * 
     */
    public Output<String> selfLinkWithId() {
        return this.selfLinkWithId;
    }
    /**
     * A textual name of the security policy.
     * 
     */
    @Export(name="shortName", refs={String.class}, tree="[0]")
    private Output<String> shortName;

    /**
     * @return A textual name of the security policy.
     * 
     */
    public Output<String> shortName() {
        return this.shortName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FirewallPolicyWithRules(java.lang.String name) {
        this(name, FirewallPolicyWithRulesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FirewallPolicyWithRules(java.lang.String name, FirewallPolicyWithRulesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FirewallPolicyWithRules(java.lang.String name, FirewallPolicyWithRulesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/firewallPolicyWithRules:FirewallPolicyWithRules", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FirewallPolicyWithRules(java.lang.String name, Output<java.lang.String> id, @Nullable FirewallPolicyWithRulesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/firewallPolicyWithRules:FirewallPolicyWithRules", name, state, makeResourceOptions(options, id), false);
    }

    private static FirewallPolicyWithRulesArgs makeArgs(FirewallPolicyWithRulesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FirewallPolicyWithRulesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FirewallPolicyWithRules get(java.lang.String name, Output<java.lang.String> id, @Nullable FirewallPolicyWithRulesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FirewallPolicyWithRules(name, id, state, options);
    }
}
