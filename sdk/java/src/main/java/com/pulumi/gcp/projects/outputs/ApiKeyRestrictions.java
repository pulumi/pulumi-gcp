// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.projects.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.projects.outputs.ApiKeyRestrictionsAndroidKeyRestrictions;
import com.pulumi.gcp.projects.outputs.ApiKeyRestrictionsApiTarget;
import com.pulumi.gcp.projects.outputs.ApiKeyRestrictionsBrowserKeyRestrictions;
import com.pulumi.gcp.projects.outputs.ApiKeyRestrictionsIosKeyRestrictions;
import com.pulumi.gcp.projects.outputs.ApiKeyRestrictionsServerKeyRestrictions;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApiKeyRestrictions {
    /**
     * @return The Android apps that are allowed to use the key.
     * 
     */
    private @Nullable ApiKeyRestrictionsAndroidKeyRestrictions androidKeyRestrictions;
    /**
     * @return A restriction for a specific service and optionally one or more specific methods. Requests are allowed if they match any of these restrictions. If no restrictions are specified, all targets are allowed.
     * 
     */
    private @Nullable List<ApiKeyRestrictionsApiTarget> apiTargets;
    /**
     * @return The HTTP referrers (websites) that are allowed to use the key.
     * 
     */
    private @Nullable ApiKeyRestrictionsBrowserKeyRestrictions browserKeyRestrictions;
    /**
     * @return The iOS apps that are allowed to use the key.
     * 
     */
    private @Nullable ApiKeyRestrictionsIosKeyRestrictions iosKeyRestrictions;
    /**
     * @return The IP addresses of callers that are allowed to use the key.
     * 
     */
    private @Nullable ApiKeyRestrictionsServerKeyRestrictions serverKeyRestrictions;

    private ApiKeyRestrictions() {}
    /**
     * @return The Android apps that are allowed to use the key.
     * 
     */
    public Optional<ApiKeyRestrictionsAndroidKeyRestrictions> androidKeyRestrictions() {
        return Optional.ofNullable(this.androidKeyRestrictions);
    }
    /**
     * @return A restriction for a specific service and optionally one or more specific methods. Requests are allowed if they match any of these restrictions. If no restrictions are specified, all targets are allowed.
     * 
     */
    public List<ApiKeyRestrictionsApiTarget> apiTargets() {
        return this.apiTargets == null ? List.of() : this.apiTargets;
    }
    /**
     * @return The HTTP referrers (websites) that are allowed to use the key.
     * 
     */
    public Optional<ApiKeyRestrictionsBrowserKeyRestrictions> browserKeyRestrictions() {
        return Optional.ofNullable(this.browserKeyRestrictions);
    }
    /**
     * @return The iOS apps that are allowed to use the key.
     * 
     */
    public Optional<ApiKeyRestrictionsIosKeyRestrictions> iosKeyRestrictions() {
        return Optional.ofNullable(this.iosKeyRestrictions);
    }
    /**
     * @return The IP addresses of callers that are allowed to use the key.
     * 
     */
    public Optional<ApiKeyRestrictionsServerKeyRestrictions> serverKeyRestrictions() {
        return Optional.ofNullable(this.serverKeyRestrictions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiKeyRestrictions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ApiKeyRestrictionsAndroidKeyRestrictions androidKeyRestrictions;
        private @Nullable List<ApiKeyRestrictionsApiTarget> apiTargets;
        private @Nullable ApiKeyRestrictionsBrowserKeyRestrictions browserKeyRestrictions;
        private @Nullable ApiKeyRestrictionsIosKeyRestrictions iosKeyRestrictions;
        private @Nullable ApiKeyRestrictionsServerKeyRestrictions serverKeyRestrictions;
        public Builder() {}
        public Builder(ApiKeyRestrictions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.androidKeyRestrictions = defaults.androidKeyRestrictions;
    	      this.apiTargets = defaults.apiTargets;
    	      this.browserKeyRestrictions = defaults.browserKeyRestrictions;
    	      this.iosKeyRestrictions = defaults.iosKeyRestrictions;
    	      this.serverKeyRestrictions = defaults.serverKeyRestrictions;
        }

        @CustomType.Setter
        public Builder androidKeyRestrictions(@Nullable ApiKeyRestrictionsAndroidKeyRestrictions androidKeyRestrictions) {
            this.androidKeyRestrictions = androidKeyRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder apiTargets(@Nullable List<ApiKeyRestrictionsApiTarget> apiTargets) {
            this.apiTargets = apiTargets;
            return this;
        }
        public Builder apiTargets(ApiKeyRestrictionsApiTarget... apiTargets) {
            return apiTargets(List.of(apiTargets));
        }
        @CustomType.Setter
        public Builder browserKeyRestrictions(@Nullable ApiKeyRestrictionsBrowserKeyRestrictions browserKeyRestrictions) {
            this.browserKeyRestrictions = browserKeyRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder iosKeyRestrictions(@Nullable ApiKeyRestrictionsIosKeyRestrictions iosKeyRestrictions) {
            this.iosKeyRestrictions = iosKeyRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder serverKeyRestrictions(@Nullable ApiKeyRestrictionsServerKeyRestrictions serverKeyRestrictions) {
            this.serverKeyRestrictions = serverKeyRestrictions;
            return this;
        }
        public ApiKeyRestrictions build() {
            final var o = new ApiKeyRestrictions();
            o.androidKeyRestrictions = androidKeyRestrictions;
            o.apiTargets = apiTargets;
            o.browserKeyRestrictions = browserKeyRestrictions;
            o.iosKeyRestrictions = iosKeyRestrictions;
            o.serverKeyRestrictions = serverKeyRestrictions;
            return o;
        }
    }
}
