// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.contactcenterinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.contactcenterinsights.outputs.AnalysisRuleAnnotatorSelectorQaConfig;
import com.pulumi.gcp.contactcenterinsights.outputs.AnalysisRuleAnnotatorSelectorSummarizationConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AnalysisRuleAnnotatorSelector {
    /**
     * @return The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * 
     */
    private @Nullable List<String> issueModels;
    /**
     * @return The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * 
     */
    private @Nullable List<String> phraseMatchers;
    /**
     * @return Configuration for the QA feature.
     * Structure is documented below.
     * 
     */
    private @Nullable AnalysisRuleAnnotatorSelectorQaConfig qaConfig;
    /**
     * @return Whether to run the entity annotator.
     * 
     */
    private @Nullable Boolean runEntityAnnotator;
    /**
     * @return Whether to run the intent annotator.
     * 
     */
    private @Nullable Boolean runIntentAnnotator;
    /**
     * @return Whether to run the interruption annotator.
     * 
     */
    private @Nullable Boolean runInterruptionAnnotator;
    /**
     * @return Whether to run the issue model annotator. A model should have already been
     * deployed for this to take effect.
     * 
     */
    private @Nullable Boolean runIssueModelAnnotator;
    /**
     * @return Whether to run the active phrase matcher annotator(s).
     * 
     */
    private @Nullable Boolean runPhraseMatcherAnnotator;
    /**
     * @return Whether to run the QA annotator.
     * 
     */
    private @Nullable Boolean runQaAnnotator;
    /**
     * @return Whether to run the sentiment annotator.
     * 
     */
    private @Nullable Boolean runSentimentAnnotator;
    /**
     * @return Whether to run the silence annotator.
     * 
     */
    private @Nullable Boolean runSilenceAnnotator;
    /**
     * @return Whether to run the summarization annotator.
     * 
     */
    private @Nullable Boolean runSummarizationAnnotator;
    /**
     * @return Configuration for summarization.
     * Structure is documented below.
     * 
     */
    private @Nullable AnalysisRuleAnnotatorSelectorSummarizationConfig summarizationConfig;

    private AnalysisRuleAnnotatorSelector() {}
    /**
     * @return The issue model to run. If not provided, the most recently deployed topic
     * model will be used. The provided issue model will only be used for
     * inference if the issue model is deployed and if run_issue_model_annotator
     * is set to true. If more than one issue model is provided, only the first
     * provided issue model will be used for inference.
     * 
     */
    public List<String> issueModels() {
        return this.issueModels == null ? List.of() : this.issueModels;
    }
    /**
     * @return The list of phrase matchers to run. If not provided, all active phrase
     * matchers will be used. If inactive phrase matchers are provided, they will
     * not be used. Phrase matchers will be run only if
     * run_phrase_matcher_annotator is set to true. Format:
     * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * 
     */
    public List<String> phraseMatchers() {
        return this.phraseMatchers == null ? List.of() : this.phraseMatchers;
    }
    /**
     * @return Configuration for the QA feature.
     * Structure is documented below.
     * 
     */
    public Optional<AnalysisRuleAnnotatorSelectorQaConfig> qaConfig() {
        return Optional.ofNullable(this.qaConfig);
    }
    /**
     * @return Whether to run the entity annotator.
     * 
     */
    public Optional<Boolean> runEntityAnnotator() {
        return Optional.ofNullable(this.runEntityAnnotator);
    }
    /**
     * @return Whether to run the intent annotator.
     * 
     */
    public Optional<Boolean> runIntentAnnotator() {
        return Optional.ofNullable(this.runIntentAnnotator);
    }
    /**
     * @return Whether to run the interruption annotator.
     * 
     */
    public Optional<Boolean> runInterruptionAnnotator() {
        return Optional.ofNullable(this.runInterruptionAnnotator);
    }
    /**
     * @return Whether to run the issue model annotator. A model should have already been
     * deployed for this to take effect.
     * 
     */
    public Optional<Boolean> runIssueModelAnnotator() {
        return Optional.ofNullable(this.runIssueModelAnnotator);
    }
    /**
     * @return Whether to run the active phrase matcher annotator(s).
     * 
     */
    public Optional<Boolean> runPhraseMatcherAnnotator() {
        return Optional.ofNullable(this.runPhraseMatcherAnnotator);
    }
    /**
     * @return Whether to run the QA annotator.
     * 
     */
    public Optional<Boolean> runQaAnnotator() {
        return Optional.ofNullable(this.runQaAnnotator);
    }
    /**
     * @return Whether to run the sentiment annotator.
     * 
     */
    public Optional<Boolean> runSentimentAnnotator() {
        return Optional.ofNullable(this.runSentimentAnnotator);
    }
    /**
     * @return Whether to run the silence annotator.
     * 
     */
    public Optional<Boolean> runSilenceAnnotator() {
        return Optional.ofNullable(this.runSilenceAnnotator);
    }
    /**
     * @return Whether to run the summarization annotator.
     * 
     */
    public Optional<Boolean> runSummarizationAnnotator() {
        return Optional.ofNullable(this.runSummarizationAnnotator);
    }
    /**
     * @return Configuration for summarization.
     * Structure is documented below.
     * 
     */
    public Optional<AnalysisRuleAnnotatorSelectorSummarizationConfig> summarizationConfig() {
        return Optional.ofNullable(this.summarizationConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnalysisRuleAnnotatorSelector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> issueModels;
        private @Nullable List<String> phraseMatchers;
        private @Nullable AnalysisRuleAnnotatorSelectorQaConfig qaConfig;
        private @Nullable Boolean runEntityAnnotator;
        private @Nullable Boolean runIntentAnnotator;
        private @Nullable Boolean runInterruptionAnnotator;
        private @Nullable Boolean runIssueModelAnnotator;
        private @Nullable Boolean runPhraseMatcherAnnotator;
        private @Nullable Boolean runQaAnnotator;
        private @Nullable Boolean runSentimentAnnotator;
        private @Nullable Boolean runSilenceAnnotator;
        private @Nullable Boolean runSummarizationAnnotator;
        private @Nullable AnalysisRuleAnnotatorSelectorSummarizationConfig summarizationConfig;
        public Builder() {}
        public Builder(AnalysisRuleAnnotatorSelector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.issueModels = defaults.issueModels;
    	      this.phraseMatchers = defaults.phraseMatchers;
    	      this.qaConfig = defaults.qaConfig;
    	      this.runEntityAnnotator = defaults.runEntityAnnotator;
    	      this.runIntentAnnotator = defaults.runIntentAnnotator;
    	      this.runInterruptionAnnotator = defaults.runInterruptionAnnotator;
    	      this.runIssueModelAnnotator = defaults.runIssueModelAnnotator;
    	      this.runPhraseMatcherAnnotator = defaults.runPhraseMatcherAnnotator;
    	      this.runQaAnnotator = defaults.runQaAnnotator;
    	      this.runSentimentAnnotator = defaults.runSentimentAnnotator;
    	      this.runSilenceAnnotator = defaults.runSilenceAnnotator;
    	      this.runSummarizationAnnotator = defaults.runSummarizationAnnotator;
    	      this.summarizationConfig = defaults.summarizationConfig;
        }

        @CustomType.Setter
        public Builder issueModels(@Nullable List<String> issueModels) {

            this.issueModels = issueModels;
            return this;
        }
        public Builder issueModels(String... issueModels) {
            return issueModels(List.of(issueModels));
        }
        @CustomType.Setter
        public Builder phraseMatchers(@Nullable List<String> phraseMatchers) {

            this.phraseMatchers = phraseMatchers;
            return this;
        }
        public Builder phraseMatchers(String... phraseMatchers) {
            return phraseMatchers(List.of(phraseMatchers));
        }
        @CustomType.Setter
        public Builder qaConfig(@Nullable AnalysisRuleAnnotatorSelectorQaConfig qaConfig) {

            this.qaConfig = qaConfig;
            return this;
        }
        @CustomType.Setter
        public Builder runEntityAnnotator(@Nullable Boolean runEntityAnnotator) {

            this.runEntityAnnotator = runEntityAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runIntentAnnotator(@Nullable Boolean runIntentAnnotator) {

            this.runIntentAnnotator = runIntentAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runInterruptionAnnotator(@Nullable Boolean runInterruptionAnnotator) {

            this.runInterruptionAnnotator = runInterruptionAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runIssueModelAnnotator(@Nullable Boolean runIssueModelAnnotator) {

            this.runIssueModelAnnotator = runIssueModelAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runPhraseMatcherAnnotator(@Nullable Boolean runPhraseMatcherAnnotator) {

            this.runPhraseMatcherAnnotator = runPhraseMatcherAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runQaAnnotator(@Nullable Boolean runQaAnnotator) {

            this.runQaAnnotator = runQaAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runSentimentAnnotator(@Nullable Boolean runSentimentAnnotator) {

            this.runSentimentAnnotator = runSentimentAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runSilenceAnnotator(@Nullable Boolean runSilenceAnnotator) {

            this.runSilenceAnnotator = runSilenceAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder runSummarizationAnnotator(@Nullable Boolean runSummarizationAnnotator) {

            this.runSummarizationAnnotator = runSummarizationAnnotator;
            return this;
        }
        @CustomType.Setter
        public Builder summarizationConfig(@Nullable AnalysisRuleAnnotatorSelectorSummarizationConfig summarizationConfig) {

            this.summarizationConfig = summarizationConfig;
            return this;
        }
        public AnalysisRuleAnnotatorSelector build() {
            final var _resultValue = new AnalysisRuleAnnotatorSelector();
            _resultValue.issueModels = issueModels;
            _resultValue.phraseMatchers = phraseMatchers;
            _resultValue.qaConfig = qaConfig;
            _resultValue.runEntityAnnotator = runEntityAnnotator;
            _resultValue.runIntentAnnotator = runIntentAnnotator;
            _resultValue.runInterruptionAnnotator = runInterruptionAnnotator;
            _resultValue.runIssueModelAnnotator = runIssueModelAnnotator;
            _resultValue.runPhraseMatcherAnnotator = runPhraseMatcherAnnotator;
            _resultValue.runQaAnnotator = runQaAnnotator;
            _resultValue.runSentimentAnnotator = runSentimentAnnotator;
            _resultValue.runSilenceAnnotator = runSilenceAnnotator;
            _resultValue.runSummarizationAnnotator = runSummarizationAnnotator;
            _resultValue.summarizationConfig = summarizationConfig;
            return _resultValue;
        }
    }
}
