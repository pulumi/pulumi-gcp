// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigDecryptedCredentialAuthTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigDecryptedCredentialAuthTokenArgs Empty = new AuthConfigDecryptedCredentialAuthTokenArgs();

    /**
     * The token for the auth type.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The token for the auth type.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Authentication type, e.g. &#34;Basic&#34;, &#34;Bearer&#34;, etc.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Authentication type, e.g. &#34;Basic&#34;, &#34;Bearer&#34;, etc.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AuthConfigDecryptedCredentialAuthTokenArgs() {}

    private AuthConfigDecryptedCredentialAuthTokenArgs(AuthConfigDecryptedCredentialAuthTokenArgs $) {
        this.token = $.token;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigDecryptedCredentialAuthTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigDecryptedCredentialAuthTokenArgs $;

        public Builder() {
            $ = new AuthConfigDecryptedCredentialAuthTokenArgs();
        }

        public Builder(AuthConfigDecryptedCredentialAuthTokenArgs defaults) {
            $ = new AuthConfigDecryptedCredentialAuthTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param token The token for the auth type.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token for the auth type.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param type Authentication type, e.g. &#34;Basic&#34;, &#34;Bearer&#34;, etc.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Authentication type, e.g. &#34;Basic&#34;, &#34;Bearer&#34;, etc.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AuthConfigDecryptedCredentialAuthTokenArgs build() {
            return $;
        }
    }

}
