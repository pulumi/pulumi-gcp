// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionCommitmentLicenseResourceArgs;
import com.pulumi.gcp.compute.inputs.RegionCommitmentResourceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionCommitmentState extends com.pulumi.resources.ResourceArgs {

    public static final RegionCommitmentState Empty = new RegionCommitmentState();

    /**
     * Specifies whether to enable automatic renewal for the commitment.
     * The default value is false if not specified.
     * If the field is set to true, the commitment will be automatically renewed for either
     * one or three years according to the terms of the existing commitment.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Specifies whether to enable automatic renewal for the commitment.
     * The default value is false if not specified.
     * If the field is set to true, the commitment will be automatically renewed for either
     * one or three years according to the terms of the existing commitment.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The category of the commitment. Category MACHINE specifies commitments composed of
     * machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
     * specifies commitments composed of software licenses, listed in licenseResources.
     * Note that only MACHINE commitments should have a Type specified.
     * Possible values are: `LICENSE`, `MACHINE`.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The category of the commitment. Category MACHINE specifies commitments composed of
     * machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
     * specifies commitments composed of software licenses, listed in licenseResources.
     * Note that only MACHINE commitments should have a Type specified.
     * Possible values are: `LICENSE`, `MACHINE`.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Unique identifier for the resource.
     * 
     */
    @Import(name="commitmentId")
    private @Nullable Output<Integer> commitmentId;

    /**
     * @return Unique identifier for the resource.
     * 
     */
    public Optional<Output<Integer>> commitmentId() {
        return Optional.ofNullable(this.commitmentId);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Commitment end time in RFC3339 text format.
     * 
     */
    @Import(name="endTimestamp")
    private @Nullable Output<String> endTimestamp;

    /**
     * @return Commitment end time in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> endTimestamp() {
        return Optional.ofNullable(this.endTimestamp);
    }

    /**
     * The license specification required as part of a license commitment.
     * Structure is documented below.
     * 
     */
    @Import(name="licenseResource")
    private @Nullable Output<RegionCommitmentLicenseResourceArgs> licenseResource;

    /**
     * @return The license specification required as part of a license commitment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionCommitmentLicenseResourceArgs>> licenseResource() {
        return Optional.ofNullable(this.licenseResource);
    }

    /**
     * Name of the resource. The name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. The name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The plan for this commitment, which determines duration and discount rate.
     * The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
     * Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
     * 
     * ***
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return The plan for this commitment, which determines duration and discount rate.
     * The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
     * Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * URL of the region where this commitment may be used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return URL of the region where this commitment may be used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A list of commitment amounts for particular resources.
     * Note that VCPU and MEMORY resource commitments must occur together.
     * Structure is documented below.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<List<RegionCommitmentResourceArgs>> resources;

    /**
     * @return A list of commitment amounts for particular resources.
     * Note that VCPU and MEMORY resource commitments must occur together.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionCommitmentResourceArgs>>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Commitment start time in RFC3339 text format.
     * 
     */
    @Import(name="startTimestamp")
    private @Nullable Output<String> startTimestamp;

    /**
     * @return Commitment start time in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> startTimestamp() {
        return Optional.ofNullable(this.startTimestamp);
    }

    /**
     * Status of the commitment with regards to eventual expiration
     * (each commitment has an end date defined).
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the commitment with regards to eventual expiration
     * (each commitment has an end date defined).
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A human-readable explanation of the status.
     * 
     */
    @Import(name="statusMessage")
    private @Nullable Output<String> statusMessage;

    /**
     * @return A human-readable explanation of the status.
     * 
     */
    public Optional<Output<String>> statusMessage() {
        return Optional.ofNullable(this.statusMessage);
    }

    /**
     * The type of commitment, which affects the discount rate and the eligible resources.
     * The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
     * `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
     * `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
     * `GRAPHICS_OPTIMIZED_G2`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of commitment, which affects the discount rate and the eligible resources.
     * The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
     * `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
     * `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
     * `GRAPHICS_OPTIMIZED_G2`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RegionCommitmentState() {}

    private RegionCommitmentState(RegionCommitmentState $) {
        this.autoRenew = $.autoRenew;
        this.category = $.category;
        this.commitmentId = $.commitmentId;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.endTimestamp = $.endTimestamp;
        this.licenseResource = $.licenseResource;
        this.name = $.name;
        this.plan = $.plan;
        this.project = $.project;
        this.region = $.region;
        this.resources = $.resources;
        this.selfLink = $.selfLink;
        this.startTimestamp = $.startTimestamp;
        this.status = $.status;
        this.statusMessage = $.statusMessage;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionCommitmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionCommitmentState $;

        public Builder() {
            $ = new RegionCommitmentState();
        }

        public Builder(RegionCommitmentState defaults) {
            $ = new RegionCommitmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Specifies whether to enable automatic renewal for the commitment.
         * The default value is false if not specified.
         * If the field is set to true, the commitment will be automatically renewed for either
         * one or three years according to the terms of the existing commitment.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Specifies whether to enable automatic renewal for the commitment.
         * The default value is false if not specified.
         * If the field is set to true, the commitment will be automatically renewed for either
         * one or three years according to the terms of the existing commitment.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param category The category of the commitment. Category MACHINE specifies commitments composed of
         * machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
         * specifies commitments composed of software licenses, listed in licenseResources.
         * Note that only MACHINE commitments should have a Type specified.
         * Possible values are: `LICENSE`, `MACHINE`.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The category of the commitment. Category MACHINE specifies commitments composed of
         * machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE
         * specifies commitments composed of software licenses, listed in licenseResources.
         * Note that only MACHINE commitments should have a Type specified.
         * Possible values are: `LICENSE`, `MACHINE`.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param commitmentId Unique identifier for the resource.
         * 
         * @return builder
         * 
         */
        public Builder commitmentId(@Nullable Output<Integer> commitmentId) {
            $.commitmentId = commitmentId;
            return this;
        }

        /**
         * @param commitmentId Unique identifier for the resource.
         * 
         * @return builder
         * 
         */
        public Builder commitmentId(Integer commitmentId) {
            return commitmentId(Output.of(commitmentId));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTimestamp Commitment end time in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder endTimestamp(@Nullable Output<String> endTimestamp) {
            $.endTimestamp = endTimestamp;
            return this;
        }

        /**
         * @param endTimestamp Commitment end time in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder endTimestamp(String endTimestamp) {
            return endTimestamp(Output.of(endTimestamp));
        }

        /**
         * @param licenseResource The license specification required as part of a license commitment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder licenseResource(@Nullable Output<RegionCommitmentLicenseResourceArgs> licenseResource) {
            $.licenseResource = licenseResource;
            return this;
        }

        /**
         * @param licenseResource The license specification required as part of a license commitment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder licenseResource(RegionCommitmentLicenseResourceArgs licenseResource) {
            return licenseResource(Output.of(licenseResource));
        }

        /**
         * @param name Name of the resource. The name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. The name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plan The plan for this commitment, which determines duration and discount rate.
         * The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
         * Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The plan for this commitment, which determines duration and discount rate.
         * The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
         * Possible values are: `TWELVE_MONTH`, `THIRTY_SIX_MONTH`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region URL of the region where this commitment may be used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region URL of the region where this commitment may be used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resources A list of commitment amounts for particular resources.
         * Note that VCPU and MEMORY resource commitments must occur together.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable Output<List<RegionCommitmentResourceArgs>> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources A list of commitment amounts for particular resources.
         * Note that VCPU and MEMORY resource commitments must occur together.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(List<RegionCommitmentResourceArgs> resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param resources A list of commitment amounts for particular resources.
         * Note that VCPU and MEMORY resource commitments must occur together.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resources(RegionCommitmentResourceArgs... resources) {
            return resources(List.of(resources));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param startTimestamp Commitment start time in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder startTimestamp(@Nullable Output<String> startTimestamp) {
            $.startTimestamp = startTimestamp;
            return this;
        }

        /**
         * @param startTimestamp Commitment start time in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder startTimestamp(String startTimestamp) {
            return startTimestamp(Output.of(startTimestamp));
        }

        /**
         * @param status Status of the commitment with regards to eventual expiration
         * (each commitment has an end date defined).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the commitment with regards to eventual expiration
         * (each commitment has an end date defined).
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusMessage A human-readable explanation of the status.
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(@Nullable Output<String> statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        /**
         * @param statusMessage A human-readable explanation of the status.
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(String statusMessage) {
            return statusMessage(Output.of(statusMessage));
        }

        /**
         * @param type The type of commitment, which affects the discount rate and the eligible resources.
         * The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
         * `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
         * `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
         * `GRAPHICS_OPTIMIZED_G2`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of commitment, which affects the discount rate and the eligible resources.
         * The type could be one of the following value: `MEMORY_OPTIMIZED`, `ACCELERATOR_OPTIMIZED`,
         * `GENERAL_PURPOSE_N1`, `GENERAL_PURPOSE_N2`, `GENERAL_PURPOSE_N2D`, `GENERAL_PURPOSE_E2`,
         * `GENERAL_PURPOSE_T2D`, `GENERAL_PURPOSE_C3`, `COMPUTE_OPTIMIZED_C2`, `COMPUTE_OPTIMIZED_C2D` and
         * `GRAPHICS_OPTIMIZED_G2`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RegionCommitmentState build() {
            return $;
        }
    }

}
