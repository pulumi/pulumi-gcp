// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GdcSparkApplicationSparkApplicationConfig {
    /**
     * @return HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: `.jar`, `.tar`, `.tar.gz`, `.tgz`, and `.zip`.
     * 
     */
    private @Nullable List<String> archiveUris;
    /**
     * @return The arguments to pass to the driver. Do not include arguments that can be set as application properties, such as `--conf`, since a collision can occur that causes an incorrect application submission.
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return HCFS URIs of files to be placed in the working directory of each executor.
     * 
     */
    private @Nullable List<String> fileUris;
    /**
     * @return HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
     * 
     */
    private @Nullable List<String> jarFileUris;
    /**
     * @return The name of the driver main class. The jar file that contains the class must be in the classpath or specified in `jar_file_uris`.
     * 
     */
    private @Nullable String mainClass;
    /**
     * @return The HCFS URI of the jar file that contains the main class.
     * 
     */
    private @Nullable String mainJarFileUri;

    private GdcSparkApplicationSparkApplicationConfig() {}
    /**
     * @return HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: `.jar`, `.tar`, `.tar.gz`, `.tgz`, and `.zip`.
     * 
     */
    public List<String> archiveUris() {
        return this.archiveUris == null ? List.of() : this.archiveUris;
    }
    /**
     * @return The arguments to pass to the driver. Do not include arguments that can be set as application properties, such as `--conf`, since a collision can occur that causes an incorrect application submission.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return HCFS URIs of files to be placed in the working directory of each executor.
     * 
     */
    public List<String> fileUris() {
        return this.fileUris == null ? List.of() : this.fileUris;
    }
    /**
     * @return HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
     * 
     */
    public List<String> jarFileUris() {
        return this.jarFileUris == null ? List.of() : this.jarFileUris;
    }
    /**
     * @return The name of the driver main class. The jar file that contains the class must be in the classpath or specified in `jar_file_uris`.
     * 
     */
    public Optional<String> mainClass() {
        return Optional.ofNullable(this.mainClass);
    }
    /**
     * @return The HCFS URI of the jar file that contains the main class.
     * 
     */
    public Optional<String> mainJarFileUri() {
        return Optional.ofNullable(this.mainJarFileUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GdcSparkApplicationSparkApplicationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> archiveUris;
        private @Nullable List<String> args;
        private @Nullable List<String> fileUris;
        private @Nullable List<String> jarFileUris;
        private @Nullable String mainClass;
        private @Nullable String mainJarFileUri;
        public Builder() {}
        public Builder(GdcSparkApplicationSparkApplicationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveUris = defaults.archiveUris;
    	      this.args = defaults.args;
    	      this.fileUris = defaults.fileUris;
    	      this.jarFileUris = defaults.jarFileUris;
    	      this.mainClass = defaults.mainClass;
    	      this.mainJarFileUri = defaults.mainJarFileUri;
        }

        @CustomType.Setter
        public Builder archiveUris(@Nullable List<String> archiveUris) {

            this.archiveUris = archiveUris;
            return this;
        }
        public Builder archiveUris(String... archiveUris) {
            return archiveUris(List.of(archiveUris));
        }
        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {

            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder fileUris(@Nullable List<String> fileUris) {

            this.fileUris = fileUris;
            return this;
        }
        public Builder fileUris(String... fileUris) {
            return fileUris(List.of(fileUris));
        }
        @CustomType.Setter
        public Builder jarFileUris(@Nullable List<String> jarFileUris) {

            this.jarFileUris = jarFileUris;
            return this;
        }
        public Builder jarFileUris(String... jarFileUris) {
            return jarFileUris(List.of(jarFileUris));
        }
        @CustomType.Setter
        public Builder mainClass(@Nullable String mainClass) {

            this.mainClass = mainClass;
            return this;
        }
        @CustomType.Setter
        public Builder mainJarFileUri(@Nullable String mainJarFileUri) {

            this.mainJarFileUri = mainJarFileUri;
            return this;
        }
        public GdcSparkApplicationSparkApplicationConfig build() {
            final var _resultValue = new GdcSparkApplicationSparkApplicationConfig();
            _resultValue.archiveUris = archiveUris;
            _resultValue.args = args;
            _resultValue.fileUris = fileUris;
            _resultValue.jarFileUris = jarFileUris;
            _resultValue.mainClass = mainClass;
            _resultValue.mainJarFileUri = mainJarFileUri;
            return _resultValue;
        }
    }
}
