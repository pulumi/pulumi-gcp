// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apihub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class PluginConfigTemplateAuthConfigTemplateServiceAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluginConfigTemplateAuthConfigTemplateServiceAccountArgs Empty = new PluginConfigTemplateAuthConfigTemplateServiceAccountArgs();

    /**
     * The service account to be used for authenticating request.
     * The `iam.serviceAccounts.getAccessToken` permission should be granted on
     * this service account to the impersonator service account.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private Output<String> serviceAccount;

    /**
     * @return The service account to be used for authenticating request.
     * The `iam.serviceAccounts.getAccessToken` permission should be granted on
     * this service account to the impersonator service account.
     * 
     */
    public Output<String> serviceAccount() {
        return this.serviceAccount;
    }

    private PluginConfigTemplateAuthConfigTemplateServiceAccountArgs() {}

    private PluginConfigTemplateAuthConfigTemplateServiceAccountArgs(PluginConfigTemplateAuthConfigTemplateServiceAccountArgs $) {
        this.serviceAccount = $.serviceAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginConfigTemplateAuthConfigTemplateServiceAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginConfigTemplateAuthConfigTemplateServiceAccountArgs $;

        public Builder() {
            $ = new PluginConfigTemplateAuthConfigTemplateServiceAccountArgs();
        }

        public Builder(PluginConfigTemplateAuthConfigTemplateServiceAccountArgs defaults) {
            $ = new PluginConfigTemplateAuthConfigTemplateServiceAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param serviceAccount The service account to be used for authenticating request.
         * The `iam.serviceAccounts.getAccessToken` permission should be granted on
         * this service account to the impersonator service account.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount The service account to be used for authenticating request.
         * The `iam.serviceAccounts.getAccessToken` permission should be granted on
         * this service account to the impersonator service account.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public PluginConfigTemplateAuthConfigTemplateServiceAccountArgs build() {
            if ($.serviceAccount == null) {
                throw new MissingRequiredPropertyException("PluginConfigTemplateAuthConfigTemplateServiceAccountArgs", "serviceAccount");
            }
            return $;
        }
    }

}
