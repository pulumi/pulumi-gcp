// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securitycenter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventThreatDetectionCustomModuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventThreatDetectionCustomModuleArgs Empty = new EventThreatDetectionCustomModuleArgs();

    /**
     * Config for the module. For the resident module, its config value is defined at this level.
     * For the inherited module, its config value is inherited from the ancestor module.
     * 
     */
    @Import(name="config", required=true)
    private Output<String> config;

    /**
     * @return Config for the module. For the resident module, its config value is defined at this level.
     * For the inherited module, its config value is inherited from the ancestor module.
     * 
     */
    public Output<String> config() {
        return this.config;
    }

    /**
     * The human readable name to be displayed for the module.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The human readable name to be displayed for the module.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The state of enablement for the module at the given level of the hierarchy.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    @Import(name="enablementState", required=true)
    private Output<String> enablementState;

    /**
     * @return The state of enablement for the module at the given level of the hierarchy.
     * Possible values are: `ENABLED`, `DISABLED`.
     * 
     */
    public Output<String> enablementState() {
        return this.enablementState;
    }

    /**
     * Numerical ID of the parent organization.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Numerical ID of the parent organization.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private EventThreatDetectionCustomModuleArgs() {}

    private EventThreatDetectionCustomModuleArgs(EventThreatDetectionCustomModuleArgs $) {
        this.config = $.config;
        this.displayName = $.displayName;
        this.enablementState = $.enablementState;
        this.organization = $.organization;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventThreatDetectionCustomModuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventThreatDetectionCustomModuleArgs $;

        public Builder() {
            $ = new EventThreatDetectionCustomModuleArgs();
        }

        public Builder(EventThreatDetectionCustomModuleArgs defaults) {
            $ = new EventThreatDetectionCustomModuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config Config for the module. For the resident module, its config value is defined at this level.
         * For the inherited module, its config value is inherited from the ancestor module.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<String> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Config for the module. For the resident module, its config value is defined at this level.
         * For the inherited module, its config value is inherited from the ancestor module.
         * 
         * @return builder
         * 
         */
        public Builder config(String config) {
            return config(Output.of(config));
        }

        /**
         * @param displayName The human readable name to be displayed for the module.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human readable name to be displayed for the module.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enablementState The state of enablement for the module at the given level of the hierarchy.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder enablementState(Output<String> enablementState) {
            $.enablementState = enablementState;
            return this;
        }

        /**
         * @param enablementState The state of enablement for the module at the given level of the hierarchy.
         * Possible values are: `ENABLED`, `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder enablementState(String enablementState) {
            return enablementState(Output.of(enablementState));
        }

        /**
         * @param organization Numerical ID of the parent organization.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Numerical ID of the parent organization.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param type Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public EventThreatDetectionCustomModuleArgs build() {
            if ($.config == null) {
                throw new MissingRequiredPropertyException("EventThreatDetectionCustomModuleArgs", "config");
            }
            if ($.enablementState == null) {
                throw new MissingRequiredPropertyException("EventThreatDetectionCustomModuleArgs", "enablementState");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("EventThreatDetectionCustomModuleArgs", "organization");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("EventThreatDetectionCustomModuleArgs", "type");
            }
            return $;
        }
    }

}
