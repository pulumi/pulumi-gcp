// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAddonNodeArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAntiAffinityGroupsArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAuthorizationArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAutoRepairConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterControlPlaneNodeArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPlatformConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterVcenterArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmwareAdminClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmwareAdminClusterArgs Empty = new VmwareAdminClusterArgs();

    /**
     * The VMware admin cluster addon node configuration.
     * 
     */
    @Import(name="addonNode")
    private @Nullable Output<VmwareAdminClusterAddonNodeArgs> addonNode;

    /**
     * @return The VMware admin cluster addon node configuration.
     * 
     */
    public Optional<Output<VmwareAdminClusterAddonNodeArgs>> addonNode() {
        return Optional.ofNullable(this.addonNode);
    }

    /**
     * Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * &#39;effective_annotations&#39; for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * &#39;effective_annotations&#39; for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
     * 
     */
    @Import(name="antiAffinityGroups")
    private @Nullable Output<VmwareAdminClusterAntiAffinityGroupsArgs> antiAffinityGroups;

    /**
     * @return AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
     * 
     */
    public Optional<Output<VmwareAdminClusterAntiAffinityGroupsArgs>> antiAffinityGroups() {
        return Optional.ofNullable(this.antiAffinityGroups);
    }

    /**
     * The VMware admin cluster authorization configuration.
     * 
     */
    @Import(name="authorization")
    private @Nullable Output<VmwareAdminClusterAuthorizationArgs> authorization;

    /**
     * @return The VMware admin cluster authorization configuration.
     * 
     */
    public Optional<Output<VmwareAdminClusterAuthorizationArgs>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Configuration for auto repairing.
     * 
     */
    @Import(name="autoRepairConfig")
    private @Nullable Output<VmwareAdminClusterAutoRepairConfigArgs> autoRepairConfig;

    /**
     * @return Configuration for auto repairing.
     * 
     */
    public Optional<Output<VmwareAdminClusterAutoRepairConfigArgs>> autoRepairConfig() {
        return Optional.ofNullable(this.autoRepairConfig);
    }

    /**
     * The bootstrap cluster this VMware admin cluster belongs to.
     * 
     */
    @Import(name="bootstrapClusterMembership")
    private @Nullable Output<String> bootstrapClusterMembership;

    /**
     * @return The bootstrap cluster this VMware admin cluster belongs to.
     * 
     */
    public Optional<Output<String>> bootstrapClusterMembership() {
        return Optional.ofNullable(this.bootstrapClusterMembership);
    }

    /**
     * The VMware admin cluster control plane node configuration.
     * 
     */
    @Import(name="controlPlaneNode")
    private @Nullable Output<VmwareAdminClusterControlPlaneNodeArgs> controlPlaneNode;

    /**
     * @return The VMware admin cluster control plane node configuration.
     * 
     */
    public Optional<Output<VmwareAdminClusterControlPlaneNodeArgs>> controlPlaneNode() {
        return Optional.ofNullable(this.controlPlaneNode);
    }

    /**
     * A human readable description of this VMware admin cluster.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human readable description of this VMware admin cluster.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The OS image type for the VMware admin cluster.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The OS image type for the VMware admin cluster.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Specifies the load balancer configuration for VMware admin cluster.
     * 
     */
    @Import(name="loadBalancer")
    private @Nullable Output<VmwareAdminClusterLoadBalancerArgs> loadBalancer;

    /**
     * @return Specifies the load balancer configuration for VMware admin cluster.
     * 
     */
    public Optional<Output<VmwareAdminClusterLoadBalancerArgs>> loadBalancer() {
        return Optional.ofNullable(this.loadBalancer);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The VMware admin cluster resource name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The VMware admin cluster resource name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The VMware admin cluster network configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="networkConfig", required=true)
    private Output<VmwareAdminClusterNetworkConfigArgs> networkConfig;

    /**
     * @return The VMware admin cluster network configuration.
     * Structure is documented below.
     * 
     */
    public Output<VmwareAdminClusterNetworkConfigArgs> networkConfig() {
        return this.networkConfig;
    }

    /**
     * The Anthos clusters on the VMware version for the admin cluster.
     * 
     */
    @Import(name="onPremVersion")
    private @Nullable Output<String> onPremVersion;

    /**
     * @return The Anthos clusters on the VMware version for the admin cluster.
     * 
     */
    public Optional<Output<String>> onPremVersion() {
        return Optional.ofNullable(this.onPremVersion);
    }

    /**
     * The VMware platform configuration.
     * 
     */
    @Import(name="platformConfig")
    private @Nullable Output<VmwareAdminClusterPlatformConfigArgs> platformConfig;

    /**
     * @return The VMware platform configuration.
     * 
     */
    public Optional<Output<VmwareAdminClusterPlatformConfigArgs>> platformConfig() {
        return Optional.ofNullable(this.platformConfig);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Specifies vCenter config for the admin cluster.
     * 
     */
    @Import(name="vcenter")
    private @Nullable Output<VmwareAdminClusterVcenterArgs> vcenter;

    /**
     * @return Specifies vCenter config for the admin cluster.
     * 
     */
    public Optional<Output<VmwareAdminClusterVcenterArgs>> vcenter() {
        return Optional.ofNullable(this.vcenter);
    }

    private VmwareAdminClusterArgs() {}

    private VmwareAdminClusterArgs(VmwareAdminClusterArgs $) {
        this.addonNode = $.addonNode;
        this.annotations = $.annotations;
        this.antiAffinityGroups = $.antiAffinityGroups;
        this.authorization = $.authorization;
        this.autoRepairConfig = $.autoRepairConfig;
        this.bootstrapClusterMembership = $.bootstrapClusterMembership;
        this.controlPlaneNode = $.controlPlaneNode;
        this.description = $.description;
        this.imageType = $.imageType;
        this.loadBalancer = $.loadBalancer;
        this.location = $.location;
        this.name = $.name;
        this.networkConfig = $.networkConfig;
        this.onPremVersion = $.onPremVersion;
        this.platformConfig = $.platformConfig;
        this.project = $.project;
        this.vcenter = $.vcenter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareAdminClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareAdminClusterArgs $;

        public Builder() {
            $ = new VmwareAdminClusterArgs();
        }

        public Builder(VmwareAdminClusterArgs defaults) {
            $ = new VmwareAdminClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonNode The VMware admin cluster addon node configuration.
         * 
         * @return builder
         * 
         */
        public Builder addonNode(@Nullable Output<VmwareAdminClusterAddonNodeArgs> addonNode) {
            $.addonNode = addonNode;
            return this;
        }

        /**
         * @param addonNode The VMware admin cluster addon node configuration.
         * 
         * @return builder
         * 
         */
        public Builder addonNode(VmwareAdminClusterAddonNodeArgs addonNode) {
            return addonNode(Output.of(addonNode));
        }

        /**
         * @param annotations Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
         * of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
         * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
         * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
         * &#39;effective_annotations&#39; for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations on the VMware Admin Cluster. This field has the same restrictions as Kubernetes annotations. The total size
         * of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
         * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
         * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
         * &#39;effective_annotations&#39; for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param antiAffinityGroups AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroups(@Nullable Output<VmwareAdminClusterAntiAffinityGroupsArgs> antiAffinityGroups) {
            $.antiAffinityGroups = antiAffinityGroups;
            return this;
        }

        /**
         * @param antiAffinityGroups AAGConfig specifies whether to spread VMware Admin Cluster nodes across at least three physical hosts in the datacenter.
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityGroups(VmwareAdminClusterAntiAffinityGroupsArgs antiAffinityGroups) {
            return antiAffinityGroups(Output.of(antiAffinityGroups));
        }

        /**
         * @param authorization The VMware admin cluster authorization configuration.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable Output<VmwareAdminClusterAuthorizationArgs> authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param authorization The VMware admin cluster authorization configuration.
         * 
         * @return builder
         * 
         */
        public Builder authorization(VmwareAdminClusterAuthorizationArgs authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param autoRepairConfig Configuration for auto repairing.
         * 
         * @return builder
         * 
         */
        public Builder autoRepairConfig(@Nullable Output<VmwareAdminClusterAutoRepairConfigArgs> autoRepairConfig) {
            $.autoRepairConfig = autoRepairConfig;
            return this;
        }

        /**
         * @param autoRepairConfig Configuration for auto repairing.
         * 
         * @return builder
         * 
         */
        public Builder autoRepairConfig(VmwareAdminClusterAutoRepairConfigArgs autoRepairConfig) {
            return autoRepairConfig(Output.of(autoRepairConfig));
        }

        /**
         * @param bootstrapClusterMembership The bootstrap cluster this VMware admin cluster belongs to.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapClusterMembership(@Nullable Output<String> bootstrapClusterMembership) {
            $.bootstrapClusterMembership = bootstrapClusterMembership;
            return this;
        }

        /**
         * @param bootstrapClusterMembership The bootstrap cluster this VMware admin cluster belongs to.
         * 
         * @return builder
         * 
         */
        public Builder bootstrapClusterMembership(String bootstrapClusterMembership) {
            return bootstrapClusterMembership(Output.of(bootstrapClusterMembership));
        }

        /**
         * @param controlPlaneNode The VMware admin cluster control plane node configuration.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNode(@Nullable Output<VmwareAdminClusterControlPlaneNodeArgs> controlPlaneNode) {
            $.controlPlaneNode = controlPlaneNode;
            return this;
        }

        /**
         * @param controlPlaneNode The VMware admin cluster control plane node configuration.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneNode(VmwareAdminClusterControlPlaneNodeArgs controlPlaneNode) {
            return controlPlaneNode(Output.of(controlPlaneNode));
        }

        /**
         * @param description A human readable description of this VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human readable description of this VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param imageType The OS image type for the VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The OS image type for the VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param loadBalancer Specifies the load balancer configuration for VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(@Nullable Output<VmwareAdminClusterLoadBalancerArgs> loadBalancer) {
            $.loadBalancer = loadBalancer;
            return this;
        }

        /**
         * @param loadBalancer Specifies the load balancer configuration for VMware admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancer(VmwareAdminClusterLoadBalancerArgs loadBalancer) {
            return loadBalancer(Output.of(loadBalancer));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The VMware admin cluster resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The VMware admin cluster resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConfig The VMware admin cluster network configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(Output<VmwareAdminClusterNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig The VMware admin cluster network configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(VmwareAdminClusterNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param onPremVersion The Anthos clusters on the VMware version for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder onPremVersion(@Nullable Output<String> onPremVersion) {
            $.onPremVersion = onPremVersion;
            return this;
        }

        /**
         * @param onPremVersion The Anthos clusters on the VMware version for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder onPremVersion(String onPremVersion) {
            return onPremVersion(Output.of(onPremVersion));
        }

        /**
         * @param platformConfig The VMware platform configuration.
         * 
         * @return builder
         * 
         */
        public Builder platformConfig(@Nullable Output<VmwareAdminClusterPlatformConfigArgs> platformConfig) {
            $.platformConfig = platformConfig;
            return this;
        }

        /**
         * @param platformConfig The VMware platform configuration.
         * 
         * @return builder
         * 
         */
        public Builder platformConfig(VmwareAdminClusterPlatformConfigArgs platformConfig) {
            return platformConfig(Output.of(platformConfig));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param vcenter Specifies vCenter config for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder vcenter(@Nullable Output<VmwareAdminClusterVcenterArgs> vcenter) {
            $.vcenter = vcenter;
            return this;
        }

        /**
         * @param vcenter Specifies vCenter config for the admin cluster.
         * 
         * @return builder
         * 
         */
        public Builder vcenter(VmwareAdminClusterVcenterArgs vcenter) {
            return vcenter(Output.of(vcenter));
        }

        public VmwareAdminClusterArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("VmwareAdminClusterArgs", "location");
            }
            if ($.networkConfig == null) {
                throw new MissingRequiredPropertyException("VmwareAdminClusterArgs", "networkConfig");
            }
            return $;
        }
    }

}
