// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigtable.inputs.SchemaBundleProtoSchemaArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaBundleState extends com.pulumi.resources.ResourceArgs {

    public static final SchemaBundleState Empty = new SchemaBundleState();

    /**
     * If true, allow backwards incompatible changes.
     * 
     */
    @Import(name="ignoreWarnings")
    private @Nullable Output<Boolean> ignoreWarnings;

    /**
     * @return If true, allow backwards incompatible changes.
     * 
     */
    public Optional<Output<Boolean>> ignoreWarnings() {
        return Optional.ofNullable(this.ignoreWarnings);
    }

    /**
     * The name of the instance to create the schema bundle within.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    /**
     * @return The name of the instance to create the schema bundle within.
     * 
     */
    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The unique name of the requested schema bundle. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;/schemaBundles/&lt;schemaBundleId&gt;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the requested schema bundle. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;/schemaBundles/&lt;schemaBundleId&gt;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * File descriptor set, generated by protoc.
     * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
     * $ protoc --include_imports --include_source_info test.proto -o out.pb
     * Structure is documented below.
     * 
     */
    @Import(name="protoSchema")
    private @Nullable Output<SchemaBundleProtoSchemaArgs> protoSchema;

    /**
     * @return File descriptor set, generated by protoc.
     * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
     * $ protoc --include_imports --include_source_info test.proto -o out.pb
     * Structure is documented below.
     * 
     */
    public Optional<Output<SchemaBundleProtoSchemaArgs>> protoSchema() {
        return Optional.ofNullable(this.protoSchema);
    }

    /**
     * The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     */
    @Import(name="schemaBundleId")
    private @Nullable Output<String> schemaBundleId;

    /**
     * @return The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     */
    public Optional<Output<String>> schemaBundleId() {
        return Optional.ofNullable(this.schemaBundleId);
    }

    /**
     * The name of the table to create the schema bundle within.
     * 
     */
    @Import(name="table")
    private @Nullable Output<String> table;

    /**
     * @return The name of the table to create the schema bundle within.
     * 
     */
    public Optional<Output<String>> table() {
        return Optional.ofNullable(this.table);
    }

    private SchemaBundleState() {}

    private SchemaBundleState(SchemaBundleState $) {
        this.ignoreWarnings = $.ignoreWarnings;
        this.instance = $.instance;
        this.name = $.name;
        this.project = $.project;
        this.protoSchema = $.protoSchema;
        this.schemaBundleId = $.schemaBundleId;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaBundleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaBundleState $;

        public Builder() {
            $ = new SchemaBundleState();
        }

        public Builder(SchemaBundleState defaults) {
            $ = new SchemaBundleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param ignoreWarnings If true, allow backwards incompatible changes.
         * 
         * @return builder
         * 
         */
        public Builder ignoreWarnings(@Nullable Output<Boolean> ignoreWarnings) {
            $.ignoreWarnings = ignoreWarnings;
            return this;
        }

        /**
         * @param ignoreWarnings If true, allow backwards incompatible changes.
         * 
         * @return builder
         * 
         */
        public Builder ignoreWarnings(Boolean ignoreWarnings) {
            return ignoreWarnings(Output.of(ignoreWarnings));
        }

        /**
         * @param instance The name of the instance to create the schema bundle within.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The name of the instance to create the schema bundle within.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param name The unique name of the requested schema bundle. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;/schemaBundles/&lt;schemaBundleId&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the requested schema bundle. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;/schemaBundles/&lt;schemaBundleId&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protoSchema File descriptor set, generated by protoc.
         * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
         * $ protoc --include_imports --include_source_info test.proto -o out.pb
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder protoSchema(@Nullable Output<SchemaBundleProtoSchemaArgs> protoSchema) {
            $.protoSchema = protoSchema;
            return this;
        }

        /**
         * @param protoSchema File descriptor set, generated by protoc.
         * To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
         * $ protoc --include_imports --include_source_info test.proto -o out.pb
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder protoSchema(SchemaBundleProtoSchemaArgs protoSchema) {
            return protoSchema(Output.of(protoSchema));
        }

        /**
         * @param schemaBundleId The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
         * 
         * @return builder
         * 
         */
        public Builder schemaBundleId(@Nullable Output<String> schemaBundleId) {
            $.schemaBundleId = schemaBundleId;
            return this;
        }

        /**
         * @param schemaBundleId The unique name of the schema bundle in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
         * 
         * @return builder
         * 
         */
        public Builder schemaBundleId(String schemaBundleId) {
            return schemaBundleId(Output.of(schemaBundleId));
        }

        /**
         * @param table The name of the table to create the schema bundle within.
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table The name of the table to create the schema bundle within.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        public SchemaBundleState build() {
            return $;
        }
    }

}
