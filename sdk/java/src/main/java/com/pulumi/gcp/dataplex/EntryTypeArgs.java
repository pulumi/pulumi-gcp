// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.EntryTypeRequiredAspectArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntryTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntryTypeArgs Empty = new EntryTypeArgs();

    /**
     * Description of the EntryType.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the EntryType.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User friendly display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User friendly display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The entry type id of the entry type.
     * 
     */
    @Import(name="entryTypeId")
    private @Nullable Output<String> entryTypeId;

    /**
     * @return The entry type id of the entry type.
     * 
     */
    public Optional<Output<String>> entryTypeId() {
        return Optional.ofNullable(this.entryTypeId);
    }

    /**
     * User-defined labels for the EntryType.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels for the EntryType.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location where entry type will be created in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where entry type will be created in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The platform that Entries of this type belongs to.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return The platform that Entries of this type belongs to.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * AspectInfo for the entry type.
     * Structure is documented below.
     * 
     */
    @Import(name="requiredAspects")
    private @Nullable Output<List<EntryTypeRequiredAspectArgs>> requiredAspects;

    /**
     * @return AspectInfo for the entry type.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<EntryTypeRequiredAspectArgs>>> requiredAspects() {
        return Optional.ofNullable(this.requiredAspects);
    }

    /**
     * The system that Entries of this type belongs to.
     * 
     */
    @Import(name="system")
    private @Nullable Output<String> system;

    /**
     * @return The system that Entries of this type belongs to.
     * 
     */
    public Optional<Output<String>> system() {
        return Optional.ofNullable(this.system);
    }

    /**
     * Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
     * 
     */
    @Import(name="typeAliases")
    private @Nullable Output<List<String>> typeAliases;

    /**
     * @return Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
     * 
     */
    public Optional<Output<List<String>>> typeAliases() {
        return Optional.ofNullable(this.typeAliases);
    }

    private EntryTypeArgs() {}

    private EntryTypeArgs(EntryTypeArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.entryTypeId = $.entryTypeId;
        this.labels = $.labels;
        this.location = $.location;
        this.platform = $.platform;
        this.project = $.project;
        this.requiredAspects = $.requiredAspects;
        this.system = $.system;
        this.typeAliases = $.typeAliases;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntryTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntryTypeArgs $;

        public Builder() {
            $ = new EntryTypeArgs();
        }

        public Builder(EntryTypeArgs defaults) {
            $ = new EntryTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the EntryType.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the EntryType.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param entryTypeId The entry type id of the entry type.
         * 
         * @return builder
         * 
         */
        public Builder entryTypeId(@Nullable Output<String> entryTypeId) {
            $.entryTypeId = entryTypeId;
            return this;
        }

        /**
         * @param entryTypeId The entry type id of the entry type.
         * 
         * @return builder
         * 
         */
        public Builder entryTypeId(String entryTypeId) {
            return entryTypeId(Output.of(entryTypeId));
        }

        /**
         * @param labels User-defined labels for the EntryType.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels for the EntryType.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location where entry type will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where entry type will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param platform The platform that Entries of this type belongs to.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The platform that Entries of this type belongs to.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param requiredAspects AspectInfo for the entry type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requiredAspects(@Nullable Output<List<EntryTypeRequiredAspectArgs>> requiredAspects) {
            $.requiredAspects = requiredAspects;
            return this;
        }

        /**
         * @param requiredAspects AspectInfo for the entry type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requiredAspects(List<EntryTypeRequiredAspectArgs> requiredAspects) {
            return requiredAspects(Output.of(requiredAspects));
        }

        /**
         * @param requiredAspects AspectInfo for the entry type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requiredAspects(EntryTypeRequiredAspectArgs... requiredAspects) {
            return requiredAspects(List.of(requiredAspects));
        }

        /**
         * @param system The system that Entries of this type belongs to.
         * 
         * @return builder
         * 
         */
        public Builder system(@Nullable Output<String> system) {
            $.system = system;
            return this;
        }

        /**
         * @param system The system that Entries of this type belongs to.
         * 
         * @return builder
         * 
         */
        public Builder system(String system) {
            return system(Output.of(system));
        }

        /**
         * @param typeAliases Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
         * 
         * @return builder
         * 
         */
        public Builder typeAliases(@Nullable Output<List<String>> typeAliases) {
            $.typeAliases = typeAliases;
            return this;
        }

        /**
         * @param typeAliases Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
         * 
         * @return builder
         * 
         */
        public Builder typeAliases(List<String> typeAliases) {
            return typeAliases(Output.of(typeAliases));
        }

        /**
         * @param typeAliases Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
         * 
         * @return builder
         * 
         */
        public Builder typeAliases(String... typeAliases) {
            return typeAliases(List.of(typeAliases));
        }

        public EntryTypeArgs build() {
            return $;
        }
    }

}
