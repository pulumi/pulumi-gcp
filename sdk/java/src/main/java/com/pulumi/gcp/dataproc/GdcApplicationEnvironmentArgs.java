// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataproc.inputs.GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GdcApplicationEnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GdcApplicationEnvironmentArgs Empty = new GdcApplicationEnvironmentArgs();

    /**
     * The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The id of the application environment
     * 
     */
    @Import(name="applicationEnvironmentId")
    private @Nullable Output<String> applicationEnvironmentId;

    /**
     * @return The id of the application environment
     * 
     */
    public Optional<Output<String>> applicationEnvironmentId() {
        return Optional.ofNullable(this.applicationEnvironmentId);
    }

    /**
     * User-provided human-readable name to be used in user interfaces.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-provided human-readable name to be used in user interfaces.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the application environment
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the application environment
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The id of the service instance to which this application environment belongs.
     * 
     */
    @Import(name="serviceinstance", required=true)
    private Output<String> serviceinstance;

    /**
     * @return The id of the service instance to which this application environment belongs.
     * 
     */
    public Output<String> serviceinstance() {
        return this.serviceinstance;
    }

    /**
     * Represents the SparkApplicationEnvironmentConfig.
     * Structure is documented below.
     * 
     */
    @Import(name="sparkApplicationEnvironmentConfig")
    private @Nullable Output<GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs> sparkApplicationEnvironmentConfig;

    /**
     * @return Represents the SparkApplicationEnvironmentConfig.
     * Structure is documented below.
     * 
     */
    public Optional<Output<GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs>> sparkApplicationEnvironmentConfig() {
        return Optional.ofNullable(this.sparkApplicationEnvironmentConfig);
    }

    private GdcApplicationEnvironmentArgs() {}

    private GdcApplicationEnvironmentArgs(GdcApplicationEnvironmentArgs $) {
        this.annotations = $.annotations;
        this.applicationEnvironmentId = $.applicationEnvironmentId;
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.namespace = $.namespace;
        this.project = $.project;
        this.serviceinstance = $.serviceinstance;
        this.sparkApplicationEnvironmentConfig = $.sparkApplicationEnvironmentConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GdcApplicationEnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GdcApplicationEnvironmentArgs $;

        public Builder() {
            $ = new GdcApplicationEnvironmentArgs();
        }

        public Builder(GdcApplicationEnvironmentArgs defaults) {
            $ = new GdcApplicationEnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations The annotations to associate with this application environment. Annotations may be used to store client information, but are not used by the server.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param applicationEnvironmentId The id of the application environment
         * 
         * @return builder
         * 
         */
        public Builder applicationEnvironmentId(@Nullable Output<String> applicationEnvironmentId) {
            $.applicationEnvironmentId = applicationEnvironmentId;
            return this;
        }

        /**
         * @param applicationEnvironmentId The id of the application environment
         * 
         * @return builder
         * 
         */
        public Builder applicationEnvironmentId(String applicationEnvironmentId) {
            return applicationEnvironmentId(Output.of(applicationEnvironmentId));
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-provided human-readable name to be used in user interfaces.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels to associate with this application environment. Labels may be used for filtering and billing tracking.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the application environment
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the application environment
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param namespace The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The name of the namespace in which to create this ApplicationEnvironment. This namespace must already exist in the cluster
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceinstance The id of the service instance to which this application environment belongs.
         * 
         * @return builder
         * 
         */
        public Builder serviceinstance(Output<String> serviceinstance) {
            $.serviceinstance = serviceinstance;
            return this;
        }

        /**
         * @param serviceinstance The id of the service instance to which this application environment belongs.
         * 
         * @return builder
         * 
         */
        public Builder serviceinstance(String serviceinstance) {
            return serviceinstance(Output.of(serviceinstance));
        }

        /**
         * @param sparkApplicationEnvironmentConfig Represents the SparkApplicationEnvironmentConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkApplicationEnvironmentConfig(@Nullable Output<GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs> sparkApplicationEnvironmentConfig) {
            $.sparkApplicationEnvironmentConfig = sparkApplicationEnvironmentConfig;
            return this;
        }

        /**
         * @param sparkApplicationEnvironmentConfig Represents the SparkApplicationEnvironmentConfig.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sparkApplicationEnvironmentConfig(GdcApplicationEnvironmentSparkApplicationEnvironmentConfigArgs sparkApplicationEnvironmentConfig) {
            return sparkApplicationEnvironmentConfig(Output.of(sparkApplicationEnvironmentConfig));
        }

        public GdcApplicationEnvironmentArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GdcApplicationEnvironmentArgs", "location");
            }
            if ($.serviceinstance == null) {
                throw new MissingRequiredPropertyException("GdcApplicationEnvironmentArgs", "serviceinstance");
            }
            return $;
        }
    }

}
