// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterconnectMacsecPreSharedKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final InterconnectMacsecPreSharedKeyArgs Empty = new InterconnectMacsecPreSharedKeyArgs();

    /**
     * (Optional, Deprecated)
     * If set to true, the Interconnect connection is configured with a should-secure
     * MACsec security policy, that allows the Google router to fallback to cleartext
     * traffic if the MKA session cannot be established. By default, the Interconnect
     * connection is configured with a must-secure security policy that drops all traffic
     * if the MKA session cannot be established with your router.
     * 
     * &gt; **Warning:** `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
     * 
     * @deprecated
     * `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
     * 
     */
    @Deprecated /* `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead. */
    @Import(name="failOpen")
    private @Nullable Output<Boolean> failOpen;

    /**
     * @return (Optional, Deprecated)
     * If set to true, the Interconnect connection is configured with a should-secure
     * MACsec security policy, that allows the Google router to fallback to cleartext
     * traffic if the MKA session cannot be established. By default, the Interconnect
     * connection is configured with a must-secure security policy that drops all traffic
     * if the MKA session cannot be established with your router.
     * 
     * &gt; **Warning:** `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
     * 
     * @deprecated
     * `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
     * 
     */
    @Deprecated /* `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead. */
    public Optional<Output<Boolean>> failOpen() {
        return Optional.ofNullable(this.failOpen);
    }

    /**
     * A name for this pre-shared key. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the first character
     * must be a lowercase letter, and all following characters must be a dash, lowercase
     * letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A name for this pre-shared key. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the first character
     * must be a lowercase letter, and all following characters must be a dash, lowercase
     * letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A RFC3339 timestamp on or after which the key is valid. startTime can be in the
     * future. If the keychain has a single key, startTime can be omitted. If the keychain
     * has multiple keys, startTime is mandatory for each key. The start times of keys must
     * be in increasing order. The start times of two consecutive keys must be at least 6
     * hours apart.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return A RFC3339 timestamp on or after which the key is valid. startTime can be in the
     * future. If the keychain has a single key, startTime can be omitted. If the keychain
     * has multiple keys, startTime is mandatory for each key. The start times of keys must
     * be in increasing order. The start times of two consecutive keys must be at least 6
     * hours apart.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private InterconnectMacsecPreSharedKeyArgs() {}

    private InterconnectMacsecPreSharedKeyArgs(InterconnectMacsecPreSharedKeyArgs $) {
        this.failOpen = $.failOpen;
        this.name = $.name;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterconnectMacsecPreSharedKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterconnectMacsecPreSharedKeyArgs $;

        public Builder() {
            $ = new InterconnectMacsecPreSharedKeyArgs();
        }

        public Builder(InterconnectMacsecPreSharedKeyArgs defaults) {
            $ = new InterconnectMacsecPreSharedKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failOpen (Optional, Deprecated)
         * If set to true, the Interconnect connection is configured with a should-secure
         * MACsec security policy, that allows the Google router to fallback to cleartext
         * traffic if the MKA session cannot be established. By default, the Interconnect
         * connection is configured with a must-secure security policy that drops all traffic
         * if the MKA session cannot be established with your router.
         * 
         * &gt; **Warning:** `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
         * 
         */
        @Deprecated /* `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead. */
        public Builder failOpen(@Nullable Output<Boolean> failOpen) {
            $.failOpen = failOpen;
            return this;
        }

        /**
         * @param failOpen (Optional, Deprecated)
         * If set to true, the Interconnect connection is configured with a should-secure
         * MACsec security policy, that allows the Google router to fallback to cleartext
         * traffic if the MKA session cannot be established. By default, the Interconnect
         * connection is configured with a must-secure security policy that drops all traffic
         * if the MKA session cannot be established with your router.
         * 
         * &gt; **Warning:** `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead.
         * 
         */
        @Deprecated /* `failOpen` is deprecated and will be removed in a future major release. Use other `failOpen` instead. */
        public Builder failOpen(Boolean failOpen) {
            return failOpen(Output.of(failOpen));
        }

        /**
         * @param name A name for this pre-shared key. The name must be 1-63 characters long, and
         * comply with RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the first character
         * must be a lowercase letter, and all following characters must be a dash, lowercase
         * letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for this pre-shared key. The name must be 1-63 characters long, and
         * comply with RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the first character
         * must be a lowercase letter, and all following characters must be a dash, lowercase
         * letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startTime A RFC3339 timestamp on or after which the key is valid. startTime can be in the
         * future. If the keychain has a single key, startTime can be omitted. If the keychain
         * has multiple keys, startTime is mandatory for each key. The start times of keys must
         * be in increasing order. The start times of two consecutive keys must be at least 6
         * hours apart.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime A RFC3339 timestamp on or after which the key is valid. startTime can be in the
         * future. If the keychain has a single key, startTime can be omitted. If the keychain
         * has multiple keys, startTime is mandatory for each key. The start times of keys must
         * be in increasing order. The start times of two consecutive keys must be at least 6
         * hours apart.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public InterconnectMacsecPreSharedKeyArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("InterconnectMacsecPreSharedKeyArgs", "name");
            }
            return $;
        }
    }

}
