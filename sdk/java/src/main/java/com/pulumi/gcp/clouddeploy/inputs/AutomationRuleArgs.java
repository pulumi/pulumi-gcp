// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.clouddeploy.inputs.AutomationRuleAdvanceRolloutRuleArgs;
import com.pulumi.gcp.clouddeploy.inputs.AutomationRulePromoteReleaseRuleArgs;
import com.pulumi.gcp.clouddeploy.inputs.AutomationRuleRepairRolloutRuleArgs;
import com.pulumi.gcp.clouddeploy.inputs.AutomationRuleTimedPromoteReleaseRuleArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationRuleArgs Empty = new AutomationRuleArgs();

    /**
     * Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
     * Structure is documented below.
     * 
     */
    @Import(name="advanceRolloutRule")
    private @Nullable Output<AutomationRuleAdvanceRolloutRuleArgs> advanceRolloutRule;

    /**
     * @return Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AutomationRuleAdvanceRolloutRuleArgs>> advanceRolloutRule() {
        return Optional.ofNullable(this.advanceRolloutRule);
    }

    /**
     * Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
     * Structure is documented below.
     * 
     */
    @Import(name="promoteReleaseRule")
    private @Nullable Output<AutomationRulePromoteReleaseRuleArgs> promoteReleaseRule;

    /**
     * @return Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AutomationRulePromoteReleaseRuleArgs>> promoteReleaseRule() {
        return Optional.ofNullable(this.promoteReleaseRule);
    }

    /**
     * Optional. The RepairRolloutRule will automatically repair a failed rollout.
     * Structure is documented below.
     * 
     */
    @Import(name="repairRolloutRule")
    private @Nullable Output<AutomationRuleRepairRolloutRuleArgs> repairRolloutRule;

    /**
     * @return Optional. The RepairRolloutRule will automatically repair a failed rollout.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AutomationRuleRepairRolloutRuleArgs>> repairRolloutRule() {
        return Optional.ofNullable(this.repairRolloutRule);
    }

    /**
     * Optional. The `TimedPromoteReleaseRule` will automatically promote a release from the current target(s) to the specified target(s) on a configured schedule.
     * Structure is documented below.
     * 
     */
    @Import(name="timedPromoteReleaseRule")
    private @Nullable Output<AutomationRuleTimedPromoteReleaseRuleArgs> timedPromoteReleaseRule;

    /**
     * @return Optional. The `TimedPromoteReleaseRule` will automatically promote a release from the current target(s) to the specified target(s) on a configured schedule.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AutomationRuleTimedPromoteReleaseRuleArgs>> timedPromoteReleaseRule() {
        return Optional.ofNullable(this.timedPromoteReleaseRule);
    }

    private AutomationRuleArgs() {}

    private AutomationRuleArgs(AutomationRuleArgs $) {
        this.advanceRolloutRule = $.advanceRolloutRule;
        this.promoteReleaseRule = $.promoteReleaseRule;
        this.repairRolloutRule = $.repairRolloutRule;
        this.timedPromoteReleaseRule = $.timedPromoteReleaseRule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRuleArgs $;

        public Builder() {
            $ = new AutomationRuleArgs();
        }

        public Builder(AutomationRuleArgs defaults) {
            $ = new AutomationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advanceRolloutRule Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder advanceRolloutRule(@Nullable Output<AutomationRuleAdvanceRolloutRuleArgs> advanceRolloutRule) {
            $.advanceRolloutRule = advanceRolloutRule;
            return this;
        }

        /**
         * @param advanceRolloutRule Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder advanceRolloutRule(AutomationRuleAdvanceRolloutRuleArgs advanceRolloutRule) {
            return advanceRolloutRule(Output.of(advanceRolloutRule));
        }

        /**
         * @param promoteReleaseRule Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder promoteReleaseRule(@Nullable Output<AutomationRulePromoteReleaseRuleArgs> promoteReleaseRule) {
            $.promoteReleaseRule = promoteReleaseRule;
            return this;
        }

        /**
         * @param promoteReleaseRule Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder promoteReleaseRule(AutomationRulePromoteReleaseRuleArgs promoteReleaseRule) {
            return promoteReleaseRule(Output.of(promoteReleaseRule));
        }

        /**
         * @param repairRolloutRule Optional. The RepairRolloutRule will automatically repair a failed rollout.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repairRolloutRule(@Nullable Output<AutomationRuleRepairRolloutRuleArgs> repairRolloutRule) {
            $.repairRolloutRule = repairRolloutRule;
            return this;
        }

        /**
         * @param repairRolloutRule Optional. The RepairRolloutRule will automatically repair a failed rollout.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repairRolloutRule(AutomationRuleRepairRolloutRuleArgs repairRolloutRule) {
            return repairRolloutRule(Output.of(repairRolloutRule));
        }

        /**
         * @param timedPromoteReleaseRule Optional. The `TimedPromoteReleaseRule` will automatically promote a release from the current target(s) to the specified target(s) on a configured schedule.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timedPromoteReleaseRule(@Nullable Output<AutomationRuleTimedPromoteReleaseRuleArgs> timedPromoteReleaseRule) {
            $.timedPromoteReleaseRule = timedPromoteReleaseRule;
            return this;
        }

        /**
         * @param timedPromoteReleaseRule Optional. The `TimedPromoteReleaseRule` will automatically promote a release from the current target(s) to the specified target(s) on a configured schedule.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timedPromoteReleaseRule(AutomationRuleTimedPromoteReleaseRuleArgs timedPromoteReleaseRule) {
            return timedPromoteReleaseRule(Output.of(timedPromoteReleaseRule));
        }

        public AutomationRuleArgs build() {
            return $;
        }
    }

}
