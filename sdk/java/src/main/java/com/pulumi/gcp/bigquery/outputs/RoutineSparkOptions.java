// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RoutineSparkOptions {
    /**
     * @return Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    private @Nullable List<String> archiveUris;
    /**
     * @return Fully qualified name of the user-provided Spark connection object.
     * Format: &#34;projects/{projectId}/locations/{locationId}/connections/{connectionId}&#34;
     * 
     */
    private @Nullable String connection;
    /**
     * @return Custom container image for the runtime environment.
     * 
     */
    private @Nullable String containerImage;
    /**
     * @return Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    private @Nullable List<String> fileUris;
    /**
     * @return JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
     * 
     */
    private @Nullable List<String> jarUris;
    /**
     * @return The fully qualified name of a class in jarUris, for example, com.example.wordcount.
     * Exactly one of mainClass and mainJarUri field should be set for Java/Scala language type.
     * 
     */
    private @Nullable String mainClass;
    /**
     * @return The main file/jar URI of the Spark application.
     * Exactly one of the definitionBody field and the mainFileUri field must be set for Python.
     * Exactly one of mainClass and mainFileUri field should be set for Java/Scala language type.
     * 
     */
    private @Nullable String mainFileUri;
    /**
     * @return Configuration properties as a set of key/value pairs, which will be passed on to the Spark application.
     * For more information, see Apache Spark and the procedure option list.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    private @Nullable Map<String,String> properties;
    /**
     * @return Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
     * 
     */
    private @Nullable List<String> pyFileUris;
    /**
     * @return Runtime version. If not specified, the default runtime version is used.
     * 
     */
    private @Nullable String runtimeVersion;

    private RoutineSparkOptions() {}
    /**
     * @return Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public List<String> archiveUris() {
        return this.archiveUris == null ? List.of() : this.archiveUris;
    }
    /**
     * @return Fully qualified name of the user-provided Spark connection object.
     * Format: &#34;projects/{projectId}/locations/{locationId}/connections/{connectionId}&#34;
     * 
     */
    public Optional<String> connection() {
        return Optional.ofNullable(this.connection);
    }
    /**
     * @return Custom container image for the runtime environment.
     * 
     */
    public Optional<String> containerImage() {
        return Optional.ofNullable(this.containerImage);
    }
    /**
     * @return Files to be placed in the working directory of each executor. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public List<String> fileUris() {
        return this.fileUris == null ? List.of() : this.fileUris;
    }
    /**
     * @return JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public List<String> jarUris() {
        return this.jarUris == null ? List.of() : this.jarUris;
    }
    /**
     * @return The fully qualified name of a class in jarUris, for example, com.example.wordcount.
     * Exactly one of mainClass and mainJarUri field should be set for Java/Scala language type.
     * 
     */
    public Optional<String> mainClass() {
        return Optional.ofNullable(this.mainClass);
    }
    /**
     * @return The main file/jar URI of the Spark application.
     * Exactly one of the definitionBody field and the mainFileUri field must be set for Python.
     * Exactly one of mainClass and mainFileUri field should be set for Java/Scala language type.
     * 
     */
    public Optional<String> mainFileUri() {
        return Optional.ofNullable(this.mainFileUri);
    }
    /**
     * @return Configuration properties as a set of key/value pairs, which will be passed on to the Spark application.
     * For more information, see Apache Spark and the procedure option list.
     * An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Map<String,String> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: .py, .egg, and .zip. For more information about Apache Spark, see Apache Spark.
     * 
     */
    public List<String> pyFileUris() {
        return this.pyFileUris == null ? List.of() : this.pyFileUris;
    }
    /**
     * @return Runtime version. If not specified, the default runtime version is used.
     * 
     */
    public Optional<String> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutineSparkOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> archiveUris;
        private @Nullable String connection;
        private @Nullable String containerImage;
        private @Nullable List<String> fileUris;
        private @Nullable List<String> jarUris;
        private @Nullable String mainClass;
        private @Nullable String mainFileUri;
        private @Nullable Map<String,String> properties;
        private @Nullable List<String> pyFileUris;
        private @Nullable String runtimeVersion;
        public Builder() {}
        public Builder(RoutineSparkOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveUris = defaults.archiveUris;
    	      this.connection = defaults.connection;
    	      this.containerImage = defaults.containerImage;
    	      this.fileUris = defaults.fileUris;
    	      this.jarUris = defaults.jarUris;
    	      this.mainClass = defaults.mainClass;
    	      this.mainFileUri = defaults.mainFileUri;
    	      this.properties = defaults.properties;
    	      this.pyFileUris = defaults.pyFileUris;
    	      this.runtimeVersion = defaults.runtimeVersion;
        }

        @CustomType.Setter
        public Builder archiveUris(@Nullable List<String> archiveUris) {

            this.archiveUris = archiveUris;
            return this;
        }
        public Builder archiveUris(String... archiveUris) {
            return archiveUris(List.of(archiveUris));
        }
        @CustomType.Setter
        public Builder connection(@Nullable String connection) {

            this.connection = connection;
            return this;
        }
        @CustomType.Setter
        public Builder containerImage(@Nullable String containerImage) {

            this.containerImage = containerImage;
            return this;
        }
        @CustomType.Setter
        public Builder fileUris(@Nullable List<String> fileUris) {

            this.fileUris = fileUris;
            return this;
        }
        public Builder fileUris(String... fileUris) {
            return fileUris(List.of(fileUris));
        }
        @CustomType.Setter
        public Builder jarUris(@Nullable List<String> jarUris) {

            this.jarUris = jarUris;
            return this;
        }
        public Builder jarUris(String... jarUris) {
            return jarUris(List.of(jarUris));
        }
        @CustomType.Setter
        public Builder mainClass(@Nullable String mainClass) {

            this.mainClass = mainClass;
            return this;
        }
        @CustomType.Setter
        public Builder mainFileUri(@Nullable String mainFileUri) {

            this.mainFileUri = mainFileUri;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,String> properties) {

            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder pyFileUris(@Nullable List<String> pyFileUris) {

            this.pyFileUris = pyFileUris;
            return this;
        }
        public Builder pyFileUris(String... pyFileUris) {
            return pyFileUris(List.of(pyFileUris));
        }
        @CustomType.Setter
        public Builder runtimeVersion(@Nullable String runtimeVersion) {

            this.runtimeVersion = runtimeVersion;
            return this;
        }
        public RoutineSparkOptions build() {
            final var _resultValue = new RoutineSparkOptions();
            _resultValue.archiveUris = archiveUris;
            _resultValue.connection = connection;
            _resultValue.containerImage = containerImage;
            _resultValue.fileUris = fileUris;
            _resultValue.jarUris = jarUris;
            _resultValue.mainClass = mainClass;
            _resultValue.mainFileUri = mainFileUri;
            _resultValue.properties = properties;
            _resultValue.pyFileUris = pyFileUris;
            _resultValue.runtimeVersion = runtimeVersion;
            return _resultValue;
        }
    }
}
