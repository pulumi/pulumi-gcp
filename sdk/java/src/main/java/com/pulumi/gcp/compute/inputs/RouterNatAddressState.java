// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterNatAddressState extends com.pulumi.resources.ResourceArgs {

    public static final RouterNatAddressState Empty = new RouterNatAddressState();

    /**
     * A list of URLs of the IP resources to be drained. These IPs must be
     * valid static external IPs that have been assigned to the NAT.
     * 
     */
    @Import(name="drainNatIps")
    private @Nullable Output<List<String>> drainNatIps;

    /**
     * @return A list of URLs of the IP resources to be drained. These IPs must be
     * valid static external IPs that have been assigned to the NAT.
     * 
     */
    public Optional<Output<List<String>>> drainNatIps() {
        return Optional.ofNullable(this.drainNatIps);
    }

    /**
     * Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
     * natIpAllocateOption is set to MANUAL_ONLY.
     * 
     */
    @Import(name="natIps")
    private @Nullable Output<List<String>> natIps;

    /**
     * @return Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
     * natIpAllocateOption is set to MANUAL_ONLY.
     * 
     */
    public Optional<Output<List<String>>> natIps() {
        return Optional.ofNullable(this.natIps);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Region where the NAT service reside.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where the NAT service reside.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the Cloud Router in which the referenced NAT service is configured.
     * 
     */
    @Import(name="router")
    private @Nullable Output<String> router;

    /**
     * @return The name of the Cloud Router in which the referenced NAT service is configured.
     * 
     */
    public Optional<Output<String>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * The name of the Nat service in which this address will be configured.
     * 
     */
    @Import(name="routerNat")
    private @Nullable Output<String> routerNat;

    /**
     * @return The name of the Nat service in which this address will be configured.
     * 
     */
    public Optional<Output<String>> routerNat() {
        return Optional.ofNullable(this.routerNat);
    }

    private RouterNatAddressState() {}

    private RouterNatAddressState(RouterNatAddressState $) {
        this.drainNatIps = $.drainNatIps;
        this.natIps = $.natIps;
        this.project = $.project;
        this.region = $.region;
        this.router = $.router;
        this.routerNat = $.routerNat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterNatAddressState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterNatAddressState $;

        public Builder() {
            $ = new RouterNatAddressState();
        }

        public Builder(RouterNatAddressState defaults) {
            $ = new RouterNatAddressState(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainNatIps A list of URLs of the IP resources to be drained. These IPs must be
         * valid static external IPs that have been assigned to the NAT.
         * 
         * @return builder
         * 
         */
        public Builder drainNatIps(@Nullable Output<List<String>> drainNatIps) {
            $.drainNatIps = drainNatIps;
            return this;
        }

        /**
         * @param drainNatIps A list of URLs of the IP resources to be drained. These IPs must be
         * valid static external IPs that have been assigned to the NAT.
         * 
         * @return builder
         * 
         */
        public Builder drainNatIps(List<String> drainNatIps) {
            return drainNatIps(Output.of(drainNatIps));
        }

        /**
         * @param drainNatIps A list of URLs of the IP resources to be drained. These IPs must be
         * valid static external IPs that have been assigned to the NAT.
         * 
         * @return builder
         * 
         */
        public Builder drainNatIps(String... drainNatIps) {
            return drainNatIps(List.of(drainNatIps));
        }

        /**
         * @param natIps Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
         * natIpAllocateOption is set to MANUAL_ONLY.
         * 
         * @return builder
         * 
         */
        public Builder natIps(@Nullable Output<List<String>> natIps) {
            $.natIps = natIps;
            return this;
        }

        /**
         * @param natIps Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
         * natIpAllocateOption is set to MANUAL_ONLY.
         * 
         * @return builder
         * 
         */
        public Builder natIps(List<String> natIps) {
            return natIps(Output.of(natIps));
        }

        /**
         * @param natIps Self-links of NAT IPs to be used in a Nat service. Only valid if the referenced RouterNat
         * natIpAllocateOption is set to MANUAL_ONLY.
         * 
         * @return builder
         * 
         */
        public Builder natIps(String... natIps) {
            return natIps(List.of(natIps));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region Region where the NAT service reside.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where the NAT service reside.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param router The name of the Cloud Router in which the referenced NAT service is configured.
         * 
         * @return builder
         * 
         */
        public Builder router(@Nullable Output<String> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router The name of the Cloud Router in which the referenced NAT service is configured.
         * 
         * @return builder
         * 
         */
        public Builder router(String router) {
            return router(Output.of(router));
        }

        /**
         * @param routerNat The name of the Nat service in which this address will be configured.
         * 
         * @return builder
         * 
         */
        public Builder routerNat(@Nullable Output<String> routerNat) {
            $.routerNat = routerNat;
            return this;
        }

        /**
         * @param routerNat The name of the Nat service in which this address will be configured.
         * 
         * @return builder
         * 
         */
        public Builder routerNat(String routerNat) {
            return routerNat(Output.of(routerNat));
        }

        public RouterNatAddressState build() {
            return $;
        }
    }

}
