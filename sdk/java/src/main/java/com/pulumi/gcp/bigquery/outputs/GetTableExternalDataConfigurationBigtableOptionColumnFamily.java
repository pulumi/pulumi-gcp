// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetTableExternalDataConfigurationBigtableOptionColumnFamilyColumn;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTableExternalDataConfigurationBigtableOptionColumnFamily {
    /**
     * @return A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field
     * 
     */
    private List<GetTableExternalDataConfigurationBigtableOptionColumnFamilyColumn> columns;
    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
     * 
     */
    private String encoding;
    /**
     * @return Identifier of the column family.
     * 
     */
    private String familyId;
    /**
     * @return If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
     * 
     */
    private Boolean onlyReadLatest;
    /**
     * @return The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
     * 
     */
    private String type;

    private GetTableExternalDataConfigurationBigtableOptionColumnFamily() {}
    /**
     * @return A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field
     * 
     */
    public List<GetTableExternalDataConfigurationBigtableOptionColumnFamilyColumn> columns() {
        return this.columns;
    }
    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return Identifier of the column family.
     * 
     */
    public String familyId() {
        return this.familyId;
    }
    /**
     * @return If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
     * 
     */
    public Boolean onlyReadLatest() {
        return this.onlyReadLatest;
    }
    /**
     * @return The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableExternalDataConfigurationBigtableOptionColumnFamily defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTableExternalDataConfigurationBigtableOptionColumnFamilyColumn> columns;
        private String encoding;
        private String familyId;
        private Boolean onlyReadLatest;
        private String type;
        public Builder() {}
        public Builder(GetTableExternalDataConfigurationBigtableOptionColumnFamily defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.encoding = defaults.encoding;
    	      this.familyId = defaults.familyId;
    	      this.onlyReadLatest = defaults.onlyReadLatest;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder columns(List<GetTableExternalDataConfigurationBigtableOptionColumnFamilyColumn> columns) {
            if (columns == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationBigtableOptionColumnFamily", "columns");
            }
            this.columns = columns;
            return this;
        }
        public Builder columns(GetTableExternalDataConfigurationBigtableOptionColumnFamilyColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationBigtableOptionColumnFamily", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder familyId(String familyId) {
            if (familyId == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationBigtableOptionColumnFamily", "familyId");
            }
            this.familyId = familyId;
            return this;
        }
        @CustomType.Setter
        public Builder onlyReadLatest(Boolean onlyReadLatest) {
            if (onlyReadLatest == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationBigtableOptionColumnFamily", "onlyReadLatest");
            }
            this.onlyReadLatest = onlyReadLatest;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationBigtableOptionColumnFamily", "type");
            }
            this.type = type;
            return this;
        }
        public GetTableExternalDataConfigurationBigtableOptionColumnFamily build() {
            final var _resultValue = new GetTableExternalDataConfigurationBigtableOptionColumnFamily();
            _resultValue.columns = columns;
            _resultValue.encoding = encoding;
            _resultValue.familyId = familyId;
            _resultValue.onlyReadLatest = onlyReadLatest;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
