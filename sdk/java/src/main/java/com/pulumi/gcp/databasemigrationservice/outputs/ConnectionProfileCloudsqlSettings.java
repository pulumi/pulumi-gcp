// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileCloudsqlSettingsIpConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionProfileCloudsqlSettings {
    /**
     * @return The activation policy specifies when the instance is activated; it is applicable only when the instance state is &#39;RUNNABLE&#39;.
     * Possible values are: `ALWAYS`, `NEVER`.
     * 
     */
    private @Nullable String activationPolicy;
    /**
     * @return If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity.
     * If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
     * 
     */
    private @Nullable Boolean autoStorageIncrease;
    /**
     * @return The KMS key name used for the csql instance.
     * 
     */
    private @Nullable String cmekKeyName;
    /**
     * @return The Cloud SQL default instance level collation.
     * 
     */
    private @Nullable String collation;
    /**
     * @return The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
     * 
     */
    private @Nullable String dataDiskSizeGb;
    /**
     * @return The type of storage.
     * Possible values are: `PD_SSD`, `PD_HDD`.
     * 
     */
    private @Nullable String dataDiskType;
    /**
     * @return The database flags passed to the Cloud SQL instance at startup.
     * 
     */
    private @Nullable Map<String,String> databaseFlags;
    /**
     * @return The database engine type and version.
     * Currently supported values located at https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.connectionProfiles#sqldatabaseversion
     * 
     */
    private @Nullable String databaseVersion;
    /**
     * @return The edition of the given Cloud SQL instance.
     * Possible values are: `ENTERPRISE`, `ENTERPRISE_PLUS`.
     * 
     */
    private @Nullable String edition;
    /**
     * @return The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionProfileCloudsqlSettingsIpConfig ipConfig;
    /**
     * @return Input only. Initial root password.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private @Nullable String rootPassword;
    /**
     * @return (Output)
     * Output only. Indicates If this connection profile root password is stored.
     * 
     */
    private @Nullable Boolean rootPasswordSet;
    /**
     * @return The Database Migration Service source connection profile ID, in the format: projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID
     * 
     */
    private String sourceId;
    /**
     * @return The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    private @Nullable String storageAutoResizeLimit;
    /**
     * @return The tier (or machine type) for this instance, for example: db-n1-standard-1 (MySQL instances) or db-custom-1-3840 (PostgreSQL instances).
     * For more information, see https://cloud.google.com/sql/docs/mysql/instance-settings
     * 
     */
    private @Nullable String tier;
    /**
     * @return The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     */
    private @Nullable Map<String,String> userLabels;
    /**
     * @return The Google Cloud Platform zone where your Cloud SQL datdabse instance is located.
     * 
     */
    private @Nullable String zone;

    private ConnectionProfileCloudsqlSettings() {}
    /**
     * @return The activation policy specifies when the instance is activated; it is applicable only when the instance state is &#39;RUNNABLE&#39;.
     * Possible values are: `ALWAYS`, `NEVER`.
     * 
     */
    public Optional<String> activationPolicy() {
        return Optional.ofNullable(this.activationPolicy);
    }
    /**
     * @return If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity.
     * If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
     * 
     */
    public Optional<Boolean> autoStorageIncrease() {
        return Optional.ofNullable(this.autoStorageIncrease);
    }
    /**
     * @return The KMS key name used for the csql instance.
     * 
     */
    public Optional<String> cmekKeyName() {
        return Optional.ofNullable(this.cmekKeyName);
    }
    /**
     * @return The Cloud SQL default instance level collation.
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }
    /**
     * @return The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
     * 
     */
    public Optional<String> dataDiskSizeGb() {
        return Optional.ofNullable(this.dataDiskSizeGb);
    }
    /**
     * @return The type of storage.
     * Possible values are: `PD_SSD`, `PD_HDD`.
     * 
     */
    public Optional<String> dataDiskType() {
        return Optional.ofNullable(this.dataDiskType);
    }
    /**
     * @return The database flags passed to the Cloud SQL instance at startup.
     * 
     */
    public Map<String,String> databaseFlags() {
        return this.databaseFlags == null ? Map.of() : this.databaseFlags;
    }
    /**
     * @return The database engine type and version.
     * Currently supported values located at https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.connectionProfiles#sqldatabaseversion
     * 
     */
    public Optional<String> databaseVersion() {
        return Optional.ofNullable(this.databaseVersion);
    }
    /**
     * @return The edition of the given Cloud SQL instance.
     * Possible values are: `ENTERPRISE`, `ENTERPRISE_PLUS`.
     * 
     */
    public Optional<String> edition() {
        return Optional.ofNullable(this.edition);
    }
    /**
     * @return The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionProfileCloudsqlSettingsIpConfig> ipConfig() {
        return Optional.ofNullable(this.ipConfig);
    }
    /**
     * @return Input only. Initial root password.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<String> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }
    /**
     * @return (Output)
     * Output only. Indicates If this connection profile root password is stored.
     * 
     */
    public Optional<Boolean> rootPasswordSet() {
        return Optional.ofNullable(this.rootPasswordSet);
    }
    /**
     * @return The Database Migration Service source connection profile ID, in the format: projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID
     * 
     */
    public String sourceId() {
        return this.sourceId;
    }
    /**
     * @return The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    public Optional<String> storageAutoResizeLimit() {
        return Optional.ofNullable(this.storageAutoResizeLimit);
    }
    /**
     * @return The tier (or machine type) for this instance, for example: db-n1-standard-1 (MySQL instances) or db-custom-1-3840 (PostgreSQL instances).
     * For more information, see https://cloud.google.com/sql/docs/mysql/instance-settings
     * 
     */
    public Optional<String> tier() {
        return Optional.ofNullable(this.tier);
    }
    /**
     * @return The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     */
    public Map<String,String> userLabels() {
        return this.userLabels == null ? Map.of() : this.userLabels;
    }
    /**
     * @return The Google Cloud Platform zone where your Cloud SQL datdabse instance is located.
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionProfileCloudsqlSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String activationPolicy;
        private @Nullable Boolean autoStorageIncrease;
        private @Nullable String cmekKeyName;
        private @Nullable String collation;
        private @Nullable String dataDiskSizeGb;
        private @Nullable String dataDiskType;
        private @Nullable Map<String,String> databaseFlags;
        private @Nullable String databaseVersion;
        private @Nullable String edition;
        private @Nullable ConnectionProfileCloudsqlSettingsIpConfig ipConfig;
        private @Nullable String rootPassword;
        private @Nullable Boolean rootPasswordSet;
        private String sourceId;
        private @Nullable String storageAutoResizeLimit;
        private @Nullable String tier;
        private @Nullable Map<String,String> userLabels;
        private @Nullable String zone;
        public Builder() {}
        public Builder(ConnectionProfileCloudsqlSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.autoStorageIncrease = defaults.autoStorageIncrease;
    	      this.cmekKeyName = defaults.cmekKeyName;
    	      this.collation = defaults.collation;
    	      this.dataDiskSizeGb = defaults.dataDiskSizeGb;
    	      this.dataDiskType = defaults.dataDiskType;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.edition = defaults.edition;
    	      this.ipConfig = defaults.ipConfig;
    	      this.rootPassword = defaults.rootPassword;
    	      this.rootPasswordSet = defaults.rootPasswordSet;
    	      this.sourceId = defaults.sourceId;
    	      this.storageAutoResizeLimit = defaults.storageAutoResizeLimit;
    	      this.tier = defaults.tier;
    	      this.userLabels = defaults.userLabels;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder activationPolicy(@Nullable String activationPolicy) {
            this.activationPolicy = activationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder autoStorageIncrease(@Nullable Boolean autoStorageIncrease) {
            this.autoStorageIncrease = autoStorageIncrease;
            return this;
        }
        @CustomType.Setter
        public Builder cmekKeyName(@Nullable String cmekKeyName) {
            this.cmekKeyName = cmekKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder collation(@Nullable String collation) {
            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskSizeGb(@Nullable String dataDiskSizeGb) {
            this.dataDiskSizeGb = dataDiskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskType(@Nullable String dataDiskType) {
            this.dataDiskType = dataDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder databaseFlags(@Nullable Map<String,String> databaseFlags) {
            this.databaseFlags = databaseFlags;
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(@Nullable String databaseVersion) {
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder edition(@Nullable String edition) {
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder ipConfig(@Nullable ConnectionProfileCloudsqlSettingsIpConfig ipConfig) {
            this.ipConfig = ipConfig;
            return this;
        }
        @CustomType.Setter
        public Builder rootPassword(@Nullable String rootPassword) {
            this.rootPassword = rootPassword;
            return this;
        }
        @CustomType.Setter
        public Builder rootPasswordSet(@Nullable Boolean rootPasswordSet) {
            this.rootPasswordSet = rootPasswordSet;
            return this;
        }
        @CustomType.Setter
        public Builder sourceId(String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId);
            return this;
        }
        @CustomType.Setter
        public Builder storageAutoResizeLimit(@Nullable String storageAutoResizeLimit) {
            this.storageAutoResizeLimit = storageAutoResizeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder tier(@Nullable String tier) {
            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder userLabels(@Nullable Map<String,String> userLabels) {
            this.userLabels = userLabels;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }
        public ConnectionProfileCloudsqlSettings build() {
            final var o = new ConnectionProfileCloudsqlSettings();
            o.activationPolicy = activationPolicy;
            o.autoStorageIncrease = autoStorageIncrease;
            o.cmekKeyName = cmekKeyName;
            o.collation = collation;
            o.dataDiskSizeGb = dataDiskSizeGb;
            o.dataDiskType = dataDiskType;
            o.databaseFlags = databaseFlags;
            o.databaseVersion = databaseVersion;
            o.edition = edition;
            o.ipConfig = ipConfig;
            o.rootPassword = rootPassword;
            o.rootPasswordSet = rootPasswordSet;
            o.sourceId = sourceId;
            o.storageAutoResizeLimit = storageAutoResizeLimit;
            o.tier = tier;
            o.userLabels = userLabels;
            o.zone = zone;
            return o;
        }
    }
}
