// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.sql.outputs.UserPasswordPolicyStatus;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UserPasswordPolicy {
    /**
     * @return Number of failed attempts allowed before the user get locked.
     * 
     */
    private @Nullable Integer allowedFailedAttempts;
    /**
     * @return If true, the check that will lock user after too many failed login attempts will be enabled.
     * 
     */
    private @Nullable Boolean enableFailedAttemptsCheck;
    /**
     * @return If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     * 
     */
    private @Nullable Boolean enablePasswordVerification;
    /**
     * @return Password expiration duration with one week grace period.
     * 
     */
    private @Nullable String passwordExpirationDuration;
    private @Nullable List<UserPasswordPolicyStatus> statuses;

    private UserPasswordPolicy() {}
    /**
     * @return Number of failed attempts allowed before the user get locked.
     * 
     */
    public Optional<Integer> allowedFailedAttempts() {
        return Optional.ofNullable(this.allowedFailedAttempts);
    }
    /**
     * @return If true, the check that will lock user after too many failed login attempts will be enabled.
     * 
     */
    public Optional<Boolean> enableFailedAttemptsCheck() {
        return Optional.ofNullable(this.enableFailedAttemptsCheck);
    }
    /**
     * @return If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     * 
     */
    public Optional<Boolean> enablePasswordVerification() {
        return Optional.ofNullable(this.enablePasswordVerification);
    }
    /**
     * @return Password expiration duration with one week grace period.
     * 
     */
    public Optional<String> passwordExpirationDuration() {
        return Optional.ofNullable(this.passwordExpirationDuration);
    }
    public List<UserPasswordPolicyStatus> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserPasswordPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer allowedFailedAttempts;
        private @Nullable Boolean enableFailedAttemptsCheck;
        private @Nullable Boolean enablePasswordVerification;
        private @Nullable String passwordExpirationDuration;
        private @Nullable List<UserPasswordPolicyStatus> statuses;
        public Builder() {}
        public Builder(UserPasswordPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedFailedAttempts = defaults.allowedFailedAttempts;
    	      this.enableFailedAttemptsCheck = defaults.enableFailedAttemptsCheck;
    	      this.enablePasswordVerification = defaults.enablePasswordVerification;
    	      this.passwordExpirationDuration = defaults.passwordExpirationDuration;
    	      this.statuses = defaults.statuses;
        }

        @CustomType.Setter
        public Builder allowedFailedAttempts(@Nullable Integer allowedFailedAttempts) {
            this.allowedFailedAttempts = allowedFailedAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder enableFailedAttemptsCheck(@Nullable Boolean enableFailedAttemptsCheck) {
            this.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
            return this;
        }
        @CustomType.Setter
        public Builder enablePasswordVerification(@Nullable Boolean enablePasswordVerification) {
            this.enablePasswordVerification = enablePasswordVerification;
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpirationDuration(@Nullable String passwordExpirationDuration) {
            this.passwordExpirationDuration = passwordExpirationDuration;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(@Nullable List<UserPasswordPolicyStatus> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(UserPasswordPolicyStatus... statuses) {
            return statuses(List.of(statuses));
        }
        public UserPasswordPolicy build() {
            final var o = new UserPasswordPolicy();
            o.allowedFailedAttempts = allowedFailedAttempts;
            o.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
            o.enablePasswordVerification = enablePasswordVerification;
            o.passwordExpirationDuration = passwordExpirationDuration;
            o.statuses = statuses;
            return o;
        }
    }
}
