// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.migrationcenter.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PreferenceSetVirtualMachinePreferencesVmwareEnginePreferences {
    /**
     * @return Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with. Possible values: `COMMITMENT_PLAN_UNSPECIFIED`, `ON_DEMAND`, `COMMITMENT_1_YEAR_MONTHLY_PAYMENTS`, `COMMITMENT_3_YEAR_MONTHLY_PAYMENTS`, `COMMITMENT_1_YEAR_UPFRONT_PAYMENT`, `COMMITMENT_3_YEAR_UPFRONT_PAYMENT`,
     * 
     */
    private @Nullable String commitmentPlan;
    /**
     * @return CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
     * 
     */
    private @Nullable Double cpuOvercommitRatio;
    /**
     * @return Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
     * 
     */
    private @Nullable Double memoryOvercommitRatio;
    /**
     * @return The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.
     * 
     */
    private @Nullable Double storageDeduplicationCompressionRatio;

    private PreferenceSetVirtualMachinePreferencesVmwareEnginePreferences() {}
    /**
     * @return Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with. Possible values: `COMMITMENT_PLAN_UNSPECIFIED`, `ON_DEMAND`, `COMMITMENT_1_YEAR_MONTHLY_PAYMENTS`, `COMMITMENT_3_YEAR_MONTHLY_PAYMENTS`, `COMMITMENT_1_YEAR_UPFRONT_PAYMENT`, `COMMITMENT_3_YEAR_UPFRONT_PAYMENT`,
     * 
     */
    public Optional<String> commitmentPlan() {
        return Optional.ofNullable(this.commitmentPlan);
    }
    /**
     * @return CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
     * 
     */
    public Optional<Double> cpuOvercommitRatio() {
        return Optional.ofNullable(this.cpuOvercommitRatio);
    }
    /**
     * @return Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
     * 
     */
    public Optional<Double> memoryOvercommitRatio() {
        return Optional.ofNullable(this.memoryOvercommitRatio);
    }
    /**
     * @return The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.
     * 
     */
    public Optional<Double> storageDeduplicationCompressionRatio() {
        return Optional.ofNullable(this.storageDeduplicationCompressionRatio);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreferenceSetVirtualMachinePreferencesVmwareEnginePreferences defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String commitmentPlan;
        private @Nullable Double cpuOvercommitRatio;
        private @Nullable Double memoryOvercommitRatio;
        private @Nullable Double storageDeduplicationCompressionRatio;
        public Builder() {}
        public Builder(PreferenceSetVirtualMachinePreferencesVmwareEnginePreferences defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commitmentPlan = defaults.commitmentPlan;
    	      this.cpuOvercommitRatio = defaults.cpuOvercommitRatio;
    	      this.memoryOvercommitRatio = defaults.memoryOvercommitRatio;
    	      this.storageDeduplicationCompressionRatio = defaults.storageDeduplicationCompressionRatio;
        }

        @CustomType.Setter
        public Builder commitmentPlan(@Nullable String commitmentPlan) {

            this.commitmentPlan = commitmentPlan;
            return this;
        }
        @CustomType.Setter
        public Builder cpuOvercommitRatio(@Nullable Double cpuOvercommitRatio) {

            this.cpuOvercommitRatio = cpuOvercommitRatio;
            return this;
        }
        @CustomType.Setter
        public Builder memoryOvercommitRatio(@Nullable Double memoryOvercommitRatio) {

            this.memoryOvercommitRatio = memoryOvercommitRatio;
            return this;
        }
        @CustomType.Setter
        public Builder storageDeduplicationCompressionRatio(@Nullable Double storageDeduplicationCompressionRatio) {

            this.storageDeduplicationCompressionRatio = storageDeduplicationCompressionRatio;
            return this;
        }
        public PreferenceSetVirtualMachinePreferencesVmwareEnginePreferences build() {
            final var _resultValue = new PreferenceSetVirtualMachinePreferencesVmwareEnginePreferences();
            _resultValue.commitmentPlan = commitmentPlan;
            _resultValue.cpuOvercommitRatio = cpuOvercommitRatio;
            _resultValue.memoryOvercommitRatio = memoryOvercommitRatio;
            _resultValue.storageDeduplicationCompressionRatio = storageDeduplicationCompressionRatio;
            return _resultValue;
        }
    }
}
