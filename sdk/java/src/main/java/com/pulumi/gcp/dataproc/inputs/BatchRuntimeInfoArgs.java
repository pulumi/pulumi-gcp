// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.BatchRuntimeInfoApproximateUsageArgs;
import com.pulumi.gcp.dataproc.inputs.BatchRuntimeInfoCurrentUsageArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BatchRuntimeInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final BatchRuntimeInfoArgs Empty = new BatchRuntimeInfoArgs();

    /**
     * (Output)
     * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    @Import(name="approximateUsages")
    private @Nullable Output<List<BatchRuntimeInfoApproximateUsageArgs>> approximateUsages;

    /**
     * @return (Output)
     * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BatchRuntimeInfoApproximateUsageArgs>>> approximateUsages() {
        return Optional.ofNullable(this.approximateUsages);
    }

    /**
     * (Output)
     * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    @Import(name="currentUsages")
    private @Nullable Output<List<BatchRuntimeInfoCurrentUsageArgs>> currentUsages;

    /**
     * @return (Output)
     * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BatchRuntimeInfoCurrentUsageArgs>>> currentUsages() {
        return Optional.ofNullable(this.currentUsages);
    }

    /**
     * (Output)
     * A URI pointing to the location of the diagnostics tarball.
     * 
     */
    @Import(name="diagnosticOutputUri")
    private @Nullable Output<String> diagnosticOutputUri;

    /**
     * @return (Output)
     * A URI pointing to the location of the diagnostics tarball.
     * 
     */
    public Optional<Output<String>> diagnosticOutputUri() {
        return Optional.ofNullable(this.diagnosticOutputUri);
    }

    /**
     * (Output)
     * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<Map<String,String>> endpoints;

    /**
     * @return (Output)
     * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
     * 
     */
    public Optional<Output<Map<String,String>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * (Output)
     * A URI pointing to the location of the stdout and stderr of the workload.
     * 
     */
    @Import(name="outputUri")
    private @Nullable Output<String> outputUri;

    /**
     * @return (Output)
     * A URI pointing to the location of the stdout and stderr of the workload.
     * 
     */
    public Optional<Output<String>> outputUri() {
        return Optional.ofNullable(this.outputUri);
    }

    private BatchRuntimeInfoArgs() {}

    private BatchRuntimeInfoArgs(BatchRuntimeInfoArgs $) {
        this.approximateUsages = $.approximateUsages;
        this.currentUsages = $.currentUsages;
        this.diagnosticOutputUri = $.diagnosticOutputUri;
        this.endpoints = $.endpoints;
        this.outputUri = $.outputUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchRuntimeInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchRuntimeInfoArgs $;

        public Builder() {
            $ = new BatchRuntimeInfoArgs();
        }

        public Builder(BatchRuntimeInfoArgs defaults) {
            $ = new BatchRuntimeInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approximateUsages (Output)
         * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder approximateUsages(@Nullable Output<List<BatchRuntimeInfoApproximateUsageArgs>> approximateUsages) {
            $.approximateUsages = approximateUsages;
            return this;
        }

        /**
         * @param approximateUsages (Output)
         * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder approximateUsages(List<BatchRuntimeInfoApproximateUsageArgs> approximateUsages) {
            return approximateUsages(Output.of(approximateUsages));
        }

        /**
         * @param approximateUsages (Output)
         * Approximate workload resource usage, calculated when the workload completes(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder approximateUsages(BatchRuntimeInfoApproximateUsageArgs... approximateUsages) {
            return approximateUsages(List.of(approximateUsages));
        }

        /**
         * @param currentUsages (Output)
         * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder currentUsages(@Nullable Output<List<BatchRuntimeInfoCurrentUsageArgs>> currentUsages) {
            $.currentUsages = currentUsages;
            return this;
        }

        /**
         * @param currentUsages (Output)
         * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder currentUsages(List<BatchRuntimeInfoCurrentUsageArgs> currentUsages) {
            return currentUsages(Output.of(currentUsages));
        }

        /**
         * @param currentUsages (Output)
         * Snapshot of current workload resource usage(see [Dataproc Serverless pricing](https://cloud.google.com/dataproc-serverless/pricing))
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder currentUsages(BatchRuntimeInfoCurrentUsageArgs... currentUsages) {
            return currentUsages(List.of(currentUsages));
        }

        /**
         * @param diagnosticOutputUri (Output)
         * A URI pointing to the location of the diagnostics tarball.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticOutputUri(@Nullable Output<String> diagnosticOutputUri) {
            $.diagnosticOutputUri = diagnosticOutputUri;
            return this;
        }

        /**
         * @param diagnosticOutputUri (Output)
         * A URI pointing to the location of the diagnostics tarball.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticOutputUri(String diagnosticOutputUri) {
            return diagnosticOutputUri(Output.of(diagnosticOutputUri));
        }

        /**
         * @param endpoints (Output)
         * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<Map<String,String>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints (Output)
         * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(Map<String,String> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param outputUri (Output)
         * A URI pointing to the location of the stdout and stderr of the workload.
         * 
         * @return builder
         * 
         */
        public Builder outputUri(@Nullable Output<String> outputUri) {
            $.outputUri = outputUri;
            return this;
        }

        /**
         * @param outputUri (Output)
         * A URI pointing to the location of the stdout and stderr of the workload.
         * 
         * @return builder
         * 
         */
        public Builder outputUri(String outputUri) {
            return outputUri(Output.of(outputUri));
        }

        public BatchRuntimeInfoArgs build() {
            return $;
        }
    }

}
