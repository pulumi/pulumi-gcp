// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.chronicle.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.chronicle.inputs.RetrohuntExecutionIntervalArgs;
import com.pulumi.gcp.chronicle.inputs.RetrohuntProcessIntervalArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RetrohuntState extends com.pulumi.resources.ResourceArgs {

    public static final RetrohuntState Empty = new RetrohuntState();

    /**
     * The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     * 
     */
    @Import(name="RetrohuntId")
    private @Nullable Output<String> RetrohuntId;

    /**
     * @return The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
     * 
     */
    public Optional<Output<String>> RetrohuntId() {
        return Optional.ofNullable(this.RetrohuntId);
    }

    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    @Import(name="executionIntervals")
    private @Nullable Output<List<RetrohuntExecutionIntervalArgs>> executionIntervals;

    /**
     * @return Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RetrohuntExecutionIntervalArgs>>> executionIntervals() {
        return Optional.ofNullable(this.executionIntervals);
    }

    /**
     * The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    /**
     * @return The unique identifier for the Chronicle instance, which is the same as the customer ID.
     * 
     */
    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id{@literal @}revision_id}.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id{@literal @}revision_id}.
     * Format:
     * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    @Import(name="processInterval")
    private @Nullable Output<RetrohuntProcessIntervalArgs> processInterval;

    /**
     * @return Represents a time interval, encoded as a Timestamp start (inclusive) and a
     * Timestamp end (exclusive).
     * The start must be less than or equal to the end.
     * When the start equals the end, the interval is empty (matches no time).
     * When both start and end are unspecified, the interval matches any time.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RetrohuntProcessIntervalArgs>> processInterval() {
        return Optional.ofNullable(this.processInterval);
    }

    /**
     * Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
     * 
     */
    @Import(name="progressPercentage")
    private @Nullable Output<Double> progressPercentage;

    /**
     * @return Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
     * 
     */
    public Optional<Output<Double>> progressPercentage() {
        return Optional.ofNullable(this.progressPercentage);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Rule ID of the rule.
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return The Rule ID of the rule.
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Output only. The state of the retrohunt.
     * Possible values:
     * RUNNING
     * DONE
     * CANCELLED
     * FAILED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. The state of the retrohunt.
     * Possible values:
     * RUNNING
     * DONE
     * CANCELLED
     * FAILED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private RetrohuntState() {}

    private RetrohuntState(RetrohuntState $) {
        this.RetrohuntId = $.RetrohuntId;
        this.executionIntervals = $.executionIntervals;
        this.instance = $.instance;
        this.location = $.location;
        this.name = $.name;
        this.processInterval = $.processInterval;
        this.progressPercentage = $.progressPercentage;
        this.project = $.project;
        this.rule = $.rule;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetrohuntState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetrohuntState $;

        public Builder() {
            $ = new RetrohuntState();
        }

        public Builder(RetrohuntState defaults) {
            $ = new RetrohuntState(Objects.requireNonNull(defaults));
        }

        /**
         * @param RetrohuntId The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
         * 
         * @return builder
         * 
         */
        public Builder RetrohuntId(@Nullable Output<String> RetrohuntId) {
            $.RetrohuntId = RetrohuntId;
            return this;
        }

        /**
         * @param RetrohuntId The retrohunt ID of the Retrohunt. A retrohunt is an execution of a Rule over a time range in the past.
         * 
         * @return builder
         * 
         */
        public Builder RetrohuntId(String RetrohuntId) {
            return RetrohuntId(Output.of(RetrohuntId));
        }

        /**
         * @param executionIntervals Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionIntervals(@Nullable Output<List<RetrohuntExecutionIntervalArgs>> executionIntervals) {
            $.executionIntervals = executionIntervals;
            return this;
        }

        /**
         * @param executionIntervals Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionIntervals(List<RetrohuntExecutionIntervalArgs> executionIntervals) {
            return executionIntervals(Output.of(executionIntervals));
        }

        /**
         * @param executionIntervals Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionIntervals(RetrohuntExecutionIntervalArgs... executionIntervals) {
            return executionIntervals(List.of(executionIntervals));
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The unique identifier for the Chronicle instance, which is the same as the customer ID.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource. This is the geographical region where the Chronicle instance resides, such as &#34;us&#34; or &#34;europe-west2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the retrohunt.
         * Retrohunt is the child of a rule revision. {rule} in the format below is
         * structured as {rule_id{@literal @}revision_id}.
         * Format:
         * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the retrohunt.
         * Retrohunt is the child of a rule revision. {rule} in the format below is
         * structured as {rule_id{@literal @}revision_id}.
         * Format:
         * projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param processInterval Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder processInterval(@Nullable Output<RetrohuntProcessIntervalArgs> processInterval) {
            $.processInterval = processInterval;
            return this;
        }

        /**
         * @param processInterval Represents a time interval, encoded as a Timestamp start (inclusive) and a
         * Timestamp end (exclusive).
         * The start must be less than or equal to the end.
         * When the start equals the end, the interval is empty (matches no time).
         * When both start and end are unspecified, the interval matches any time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder processInterval(RetrohuntProcessIntervalArgs processInterval) {
            return processInterval(Output.of(processInterval));
        }

        /**
         * @param progressPercentage Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
         * 
         * @return builder
         * 
         */
        public Builder progressPercentage(@Nullable Output<Double> progressPercentage) {
            $.progressPercentage = progressPercentage;
            return this;
        }

        /**
         * @param progressPercentage Output only. Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
         * 
         * @return builder
         * 
         */
        public Builder progressPercentage(Double progressPercentage) {
            return progressPercentage(Output.of(progressPercentage));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rule The Rule ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule The Rule ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param state Output only. The state of the retrohunt.
         * Possible values:
         * RUNNING
         * DONE
         * CANCELLED
         * FAILED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. The state of the retrohunt.
         * Possible values:
         * RUNNING
         * DONE
         * CANCELLED
         * FAILED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public RetrohuntState build() {
            return $;
        }
    }

}
