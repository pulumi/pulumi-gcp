// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.inputs.FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FolderKajPolicyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderKajPolicyConfigArgs Empty = new FolderKajPolicyConfigArgs();

    /**
     * The default key access justification policy used when a CryptoKey is
     * created in this folder. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     * 
     */
    @Import(name="defaultKeyAccessJustificationPolicy")
    private @Nullable Output<FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs> defaultKeyAccessJustificationPolicy;

    /**
     * @return The default key access justification policy used when a CryptoKey is
     * created in this folder. This is only used when a Key Access Justifications
     * policy is not provided in the CreateCryptoKeyRequest.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs>> defaultKeyAccessJustificationPolicy() {
        return Optional.ofNullable(this.defaultKeyAccessJustificationPolicy);
    }

    /**
     * The numeric folder number for which to retrieve config.
     * 
     */
    @Import(name="folder", required=true)
    private Output<String> folder;

    /**
     * @return The numeric folder number for which to retrieve config.
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }

    private FolderKajPolicyConfigArgs() {}

    private FolderKajPolicyConfigArgs(FolderKajPolicyConfigArgs $) {
        this.defaultKeyAccessJustificationPolicy = $.defaultKeyAccessJustificationPolicy;
        this.folder = $.folder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderKajPolicyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderKajPolicyConfigArgs $;

        public Builder() {
            $ = new FolderKajPolicyConfigArgs();
        }

        public Builder(FolderKajPolicyConfigArgs defaults) {
            $ = new FolderKajPolicyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultKeyAccessJustificationPolicy The default key access justification policy used when a CryptoKey is
         * created in this folder. This is only used when a Key Access Justifications
         * policy is not provided in the CreateCryptoKeyRequest.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeyAccessJustificationPolicy(@Nullable Output<FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs> defaultKeyAccessJustificationPolicy) {
            $.defaultKeyAccessJustificationPolicy = defaultKeyAccessJustificationPolicy;
            return this;
        }

        /**
         * @param defaultKeyAccessJustificationPolicy The default key access justification policy used when a CryptoKey is
         * created in this folder. This is only used when a Key Access Justifications
         * policy is not provided in the CreateCryptoKeyRequest.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeyAccessJustificationPolicy(FolderKajPolicyConfigDefaultKeyAccessJustificationPolicyArgs defaultKeyAccessJustificationPolicy) {
            return defaultKeyAccessJustificationPolicy(Output.of(defaultKeyAccessJustificationPolicy));
        }

        /**
         * @param folder The numeric folder number for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The numeric folder number for which to retrieve config.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        public FolderKajPolicyConfigArgs build() {
            if ($.folder == null) {
                throw new MissingRequiredPropertyException("FolderKajPolicyConfigArgs", "folder");
            }
            return $;
        }
    }

}
