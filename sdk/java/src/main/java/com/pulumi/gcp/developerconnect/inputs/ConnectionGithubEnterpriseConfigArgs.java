// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionGithubEnterpriseConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGithubEnterpriseConfigArgs Empty = new ConnectionGithubEnterpriseConfigArgs();

    /**
     * Optional. ID of the GitHub App created from the manifest.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return Optional. ID of the GitHub App created from the manifest.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Optional. ID of the installation of the GitHub App.
     * 
     */
    @Import(name="appInstallationId")
    private @Nullable Output<String> appInstallationId;

    /**
     * @return Optional. ID of the installation of the GitHub App.
     * 
     */
    public Optional<Output<String>> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }

    /**
     * (Output)
     * Output only. The URL-friendly name of the GitHub App.
     * 
     */
    @Import(name="appSlug")
    private @Nullable Output<String> appSlug;

    /**
     * @return (Output)
     * Output only. The URL-friendly name of the GitHub App.
     * 
     */
    public Optional<Output<String>> appSlug() {
        return Optional.ofNullable(this.appSlug);
    }

    /**
     * Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    @Import(name="hostUri", required=true)
    private Output<String> hostUri;

    /**
     * @return Required. The URI of the GitHub Enterprise host this connection is for.
     * 
     */
    public Output<String> hostUri() {
        return this.hostUri;
    }

    /**
     * (Output)
     * Output only. The URI to navigate to in order to manage the installation associated
     * with this GitHubEnterpriseConfig.
     * 
     */
    @Import(name="installationUri")
    private @Nullable Output<String> installationUri;

    /**
     * @return (Output)
     * Output only. The URI to navigate to in order to manage the installation associated
     * with this GitHubEnterpriseConfig.
     * 
     */
    public Optional<Output<String>> installationUri() {
        return Optional.ofNullable(this.installationUri);
    }

    /**
     * Optional. SecretManager resource containing the private key of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    @Import(name="privateKeySecretVersion")
    private @Nullable Output<String> privateKeySecretVersion;

    /**
     * @return Optional. SecretManager resource containing the private key of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    public Optional<Output<String>> privateKeySecretVersion() {
        return Optional.ofNullable(this.privateKeySecretVersion);
    }

    /**
     * (Output)
     * Output only. GitHub Enterprise version installed at the host_uri.
     * 
     */
    @Import(name="serverVersion")
    private @Nullable Output<String> serverVersion;

    /**
     * @return (Output)
     * Output only. GitHub Enterprise version installed at the host_uri.
     * 
     */
    public Optional<Output<String>> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }

    /**
     * ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceDirectoryConfig")
    private @Nullable Output<ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs> serviceDirectoryConfig;

    /**
     * @return ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs>> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }

    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    @Import(name="sslCaCertificate")
    private @Nullable Output<String> sslCaCertificate;

    /**
     * @return Optional. SSL certificate to use for requests to GitHub Enterprise.
     * 
     */
    public Optional<Output<String>> sslCaCertificate() {
        return Optional.ofNullable(this.sslCaCertificate);
    }

    /**
     * Optional. SecretManager resource containing the webhook secret of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    @Import(name="webhookSecretSecretVersion")
    private @Nullable Output<String> webhookSecretSecretVersion;

    /**
     * @return Optional. SecretManager resource containing the webhook secret of the GitHub App,
     * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
     * 
     */
    public Optional<Output<String>> webhookSecretSecretVersion() {
        return Optional.ofNullable(this.webhookSecretSecretVersion);
    }

    private ConnectionGithubEnterpriseConfigArgs() {}

    private ConnectionGithubEnterpriseConfigArgs(ConnectionGithubEnterpriseConfigArgs $) {
        this.appId = $.appId;
        this.appInstallationId = $.appInstallationId;
        this.appSlug = $.appSlug;
        this.hostUri = $.hostUri;
        this.installationUri = $.installationUri;
        this.privateKeySecretVersion = $.privateKeySecretVersion;
        this.serverVersion = $.serverVersion;
        this.serviceDirectoryConfig = $.serviceDirectoryConfig;
        this.sslCaCertificate = $.sslCaCertificate;
        this.webhookSecretSecretVersion = $.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGithubEnterpriseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGithubEnterpriseConfigArgs $;

        public Builder() {
            $ = new ConnectionGithubEnterpriseConfigArgs();
        }

        public Builder(ConnectionGithubEnterpriseConfigArgs defaults) {
            $ = new ConnectionGithubEnterpriseConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId Optional. ID of the GitHub App created from the manifest.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId Optional. ID of the GitHub App created from the manifest.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param appInstallationId Optional. ID of the installation of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(@Nullable Output<String> appInstallationId) {
            $.appInstallationId = appInstallationId;
            return this;
        }

        /**
         * @param appInstallationId Optional. ID of the installation of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(String appInstallationId) {
            return appInstallationId(Output.of(appInstallationId));
        }

        /**
         * @param appSlug (Output)
         * Output only. The URL-friendly name of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appSlug(@Nullable Output<String> appSlug) {
            $.appSlug = appSlug;
            return this;
        }

        /**
         * @param appSlug (Output)
         * Output only. The URL-friendly name of the GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder appSlug(String appSlug) {
            return appSlug(Output.of(appSlug));
        }

        /**
         * @param hostUri Required. The URI of the GitHub Enterprise host this connection is for.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(Output<String> hostUri) {
            $.hostUri = hostUri;
            return this;
        }

        /**
         * @param hostUri Required. The URI of the GitHub Enterprise host this connection is for.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(String hostUri) {
            return hostUri(Output.of(hostUri));
        }

        /**
         * @param installationUri (Output)
         * Output only. The URI to navigate to in order to manage the installation associated
         * with this GitHubEnterpriseConfig.
         * 
         * @return builder
         * 
         */
        public Builder installationUri(@Nullable Output<String> installationUri) {
            $.installationUri = installationUri;
            return this;
        }

        /**
         * @param installationUri (Output)
         * Output only. The URI to navigate to in order to manage the installation associated
         * with this GitHubEnterpriseConfig.
         * 
         * @return builder
         * 
         */
        public Builder installationUri(String installationUri) {
            return installationUri(Output.of(installationUri));
        }

        /**
         * @param privateKeySecretVersion Optional. SecretManager resource containing the private key of the GitHub App,
         * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder privateKeySecretVersion(@Nullable Output<String> privateKeySecretVersion) {
            $.privateKeySecretVersion = privateKeySecretVersion;
            return this;
        }

        /**
         * @param privateKeySecretVersion Optional. SecretManager resource containing the private key of the GitHub App,
         * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder privateKeySecretVersion(String privateKeySecretVersion) {
            return privateKeySecretVersion(Output.of(privateKeySecretVersion));
        }

        /**
         * @param serverVersion (Output)
         * Output only. GitHub Enterprise version installed at the host_uri.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(@Nullable Output<String> serverVersion) {
            $.serverVersion = serverVersion;
            return this;
        }

        /**
         * @param serverVersion (Output)
         * Output only. GitHub Enterprise version installed at the host_uri.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(String serverVersion) {
            return serverVersion(Output.of(serverVersion));
        }

        /**
         * @param serviceDirectoryConfig ServiceDirectoryConfig represents Service Directory configuration for a
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(@Nullable Output<ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs> serviceDirectoryConfig) {
            $.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }

        /**
         * @param serviceDirectoryConfig ServiceDirectoryConfig represents Service Directory configuration for a
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(ConnectionGithubEnterpriseConfigServiceDirectoryConfigArgs serviceDirectoryConfig) {
            return serviceDirectoryConfig(Output.of(serviceDirectoryConfig));
        }

        /**
         * @param sslCaCertificate Optional. SSL certificate to use for requests to GitHub Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificate(@Nullable Output<String> sslCaCertificate) {
            $.sslCaCertificate = sslCaCertificate;
            return this;
        }

        /**
         * @param sslCaCertificate Optional. SSL certificate to use for requests to GitHub Enterprise.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificate(String sslCaCertificate) {
            return sslCaCertificate(Output.of(sslCaCertificate));
        }

        /**
         * @param webhookSecretSecretVersion Optional. SecretManager resource containing the webhook secret of the GitHub App,
         * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(@Nullable Output<String> webhookSecretSecretVersion) {
            $.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }

        /**
         * @param webhookSecretSecretVersion Optional. SecretManager resource containing the webhook secret of the GitHub App,
         * formatted as `projects/*&#47;secrets/*&#47;versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            return webhookSecretSecretVersion(Output.of(webhookSecretSecretVersion));
        }

        public ConnectionGithubEnterpriseConfigArgs build() {
            if ($.hostUri == null) {
                throw new MissingRequiredPropertyException("ConnectionGithubEnterpriseConfigArgs", "hostUri");
            }
            return $;
        }
    }

}
