// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetDatasetAccessDataset;
import com.pulumi.gcp.bigquery.outputs.GetDatasetAccessRoutine;
import com.pulumi.gcp.bigquery.outputs.GetDatasetAccessView;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatasetAccess {
    private List<GetDatasetAccessDataset> datasets;
    private String domain;
    private String groupByEmail;
    private String iamMember;
    private String role;
    private List<GetDatasetAccessRoutine> routines;
    private String specialGroup;
    private String userByEmail;
    private List<GetDatasetAccessView> views;

    private GetDatasetAccess() {}
    public List<GetDatasetAccessDataset> datasets() {
        return this.datasets;
    }
    public String domain() {
        return this.domain;
    }
    public String groupByEmail() {
        return this.groupByEmail;
    }
    public String iamMember() {
        return this.iamMember;
    }
    public String role() {
        return this.role;
    }
    public List<GetDatasetAccessRoutine> routines() {
        return this.routines;
    }
    public String specialGroup() {
        return this.specialGroup;
    }
    public String userByEmail() {
        return this.userByEmail;
    }
    public List<GetDatasetAccessView> views() {
        return this.views;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatasetAccess defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetDatasetAccessDataset> datasets;
        private String domain;
        private String groupByEmail;
        private String iamMember;
        private String role;
        private List<GetDatasetAccessRoutine> routines;
        private String specialGroup;
        private String userByEmail;
        private List<GetDatasetAccessView> views;
        public Builder() {}
        public Builder(GetDatasetAccess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasets = defaults.datasets;
    	      this.domain = defaults.domain;
    	      this.groupByEmail = defaults.groupByEmail;
    	      this.iamMember = defaults.iamMember;
    	      this.role = defaults.role;
    	      this.routines = defaults.routines;
    	      this.specialGroup = defaults.specialGroup;
    	      this.userByEmail = defaults.userByEmail;
    	      this.views = defaults.views;
        }

        @CustomType.Setter
        public Builder datasets(List<GetDatasetAccessDataset> datasets) {
            if (datasets == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "datasets");
            }
            this.datasets = datasets;
            return this;
        }
        public Builder datasets(GetDatasetAccessDataset... datasets) {
            return datasets(List.of(datasets));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder groupByEmail(String groupByEmail) {
            if (groupByEmail == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "groupByEmail");
            }
            this.groupByEmail = groupByEmail;
            return this;
        }
        @CustomType.Setter
        public Builder iamMember(String iamMember) {
            if (iamMember == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "iamMember");
            }
            this.iamMember = iamMember;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder routines(List<GetDatasetAccessRoutine> routines) {
            if (routines == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "routines");
            }
            this.routines = routines;
            return this;
        }
        public Builder routines(GetDatasetAccessRoutine... routines) {
            return routines(List.of(routines));
        }
        @CustomType.Setter
        public Builder specialGroup(String specialGroup) {
            if (specialGroup == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "specialGroup");
            }
            this.specialGroup = specialGroup;
            return this;
        }
        @CustomType.Setter
        public Builder userByEmail(String userByEmail) {
            if (userByEmail == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "userByEmail");
            }
            this.userByEmail = userByEmail;
            return this;
        }
        @CustomType.Setter
        public Builder views(List<GetDatasetAccessView> views) {
            if (views == null) {
              throw new MissingRequiredPropertyException("GetDatasetAccess", "views");
            }
            this.views = views;
            return this;
        }
        public Builder views(GetDatasetAccessView... views) {
            return views(List.of(views));
        }
        public GetDatasetAccess build() {
            final var _resultValue = new GetDatasetAccess();
            _resultValue.datasets = datasets;
            _resultValue.domain = domain;
            _resultValue.groupByEmail = groupByEmail;
            _resultValue.iamMember = iamMember;
            _resultValue.role = role;
            _resultValue.routines = routines;
            _resultValue.specialGroup = specialGroup;
            _resultValue.userByEmail = userByEmail;
            _resultValue.views = views;
            return _resultValue;
        }
    }
}
