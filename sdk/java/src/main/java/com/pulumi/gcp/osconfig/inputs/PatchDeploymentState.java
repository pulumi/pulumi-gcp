// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentInstanceFilterArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentOneTimeScheduleArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentPatchConfigArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRecurringScheduleArgs;
import com.pulumi.gcp.osconfig.inputs.PatchDeploymentRolloutArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PatchDeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final PatchDeploymentState Empty = new PatchDeploymentState();

    /**
     * Time the patch deployment was created. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time the patch deployment was created. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Duration of the patch. After the duration ends, the patch times out.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return Duration of the patch. After the duration ends, the patch times out.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * VM instances to patch.
     * Structure is documented below.
     * 
     */
    @Import(name="instanceFilter")
    private @Nullable Output<PatchDeploymentInstanceFilterArgs> instanceFilter;

    /**
     * @return VM instances to patch.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentInstanceFilterArgs>> instanceFilter() {
        return Optional.ofNullable(this.instanceFilter);
    }

    /**
     * The time the last patch job ran successfully.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="lastExecuteTime")
    private @Nullable Output<String> lastExecuteTime;

    /**
     * @return The time the last patch job ran successfully.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> lastExecuteTime() {
        return Optional.ofNullable(this.lastExecuteTime);
    }

    /**
     * Unique name for the patch deployment resource in a project.
     * The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name for the patch deployment resource in a project.
     * The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Schedule a one-time execution.
     * Structure is documented below.
     * 
     */
    @Import(name="oneTimeSchedule")
    private @Nullable Output<PatchDeploymentOneTimeScheduleArgs> oneTimeSchedule;

    /**
     * @return Schedule a one-time execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentOneTimeScheduleArgs>> oneTimeSchedule() {
        return Optional.ofNullable(this.oneTimeSchedule);
    }

    /**
     * Patch configuration that is applied.
     * Structure is documented below.
     * 
     */
    @Import(name="patchConfig")
    private @Nullable Output<PatchDeploymentPatchConfigArgs> patchConfig;

    /**
     * @return Patch configuration that is applied.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentPatchConfigArgs>> patchConfig() {
        return Optional.ofNullable(this.patchConfig);
    }

    /**
     * A name for the patch deployment in the project. When creating a name the following rules apply:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     * 
     */
    @Import(name="patchDeploymentId")
    private @Nullable Output<String> patchDeploymentId;

    /**
     * @return A name for the patch deployment in the project. When creating a name the following rules apply:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the project.
     * 
     */
    public Optional<Output<String>> patchDeploymentId() {
        return Optional.ofNullable(this.patchDeploymentId);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Schedule recurring executions.
     * Structure is documented below.
     * 
     */
    @Import(name="recurringSchedule")
    private @Nullable Output<PatchDeploymentRecurringScheduleArgs> recurringSchedule;

    /**
     * @return Schedule recurring executions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentRecurringScheduleArgs>> recurringSchedule() {
        return Optional.ofNullable(this.recurringSchedule);
    }

    /**
     * Rollout strategy of the patch job.
     * Structure is documented below.
     * 
     */
    @Import(name="rollout")
    private @Nullable Output<PatchDeploymentRolloutArgs> rollout;

    /**
     * @return Rollout strategy of the patch job.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PatchDeploymentRolloutArgs>> rollout() {
        return Optional.ofNullable(this.rollout);
    }

    /**
     * Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private PatchDeploymentState() {}

    private PatchDeploymentState(PatchDeploymentState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.duration = $.duration;
        this.instanceFilter = $.instanceFilter;
        this.lastExecuteTime = $.lastExecuteTime;
        this.name = $.name;
        this.oneTimeSchedule = $.oneTimeSchedule;
        this.patchConfig = $.patchConfig;
        this.patchDeploymentId = $.patchDeploymentId;
        this.project = $.project;
        this.recurringSchedule = $.recurringSchedule;
        this.rollout = $.rollout;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PatchDeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PatchDeploymentState $;

        public Builder() {
            $ = new PatchDeploymentState();
        }

        public Builder(PatchDeploymentState defaults) {
            $ = new PatchDeploymentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Time the patch deployment was created. Timestamp is in RFC3339 text format.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time the patch deployment was created. Timestamp is in RFC3339 text format.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of the patch deployment. Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the patch deployment. Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param duration Duration of the patch. After the duration ends, the patch times out.
         * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration of the patch. After the duration ends, the patch times out.
         * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: &#34;3.5s&#34;
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param instanceFilter VM instances to patch.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(@Nullable Output<PatchDeploymentInstanceFilterArgs> instanceFilter) {
            $.instanceFilter = instanceFilter;
            return this;
        }

        /**
         * @param instanceFilter VM instances to patch.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder instanceFilter(PatchDeploymentInstanceFilterArgs instanceFilter) {
            return instanceFilter(Output.of(instanceFilter));
        }

        /**
         * @param lastExecuteTime The time the last patch job ran successfully.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder lastExecuteTime(@Nullable Output<String> lastExecuteTime) {
            $.lastExecuteTime = lastExecuteTime;
            return this;
        }

        /**
         * @param lastExecuteTime The time the last patch job ran successfully.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder lastExecuteTime(String lastExecuteTime) {
            return lastExecuteTime(Output.of(lastExecuteTime));
        }

        /**
         * @param name Unique name for the patch deployment resource in a project.
         * The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for the patch deployment resource in a project.
         * The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oneTimeSchedule Schedule a one-time execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oneTimeSchedule(@Nullable Output<PatchDeploymentOneTimeScheduleArgs> oneTimeSchedule) {
            $.oneTimeSchedule = oneTimeSchedule;
            return this;
        }

        /**
         * @param oneTimeSchedule Schedule a one-time execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oneTimeSchedule(PatchDeploymentOneTimeScheduleArgs oneTimeSchedule) {
            return oneTimeSchedule(Output.of(oneTimeSchedule));
        }

        /**
         * @param patchConfig Patch configuration that is applied.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder patchConfig(@Nullable Output<PatchDeploymentPatchConfigArgs> patchConfig) {
            $.patchConfig = patchConfig;
            return this;
        }

        /**
         * @param patchConfig Patch configuration that is applied.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder patchConfig(PatchDeploymentPatchConfigArgs patchConfig) {
            return patchConfig(Output.of(patchConfig));
        }

        /**
         * @param patchDeploymentId A name for the patch deployment in the project. When creating a name the following rules apply:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the project.
         * 
         * @return builder
         * 
         */
        public Builder patchDeploymentId(@Nullable Output<String> patchDeploymentId) {
            $.patchDeploymentId = patchDeploymentId;
            return this;
        }

        /**
         * @param patchDeploymentId A name for the patch deployment in the project. When creating a name the following rules apply:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the project.
         * 
         * @return builder
         * 
         */
        public Builder patchDeploymentId(String patchDeploymentId) {
            return patchDeploymentId(Output.of(patchDeploymentId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param recurringSchedule Schedule recurring executions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recurringSchedule(@Nullable Output<PatchDeploymentRecurringScheduleArgs> recurringSchedule) {
            $.recurringSchedule = recurringSchedule;
            return this;
        }

        /**
         * @param recurringSchedule Schedule recurring executions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recurringSchedule(PatchDeploymentRecurringScheduleArgs recurringSchedule) {
            return recurringSchedule(Output.of(recurringSchedule));
        }

        /**
         * @param rollout Rollout strategy of the patch job.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rollout(@Nullable Output<PatchDeploymentRolloutArgs> rollout) {
            $.rollout = rollout;
            return this;
        }

        /**
         * @param rollout Rollout strategy of the patch job.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rollout(PatchDeploymentRolloutArgs rollout) {
            return rollout(Output.of(rollout));
        }

        /**
         * @param updateTime Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, accurate to nanoseconds. Example: &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public PatchDeploymentState build() {
            return $;
        }
    }

}
