// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.storage.inputs.BucketIpFilterPublicNetworkSourceArgs;
import com.pulumi.gcp.storage.inputs.BucketIpFilterVpcNetworkSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketIpFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketIpFilterArgs Empty = new BucketIpFilterArgs();

    /**
     * The state of the IP filter configuration. Valid values are `Enabled` and `Disabled`. When set to `Enabled`, IP filtering rules are applied to a bucket and all incoming requests to the bucket are evaluated against these rules. When set to `Disabled`, IP filtering rules are not applied to a bucket.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The state of the IP filter configuration. Valid values are `Enabled` and `Disabled`. When set to `Enabled`, IP filtering rules are applied to a bucket and all incoming requests to the bucket are evaluated against these rules. When set to `Disabled`, IP filtering rules are not applied to a bucket.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The public network IP address ranges that can access the bucket and its data. Structure is documented below.
     * 
     */
    @Import(name="publicNetworkSource")
    private @Nullable Output<BucketIpFilterPublicNetworkSourceArgs> publicNetworkSource;

    /**
     * @return The public network IP address ranges that can access the bucket and its data. Structure is documented below.
     * 
     */
    public Optional<Output<BucketIpFilterPublicNetworkSourceArgs>> publicNetworkSource() {
        return Optional.ofNullable(this.publicNetworkSource);
    }

    /**
     * The list of VPC networks that can access the bucket. Structure is documented below.
     * 
     */
    @Import(name="vpcNetworkSources")
    private @Nullable Output<List<BucketIpFilterVpcNetworkSourceArgs>> vpcNetworkSources;

    /**
     * @return The list of VPC networks that can access the bucket. Structure is documented below.
     * 
     */
    public Optional<Output<List<BucketIpFilterVpcNetworkSourceArgs>>> vpcNetworkSources() {
        return Optional.ofNullable(this.vpcNetworkSources);
    }

    private BucketIpFilterArgs() {}

    private BucketIpFilterArgs(BucketIpFilterArgs $) {
        this.mode = $.mode;
        this.publicNetworkSource = $.publicNetworkSource;
        this.vpcNetworkSources = $.vpcNetworkSources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketIpFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketIpFilterArgs $;

        public Builder() {
            $ = new BucketIpFilterArgs();
        }

        public Builder(BucketIpFilterArgs defaults) {
            $ = new BucketIpFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode The state of the IP filter configuration. Valid values are `Enabled` and `Disabled`. When set to `Enabled`, IP filtering rules are applied to a bucket and all incoming requests to the bucket are evaluated against these rules. When set to `Disabled`, IP filtering rules are not applied to a bucket.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The state of the IP filter configuration. Valid values are `Enabled` and `Disabled`. When set to `Enabled`, IP filtering rules are applied to a bucket and all incoming requests to the bucket are evaluated against these rules. When set to `Disabled`, IP filtering rules are not applied to a bucket.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param publicNetworkSource The public network IP address ranges that can access the bucket and its data. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkSource(@Nullable Output<BucketIpFilterPublicNetworkSourceArgs> publicNetworkSource) {
            $.publicNetworkSource = publicNetworkSource;
            return this;
        }

        /**
         * @param publicNetworkSource The public network IP address ranges that can access the bucket and its data. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkSource(BucketIpFilterPublicNetworkSourceArgs publicNetworkSource) {
            return publicNetworkSource(Output.of(publicNetworkSource));
        }

        /**
         * @param vpcNetworkSources The list of VPC networks that can access the bucket. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcNetworkSources(@Nullable Output<List<BucketIpFilterVpcNetworkSourceArgs>> vpcNetworkSources) {
            $.vpcNetworkSources = vpcNetworkSources;
            return this;
        }

        /**
         * @param vpcNetworkSources The list of VPC networks that can access the bucket. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcNetworkSources(List<BucketIpFilterVpcNetworkSourceArgs> vpcNetworkSources) {
            return vpcNetworkSources(Output.of(vpcNetworkSources));
        }

        /**
         * @param vpcNetworkSources The list of VPC networks that can access the bucket. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcNetworkSources(BucketIpFilterVpcNetworkSourceArgs... vpcNetworkSources) {
            return vpcNetworkSources(List.of(vpcNetworkSources));
        }

        public BucketIpFilterArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("BucketIpFilterArgs", "mode");
            }
            return $;
        }
    }

}
