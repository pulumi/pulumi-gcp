// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsPlainArgs;
import com.pulumi.gcp.tpu.outputs.GetTensorflowVersionsResult;
import java.util.concurrent.CompletableFuture;

public final class TpuFunctions {
    /**
     * Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *     }
     * }
     * ```
     * ### Configure Basic TPU Node With Available Version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import com.pulumi.gcp.tpu.Node;
     * import com.pulumi.gcp.tpu.NodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *         var tpu = new Node(&#34;tpu&#34;, NodeArgs.builder()        
     *             .zone(&#34;us-central1-b&#34;)
     *             .acceleratorType(&#34;v3-8&#34;)
     *             .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -&gt; getTensorflowVersionsResult.versions()[0]))
     *             .cidrBlock(&#34;10.2.0.0/29&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTensorflowVersionsResult> getTensorflowVersions() {
        return getTensorflowVersions(GetTensorflowVersionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *     }
     * }
     * ```
     * ### Configure Basic TPU Node With Available Version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import com.pulumi.gcp.tpu.Node;
     * import com.pulumi.gcp.tpu.NodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *         var tpu = new Node(&#34;tpu&#34;, NodeArgs.builder()        
     *             .zone(&#34;us-central1-b&#34;)
     *             .acceleratorType(&#34;v3-8&#34;)
     *             .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -&gt; getTensorflowVersionsResult.versions()[0]))
     *             .cidrBlock(&#34;10.2.0.0/29&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTensorflowVersionsResult> getTensorflowVersionsPlain() {
        return getTensorflowVersionsPlain(GetTensorflowVersionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *     }
     * }
     * ```
     * ### Configure Basic TPU Node With Available Version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import com.pulumi.gcp.tpu.Node;
     * import com.pulumi.gcp.tpu.NodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *         var tpu = new Node(&#34;tpu&#34;, NodeArgs.builder()        
     *             .zone(&#34;us-central1-b&#34;)
     *             .acceleratorType(&#34;v3-8&#34;)
     *             .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -&gt; getTensorflowVersionsResult.versions()[0]))
     *             .cidrBlock(&#34;10.2.0.0/29&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTensorflowVersionsResult> getTensorflowVersions(GetTensorflowVersionsArgs args) {
        return getTensorflowVersions(args, InvokeOptions.Empty);
    }
    /**
     * Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *     }
     * }
     * ```
     * ### Configure Basic TPU Node With Available Version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import com.pulumi.gcp.tpu.Node;
     * import com.pulumi.gcp.tpu.NodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *         var tpu = new Node(&#34;tpu&#34;, NodeArgs.builder()        
     *             .zone(&#34;us-central1-b&#34;)
     *             .acceleratorType(&#34;v3-8&#34;)
     *             .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -&gt; getTensorflowVersionsResult.versions()[0]))
     *             .cidrBlock(&#34;10.2.0.0/29&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTensorflowVersionsResult> getTensorflowVersionsPlain(GetTensorflowVersionsPlainArgs args) {
        return getTensorflowVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *     }
     * }
     * ```
     * ### Configure Basic TPU Node With Available Version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import com.pulumi.gcp.tpu.Node;
     * import com.pulumi.gcp.tpu.NodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *         var tpu = new Node(&#34;tpu&#34;, NodeArgs.builder()        
     *             .zone(&#34;us-central1-b&#34;)
     *             .acceleratorType(&#34;v3-8&#34;)
     *             .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -&gt; getTensorflowVersionsResult.versions()[0]))
     *             .cidrBlock(&#34;10.2.0.0/29&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTensorflowVersionsResult> getTensorflowVersions(GetTensorflowVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:tpu/getTensorflowVersions:getTensorflowVersions", TypeShape.of(GetTensorflowVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *     }
     * }
     * ```
     * ### Configure Basic TPU Node With Available Version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
     * import com.pulumi.gcp.tpu.Node;
     * import com.pulumi.gcp.tpu.NodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getTensorflowVersions();
     * 
     *         var tpu = new Node(&#34;tpu&#34;, NodeArgs.builder()        
     *             .zone(&#34;us-central1-b&#34;)
     *             .acceleratorType(&#34;v3-8&#34;)
     *             .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -&gt; getTensorflowVersionsResult.versions()[0]))
     *             .cidrBlock(&#34;10.2.0.0/29&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTensorflowVersionsResult> getTensorflowVersionsPlain(GetTensorflowVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:tpu/getTensorflowVersions:getTensorflowVersions", TypeShape.of(GetTensorflowVersionsResult.class), args, Utilities.withVersion(options));
    }
}
