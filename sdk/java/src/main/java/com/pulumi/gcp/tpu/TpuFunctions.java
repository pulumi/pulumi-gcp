// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.tpu;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesPlainArgs;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsPlainArgs;
import com.pulumi.gcp.tpu.outputs.GetV2AcceleratorTypesResult;
import com.pulumi.gcp.tpu.outputs.GetV2RuntimeVersionsResult;
import java.util.concurrent.CompletableFuture;

public final class TpuFunctions {
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2AcceleratorTypesResult> getV2AcceleratorTypes() {
        return getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetV2AcceleratorTypesResult> getV2AcceleratorTypesPlain() {
        return getV2AcceleratorTypesPlain(GetV2AcceleratorTypesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2AcceleratorTypesResult> getV2AcceleratorTypes(GetV2AcceleratorTypesArgs args) {
        return getV2AcceleratorTypes(args, InvokeOptions.Empty);
    }
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetV2AcceleratorTypesResult> getV2AcceleratorTypesPlain(GetV2AcceleratorTypesPlainArgs args) {
        return getV2AcceleratorTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2AcceleratorTypesResult> getV2AcceleratorTypes(GetV2AcceleratorTypesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes", TypeShape.of(GetV2AcceleratorTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2AcceleratorTypesResult> getV2AcceleratorTypes(GetV2AcceleratorTypesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes", TypeShape.of(GetV2AcceleratorTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Type
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2AcceleratorTypes(GetV2AcceleratorTypesArgs.builder()
     *             .build());
     * 
     *         final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(availableGetV2RuntimeVersions.versions()[0])
     *             .acceleratorType(available.types()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetV2AcceleratorTypesResult> getV2AcceleratorTypesPlain(GetV2AcceleratorTypesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes", TypeShape.of(GetV2AcceleratorTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2RuntimeVersionsResult> getV2RuntimeVersions() {
        return getV2RuntimeVersions(GetV2RuntimeVersionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetV2RuntimeVersionsResult> getV2RuntimeVersionsPlain() {
        return getV2RuntimeVersionsPlain(GetV2RuntimeVersionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2RuntimeVersionsResult> getV2RuntimeVersions(GetV2RuntimeVersionsArgs args) {
        return getV2RuntimeVersions(args, InvokeOptions.Empty);
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetV2RuntimeVersionsResult> getV2RuntimeVersionsPlain(GetV2RuntimeVersionsPlainArgs args) {
        return getV2RuntimeVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2RuntimeVersionsResult> getV2RuntimeVersions(GetV2RuntimeVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:tpu/getV2RuntimeVersions:getV2RuntimeVersions", TypeShape.of(GetV2RuntimeVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetV2RuntimeVersionsResult> getV2RuntimeVersions(GetV2RuntimeVersionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:tpu/getV2RuntimeVersions:getV2RuntimeVersions", TypeShape.of(GetV2RuntimeVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Configure Basic TPU VM With Available Version
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.tpu.TpuFunctions;
     * import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
     * import com.pulumi.gcp.tpu.V2Vm;
     * import com.pulumi.gcp.tpu.V2VmArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = TpuFunctions.getV2RuntimeVersions(GetV2RuntimeVersionsArgs.builder()
     *             .build());
     * 
     *         var tpu = new V2Vm("tpu", V2VmArgs.builder()
     *             .name("test-tpu")
     *             .zone("us-central1-b")
     *             .runtimeVersion(available.versions()[0])
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetV2RuntimeVersionsResult> getV2RuntimeVersionsPlain(GetV2RuntimeVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:tpu/getV2RuntimeVersions:getV2RuntimeVersions", TypeShape.of(GetV2RuntimeVersionsResult.class), args, Utilities.withVersion(options));
    }
}
