// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
import com.pulumi.gcp.gkehub.inputs.FeatureMembershipState;
import com.pulumi.gcp.gkehub.outputs.FeatureMembershipConfigmanagement;
import com.pulumi.gcp.gkehub.outputs.FeatureMembershipMesh;
import com.pulumi.gcp.gkehub.outputs.FeatureMembershipPolicycontroller;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Contains information about a GKEHub Feature Memberships. Feature Memberships configure GKEHub Features that apply to specific memberships rather than the project as a whole. The google_gke_hub is the Fleet API.
 * 
 * ## Example Usage
 * 
 * ### Config Management
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.gkehub.Membership;
 * import com.pulumi.gcp.gkehub.MembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGkeClusterArgs;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import com.pulumi.gcp.gkehub.FeatureMembership;
 * import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementConfigSyncArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementConfigSyncGitArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()        
 *             .name("my-cluster")
 *             .location("us-central1-a")
 *             .initialNodeCount(1)
 *             .build());
 * 
 *         var membership = new Membership("membership", MembershipArgs.builder()        
 *             .membershipId("my-membership")
 *             .endpoint(MembershipEndpointArgs.builder()
 *                 .gkeCluster(MembershipEndpointGkeClusterArgs.builder()
 *                     .resourceLink(cluster.id().applyValue(id -> String.format("//container.googleapis.com/%s", id)))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("configmanagement")
 *             .location("global")
 *             .labels(Map.of("foo", "bar"))
 *             .build());
 * 
 *         var featureMember = new FeatureMembership("featureMember", FeatureMembershipArgs.builder()        
 *             .location("global")
 *             .feature(feature.name())
 *             .membership(membership.membershipId())
 *             .configmanagement(FeatureMembershipConfigmanagementArgs.builder()
 *                 .version("1.6.2")
 *                 .configSync(FeatureMembershipConfigmanagementConfigSyncArgs.builder()
 *                     .git(FeatureMembershipConfigmanagementConfigSyncGitArgs.builder()
 *                         .syncRepo("https://github.com/hashicorp/terraform")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Config Management With OCI
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.gkehub.Membership;
 * import com.pulumi.gcp.gkehub.MembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGkeClusterArgs;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import com.pulumi.gcp.gkehub.FeatureMembership;
 * import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementConfigSyncArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementConfigSyncOciArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()        
 *             .name("my-cluster")
 *             .location("us-central1-a")
 *             .initialNodeCount(1)
 *             .build());
 * 
 *         var membership = new Membership("membership", MembershipArgs.builder()        
 *             .membershipId("my-membership")
 *             .endpoint(MembershipEndpointArgs.builder()
 *                 .gkeCluster(MembershipEndpointGkeClusterArgs.builder()
 *                     .resourceLink(cluster.id().applyValue(id -> String.format("//container.googleapis.com/%s", id)))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("configmanagement")
 *             .location("global")
 *             .labels(Map.of("foo", "bar"))
 *             .build());
 * 
 *         var featureMember = new FeatureMembership("featureMember", FeatureMembershipArgs.builder()        
 *             .location("global")
 *             .feature(feature.name())
 *             .membership(membership.membershipId())
 *             .configmanagement(FeatureMembershipConfigmanagementArgs.builder()
 *                 .version("1.15.1")
 *                 .configSync(FeatureMembershipConfigmanagementConfigSyncArgs.builder()
 *                     .oci(FeatureMembershipConfigmanagementConfigSyncOciArgs.builder()
 *                         .syncRepo("us-central1-docker.pkg.dev/sample-project/config-repo/config-sync-gke:latest")
 *                         .policyDir("config-connector")
 *                         .syncWaitSecs("20")
 *                         .secretType("gcpserviceaccount")
 *                         .gcpServiceAccountEmail("sa{@literal @}project-id.iam.gserviceaccount.com")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Multi Cluster Service Discovery
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("multiclusterservicediscovery")
 *             .location("global")
 *             .labels(Map.of("foo", "bar"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Service Mesh
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.gkehub.Membership;
 * import com.pulumi.gcp.gkehub.MembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGkeClusterArgs;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import com.pulumi.gcp.gkehub.FeatureMembership;
 * import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipMeshArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()        
 *             .name("my-cluster")
 *             .location("us-central1-a")
 *             .initialNodeCount(1)
 *             .build());
 * 
 *         var membership = new Membership("membership", MembershipArgs.builder()        
 *             .membershipId("my-membership")
 *             .endpoint(MembershipEndpointArgs.builder()
 *                 .gkeCluster(MembershipEndpointGkeClusterArgs.builder()
 *                     .resourceLink(cluster.id().applyValue(id -> String.format("//container.googleapis.com/%s", id)))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("servicemesh")
 *             .location("global")
 *             .build());
 * 
 *         var featureMember = new FeatureMembership("featureMember", FeatureMembershipArgs.builder()        
 *             .location("global")
 *             .feature(feature.name())
 *             .membership(membership.membershipId())
 *             .mesh(FeatureMembershipMeshArgs.builder()
 *                 .management("MANAGEMENT_AUTOMATIC")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Config Management With Regional Membership
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.gkehub.Membership;
 * import com.pulumi.gcp.gkehub.MembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGkeClusterArgs;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import com.pulumi.gcp.gkehub.FeatureMembership;
 * import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementConfigSyncArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipConfigmanagementConfigSyncGitArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()        
 *             .name("my-cluster")
 *             .location("us-central1-a")
 *             .initialNodeCount(1)
 *             .build());
 * 
 *         var membership = new Membership("membership", MembershipArgs.builder()        
 *             .membershipId("my-membership")
 *             .location("us-central1")
 *             .endpoint(MembershipEndpointArgs.builder()
 *                 .gkeCluster(MembershipEndpointGkeClusterArgs.builder()
 *                     .resourceLink(cluster.id().applyValue(id -> String.format("//container.googleapis.com/%s", id)))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("configmanagement")
 *             .location("global")
 *             .labels(Map.of("foo", "bar"))
 *             .build());
 * 
 *         var featureMember = new FeatureMembership("featureMember", FeatureMembershipArgs.builder()        
 *             .location("global")
 *             .feature(feature.name())
 *             .membership(membership.membershipId())
 *             .membershipLocation(membership.location())
 *             .configmanagement(FeatureMembershipConfigmanagementArgs.builder()
 *                 .version("1.6.2")
 *                 .configSync(FeatureMembershipConfigmanagementConfigSyncArgs.builder()
 *                     .git(FeatureMembershipConfigmanagementConfigSyncGitArgs.builder()
 *                         .syncRepo("https://github.com/hashicorp/terraform")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Policy Controller With Minimal Configuration
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.gkehub.Membership;
 * import com.pulumi.gcp.gkehub.MembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGkeClusterArgs;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import com.pulumi.gcp.gkehub.FeatureMembership;
 * import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()        
 *             .name("my-cluster")
 *             .location("us-central1-a")
 *             .initialNodeCount(1)
 *             .build());
 * 
 *         var membership = new Membership("membership", MembershipArgs.builder()        
 *             .membershipId("my-membership")
 *             .endpoint(MembershipEndpointArgs.builder()
 *                 .gkeCluster(MembershipEndpointGkeClusterArgs.builder()
 *                     .resourceLink(cluster.id().applyValue(id -> String.format("//container.googleapis.com/%s", id)))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("policycontroller")
 *             .location("global")
 *             .build());
 * 
 *         var featureMember = new FeatureMembership("featureMember", FeatureMembershipArgs.builder()        
 *             .location("global")
 *             .feature(feature.name())
 *             .membership(membership.membershipId())
 *             .policycontroller(FeatureMembershipPolicycontrollerArgs.builder()
 *                 .policyControllerHubConfig(FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs.builder()
 *                     .installSpec("INSTALL_SPEC_ENABLED")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Policy Controller With Custom Configurations
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.Cluster;
 * import com.pulumi.gcp.container.ClusterArgs;
 * import com.pulumi.gcp.gkehub.Membership;
 * import com.pulumi.gcp.gkehub.MembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointArgs;
 * import com.pulumi.gcp.gkehub.inputs.MembershipEndpointGkeClusterArgs;
 * import com.pulumi.gcp.gkehub.Feature;
 * import com.pulumi.gcp.gkehub.FeatureArgs;
 * import com.pulumi.gcp.gkehub.FeatureMembership;
 * import com.pulumi.gcp.gkehub.FeatureMembershipArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs;
 * import com.pulumi.gcp.gkehub.inputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cluster = new Cluster("cluster", ClusterArgs.builder()        
 *             .name("my-cluster")
 *             .location("us-central1-a")
 *             .initialNodeCount(1)
 *             .build());
 * 
 *         var membership = new Membership("membership", MembershipArgs.builder()        
 *             .membershipId("my-membership")
 *             .endpoint(MembershipEndpointArgs.builder()
 *                 .gkeCluster(MembershipEndpointGkeClusterArgs.builder()
 *                     .resourceLink(cluster.id().applyValue(id -> String.format("//container.googleapis.com/%s", id)))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var feature = new Feature("feature", FeatureArgs.builder()        
 *             .name("policycontroller")
 *             .location("global")
 *             .build());
 * 
 *         var featureMember = new FeatureMembership("featureMember", FeatureMembershipArgs.builder()        
 *             .location("global")
 *             .feature(feature.name())
 *             .membership(membership.membershipId())
 *             .policycontroller(FeatureMembershipPolicycontrollerArgs.builder()
 *                 .policyControllerHubConfig(FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs.builder()
 *                     .installSpec("INSTALL_SPEC_SUSPENDED")
 *                     .policyContent(FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs.builder()
 *                         .templateLibrary(FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs.builder()
 *                             .installation("NOT_INSTALLED")
 *                             .build())
 *                         .build())
 *                     .constraintViolationLimit(50)
 *                     .auditIntervalSeconds(120)
 *                     .referentialRulesEnabled(true)
 *                     .logDeniesEnabled(true)
 *                     .mutationEnabled(true)
 *                     .build())
 *                 .version("1.17.0")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * FeatureMembership can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}`
 * 
 * * `{{project}}/{{location}}/{{feature}}/{{membership}}`
 * 
 * * `{{location}}/{{feature}}/{{membership}}`
 * 
 * When using the `pulumi import` command, FeatureMembership can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{project}}/{{location}}/{{feature}}/{{membership}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{location}}/{{feature}}/{{membership}}
 * ```
 * 
 */
@ResourceType(type="gcp:gkehub/featureMembership:FeatureMembership")
public class FeatureMembership extends com.pulumi.resources.CustomResource {
    /**
     * Config Management-specific spec. Structure is documented below.
     * 
     */
    @Export(name="configmanagement", refs={FeatureMembershipConfigmanagement.class}, tree="[0]")
    private Output</* @Nullable */ FeatureMembershipConfigmanagement> configmanagement;

    /**
     * @return Config Management-specific spec. Structure is documented below.
     * 
     */
    public Output<Optional<FeatureMembershipConfigmanagement>> configmanagement() {
        return Codegen.optional(this.configmanagement);
    }
    /**
     * The name of the feature
     * 
     */
    @Export(name="feature", refs={String.class}, tree="[0]")
    private Output<String> feature;

    /**
     * @return The name of the feature
     * 
     */
    public Output<String> feature() {
        return this.feature;
    }
    /**
     * The location of the feature
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the feature
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the membership
     * 
     */
    @Export(name="membership", refs={String.class}, tree="[0]")
    private Output<String> membership;

    /**
     * @return The name of the membership
     * 
     */
    public Output<String> membership() {
        return this.membership;
    }
    /**
     * The location of the membership, for example, &#34;us-central1&#34;. Default is &#34;global&#34;.
     * 
     */
    @Export(name="membershipLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> membershipLocation;

    /**
     * @return The location of the membership, for example, &#34;us-central1&#34;. Default is &#34;global&#34;.
     * 
     */
    public Output<Optional<String>> membershipLocation() {
        return Codegen.optional(this.membershipLocation);
    }
    /**
     * Service mesh specific spec. Structure is documented below.
     * 
     */
    @Export(name="mesh", refs={FeatureMembershipMesh.class}, tree="[0]")
    private Output</* @Nullable */ FeatureMembershipMesh> mesh;

    /**
     * @return Service mesh specific spec. Structure is documented below.
     * 
     */
    public Output<Optional<FeatureMembershipMesh>> mesh() {
        return Codegen.optional(this.mesh);
    }
    /**
     * Policy Controller-specific spec. Structure is documented below.
     * 
     */
    @Export(name="policycontroller", refs={FeatureMembershipPolicycontroller.class}, tree="[0]")
    private Output</* @Nullable */ FeatureMembershipPolicycontroller> policycontroller;

    /**
     * @return Policy Controller-specific spec. Structure is documented below.
     * 
     */
    public Output<Optional<FeatureMembershipPolicycontroller>> policycontroller() {
        return Codegen.optional(this.policycontroller);
    }
    /**
     * The project of the feature
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The project of the feature
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FeatureMembership(String name) {
        this(name, FeatureMembershipArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FeatureMembership(String name, FeatureMembershipArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FeatureMembership(String name, FeatureMembershipArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkehub/featureMembership:FeatureMembership", name, args == null ? FeatureMembershipArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FeatureMembership(String name, Output<String> id, @Nullable FeatureMembershipState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkehub/featureMembership:FeatureMembership", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FeatureMembership get(String name, Output<String> id, @Nullable FeatureMembershipState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FeatureMembership(name, id, state, options);
    }
}
