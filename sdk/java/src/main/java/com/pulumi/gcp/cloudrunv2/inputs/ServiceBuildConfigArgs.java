// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceBuildConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceBuildConfigArgs Empty = new ServiceBuildConfigArgs();

    /**
     * The base image used to build the function.
     * 
     */
    @Import(name="baseImage")
    private @Nullable Output<String> baseImage;

    /**
     * @return The base image used to build the function.
     * 
     */
    public Optional<Output<String>> baseImage() {
        return Optional.ofNullable(this.baseImage);
    }

    /**
     * Sets whether the function will receive automatic base image updates.
     * 
     */
    @Import(name="enableAutomaticUpdates")
    private @Nullable Output<Boolean> enableAutomaticUpdates;

    /**
     * @return Sets whether the function will receive automatic base image updates.
     * 
     */
    public Optional<Output<Boolean>> enableAutomaticUpdates() {
        return Optional.ofNullable(this.enableAutomaticUpdates);
    }

    /**
     * User-provided build-time environment variables for the function.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return User-provided build-time environment variables for the function.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
     * 
     */
    @Import(name="functionTarget")
    private @Nullable Output<String> functionTarget;

    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
     * 
     */
    public Optional<Output<String>> functionTarget() {
        return Optional.ofNullable(this.functionTarget);
    }

    /**
     * Artifact Registry URI to store the built image.
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    /**
     * @return Artifact Registry URI to store the built image.
     * 
     */
    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    /**
     * (Output)
     * The Cloud Build name of the latest successful deployment of the function.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Output)
     * The Cloud Build name of the latest successful deployment of the function.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Service account to be used for building the container. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Service account to be used for building the container. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * The Cloud Storage bucket URI where the function source code is located.
     * 
     */
    @Import(name="sourceLocation")
    private @Nullable Output<String> sourceLocation;

    /**
     * @return The Cloud Storage bucket URI where the function source code is located.
     * 
     */
    public Optional<Output<String>> sourceLocation() {
        return Optional.ofNullable(this.sourceLocation);
    }

    /**
     * Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
     * 
     */
    @Import(name="workerPool")
    private @Nullable Output<String> workerPool;

    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
     * 
     */
    public Optional<Output<String>> workerPool() {
        return Optional.ofNullable(this.workerPool);
    }

    private ServiceBuildConfigArgs() {}

    private ServiceBuildConfigArgs(ServiceBuildConfigArgs $) {
        this.baseImage = $.baseImage;
        this.enableAutomaticUpdates = $.enableAutomaticUpdates;
        this.environmentVariables = $.environmentVariables;
        this.functionTarget = $.functionTarget;
        this.imageUri = $.imageUri;
        this.name = $.name;
        this.serviceAccount = $.serviceAccount;
        this.sourceLocation = $.sourceLocation;
        this.workerPool = $.workerPool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceBuildConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceBuildConfigArgs $;

        public Builder() {
            $ = new ServiceBuildConfigArgs();
        }

        public Builder(ServiceBuildConfigArgs defaults) {
            $ = new ServiceBuildConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseImage The base image used to build the function.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(@Nullable Output<String> baseImage) {
            $.baseImage = baseImage;
            return this;
        }

        /**
         * @param baseImage The base image used to build the function.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(String baseImage) {
            return baseImage(Output.of(baseImage));
        }

        /**
         * @param enableAutomaticUpdates Sets whether the function will receive automatic base image updates.
         * 
         * @return builder
         * 
         */
        public Builder enableAutomaticUpdates(@Nullable Output<Boolean> enableAutomaticUpdates) {
            $.enableAutomaticUpdates = enableAutomaticUpdates;
            return this;
        }

        /**
         * @param enableAutomaticUpdates Sets whether the function will receive automatic base image updates.
         * 
         * @return builder
         * 
         */
        public Builder enableAutomaticUpdates(Boolean enableAutomaticUpdates) {
            return enableAutomaticUpdates(Output.of(enableAutomaticUpdates));
        }

        /**
         * @param environmentVariables User-provided build-time environment variables for the function.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables User-provided build-time environment variables for the function.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param functionTarget The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
         * 
         * @return builder
         * 
         */
        public Builder functionTarget(@Nullable Output<String> functionTarget) {
            $.functionTarget = functionTarget;
            return this;
        }

        /**
         * @param functionTarget The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;.
         * 
         * @return builder
         * 
         */
        public Builder functionTarget(String functionTarget) {
            return functionTarget(Output.of(functionTarget));
        }

        /**
         * @param imageUri Artifact Registry URI to store the built image.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        /**
         * @param imageUri Artifact Registry URI to store the built image.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        /**
         * @param name (Output)
         * The Cloud Build name of the latest successful deployment of the function.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Output)
         * The Cloud Build name of the latest successful deployment of the function.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceAccount Service account to be used for building the container. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account to be used for building the container. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param sourceLocation The Cloud Storage bucket URI where the function source code is located.
         * 
         * @return builder
         * 
         */
        public Builder sourceLocation(@Nullable Output<String> sourceLocation) {
            $.sourceLocation = sourceLocation;
            return this;
        }

        /**
         * @param sourceLocation The Cloud Storage bucket URI where the function source code is located.
         * 
         * @return builder
         * 
         */
        public Builder sourceLocation(String sourceLocation) {
            return sourceLocation(Output.of(sourceLocation));
        }

        /**
         * @param workerPool Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
         * 
         * @return builder
         * 
         */
        public Builder workerPool(@Nullable Output<String> workerPool) {
            $.workerPool = workerPool;
            return this;
        }

        /**
         * @param workerPool Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool.
         * 
         * @return builder
         * 
         */
        public Builder workerPool(String workerPool) {
            return workerPool(Output.of(workerPool));
        }

        public ServiceBuildConfigArgs build() {
            return $;
        }
    }

}
