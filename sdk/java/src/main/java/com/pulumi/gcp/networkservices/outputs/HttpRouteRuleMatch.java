// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleMatchHeader;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRuleMatchQueryParameter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HttpRouteRuleMatch {
    /**
     * @return The HTTP request path value should exactly match this value.
     * 
     */
    private @Nullable String fullPathMatch;
    /**
     * @return Specifies a list of HTTP request headers to match against.
     * Structure is documented below.
     * 
     */
    private @Nullable List<HttpRouteRuleMatchHeader> headers;
    /**
     * @return Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
     * 
     */
    private @Nullable Boolean ignoreCase;
    /**
     * @return The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
     * 
     */
    private @Nullable String prefixMatch;
    /**
     * @return Specifies a list of query parameters to match against.
     * Structure is documented below.
     * 
     */
    private @Nullable List<HttpRouteRuleMatchQueryParameter> queryParameters;
    /**
     * @return The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
     * 
     */
    private @Nullable String regexMatch;

    private HttpRouteRuleMatch() {}
    /**
     * @return The HTTP request path value should exactly match this value.
     * 
     */
    public Optional<String> fullPathMatch() {
        return Optional.ofNullable(this.fullPathMatch);
    }
    /**
     * @return Specifies a list of HTTP request headers to match against.
     * Structure is documented below.
     * 
     */
    public List<HttpRouteRuleMatchHeader> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return Specifies if prefixMatch and fullPathMatch matches are case sensitive. The default value is false.
     * 
     */
    public Optional<Boolean> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    /**
     * @return The HTTP request path value must begin with specified prefixMatch. prefixMatch must begin with a /.
     * 
     */
    public Optional<String> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }
    /**
     * @return Specifies a list of query parameters to match against.
     * Structure is documented below.
     * 
     */
    public List<HttpRouteRuleMatchQueryParameter> queryParameters() {
        return this.queryParameters == null ? List.of() : this.queryParameters;
    }
    /**
     * @return The HTTP request path value must satisfy the regular expression specified by regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax
     * 
     */
    public Optional<String> regexMatch() {
        return Optional.ofNullable(this.regexMatch);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRuleMatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String fullPathMatch;
        private @Nullable List<HttpRouteRuleMatchHeader> headers;
        private @Nullable Boolean ignoreCase;
        private @Nullable String prefixMatch;
        private @Nullable List<HttpRouteRuleMatchQueryParameter> queryParameters;
        private @Nullable String regexMatch;
        public Builder() {}
        public Builder(HttpRouteRuleMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fullPathMatch = defaults.fullPathMatch;
    	      this.headers = defaults.headers;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.queryParameters = defaults.queryParameters;
    	      this.regexMatch = defaults.regexMatch;
        }

        @CustomType.Setter
        public Builder fullPathMatch(@Nullable String fullPathMatch) {
            this.fullPathMatch = fullPathMatch;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable List<HttpRouteRuleMatchHeader> headers) {
            this.headers = headers;
            return this;
        }
        public Builder headers(HttpRouteRuleMatchHeader... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }
        @CustomType.Setter
        public Builder prefixMatch(@Nullable String prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }
        @CustomType.Setter
        public Builder queryParameters(@Nullable List<HttpRouteRuleMatchQueryParameter> queryParameters) {
            this.queryParameters = queryParameters;
            return this;
        }
        public Builder queryParameters(HttpRouteRuleMatchQueryParameter... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }
        @CustomType.Setter
        public Builder regexMatch(@Nullable String regexMatch) {
            this.regexMatch = regexMatch;
            return this;
        }
        public HttpRouteRuleMatch build() {
            final var o = new HttpRouteRuleMatch();
            o.fullPathMatch = fullPathMatch;
            o.headers = headers;
            o.ignoreCase = ignoreCase;
            o.prefixMatch = prefixMatch;
            o.queryParameters = queryParameters;
            o.regexMatch = regexMatch;
            return o;
        }
    }
}
