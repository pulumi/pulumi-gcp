// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppleAppState extends com.pulumi.resources.ResourceArgs {

    public static final AppleAppState Empty = new AppleAppState();

    /**
     * The globally unique, Firebase-assigned identifier of the App.
     * This identifier should be treated as an opaque token, as the data format is not specified.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return The globally unique, Firebase-assigned identifier of the App.
     * This identifier should be treated as an opaque token, as the data format is not specified.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
     * 
     */
    @Import(name="appStoreId")
    private @Nullable Output<String> appStoreId;

    /**
     * @return The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
     * 
     */
    public Optional<Output<String>> appStoreId() {
        return Optional.ofNullable(this.appStoreId);
    }

    /**
     * The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
     * 
     */
    @Import(name="bundleId")
    private @Nullable Output<String> bundleId;

    /**
     * @return The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
     * 
     */
    public Optional<Output<String>> bundleId() {
        return Optional.ofNullable(this.bundleId);
    }

    /**
     * (Optional) Set to &#39;ABANDON&#39; to allow the AppleApp to be untracked from terraform state rather than deleted upon
     * &#39;terraform destroy&#39;. This is useful because the AppleApp may be serving traffic. Set to &#39;DELETE&#39; to delete the AppleApp.
     * Default to &#39;DELETE&#39;.
     * 
     */
    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    /**
     * @return (Optional) Set to &#39;ABANDON&#39; to allow the AppleApp to be untracked from terraform state rather than deleted upon
     * &#39;terraform destroy&#39;. This is useful because the AppleApp may be serving traffic. Set to &#39;DELETE&#39; to delete the AppleApp.
     * Default to &#39;DELETE&#39;.
     * 
     */
    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * The user-assigned display name of the App.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The user-assigned display name of the App.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The fully qualified resource name of the App, for example:
     * projects/projectId/iosApps/appId
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The fully qualified resource name of the App, for example:
     * projects/projectId/iosApps/appId
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Apple Developer Team ID associated with the App in the App Store.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The Apple Developer Team ID associated with the App in the App Store.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    private AppleAppState() {}

    private AppleAppState(AppleAppState $) {
        this.appId = $.appId;
        this.appStoreId = $.appStoreId;
        this.bundleId = $.bundleId;
        this.deletionPolicy = $.deletionPolicy;
        this.displayName = $.displayName;
        this.name = $.name;
        this.project = $.project;
        this.teamId = $.teamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppleAppState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppleAppState $;

        public Builder() {
            $ = new AppleAppState();
        }

        public Builder(AppleAppState defaults) {
            $ = new AppleAppState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The globally unique, Firebase-assigned identifier of the App.
         * This identifier should be treated as an opaque token, as the data format is not specified.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The globally unique, Firebase-assigned identifier of the App.
         * This identifier should be treated as an opaque token, as the data format is not specified.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param appStoreId The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
         * 
         * @return builder
         * 
         */
        public Builder appStoreId(@Nullable Output<String> appStoreId) {
            $.appStoreId = appStoreId;
            return this;
        }

        /**
         * @param appStoreId The automatically generated Apple ID assigned to the Apple app by Apple in the Apple App Store.
         * 
         * @return builder
         * 
         */
        public Builder appStoreId(String appStoreId) {
            return appStoreId(Output.of(appStoreId));
        }

        /**
         * @param bundleId The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(@Nullable Output<String> bundleId) {
            $.bundleId = bundleId;
            return this;
        }

        /**
         * @param bundleId The canonical bundle ID of the Apple app as it would appear in the Apple AppStore.
         * 
         * @return builder
         * 
         */
        public Builder bundleId(String bundleId) {
            return bundleId(Output.of(bundleId));
        }

        /**
         * @param deletionPolicy (Optional) Set to &#39;ABANDON&#39; to allow the AppleApp to be untracked from terraform state rather than deleted upon
         * &#39;terraform destroy&#39;. This is useful because the AppleApp may be serving traffic. Set to &#39;DELETE&#39; to delete the AppleApp.
         * Default to &#39;DELETE&#39;.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        /**
         * @param deletionPolicy (Optional) Set to &#39;ABANDON&#39; to allow the AppleApp to be untracked from terraform state rather than deleted upon
         * &#39;terraform destroy&#39;. This is useful because the AppleApp may be serving traffic. Set to &#39;DELETE&#39; to delete the AppleApp.
         * Default to &#39;DELETE&#39;.
         * 
         * @return builder
         * 
         */
        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param displayName The user-assigned display name of the App.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-assigned display name of the App.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name The fully qualified resource name of the App, for example:
         * projects/projectId/iosApps/appId
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The fully qualified resource name of the App, for example:
         * projects/projectId/iosApps/appId
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param teamId The Apple Developer Team ID associated with the App in the App Store.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The Apple Developer Team ID associated with the App in the App Store.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public AppleAppState build() {
            return $;
        }
    }

}
