// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gkehub.inputs.FeatureSpecClusterupgradeGkeUpgradeOverrideArgs;
import com.pulumi.gcp.gkehub.inputs.FeatureSpecClusterupgradePostConditionsArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureSpecClusterupgradeArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureSpecClusterupgradeArgs Empty = new FeatureSpecClusterupgradeArgs();

    /**
     * Configuration overrides for individual upgrades.
     * Structure is documented below.
     * 
     */
    @Import(name="gkeUpgradeOverrides")
    private @Nullable Output<List<FeatureSpecClusterupgradeGkeUpgradeOverrideArgs>> gkeUpgradeOverrides;

    /**
     * @return Configuration overrides for individual upgrades.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<FeatureSpecClusterupgradeGkeUpgradeOverrideArgs>>> gkeUpgradeOverrides() {
        return Optional.ofNullable(this.gkeUpgradeOverrides);
    }

    /**
     * Post conditions to override for the specified upgrade.
     * Structure is documented below.
     * 
     */
    @Import(name="postConditions")
    private @Nullable Output<FeatureSpecClusterupgradePostConditionsArgs> postConditions;

    /**
     * @return Post conditions to override for the specified upgrade.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FeatureSpecClusterupgradePostConditionsArgs>> postConditions() {
        return Optional.ofNullable(this.postConditions);
    }

    /**
     * Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
     * 
     */
    @Import(name="upstreamFleets", required=true)
    private Output<List<String>> upstreamFleets;

    /**
     * @return Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
     * 
     */
    public Output<List<String>> upstreamFleets() {
        return this.upstreamFleets;
    }

    private FeatureSpecClusterupgradeArgs() {}

    private FeatureSpecClusterupgradeArgs(FeatureSpecClusterupgradeArgs $) {
        this.gkeUpgradeOverrides = $.gkeUpgradeOverrides;
        this.postConditions = $.postConditions;
        this.upstreamFleets = $.upstreamFleets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureSpecClusterupgradeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureSpecClusterupgradeArgs $;

        public Builder() {
            $ = new FeatureSpecClusterupgradeArgs();
        }

        public Builder(FeatureSpecClusterupgradeArgs defaults) {
            $ = new FeatureSpecClusterupgradeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gkeUpgradeOverrides Configuration overrides for individual upgrades.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gkeUpgradeOverrides(@Nullable Output<List<FeatureSpecClusterupgradeGkeUpgradeOverrideArgs>> gkeUpgradeOverrides) {
            $.gkeUpgradeOverrides = gkeUpgradeOverrides;
            return this;
        }

        /**
         * @param gkeUpgradeOverrides Configuration overrides for individual upgrades.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gkeUpgradeOverrides(List<FeatureSpecClusterupgradeGkeUpgradeOverrideArgs> gkeUpgradeOverrides) {
            return gkeUpgradeOverrides(Output.of(gkeUpgradeOverrides));
        }

        /**
         * @param gkeUpgradeOverrides Configuration overrides for individual upgrades.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gkeUpgradeOverrides(FeatureSpecClusterupgradeGkeUpgradeOverrideArgs... gkeUpgradeOverrides) {
            return gkeUpgradeOverrides(List.of(gkeUpgradeOverrides));
        }

        /**
         * @param postConditions Post conditions to override for the specified upgrade.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postConditions(@Nullable Output<FeatureSpecClusterupgradePostConditionsArgs> postConditions) {
            $.postConditions = postConditions;
            return this;
        }

        /**
         * @param postConditions Post conditions to override for the specified upgrade.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postConditions(FeatureSpecClusterupgradePostConditionsArgs postConditions) {
            return postConditions(Output.of(postConditions));
        }

        /**
         * @param upstreamFleets Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
         * 
         * @return builder
         * 
         */
        public Builder upstreamFleets(Output<List<String>> upstreamFleets) {
            $.upstreamFleets = upstreamFleets;
            return this;
        }

        /**
         * @param upstreamFleets Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
         * 
         * @return builder
         * 
         */
        public Builder upstreamFleets(List<String> upstreamFleets) {
            return upstreamFleets(Output.of(upstreamFleets));
        }

        /**
         * @param upstreamFleets Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
         * 
         * @return builder
         * 
         */
        public Builder upstreamFleets(String... upstreamFleets) {
            return upstreamFleets(List.of(upstreamFleets));
        }

        public FeatureSpecClusterupgradeArgs build() {
            if ($.upstreamFleets == null) {
                throw new MissingRequiredPropertyException("FeatureSpecClusterupgradeArgs", "upstreamFleets");
            }
            return $;
        }
    }

}
