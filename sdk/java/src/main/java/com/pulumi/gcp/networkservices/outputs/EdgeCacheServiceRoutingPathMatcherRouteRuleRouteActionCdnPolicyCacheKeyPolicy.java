// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy {
    /**
     * @return If true, requests to different hosts will be cached separately.
     * Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
     * 
     */
    private final @Nullable Boolean excludeHost;
    /**
     * @return If true, exclude query string parameters from the cache key
     * If false (the default), include the query string parameters in
     * the cache key according to includeQueryParameters and
     * excludeQueryParameters. If neither includeQueryParameters nor
     * excludeQueryParameters is set, the entire query string will be
     * included.
     * 
     */
    private final @Nullable Boolean excludeQueryString;
    /**
     * @return Names of query string parameters to exclude from cache keys. All other parameters will be included.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    private final @Nullable List<String> excludedQueryParameters;
    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    private final @Nullable Boolean includeProtocol;
    /**
     * @return Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
     * Cookie names:
     * - must be valid RFC 6265 &#34;cookie-name&#34; tokens
     * - are case sensitive
     * - cannot start with &#34;Edge-Cache-&#34; (case insensitive)
     *   Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
     *   You may specify up to three cookie names.
     * 
     */
    private final @Nullable List<String> includedCookieNames;
    /**
     * @return Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
     * - Header names must be valid HTTP RFC 7230 header field values.
     * - Header field names are case insensitive
     * - To include the HTTP method, use &#34;:method&#34;
     *   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
     * 
     */
    private final @Nullable List<String> includedHeaderNames;
    /**
     * @return Names of query string parameters to include in cache keys. All other parameters will be excluded.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    private final @Nullable List<String> includedQueryParameters;

    @CustomType.Constructor
    private EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy(
        @CustomType.Parameter("excludeHost") @Nullable Boolean excludeHost,
        @CustomType.Parameter("excludeQueryString") @Nullable Boolean excludeQueryString,
        @CustomType.Parameter("excludedQueryParameters") @Nullable List<String> excludedQueryParameters,
        @CustomType.Parameter("includeProtocol") @Nullable Boolean includeProtocol,
        @CustomType.Parameter("includedCookieNames") @Nullable List<String> includedCookieNames,
        @CustomType.Parameter("includedHeaderNames") @Nullable List<String> includedHeaderNames,
        @CustomType.Parameter("includedQueryParameters") @Nullable List<String> includedQueryParameters) {
        this.excludeHost = excludeHost;
        this.excludeQueryString = excludeQueryString;
        this.excludedQueryParameters = excludedQueryParameters;
        this.includeProtocol = includeProtocol;
        this.includedCookieNames = includedCookieNames;
        this.includedHeaderNames = includedHeaderNames;
        this.includedQueryParameters = includedQueryParameters;
    }

    /**
     * @return If true, requests to different hosts will be cached separately.
     * Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
     * 
     */
    public Optional<Boolean> excludeHost() {
        return Optional.ofNullable(this.excludeHost);
    }
    /**
     * @return If true, exclude query string parameters from the cache key
     * If false (the default), include the query string parameters in
     * the cache key according to includeQueryParameters and
     * excludeQueryParameters. If neither includeQueryParameters nor
     * excludeQueryParameters is set, the entire query string will be
     * included.
     * 
     */
    public Optional<Boolean> excludeQueryString() {
        return Optional.ofNullable(this.excludeQueryString);
    }
    /**
     * @return Names of query string parameters to exclude from cache keys. All other parameters will be included.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    public List<String> excludedQueryParameters() {
        return this.excludedQueryParameters == null ? List.of() : this.excludedQueryParameters;
    }
    /**
     * @return If true, http and https requests will be cached separately.
     * 
     */
    public Optional<Boolean> includeProtocol() {
        return Optional.ofNullable(this.includeProtocol);
    }
    /**
     * @return Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
     * Cookie names:
     * - must be valid RFC 6265 &#34;cookie-name&#34; tokens
     * - are case sensitive
     * - cannot start with &#34;Edge-Cache-&#34; (case insensitive)
     *   Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
     *   You may specify up to three cookie names.
     * 
     */
    public List<String> includedCookieNames() {
        return this.includedCookieNames == null ? List.of() : this.includedCookieNames;
    }
    /**
     * @return Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
     * - Header names must be valid HTTP RFC 7230 header field values.
     * - Header field names are case insensitive
     * - To include the HTTP method, use &#34;:method&#34;
     *   Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
     * 
     */
    public List<String> includedHeaderNames() {
        return this.includedHeaderNames == null ? List.of() : this.includedHeaderNames;
    }
    /**
     * @return Names of query string parameters to include in cache keys. All other parameters will be excluded.
     * Either specify includedQueryParameters or excludedQueryParameters, not both. &#39;&amp;&#39; and &#39;=&#39; will be percent encoded and not treated as delimiters.
     * 
     */
    public List<String> includedQueryParameters() {
        return this.includedQueryParameters == null ? List.of() : this.includedQueryParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean excludeHost;
        private @Nullable Boolean excludeQueryString;
        private @Nullable List<String> excludedQueryParameters;
        private @Nullable Boolean includeProtocol;
        private @Nullable List<String> includedCookieNames;
        private @Nullable List<String> includedHeaderNames;
        private @Nullable List<String> includedQueryParameters;

        public Builder() {
    	      // Empty
        }

        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeHost = defaults.excludeHost;
    	      this.excludeQueryString = defaults.excludeQueryString;
    	      this.excludedQueryParameters = defaults.excludedQueryParameters;
    	      this.includeProtocol = defaults.includeProtocol;
    	      this.includedCookieNames = defaults.includedCookieNames;
    	      this.includedHeaderNames = defaults.includedHeaderNames;
    	      this.includedQueryParameters = defaults.includedQueryParameters;
        }

        public Builder excludeHost(@Nullable Boolean excludeHost) {
            this.excludeHost = excludeHost;
            return this;
        }
        public Builder excludeQueryString(@Nullable Boolean excludeQueryString) {
            this.excludeQueryString = excludeQueryString;
            return this;
        }
        public Builder excludedQueryParameters(@Nullable List<String> excludedQueryParameters) {
            this.excludedQueryParameters = excludedQueryParameters;
            return this;
        }
        public Builder excludedQueryParameters(String... excludedQueryParameters) {
            return excludedQueryParameters(List.of(excludedQueryParameters));
        }
        public Builder includeProtocol(@Nullable Boolean includeProtocol) {
            this.includeProtocol = includeProtocol;
            return this;
        }
        public Builder includedCookieNames(@Nullable List<String> includedCookieNames) {
            this.includedCookieNames = includedCookieNames;
            return this;
        }
        public Builder includedCookieNames(String... includedCookieNames) {
            return includedCookieNames(List.of(includedCookieNames));
        }
        public Builder includedHeaderNames(@Nullable List<String> includedHeaderNames) {
            this.includedHeaderNames = includedHeaderNames;
            return this;
        }
        public Builder includedHeaderNames(String... includedHeaderNames) {
            return includedHeaderNames(List.of(includedHeaderNames));
        }
        public Builder includedQueryParameters(@Nullable List<String> includedQueryParameters) {
            this.includedQueryParameters = includedQueryParameters;
            return this;
        }
        public Builder includedQueryParameters(String... includedQueryParameters) {
            return includedQueryParameters(List.of(includedQueryParameters));
        }        public EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy build() {
            return new EdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicy(excludeHost, excludeQueryString, excludedQueryParameters, includeProtocol, includedCookieNames, includedHeaderNames, includedQueryParameters);
        }
    }
}
