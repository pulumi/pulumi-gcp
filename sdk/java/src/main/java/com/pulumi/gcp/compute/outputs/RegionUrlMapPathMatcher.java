// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherDefaultRouteAction;
import com.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherDefaultUrlRedirect;
import com.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherHeaderAction;
import com.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherPathRule;
import com.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcherRouteRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionUrlMapPathMatcher {
    /**
     * @return defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
     * advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
     * to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
     * Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionUrlMapPathMatcherDefaultRouteAction defaultRouteAction;
    /**
     * @return A reference to a RegionBackendService resource. This will be used if
     * none of the pathRules defined by this PathMatcher is matched by
     * the URL&#39;s path portion.
     * 
     */
    private @Nullable String defaultService;
    /**
     * @return When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionUrlMapPathMatcherDefaultUrlRedirect defaultUrlRedirect;
    /**
     * @return An optional description of this resource.
     * 
     */
    private @Nullable String description;
    /**
     * @return Specifies changes to request and response headers that need to take effect for the selected backendService.
     * headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
     * headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL.
     * Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    private @Nullable RegionUrlMapPathMatcherHeaderAction headerAction;
    /**
     * @return The name to which this PathMatcher is referred by the HostRule.
     * 
     */
    private String name;
    /**
     * @return The list of path rules. Use this list instead of routeRules when routing based
     * on simple path matching is all that&#39;s required. The order by which path rules
     * are specified does not matter. Matches are always done on the longest-path-first
     * basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
     * irrespective of the order in which those paths appear in this list. Within a
     * given pathMatcher, only one of pathRules or routeRules must be set.
     * Structure is documented below.
     * 
     */
    private @Nullable List<RegionUrlMapPathMatcherPathRule> pathRules;
    /**
     * @return The list of ordered HTTP route rules. Use this list instead of pathRules when
     * advanced route matching and routing actions are desired. The order of specifying
     * routeRules matters: the first rule that matches will cause its specified routing
     * action to take effect. Within a given pathMatcher, only one of pathRules or
     * routeRules must be set. routeRules are not supported in UrlMaps intended for
     * External load balancers.
     * Structure is documented below.
     * 
     */
    private @Nullable List<RegionUrlMapPathMatcherRouteRule> routeRules;

    private RegionUrlMapPathMatcher() {}
    /**
     * @return defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
     * advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
     * to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
     * Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * Structure is documented below.
     * 
     */
    public Optional<RegionUrlMapPathMatcherDefaultRouteAction> defaultRouteAction() {
        return Optional.ofNullable(this.defaultRouteAction);
    }
    /**
     * @return A reference to a RegionBackendService resource. This will be used if
     * none of the pathRules defined by this PathMatcher is matched by
     * the URL&#39;s path portion.
     * 
     */
    public Optional<String> defaultService() {
        return Optional.ofNullable(this.defaultService);
    }
    /**
     * @return When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    public Optional<RegionUrlMapPathMatcherDefaultUrlRedirect> defaultUrlRedirect() {
        return Optional.ofNullable(this.defaultUrlRedirect);
    }
    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Specifies changes to request and response headers that need to take effect for the selected backendService.
     * headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
     * headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL.
     * Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    public Optional<RegionUrlMapPathMatcherHeaderAction> headerAction() {
        return Optional.ofNullable(this.headerAction);
    }
    /**
     * @return The name to which this PathMatcher is referred by the HostRule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of path rules. Use this list instead of routeRules when routing based
     * on simple path matching is all that&#39;s required. The order by which path rules
     * are specified does not matter. Matches are always done on the longest-path-first
     * basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
     * irrespective of the order in which those paths appear in this list. Within a
     * given pathMatcher, only one of pathRules or routeRules must be set.
     * Structure is documented below.
     * 
     */
    public List<RegionUrlMapPathMatcherPathRule> pathRules() {
        return this.pathRules == null ? List.of() : this.pathRules;
    }
    /**
     * @return The list of ordered HTTP route rules. Use this list instead of pathRules when
     * advanced route matching and routing actions are desired. The order of specifying
     * routeRules matters: the first rule that matches will cause its specified routing
     * action to take effect. Within a given pathMatcher, only one of pathRules or
     * routeRules must be set. routeRules are not supported in UrlMaps intended for
     * External load balancers.
     * Structure is documented below.
     * 
     */
    public List<RegionUrlMapPathMatcherRouteRule> routeRules() {
        return this.routeRules == null ? List.of() : this.routeRules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionUrlMapPathMatcher defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RegionUrlMapPathMatcherDefaultRouteAction defaultRouteAction;
        private @Nullable String defaultService;
        private @Nullable RegionUrlMapPathMatcherDefaultUrlRedirect defaultUrlRedirect;
        private @Nullable String description;
        private @Nullable RegionUrlMapPathMatcherHeaderAction headerAction;
        private String name;
        private @Nullable List<RegionUrlMapPathMatcherPathRule> pathRules;
        private @Nullable List<RegionUrlMapPathMatcherRouteRule> routeRules;
        public Builder() {}
        public Builder(RegionUrlMapPathMatcher defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultRouteAction = defaults.defaultRouteAction;
    	      this.defaultService = defaults.defaultService;
    	      this.defaultUrlRedirect = defaults.defaultUrlRedirect;
    	      this.description = defaults.description;
    	      this.headerAction = defaults.headerAction;
    	      this.name = defaults.name;
    	      this.pathRules = defaults.pathRules;
    	      this.routeRules = defaults.routeRules;
        }

        @CustomType.Setter
        public Builder defaultRouteAction(@Nullable RegionUrlMapPathMatcherDefaultRouteAction defaultRouteAction) {

            this.defaultRouteAction = defaultRouteAction;
            return this;
        }
        @CustomType.Setter
        public Builder defaultService(@Nullable String defaultService) {

            this.defaultService = defaultService;
            return this;
        }
        @CustomType.Setter
        public Builder defaultUrlRedirect(@Nullable RegionUrlMapPathMatcherDefaultUrlRedirect defaultUrlRedirect) {

            this.defaultUrlRedirect = defaultUrlRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder headerAction(@Nullable RegionUrlMapPathMatcherHeaderAction headerAction) {

            this.headerAction = headerAction;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RegionUrlMapPathMatcher", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pathRules(@Nullable List<RegionUrlMapPathMatcherPathRule> pathRules) {

            this.pathRules = pathRules;
            return this;
        }
        public Builder pathRules(RegionUrlMapPathMatcherPathRule... pathRules) {
            return pathRules(List.of(pathRules));
        }
        @CustomType.Setter
        public Builder routeRules(@Nullable List<RegionUrlMapPathMatcherRouteRule> routeRules) {

            this.routeRules = routeRules;
            return this;
        }
        public Builder routeRules(RegionUrlMapPathMatcherRouteRule... routeRules) {
            return routeRules(List.of(routeRules));
        }
        public RegionUrlMapPathMatcher build() {
            final var _resultValue = new RegionUrlMapPathMatcher();
            _resultValue.defaultRouteAction = defaultRouteAction;
            _resultValue.defaultService = defaultService;
            _resultValue.defaultUrlRedirect = defaultUrlRedirect;
            _resultValue.description = description;
            _resultValue.headerAction = headerAction;
            _resultValue.name = name;
            _resultValue.pathRules = pathRules;
            _resultValue.routeRules = routeRules;
            return _resultValue;
        }
    }
}
