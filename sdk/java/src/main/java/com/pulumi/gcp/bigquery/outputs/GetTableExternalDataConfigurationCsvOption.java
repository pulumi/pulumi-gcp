// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTableExternalDataConfigurationCsvOption {
    /**
     * @return Indicates if BigQuery should accept rows that are missing trailing optional columns.
     * 
     */
    private Boolean allowJaggedRows;
    /**
     * @return Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
     * 
     */
    private Boolean allowQuotedNewlines;
    /**
     * @return The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
     * 
     */
    private String encoding;
    /**
     * @return The separator for fields in a CSV file.
     * 
     */
    private String fieldDelimiter;
    private String quote;
    /**
     * @return The number of rows at the top of a CSV file that BigQuery will skip when reading the data.
     * 
     */
    private Integer skipLeadingRows;

    private GetTableExternalDataConfigurationCsvOption() {}
    /**
     * @return Indicates if BigQuery should accept rows that are missing trailing optional columns.
     * 
     */
    public Boolean allowJaggedRows() {
        return this.allowJaggedRows;
    }
    /**
     * @return Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
     * 
     */
    public Boolean allowQuotedNewlines() {
        return this.allowQuotedNewlines;
    }
    /**
     * @return The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return The separator for fields in a CSV file.
     * 
     */
    public String fieldDelimiter() {
        return this.fieldDelimiter;
    }
    public String quote() {
        return this.quote;
    }
    /**
     * @return The number of rows at the top of a CSV file that BigQuery will skip when reading the data.
     * 
     */
    public Integer skipLeadingRows() {
        return this.skipLeadingRows;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableExternalDataConfigurationCsvOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowJaggedRows;
        private Boolean allowQuotedNewlines;
        private String encoding;
        private String fieldDelimiter;
        private String quote;
        private Integer skipLeadingRows;
        public Builder() {}
        public Builder(GetTableExternalDataConfigurationCsvOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowJaggedRows = defaults.allowJaggedRows;
    	      this.allowQuotedNewlines = defaults.allowQuotedNewlines;
    	      this.encoding = defaults.encoding;
    	      this.fieldDelimiter = defaults.fieldDelimiter;
    	      this.quote = defaults.quote;
    	      this.skipLeadingRows = defaults.skipLeadingRows;
        }

        @CustomType.Setter
        public Builder allowJaggedRows(Boolean allowJaggedRows) {
            if (allowJaggedRows == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationCsvOption", "allowJaggedRows");
            }
            this.allowJaggedRows = allowJaggedRows;
            return this;
        }
        @CustomType.Setter
        public Builder allowQuotedNewlines(Boolean allowQuotedNewlines) {
            if (allowQuotedNewlines == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationCsvOption", "allowQuotedNewlines");
            }
            this.allowQuotedNewlines = allowQuotedNewlines;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationCsvOption", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder fieldDelimiter(String fieldDelimiter) {
            if (fieldDelimiter == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationCsvOption", "fieldDelimiter");
            }
            this.fieldDelimiter = fieldDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder quote(String quote) {
            if (quote == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationCsvOption", "quote");
            }
            this.quote = quote;
            return this;
        }
        @CustomType.Setter
        public Builder skipLeadingRows(Integer skipLeadingRows) {
            if (skipLeadingRows == null) {
              throw new MissingRequiredPropertyException("GetTableExternalDataConfigurationCsvOption", "skipLeadingRows");
            }
            this.skipLeadingRows = skipLeadingRows;
            return this;
        }
        public GetTableExternalDataConfigurationCsvOption build() {
            final var _resultValue = new GetTableExternalDataConfigurationCsvOption();
            _resultValue.allowJaggedRows = allowJaggedRows;
            _resultValue.allowQuotedNewlines = allowQuotedNewlines;
            _resultValue.encoding = encoding;
            _resultValue.fieldDelimiter = fieldDelimiter;
            _resultValue.quote = quote;
            _resultValue.skipLeadingRows = skipLeadingRows;
            return _resultValue;
        }
    }
}
