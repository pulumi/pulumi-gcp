// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.bigquery.outputs.TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableExternalDataConfigurationBigtableOptionsColumnFamily {
    /**
     * @return A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
     * 
     */
    private @Nullable List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn> columns;
    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
     * 
     */
    private @Nullable String encoding;
    /**
     * @return Identifier of the column family.
     * 
     */
    private @Nullable String familyId;
    /**
     * @return If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
     * 
     */
    private @Nullable Boolean onlyReadLatest;
    /**
     * @return The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
     * 
     */
    private @Nullable String type;

    private TableExternalDataConfigurationBigtableOptionsColumnFamily() {}
    /**
     * @return A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
     * 
     */
    public List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
     * 
     */
    public Optional<String> encoding() {
        return Optional.ofNullable(this.encoding);
    }
    /**
     * @return Identifier of the column family.
     * 
     */
    public Optional<String> familyId() {
        return Optional.ofNullable(this.familyId);
    }
    /**
     * @return If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
     * 
     */
    public Optional<Boolean> onlyReadLatest() {
        return Optional.ofNullable(this.onlyReadLatest);
    }
    /**
     * @return The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableExternalDataConfigurationBigtableOptionsColumnFamily defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn> columns;
        private @Nullable String encoding;
        private @Nullable String familyId;
        private @Nullable Boolean onlyReadLatest;
        private @Nullable String type;
        public Builder() {}
        public Builder(TableExternalDataConfigurationBigtableOptionsColumnFamily defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columns = defaults.columns;
    	      this.encoding = defaults.encoding;
    	      this.familyId = defaults.familyId;
    	      this.onlyReadLatest = defaults.onlyReadLatest;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder columns(@Nullable List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn> columns) {

            this.columns = columns;
            return this;
        }
        public Builder columns(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumn... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder encoding(@Nullable String encoding) {

            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder familyId(@Nullable String familyId) {

            this.familyId = familyId;
            return this;
        }
        @CustomType.Setter
        public Builder onlyReadLatest(@Nullable Boolean onlyReadLatest) {

            this.onlyReadLatest = onlyReadLatest;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public TableExternalDataConfigurationBigtableOptionsColumnFamily build() {
            final var _resultValue = new TableExternalDataConfigurationBigtableOptionsColumnFamily();
            _resultValue.columns = columns;
            _resultValue.encoding = encoding;
            _resultValue.familyId = familyId;
            _resultValue.onlyReadLatest = onlyReadLatest;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
