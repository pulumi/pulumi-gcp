// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebaserules.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebaserules.inputs.RulesetMetadataArgs;
import com.pulumi.gcp.firebaserules.inputs.RulesetSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetState extends com.pulumi.resources.ResourceArgs {

    public static final RulesetState Empty = new RulesetState();

    /**
     * Output only. Time the `Ruleset` was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Time the `Ruleset` was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Output only. The metadata for this ruleset.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<RulesetMetadataArgs>> metadatas;

    /**
     * @return Output only. The metadata for this ruleset.
     * 
     */
    public Optional<Output<List<RulesetMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * File name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return File name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project for the resource
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * `Source` for the `Ruleset`.
     * 
     */
    @Import(name="source")
    private @Nullable Output<RulesetSourceArgs> source;

    /**
     * @return `Source` for the `Ruleset`.
     * 
     */
    public Optional<Output<RulesetSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    private RulesetState() {}

    private RulesetState(RulesetState $) {
        this.createTime = $.createTime;
        this.metadatas = $.metadatas;
        this.name = $.name;
        this.project = $.project;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetState $;

        public Builder() {
            $ = new RulesetState();
        }

        public Builder(RulesetState defaults) {
            $ = new RulesetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Output only. Time the `Ruleset` was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Time the `Ruleset` was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param metadatas Output only. The metadata for this ruleset.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<RulesetMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Output only. The metadata for this ruleset.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<RulesetMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Output only. The metadata for this ruleset.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(RulesetMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param name File name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name File name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project for the resource
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param source `Source` for the `Ruleset`.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<RulesetSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source `Source` for the `Ruleset`.
         * 
         * @return builder
         * 
         */
        public Builder source(RulesetSourceArgs source) {
            return source(Output.of(source));
        }

        public RulesetState build() {
            return $;
        }
    }

}
