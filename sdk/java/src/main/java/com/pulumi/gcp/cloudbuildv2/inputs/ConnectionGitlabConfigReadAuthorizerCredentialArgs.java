// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionGitlabConfigReadAuthorizerCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGitlabConfigReadAuthorizerCredentialArgs Empty = new ConnectionGitlabConfigReadAuthorizerCredentialArgs();

    /**
     * Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    @Import(name="userTokenSecretVersion", required=true)
    private Output<String> userTokenSecretVersion;

    /**
     * @return Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
     * 
     */
    public Output<String> userTokenSecretVersion() {
        return this.userTokenSecretVersion;
    }

    /**
     * Output only. The username associated to this token.
     * 
     * ***
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Output only. The username associated to this token.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ConnectionGitlabConfigReadAuthorizerCredentialArgs() {}

    private ConnectionGitlabConfigReadAuthorizerCredentialArgs(ConnectionGitlabConfigReadAuthorizerCredentialArgs $) {
        this.userTokenSecretVersion = $.userTokenSecretVersion;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGitlabConfigReadAuthorizerCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGitlabConfigReadAuthorizerCredentialArgs $;

        public Builder() {
            $ = new ConnectionGitlabConfigReadAuthorizerCredentialArgs();
        }

        public Builder(ConnectionGitlabConfigReadAuthorizerCredentialArgs defaults) {
            $ = new ConnectionGitlabConfigReadAuthorizerCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param userTokenSecretVersion Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder userTokenSecretVersion(Output<String> userTokenSecretVersion) {
            $.userTokenSecretVersion = userTokenSecretVersion;
            return this;
        }

        /**
         * @param userTokenSecretVersion Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*{@literal /}secrets/*{@literal /}versions/*`.
         * 
         * @return builder
         * 
         */
        public Builder userTokenSecretVersion(String userTokenSecretVersion) {
            return userTokenSecretVersion(Output.of(userTokenSecretVersion));
        }

        /**
         * @param username Output only. The username associated to this token.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Output only. The username associated to this token.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConnectionGitlabConfigReadAuthorizerCredentialArgs build() {
            $.userTokenSecretVersion = Objects.requireNonNull($.userTokenSecretVersion, "expected parameter 'userTokenSecretVersion' to be non-null");
            return $;
        }
    }

}
