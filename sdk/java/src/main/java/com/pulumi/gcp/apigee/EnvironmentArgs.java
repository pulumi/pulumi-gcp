// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apigee.inputs.EnvironmentClientIpResolutionConfigArgs;
import com.pulumi.gcp.apigee.inputs.EnvironmentNodeConfigArgs;
import com.pulumi.gcp.apigee.inputs.EnvironmentPropertiesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * Optional. API Proxy type supported by the environment. The type can be set when creating
     * the Environment and cannot be changed.
     * Possible values are: `API_PROXY_TYPE_UNSPECIFIED`, `PROGRAMMABLE`, `CONFIGURABLE`.
     * 
     */
    @Import(name="apiProxyType")
    private @Nullable Output<String> apiProxyType;

    /**
     * @return Optional. API Proxy type supported by the environment. The type can be set when creating
     * the Environment and cannot be changed.
     * Possible values are: `API_PROXY_TYPE_UNSPECIFIED`, `PROGRAMMABLE`, `CONFIGURABLE`.
     * 
     */
    public Optional<Output<String>> apiProxyType() {
        return Optional.ofNullable(this.apiProxyType);
    }

    /**
     * The algorithm to resolve IP. This will affect Analytics, API Security, and other features that use the client ip. To remove a client ip resolution config, update the field to an empty value. Example: &#39;{ &#34;clientIpResolutionConfig&#34; = {} }&#39; For more information, see: https://cloud.google.com/apigee/docs/api-platform/system-administration/client-ip-resolution
     * Structure is documented below.
     * 
     */
    @Import(name="clientIpResolutionConfig")
    private @Nullable Output<EnvironmentClientIpResolutionConfigArgs> clientIpResolutionConfig;

    /**
     * @return The algorithm to resolve IP. This will affect Analytics, API Security, and other features that use the client ip. To remove a client ip resolution config, update the field to an empty value. Example: &#39;{ &#34;clientIpResolutionConfig&#34; = {} }&#39; For more information, see: https://cloud.google.com/apigee/docs/api-platform/system-administration/client-ip-resolution
     * Structure is documented below.
     * 
     */
    public Optional<Output<EnvironmentClientIpResolutionConfigArgs>> clientIpResolutionConfig() {
        return Optional.ofNullable(this.clientIpResolutionConfig);
    }

    /**
     * Optional. Deployment type supported by the environment. The deployment type can be
     * set when creating the environment and cannot be changed. When you enable archive
     * deployment, you will be prevented from performing a subset of actions within the
     * environment, including:
     * Managing the deployment of API proxy or shared flow revisions;
     * Creating, updating, or deleting resource files;
     * Creating, updating, or deleting target servers.
     * Possible values are: `DEPLOYMENT_TYPE_UNSPECIFIED`, `PROXY`, `ARCHIVE`.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable Output<String> deploymentType;

    /**
     * @return Optional. Deployment type supported by the environment. The deployment type can be
     * set when creating the environment and cannot be changed. When you enable archive
     * deployment, you will be prevented from performing a subset of actions within the
     * environment, including:
     * Managing the deployment of API proxy or shared flow revisions;
     * Creating, updating, or deleting resource files;
     * Creating, updating, or deleting target servers.
     * Possible values are: `DEPLOYMENT_TYPE_UNSPECIFIED`, `PROXY`, `ARCHIVE`.
     * 
     */
    public Optional<Output<String>> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * Description of the environment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the environment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the environment.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of the environment.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Optional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of &#34;http&#34; or &#34;https&#34;, and the port must be supplied.
     * 
     */
    @Import(name="forwardProxyUri")
    private @Nullable Output<String> forwardProxyUri;

    /**
     * @return Optional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of &#34;http&#34; or &#34;https&#34;, and the port must be supplied.
     * 
     */
    public Optional<Output<String>> forwardProxyUri() {
        return Optional.ofNullable(this.forwardProxyUri);
    }

    /**
     * The resource ID of the environment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource ID of the environment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * NodeConfig for setting the min/max number of nodes associated with the environment.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeConfig")
    private @Nullable Output<EnvironmentNodeConfigArgs> nodeConfig;

    /**
     * @return NodeConfig for setting the min/max number of nodes associated with the environment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<EnvironmentNodeConfigArgs>> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }

    /**
     * The Apigee Organization associated with the Apigee environment,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee environment,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Key-value pairs that may be used for customizing the environment.
     * Structure is documented below.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<EnvironmentPropertiesArgs> properties;

    /**
     * @return Key-value pairs that may be used for customizing the environment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<EnvironmentPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Types that can be selected for an Environment. Each of the types are
     * limited by capability and capacity. Refer to Apigee&#39;s public documentation
     * to understand about each of these types in details.
     * An Apigee org can support heterogeneous Environments.
     * Possible values are: `ENVIRONMENT_TYPE_UNSPECIFIED`, `BASE`, `INTERMEDIATE`, `COMPREHENSIVE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Types that can be selected for an Environment. Each of the types are
     * limited by capability and capacity. Refer to Apigee&#39;s public documentation
     * to understand about each of these types in details.
     * An Apigee org can support heterogeneous Environments.
     * Possible values are: `ENVIRONMENT_TYPE_UNSPECIFIED`, `BASE`, `INTERMEDIATE`, `COMPREHENSIVE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.apiProxyType = $.apiProxyType;
        this.clientIpResolutionConfig = $.clientIpResolutionConfig;
        this.deploymentType = $.deploymentType;
        this.description = $.description;
        this.displayName = $.displayName;
        this.forwardProxyUri = $.forwardProxyUri;
        this.name = $.name;
        this.nodeConfig = $.nodeConfig;
        this.orgId = $.orgId;
        this.properties = $.properties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiProxyType Optional. API Proxy type supported by the environment. The type can be set when creating
         * the Environment and cannot be changed.
         * Possible values are: `API_PROXY_TYPE_UNSPECIFIED`, `PROGRAMMABLE`, `CONFIGURABLE`.
         * 
         * @return builder
         * 
         */
        public Builder apiProxyType(@Nullable Output<String> apiProxyType) {
            $.apiProxyType = apiProxyType;
            return this;
        }

        /**
         * @param apiProxyType Optional. API Proxy type supported by the environment. The type can be set when creating
         * the Environment and cannot be changed.
         * Possible values are: `API_PROXY_TYPE_UNSPECIFIED`, `PROGRAMMABLE`, `CONFIGURABLE`.
         * 
         * @return builder
         * 
         */
        public Builder apiProxyType(String apiProxyType) {
            return apiProxyType(Output.of(apiProxyType));
        }

        /**
         * @param clientIpResolutionConfig The algorithm to resolve IP. This will affect Analytics, API Security, and other features that use the client ip. To remove a client ip resolution config, update the field to an empty value. Example: &#39;{ &#34;clientIpResolutionConfig&#34; = {} }&#39; For more information, see: https://cloud.google.com/apigee/docs/api-platform/system-administration/client-ip-resolution
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientIpResolutionConfig(@Nullable Output<EnvironmentClientIpResolutionConfigArgs> clientIpResolutionConfig) {
            $.clientIpResolutionConfig = clientIpResolutionConfig;
            return this;
        }

        /**
         * @param clientIpResolutionConfig The algorithm to resolve IP. This will affect Analytics, API Security, and other features that use the client ip. To remove a client ip resolution config, update the field to an empty value. Example: &#39;{ &#34;clientIpResolutionConfig&#34; = {} }&#39; For more information, see: https://cloud.google.com/apigee/docs/api-platform/system-administration/client-ip-resolution
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientIpResolutionConfig(EnvironmentClientIpResolutionConfigArgs clientIpResolutionConfig) {
            return clientIpResolutionConfig(Output.of(clientIpResolutionConfig));
        }

        /**
         * @param deploymentType Optional. Deployment type supported by the environment. The deployment type can be
         * set when creating the environment and cannot be changed. When you enable archive
         * deployment, you will be prevented from performing a subset of actions within the
         * environment, including:
         * Managing the deployment of API proxy or shared flow revisions;
         * Creating, updating, or deleting resource files;
         * Creating, updating, or deleting target servers.
         * Possible values are: `DEPLOYMENT_TYPE_UNSPECIFIED`, `PROXY`, `ARCHIVE`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType Optional. Deployment type supported by the environment. The deployment type can be
         * set when creating the environment and cannot be changed. When you enable archive
         * deployment, you will be prevented from performing a subset of actions within the
         * environment, including:
         * Managing the deployment of API proxy or shared flow revisions;
         * Creating, updating, or deleting resource files;
         * Creating, updating, or deleting target servers.
         * Possible values are: `DEPLOYMENT_TYPE_UNSPECIFIED`, `PROXY`, `ARCHIVE`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param description Description of the environment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the environment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Display name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param forwardProxyUri Optional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of &#34;http&#34; or &#34;https&#34;, and the port must be supplied.
         * 
         * @return builder
         * 
         */
        public Builder forwardProxyUri(@Nullable Output<String> forwardProxyUri) {
            $.forwardProxyUri = forwardProxyUri;
            return this;
        }

        /**
         * @param forwardProxyUri Optional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of &#34;http&#34; or &#34;https&#34;, and the port must be supplied.
         * 
         * @return builder
         * 
         */
        public Builder forwardProxyUri(String forwardProxyUri) {
            return forwardProxyUri(Output.of(forwardProxyUri));
        }

        /**
         * @param name The resource ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource ID of the environment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeConfig NodeConfig for setting the min/max number of nodes associated with the environment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(@Nullable Output<EnvironmentNodeConfigArgs> nodeConfig) {
            $.nodeConfig = nodeConfig;
            return this;
        }

        /**
         * @param nodeConfig NodeConfig for setting the min/max number of nodes associated with the environment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(EnvironmentNodeConfigArgs nodeConfig) {
            return nodeConfig(Output.of(nodeConfig));
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee environment,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The Apigee Organization associated with the Apigee environment,
         * in the format `organizations/{{org_name}}`.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param properties Key-value pairs that may be used for customizing the environment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<EnvironmentPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Key-value pairs that may be used for customizing the environment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder properties(EnvironmentPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param type Types that can be selected for an Environment. Each of the types are
         * limited by capability and capacity. Refer to Apigee&#39;s public documentation
         * to understand about each of these types in details.
         * An Apigee org can support heterogeneous Environments.
         * Possible values are: `ENVIRONMENT_TYPE_UNSPECIFIED`, `BASE`, `INTERMEDIATE`, `COMPREHENSIVE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Types that can be selected for an Environment. Each of the types are
         * limited by capability and capacity. Refer to Apigee&#39;s public documentation
         * to understand about each of these types in details.
         * An Apigee org can support heterogeneous Environments.
         * Possible values are: `ENVIRONMENT_TYPE_UNSPECIFIED`, `BASE`, `INTERMEDIATE`, `COMPREHENSIVE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public EnvironmentArgs build() {
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("EnvironmentArgs", "orgId");
            }
            return $;
        }
    }

}
