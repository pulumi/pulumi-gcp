// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.databasemigrationservice.inputs.PrivateConnectionVpcPeeringConfigArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateConnectionArgs Empty = new PrivateConnectionArgs();

    /**
     * Display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the location this private connection is located in.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The name of the location this private connection is located in.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The private connectivity identifier.
     * 
     */
    @Import(name="privateConnectionId", required=true)
    private Output<String> privateConnectionId;

    /**
     * @return The private connectivity identifier.
     * 
     */
    public Output<String> privateConnectionId() {
        return this.privateConnectionId;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The VPC Peering configuration is used to create VPC peering
     * between databasemigrationservice and the consumer&#39;s VPC.
     * Structure is documented below.
     * 
     */
    @Import(name="vpcPeeringConfig", required=true)
    private Output<PrivateConnectionVpcPeeringConfigArgs> vpcPeeringConfig;

    /**
     * @return The VPC Peering configuration is used to create VPC peering
     * between databasemigrationservice and the consumer&#39;s VPC.
     * Structure is documented below.
     * 
     */
    public Output<PrivateConnectionVpcPeeringConfigArgs> vpcPeeringConfig() {
        return this.vpcPeeringConfig;
    }

    private PrivateConnectionArgs() {}

    private PrivateConnectionArgs(PrivateConnectionArgs $) {
        this.displayName = $.displayName;
        this.labels = $.labels;
        this.location = $.location;
        this.privateConnectionId = $.privateConnectionId;
        this.project = $.project;
        this.vpcPeeringConfig = $.vpcPeeringConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateConnectionArgs $;

        public Builder() {
            $ = new PrivateConnectionArgs();
        }

        public Builder(PrivateConnectionArgs defaults) {
            $ = new PrivateConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param labels Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
         * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
         * refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The name of the location this private connection is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location this private connection is located in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param privateConnectionId The private connectivity identifier.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectionId(Output<String> privateConnectionId) {
            $.privateConnectionId = privateConnectionId;
            return this;
        }

        /**
         * @param privateConnectionId The private connectivity identifier.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectionId(String privateConnectionId) {
            return privateConnectionId(Output.of(privateConnectionId));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param vpcPeeringConfig The VPC Peering configuration is used to create VPC peering
         * between databasemigrationservice and the consumer&#39;s VPC.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcPeeringConfig(Output<PrivateConnectionVpcPeeringConfigArgs> vpcPeeringConfig) {
            $.vpcPeeringConfig = vpcPeeringConfig;
            return this;
        }

        /**
         * @param vpcPeeringConfig The VPC Peering configuration is used to create VPC peering
         * between databasemigrationservice and the consumer&#39;s VPC.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcPeeringConfig(PrivateConnectionVpcPeeringConfigArgs vpcPeeringConfig) {
            return vpcPeeringConfig(Output.of(vpcPeeringConfig));
        }

        public PrivateConnectionArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PrivateConnectionArgs", "location");
            }
            if ($.privateConnectionId == null) {
                throw new MissingRequiredPropertyException("PrivateConnectionArgs", "privateConnectionId");
            }
            if ($.vpcPeeringConfig == null) {
                throw new MissingRequiredPropertyException("PrivateConnectionArgs", "vpcPeeringConfig");
            }
            return $;
        }
    }

}
