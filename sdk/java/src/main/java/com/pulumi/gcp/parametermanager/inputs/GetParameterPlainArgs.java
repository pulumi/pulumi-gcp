// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.parametermanager.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetParameterPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetParameterPlainArgs Empty = new GetParameterPlainArgs();

    /**
     * The name of the parameter.
     * 
     */
    @Import(name="parameterId", required=true)
    private String parameterId;

    /**
     * @return The name of the parameter.
     * 
     */
    public String parameterId() {
        return this.parameterId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project in which the resource belongs.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    private GetParameterPlainArgs() {}

    private GetParameterPlainArgs(GetParameterPlainArgs $) {
        this.parameterId = $.parameterId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetParameterPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetParameterPlainArgs $;

        public Builder() {
            $ = new GetParameterPlainArgs();
        }

        public Builder(GetParameterPlainArgs defaults) {
            $ = new GetParameterPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param parameterId The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterId(String parameterId) {
            $.parameterId = parameterId;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        public GetParameterPlainArgs build() {
            if ($.parameterId == null) {
                throw new MissingRequiredPropertyException("GetParameterPlainArgs", "parameterId");
            }
            return $;
        }
    }

}
