// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class RepositoryGroupRepository {
    /**
     * @return Required. The Git branch pattern used for indexing in RE2 syntax.
     * See https://github.com/google/re2/wiki/syntax for syntax.
     * 
     * ***
     * 
     */
    private String branchPattern;
    /**
     * @return Required. The DeveloperConnect repository full resource name, relative resource name
     * or resource URL to be indexed.
     * 
     */
    private String resource;

    private RepositoryGroupRepository() {}
    /**
     * @return Required. The Git branch pattern used for indexing in RE2 syntax.
     * See https://github.com/google/re2/wiki/syntax for syntax.
     * 
     * ***
     * 
     */
    public String branchPattern() {
        return this.branchPattern;
    }
    /**
     * @return Required. The DeveloperConnect repository full resource name, relative resource name
     * or resource URL to be indexed.
     * 
     */
    public String resource() {
        return this.resource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryGroupRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branchPattern;
        private String resource;
        public Builder() {}
        public Builder(RepositoryGroupRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchPattern = defaults.branchPattern;
    	      this.resource = defaults.resource;
        }

        @CustomType.Setter
        public Builder branchPattern(String branchPattern) {
            if (branchPattern == null) {
              throw new MissingRequiredPropertyException("RepositoryGroupRepository", "branchPattern");
            }
            this.branchPattern = branchPattern;
            return this;
        }
        @CustomType.Setter
        public Builder resource(String resource) {
            if (resource == null) {
              throw new MissingRequiredPropertyException("RepositoryGroupRepository", "resource");
            }
            this.resource = resource;
            return this;
        }
        public RepositoryGroupRepository build() {
            final var _resultValue = new RepositoryGroupRepository();
            _resultValue.branchPattern = branchPattern;
            _resultValue.resource = resource;
            return _resultValue;
        }
    }
}
