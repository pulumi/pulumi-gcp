// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.dns.RecordSetArgs;
import com.pulumi.gcp.dns.inputs.RecordSetState;
import com.pulumi.gcp.dns.outputs.RecordSetRoutingPolicy;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### Binding a DNS name to the ephemeral IP of a new instance:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var frontendInstance = new Instance(&#34;frontendInstance&#34;, InstanceArgs.builder()        
 *             .machineType(&#34;g1-small&#34;)
 *             .zone(&#34;us-central1-b&#34;)
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(&#34;debian-cloud/debian-11&#34;)
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(&#34;default&#34;)
 *                 .accessConfigs()
 *                 .build())
 *             .build());
 * 
 *         var prod = new ManagedZone(&#34;prod&#34;, ManagedZoneArgs.builder()        
 *             .dnsName(&#34;prod.mydomain.com.&#34;)
 *             .build());
 * 
 *         var frontendRecordSet = new RecordSet(&#34;frontendRecordSet&#34;, RecordSetArgs.builder()        
 *             .name(prod.dnsName().applyValue(dnsName -&gt; String.format(&#34;frontend.%s&#34;, dnsName)))
 *             .type(&#34;A&#34;)
 *             .ttl(300)
 *             .managedZone(prod.name())
 *             .rrdatas(frontendInstance.networkInterfaces().applyValue(networkInterfaces -&gt; networkInterfaces[0].accessConfigs()[0].natIp()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Adding an A record
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prod = new ManagedZone(&#34;prod&#34;, ManagedZoneArgs.builder()        
 *             .dnsName(&#34;prod.mydomain.com.&#34;)
 *             .build());
 * 
 *         var recordSet = new RecordSet(&#34;recordSet&#34;, RecordSetArgs.builder()        
 *             .name(prod.dnsName().applyValue(dnsName -&gt; String.format(&#34;backend.%s&#34;, dnsName)))
 *             .managedZone(prod.name())
 *             .type(&#34;A&#34;)
 *             .ttl(300)
 *             .rrdatas(&#34;8.8.8.8&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Adding an MX record
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prod = new ManagedZone(&#34;prod&#34;, ManagedZoneArgs.builder()        
 *             .dnsName(&#34;prod.mydomain.com.&#34;)
 *             .build());
 * 
 *         var mx = new RecordSet(&#34;mx&#34;, RecordSetArgs.builder()        
 *             .name(prod.dnsName())
 *             .managedZone(prod.name())
 *             .type(&#34;MX&#34;)
 *             .ttl(3600)
 *             .rrdatas(            
 *                 &#34;1 aspmx.l.google.com.&#34;,
 *                 &#34;5 alt1.aspmx.l.google.com.&#34;,
 *                 &#34;5 alt2.aspmx.l.google.com.&#34;,
 *                 &#34;10 alt3.aspmx.l.google.com.&#34;,
 *                 &#34;10 alt4.aspmx.l.google.com.&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Adding an SPF record
 * 
 * Quotes (`&#34;&#34;`) must be added around your `rrdatas` for a SPF record. Otherwise `rrdatas` string gets split on spaces.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prod = new ManagedZone(&#34;prod&#34;, ManagedZoneArgs.builder()        
 *             .dnsName(&#34;prod.mydomain.com.&#34;)
 *             .build());
 * 
 *         var spf = new RecordSet(&#34;spf&#34;, RecordSetArgs.builder()        
 *             .name(prod.dnsName().applyValue(dnsName -&gt; String.format(&#34;frontend.%s&#34;, dnsName)))
 *             .managedZone(prod.name())
 *             .type(&#34;TXT&#34;)
 *             .ttl(300)
 *             .rrdatas(&#34;\&#34;v=spf1 ip4:111.111.111.111 include:backoff.email-example.com -all\&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Adding a CNAME record
 * 
 *  The list of `rrdatas` should only contain a single string corresponding to the Canonical Name intended.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prod = new ManagedZone(&#34;prod&#34;, ManagedZoneArgs.builder()        
 *             .dnsName(&#34;prod.mydomain.com.&#34;)
 *             .build());
 * 
 *         var cname = new RecordSet(&#34;cname&#34;, RecordSetArgs.builder()        
 *             .name(prod.dnsName().applyValue(dnsName -&gt; String.format(&#34;frontend.%s&#34;, dnsName)))
 *             .managedZone(prod.name())
 *             .type(&#34;CNAME&#34;)
 *             .ttl(300)
 *             .rrdatas(&#34;frontend.mydomain.com.&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Setting Routing Policy instead of using rrdatas
 * ### Geolocation
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import com.pulumi.gcp.dns.inputs.RecordSetRoutingPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var geo = new RecordSet(&#34;geo&#34;, RecordSetArgs.builder()        
 *             .name(String.format(&#34;backend.%s&#34;, google_dns_managed_zone.prod().dns_name()))
 *             .managedZone(google_dns_managed_zone.prod().name())
 *             .type(&#34;A&#34;)
 *             .ttl(300)
 *             .routingPolicy(RecordSetRoutingPolicyArgs.builder()
 *                 .geos(                
 *                     RecordSetRoutingPolicyGeoArgs.builder()
 *                         .location(&#34;asia-east1&#34;)
 *                         .rrdatas(&#34;10.128.1.1&#34;)
 *                         .build(),
 *                     RecordSetRoutingPolicyGeoArgs.builder()
 *                         .location(&#34;us-central1&#34;)
 *                         .rrdatas(&#34;10.130.1.1&#34;)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Primary-Backup
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dns.ManagedZone;
 * import com.pulumi.gcp.dns.ManagedZoneArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.dns.RecordSet;
 * import com.pulumi.gcp.dns.RecordSetArgs;
 * import com.pulumi.gcp.dns.inputs.RecordSetRoutingPolicyArgs;
 * import com.pulumi.gcp.dns.inputs.RecordSetRoutingPolicyPrimaryBackupArgs;
 * import com.pulumi.gcp.dns.inputs.RecordSetRoutingPolicyPrimaryBackupPrimaryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var prodManagedZone = new ManagedZone(&#34;prodManagedZone&#34;, ManagedZoneArgs.builder()        
 *             .dnsName(&#34;prod.mydomain.com.&#34;)
 *             .build());
 * 
 *         var prodRegionBackendService = new RegionBackendService(&#34;prodRegionBackendService&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var prodNetwork = new Network(&#34;prodNetwork&#34;);
 * 
 *         var prodForwardingRule = new ForwardingRule(&#34;prodForwardingRule&#34;, ForwardingRuleArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL&#34;)
 *             .backendService(prodRegionBackendService.id())
 *             .allPorts(true)
 *             .network(prodNetwork.name())
 *             .build());
 * 
 *         var recordSet = new RecordSet(&#34;recordSet&#34;, RecordSetArgs.builder()        
 *             .name(prodManagedZone.dnsName().applyValue(dnsName -&gt; String.format(&#34;backend.%s&#34;, dnsName)))
 *             .managedZone(prodManagedZone.name())
 *             .type(&#34;A&#34;)
 *             .ttl(300)
 *             .routingPolicy(RecordSetRoutingPolicyArgs.builder()
 *                 .primaryBackup(RecordSetRoutingPolicyPrimaryBackupArgs.builder()
 *                     .trickleRatio(0.1)
 *                     .primary(RecordSetRoutingPolicyPrimaryBackupPrimaryArgs.builder()
 *                         .internalLoadBalancers(RecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancerArgs.builder()
 *                             .loadBalancerType(&#34;regionalL4ilb&#34;)
 *                             .ipAddress(prodForwardingRule.ipAddress())
 *                             .port(&#34;80&#34;)
 *                             .ipProtocol(&#34;tcp&#34;)
 *                             .networkUrl(prodNetwork.id())
 *                             .project(prodForwardingRule.project())
 *                             .region(prodForwardingRule.region())
 *                             .build())
 *                         .build())
 *                     .backupGeos(                    
 *                         RecordSetRoutingPolicyPrimaryBackupBackupGeoArgs.builder()
 *                             .location(&#34;asia-east1&#34;)
 *                             .rrdatas(&#34;10.128.1.1&#34;)
 *                             .build(),
 *                         RecordSetRoutingPolicyPrimaryBackupBackupGeoArgs.builder()
 *                             .location(&#34;us-west1&#34;)
 *                             .rrdatas(&#34;10.130.1.1&#34;)
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * DNS record sets can be imported using either of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:dns/recordSet:RecordSet frontend projects/{{project}}/managedZones/{{zone}}/rrsets/{{name}}/{{type}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{project}}/{{zone}}/{{name}}/{{type}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:dns/recordSet:RecordSet frontend {{zone}}/{{name}}/{{type}}
 * ```
 * 
 *  NoteThe record name must include the trailing dot at the end.
 * 
 */
@ResourceType(type="gcp:dns/recordSet:RecordSet")
public class RecordSet extends com.pulumi.resources.CustomResource {
    /**
     * The name of the zone in which this record set will
     * reside.
     * 
     */
    @Export(name="managedZone", type=String.class, parameters={})
    private Output<String> managedZone;

    /**
     * @return The name of the zone in which this record set will
     * reside.
     * 
     */
    public Output<String> managedZone() {
        return this.managedZone;
    }
    /**
     * The DNS name this record set will apply to.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The DNS name this record set will apply to.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the load balancer belongs.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the load balancer belongs.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The configuration for steering traffic based on query.
     * Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
     * Structure is documented below.
     * 
     */
    @Export(name="routingPolicy", type=RecordSetRoutingPolicy.class, parameters={})
    private Output</* @Nullable */ RecordSetRoutingPolicy> routingPolicy;

    /**
     * @return The configuration for steering traffic based on query.
     * Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RecordSetRoutingPolicy>> routingPolicy() {
        return Codegen.optional(this.routingPolicy);
    }
    /**
     * Same as `rrdatas` above.
     * 
     */
    @Export(name="rrdatas", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> rrdatas;

    /**
     * @return Same as `rrdatas` above.
     * 
     */
    public Output<Optional<List<String>>> rrdatas() {
        return Codegen.optional(this.rrdatas);
    }
    /**
     * The time-to-live of this record set (seconds).
     * 
     */
    @Export(name="ttl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> ttl;

    /**
     * @return The time-to-live of this record set (seconds).
     * 
     */
    public Output<Optional<Integer>> ttl() {
        return Codegen.optional(this.ttl);
    }
    /**
     * The DNS record set type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The DNS record set type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RecordSet(String name) {
        this(name, RecordSetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RecordSet(String name, RecordSetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RecordSet(String name, RecordSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dns/recordSet:RecordSet", name, args == null ? RecordSetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RecordSet(String name, Output<String> id, @Nullable RecordSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dns/recordSet:RecordSet", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RecordSet get(String name, Output<String> id, @Nullable RecordSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RecordSet(name, id, state, options);
    }
}
