// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterMaintenanceEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMaintenanceEventArgs Empty = new ClusterMaintenanceEventArgs();

    /**
     * (Output)
     * The time when the maintenance event request was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Output)
     * The time when the maintenance event request was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * (Output)
     * The time when the maintenance event ended, either successfully or not. If
     * the maintenance event is split into multiple maintenance windows,
     * end_time is only updated when the whole flow ends.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return (Output)
     * The time when the maintenance event ended, either successfully or not. If
     * the maintenance event is split into multiple maintenance windows,
     * end_time is only updated when the whole flow ends.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * (Output)
     * The operation for running the maintenance event. Specified in the format
     * projects/*&#47;locations/*&#47;operations/*. If the maintenance event is split
     * into multiple operations (e.g. due to maintenance windows), the latest
     * one is recorded.
     * 
     */
    @Import(name="operation")
    private @Nullable Output<String> operation;

    /**
     * @return (Output)
     * The operation for running the maintenance event. Specified in the format
     * projects/*&#47;locations/*&#47;operations/*. If the maintenance event is split
     * into multiple operations (e.g. due to maintenance windows), the latest
     * one is recorded.
     * 
     */
    public Optional<Output<String>> operation() {
        return Optional.ofNullable(this.operation);
    }

    /**
     * (Output)
     * The schedule of the maintenance event.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    /**
     * @return (Output)
     * The schedule of the maintenance event.
     * 
     */
    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * (Output)
     * The time when the maintenance event started.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return (Output)
     * The time when the maintenance event started.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * (Output)
     * Indicates the maintenance event state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return (Output)
     * Indicates the maintenance event state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The target cluster version. For example: &#34;1.5.0&#34;.
     * 
     */
    @Import(name="targetVersion")
    private @Nullable Output<String> targetVersion;

    /**
     * @return The target cluster version. For example: &#34;1.5.0&#34;.
     * 
     */
    public Optional<Output<String>> targetVersion() {
        return Optional.ofNullable(this.targetVersion);
    }

    /**
     * (Output)
     * Indicates the maintenance event type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Output)
     * Indicates the maintenance event type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (Output)
     * The time when the maintenance event message was updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return (Output)
     * The time when the maintenance event message was updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * (Output)
     * UUID of the maintenance event.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return (Output)
     * UUID of the maintenance event.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ClusterMaintenanceEventArgs() {}

    private ClusterMaintenanceEventArgs(ClusterMaintenanceEventArgs $) {
        this.createTime = $.createTime;
        this.endTime = $.endTime;
        this.operation = $.operation;
        this.schedule = $.schedule;
        this.startTime = $.startTime;
        this.state = $.state;
        this.targetVersion = $.targetVersion;
        this.type = $.type;
        this.updateTime = $.updateTime;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMaintenanceEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMaintenanceEventArgs $;

        public Builder() {
            $ = new ClusterMaintenanceEventArgs();
        }

        public Builder(ClusterMaintenanceEventArgs defaults) {
            $ = new ClusterMaintenanceEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime (Output)
         * The time when the maintenance event request was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Output)
         * The time when the maintenance event request was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param endTime (Output)
         * The time when the maintenance event ended, either successfully or not. If
         * the maintenance event is split into multiple maintenance windows,
         * end_time is only updated when the whole flow ends.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime (Output)
         * The time when the maintenance event ended, either successfully or not. If
         * the maintenance event is split into multiple maintenance windows,
         * end_time is only updated when the whole flow ends.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param operation (Output)
         * The operation for running the maintenance event. Specified in the format
         * projects/*&#47;locations/*&#47;operations/*. If the maintenance event is split
         * into multiple operations (e.g. due to maintenance windows), the latest
         * one is recorded.
         * 
         * @return builder
         * 
         */
        public Builder operation(@Nullable Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation (Output)
         * The operation for running the maintenance event. Specified in the format
         * projects/*&#47;locations/*&#47;operations/*. If the maintenance event is split
         * into multiple operations (e.g. due to maintenance windows), the latest
         * one is recorded.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param schedule (Output)
         * The schedule of the maintenance event.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule (Output)
         * The schedule of the maintenance event.
         * 
         * @return builder
         * 
         */
        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param startTime (Output)
         * The time when the maintenance event started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime (Output)
         * The time when the maintenance event started.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param state (Output)
         * Indicates the maintenance event state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state (Output)
         * Indicates the maintenance event state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param targetVersion The target cluster version. For example: &#34;1.5.0&#34;.
         * 
         * @return builder
         * 
         */
        public Builder targetVersion(@Nullable Output<String> targetVersion) {
            $.targetVersion = targetVersion;
            return this;
        }

        /**
         * @param targetVersion The target cluster version. For example: &#34;1.5.0&#34;.
         * 
         * @return builder
         * 
         */
        public Builder targetVersion(String targetVersion) {
            return targetVersion(Output.of(targetVersion));
        }

        /**
         * @param type (Output)
         * Indicates the maintenance event type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Output)
         * Indicates the maintenance event type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updateTime (Output)
         * The time when the maintenance event message was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime (Output)
         * The time when the maintenance event message was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param uuid (Output)
         * UUID of the maintenance event.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid (Output)
         * UUID of the maintenance event.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ClusterMaintenanceEventArgs build() {
            return $;
        }
    }

}
