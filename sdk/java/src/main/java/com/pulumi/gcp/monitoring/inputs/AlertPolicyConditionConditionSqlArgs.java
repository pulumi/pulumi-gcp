// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionSqlBooleanTestArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionSqlDailyArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionSqlHourlyArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionSqlMinutesArgs;
import com.pulumi.gcp.monitoring.inputs.AlertPolicyConditionConditionSqlRowCountTestArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyConditionConditionSqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyConditionConditionSqlArgs Empty = new AlertPolicyConditionConditionSqlArgs();

    /**
     * A test that uses an alerting result in a boolean column produced by the SQL query.
     * Structure is documented below.
     * 
     */
    @Import(name="booleanTest")
    private @Nullable Output<AlertPolicyConditionConditionSqlBooleanTestArgs> booleanTest;

    /**
     * @return A test that uses an alerting result in a boolean column produced by the SQL query.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionSqlBooleanTestArgs>> booleanTest() {
        return Optional.ofNullable(this.booleanTest);
    }

    /**
     * Used to schedule the query to run every so many days.
     * Structure is documented below.
     * 
     */
    @Import(name="daily")
    private @Nullable Output<AlertPolicyConditionConditionSqlDailyArgs> daily;

    /**
     * @return Used to schedule the query to run every so many days.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionSqlDailyArgs>> daily() {
        return Optional.ofNullable(this.daily);
    }

    /**
     * Used to schedule the query to run every so many hours.
     * Structure is documented below.
     * 
     */
    @Import(name="hourly")
    private @Nullable Output<AlertPolicyConditionConditionSqlHourlyArgs> hourly;

    /**
     * @return Used to schedule the query to run every so many hours.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionSqlHourlyArgs>> hourly() {
        return Optional.ofNullable(this.hourly);
    }

    /**
     * Used to schedule the query to run every so many minutes.
     * Structure is documented below.
     * 
     */
    @Import(name="minutes")
    private @Nullable Output<AlertPolicyConditionConditionSqlMinutesArgs> minutes;

    /**
     * @return Used to schedule the query to run every so many minutes.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionSqlMinutesArgs>> minutes() {
        return Optional.ofNullable(this.minutes);
    }

    /**
     * The Log Analytics SQL query to run, as a string.  The query must
     * conform to the required shape. Specifically, the query must not try to
     * filter the input by time.  A filter will automatically be applied
     * to filter the input so that the query receives all rows received
     * since the last time the query was run.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The Log Analytics SQL query to run, as a string.  The query must
     * conform to the required shape. Specifically, the query must not try to
     * filter the input by time.  A filter will automatically be applied
     * to filter the input so that the query receives all rows received
     * since the last time the query was run.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * A test that checks if the number of rows in the result set violates some threshold.
     * Structure is documented below.
     * 
     */
    @Import(name="rowCountTest")
    private @Nullable Output<AlertPolicyConditionConditionSqlRowCountTestArgs> rowCountTest;

    /**
     * @return A test that checks if the number of rows in the result set violates some threshold.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AlertPolicyConditionConditionSqlRowCountTestArgs>> rowCountTest() {
        return Optional.ofNullable(this.rowCountTest);
    }

    private AlertPolicyConditionConditionSqlArgs() {}

    private AlertPolicyConditionConditionSqlArgs(AlertPolicyConditionConditionSqlArgs $) {
        this.booleanTest = $.booleanTest;
        this.daily = $.daily;
        this.hourly = $.hourly;
        this.minutes = $.minutes;
        this.query = $.query;
        this.rowCountTest = $.rowCountTest;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyConditionConditionSqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyConditionConditionSqlArgs $;

        public Builder() {
            $ = new AlertPolicyConditionConditionSqlArgs();
        }

        public Builder(AlertPolicyConditionConditionSqlArgs defaults) {
            $ = new AlertPolicyConditionConditionSqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param booleanTest A test that uses an alerting result in a boolean column produced by the SQL query.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder booleanTest(@Nullable Output<AlertPolicyConditionConditionSqlBooleanTestArgs> booleanTest) {
            $.booleanTest = booleanTest;
            return this;
        }

        /**
         * @param booleanTest A test that uses an alerting result in a boolean column produced by the SQL query.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder booleanTest(AlertPolicyConditionConditionSqlBooleanTestArgs booleanTest) {
            return booleanTest(Output.of(booleanTest));
        }

        /**
         * @param daily Used to schedule the query to run every so many days.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder daily(@Nullable Output<AlertPolicyConditionConditionSqlDailyArgs> daily) {
            $.daily = daily;
            return this;
        }

        /**
         * @param daily Used to schedule the query to run every so many days.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder daily(AlertPolicyConditionConditionSqlDailyArgs daily) {
            return daily(Output.of(daily));
        }

        /**
         * @param hourly Used to schedule the query to run every so many hours.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hourly(@Nullable Output<AlertPolicyConditionConditionSqlHourlyArgs> hourly) {
            $.hourly = hourly;
            return this;
        }

        /**
         * @param hourly Used to schedule the query to run every so many hours.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hourly(AlertPolicyConditionConditionSqlHourlyArgs hourly) {
            return hourly(Output.of(hourly));
        }

        /**
         * @param minutes Used to schedule the query to run every so many minutes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder minutes(@Nullable Output<AlertPolicyConditionConditionSqlMinutesArgs> minutes) {
            $.minutes = minutes;
            return this;
        }

        /**
         * @param minutes Used to schedule the query to run every so many minutes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder minutes(AlertPolicyConditionConditionSqlMinutesArgs minutes) {
            return minutes(Output.of(minutes));
        }

        /**
         * @param query The Log Analytics SQL query to run, as a string.  The query must
         * conform to the required shape. Specifically, the query must not try to
         * filter the input by time.  A filter will automatically be applied
         * to filter the input so that the query receives all rows received
         * since the last time the query was run.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The Log Analytics SQL query to run, as a string.  The query must
         * conform to the required shape. Specifically, the query must not try to
         * filter the input by time.  A filter will automatically be applied
         * to filter the input so that the query receives all rows received
         * since the last time the query was run.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param rowCountTest A test that checks if the number of rows in the result set violates some threshold.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowCountTest(@Nullable Output<AlertPolicyConditionConditionSqlRowCountTestArgs> rowCountTest) {
            $.rowCountTest = rowCountTest;
            return this;
        }

        /**
         * @param rowCountTest A test that checks if the number of rows in the result set violates some threshold.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rowCountTest(AlertPolicyConditionConditionSqlRowCountTestArgs rowCountTest) {
            return rowCountTest(Output.of(rowCountTest));
        }

        public AlertPolicyConditionConditionSqlArgs build() {
            if ($.query == null) {
                throw new MissingRequiredPropertyException("AlertPolicyConditionConditionSqlArgs", "query");
            }
            return $;
        }
    }

}
