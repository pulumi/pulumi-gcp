// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.cloudrun.ServiceArgs;
import com.pulumi.gcp.cloudrun.inputs.ServiceState;
import com.pulumi.gcp.cloudrun.outputs.ServiceMetadata;
import com.pulumi.gcp.cloudrun.outputs.ServiceStatus;
import com.pulumi.gcp.cloudrun.outputs.ServiceTemplate;
import com.pulumi.gcp.cloudrun.outputs.ServiceTraffic;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Service acts as a top-level container that manages a set of Routes and
 * Configurations which implement a network service. Service exists to provide a
 * singular abstraction which can be access controlled, reasoned about, and
 * which encapsulates software lifecycle decisions such as rollout policy and
 * team resource ownership. Service acts only as an orchestrator of the
 * underlying Routes and Configurations (much as a kubernetes Deployment
 * orchestrates ReplicaSets).
 * 
 * The Service&#39;s controller will track the statuses of its owned Configuration
 * and Route, reflecting their statuses and conditions as its own.
 * 
 * See also:
 * https://github.com/knative/specs/blob/main/specs/serving/overview.md
 * 
 * To get more information about Service, see:
 * 
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 * 
 * &gt; **Warning:** `google_cloudrun_service` creates a Managed Google Cloud Run Service. If you need to create
 * a Cloud Run Service on Anthos(GKE/VMWare) then you will need to create it using the kubernetes alpha provider.
 * Have a look at the Cloud Run Anthos example below.
 * 
 * ## Example Usage
 * ### Cloud Run Service Pubsub
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;gcr.io/cloudrun/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .build());
 * 
 *         var sa = new Account(&#34;sa&#34;, AccountArgs.builder()        
 *             .accountId(&#34;cloud-run-pubsub-invoker&#34;)
 *             .displayName(&#34;Cloud Run Pub/Sub Invoker&#34;)
 *             .build());
 * 
 *         var binding = new IamBinding(&#34;binding&#34;, IamBindingArgs.builder()        
 *             .location(default_.location())
 *             .service(default_.name())
 *             .role(&#34;roles/run.invoker&#34;)
 *             .members(sa.email().apply(email -&gt; String.format(&#34;serviceAccount:%s&#34;, email)))
 *             .build());
 * 
 *         var project = new IAMBinding(&#34;project&#34;, IAMBindingArgs.builder()        
 *             .role(&#34;roles/iam.serviceAccountTokenCreator&#34;)
 *             .members(sa.email().apply(email -&gt; String.format(&#34;serviceAccount:%s&#34;, email)))
 *             .build());
 * 
 *         var topic = new Topic(&#34;topic&#34;);
 * 
 *         var subscription = new Subscription(&#34;subscription&#34;, SubscriptionArgs.builder()        
 *             .topic(topic.name())
 *             .pushConfig(SubscriptionPushConfigArgs.builder()
 *                 .pushEndpoint(default_.statuses().apply(statuses -&gt; statuses[0].url()))
 *                 .oidcToken(SubscriptionPushConfigOidcTokenArgs.builder()
 *                     .serviceAccountEmail(sa.email())
 *                     .build())
 *                 .attributes(Map.of(&#34;x-goog-version&#34;, &#34;v1&#34;))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Basic
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .latestRevision(true)
 *                 .percent(100)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Sql
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new DatabaseInstance(&#34;instance&#34;, DatabaseInstanceArgs.builder()        
 *             .region(&#34;us-east1&#34;)
 *             .databaseVersion(&#34;MYSQL_5_7&#34;)
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier(&#34;db-f1-micro&#34;)
 *                 .build())
 *             .deletionProtection(&#34;true&#34;)
 *             .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .metadata(ServiceTemplateMetadataArgs.builder()
 *                     .annotations(Map.ofEntries(
 *                         Map.entry(&#34;autoscaling.knative.dev/maxScale&#34;, &#34;1000&#34;),
 *                         Map.entry(&#34;run.googleapis.com/cloudsql-instances&#34;, instance.connectionName()),
 *                         Map.entry(&#34;run.googleapis.com/client-name&#34;, &#34;demo&#34;)
 *                     ))
 *                     .build())
 *                 .build())
 *             .autogenerateRevisionName(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Noauth
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         final var noauthIAMPolicy = Output.of(OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
 *             .bindings(GetIAMPolicyBindingArgs.builder()
 *                 .role(&#34;roles/run.invoker&#34;)
 *                 .members(&#34;allUsers&#34;)
 *                 .build())
 *             .build()));
 * 
 *         var noauthIamPolicy = new IamPolicy(&#34;noauthIamPolicy&#34;, IamPolicyArgs.builder()        
 *             .location(default_.location())
 *             .project(default_.project())
 *             .service(default_.name())
 *             .policyData(noauthIAMPolicy.apply(getIAMPolicyResult -&gt; getIAMPolicyResult.policyData()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Multiple Environment Variables
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .envs(                        
 *                             ServiceTemplateSpecContainerEnvArgs.builder()
 *                                 .name(&#34;SOURCE&#34;)
 *                                 .value(&#34;remote&#34;)
 *                                 .build(),
 *                             ServiceTemplateSpecContainerEnvArgs.builder()
 *                                 .name(&#34;TARGET&#34;)
 *                                 .value(&#34;home&#34;)
 *                                 .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .metadata(ServiceMetadataArgs.builder()
 *                 .annotations(Map.of(&#34;generated-by&#34;, &#34;magic-modules&#34;))
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .autogenerateRevisionName(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Traffic Split
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .metadata(ServiceTemplateMetadataArgs.builder()
 *                     .name(&#34;cloudrun-srv-green&#34;)
 *                     .build())
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(            
 *                 ServiceTrafficArgs.builder()
 *                     .percent(25)
 *                     .revisionName(&#34;cloudrun-srv-green&#34;)
 *                     .build(),
 *                 ServiceTrafficArgs.builder()
 *                     .percent(75)
 *                     .revisionName(&#34;cloudrun-srv-blue&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Scheduled
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var runApi = new Service(&#34;runApi&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .service(&#34;run.googleapis.com&#34;)
 *             .disableDependentServices(true)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var iamApi = new Service(&#34;iamApi&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .service(&#34;iam.googleapis.com&#34;)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var resourceManagerApi = new Service(&#34;resourceManagerApi&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .service(&#34;cloudresourcemanager.googleapis.com&#34;)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var schedulerApi = new Service(&#34;schedulerApi&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .service(&#34;cloudscheduler.googleapis.com&#34;)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultService = new Service(&#34;defaultService&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(runApi)
 *                 .build());
 * 
 *         var defaultAccount = new Account(&#34;defaultAccount&#34;, AccountArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .accountId(&#34;scheduler-sa&#34;)
 *             .description(&#34;Cloud Scheduler service account; used to trigger scheduled Cloud Run jobs.&#34;)
 *             .displayName(&#34;scheduler-sa&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(iamApi)
 *                 .build());
 * 
 *         var defaultJob = new Job(&#34;defaultJob&#34;, JobArgs.builder()        
 *             .description(&#34;Invoke a Cloud Run container on a schedule.&#34;)
 *             .schedule(&#34;*{@literal /}8 * * * *&#34;)
 *             .timeZone(&#34;America/New_York&#34;)
 *             .attemptDeadline(&#34;320s&#34;)
 *             .retryConfig(JobRetryConfigArgs.builder()
 *                 .retryCount(1)
 *                 .build())
 *             .httpTarget(JobHttpTargetArgs.builder()
 *                 .httpMethod(&#34;POST&#34;)
 *                 .uri(defaultService.statuses().apply(statuses -&gt; statuses[0].url()))
 *                 .oidcToken(JobHttpTargetOidcTokenArgs.builder()
 *                     .serviceAccountEmail(defaultAccount.email())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(schedulerApi)
 *                 .build());
 * 
 *         var defaultIamMember = new IamMember(&#34;defaultIamMember&#34;, IamMemberArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .location(defaultService.location())
 *             .service(defaultService.name())
 *             .role(&#34;roles/run.invoker&#34;)
 *             .member(defaultAccount.email().apply(email -&gt; String.format(&#34;serviceAccount:%s&#34;, email)))
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Secret Environment Variables
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = Output.of(OrganizationsFunctions.getProject());
 * 
 *         var secret = new Secret(&#34;secret&#34;, SecretArgs.builder()        
 *             .secretId(&#34;secret&#34;)
 *             .replication(SecretReplicationArgs.builder()
 *                 .automatic(true)
 *                 .build())
 *             .build());
 * 
 *         var secret_version_data = new SecretVersion(&#34;secret-version-data&#34;, SecretVersionArgs.builder()        
 *             .secret(secret.name())
 *             .secretData(&#34;secret-data&#34;)
 *             .build());
 * 
 *         var secret_access = new SecretIamMember(&#34;secret-access&#34;, SecretIamMemberArgs.builder()        
 *             .secretId(secret.id())
 *             .role(&#34;roles/secretmanager.secretAccessor&#34;)
 *             .member(String.format(&#34;serviceAccount:%s-compute@developer.gserviceaccount.com&#34;, project.apply(getProjectResult -&gt; getProjectResult.number())))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret)
 *                 .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;gcr.io/cloudrun/hello&#34;)
 *                         .envs(ServiceTemplateSpecContainerEnvArgs.builder()
 *                             .name(&#34;SECRET_ENV_VAR&#34;)
 *                             .valueFrom(ServiceTemplateSpecContainerEnvValueFromArgs.builder()
 *                                 .secretKeyRef(ServiceTemplateSpecContainerEnvValueFromSecretKeyRefArgs.builder()
 *                                     .name(secret.secretId())
 *                                     .key(&#34;1&#34;)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .metadata(ServiceMetadataArgs.builder()
 *                 .annotations(Map.of(&#34;generated-by&#34;, &#34;magic-modules&#34;))
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .autogenerateRevisionName(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret_version_data)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Secret Volumes
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = Output.of(OrganizationsFunctions.getProject());
 * 
 *         var secret = new Secret(&#34;secret&#34;, SecretArgs.builder()        
 *             .secretId(&#34;secret&#34;)
 *             .replication(SecretReplicationArgs.builder()
 *                 .automatic(true)
 *                 .build())
 *             .build());
 * 
 *         var secret_version_data = new SecretVersion(&#34;secret-version-data&#34;, SecretVersionArgs.builder()        
 *             .secret(secret.name())
 *             .secretData(&#34;secret-data&#34;)
 *             .build());
 * 
 *         var secret_access = new SecretIamMember(&#34;secret-access&#34;, SecretIamMemberArgs.builder()        
 *             .secretId(secret.id())
 *             .role(&#34;roles/secretmanager.secretAccessor&#34;)
 *             .member(String.format(&#34;serviceAccount:%s-compute@developer.gserviceaccount.com&#34;, project.apply(getProjectResult -&gt; getProjectResult.number())))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret)
 *                 .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;gcr.io/cloudrun/hello&#34;)
 *                         .volumeMounts(ServiceTemplateSpecContainerVolumeMountArgs.builder()
 *                             .name(&#34;a-volume&#34;)
 *                             .mountPath(&#34;/secrets&#34;)
 *                             .build())
 *                         .build())
 *                     .volumes(ServiceTemplateSpecVolumeArgs.builder()
 *                         .name(&#34;a-volume&#34;)
 *                         .secret(ServiceTemplateSpecVolumeSecretArgs.builder()
 *                             .secretName(secret.secretId())
 *                             .defaultMode(292)
 *                             .items(ServiceTemplateSpecVolumeSecretItemArgs.builder()
 *                                 .key(&#34;1&#34;)
 *                                 .path(&#34;my-secret&#34;)
 *                                 .mode(256)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .metadata(ServiceMetadataArgs.builder()
 *                 .annotations(Map.of(&#34;generated-by&#34;, &#34;magic-modules&#34;))
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .autogenerateRevisionName(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secret_version_data)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Ingress
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;gcr.io/cloudrun/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .metadata(ServiceMetadataArgs.builder()
 *                 .annotations(Map.of(&#34;run.googleapis.com/ingress&#34;, &#34;internal&#34;))
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Eventarc Basic Tf
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var projectProject = Output.of(OrganizationsFunctions.getProject());
 * 
 *         var run = new Service(&#34;run&#34;, ServiceArgs.builder()        
 *             .service(&#34;run.googleapis.com&#34;)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var eventarc = new Service(&#34;eventarc&#34;, ServiceArgs.builder()        
 *             .service(&#34;eventarc.googleapis.com&#34;)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-east1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;gcr.io/cloudrun/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .latestRevision(true)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(run)
 *                 .build());
 * 
 *         var allUsers = new IamMember(&#34;allUsers&#34;, IamMemberArgs.builder()        
 *             .service(default_.name())
 *             .location(default_.location())
 *             .role(&#34;roles/run.invoker&#34;)
 *             .member(&#34;allUsers&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var trigger_pubsub_tf = new Trigger(&#34;trigger-pubsub-tf&#34;, TriggerArgs.builder()        
 *             .location(default_.location())
 *             .matchingCriterias(TriggerMatchingCriteriaArgs.builder()
 *                 .attribute(&#34;type&#34;)
 *                 .value(&#34;google.cloud.pubsub.topic.v1.messagePublished&#34;)
 *                 .build())
 *             .destination(TriggerDestinationArgs.builder()
 *                 .cloudRunService(TriggerDestinationCloudRunServiceArgs.builder()
 *                     .service(default_.name())
 *                     .region(default_.location())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(eventarc)
 *                 .build());
 * 
 *         var projectIAMBinding = new IAMBinding(&#34;projectIAMBinding&#34;, IAMBindingArgs.builder()        
 *             .project(projectProject.apply(getProjectResult -&gt; getProjectResult.id()))
 *             .role(&#34;roles/eventarc.eventReceiver&#34;)
 *             .members(String.format(&#34;serviceAccount:%s-compute@developer.gserviceaccount.com&#34;, projectProject.apply(getProjectResult -&gt; getProjectResult.number())))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var trigger_auditlog_tf = new Trigger(&#34;trigger-auditlog-tf&#34;, TriggerArgs.builder()        
 *             .location(default_.location())
 *             .project(projectProject.apply(getProjectResult -&gt; getProjectResult.id()))
 *             .matchingCriterias(            
 *                 TriggerMatchingCriteriaArgs.builder()
 *                     .attribute(&#34;type&#34;)
 *                     .value(&#34;google.cloud.audit.log.v1.written&#34;)
 *                     .build(),
 *                 TriggerMatchingCriteriaArgs.builder()
 *                     .attribute(&#34;serviceName&#34;)
 *                     .value(&#34;storage.googleapis.com&#34;)
 *                     .build(),
 *                 TriggerMatchingCriteriaArgs.builder()
 *                     .attribute(&#34;methodName&#34;)
 *                     .value(&#34;storage.objects.create&#34;)
 *                     .build())
 *             .destination(TriggerDestinationArgs.builder()
 *                 .cloudRunService(TriggerDestinationCloudRunServiceArgs.builder()
 *                     .service(default_.name())
 *                     .region(default_.location())
 *                     .build())
 *                 .build())
 *             .serviceAccount(String.format(&#34;%s-compute@developer.gserviceaccount.com&#34;, projectProject.apply(getProjectResult -&gt; getProjectResult.number())))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(eventarc)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Multiple Regions
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         var computeApi = new Service(&#34;computeApi&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .service(&#34;compute.googleapis.com&#34;)
 *             .disableDependentServices(true)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var runApi = new Service(&#34;runApi&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .service(&#34;run.googleapis.com&#34;)
 *             .disableDependentServices(true)
 *             .disableOnDestroy(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         final var domainName = config.get(&#34;domainName&#34;).orElse(&#34;example.com&#34;);
 *         final var runRegions = config.get(&#34;runRegions&#34;).orElse(        
 *             &#34;us-central1&#34;,
 *             &#34;europe-west1&#34;);
 *         var lbDefaultGlobalAddress = new GlobalAddress(&#34;lbDefaultGlobalAddress&#34;, GlobalAddressArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(computeApi)
 *                 .build());
 * 
 *         for (var i = 0; i &lt; runRegions.length(); i++) {
 *             new Service(&#34;runDefault-&#34; + i, ServiceArgs.builder()            
 *                 .project(&#34;my-project-name&#34;)
 *                 .location(runRegions[range.value()])
 *                 .template(ServiceTemplateArgs.builder()
 *                     .spec(ServiceTemplateSpecArgs.builder()
 *                         .containers(ServiceTemplateSpecContainerArgs.builder()
 *                             .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .traffics(ServiceTrafficArgs.builder()
 *                     .percent(100)
 *                     .latestRevision(true)
 *                     .build())
 *                 .build(), CustomResourceOptions.builder()
 *                     .provider(google_beta)
 *                     .dependsOn(runApi)
 *                     .build());
 * 
 *         
 * }
 *         for (var i = 0; i &lt; runRegions.length(); i++) {
 *             new RegionNetworkEndpointGroup(&#34;lbDefaultRegionNetworkEndpointGroup-&#34; + i, RegionNetworkEndpointGroupArgs.builder()            
 *                 .project(&#34;my-project-name&#34;)
 *                 .networkEndpointType(&#34;SERVERLESS&#34;)
 *                 .region(runRegions[range.value()])
 *                 .cloudRun(RegionNetworkEndpointGroupCloudRunArgs.builder()
 *                     .service(runDefault[count.index()].name())
 *                     .build())
 *                 .build(), CustomResourceOptions.builder()
 *                     .provider(google_beta)
 *                     .build());
 * 
 *         
 * }
 *         var lbDefaultBackendService = new BackendService(&#34;lbDefaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .backends(            
 *                 BackendServiceBackendArgs.builder()
 *                     .balancingMode(&#34;UTILIZATION&#34;)
 *                     .capacityScaler(0.85)
 *                     .group(lbDefaultRegionNetworkEndpointGroup[0].id())
 *                     .build(),
 *                 BackendServiceBackendArgs.builder()
 *                     .balancingMode(&#34;UTILIZATION&#34;)
 *                     .capacityScaler(0.85)
 *                     .group(lbDefaultRegionNetworkEndpointGroup[1].id())
 *                     .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(computeApi)
 *                 .build());
 * 
 *         var lbDefaultURLMap = new URLMap(&#34;lbDefaultURLMap&#34;, URLMapArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .defaultService(lbDefaultBackendService.id())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(lbDefaultBackendService.id())
 *                 .routeRules(URLMapPathMatcherRouteRuleArgs.builder()
 *                     .priority(1)
 *                     .urlRedirect(URLMapPathMatcherRouteRuleUrlRedirectArgs.builder()
 *                         .httpsRedirect(true)
 *                         .redirectResponseCode(&#34;MOVED_PERMANENTLY_DEFAULT&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var lbDefaultManagedSslCertificate = new ManagedSslCertificate(&#34;lbDefaultManagedSslCertificate&#34;, ManagedSslCertificateArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .managed(ManagedSslCertificateManagedArgs.builder()
 *                 .domains(domainName)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var lbDefaultTargetHttpsProxy = new TargetHttpsProxy(&#34;lbDefaultTargetHttpsProxy&#34;, TargetHttpsProxyArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .urlMap(lbDefaultURLMap.id())
 *             .sslCertificates(lbDefaultManagedSslCertificate.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(lbDefaultManagedSslCertificate)
 *                 .build());
 * 
 *         var lbDefaultGlobalForwardingRule = new GlobalForwardingRule(&#34;lbDefaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .target(lbDefaultTargetHttpsProxy.id())
 *             .ipAddress(lbDefaultGlobalAddress.id())
 *             .portRange(&#34;443&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(lbDefaultTargetHttpsProxy)
 *                 .build());
 * 
 *         ctx.export(&#34;loadBalancerIpAddr&#34;, lbDefaultGlobalAddress.address());
 *         for (var i = 0; i &lt; runRegions.length(); i++) {
 *             new IamMember(&#34;runAllowUnauthenticated-&#34; + i, IamMemberArgs.builder()            
 *                 .project(&#34;my-project-name&#34;)
 *                 .location(runDefault[range.value()].location())
 *                 .service(runDefault[range.value()].name())
 *                 .role(&#34;roles/run.invoker&#34;)
 *                 .member(&#34;allUsers&#34;)
 *                 .build(), CustomResourceOptions.builder()
 *                     .provider(google_beta)
 *                     .build());
 * 
 *         
 * }
 *         var httpsDefaultURLMap = new URLMap(&#34;httpsDefaultURLMap&#34;, URLMapArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .defaultUrlRedirect(URLMapDefaultUrlRedirectArgs.builder()
 *                 .redirectResponseCode(&#34;MOVED_PERMANENTLY_DEFAULT&#34;)
 *                 .httpsRedirect(true)
 *                 .stripQuery(false)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var httpsDefaultTargetHttpProxy = new TargetHttpProxy(&#34;httpsDefaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .urlMap(httpsDefaultURLMap.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(httpsDefaultURLMap)
 *                 .build());
 * 
 *         var httpsDefaultGlobalForwardingRule = new GlobalForwardingRule(&#34;httpsDefaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .target(httpsDefaultTargetHttpProxy.id())
 *             .ipAddress(lbDefaultGlobalAddress.id())
 *             .portRange(&#34;80&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(httpsDefaultTargetHttpProxy)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Remove Tag
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template()
 *             .traffics(            
 *                 ServiceTrafficArgs.builder()
 *                     .percent(100)
 *                     .revisionName(&#34;cloudrun-srv-green&#34;)
 *                     .build(),
 *                 ServiceTrafficArgs.builder()
 *                     .percent(0)
 *                     .revisionName(&#34;cloudrun-srv-blue&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Deploy Tag
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .metadata(ServiceTemplateMetadataArgs.builder()
 *                     .name(&#34;cloudrun-srv-blue&#34;)
 *                     .build())
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(            
 *                 ServiceTrafficArgs.builder()
 *                     .percent(100)
 *                     .revisionName(&#34;cloudrun-srv-green&#34;)
 *                     .build(),
 *                 ServiceTrafficArgs.builder()
 *                     .percent(0)
 *                     .revisionName(&#34;cloudrun-srv-blue&#34;)
 *                     .tag(&#34;tag-name&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Add Tag
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template()
 *             .traffics(            
 *                 ServiceTrafficArgs.builder()
 *                     .percent(100)
 *                     .revisionName(&#34;cloudrun-srv-green&#34;)
 *                     .build(),
 *                 ServiceTrafficArgs.builder()
 *                     .percent(0)
 *                     .revisionName(&#34;cloudrun-srv-blue&#34;)
 *                     .tag(&#34;tag-name&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Traffic Gradual Rollout
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .autogenerateRevisionName(true)
 *             .location(&#34;us-central1&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .spec(ServiceTemplateSpecArgs.builder()
 *                     .containers(ServiceTemplateSpecContainerArgs.builder()
 *                         .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .traffics(            
 *                 ServiceTrafficArgs.builder()
 *                     .percent(100)
 *                     .revisionName(&#34;cloudrun-srv-green&#34;)
 *                     .build(),
 *                 ServiceTrafficArgs.builder()
 *                     .latestRevision(true)
 *                     .percent(0)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Traffic Latest Revision
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template()
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .latestRevision(true)
 *                 .percent(100)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Traffic Rollback
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template()
 *             .traffics(ServiceTrafficArgs.builder()
 *                 .percent(100)
 *                 .revisionName(&#34;cloudrun-srv-green&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Cloud Run Service Traffic Split Tag
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Service(&#34;default&#34;, ServiceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .template()
 *             .traffics(            
 *                 ServiceTrafficArgs.builder()
 *                     .percent(50)
 *                     .revisionName(&#34;cloudrun-srv-green&#34;)
 *                     .build(),
 *                 ServiceTrafficArgs.builder()
 *                     .percent(50)
 *                     .tag(&#34;tag-name&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Service can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default locations/{{location}}/namespaces/{{project}}/services/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:cloudrun/service:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     * 
     */
    @Export(name="autogenerateRevisionName", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autogenerateRevisionName;

    /**
     * @return If set to `true`, the revision name (template.metadata.name) will be omitted and
     * autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
     * is also set.
     * (For legacy support, if `template.metadata.name` is unset in state while
     * this field is set to false, the revision name will still autogenerate.)
     * 
     */
    public Output<Optional<Boolean>> autogenerateRevisionName() {
        return Codegen.optional(this.autogenerateRevisionName);
    }
    /**
     * The location of the cloud run instance. eg us-central1
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location of the cloud run instance. eg us-central1
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     * 
     */
    @Export(name="metadata", type=ServiceMetadata.class, parameters={})
    private Output<ServiceMetadata> metadata;

    /**
     * @return Metadata associated with this Service, including name, namespace, labels,
     * and annotations.
     * Structure is documented below.
     * 
     */
    public Output<ServiceMetadata> metadata() {
        return this.metadata;
    }
    /**
     * Volume&#39;s name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Volume&#39;s name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The current status of the Service.
     * 
     */
    @Export(name="statuses", type=List.class, parameters={ServiceStatus.class})
    private Output<List<ServiceStatus>> statuses;

    /**
     * @return The current status of the Service.
     * 
     */
    public Output<List<ServiceStatus>> statuses() {
        return this.statuses;
    }
    /**
     * template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn&#39;t otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     * 
     */
    @Export(name="template", type=ServiceTemplate.class, parameters={})
    private Output</* @Nullable */ ServiceTemplate> template;

    /**
     * @return template holds the latest specification for the Revision to
     * be stamped out. The template references the container image, and may also
     * include labels and annotations that should be attached to the Revision.
     * To correlate a Revision, and/or to force a Revision to be created when the
     * spec doesn&#39;t otherwise change, a nonce label may be provided in the
     * template metadata. For more details, see:
     * https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
     * Cloud Run does not currently support referencing a build that is
     * responsible for materializing the container image from source.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ServiceTemplate>> template() {
        return Codegen.optional(this.template);
    }
    /**
     * Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     * 
     */
    @Export(name="traffics", type=List.class, parameters={ServiceTraffic.class})
    private Output<List<ServiceTraffic>> traffics;

    /**
     * @return Traffic specifies how to distribute traffic over a collection of Knative Revisions
     * and Configurations
     * Structure is documented below.
     * 
     */
    public Output<List<ServiceTraffic>> traffics() {
        return this.traffics;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudrun/service:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Service(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudrun/service:Service", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
