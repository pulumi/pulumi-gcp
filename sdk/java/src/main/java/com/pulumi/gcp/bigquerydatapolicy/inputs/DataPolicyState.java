// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquerydatapolicy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquerydatapolicy.inputs.DataPolicyDataMaskingPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final DataPolicyState Empty = new DataPolicyState();

    /**
     * The data masking policy that specifies the data masking rule to use.
     * Structure is documented below.
     * 
     */
    @Import(name="dataMaskingPolicy")
    private @Nullable Output<DataPolicyDataMaskingPolicyArgs> dataMaskingPolicy;

    /**
     * @return The data masking policy that specifies the data masking rule to use.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataPolicyDataMaskingPolicyArgs>> dataMaskingPolicy() {
        return Optional.ofNullable(this.dataMaskingPolicy);
    }

    /**
     * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in part of the resource name.
     * 
     */
    @Import(name="dataPolicyId")
    private @Nullable Output<String> dataPolicyId;

    /**
     * @return User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in part of the resource name.
     * 
     */
    public Optional<Output<String>> dataPolicyId() {
        return Optional.ofNullable(this.dataPolicyId);
    }

    /**
     * The enrollment level of the service.
     * Possible values are `COLUMN_LEVEL_SECURITY_POLICY` and `DATA_MASKING_POLICY`.
     * 
     */
    @Import(name="dataPolicyType")
    private @Nullable Output<String> dataPolicyType;

    /**
     * @return The enrollment level of the service.
     * Possible values are `COLUMN_LEVEL_SECURITY_POLICY` and `DATA_MASKING_POLICY`.
     * 
     */
    public Optional<Output<String>> dataPolicyType() {
        return Optional.ofNullable(this.dataPolicyType);
    }

    /**
     * The name of the location of the data policy.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The name of the location of the data policy.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name of this data policy, in the format of projects/{project_number}/locations/{locationId}/dataPolicies/{dataPolicyId}.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name of this data policy, in the format of projects/{project_number}/locations/{locationId}/dataPolicies/{dataPolicyId}.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Policy tag resource name, in the format of projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
     * 
     */
    @Import(name="policyTag")
    private @Nullable Output<String> policyTag;

    /**
     * @return Policy tag resource name, in the format of projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
     * 
     */
    public Optional<Output<String>> policyTag() {
        return Optional.ofNullable(this.policyTag);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private DataPolicyState() {}

    private DataPolicyState(DataPolicyState $) {
        this.dataMaskingPolicy = $.dataMaskingPolicy;
        this.dataPolicyId = $.dataPolicyId;
        this.dataPolicyType = $.dataPolicyType;
        this.location = $.location;
        this.name = $.name;
        this.policyTag = $.policyTag;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataPolicyState $;

        public Builder() {
            $ = new DataPolicyState();
        }

        public Builder(DataPolicyState defaults) {
            $ = new DataPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataMaskingPolicy The data masking policy that specifies the data masking rule to use.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataMaskingPolicy(@Nullable Output<DataPolicyDataMaskingPolicyArgs> dataMaskingPolicy) {
            $.dataMaskingPolicy = dataMaskingPolicy;
            return this;
        }

        /**
         * @param dataMaskingPolicy The data masking policy that specifies the data masking rule to use.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataMaskingPolicy(DataPolicyDataMaskingPolicyArgs dataMaskingPolicy) {
            return dataMaskingPolicy(Output.of(dataMaskingPolicy));
        }

        /**
         * @param dataPolicyId User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in part of the resource name.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicyId(@Nullable Output<String> dataPolicyId) {
            $.dataPolicyId = dataPolicyId;
            return this;
        }

        /**
         * @param dataPolicyId User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in part of the resource name.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicyId(String dataPolicyId) {
            return dataPolicyId(Output.of(dataPolicyId));
        }

        /**
         * @param dataPolicyType The enrollment level of the service.
         * Possible values are `COLUMN_LEVEL_SECURITY_POLICY` and `DATA_MASKING_POLICY`.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicyType(@Nullable Output<String> dataPolicyType) {
            $.dataPolicyType = dataPolicyType;
            return this;
        }

        /**
         * @param dataPolicyType The enrollment level of the service.
         * Possible values are `COLUMN_LEVEL_SECURITY_POLICY` and `DATA_MASKING_POLICY`.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicyType(String dataPolicyType) {
            return dataPolicyType(Output.of(dataPolicyType));
        }

        /**
         * @param location The name of the location of the data policy.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location of the data policy.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Resource name of this data policy, in the format of projects/{project_number}/locations/{locationId}/dataPolicies/{dataPolicyId}.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name of this data policy, in the format of projects/{project_number}/locations/{locationId}/dataPolicies/{dataPolicyId}.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyTag Policy tag resource name, in the format of projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
         * 
         * @return builder
         * 
         */
        public Builder policyTag(@Nullable Output<String> policyTag) {
            $.policyTag = policyTag;
            return this;
        }

        /**
         * @param policyTag Policy tag resource name, in the format of projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
         * 
         * @return builder
         * 
         */
        public Builder policyTag(String policyTag) {
            return policyTag(Output.of(policyTag));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public DataPolicyState build() {
            return $;
        }
    }

}
