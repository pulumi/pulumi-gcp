// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetastoreTableIamPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetastoreTableIamPolicyPlainArgs Empty = new GetMetastoreTableIamPolicyPlainArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="databaseId", required=true)
    private String databaseId;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }

    /**
     * Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
     * location is specified, it is taken from the provider configuration.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    /**
     * @return Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
     * location is specified, it is taken from the provider configuration.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="serviceId", required=true)
    private String serviceId;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="table", required=true)
    private String table;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public String table() {
        return this.table;
    }

    private GetMetastoreTableIamPolicyPlainArgs() {}

    private GetMetastoreTableIamPolicyPlainArgs(GetMetastoreTableIamPolicyPlainArgs $) {
        this.databaseId = $.databaseId;
        this.location = $.location;
        this.project = $.project;
        this.serviceId = $.serviceId;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetastoreTableIamPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetastoreTableIamPolicyPlainArgs $;

        public Builder() {
            $ = new GetMetastoreTableIamPolicyPlainArgs();
        }

        public Builder(GetMetastoreTableIamPolicyPlainArgs defaults) {
            $ = new GetMetastoreTableIamPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseId Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param location Used to find the parent resource to bind the IAM policy to. If not specified,
         * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
         * location is specified, it is taken from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param serviceId Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param table Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            $.table = table;
            return this;
        }

        public GetMetastoreTableIamPolicyPlainArgs build() {
            if ($.databaseId == null) {
                throw new MissingRequiredPropertyException("GetMetastoreTableIamPolicyPlainArgs", "databaseId");
            }
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("GetMetastoreTableIamPolicyPlainArgs", "serviceId");
            }
            if ($.table == null) {
                throw new MissingRequiredPropertyException("GetMetastoreTableIamPolicyPlainArgs", "table");
            }
            return $;
        }
    }

}
