// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudidentity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupsGroupAdditionalGroupKey;
import com.pulumi.gcp.cloudidentity.outputs.GetGroupsGroupGroupKey;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGroupsGroup {
    /**
     * @return Additional group keys associated with the Group
     * 
     */
    private List<GetGroupsGroupAdditionalGroupKey> additionalGroupKeys;
    /**
     * @return The time when the Group was created.
     * 
     */
    private String createTime;
    /**
     * @return An extended description to help users determine the purpose of a Group.
     * 
     */
    private String description;
    /**
     * @return The display name of the Group.
     * 
     */
    private String displayName;
    /**
     * @return EntityKey of the Group.  Structure is documented below.
     * 
     */
    private List<GetGroupsGroupGroupKey> groupKeys;
    /**
     * @return The initial configuration options for creating a Group.
     * 
     * See the
     * [API reference](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups/create#initialgroupconfig)
     * for possible values. Default value: &#34;EMPTY&#34; Possible values: [&#34;INITIAL_GROUP_CONFIG_UNSPECIFIED&#34;, &#34;WITH_INITIAL_OWNER&#34;, &#34;EMPTY&#34;]
     * 
     */
    private String initialGroupConfig;
    /**
     * @return The labels that apply to the Group.
     * Contains &#39;cloudidentity.googleapis.com/groups.discussion_forum&#39;: &#39;&#39; if the Group is a Google Group or
     * &#39;system/groups/external&#39;: &#39;&#39; if the Group is an external-identity-mapped group.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Resource name of the Group in the format: groups/{group_id}, where `group_id` is the unique ID assigned to the Group.
     * 
     */
    private String name;
    /**
     * @return The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
     * 
     */
    private String parent;
    /**
     * @return The time when the Group was last updated.
     * 
     */
    private String updateTime;

    private GetGroupsGroup() {}
    /**
     * @return Additional group keys associated with the Group
     * 
     */
    public List<GetGroupsGroupAdditionalGroupKey> additionalGroupKeys() {
        return this.additionalGroupKeys;
    }
    /**
     * @return The time when the Group was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return An extended description to help users determine the purpose of a Group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of the Group.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return EntityKey of the Group.  Structure is documented below.
     * 
     */
    public List<GetGroupsGroupGroupKey> groupKeys() {
        return this.groupKeys;
    }
    /**
     * @return The initial configuration options for creating a Group.
     * 
     * See the
     * [API reference](https://cloud.google.com/identity/docs/reference/rest/v1beta1/groups/create#initialgroupconfig)
     * for possible values. Default value: &#34;EMPTY&#34; Possible values: [&#34;INITIAL_GROUP_CONFIG_UNSPECIFIED&#34;, &#34;WITH_INITIAL_OWNER&#34;, &#34;EMPTY&#34;]
     * 
     */
    public String initialGroupConfig() {
        return this.initialGroupConfig;
    }
    /**
     * @return The labels that apply to the Group.
     * Contains &#39;cloudidentity.googleapis.com/groups.discussion_forum&#39;: &#39;&#39; if the Group is a Google Group or
     * &#39;system/groups/external&#39;: &#39;&#39; if the Group is an external-identity-mapped group.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Resource name of the Group in the format: groups/{group_id}, where `group_id` is the unique ID assigned to the Group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The parent resource under which to list all Groups. Must be of the form identitysources/{identity_source_id} for external- identity-mapped groups or customers/{customer_id} for Google Groups.
     * 
     */
    public String parent() {
        return this.parent;
    }
    /**
     * @return The time when the Group was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupsGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGroupsGroupAdditionalGroupKey> additionalGroupKeys;
        private String createTime;
        private String description;
        private String displayName;
        private List<GetGroupsGroupGroupKey> groupKeys;
        private String initialGroupConfig;
        private Map<String,String> labels;
        private String name;
        private String parent;
        private String updateTime;
        public Builder() {}
        public Builder(GetGroupsGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalGroupKeys = defaults.additionalGroupKeys;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.groupKeys = defaults.groupKeys;
    	      this.initialGroupConfig = defaults.initialGroupConfig;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder additionalGroupKeys(List<GetGroupsGroupAdditionalGroupKey> additionalGroupKeys) {
            if (additionalGroupKeys == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "additionalGroupKeys");
            }
            this.additionalGroupKeys = additionalGroupKeys;
            return this;
        }
        public Builder additionalGroupKeys(GetGroupsGroupAdditionalGroupKey... additionalGroupKeys) {
            return additionalGroupKeys(List.of(additionalGroupKeys));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder groupKeys(List<GetGroupsGroupGroupKey> groupKeys) {
            if (groupKeys == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "groupKeys");
            }
            this.groupKeys = groupKeys;
            return this;
        }
        public Builder groupKeys(GetGroupsGroupGroupKey... groupKeys) {
            return groupKeys(List.of(groupKeys));
        }
        @CustomType.Setter
        public Builder initialGroupConfig(String initialGroupConfig) {
            if (initialGroupConfig == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "initialGroupConfig");
            }
            this.initialGroupConfig = initialGroupConfig;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetGroupsGroup", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetGroupsGroup build() {
            final var _resultValue = new GetGroupsGroup();
            _resultValue.additionalGroupKeys = additionalGroupKeys;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.groupKeys = groupKeys;
            _resultValue.initialGroupConfig = initialGroupConfig;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.parent = parent;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
