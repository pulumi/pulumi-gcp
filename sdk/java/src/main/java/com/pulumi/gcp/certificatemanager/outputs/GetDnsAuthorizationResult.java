// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificatemanager.outputs.GetDnsAuthorizationDnsResourceRecord;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDnsAuthorizationResult {
    private String description;
    private List<GetDnsAuthorizationDnsResourceRecord> dnsResourceRecords;
    private String domain;
    private Map<String,String> effectiveLabels;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private @Nullable String location;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private String type;

    private GetDnsAuthorizationResult() {}
    public String description() {
        return this.description;
    }
    public List<GetDnsAuthorizationDnsResourceRecord> dnsResourceRecords() {
        return this.dnsResourceRecords;
    }
    public String domain() {
        return this.domain;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsAuthorizationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<GetDnsAuthorizationDnsResourceRecord> dnsResourceRecords;
        private String domain;
        private Map<String,String> effectiveLabels;
        private String id;
        private Map<String,String> labels;
        private @Nullable String location;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private String type;
        public Builder() {}
        public Builder(GetDnsAuthorizationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.dnsResourceRecords = defaults.dnsResourceRecords;
    	      this.domain = defaults.domain;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsResourceRecords(List<GetDnsAuthorizationDnsResourceRecord> dnsResourceRecords) {
            if (dnsResourceRecords == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "dnsResourceRecords");
            }
            this.dnsResourceRecords = dnsResourceRecords;
            return this;
        }
        public Builder dnsResourceRecords(GetDnsAuthorizationDnsResourceRecord... dnsResourceRecords) {
            return dnsResourceRecords(List.of(dnsResourceRecords));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDnsAuthorizationResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetDnsAuthorizationResult build() {
            final var _resultValue = new GetDnsAuthorizationResult();
            _resultValue.description = description;
            _resultValue.dnsResourceRecords = dnsResourceRecords;
            _resultValue.domain = domain;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
