// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.outputs.GetTableRangePartitioningRange;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTableRangePartitioning {
    /**
     * @return The field used to determine how to create a range-based partition.
     * 
     */
    private String field;
    /**
     * @return Information required to partition based on ranges. Structure is documented below.
     * 
     */
    private List<GetTableRangePartitioningRange> ranges;

    private GetTableRangePartitioning() {}
    /**
     * @return The field used to determine how to create a range-based partition.
     * 
     */
    public String field() {
        return this.field;
    }
    /**
     * @return Information required to partition based on ranges. Structure is documented below.
     * 
     */
    public List<GetTableRangePartitioningRange> ranges() {
        return this.ranges;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableRangePartitioning defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String field;
        private List<GetTableRangePartitioningRange> ranges;
        public Builder() {}
        public Builder(GetTableRangePartitioning defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.field = defaults.field;
    	      this.ranges = defaults.ranges;
        }

        @CustomType.Setter
        public Builder field(String field) {
            if (field == null) {
              throw new MissingRequiredPropertyException("GetTableRangePartitioning", "field");
            }
            this.field = field;
            return this;
        }
        @CustomType.Setter
        public Builder ranges(List<GetTableRangePartitioningRange> ranges) {
            if (ranges == null) {
              throw new MissingRequiredPropertyException("GetTableRangePartitioning", "ranges");
            }
            this.ranges = ranges;
            return this;
        }
        public Builder ranges(GetTableRangePartitioningRange... ranges) {
            return ranges(List.of(ranges));
        }
        public GetTableRangePartitioning build() {
            final var _resultValue = new GetTableRangePartitioning();
            _resultValue.field = field;
            _resultValue.ranges = ranges;
            return _resultValue;
        }
    }
}
