// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceAttachedDisk {
    /**
     * @return Name with which the attached disk will be accessible
     * under `/dev/disk/by-id/google-*`
     * 
     */
    private @Nullable String deviceName;
    /**
     * @return A 256-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
     * encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * to encrypt this disk. Only one of `kms_key_self_link`, `disk_encryption_key_rsa` and `disk_encryption_key_raw`
     * may be set.
     * 
     */
    private @Nullable String diskEncryptionKeyRaw;
    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) to encrypt this disk. Only one of `kms_key_self_link`, `disk_encryption_key_rsa` and `disk_encryption_key_raw`
     * may be set.
     * 
     */
    private @Nullable String diskEncryptionKeyRsa;
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) that protects this resource.
     * 
     */
    private @Nullable String diskEncryptionKeySha256;
    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
     * 
     */
    private @Nullable String diskEncryptionServiceAccount;
    /**
     * @return Whether to force attach the regional disk even if it&#39;s currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. Setting this parameter cause VM recreation.
     * 
     */
    private @Nullable Boolean forceAttach;
    /**
     * @return The self_link of the encryption key that is
     * stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`, `disk_encryption_key_rsa` and `disk_encryption_key_raw`
     * may be set.
     * 
     */
    private @Nullable String kmsKeySelfLink;
    /**
     * @return Either &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;, defaults to &#34;READ_WRITE&#34;
     * If you have a persistent disk with data that you want to share
     * between multiple instances, detach it from any read-write instances and
     * attach it to one or more instances in read-only mode.
     * 
     */
    private @Nullable String mode;
    /**
     * @return The name or self_link of the disk to attach to this instance.
     * 
     */
    private String source;

    private InstanceAttachedDisk() {}
    /**
     * @return Name with which the attached disk will be accessible
     * under `/dev/disk/by-id/google-*`
     * 
     */
    public Optional<String> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }
    /**
     * @return A 256-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption),
     * encoded in [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * to encrypt this disk. Only one of `kms_key_self_link`, `disk_encryption_key_rsa` and `disk_encryption_key_raw`
     * may be set.
     * 
     */
    public Optional<String> diskEncryptionKeyRaw() {
        return Optional.ofNullable(this.diskEncryptionKeyRaw);
    }
    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) to encrypt this disk. Only one of `kms_key_self_link`, `disk_encryption_key_rsa` and `disk_encryption_key_raw`
     * may be set.
     * 
     */
    public Optional<String> diskEncryptionKeyRsa() {
        return Optional.ofNullable(this.diskEncryptionKeyRsa);
    }
    /**
     * @return The [RFC 4648 base64](https://tools.ietf.org/html/rfc4648#section-4)
     * encoded SHA-256 hash of the [customer-supplied encryption key]
     * (https://cloud.google.com/compute/docs/disks/customer-supplied-encryption) that protects this resource.
     * 
     */
    public Optional<String> diskEncryptionKeySha256() {
        return Optional.ofNullable(this.diskEncryptionKeySha256);
    }
    /**
     * @return The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
     * 
     */
    public Optional<String> diskEncryptionServiceAccount() {
        return Optional.ofNullable(this.diskEncryptionServiceAccount);
    }
    /**
     * @return Whether to force attach the regional disk even if it&#39;s currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. Setting this parameter cause VM recreation.
     * 
     */
    public Optional<Boolean> forceAttach() {
        return Optional.ofNullable(this.forceAttach);
    }
    /**
     * @return The self_link of the encryption key that is
     * stored in Google Cloud KMS to encrypt this disk. Only one of `kms_key_self_link`, `disk_encryption_key_rsa` and `disk_encryption_key_raw`
     * may be set.
     * 
     */
    public Optional<String> kmsKeySelfLink() {
        return Optional.ofNullable(this.kmsKeySelfLink);
    }
    /**
     * @return Either &#34;READ_ONLY&#34; or &#34;READ_WRITE&#34;, defaults to &#34;READ_WRITE&#34;
     * If you have a persistent disk with data that you want to share
     * between multiple instances, detach it from any read-write instances and
     * attach it to one or more instances in read-only mode.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The name or self_link of the disk to attach to this instance.
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceAttachedDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String deviceName;
        private @Nullable String diskEncryptionKeyRaw;
        private @Nullable String diskEncryptionKeyRsa;
        private @Nullable String diskEncryptionKeySha256;
        private @Nullable String diskEncryptionServiceAccount;
        private @Nullable Boolean forceAttach;
        private @Nullable String kmsKeySelfLink;
        private @Nullable String mode;
        private String source;
        public Builder() {}
        public Builder(InstanceAttachedDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceName = defaults.deviceName;
    	      this.diskEncryptionKeyRaw = defaults.diskEncryptionKeyRaw;
    	      this.diskEncryptionKeyRsa = defaults.diskEncryptionKeyRsa;
    	      this.diskEncryptionKeySha256 = defaults.diskEncryptionKeySha256;
    	      this.diskEncryptionServiceAccount = defaults.diskEncryptionServiceAccount;
    	      this.forceAttach = defaults.forceAttach;
    	      this.kmsKeySelfLink = defaults.kmsKeySelfLink;
    	      this.mode = defaults.mode;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder deviceName(@Nullable String deviceName) {

            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeyRaw(@Nullable String diskEncryptionKeyRaw) {

            this.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeyRsa(@Nullable String diskEncryptionKeyRsa) {

            this.diskEncryptionKeyRsa = diskEncryptionKeyRsa;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeySha256(@Nullable String diskEncryptionKeySha256) {

            this.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionServiceAccount(@Nullable String diskEncryptionServiceAccount) {

            this.diskEncryptionServiceAccount = diskEncryptionServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder forceAttach(@Nullable Boolean forceAttach) {

            this.forceAttach = forceAttach;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeySelfLink(@Nullable String kmsKeySelfLink) {

            this.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("InstanceAttachedDisk", "source");
            }
            this.source = source;
            return this;
        }
        public InstanceAttachedDisk build() {
            final var _resultValue = new InstanceAttachedDisk();
            _resultValue.deviceName = deviceName;
            _resultValue.diskEncryptionKeyRaw = diskEncryptionKeyRaw;
            _resultValue.diskEncryptionKeyRsa = diskEncryptionKeyRsa;
            _resultValue.diskEncryptionKeySha256 = diskEncryptionKeySha256;
            _resultValue.diskEncryptionServiceAccount = diskEncryptionServiceAccount;
            _resultValue.forceAttach = forceAttach;
            _resultValue.kmsKeySelfLink = kmsKeySelfLink;
            _resultValue.mode = mode;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
