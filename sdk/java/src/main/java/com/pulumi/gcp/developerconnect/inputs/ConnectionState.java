// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketCloudConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionCryptoKeyConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGithubEnterpriseConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionGitlabEnterpriseConfigArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionInstallationStateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionState Empty = new ConnectionState();

    /**
     * Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. Allows clients to store small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Configuration for connections to an instance of Bitbucket Cloud.
     * Structure is documented below.
     * 
     */
    @Import(name="bitbucketCloudConfig")
    private @Nullable Output<ConnectionBitbucketCloudConfigArgs> bitbucketCloudConfig;

    /**
     * @return Configuration for connections to an instance of Bitbucket Cloud.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionBitbucketCloudConfigArgs>> bitbucketCloudConfig() {
        return Optional.ofNullable(this.bitbucketCloudConfig);
    }

    /**
     * Configuration for connections to an instance of Bitbucket Data Center.
     * Structure is documented below.
     * 
     */
    @Import(name="bitbucketDataCenterConfig")
    private @Nullable Output<ConnectionBitbucketDataCenterConfigArgs> bitbucketDataCenterConfig;

    /**
     * @return Configuration for connections to an instance of Bitbucket Data Center.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionBitbucketDataCenterConfigArgs>> bitbucketDataCenterConfig() {
        return Optional.ofNullable(this.bitbucketDataCenterConfig);
    }

    /**
     * Required. Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * connectionId from the methodSignature of Create RPC
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return Required. Id of the requesting object
     * If auto-generating Id server-side, remove this field and
     * connectionId from the methodSignature of Create RPC
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Output only. [Output only] Create timestamp
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. [Output only] Create timestamp
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The crypto key configuration. This field is used by the Customer-managed
     * encryption keys (CMEK) feature.
     * Structure is documented below.
     * 
     */
    @Import(name="cryptoKeyConfig")
    private @Nullable Output<ConnectionCryptoKeyConfigArgs> cryptoKeyConfig;

    /**
     * @return The crypto key configuration. This field is used by the Customer-managed
     * encryption keys (CMEK) feature.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionCryptoKeyConfigArgs>> cryptoKeyConfig() {
        return Optional.ofNullable(this.cryptoKeyConfig);
    }

    /**
     * Output only. [Output only] Delete timestamp
     * 
     */
    @Import(name="deleteTime")
    private @Nullable Output<String> deleteTime;

    /**
     * @return Output only. [Output only] Delete timestamp
     * 
     */
    public Optional<Output<String>> deleteTime() {
        return Optional.ofNullable(this.deleteTime);
    }

    /**
     * Optional. If disabled is set to true, functionality is disabled for this connection.
     * Repository based API methods and webhooks processing for repositories in
     * this connection will be disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Optional. If disabled is set to true, functionality is disabled for this connection.
     * Repository based API methods and webhooks processing for repositories in
     * this connection will be disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Optional. This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Configuration for connections to github.com.
     * Structure is documented below.
     * 
     */
    @Import(name="githubConfig")
    private @Nullable Output<ConnectionGithubConfigArgs> githubConfig;

    /**
     * @return Configuration for connections to github.com.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionGithubConfigArgs>> githubConfig() {
        return Optional.ofNullable(this.githubConfig);
    }

    /**
     * Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     * 
     */
    @Import(name="githubEnterpriseConfig")
    private @Nullable Output<ConnectionGithubEnterpriseConfigArgs> githubEnterpriseConfig;

    /**
     * @return Configuration for connections to an instance of GitHub Enterprise.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionGithubEnterpriseConfigArgs>> githubEnterpriseConfig() {
        return Optional.ofNullable(this.githubEnterpriseConfig);
    }

    /**
     * Configuration for connections to gitlab.com.
     * Structure is documented below.
     * 
     */
    @Import(name="gitlabConfig")
    private @Nullable Output<ConnectionGitlabConfigArgs> gitlabConfig;

    /**
     * @return Configuration for connections to gitlab.com.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionGitlabConfigArgs>> gitlabConfig() {
        return Optional.ofNullable(this.gitlabConfig);
    }

    /**
     * Configuration for connections to an instance of GitLab Enterprise.
     * Structure is documented below.
     * 
     */
    @Import(name="gitlabEnterpriseConfig")
    private @Nullable Output<ConnectionGitlabEnterpriseConfigArgs> gitlabEnterpriseConfig;

    /**
     * @return Configuration for connections to an instance of GitLab Enterprise.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionGitlabEnterpriseConfigArgs>> gitlabEnterpriseConfig() {
        return Optional.ofNullable(this.gitlabEnterpriseConfig);
    }

    /**
     * Describes stage and necessary actions to be taken by the
     * user to complete the installation. Used for GitHub and GitHub Enterprise
     * based connections.
     * Structure is documented below.
     * 
     */
    @Import(name="installationStates")
    private @Nullable Output<List<ConnectionInstallationStateArgs>> installationStates;

    /**
     * @return Describes stage and necessary actions to be taken by the
     * user to complete the installation. Used for GitHub and GitHub Enterprise
     * based connections.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionInstallationStateArgs>>> installationStates() {
        return Optional.ofNullable(this.installationStates);
    }

    /**
     * Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of the connection, in the format
     * `projects/{project}/locations/{location}/connections/{connection_id}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of the connection, in the format
     * `projects/{project}/locations/{location}/connections/{connection_id}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Output only. Set to true when the connection is being set up or updated in the
     * background.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return Output only. Set to true when the connection is being set up or updated in the
     * background.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * Output only. A system-assigned unique identifier for a the GitRepositoryLink.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. A system-assigned unique identifier for a the GitRepositoryLink.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. [Output only] Update timestamp
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. [Output only] Update timestamp
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ConnectionState() {}

    private ConnectionState(ConnectionState $) {
        this.annotations = $.annotations;
        this.bitbucketCloudConfig = $.bitbucketCloudConfig;
        this.bitbucketDataCenterConfig = $.bitbucketDataCenterConfig;
        this.connectionId = $.connectionId;
        this.createTime = $.createTime;
        this.cryptoKeyConfig = $.cryptoKeyConfig;
        this.deleteTime = $.deleteTime;
        this.disabled = $.disabled;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.etag = $.etag;
        this.githubConfig = $.githubConfig;
        this.githubEnterpriseConfig = $.githubEnterpriseConfig;
        this.gitlabConfig = $.gitlabConfig;
        this.gitlabEnterpriseConfig = $.gitlabEnterpriseConfig;
        this.installationStates = $.installationStates;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.reconciling = $.reconciling;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionState $;

        public Builder() {
            $ = new ConnectionState();
        }

        public Builder(ConnectionState defaults) {
            $ = new ConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Optional. Allows clients to store small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. Allows clients to store small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param bitbucketCloudConfig Configuration for connections to an instance of Bitbucket Cloud.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketCloudConfig(@Nullable Output<ConnectionBitbucketCloudConfigArgs> bitbucketCloudConfig) {
            $.bitbucketCloudConfig = bitbucketCloudConfig;
            return this;
        }

        /**
         * @param bitbucketCloudConfig Configuration for connections to an instance of Bitbucket Cloud.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketCloudConfig(ConnectionBitbucketCloudConfigArgs bitbucketCloudConfig) {
            return bitbucketCloudConfig(Output.of(bitbucketCloudConfig));
        }

        /**
         * @param bitbucketDataCenterConfig Configuration for connections to an instance of Bitbucket Data Center.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketDataCenterConfig(@Nullable Output<ConnectionBitbucketDataCenterConfigArgs> bitbucketDataCenterConfig) {
            $.bitbucketDataCenterConfig = bitbucketDataCenterConfig;
            return this;
        }

        /**
         * @param bitbucketDataCenterConfig Configuration for connections to an instance of Bitbucket Data Center.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bitbucketDataCenterConfig(ConnectionBitbucketDataCenterConfigArgs bitbucketDataCenterConfig) {
            return bitbucketDataCenterConfig(Output.of(bitbucketDataCenterConfig));
        }

        /**
         * @param connectionId Required. Id of the requesting object
         * If auto-generating Id server-side, remove this field and
         * connectionId from the methodSignature of Create RPC
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Required. Id of the requesting object
         * If auto-generating Id server-side, remove this field and
         * connectionId from the methodSignature of Create RPC
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param createTime Output only. [Output only] Create timestamp
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. [Output only] Create timestamp
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param cryptoKeyConfig The crypto key configuration. This field is used by the Customer-managed
         * encryption keys (CMEK) feature.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyConfig(@Nullable Output<ConnectionCryptoKeyConfigArgs> cryptoKeyConfig) {
            $.cryptoKeyConfig = cryptoKeyConfig;
            return this;
        }

        /**
         * @param cryptoKeyConfig The crypto key configuration. This field is used by the Customer-managed
         * encryption keys (CMEK) feature.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKeyConfig(ConnectionCryptoKeyConfigArgs cryptoKeyConfig) {
            return cryptoKeyConfig(Output.of(cryptoKeyConfig));
        }

        /**
         * @param deleteTime Output only. [Output only] Delete timestamp
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(@Nullable Output<String> deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        /**
         * @param deleteTime Output only. [Output only] Delete timestamp
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(String deleteTime) {
            return deleteTime(Output.of(deleteTime));
        }

        /**
         * @param disabled Optional. If disabled is set to true, functionality is disabled for this connection.
         * Repository based API methods and webhooks processing for repositories in
         * this connection will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Optional. If disabled is set to true, functionality is disabled for this connection.
         * Repository based API methods and webhooks processing for repositories in
         * this connection will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param etag Optional. This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Optional. This checksum is computed by the server based on the value of other
         * fields, and may be sent on update and delete requests to ensure the
         * client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param githubConfig Configuration for connections to github.com.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder githubConfig(@Nullable Output<ConnectionGithubConfigArgs> githubConfig) {
            $.githubConfig = githubConfig;
            return this;
        }

        /**
         * @param githubConfig Configuration for connections to github.com.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder githubConfig(ConnectionGithubConfigArgs githubConfig) {
            return githubConfig(Output.of(githubConfig));
        }

        /**
         * @param githubEnterpriseConfig Configuration for connections to an instance of GitHub Enterprise.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder githubEnterpriseConfig(@Nullable Output<ConnectionGithubEnterpriseConfigArgs> githubEnterpriseConfig) {
            $.githubEnterpriseConfig = githubEnterpriseConfig;
            return this;
        }

        /**
         * @param githubEnterpriseConfig Configuration for connections to an instance of GitHub Enterprise.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder githubEnterpriseConfig(ConnectionGithubEnterpriseConfigArgs githubEnterpriseConfig) {
            return githubEnterpriseConfig(Output.of(githubEnterpriseConfig));
        }

        /**
         * @param gitlabConfig Configuration for connections to gitlab.com.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gitlabConfig(@Nullable Output<ConnectionGitlabConfigArgs> gitlabConfig) {
            $.gitlabConfig = gitlabConfig;
            return this;
        }

        /**
         * @param gitlabConfig Configuration for connections to gitlab.com.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gitlabConfig(ConnectionGitlabConfigArgs gitlabConfig) {
            return gitlabConfig(Output.of(gitlabConfig));
        }

        /**
         * @param gitlabEnterpriseConfig Configuration for connections to an instance of GitLab Enterprise.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gitlabEnterpriseConfig(@Nullable Output<ConnectionGitlabEnterpriseConfigArgs> gitlabEnterpriseConfig) {
            $.gitlabEnterpriseConfig = gitlabEnterpriseConfig;
            return this;
        }

        /**
         * @param gitlabEnterpriseConfig Configuration for connections to an instance of GitLab Enterprise.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder gitlabEnterpriseConfig(ConnectionGitlabEnterpriseConfigArgs gitlabEnterpriseConfig) {
            return gitlabEnterpriseConfig(Output.of(gitlabEnterpriseConfig));
        }

        /**
         * @param installationStates Describes stage and necessary actions to be taken by the
         * user to complete the installation. Used for GitHub and GitHub Enterprise
         * based connections.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder installationStates(@Nullable Output<List<ConnectionInstallationStateArgs>> installationStates) {
            $.installationStates = installationStates;
            return this;
        }

        /**
         * @param installationStates Describes stage and necessary actions to be taken by the
         * user to complete the installation. Used for GitHub and GitHub Enterprise
         * based connections.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder installationStates(List<ConnectionInstallationStateArgs> installationStates) {
            return installationStates(Output.of(installationStates));
        }

        /**
         * @param installationStates Describes stage and necessary actions to be taken by the
         * user to complete the installation. Used for GitHub and GitHub Enterprise
         * based connections.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder installationStates(ConnectionInstallationStateArgs... installationStates) {
            return installationStates(List.of(installationStates));
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of the connection, in the format
         * `projects/{project}/locations/{location}/connections/{connection_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of the connection, in the format
         * `projects/{project}/locations/{location}/connections/{connection_id}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param reconciling Output only. Set to true when the connection is being set up or updated in the
         * background.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling Output only. Set to true when the connection is being set up or updated in the
         * background.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param uid Output only. A system-assigned unique identifier for a the GitRepositoryLink.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. A system-assigned unique identifier for a the GitRepositoryLink.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. [Output only] Update timestamp
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. [Output only] Update timestamp
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ConnectionState build() {
            return $;
        }
    }

}
