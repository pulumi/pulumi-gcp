// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.InstanceFromMachineImageNetworkInterfaceAccessConfig;
import com.pulumi.gcp.compute.outputs.InstanceFromMachineImageNetworkInterfaceAliasIpRange;
import com.pulumi.gcp.compute.outputs.InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceFromMachineImageNetworkInterface {
    /**
     * @return Access configurations, i.e. IPs via which this instance can be accessed via the Internet.
     * 
     */
    private @Nullable List<InstanceFromMachineImageNetworkInterfaceAccessConfig> accessConfigs;
    /**
     * @return An array of alias IP ranges for this network interface.
     * 
     */
    private @Nullable List<InstanceFromMachineImageNetworkInterfaceAliasIpRange> aliasIpRanges;
    /**
     * @return The prefix length of the primary internal IPv6 range.
     * 
     */
    private @Nullable Integer internalIpv6PrefixLength;
    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    private @Nullable List<InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
     * 
     */
    private @Nullable String ipv6AccessType;
    /**
     * @return An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance&#39;s subnetwork.
     * 
     */
    private @Nullable String ipv6Address;
    /**
     * @return A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String name;
    /**
     * @return The name or self_link of the network attached to this interface.
     * 
     */
    private @Nullable String network;
    /**
     * @return The URL of the network attachment that this interface should connect to in the following format: projects/{projectNumber}/regions/{region_name}/networkAttachments/{network_attachment_name}.
     * 
     */
    private @Nullable String networkAttachment;
    /**
     * @return The private IP address assigned to the instance.
     * 
     */
    private @Nullable String networkIp;
    /**
     * @return The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET
     * 
     */
    private @Nullable String nicType;
    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
     * 
     */
    private @Nullable Integer queueCount;
    /**
     * @return A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy.
     * 
     */
    private @Nullable String securityPolicy;
    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
     * 
     */
    private @Nullable String stackType;
    /**
     * @return The name or self_link of the subnetwork attached to this interface.
     * 
     */
    private @Nullable String subnetwork;
    /**
     * @return The project in which the subnetwork belongs.
     * 
     */
    private @Nullable String subnetworkProject;

    private InstanceFromMachineImageNetworkInterface() {}
    /**
     * @return Access configurations, i.e. IPs via which this instance can be accessed via the Internet.
     * 
     */
    public List<InstanceFromMachineImageNetworkInterfaceAccessConfig> accessConfigs() {
        return this.accessConfigs == null ? List.of() : this.accessConfigs;
    }
    /**
     * @return An array of alias IP ranges for this network interface.
     * 
     */
    public List<InstanceFromMachineImageNetworkInterfaceAliasIpRange> aliasIpRanges() {
        return this.aliasIpRanges == null ? List.of() : this.aliasIpRanges;
    }
    /**
     * @return The prefix length of the primary internal IPv6 range.
     * 
     */
    public Optional<Integer> internalIpv6PrefixLength() {
        return Optional.ofNullable(this.internalIpv6PrefixLength);
    }
    /**
     * @return An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     * 
     */
    public List<InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs() {
        return this.ipv6AccessConfigs == null ? List.of() : this.ipv6AccessConfigs;
    }
    /**
     * @return One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.
     * 
     */
    public Optional<String> ipv6AccessType() {
        return Optional.ofNullable(this.ipv6AccessType);
    }
    /**
     * @return An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance&#39;s subnetwork.
     * 
     */
    public Optional<String> ipv6Address() {
        return Optional.ofNullable(this.ipv6Address);
    }
    /**
     * @return A unique name for the resource, required by GCE.
     * Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The name or self_link of the network attached to this interface.
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return The URL of the network attachment that this interface should connect to in the following format: projects/{projectNumber}/regions/{region_name}/networkAttachments/{network_attachment_name}.
     * 
     */
    public Optional<String> networkAttachment() {
        return Optional.ofNullable(this.networkAttachment);
    }
    /**
     * @return The private IP address assigned to the instance.
     * 
     */
    public Optional<String> networkIp() {
        return Optional.ofNullable(this.networkIp);
    }
    /**
     * @return The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET
     * 
     */
    public Optional<String> nicType() {
        return Optional.ofNullable(this.nicType);
    }
    /**
     * @return The networking queue count that&#39;s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.
     * 
     */
    public Optional<Integer> queueCount() {
        return Optional.ofNullable(this.queueCount);
    }
    /**
     * @return A full or partial URL to a security policy to add to this instance. If this field is set to an empty string it will remove the associated security policy.
     * 
     */
    public Optional<String> securityPolicy() {
        return Optional.ofNullable(this.securityPolicy);
    }
    /**
     * @return The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.
     * 
     */
    public Optional<String> stackType() {
        return Optional.ofNullable(this.stackType);
    }
    /**
     * @return The name or self_link of the subnetwork attached to this interface.
     * 
     */
    public Optional<String> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }
    /**
     * @return The project in which the subnetwork belongs.
     * 
     */
    public Optional<String> subnetworkProject() {
        return Optional.ofNullable(this.subnetworkProject);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFromMachineImageNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<InstanceFromMachineImageNetworkInterfaceAccessConfig> accessConfigs;
        private @Nullable List<InstanceFromMachineImageNetworkInterfaceAliasIpRange> aliasIpRanges;
        private @Nullable Integer internalIpv6PrefixLength;
        private @Nullable List<InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs;
        private @Nullable String ipv6AccessType;
        private @Nullable String ipv6Address;
        private @Nullable String name;
        private @Nullable String network;
        private @Nullable String networkAttachment;
        private @Nullable String networkIp;
        private @Nullable String nicType;
        private @Nullable Integer queueCount;
        private @Nullable String securityPolicy;
        private @Nullable String stackType;
        private @Nullable String subnetwork;
        private @Nullable String subnetworkProject;
        public Builder() {}
        public Builder(InstanceFromMachineImageNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessConfigs = defaults.accessConfigs;
    	      this.aliasIpRanges = defaults.aliasIpRanges;
    	      this.internalIpv6PrefixLength = defaults.internalIpv6PrefixLength;
    	      this.ipv6AccessConfigs = defaults.ipv6AccessConfigs;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkAttachment = defaults.networkAttachment;
    	      this.networkIp = defaults.networkIp;
    	      this.nicType = defaults.nicType;
    	      this.queueCount = defaults.queueCount;
    	      this.securityPolicy = defaults.securityPolicy;
    	      this.stackType = defaults.stackType;
    	      this.subnetwork = defaults.subnetwork;
    	      this.subnetworkProject = defaults.subnetworkProject;
        }

        @CustomType.Setter
        public Builder accessConfigs(@Nullable List<InstanceFromMachineImageNetworkInterfaceAccessConfig> accessConfigs) {

            this.accessConfigs = accessConfigs;
            return this;
        }
        public Builder accessConfigs(InstanceFromMachineImageNetworkInterfaceAccessConfig... accessConfigs) {
            return accessConfigs(List.of(accessConfigs));
        }
        @CustomType.Setter
        public Builder aliasIpRanges(@Nullable List<InstanceFromMachineImageNetworkInterfaceAliasIpRange> aliasIpRanges) {

            this.aliasIpRanges = aliasIpRanges;
            return this;
        }
        public Builder aliasIpRanges(InstanceFromMachineImageNetworkInterfaceAliasIpRange... aliasIpRanges) {
            return aliasIpRanges(List.of(aliasIpRanges));
        }
        @CustomType.Setter
        public Builder internalIpv6PrefixLength(@Nullable Integer internalIpv6PrefixLength) {

            this.internalIpv6PrefixLength = internalIpv6PrefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AccessConfigs(@Nullable List<InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig> ipv6AccessConfigs) {

            this.ipv6AccessConfigs = ipv6AccessConfigs;
            return this;
        }
        public Builder ipv6AccessConfigs(InstanceFromMachineImageNetworkInterfaceIpv6AccessConfig... ipv6AccessConfigs) {
            return ipv6AccessConfigs(List.of(ipv6AccessConfigs));
        }
        @CustomType.Setter
        public Builder ipv6AccessType(@Nullable String ipv6AccessType) {

            this.ipv6AccessType = ipv6AccessType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(@Nullable String ipv6Address) {

            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkAttachment(@Nullable String networkAttachment) {

            this.networkAttachment = networkAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder networkIp(@Nullable String networkIp) {

            this.networkIp = networkIp;
            return this;
        }
        @CustomType.Setter
        public Builder nicType(@Nullable String nicType) {

            this.nicType = nicType;
            return this;
        }
        @CustomType.Setter
        public Builder queueCount(@Nullable Integer queueCount) {

            this.queueCount = queueCount;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicy(@Nullable String securityPolicy) {

            this.securityPolicy = securityPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder stackType(@Nullable String stackType) {

            this.stackType = stackType;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(@Nullable String subnetwork) {

            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkProject(@Nullable String subnetworkProject) {

            this.subnetworkProject = subnetworkProject;
            return this;
        }
        public InstanceFromMachineImageNetworkInterface build() {
            final var _resultValue = new InstanceFromMachineImageNetworkInterface();
            _resultValue.accessConfigs = accessConfigs;
            _resultValue.aliasIpRanges = aliasIpRanges;
            _resultValue.internalIpv6PrefixLength = internalIpv6PrefixLength;
            _resultValue.ipv6AccessConfigs = ipv6AccessConfigs;
            _resultValue.ipv6AccessType = ipv6AccessType;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkAttachment = networkAttachment;
            _resultValue.networkIp = networkIp;
            _resultValue.nicType = nicType;
            _resultValue.queueCount = queueCount;
            _resultValue.securityPolicy = securityPolicy;
            _resultValue.stackType = stackType;
            _resultValue.subnetwork = subnetwork;
            _resultValue.subnetworkProject = subnetworkProject;
            return _resultValue;
        }
    }
}
