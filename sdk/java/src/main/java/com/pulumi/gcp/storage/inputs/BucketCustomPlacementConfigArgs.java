// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BucketCustomPlacementConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketCustomPlacementConfigArgs Empty = new BucketCustomPlacementConfigArgs();

    /**
     * The list of individual regions that comprise a dual-region bucket. See [Cloud Storage bucket locations](https://cloud.google.com/storage/docs/dual-regions#availability) for a list of acceptable regions. **Note**: If any of the data_locations changes, it will [recreate the bucket](https://cloud.google.com/storage/docs/locations#key-concepts).
     * 
     */
    @Import(name="dataLocations", required=true)
    private Output<List<String>> dataLocations;

    /**
     * @return The list of individual regions that comprise a dual-region bucket. See [Cloud Storage bucket locations](https://cloud.google.com/storage/docs/dual-regions#availability) for a list of acceptable regions. **Note**: If any of the data_locations changes, it will [recreate the bucket](https://cloud.google.com/storage/docs/locations#key-concepts).
     * 
     */
    public Output<List<String>> dataLocations() {
        return this.dataLocations;
    }

    private BucketCustomPlacementConfigArgs() {}

    private BucketCustomPlacementConfigArgs(BucketCustomPlacementConfigArgs $) {
        this.dataLocations = $.dataLocations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketCustomPlacementConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketCustomPlacementConfigArgs $;

        public Builder() {
            $ = new BucketCustomPlacementConfigArgs();
        }

        public Builder(BucketCustomPlacementConfigArgs defaults) {
            $ = new BucketCustomPlacementConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataLocations The list of individual regions that comprise a dual-region bucket. See [Cloud Storage bucket locations](https://cloud.google.com/storage/docs/dual-regions#availability) for a list of acceptable regions. **Note**: If any of the data_locations changes, it will [recreate the bucket](https://cloud.google.com/storage/docs/locations#key-concepts).
         * 
         * @return builder
         * 
         */
        public Builder dataLocations(Output<List<String>> dataLocations) {
            $.dataLocations = dataLocations;
            return this;
        }

        /**
         * @param dataLocations The list of individual regions that comprise a dual-region bucket. See [Cloud Storage bucket locations](https://cloud.google.com/storage/docs/dual-regions#availability) for a list of acceptable regions. **Note**: If any of the data_locations changes, it will [recreate the bucket](https://cloud.google.com/storage/docs/locations#key-concepts).
         * 
         * @return builder
         * 
         */
        public Builder dataLocations(List<String> dataLocations) {
            return dataLocations(Output.of(dataLocations));
        }

        /**
         * @param dataLocations The list of individual regions that comprise a dual-region bucket. See [Cloud Storage bucket locations](https://cloud.google.com/storage/docs/dual-regions#availability) for a list of acceptable regions. **Note**: If any of the data_locations changes, it will [recreate the bucket](https://cloud.google.com/storage/docs/locations#key-concepts).
         * 
         * @return builder
         * 
         */
        public Builder dataLocations(String... dataLocations) {
            return dataLocations(List.of(dataLocations));
        }

        public BucketCustomPlacementConfigArgs build() {
            $.dataLocations = Objects.requireNonNull($.dataLocations, "expected parameter 'dataLocations' to be non-null");
            return $;
        }
    }

}
