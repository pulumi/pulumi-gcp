// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.workstations.inputs.WorkstationConfigConditionArgs;
import com.pulumi.gcp.workstations.inputs.WorkstationConfigContainerArgs;
import com.pulumi.gcp.workstations.inputs.WorkstationConfigEncryptionKeyArgs;
import com.pulumi.gcp.workstations.inputs.WorkstationConfigHostArgs;
import com.pulumi.gcp.workstations.inputs.WorkstationConfigPersistentDirectoryArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkstationConfigState extends com.pulumi.resources.ResourceArgs {

    public static final WorkstationConfigState Empty = new WorkstationConfigState();

    /**
     * Client-specified annotations. This is distinct from labels.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Client-specified annotations. This is distinct from labels.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Status conditions describing the current resource state.
     * Structure is documented below.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<WorkstationConfigConditionArgs>> conditions;

    /**
     * @return Status conditions describing the current resource state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WorkstationConfigConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     * Structure is documented below.
     * 
     */
    @Import(name="container")
    private @Nullable Output<WorkstationConfigContainerArgs> container;

    /**
     * @return Container that will be run for each workstation using this configuration when that workstation is started.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkstationConfigContainerArgs>> container() {
        return Optional.ofNullable(this.container);
    }

    /**
     * Time when this resource was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time when this resource was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
     * 
     */
    @Import(name="degraded")
    private @Nullable Output<Boolean> degraded;

    /**
     * @return Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
     * 
     */
    public Optional<Output<Boolean>> degraded() {
        return Optional.ofNullable(this.degraded);
    }

    /**
     * Human-readable name for this resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable name for this resource.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Encrypts resources of this workstation configuration using a customer-managed encryption key.
     * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
     * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
     * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     * Structure is documented below.
     * 
     */
    @Import(name="encryptionKey")
    private @Nullable Output<WorkstationConfigEncryptionKeyArgs> encryptionKey;

    /**
     * @return Encrypts resources of this workstation configuration using a customer-managed encryption key.
     * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
     * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
     * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkstationConfigEncryptionKeyArgs>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    /**
     * Checksum computed by the server.
     * May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Checksum computed by the server.
     * May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Runtime host for a workstation.
     * Structure is documented below.
     * 
     */
    @Import(name="host")
    private @Nullable Output<WorkstationConfigHostArgs> host;

    /**
     * @return Runtime host for a workstation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WorkstationConfigHostArgs>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * How long to wait before automatically stopping an instance that hasn&#39;t recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<String> idleTimeout;

    /**
     * @return How long to wait before automatically stopping an instance that hasn&#39;t recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location where the workstation cluster config should reside.
     * 
     * ***
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where the workstation cluster config should reside.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Full name of this resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Full name of this resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Directories to persist across workstation sessions.
     * Structure is documented below.
     * 
     */
    @Import(name="persistentDirectories")
    private @Nullable Output<List<WorkstationConfigPersistentDirectoryArgs>> persistentDirectories;

    /**
     * @return Directories to persist across workstation sessions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WorkstationConfigPersistentDirectoryArgs>>> persistentDirectories() {
        return Optional.ofNullable(this.persistentDirectories);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryption_key` is set. Defaults to 12 hours.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="runningTimeout")
    private @Nullable Output<String> runningTimeout;

    /**
     * @return How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryption_key` is set. Defaults to 12 hours.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> runningTimeout() {
        return Optional.ofNullable(this.runningTimeout);
    }

    /**
     * The system-generated UID of the resource.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return The system-generated UID of the resource.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The ID of the parent workstation cluster.
     * 
     */
    @Import(name="workstationClusterId")
    private @Nullable Output<String> workstationClusterId;

    /**
     * @return The ID of the parent workstation cluster.
     * 
     */
    public Optional<Output<String>> workstationClusterId() {
        return Optional.ofNullable(this.workstationClusterId);
    }

    /**
     * The ID to be assigned to the workstation cluster config.
     * 
     */
    @Import(name="workstationConfigId")
    private @Nullable Output<String> workstationConfigId;

    /**
     * @return The ID to be assigned to the workstation cluster config.
     * 
     */
    public Optional<Output<String>> workstationConfigId() {
        return Optional.ofNullable(this.workstationConfigId);
    }

    private WorkstationConfigState() {}

    private WorkstationConfigState(WorkstationConfigState $) {
        this.annotations = $.annotations;
        this.conditions = $.conditions;
        this.container = $.container;
        this.createTime = $.createTime;
        this.degraded = $.degraded;
        this.displayName = $.displayName;
        this.encryptionKey = $.encryptionKey;
        this.etag = $.etag;
        this.host = $.host;
        this.idleTimeout = $.idleTimeout;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.persistentDirectories = $.persistentDirectories;
        this.project = $.project;
        this.runningTimeout = $.runningTimeout;
        this.uid = $.uid;
        this.workstationClusterId = $.workstationClusterId;
        this.workstationConfigId = $.workstationConfigId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkstationConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkstationConfigState $;

        public Builder() {
            $ = new WorkstationConfigState();
        }

        public Builder(WorkstationConfigState defaults) {
            $ = new WorkstationConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Client-specified annotations. This is distinct from labels.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Client-specified annotations. This is distinct from labels.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param conditions Status conditions describing the current resource state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<WorkstationConfigConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Status conditions describing the current resource state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<WorkstationConfigConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Status conditions describing the current resource state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conditions(WorkstationConfigConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param container Container that will be run for each workstation using this configuration when that workstation is started.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder container(@Nullable Output<WorkstationConfigContainerArgs> container) {
            $.container = container;
            return this;
        }

        /**
         * @param container Container that will be run for each workstation using this configuration when that workstation is started.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder container(WorkstationConfigContainerArgs container) {
            return container(Output.of(container));
        }

        /**
         * @param createTime Time when this resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time when this resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param degraded Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
         * 
         * @return builder
         * 
         */
        public Builder degraded(@Nullable Output<Boolean> degraded) {
            $.degraded = degraded;
            return this;
        }

        /**
         * @param degraded Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.
         * 
         * @return builder
         * 
         */
        public Builder degraded(Boolean degraded) {
            return degraded(Output.of(degraded));
        }

        /**
         * @param displayName Human-readable name for this resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable name for this resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param encryptionKey Encrypts resources of this workstation configuration using a customer-managed encryption key.
         * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
         * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
         * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(@Nullable Output<WorkstationConfigEncryptionKeyArgs> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        /**
         * @param encryptionKey Encrypts resources of this workstation configuration using a customer-managed encryption key.
         * If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
         * If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
         * If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(WorkstationConfigEncryptionKeyArgs encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        /**
         * @param etag Checksum computed by the server.
         * May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Checksum computed by the server.
         * May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param host Runtime host for a workstation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<WorkstationConfigHostArgs> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Runtime host for a workstation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder host(WorkstationConfigHostArgs host) {
            return host(Output.of(host));
        }

        /**
         * @param idleTimeout How long to wait before automatically stopping an instance that hasn&#39;t recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<String> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout How long to wait before automatically stopping an instance that hasn&#39;t recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(String idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param labels Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location where the workstation cluster config should reside.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the workstation cluster config should reside.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Full name of this resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Full name of this resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param persistentDirectories Directories to persist across workstation sessions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder persistentDirectories(@Nullable Output<List<WorkstationConfigPersistentDirectoryArgs>> persistentDirectories) {
            $.persistentDirectories = persistentDirectories;
            return this;
        }

        /**
         * @param persistentDirectories Directories to persist across workstation sessions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder persistentDirectories(List<WorkstationConfigPersistentDirectoryArgs> persistentDirectories) {
            return persistentDirectories(Output.of(persistentDirectories));
        }

        /**
         * @param persistentDirectories Directories to persist across workstation sessions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder persistentDirectories(WorkstationConfigPersistentDirectoryArgs... persistentDirectories) {
            return persistentDirectories(List.of(persistentDirectories));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param runningTimeout How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryption_key` is set. Defaults to 12 hours.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder runningTimeout(@Nullable Output<String> runningTimeout) {
            $.runningTimeout = runningTimeout;
            return this;
        }

        /**
         * @param runningTimeout How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if `encryption_key` is set. Defaults to 12 hours.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder runningTimeout(String runningTimeout) {
            return runningTimeout(Output.of(runningTimeout));
        }

        /**
         * @param uid The system-generated UID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid The system-generated UID of the resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param workstationClusterId The ID of the parent workstation cluster.
         * 
         * @return builder
         * 
         */
        public Builder workstationClusterId(@Nullable Output<String> workstationClusterId) {
            $.workstationClusterId = workstationClusterId;
            return this;
        }

        /**
         * @param workstationClusterId The ID of the parent workstation cluster.
         * 
         * @return builder
         * 
         */
        public Builder workstationClusterId(String workstationClusterId) {
            return workstationClusterId(Output.of(workstationClusterId));
        }

        /**
         * @param workstationConfigId The ID to be assigned to the workstation cluster config.
         * 
         * @return builder
         * 
         */
        public Builder workstationConfigId(@Nullable Output<String> workstationConfigId) {
            $.workstationConfigId = workstationConfigId;
            return this;
        }

        /**
         * @param workstationConfigId The ID to be assigned to the workstation cluster config.
         * 
         * @return builder
         * 
         */
        public Builder workstationConfigId(String workstationConfigId) {
            return workstationConfigId(Output.of(workstationConfigId));
        }

        public WorkstationConfigState build() {
            return $;
        }
    }

}
