// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FieldIndexConfigIndex {
    /**
     * @return Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
     * be specified.
     * Possible values are: `CONTAINS`.
     * 
     */
    private @Nullable String arrayConfig;
    /**
     * @return Indicates that this field supports ordering by the specified order or comparing using =, &lt;, &lt;=, &gt;, &gt;=, !=.
     * Only one of `order` and `arrayConfig` can be specified.
     * Possible values are: `ASCENDING`, `DESCENDING`.
     * 
     */
    private @Nullable String order;
    /**
     * @return The scope at which a query is run. Collection scoped queries require you specify
     * the collection at query time. Collection group scope allows queries across all
     * collections with the same id.
     * Default value is `COLLECTION`.
     * Possible values are: `COLLECTION`, `COLLECTION_GROUP`.
     * 
     */
    private @Nullable String queryScope;

    private FieldIndexConfigIndex() {}
    /**
     * @return Indicates that this field supports operations on arrayValues. Only one of `order` and `arrayConfig` can
     * be specified.
     * Possible values are: `CONTAINS`.
     * 
     */
    public Optional<String> arrayConfig() {
        return Optional.ofNullable(this.arrayConfig);
    }
    /**
     * @return Indicates that this field supports ordering by the specified order or comparing using =, &lt;, &lt;=, &gt;, &gt;=, !=.
     * Only one of `order` and `arrayConfig` can be specified.
     * Possible values are: `ASCENDING`, `DESCENDING`.
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }
    /**
     * @return The scope at which a query is run. Collection scoped queries require you specify
     * the collection at query time. Collection group scope allows queries across all
     * collections with the same id.
     * Default value is `COLLECTION`.
     * Possible values are: `COLLECTION`, `COLLECTION_GROUP`.
     * 
     */
    public Optional<String> queryScope() {
        return Optional.ofNullable(this.queryScope);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FieldIndexConfigIndex defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arrayConfig;
        private @Nullable String order;
        private @Nullable String queryScope;
        public Builder() {}
        public Builder(FieldIndexConfigIndex defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arrayConfig = defaults.arrayConfig;
    	      this.order = defaults.order;
    	      this.queryScope = defaults.queryScope;
        }

        @CustomType.Setter
        public Builder arrayConfig(@Nullable String arrayConfig) {
            this.arrayConfig = arrayConfig;
            return this;
        }
        @CustomType.Setter
        public Builder order(@Nullable String order) {
            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder queryScope(@Nullable String queryScope) {
            this.queryScope = queryScope;
            return this;
        }
        public FieldIndexConfigIndex build() {
            final var o = new FieldIndexConfigIndex();
            o.arrayConfig = arrayConfig;
            o.order = order;
            o.queryScope = queryScope;
            return o;
        }
    }
}
