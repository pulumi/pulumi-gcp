// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AiFeatureOnlineStoreBigtableAutoScaling {
    /**
     * @return A percentage of the cluster&#39;s CPU capacity. Can be from 10% to 80%. When a cluster&#39;s CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
     * 
     */
    private @Nullable Integer cpuUtilizationTarget;
    /**
     * @return The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
     * 
     */
    private Integer maxNodeCount;
    /**
     * @return The minimum number of nodes to scale down to. Must be greater than or equal to 1.
     * 
     */
    private Integer minNodeCount;

    private AiFeatureOnlineStoreBigtableAutoScaling() {}
    /**
     * @return A percentage of the cluster&#39;s CPU capacity. Can be from 10% to 80%. When a cluster&#39;s CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
     * 
     */
    public Optional<Integer> cpuUtilizationTarget() {
        return Optional.ofNullable(this.cpuUtilizationTarget);
    }
    /**
     * @return The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
     * 
     */
    public Integer maxNodeCount() {
        return this.maxNodeCount;
    }
    /**
     * @return The minimum number of nodes to scale down to. Must be greater than or equal to 1.
     * 
     */
    public Integer minNodeCount() {
        return this.minNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiFeatureOnlineStoreBigtableAutoScaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer cpuUtilizationTarget;
        private Integer maxNodeCount;
        private Integer minNodeCount;
        public Builder() {}
        public Builder(AiFeatureOnlineStoreBigtableAutoScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuUtilizationTarget = defaults.cpuUtilizationTarget;
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
        }

        @CustomType.Setter
        public Builder cpuUtilizationTarget(@Nullable Integer cpuUtilizationTarget) {

            this.cpuUtilizationTarget = cpuUtilizationTarget;
            return this;
        }
        @CustomType.Setter
        public Builder maxNodeCount(Integer maxNodeCount) {
            if (maxNodeCount == null) {
              throw new MissingRequiredPropertyException("AiFeatureOnlineStoreBigtableAutoScaling", "maxNodeCount");
            }
            this.maxNodeCount = maxNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCount(Integer minNodeCount) {
            if (minNodeCount == null) {
              throw new MissingRequiredPropertyException("AiFeatureOnlineStoreBigtableAutoScaling", "minNodeCount");
            }
            this.minNodeCount = minNodeCount;
            return this;
        }
        public AiFeatureOnlineStoreBigtableAutoScaling build() {
            final var _resultValue = new AiFeatureOnlineStoreBigtableAutoScaling();
            _resultValue.cpuUtilizationTarget = cpuUtilizationTarget;
            _resultValue.maxNodeCount = maxNodeCount;
            _resultValue.minNodeCount = minNodeCount;
            return _resultValue;
        }
    }
}
