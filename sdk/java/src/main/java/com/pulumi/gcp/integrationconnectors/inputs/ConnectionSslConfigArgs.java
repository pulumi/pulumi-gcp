// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigAdditionalVariableArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigClientCertificateArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigClientPrivateKeyArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigClientPrivateKeyPassArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigPrivateServerCertificateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionSslConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionSslConfigArgs Empty = new ConnectionSslConfigArgs();

    /**
     * Additional SSL related field values.
     * Structure is documented below.
     * 
     */
    @Import(name="additionalVariables")
    private @Nullable Output<List<ConnectionSslConfigAdditionalVariableArgs>> additionalVariables;

    /**
     * @return Additional SSL related field values.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionSslConfigAdditionalVariableArgs>>> additionalVariables() {
        return Optional.ofNullable(this.additionalVariables);
    }

    /**
     * Type of Client Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    @Import(name="clientCertType")
    private @Nullable Output<String> clientCertType;

    /**
     * @return Type of Client Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    public Optional<Output<String>> clientCertType() {
        return Optional.ofNullable(this.clientCertType);
    }

    /**
     * Client Certificate
     * Structure is documented below.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<ConnectionSslConfigClientCertificateArgs> clientCertificate;

    /**
     * @return Client Certificate
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionSslConfigClientCertificateArgs>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * Client Private Key
     * Structure is documented below.
     * 
     */
    @Import(name="clientPrivateKey")
    private @Nullable Output<ConnectionSslConfigClientPrivateKeyArgs> clientPrivateKey;

    /**
     * @return Client Private Key
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionSslConfigClientPrivateKeyArgs>> clientPrivateKey() {
        return Optional.ofNullable(this.clientPrivateKey);
    }

    /**
     * Secret containing the passphrase protecting the Client Private Key
     * Structure is documented below.
     * 
     */
    @Import(name="clientPrivateKeyPass")
    private @Nullable Output<ConnectionSslConfigClientPrivateKeyPassArgs> clientPrivateKeyPass;

    /**
     * @return Secret containing the passphrase protecting the Client Private Key
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionSslConfigClientPrivateKeyPassArgs>> clientPrivateKeyPass() {
        return Optional.ofNullable(this.clientPrivateKeyPass);
    }

    /**
     * Private Server Certificate. Needs to be specified if trust model is PRIVATE.
     * Structure is documented below.
     * 
     */
    @Import(name="privateServerCertificate")
    private @Nullable Output<ConnectionSslConfigPrivateServerCertificateArgs> privateServerCertificate;

    /**
     * @return Private Server Certificate. Needs to be specified if trust model is PRIVATE.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionSslConfigPrivateServerCertificateArgs>> privateServerCertificate() {
        return Optional.ofNullable(this.privateServerCertificate);
    }

    /**
     * Type of Server Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    @Import(name="serverCertType")
    private @Nullable Output<String> serverCertType;

    /**
     * @return Type of Server Cert (PEM/JKS/.. etc.)
     * Possible values are: `PEM`.
     * 
     */
    public Optional<Output<String>> serverCertType() {
        return Optional.ofNullable(this.serverCertType);
    }

    /**
     * Enum for Trust Model
     * Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
     * 
     */
    @Import(name="trustModel")
    private @Nullable Output<String> trustModel;

    /**
     * @return Enum for Trust Model
     * Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
     * 
     */
    public Optional<Output<String>> trustModel() {
        return Optional.ofNullable(this.trustModel);
    }

    /**
     * Enum for controlling the SSL Type (TLS/MTLS)
     * Possible values are: `TLS`, `MTLS`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Enum for controlling the SSL Type (TLS/MTLS)
     * Possible values are: `TLS`, `MTLS`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Bool for enabling SSL
     * 
     */
    @Import(name="useSsl")
    private @Nullable Output<Boolean> useSsl;

    /**
     * @return Bool for enabling SSL
     * 
     */
    public Optional<Output<Boolean>> useSsl() {
        return Optional.ofNullable(this.useSsl);
    }

    private ConnectionSslConfigArgs() {}

    private ConnectionSslConfigArgs(ConnectionSslConfigArgs $) {
        this.additionalVariables = $.additionalVariables;
        this.clientCertType = $.clientCertType;
        this.clientCertificate = $.clientCertificate;
        this.clientPrivateKey = $.clientPrivateKey;
        this.clientPrivateKeyPass = $.clientPrivateKeyPass;
        this.privateServerCertificate = $.privateServerCertificate;
        this.serverCertType = $.serverCertType;
        this.trustModel = $.trustModel;
        this.type = $.type;
        this.useSsl = $.useSsl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionSslConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionSslConfigArgs $;

        public Builder() {
            $ = new ConnectionSslConfigArgs();
        }

        public Builder(ConnectionSslConfigArgs defaults) {
            $ = new ConnectionSslConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalVariables Additional SSL related field values.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(@Nullable Output<List<ConnectionSslConfigAdditionalVariableArgs>> additionalVariables) {
            $.additionalVariables = additionalVariables;
            return this;
        }

        /**
         * @param additionalVariables Additional SSL related field values.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(List<ConnectionSslConfigAdditionalVariableArgs> additionalVariables) {
            return additionalVariables(Output.of(additionalVariables));
        }

        /**
         * @param additionalVariables Additional SSL related field values.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder additionalVariables(ConnectionSslConfigAdditionalVariableArgs... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }

        /**
         * @param clientCertType Type of Client Cert (PEM/JKS/.. etc.)
         * Possible values are: `PEM`.
         * 
         * @return builder
         * 
         */
        public Builder clientCertType(@Nullable Output<String> clientCertType) {
            $.clientCertType = clientCertType;
            return this;
        }

        /**
         * @param clientCertType Type of Client Cert (PEM/JKS/.. etc.)
         * Possible values are: `PEM`.
         * 
         * @return builder
         * 
         */
        public Builder clientCertType(String clientCertType) {
            return clientCertType(Output.of(clientCertType));
        }

        /**
         * @param clientCertificate Client Certificate
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(@Nullable Output<ConnectionSslConfigClientCertificateArgs> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificate Client Certificate
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(ConnectionSslConfigClientCertificateArgs clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        /**
         * @param clientPrivateKey Client Private Key
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientPrivateKey(@Nullable Output<ConnectionSslConfigClientPrivateKeyArgs> clientPrivateKey) {
            $.clientPrivateKey = clientPrivateKey;
            return this;
        }

        /**
         * @param clientPrivateKey Client Private Key
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientPrivateKey(ConnectionSslConfigClientPrivateKeyArgs clientPrivateKey) {
            return clientPrivateKey(Output.of(clientPrivateKey));
        }

        /**
         * @param clientPrivateKeyPass Secret containing the passphrase protecting the Client Private Key
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientPrivateKeyPass(@Nullable Output<ConnectionSslConfigClientPrivateKeyPassArgs> clientPrivateKeyPass) {
            $.clientPrivateKeyPass = clientPrivateKeyPass;
            return this;
        }

        /**
         * @param clientPrivateKeyPass Secret containing the passphrase protecting the Client Private Key
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder clientPrivateKeyPass(ConnectionSslConfigClientPrivateKeyPassArgs clientPrivateKeyPass) {
            return clientPrivateKeyPass(Output.of(clientPrivateKeyPass));
        }

        /**
         * @param privateServerCertificate Private Server Certificate. Needs to be specified if trust model is PRIVATE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateServerCertificate(@Nullable Output<ConnectionSslConfigPrivateServerCertificateArgs> privateServerCertificate) {
            $.privateServerCertificate = privateServerCertificate;
            return this;
        }

        /**
         * @param privateServerCertificate Private Server Certificate. Needs to be specified if trust model is PRIVATE.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateServerCertificate(ConnectionSslConfigPrivateServerCertificateArgs privateServerCertificate) {
            return privateServerCertificate(Output.of(privateServerCertificate));
        }

        /**
         * @param serverCertType Type of Server Cert (PEM/JKS/.. etc.)
         * Possible values are: `PEM`.
         * 
         * @return builder
         * 
         */
        public Builder serverCertType(@Nullable Output<String> serverCertType) {
            $.serverCertType = serverCertType;
            return this;
        }

        /**
         * @param serverCertType Type of Server Cert (PEM/JKS/.. etc.)
         * Possible values are: `PEM`.
         * 
         * @return builder
         * 
         */
        public Builder serverCertType(String serverCertType) {
            return serverCertType(Output.of(serverCertType));
        }

        /**
         * @param trustModel Enum for Trust Model
         * Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
         * 
         * @return builder
         * 
         */
        public Builder trustModel(@Nullable Output<String> trustModel) {
            $.trustModel = trustModel;
            return this;
        }

        /**
         * @param trustModel Enum for Trust Model
         * Possible values are: `PUBLIC`, `PRIVATE`, `INSECURE`.
         * 
         * @return builder
         * 
         */
        public Builder trustModel(String trustModel) {
            return trustModel(Output.of(trustModel));
        }

        /**
         * @param type Enum for controlling the SSL Type (TLS/MTLS)
         * Possible values are: `TLS`, `MTLS`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Enum for controlling the SSL Type (TLS/MTLS)
         * Possible values are: `TLS`, `MTLS`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useSsl Bool for enabling SSL
         * 
         * @return builder
         * 
         */
        public Builder useSsl(@Nullable Output<Boolean> useSsl) {
            $.useSsl = useSsl;
            return this;
        }

        /**
         * @param useSsl Bool for enabling SSL
         * 
         * @return builder
         * 
         */
        public Builder useSsl(Boolean useSsl) {
            return useSsl(Output.of(useSsl));
        }

        public ConnectionSslConfigArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ConnectionSslConfigArgs", "type");
            }
            return $;
        }
    }

}
