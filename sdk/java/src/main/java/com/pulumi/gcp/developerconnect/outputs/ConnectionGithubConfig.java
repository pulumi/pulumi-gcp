// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.outputs.ConnectionGithubConfigAuthorizerCredential;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionGithubConfig {
    /**
     * @return Optional. GitHub App installation id.
     * 
     */
    private @Nullable String appInstallationId;
    /**
     * @return Represents an OAuth token of the account that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionGithubConfigAuthorizerCredential authorizerCredential;
    /**
     * @return Required. Immutable. The GitHub Application that was installed to the GitHub user or
     * organization.
     * Possible values:
     * GIT_HUB_APP_UNSPECIFIED
     * DEVELOPER_CONNECT
     * FIREBASE
     * 
     */
    private String githubApp;
    /**
     * @return (Output)
     * Output only. The URI to navigate to in order to manage the installation associated
     * with this GitHubConfig.
     * 
     */
    private @Nullable String installationUri;

    private ConnectionGithubConfig() {}
    /**
     * @return Optional. GitHub App installation id.
     * 
     */
    public Optional<String> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }
    /**
     * @return Represents an OAuth token of the account that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionGithubConfigAuthorizerCredential> authorizerCredential() {
        return Optional.ofNullable(this.authorizerCredential);
    }
    /**
     * @return Required. Immutable. The GitHub Application that was installed to the GitHub user or
     * organization.
     * Possible values:
     * GIT_HUB_APP_UNSPECIFIED
     * DEVELOPER_CONNECT
     * FIREBASE
     * 
     */
    public String githubApp() {
        return this.githubApp;
    }
    /**
     * @return (Output)
     * Output only. The URI to navigate to in order to manage the installation associated
     * with this GitHubConfig.
     * 
     */
    public Optional<String> installationUri() {
        return Optional.ofNullable(this.installationUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionGithubConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String appInstallationId;
        private @Nullable ConnectionGithubConfigAuthorizerCredential authorizerCredential;
        private String githubApp;
        private @Nullable String installationUri;
        public Builder() {}
        public Builder(ConnectionGithubConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appInstallationId = defaults.appInstallationId;
    	      this.authorizerCredential = defaults.authorizerCredential;
    	      this.githubApp = defaults.githubApp;
    	      this.installationUri = defaults.installationUri;
        }

        @CustomType.Setter
        public Builder appInstallationId(@Nullable String appInstallationId) {

            this.appInstallationId = appInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder authorizerCredential(@Nullable ConnectionGithubConfigAuthorizerCredential authorizerCredential) {

            this.authorizerCredential = authorizerCredential;
            return this;
        }
        @CustomType.Setter
        public Builder githubApp(String githubApp) {
            if (githubApp == null) {
              throw new MissingRequiredPropertyException("ConnectionGithubConfig", "githubApp");
            }
            this.githubApp = githubApp;
            return this;
        }
        @CustomType.Setter
        public Builder installationUri(@Nullable String installationUri) {

            this.installationUri = installationUri;
            return this;
        }
        public ConnectionGithubConfig build() {
            final var _resultValue = new ConnectionGithubConfig();
            _resultValue.appInstallationId = appInstallationId;
            _resultValue.authorizerCredential = authorizerCredential;
            _resultValue.githubApp = githubApp;
            _resultValue.installationUri = installationUri;
            return _resultValue;
        }
    }
}
