// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegionSslCertificateResult {
    private String certificate;
    private Integer certificateId;
    private String creationTimestamp;
    private String description;
    private String expireTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private String namePrefix;
    private String privateKey;
    private @Nullable String project;
    private @Nullable String region;
    private String selfLink;

    private GetRegionSslCertificateResult() {}
    public String certificate() {
        return this.certificate;
    }
    public Integer certificateId() {
        return this.certificateId;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String namePrefix() {
        return this.namePrefix;
    }
    public String privateKey() {
        return this.privateKey;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public String selfLink() {
        return this.selfLink;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionSslCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificate;
        private Integer certificateId;
        private String creationTimestamp;
        private String description;
        private String expireTime;
        private String id;
        private String name;
        private String namePrefix;
        private String privateKey;
        private @Nullable String project;
        private @Nullable String region;
        private String selfLink;
        public Builder() {}
        public Builder(GetRegionSslCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.certificateId = defaults.certificateId;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.privateKey = defaults.privateKey;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
        }

        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(Integer certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(String namePrefix) {
            if (namePrefix == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "namePrefix");
            }
            this.namePrefix = namePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetRegionSslCertificateResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        public GetRegionSslCertificateResult build() {
            final var _resultValue = new GetRegionSslCertificateResult();
            _resultValue.certificate = certificate;
            _resultValue.certificateId = certificateId;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.expireTime = expireTime;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.namePrefix = namePrefix;
            _resultValue.privateKey = privateKey;
            _resultValue.project = project;
            _resultValue.region = region;
            _resultValue.selfLink = selfLink;
            return _resultValue;
        }
    }
}
