// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class AiFeatureStoreOnlineServingConfigScalingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureStoreOnlineServingConfigScalingArgs Empty = new AiFeatureStoreOnlineServingConfigScalingArgs();

    /**
     * The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
     * 
     */
    @Import(name="maxNodeCount", required=true)
    private Output<Integer> maxNodeCount;

    /**
     * @return The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
     * 
     */
    public Output<Integer> maxNodeCount() {
        return this.maxNodeCount;
    }

    /**
     * The minimum number of nodes to scale down to. Must be greater than or equal to 1.
     * 
     */
    @Import(name="minNodeCount", required=true)
    private Output<Integer> minNodeCount;

    /**
     * @return The minimum number of nodes to scale down to. Must be greater than or equal to 1.
     * 
     */
    public Output<Integer> minNodeCount() {
        return this.minNodeCount;
    }

    private AiFeatureStoreOnlineServingConfigScalingArgs() {}

    private AiFeatureStoreOnlineServingConfigScalingArgs(AiFeatureStoreOnlineServingConfigScalingArgs $) {
        this.maxNodeCount = $.maxNodeCount;
        this.minNodeCount = $.minNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureStoreOnlineServingConfigScalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureStoreOnlineServingConfigScalingArgs $;

        public Builder() {
            $ = new AiFeatureStoreOnlineServingConfigScalingArgs();
        }

        public Builder(AiFeatureStoreOnlineServingConfigScalingArgs defaults) {
            $ = new AiFeatureStoreOnlineServingConfigScalingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxNodeCount The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(Output<Integer> maxNodeCount) {
            $.maxNodeCount = maxNodeCount;
            return this;
        }

        /**
         * @param maxNodeCount The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of &#39;minNodeCount&#39;.
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(Integer maxNodeCount) {
            return maxNodeCount(Output.of(maxNodeCount));
        }

        /**
         * @param minNodeCount The minimum number of nodes to scale down to. Must be greater than or equal to 1.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(Output<Integer> minNodeCount) {
            $.minNodeCount = minNodeCount;
            return this;
        }

        /**
         * @param minNodeCount The minimum number of nodes to scale down to. Must be greater than or equal to 1.
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(Integer minNodeCount) {
            return minNodeCount(Output.of(minNodeCount));
        }

        public AiFeatureStoreOnlineServingConfigScalingArgs build() {
            $.maxNodeCount = Objects.requireNonNull($.maxNodeCount, "expected parameter 'maxNodeCount' to be non-null");
            $.minNodeCount = Objects.requireNonNull($.minNodeCount, "expected parameter 'minNodeCount' to be non-null");
            return $;
        }
    }

}
