// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.filestore.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceNetwork {
    private String connectMode;
    private List<String> ipAddresses;
    private List<String> modes;
    private String network;
    private String reservedIpRange;

    private GetInstanceNetwork() {}
    public String connectMode() {
        return this.connectMode;
    }
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }
    public List<String> modes() {
        return this.modes;
    }
    public String network() {
        return this.network;
    }
    public String reservedIpRange() {
        return this.reservedIpRange;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceNetwork defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectMode;
        private List<String> ipAddresses;
        private List<String> modes;
        private String network;
        private String reservedIpRange;
        public Builder() {}
        public Builder(GetInstanceNetwork defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectMode = defaults.connectMode;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.modes = defaults.modes;
    	      this.network = defaults.network;
    	      this.reservedIpRange = defaults.reservedIpRange;
        }

        @CustomType.Setter
        public Builder connectMode(String connectMode) {
            if (connectMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetwork", "connectMode");
            }
            this.connectMode = connectMode;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(List<String> ipAddresses) {
            if (ipAddresses == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetwork", "ipAddresses");
            }
            this.ipAddresses = ipAddresses;
            return this;
        }
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }
        @CustomType.Setter
        public Builder modes(List<String> modes) {
            if (modes == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetwork", "modes");
            }
            this.modes = modes;
            return this;
        }
        public Builder modes(String... modes) {
            return modes(List.of(modes));
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetwork", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder reservedIpRange(String reservedIpRange) {
            if (reservedIpRange == null) {
              throw new MissingRequiredPropertyException("GetInstanceNetwork", "reservedIpRange");
            }
            this.reservedIpRange = reservedIpRange;
            return this;
        }
        public GetInstanceNetwork build() {
            final var _resultValue = new GetInstanceNetwork();
            _resultValue.connectMode = connectMode;
            _resultValue.ipAddresses = ipAddresses;
            _resultValue.modes = modes;
            _resultValue.network = network;
            _resultValue.reservedIpRange = reservedIpRange;
            return _resultValue;
        }
    }
}
