// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SubscriptionBigqueryConfig {
    /**
     * @return When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
     * Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
     * 
     */
    private final @Nullable Boolean dropUnknownFields;
    /**
     * @return The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
     * 
     */
    private final String table;
    /**
     * @return When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists.
     * 
     */
    private final @Nullable Boolean useTopicSchema;
    /**
     * @return When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
     * The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
     * 
     */
    private final @Nullable Boolean writeMetadata;

    @CustomType.Constructor
    private SubscriptionBigqueryConfig(
        @CustomType.Parameter("dropUnknownFields") @Nullable Boolean dropUnknownFields,
        @CustomType.Parameter("table") String table,
        @CustomType.Parameter("useTopicSchema") @Nullable Boolean useTopicSchema,
        @CustomType.Parameter("writeMetadata") @Nullable Boolean writeMetadata) {
        this.dropUnknownFields = dropUnknownFields;
        this.table = table;
        this.useTopicSchema = useTopicSchema;
        this.writeMetadata = writeMetadata;
    }

    /**
     * @return When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
     * Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
     * 
     */
    public Optional<Boolean> dropUnknownFields() {
        return Optional.ofNullable(this.dropUnknownFields);
    }
    /**
     * @return The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
     * 
     */
    public String table() {
        return this.table;
    }
    /**
     * @return When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists.
     * 
     */
    public Optional<Boolean> useTopicSchema() {
        return Optional.ofNullable(this.useTopicSchema);
    }
    /**
     * @return When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
     * The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
     * 
     */
    public Optional<Boolean> writeMetadata() {
        return Optional.ofNullable(this.writeMetadata);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubscriptionBigqueryConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean dropUnknownFields;
        private String table;
        private @Nullable Boolean useTopicSchema;
        private @Nullable Boolean writeMetadata;

        public Builder() {
    	      // Empty
        }

        public Builder(SubscriptionBigqueryConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dropUnknownFields = defaults.dropUnknownFields;
    	      this.table = defaults.table;
    	      this.useTopicSchema = defaults.useTopicSchema;
    	      this.writeMetadata = defaults.writeMetadata;
        }

        public Builder dropUnknownFields(@Nullable Boolean dropUnknownFields) {
            this.dropUnknownFields = dropUnknownFields;
            return this;
        }
        public Builder table(String table) {
            this.table = Objects.requireNonNull(table);
            return this;
        }
        public Builder useTopicSchema(@Nullable Boolean useTopicSchema) {
            this.useTopicSchema = useTopicSchema;
            return this;
        }
        public Builder writeMetadata(@Nullable Boolean writeMetadata) {
            this.writeMetadata = writeMetadata;
            return this;
        }        public SubscriptionBigqueryConfig build() {
            return new SubscriptionBigqueryConfig(dropUnknownFields, table, useTopicSchema, writeMetadata);
        }
    }
}
