// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.inputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs Empty = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs();

    /**
     * This flag determines the OS policy compliance status when none of the
     * resource groups within the policy are applicable for a VM. Set this value
     * to `true` if the policy needs to be reported as compliant even if the
     * policy has nothing to validate or enforce.
     * 
     */
    @Import(name="allowNoResourceGroupMatch")
    private @Nullable Output<Boolean> allowNoResourceGroupMatch;

    /**
     * @return This flag determines the OS policy compliance status when none of the
     * resource groups within the policy are applicable for a VM. Set this value
     * to `true` if the policy needs to be reported as compliant even if the
     * policy has nothing to validate or enforce.
     * 
     */
    public Optional<Output<Boolean>> allowNoResourceGroupMatch() {
        return Optional.ofNullable(this.allowNoResourceGroupMatch);
    }

    /**
     * Policy description.
     * Length of the description is limited to 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Policy description.
     * Length of the description is limited to 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The id of the OS policy with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the assignment.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The id of the OS policy with the following restrictions:
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * * Must be unique within the assignment.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Policy mode
     * Possible values are: `VALIDATION`, `ENFORCEMENT`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Policy mode
     * Possible values are: `VALIDATION`, `ENFORCEMENT`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * List of resource groups for the policy.
     * For a particular VM, resource groups are evaluated in the order specified
     * and the first resource group that is applicable is selected and the rest
     * are ignored.
     * If none of the resource groups are applicable for a VM, the VM is
     * considered to be non-compliant w.r.t this policy. This behavior can be
     * toggled by the flag `allowNoResourceGroupMatch`
     * Structure is documented below.
     * 
     */
    @Import(name="resourceGroups", required=true)
    private Output<List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs>> resourceGroups;

    /**
     * @return List of resource groups for the policy.
     * For a particular VM, resource groups are evaluated in the order specified
     * and the first resource group that is applicable is selected and the rest
     * are ignored.
     * If none of the resource groups are applicable for a VM, the VM is
     * considered to be non-compliant w.r.t this policy. This behavior can be
     * toggled by the flag `allowNoResourceGroupMatch`
     * Structure is documented below.
     * 
     */
    public Output<List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs>> resourceGroups() {
        return this.resourceGroups;
    }

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs() {}

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs $) {
        this.allowNoResourceGroupMatch = $.allowNoResourceGroupMatch;
        this.description = $.description;
        this.id = $.id;
        this.mode = $.mode;
        this.resourceGroups = $.resourceGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs();
        }

        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs defaults) {
            $ = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowNoResourceGroupMatch This flag determines the OS policy compliance status when none of the
         * resource groups within the policy are applicable for a VM. Set this value
         * to `true` if the policy needs to be reported as compliant even if the
         * policy has nothing to validate or enforce.
         * 
         * @return builder
         * 
         */
        public Builder allowNoResourceGroupMatch(@Nullable Output<Boolean> allowNoResourceGroupMatch) {
            $.allowNoResourceGroupMatch = allowNoResourceGroupMatch;
            return this;
        }

        /**
         * @param allowNoResourceGroupMatch This flag determines the OS policy compliance status when none of the
         * resource groups within the policy are applicable for a VM. Set this value
         * to `true` if the policy needs to be reported as compliant even if the
         * policy has nothing to validate or enforce.
         * 
         * @return builder
         * 
         */
        public Builder allowNoResourceGroupMatch(Boolean allowNoResourceGroupMatch) {
            return allowNoResourceGroupMatch(Output.of(allowNoResourceGroupMatch));
        }

        /**
         * @param description Policy description.
         * Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Policy description.
         * Length of the description is limited to 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id The id of the OS policy with the following restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the assignment.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The id of the OS policy with the following restrictions:
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * * Must be unique within the assignment.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param mode Policy mode
         * Possible values are: `VALIDATION`, `ENFORCEMENT`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Policy mode
         * Possible values are: `VALIDATION`, `ENFORCEMENT`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param resourceGroups List of resource groups for the policy.
         * For a particular VM, resource groups are evaluated in the order specified
         * and the first resource group that is applicable is selected and the rest
         * are ignored.
         * If none of the resource groups are applicable for a VM, the VM is
         * considered to be non-compliant w.r.t this policy. This behavior can be
         * toggled by the flag `allowNoResourceGroupMatch`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(Output<List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs>> resourceGroups) {
            $.resourceGroups = resourceGroups;
            return this;
        }

        /**
         * @param resourceGroups List of resource groups for the policy.
         * For a particular VM, resource groups are evaluated in the order specified
         * and the first resource group that is applicable is selected and the rest
         * are ignored.
         * If none of the resource groups are applicable for a VM, the VM is
         * considered to be non-compliant w.r.t this policy. This behavior can be
         * toggled by the flag `allowNoResourceGroupMatch`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs> resourceGroups) {
            return resourceGroups(Output.of(resourceGroups));
        }

        /**
         * @param resourceGroups List of resource groups for the policy.
         * For a particular VM, resource groups are evaluated in the order specified
         * and the first resource group that is applicable is selected and the rest
         * are ignored.
         * If none of the resource groups are applicable for a VM, the VM is
         * considered to be non-compliant w.r.t this policy. This behavior can be
         * toggled by the flag `allowNoResourceGroupMatch`
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyResourceGroupArgs... resourceGroups) {
            return resourceGroups(List.of(resourceGroups));
        }

        public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs", "id");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs", "mode");
            }
            if ($.resourceGroups == null) {
                throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicyArgs", "resourceGroups");
            }
            return $;
        }
    }

}
