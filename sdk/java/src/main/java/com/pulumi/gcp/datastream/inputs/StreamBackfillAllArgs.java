// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllMysqlExcludedObjectsArgs;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllOracleExcludedObjectsArgs;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllPostgresqlExcludedObjectsArgs;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllSalesforceExcludedObjectsArgs;
import com.pulumi.gcp.datastream.inputs.StreamBackfillAllSqlServerExcludedObjectsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamBackfillAllArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamBackfillAllArgs Empty = new StreamBackfillAllArgs();

    /**
     * MySQL data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    @Import(name="mysqlExcludedObjects")
    private @Nullable Output<StreamBackfillAllMysqlExcludedObjectsArgs> mysqlExcludedObjects;

    /**
     * @return MySQL data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamBackfillAllMysqlExcludedObjectsArgs>> mysqlExcludedObjects() {
        return Optional.ofNullable(this.mysqlExcludedObjects);
    }

    /**
     * PostgreSQL data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    @Import(name="oracleExcludedObjects")
    private @Nullable Output<StreamBackfillAllOracleExcludedObjectsArgs> oracleExcludedObjects;

    /**
     * @return PostgreSQL data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamBackfillAllOracleExcludedObjectsArgs>> oracleExcludedObjects() {
        return Optional.ofNullable(this.oracleExcludedObjects);
    }

    /**
     * PostgreSQL data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    @Import(name="postgresqlExcludedObjects")
    private @Nullable Output<StreamBackfillAllPostgresqlExcludedObjectsArgs> postgresqlExcludedObjects;

    /**
     * @return PostgreSQL data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamBackfillAllPostgresqlExcludedObjectsArgs>> postgresqlExcludedObjects() {
        return Optional.ofNullable(this.postgresqlExcludedObjects);
    }

    /**
     * Salesforce objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    @Import(name="salesforceExcludedObjects")
    private @Nullable Output<StreamBackfillAllSalesforceExcludedObjectsArgs> salesforceExcludedObjects;

    /**
     * @return Salesforce objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamBackfillAllSalesforceExcludedObjectsArgs>> salesforceExcludedObjects() {
        return Optional.ofNullable(this.salesforceExcludedObjects);
    }

    /**
     * SQL Server data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    @Import(name="sqlServerExcludedObjects")
    private @Nullable Output<StreamBackfillAllSqlServerExcludedObjectsArgs> sqlServerExcludedObjects;

    /**
     * @return SQL Server data source objects to avoid backfilling.
     * Structure is documented below.
     * 
     */
    public Optional<Output<StreamBackfillAllSqlServerExcludedObjectsArgs>> sqlServerExcludedObjects() {
        return Optional.ofNullable(this.sqlServerExcludedObjects);
    }

    private StreamBackfillAllArgs() {}

    private StreamBackfillAllArgs(StreamBackfillAllArgs $) {
        this.mysqlExcludedObjects = $.mysqlExcludedObjects;
        this.oracleExcludedObjects = $.oracleExcludedObjects;
        this.postgresqlExcludedObjects = $.postgresqlExcludedObjects;
        this.salesforceExcludedObjects = $.salesforceExcludedObjects;
        this.sqlServerExcludedObjects = $.sqlServerExcludedObjects;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamBackfillAllArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamBackfillAllArgs $;

        public Builder() {
            $ = new StreamBackfillAllArgs();
        }

        public Builder(StreamBackfillAllArgs defaults) {
            $ = new StreamBackfillAllArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mysqlExcludedObjects MySQL data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysqlExcludedObjects(@Nullable Output<StreamBackfillAllMysqlExcludedObjectsArgs> mysqlExcludedObjects) {
            $.mysqlExcludedObjects = mysqlExcludedObjects;
            return this;
        }

        /**
         * @param mysqlExcludedObjects MySQL data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mysqlExcludedObjects(StreamBackfillAllMysqlExcludedObjectsArgs mysqlExcludedObjects) {
            return mysqlExcludedObjects(Output.of(mysqlExcludedObjects));
        }

        /**
         * @param oracleExcludedObjects PostgreSQL data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oracleExcludedObjects(@Nullable Output<StreamBackfillAllOracleExcludedObjectsArgs> oracleExcludedObjects) {
            $.oracleExcludedObjects = oracleExcludedObjects;
            return this;
        }

        /**
         * @param oracleExcludedObjects PostgreSQL data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oracleExcludedObjects(StreamBackfillAllOracleExcludedObjectsArgs oracleExcludedObjects) {
            return oracleExcludedObjects(Output.of(oracleExcludedObjects));
        }

        /**
         * @param postgresqlExcludedObjects PostgreSQL data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postgresqlExcludedObjects(@Nullable Output<StreamBackfillAllPostgresqlExcludedObjectsArgs> postgresqlExcludedObjects) {
            $.postgresqlExcludedObjects = postgresqlExcludedObjects;
            return this;
        }

        /**
         * @param postgresqlExcludedObjects PostgreSQL data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder postgresqlExcludedObjects(StreamBackfillAllPostgresqlExcludedObjectsArgs postgresqlExcludedObjects) {
            return postgresqlExcludedObjects(Output.of(postgresqlExcludedObjects));
        }

        /**
         * @param salesforceExcludedObjects Salesforce objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder salesforceExcludedObjects(@Nullable Output<StreamBackfillAllSalesforceExcludedObjectsArgs> salesforceExcludedObjects) {
            $.salesforceExcludedObjects = salesforceExcludedObjects;
            return this;
        }

        /**
         * @param salesforceExcludedObjects Salesforce objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder salesforceExcludedObjects(StreamBackfillAllSalesforceExcludedObjectsArgs salesforceExcludedObjects) {
            return salesforceExcludedObjects(Output.of(salesforceExcludedObjects));
        }

        /**
         * @param sqlServerExcludedObjects SQL Server data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sqlServerExcludedObjects(@Nullable Output<StreamBackfillAllSqlServerExcludedObjectsArgs> sqlServerExcludedObjects) {
            $.sqlServerExcludedObjects = sqlServerExcludedObjects;
            return this;
        }

        /**
         * @param sqlServerExcludedObjects SQL Server data source objects to avoid backfilling.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sqlServerExcludedObjects(StreamBackfillAllSqlServerExcludedObjectsArgs sqlServerExcludedObjects) {
            return sqlServerExcludedObjects(Output.of(sqlServerExcludedObjects));
        }

        public StreamBackfillAllArgs build() {
            return $;
        }
    }

}
