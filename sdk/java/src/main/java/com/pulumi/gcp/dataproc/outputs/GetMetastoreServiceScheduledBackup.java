// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMetastoreServiceScheduledBackup {
    /**
     * @return A Cloud Storage URI of a folder, in the format gs://&lt;bucket_name&gt;/&lt;path_inside_bucket&gt;. A sub-folder &lt;backup_folder&gt; containing backup files will be stored below it.
     * 
     */
    private String backupLocation;
    /**
     * @return The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.
     * 
     */
    private String cronSchedule;
    /**
     * @return Defines whether the scheduled backup is enabled. The default value is false.
     * 
     */
    private Boolean enabled;
    /**
     * @return Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.
     * 
     */
    private String timeZone;

    private GetMetastoreServiceScheduledBackup() {}
    /**
     * @return A Cloud Storage URI of a folder, in the format gs://&lt;bucket_name&gt;/&lt;path_inside_bucket&gt;. A sub-folder &lt;backup_folder&gt; containing backup files will be stored below it.
     * 
     */
    public String backupLocation() {
        return this.backupLocation;
    }
    /**
     * @return The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.
     * 
     */
    public String cronSchedule() {
        return this.cronSchedule;
    }
    /**
     * @return Defines whether the scheduled backup is enabled. The default value is false.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMetastoreServiceScheduledBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupLocation;
        private String cronSchedule;
        private Boolean enabled;
        private String timeZone;
        public Builder() {}
        public Builder(GetMetastoreServiceScheduledBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupLocation = defaults.backupLocation;
    	      this.cronSchedule = defaults.cronSchedule;
    	      this.enabled = defaults.enabled;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder backupLocation(String backupLocation) {
            if (backupLocation == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceScheduledBackup", "backupLocation");
            }
            this.backupLocation = backupLocation;
            return this;
        }
        @CustomType.Setter
        public Builder cronSchedule(String cronSchedule) {
            if (cronSchedule == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceScheduledBackup", "cronSchedule");
            }
            this.cronSchedule = cronSchedule;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceScheduledBackup", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("GetMetastoreServiceScheduledBackup", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public GetMetastoreServiceScheduledBackup build() {
            final var _resultValue = new GetMetastoreServiceScheduledBackup();
            _resultValue.backupLocation = backupLocation;
            _resultValue.cronSchedule = cronSchedule;
            _resultValue.enabled = enabled;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
