// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.pubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubscriptionDeadLetterPolicy {
    /**
     * @return The name of the topic to which dead letter messages should be published.
     * Format is &#39;projects/{project}/topics/{topic}&#39;.
     * 
     * The Cloud Pub/Sub service account associated with the enclosing subscription&#39;s
     * parent project (i.e.,
     * service-{project_number}{@literal @}gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * 
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     * 
     */
    private String deadLetterTopic;
    /**
     * @return The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * 
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded for the message).
     * 
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * 
     * This field will be honored on a best effort basis.
     * 
     * If this parameter is 0, a default value of 5 is used.
     * 
     */
    private Integer maxDeliveryAttempts;

    private GetSubscriptionDeadLetterPolicy() {}
    /**
     * @return The name of the topic to which dead letter messages should be published.
     * Format is &#39;projects/{project}/topics/{topic}&#39;.
     * 
     * The Cloud Pub/Sub service account associated with the enclosing subscription&#39;s
     * parent project (i.e.,
     * service-{project_number}{@literal @}gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * 
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     * 
     */
    public String deadLetterTopic() {
        return this.deadLetterTopic;
    }
    /**
     * @return The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * 
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded for the message).
     * 
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * 
     * This field will be honored on a best effort basis.
     * 
     * If this parameter is 0, a default value of 5 is used.
     * 
     */
    public Integer maxDeliveryAttempts() {
        return this.maxDeliveryAttempts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionDeadLetterPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deadLetterTopic;
        private Integer maxDeliveryAttempts;
        public Builder() {}
        public Builder(GetSubscriptionDeadLetterPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deadLetterTopic = defaults.deadLetterTopic;
    	      this.maxDeliveryAttempts = defaults.maxDeliveryAttempts;
        }

        @CustomType.Setter
        public Builder deadLetterTopic(String deadLetterTopic) {
            if (deadLetterTopic == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionDeadLetterPolicy", "deadLetterTopic");
            }
            this.deadLetterTopic = deadLetterTopic;
            return this;
        }
        @CustomType.Setter
        public Builder maxDeliveryAttempts(Integer maxDeliveryAttempts) {
            if (maxDeliveryAttempts == null) {
              throw new MissingRequiredPropertyException("GetSubscriptionDeadLetterPolicy", "maxDeliveryAttempts");
            }
            this.maxDeliveryAttempts = maxDeliveryAttempts;
            return this;
        }
        public GetSubscriptionDeadLetterPolicy build() {
            final var _resultValue = new GetSubscriptionDeadLetterPolicy();
            _resultValue.deadLetterTopic = deadLetterTopic;
            _resultValue.maxDeliveryAttempts = maxDeliveryAttempts;
            return _resultValue;
        }
    }
}
