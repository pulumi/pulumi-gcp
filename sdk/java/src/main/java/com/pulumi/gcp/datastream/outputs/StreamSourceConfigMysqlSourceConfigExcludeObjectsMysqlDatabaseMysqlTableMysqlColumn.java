// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn {
    /**
     * @return Column collation.
     * 
     */
    private @Nullable String collation;
    /**
     * @return Column name.
     * 
     */
    private @Nullable String column;
    /**
     * @return The MySQL data type. Full data types list can be found here:
     * https://dev.mysql.com/doc/refman/8.0/en/data-types.html
     * 
     */
    private @Nullable String dataType;
    /**
     * @return Column length.
     * 
     */
    private @Nullable Integer length;
    /**
     * @return Whether or not the column can accept a null value.
     * 
     */
    private @Nullable Boolean nullable;
    /**
     * @return The ordinal position of the column in the table.
     * 
     */
    private @Nullable Integer ordinalPosition;
    /**
     * @return Whether or not the column represents a primary key.
     * 
     */
    private @Nullable Boolean primaryKey;

    private StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn() {}
    /**
     * @return Column collation.
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }
    /**
     * @return Column name.
     * 
     */
    public Optional<String> column() {
        return Optional.ofNullable(this.column);
    }
    /**
     * @return The MySQL data type. Full data types list can be found here:
     * https://dev.mysql.com/doc/refman/8.0/en/data-types.html
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return Column length.
     * 
     */
    public Optional<Integer> length() {
        return Optional.ofNullable(this.length);
    }
    /**
     * @return Whether or not the column can accept a null value.
     * 
     */
    public Optional<Boolean> nullable() {
        return Optional.ofNullable(this.nullable);
    }
    /**
     * @return The ordinal position of the column in the table.
     * 
     */
    public Optional<Integer> ordinalPosition() {
        return Optional.ofNullable(this.ordinalPosition);
    }
    /**
     * @return Whether or not the column represents a primary key.
     * 
     */
    public Optional<Boolean> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String collation;
        private @Nullable String column;
        private @Nullable String dataType;
        private @Nullable Integer length;
        private @Nullable Boolean nullable;
        private @Nullable Integer ordinalPosition;
        private @Nullable Boolean primaryKey;
        public Builder() {}
        public Builder(StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collation = defaults.collation;
    	      this.column = defaults.column;
    	      this.dataType = defaults.dataType;
    	      this.length = defaults.length;
    	      this.nullable = defaults.nullable;
    	      this.ordinalPosition = defaults.ordinalPosition;
    	      this.primaryKey = defaults.primaryKey;
        }

        @CustomType.Setter
        public Builder collation(@Nullable String collation) {
            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder column(@Nullable String column) {
            this.column = column;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder length(@Nullable Integer length) {
            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder nullable(@Nullable Boolean nullable) {
            this.nullable = nullable;
            return this;
        }
        @CustomType.Setter
        public Builder ordinalPosition(@Nullable Integer ordinalPosition) {
            this.ordinalPosition = ordinalPosition;
            return this;
        }
        @CustomType.Setter
        public Builder primaryKey(@Nullable Boolean primaryKey) {
            this.primaryKey = primaryKey;
            return this;
        }
        public StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn build() {
            final var o = new StreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabaseMysqlTableMysqlColumn();
            o.collation = collation;
            o.column = column;
            o.dataType = dataType;
            o.length = length;
            o.nullable = nullable;
            o.ordinalPosition = ordinalPosition;
            o.primaryKey = primaryKey;
            return o;
        }
    }
}
