// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securitycenter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FolderSccBigQueryExportArgs extends com.pulumi.resources.ResourceArgs {

    public static final FolderSccBigQueryExportArgs Empty = new FolderSccBigQueryExportArgs();

    /**
     * This must be unique within the organization.
     * 
     */
    @Import(name="bigQueryExportId", required=true)
    private Output<String> bigQueryExportId;

    /**
     * @return This must be unique within the organization.
     * 
     */
    public Output<String> bigQueryExportId() {
        return this.bigQueryExportId;
    }

    /**
     * The dataset to write findings&#39; updates to.
     * Its format is &#34;projects/[projectId]/datasets/[bigqueryDatasetId]&#34;.
     * BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
     * 
     */
    @Import(name="dataset", required=true)
    private Output<String> dataset;

    /**
     * @return The dataset to write findings&#39; updates to.
     * Its format is &#34;projects/[projectId]/datasets/[bigqueryDatasetId]&#34;.
     * BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
     * 
     */
    public Output<String> dataset() {
        return this.dataset;
    }

    /**
     * The description of the export (max of 1024 characters).
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the export (max of 1024 characters).
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Expression that defines the filter to apply across create/update
     * events of findings. The
     * expression is a list of zero or more restrictions combined via
     * logical operators AND and OR. Parentheses are supported, and OR
     * has higher precedence than AND.
     * Restrictions have the form &lt;field&gt; &lt;operator&gt; &lt;value&gt; and may have
     * a - character in front of them to indicate negation. The fields
     * map to those defined in the corresponding resource.
     * The supported operators are:
     * * = for all value types.
     * * &gt; , &lt;, &gt;=, &lt;= for integer values.
     * * :, meaning substring matching, for strings.
     *   The supported value types are:
     * * string literals in quotes.
     * * integer literals without quotes.
     * * boolean literals true and false without quotes.
     *   See
     *   [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
     *   for information on how to write a filter.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return Expression that defines the filter to apply across create/update
     * events of findings. The
     * expression is a list of zero or more restrictions combined via
     * logical operators AND and OR. Parentheses are supported, and OR
     * has higher precedence than AND.
     * Restrictions have the form &lt;field&gt; &lt;operator&gt; &lt;value&gt; and may have
     * a - character in front of them to indicate negation. The fields
     * map to those defined in the corresponding resource.
     * The supported operators are:
     * * = for all value types.
     * * &gt; , &lt;, &gt;=, &lt;= for integer values.
     * * :, meaning substring matching, for strings.
     *   The supported value types are:
     * * string literals in quotes.
     * * integer literals without quotes.
     * * boolean literals true and false without quotes.
     *   See
     *   [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
     *   for information on how to write a filter.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     * The folder where Cloud Security Command Center Big Query Export
     * Config lives in.
     * 
     */
    @Import(name="folder", required=true)
    private Output<String> folder;

    /**
     * @return The folder where Cloud Security Command Center Big Query Export
     * Config lives in.
     * 
     */
    public Output<String> folder() {
        return this.folder;
    }

    private FolderSccBigQueryExportArgs() {}

    private FolderSccBigQueryExportArgs(FolderSccBigQueryExportArgs $) {
        this.bigQueryExportId = $.bigQueryExportId;
        this.dataset = $.dataset;
        this.description = $.description;
        this.filter = $.filter;
        this.folder = $.folder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FolderSccBigQueryExportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FolderSccBigQueryExportArgs $;

        public Builder() {
            $ = new FolderSccBigQueryExportArgs();
        }

        public Builder(FolderSccBigQueryExportArgs defaults) {
            $ = new FolderSccBigQueryExportArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bigQueryExportId This must be unique within the organization.
         * 
         * @return builder
         * 
         */
        public Builder bigQueryExportId(Output<String> bigQueryExportId) {
            $.bigQueryExportId = bigQueryExportId;
            return this;
        }

        /**
         * @param bigQueryExportId This must be unique within the organization.
         * 
         * @return builder
         * 
         */
        public Builder bigQueryExportId(String bigQueryExportId) {
            return bigQueryExportId(Output.of(bigQueryExportId));
        }

        /**
         * @param dataset The dataset to write findings&#39; updates to.
         * Its format is &#34;projects/[projectId]/datasets/[bigqueryDatasetId]&#34;.
         * BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
         * 
         * @return builder
         * 
         */
        public Builder dataset(Output<String> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset The dataset to write findings&#39; updates to.
         * Its format is &#34;projects/[projectId]/datasets/[bigqueryDatasetId]&#34;.
         * BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
         * 
         * @return builder
         * 
         */
        public Builder dataset(String dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param description The description of the export (max of 1024 characters).
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the export (max of 1024 characters).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filter Expression that defines the filter to apply across create/update
         * events of findings. The
         * expression is a list of zero or more restrictions combined via
         * logical operators AND and OR. Parentheses are supported, and OR
         * has higher precedence than AND.
         * Restrictions have the form &lt;field&gt; &lt;operator&gt; &lt;value&gt; and may have
         * a - character in front of them to indicate negation. The fields
         * map to those defined in the corresponding resource.
         * The supported operators are:
         * * = for all value types.
         * * &gt; , &lt;, &gt;=, &lt;= for integer values.
         * * :, meaning substring matching, for strings.
         *   The supported value types are:
         * * string literals in quotes.
         * * integer literals without quotes.
         * * boolean literals true and false without quotes.
         *   See
         *   [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
         *   for information on how to write a filter.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Expression that defines the filter to apply across create/update
         * events of findings. The
         * expression is a list of zero or more restrictions combined via
         * logical operators AND and OR. Parentheses are supported, and OR
         * has higher precedence than AND.
         * Restrictions have the form &lt;field&gt; &lt;operator&gt; &lt;value&gt; and may have
         * a - character in front of them to indicate negation. The fields
         * map to those defined in the corresponding resource.
         * The supported operators are:
         * * = for all value types.
         * * &gt; , &lt;, &gt;=, &lt;= for integer values.
         * * :, meaning substring matching, for strings.
         *   The supported value types are:
         * * string literals in quotes.
         * * integer literals without quotes.
         * * boolean literals true and false without quotes.
         *   See
         *   [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
         *   for information on how to write a filter.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param folder The folder where Cloud Security Command Center Big Query Export
         * Config lives in.
         * 
         * @return builder
         * 
         */
        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder where Cloud Security Command Center Big Query Export
         * Config lives in.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        public FolderSccBigQueryExportArgs build() {
            if ($.bigQueryExportId == null) {
                throw new MissingRequiredPropertyException("FolderSccBigQueryExportArgs", "bigQueryExportId");
            }
            if ($.dataset == null) {
                throw new MissingRequiredPropertyException("FolderSccBigQueryExportArgs", "dataset");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("FolderSccBigQueryExportArgs", "description");
            }
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("FolderSccBigQueryExportArgs", "filter");
            }
            if ($.folder == null) {
                throw new MissingRequiredPropertyException("FolderSccBigQueryExportArgs", "folder");
            }
            return $;
        }
    }

}
