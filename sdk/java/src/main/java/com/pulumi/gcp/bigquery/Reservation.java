// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.bigquery.ReservationArgs;
import com.pulumi.gcp.bigquery.inputs.ReservationState;
import com.pulumi.gcp.bigquery.outputs.ReservationAutoscale;
import com.pulumi.gcp.bigquery.outputs.ReservationReplicationStatus;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A reservation is a mechanism used to guarantee BigQuery slots to users.
 * 
 * To get more information about Reservation, see:
 * 
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create)
 * * How-to Guides
 *     * [Introduction to Reservations](https://cloud.google.com/bigquery/docs/reservations-intro)
 * 
 * ## Example Usage
 * 
 * ### Bigquery Reservation Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.bigquery.Reservation;
 * import com.pulumi.gcp.bigquery.ReservationArgs;
 * import com.pulumi.gcp.bigquery.inputs.ReservationAutoscaleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var reservation = new Reservation("reservation", ReservationArgs.builder()
 *             .name("my-reservation")
 *             .location("us-west2")
 *             .slotCapacity(0)
 *             .edition("STANDARD")
 *             .ignoreIdleSlots(true)
 *             .concurrency(0)
 *             .autoscale(ReservationAutoscaleArgs.builder()
 *                 .maxSlots(100)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Reservation can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/reservations/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Reservation can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:bigquery/reservation:Reservation default projects/{{project}}/locations/{{location}}/reservations/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigquery/reservation:Reservation default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigquery/reservation:Reservation default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:bigquery/reservation:Reservation")
public class Reservation extends com.pulumi.resources.CustomResource {
    /**
     * The configuration parameters for the auto scaling feature.
     * Structure is documented below.
     * 
     */
    @Export(name="autoscale", refs={ReservationAutoscale.class}, tree="[0]")
    private Output</* @Nullable */ ReservationAutoscale> autoscale;

    /**
     * @return The configuration parameters for the auto scaling feature.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ReservationAutoscale>> autoscale() {
        return Codegen.optional(this.autoscale);
    }
    /**
     * Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    @Export(name="concurrency", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> concurrency;

    /**
     * @return Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    public Output<Optional<Integer>> concurrency() {
        return Codegen.optional(this.concurrency);
    }
    /**
     * The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     * 
     */
    @Export(name="edition", refs={String.class}, tree="[0]")
    private Output<String> edition;

    /**
     * @return The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     * 
     */
    public Output<String> edition() {
        return this.edition;
    }
    /**
     * If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    @Export(name="ignoreIdleSlots", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreIdleSlots;

    /**
     * @return If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    public Output<Optional<Boolean>> ignoreIdleSlots() {
        return Codegen.optional(this.ignoreIdleSlots);
    }
    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
     * (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won&#39;t use
     * more than the specified number of slots, even if there is demand and supply (from idle
     * slots). NOTE: capping a reservation&#39;s idle slot usage is best effort and its usage may
     * exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
     * for the additional added slots), it will never exceed the maxSlots - baseline.
     * This field must be set together with the scalingMode enum value, otherwise the request
     * will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
     * must be unset. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
     * output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
     * will represent the current slots from autoscaler excluding idle slots. For example,
     * if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
     * autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
     * between 0 and 1000.
     * If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
     * usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
     * autoscaler.current_slots will not be higher than 700.
     * If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
     * autoscaler field will be null.
     * If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
     * aligned with the scalingMode enum value.(See details in ScalingMode comments).
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Please note, the maxSlots is for user to manage the part of slots greater than the
     * baseline. Therefore, we don&#39;t allow users to set maxSlots smaller or equal to the
     * baseline as it will not be meaningful. If the field is present and
     * slotCapacity&gt;=maxSlots, requests will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
     * maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
     * feature.
     * 
     */
    @Export(name="maxSlots", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxSlots;

    /**
     * @return The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
     * (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won&#39;t use
     * more than the specified number of slots, even if there is demand and supply (from idle
     * slots). NOTE: capping a reservation&#39;s idle slot usage is best effort and its usage may
     * exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
     * for the additional added slots), it will never exceed the maxSlots - baseline.
     * This field must be set together with the scalingMode enum value, otherwise the request
     * will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
     * must be unset. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
     * output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
     * will represent the current slots from autoscaler excluding idle slots. For example,
     * if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
     * autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
     * between 0 and 1000.
     * If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
     * usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
     * autoscaler.current_slots will not be higher than 700.
     * If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
     * autoscaler field will be null.
     * If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
     * aligned with the scalingMode enum value.(See details in ScalingMode comments).
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Please note, the maxSlots is for user to manage the part of slots greater than the
     * baseline. Therefore, we don&#39;t allow users to set maxSlots smaller or equal to the
     * baseline as it will not be meaningful. If the field is present and
     * slotCapacity&gt;=maxSlots, requests will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
     * maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
     * feature.
     * 
     */
    public Output<Optional<Integer>> maxSlots() {
        return Codegen.optional(this.maxSlots);
    }
    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The location where the reservation was originally created. This is set only during the
     * failover reservation&#39;s creation. All billing charges for the failover reservation will be
     * applied to this location.
     * 
     */
    @Export(name="originalPrimaryLocation", refs={String.class}, tree="[0]")
    private Output<String> originalPrimaryLocation;

    /**
     * @return The location where the reservation was originally created. This is set only during the
     * failover reservation&#39;s creation. All billing charges for the failover reservation will be
     * applied to this location.
     * 
     */
    public Output<String> originalPrimaryLocation() {
        return this.originalPrimaryLocation;
    }
    /**
     * The current location of the reservation&#39;s primary replica. This field is only set for
     * reservations using the managed disaster recovery feature.
     * 
     */
    @Export(name="primaryLocation", refs={String.class}, tree="[0]")
    private Output<String> primaryLocation;

    /**
     * @return The current location of the reservation&#39;s primary replica. This field is only set for
     * reservations using the managed disaster recovery feature.
     * 
     */
    public Output<String> primaryLocation() {
        return this.primaryLocation;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The Disaster Recovery(DR) replication status of the reservation. This is only available for
     * the primary replicas of DR/failover reservations and provides information about the both the
     * staleness of the secondary and the last error encountered while trying to replicate changes
     * from the primary to the secondary. If this field is blank, it means that the reservation is
     * either not a DR reservation or the reservation is a DR secondary or that any replication
     * operations on the reservation have succeeded.
     * Structure is documented below.
     * 
     */
    @Export(name="replicationStatuses", refs={List.class,ReservationReplicationStatus.class}, tree="[0,1]")
    private Output<List<ReservationReplicationStatus>> replicationStatuses;

    /**
     * @return The Disaster Recovery(DR) replication status of the reservation. This is only available for
     * the primary replicas of DR/failover reservations and provides information about the both the
     * staleness of the secondary and the last error encountered while trying to replicate changes
     * from the primary to the secondary. If this field is blank, it means that the reservation is
     * either not a DR reservation or the reservation is a DR secondary or that any replication
     * operations on the reservation have succeeded.
     * Structure is documented below.
     * 
     */
    public Output<List<ReservationReplicationStatus>> replicationStatuses() {
        return this.replicationStatuses;
    }
    /**
     * The scaling mode for the reservation. If the field is present but maxSlots is not present,
     * requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Enum values:
     * `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
     * `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
     * not use any idle slots even if there may be some available. The upper limit that autoscaling
     * can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
     * and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
     * set to true. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
     * reservations or from unassigned commitments. If no idle slots are available it will not scale
     * up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
     * it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
     * capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
     * IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
     * reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
     * 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
     * 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
     * scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
     * `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
     * contributed by other reservations or from unassigned commitments first. If no idle slots are
     * available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
     * reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
     * if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
     * slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
     * available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
     * autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
     * 
     */
    @Export(name="scalingMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scalingMode;

    /**
     * @return The scaling mode for the reservation. If the field is present but maxSlots is not present,
     * requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Enum values:
     * `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
     * `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
     * not use any idle slots even if there may be some available. The upper limit that autoscaling
     * can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
     * and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
     * set to true. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
     * reservations or from unassigned commitments. If no idle slots are available it will not scale
     * up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
     * it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
     * capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
     * IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
     * reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
     * 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
     * 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
     * scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
     * `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
     * contributed by other reservations or from unassigned commitments first. If no idle slots are
     * available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
     * reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
     * if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
     * slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
     * available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
     * autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
     * 
     */
    public Output<Optional<String>> scalingMode() {
        return Codegen.optional(this.scalingMode);
    }
    /**
     * The current location of the reservation&#39;s secondary replica. This field is only set for
     * reservations using the managed disaster recovery feature. Users can set this in create
     * reservation calls to create a failover reservation or in update reservation calls to convert
     * a non-failover reservation to a failover reservation(or vice versa).
     * 
     */
    @Export(name="secondaryLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryLocation;

    /**
     * @return The current location of the reservation&#39;s secondary replica. This field is only set for
     * reservations using the managed disaster recovery feature. Users can set this in create
     * reservation calls to create a failover reservation or in update reservation calls to convert
     * a non-failover reservation to a failover reservation(or vice versa).
     * 
     */
    public Output<Optional<String>> secondaryLocation() {
        return Codegen.optional(this.secondaryLocation);
    }
    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    @Export(name="slotCapacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> slotCapacity;

    /**
     * @return Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    public Output<Integer> slotCapacity() {
        return this.slotCapacity;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Reservation(java.lang.String name) {
        this(name, ReservationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Reservation(java.lang.String name, ReservationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Reservation(java.lang.String name, ReservationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/reservation:Reservation", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Reservation(java.lang.String name, Output<java.lang.String> id, @Nullable ReservationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigquery/reservation:Reservation", name, state, makeResourceOptions(options, id), false);
    }

    private static ReservationArgs makeArgs(ReservationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ReservationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Reservation get(java.lang.String name, Output<java.lang.String> id, @Nullable ReservationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Reservation(name, id, state, options);
    }
}
