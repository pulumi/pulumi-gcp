// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigChunkingConfig;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigDefaultParsingConfig;
import com.pulumi.gcp.discoveryengine.outputs.DataStoreDocumentProcessingConfigParsingConfigOverride;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataStoreDocumentProcessingConfig {
    /**
     * @return Whether chunking mode is enabled.
     * Structure is documented below.
     * 
     */
    private @Nullable DataStoreDocumentProcessingConfigChunkingConfig chunkingConfig;
    /**
     * @return Configurations for default Document parser. If not specified, this resource
     * will be configured to use a default DigitalParsingConfig, and the default parsing
     * config will be applied to all file types for Document parsing.
     * Structure is documented below.
     * 
     */
    private @Nullable DataStoreDocumentProcessingConfigDefaultParsingConfig defaultParsingConfig;
    /**
     * @return (Output)
     * The full resource name of the Document Processing Config. Format:
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
     * 
     */
    private @Nullable String name;
    /**
     * @return Map from file type to override the default parsing configuration based on the file type. Supported keys:
     * 
     */
    private @Nullable List<DataStoreDocumentProcessingConfigParsingConfigOverride> parsingConfigOverrides;

    private DataStoreDocumentProcessingConfig() {}
    /**
     * @return Whether chunking mode is enabled.
     * Structure is documented below.
     * 
     */
    public Optional<DataStoreDocumentProcessingConfigChunkingConfig> chunkingConfig() {
        return Optional.ofNullable(this.chunkingConfig);
    }
    /**
     * @return Configurations for default Document parser. If not specified, this resource
     * will be configured to use a default DigitalParsingConfig, and the default parsing
     * config will be applied to all file types for Document parsing.
     * Structure is documented below.
     * 
     */
    public Optional<DataStoreDocumentProcessingConfigDefaultParsingConfig> defaultParsingConfig() {
        return Optional.ofNullable(this.defaultParsingConfig);
    }
    /**
     * @return (Output)
     * The full resource name of the Document Processing Config. Format:
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Map from file type to override the default parsing configuration based on the file type. Supported keys:
     * 
     */
    public List<DataStoreDocumentProcessingConfigParsingConfigOverride> parsingConfigOverrides() {
        return this.parsingConfigOverrides == null ? List.of() : this.parsingConfigOverrides;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataStoreDocumentProcessingConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DataStoreDocumentProcessingConfigChunkingConfig chunkingConfig;
        private @Nullable DataStoreDocumentProcessingConfigDefaultParsingConfig defaultParsingConfig;
        private @Nullable String name;
        private @Nullable List<DataStoreDocumentProcessingConfigParsingConfigOverride> parsingConfigOverrides;
        public Builder() {}
        public Builder(DataStoreDocumentProcessingConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chunkingConfig = defaults.chunkingConfig;
    	      this.defaultParsingConfig = defaults.defaultParsingConfig;
    	      this.name = defaults.name;
    	      this.parsingConfigOverrides = defaults.parsingConfigOverrides;
        }

        @CustomType.Setter
        public Builder chunkingConfig(@Nullable DataStoreDocumentProcessingConfigChunkingConfig chunkingConfig) {

            this.chunkingConfig = chunkingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder defaultParsingConfig(@Nullable DataStoreDocumentProcessingConfigDefaultParsingConfig defaultParsingConfig) {

            this.defaultParsingConfig = defaultParsingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parsingConfigOverrides(@Nullable List<DataStoreDocumentProcessingConfigParsingConfigOverride> parsingConfigOverrides) {

            this.parsingConfigOverrides = parsingConfigOverrides;
            return this;
        }
        public Builder parsingConfigOverrides(DataStoreDocumentProcessingConfigParsingConfigOverride... parsingConfigOverrides) {
            return parsingConfigOverrides(List.of(parsingConfigOverrides));
        }
        public DataStoreDocumentProcessingConfig build() {
            final var _resultValue = new DataStoreDocumentProcessingConfig();
            _resultValue.chunkingConfig = chunkingConfig;
            _resultValue.defaultParsingConfig = defaultParsingConfig;
            _resultValue.name = name;
            _resultValue.parsingConfigOverrides = parsingConfigOverrides;
            return _resultValue;
        }
    }
}
