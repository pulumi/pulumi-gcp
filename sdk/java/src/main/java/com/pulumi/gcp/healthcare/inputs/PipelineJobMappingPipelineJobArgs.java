// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.healthcare.inputs.PipelineJobMappingPipelineJobFhirStreamingSourceArgs;
import com.pulumi.gcp.healthcare.inputs.PipelineJobMappingPipelineJobMappingConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineJobMappingPipelineJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineJobMappingPipelineJobArgs Empty = new PipelineJobMappingPipelineJobArgs();

    /**
     * If set, the mapping pipeline will write snapshots to this
     * FHIR store without assigning stable IDs. You must
     * grant your pipeline project&#39;s Cloud Healthcare Service
     * Agent serviceaccount healthcare.fhirResources.executeBundle
     * and healthcare.fhirResources.create permissions on the
     * destination store. The destination store must set
     * [disableReferentialIntegrity][FhirStore.disable_referential_integrity]
     * to true. The destination store must use FHIR version R4.
     * Format: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{fhirStoreID}.
     * 
     */
    @Import(name="fhirStoreDestination")
    private @Nullable Output<String> fhirStoreDestination;

    /**
     * @return If set, the mapping pipeline will write snapshots to this
     * FHIR store without assigning stable IDs. You must
     * grant your pipeline project&#39;s Cloud Healthcare Service
     * Agent serviceaccount healthcare.fhirResources.executeBundle
     * and healthcare.fhirResources.create permissions on the
     * destination store. The destination store must set
     * [disableReferentialIntegrity][FhirStore.disable_referential_integrity]
     * to true. The destination store must use FHIR version R4.
     * Format: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{fhirStoreID}.
     * 
     */
    public Optional<Output<String>> fhirStoreDestination() {
        return Optional.ofNullable(this.fhirStoreDestination);
    }

    /**
     * A streaming FHIR data source.
     * Structure is documented below.
     * 
     */
    @Import(name="fhirStreamingSource")
    private @Nullable Output<PipelineJobMappingPipelineJobFhirStreamingSourceArgs> fhirStreamingSource;

    /**
     * @return A streaming FHIR data source.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PipelineJobMappingPipelineJobFhirStreamingSourceArgs>> fhirStreamingSource() {
        return Optional.ofNullable(this.fhirStreamingSource);
    }

    /**
     * The location of the mapping configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="mappingConfig", required=true)
    private Output<PipelineJobMappingPipelineJobMappingConfigArgs> mappingConfig;

    /**
     * @return The location of the mapping configuration.
     * Structure is documented below.
     * 
     */
    public Output<PipelineJobMappingPipelineJobMappingConfigArgs> mappingConfig() {
        return this.mappingConfig;
    }

    /**
     * If set to true, a mapping pipeline will send output snapshots
     * to the reconciliation pipeline in its dataset. A reconciliation
     * pipeline must exist in this dataset before a mapping pipeline
     * with a reconciliation destination can be created.
     * 
     */
    @Import(name="reconciliationDestination")
    private @Nullable Output<Boolean> reconciliationDestination;

    /**
     * @return If set to true, a mapping pipeline will send output snapshots
     * to the reconciliation pipeline in its dataset. A reconciliation
     * pipeline must exist in this dataset before a mapping pipeline
     * with a reconciliation destination can be created.
     * 
     */
    public Optional<Output<Boolean>> reconciliationDestination() {
        return Optional.ofNullable(this.reconciliationDestination);
    }

    private PipelineJobMappingPipelineJobArgs() {}

    private PipelineJobMappingPipelineJobArgs(PipelineJobMappingPipelineJobArgs $) {
        this.fhirStoreDestination = $.fhirStoreDestination;
        this.fhirStreamingSource = $.fhirStreamingSource;
        this.mappingConfig = $.mappingConfig;
        this.reconciliationDestination = $.reconciliationDestination;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineJobMappingPipelineJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineJobMappingPipelineJobArgs $;

        public Builder() {
            $ = new PipelineJobMappingPipelineJobArgs();
        }

        public Builder(PipelineJobMappingPipelineJobArgs defaults) {
            $ = new PipelineJobMappingPipelineJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fhirStoreDestination If set, the mapping pipeline will write snapshots to this
         * FHIR store without assigning stable IDs. You must
         * grant your pipeline project&#39;s Cloud Healthcare Service
         * Agent serviceaccount healthcare.fhirResources.executeBundle
         * and healthcare.fhirResources.create permissions on the
         * destination store. The destination store must set
         * [disableReferentialIntegrity][FhirStore.disable_referential_integrity]
         * to true. The destination store must use FHIR version R4.
         * Format: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{fhirStoreID}.
         * 
         * @return builder
         * 
         */
        public Builder fhirStoreDestination(@Nullable Output<String> fhirStoreDestination) {
            $.fhirStoreDestination = fhirStoreDestination;
            return this;
        }

        /**
         * @param fhirStoreDestination If set, the mapping pipeline will write snapshots to this
         * FHIR store without assigning stable IDs. You must
         * grant your pipeline project&#39;s Cloud Healthcare Service
         * Agent serviceaccount healthcare.fhirResources.executeBundle
         * and healthcare.fhirResources.create permissions on the
         * destination store. The destination store must set
         * [disableReferentialIntegrity][FhirStore.disable_referential_integrity]
         * to true. The destination store must use FHIR version R4.
         * Format: project/{projectID}/locations/{locationID}/datasets/{datasetName}/fhirStores/{fhirStoreID}.
         * 
         * @return builder
         * 
         */
        public Builder fhirStoreDestination(String fhirStoreDestination) {
            return fhirStoreDestination(Output.of(fhirStoreDestination));
        }

        /**
         * @param fhirStreamingSource A streaming FHIR data source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fhirStreamingSource(@Nullable Output<PipelineJobMappingPipelineJobFhirStreamingSourceArgs> fhirStreamingSource) {
            $.fhirStreamingSource = fhirStreamingSource;
            return this;
        }

        /**
         * @param fhirStreamingSource A streaming FHIR data source.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fhirStreamingSource(PipelineJobMappingPipelineJobFhirStreamingSourceArgs fhirStreamingSource) {
            return fhirStreamingSource(Output.of(fhirStreamingSource));
        }

        /**
         * @param mappingConfig The location of the mapping configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mappingConfig(Output<PipelineJobMappingPipelineJobMappingConfigArgs> mappingConfig) {
            $.mappingConfig = mappingConfig;
            return this;
        }

        /**
         * @param mappingConfig The location of the mapping configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder mappingConfig(PipelineJobMappingPipelineJobMappingConfigArgs mappingConfig) {
            return mappingConfig(Output.of(mappingConfig));
        }

        /**
         * @param reconciliationDestination If set to true, a mapping pipeline will send output snapshots
         * to the reconciliation pipeline in its dataset. A reconciliation
         * pipeline must exist in this dataset before a mapping pipeline
         * with a reconciliation destination can be created.
         * 
         * @return builder
         * 
         */
        public Builder reconciliationDestination(@Nullable Output<Boolean> reconciliationDestination) {
            $.reconciliationDestination = reconciliationDestination;
            return this;
        }

        /**
         * @param reconciliationDestination If set to true, a mapping pipeline will send output snapshots
         * to the reconciliation pipeline in its dataset. A reconciliation
         * pipeline must exist in this dataset before a mapping pipeline
         * with a reconciliation destination can be created.
         * 
         * @return builder
         * 
         */
        public Builder reconciliationDestination(Boolean reconciliationDestination) {
            return reconciliationDestination(Output.of(reconciliationDestination));
        }

        public PipelineJobMappingPipelineJobArgs build() {
            if ($.mappingConfig == null) {
                throw new MissingRequiredPropertyException("PipelineJobMappingPipelineJobArgs", "mappingConfig");
            }
            return $;
        }
    }

}
