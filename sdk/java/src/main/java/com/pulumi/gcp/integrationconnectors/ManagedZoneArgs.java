// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedZoneArgs Empty = new ManagedZoneArgs();

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * DNS Name of the resource.
     * 
     */
    @Import(name="dns", required=true)
    private Output<String> dns;

    /**
     * @return DNS Name of the resource.
     * 
     */
    public Output<String> dns() {
        return this.dns;
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of Managed Zone needs to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Managed Zone needs to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The name of the Target Project.
     * 
     */
    @Import(name="targetProject", required=true)
    private Output<String> targetProject;

    /**
     * @return The name of the Target Project.
     * 
     */
    public Output<String> targetProject() {
        return this.targetProject;
    }

    /**
     * The name of the Target Project VPC Network.
     * 
     */
    @Import(name="targetVpc", required=true)
    private Output<String> targetVpc;

    /**
     * @return The name of the Target Project VPC Network.
     * 
     */
    public Output<String> targetVpc() {
        return this.targetVpc;
    }

    private ManagedZoneArgs() {}

    private ManagedZoneArgs(ManagedZoneArgs $) {
        this.description = $.description;
        this.dns = $.dns;
        this.labels = $.labels;
        this.name = $.name;
        this.project = $.project;
        this.targetProject = $.targetProject;
        this.targetVpc = $.targetVpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedZoneArgs $;

        public Builder() {
            $ = new ManagedZoneArgs();
        }

        public Builder(ManagedZoneArgs defaults) {
            $ = new ManagedZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dns DNS Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder dns(Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns DNS Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of Managed Zone needs to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Managed Zone needs to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param targetProject The name of the Target Project.
         * 
         * @return builder
         * 
         */
        public Builder targetProject(Output<String> targetProject) {
            $.targetProject = targetProject;
            return this;
        }

        /**
         * @param targetProject The name of the Target Project.
         * 
         * @return builder
         * 
         */
        public Builder targetProject(String targetProject) {
            return targetProject(Output.of(targetProject));
        }

        /**
         * @param targetVpc The name of the Target Project VPC Network.
         * 
         * @return builder
         * 
         */
        public Builder targetVpc(Output<String> targetVpc) {
            $.targetVpc = targetVpc;
            return this;
        }

        /**
         * @param targetVpc The name of the Target Project VPC Network.
         * 
         * @return builder
         * 
         */
        public Builder targetVpc(String targetVpc) {
            return targetVpc(Output.of(targetVpc));
        }

        public ManagedZoneArgs build() {
            if ($.dns == null) {
                throw new MissingRequiredPropertyException("ManagedZoneArgs", "dns");
            }
            if ($.targetProject == null) {
                throw new MissingRequiredPropertyException("ManagedZoneArgs", "targetProject");
            }
            if ($.targetVpc == null) {
                throw new MissingRequiredPropertyException("ManagedZoneArgs", "targetVpc");
            }
            return $;
        }
    }

}
