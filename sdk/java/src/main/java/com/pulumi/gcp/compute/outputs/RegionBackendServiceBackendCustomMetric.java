// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionBackendServiceBackendCustomMetric {
    /**
     * @return If true, the metric data is not used for load balancing.
     * 
     */
    private Boolean dryRun;
    /**
     * @return Optional parameter to define a target utilization for the Custom Metrics
     * balancing mode. The valid range is &lt;code&gt;[0.0, 1.0]&lt;/code&gt;.
     * 
     */
    private @Nullable Double maxUtilization;
    /**
     * @return Name of a custom utilization signal. The name must be 1-64 characters
     * long and match the regular expression a-z? which
     * means the first character must be a lowercase letter, and all following
     * characters must be a dash, period, underscore, lowercase letter, or
     * digit, except the last character, which cannot be a dash, period, or
     * underscore. For usage guidelines, see Custom Metrics balancing mode. This
     * field can only be used for a global or regional backend service with the
     * loadBalancingScheme set to &lt;code&gt;EXTERNAL_MANAGED&lt;/code&gt;,
     * &lt;code&gt;INTERNAL_MANAGED&lt;/code&gt; &lt;code&gt;INTERNAL_SELF_MANAGED&lt;/code&gt;.
     * 
     */
    private String name;

    private RegionBackendServiceBackendCustomMetric() {}
    /**
     * @return If true, the metric data is not used for load balancing.
     * 
     */
    public Boolean dryRun() {
        return this.dryRun;
    }
    /**
     * @return Optional parameter to define a target utilization for the Custom Metrics
     * balancing mode. The valid range is &lt;code&gt;[0.0, 1.0]&lt;/code&gt;.
     * 
     */
    public Optional<Double> maxUtilization() {
        return Optional.ofNullable(this.maxUtilization);
    }
    /**
     * @return Name of a custom utilization signal. The name must be 1-64 characters
     * long and match the regular expression a-z? which
     * means the first character must be a lowercase letter, and all following
     * characters must be a dash, period, underscore, lowercase letter, or
     * digit, except the last character, which cannot be a dash, period, or
     * underscore. For usage guidelines, see Custom Metrics balancing mode. This
     * field can only be used for a global or regional backend service with the
     * loadBalancingScheme set to &lt;code&gt;EXTERNAL_MANAGED&lt;/code&gt;,
     * &lt;code&gt;INTERNAL_MANAGED&lt;/code&gt; &lt;code&gt;INTERNAL_SELF_MANAGED&lt;/code&gt;.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceBackendCustomMetric defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean dryRun;
        private @Nullable Double maxUtilization;
        private String name;
        public Builder() {}
        public Builder(RegionBackendServiceBackendCustomMetric defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dryRun = defaults.dryRun;
    	      this.maxUtilization = defaults.maxUtilization;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder dryRun(Boolean dryRun) {
            if (dryRun == null) {
              throw new MissingRequiredPropertyException("RegionBackendServiceBackendCustomMetric", "dryRun");
            }
            this.dryRun = dryRun;
            return this;
        }
        @CustomType.Setter
        public Builder maxUtilization(@Nullable Double maxUtilization) {

            this.maxUtilization = maxUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("RegionBackendServiceBackendCustomMetric", "name");
            }
            this.name = name;
            return this;
        }
        public RegionBackendServiceBackendCustomMetric build() {
            final var _resultValue = new RegionBackendServiceBackendCustomMetric();
            _resultValue.dryRun = dryRun;
            _resultValue.maxUtilization = maxUtilization;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
