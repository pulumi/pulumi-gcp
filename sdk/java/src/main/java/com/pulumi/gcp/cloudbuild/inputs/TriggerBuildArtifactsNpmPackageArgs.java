// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuild.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerBuildArtifactsNpmPackageArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerBuildArtifactsNpmPackageArgs Empty = new TriggerBuildArtifactsNpmPackageArgs();

    /**
     * Path to the package.json. e.g. workspace/path/to/package
     * 
     */
    @Import(name="packagePath")
    private @Nullable Output<String> packagePath;

    /**
     * @return Path to the package.json. e.g. workspace/path/to/package
     * 
     */
    public Optional<Output<String>> packagePath() {
        return Optional.ofNullable(this.packagePath);
    }

    /**
     * Artifact Registry repository, in the form &#34;https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY&#34;
     * Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return Artifact Registry repository, in the form &#34;https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY&#34;
     * Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    private TriggerBuildArtifactsNpmPackageArgs() {}

    private TriggerBuildArtifactsNpmPackageArgs(TriggerBuildArtifactsNpmPackageArgs $) {
        this.packagePath = $.packagePath;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerBuildArtifactsNpmPackageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerBuildArtifactsNpmPackageArgs $;

        public Builder() {
            $ = new TriggerBuildArtifactsNpmPackageArgs();
        }

        public Builder(TriggerBuildArtifactsNpmPackageArgs defaults) {
            $ = new TriggerBuildArtifactsNpmPackageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param packagePath Path to the package.json. e.g. workspace/path/to/package
         * 
         * @return builder
         * 
         */
        public Builder packagePath(@Nullable Output<String> packagePath) {
            $.packagePath = packagePath;
            return this;
        }

        /**
         * @param packagePath Path to the package.json. e.g. workspace/path/to/package
         * 
         * @return builder
         * 
         */
        public Builder packagePath(String packagePath) {
            return packagePath(Output.of(packagePath));
        }

        /**
         * @param repository Artifact Registry repository, in the form &#34;https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY&#34;
         * Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository Artifact Registry repository, in the form &#34;https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY&#34;
         * Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public TriggerBuildArtifactsNpmPackageArgs build() {
            return $;
        }
    }

}
