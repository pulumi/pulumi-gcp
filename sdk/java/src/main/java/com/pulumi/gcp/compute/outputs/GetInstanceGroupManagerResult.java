// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerAllInstancesConfig;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerAutoHealingPolicy;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerInstanceLifecyclePolicy;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerNamedPort;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerParam;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerStandbyPolicy;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerStatefulDisk;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerStatefulExternalIp;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerStatefulInternalIp;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerStatus;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerUpdatePolicy;
import com.pulumi.gcp.compute.outputs.GetInstanceGroupManagerVersion;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceGroupManagerResult {
    private List<GetInstanceGroupManagerAllInstancesConfig> allInstancesConfigs;
    private List<GetInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies;
    private String baseInstanceName;
    private String creationTimestamp;
    private String description;
    private String fingerprint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String instanceGroup;
    private Integer instanceGroupManagerId;
    private List<GetInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies;
    private String listManagedInstancesResults;
    private @Nullable String name;
    private List<GetInstanceGroupManagerNamedPort> namedPorts;
    private String operation;
    private List<GetInstanceGroupManagerParam> params;
    private @Nullable String project;
    private @Nullable String selfLink;
    private List<GetInstanceGroupManagerStandbyPolicy> standbyPolicies;
    private List<GetInstanceGroupManagerStatefulDisk> statefulDisks;
    private List<GetInstanceGroupManagerStatefulExternalIp> statefulExternalIps;
    private List<GetInstanceGroupManagerStatefulInternalIp> statefulInternalIps;
    private List<GetInstanceGroupManagerStatus> statuses;
    private List<String> targetPools;
    private Integer targetSize;
    private Integer targetStoppedSize;
    private Integer targetSuspendedSize;
    private List<GetInstanceGroupManagerUpdatePolicy> updatePolicies;
    private List<GetInstanceGroupManagerVersion> versions;
    private Boolean waitForInstances;
    private String waitForInstancesStatus;
    private @Nullable String zone;

    private GetInstanceGroupManagerResult() {}
    public List<GetInstanceGroupManagerAllInstancesConfig> allInstancesConfigs() {
        return this.allInstancesConfigs;
    }
    public List<GetInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies() {
        return this.autoHealingPolicies;
    }
    public String baseInstanceName() {
        return this.baseInstanceName;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instanceGroup() {
        return this.instanceGroup;
    }
    public Integer instanceGroupManagerId() {
        return this.instanceGroupManagerId;
    }
    public List<GetInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies() {
        return this.instanceLifecyclePolicies;
    }
    public String listManagedInstancesResults() {
        return this.listManagedInstancesResults;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public List<GetInstanceGroupManagerNamedPort> namedPorts() {
        return this.namedPorts;
    }
    public String operation() {
        return this.operation;
    }
    public List<GetInstanceGroupManagerParam> params() {
        return this.params;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Optional<String> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }
    public List<GetInstanceGroupManagerStandbyPolicy> standbyPolicies() {
        return this.standbyPolicies;
    }
    public List<GetInstanceGroupManagerStatefulDisk> statefulDisks() {
        return this.statefulDisks;
    }
    public List<GetInstanceGroupManagerStatefulExternalIp> statefulExternalIps() {
        return this.statefulExternalIps;
    }
    public List<GetInstanceGroupManagerStatefulInternalIp> statefulInternalIps() {
        return this.statefulInternalIps;
    }
    public List<GetInstanceGroupManagerStatus> statuses() {
        return this.statuses;
    }
    public List<String> targetPools() {
        return this.targetPools;
    }
    public Integer targetSize() {
        return this.targetSize;
    }
    public Integer targetStoppedSize() {
        return this.targetStoppedSize;
    }
    public Integer targetSuspendedSize() {
        return this.targetSuspendedSize;
    }
    public List<GetInstanceGroupManagerUpdatePolicy> updatePolicies() {
        return this.updatePolicies;
    }
    public List<GetInstanceGroupManagerVersion> versions() {
        return this.versions;
    }
    public Boolean waitForInstances() {
        return this.waitForInstances;
    }
    public String waitForInstancesStatus() {
        return this.waitForInstancesStatus;
    }
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceGroupManagerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstanceGroupManagerAllInstancesConfig> allInstancesConfigs;
        private List<GetInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies;
        private String baseInstanceName;
        private String creationTimestamp;
        private String description;
        private String fingerprint;
        private String id;
        private String instanceGroup;
        private Integer instanceGroupManagerId;
        private List<GetInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies;
        private String listManagedInstancesResults;
        private @Nullable String name;
        private List<GetInstanceGroupManagerNamedPort> namedPorts;
        private String operation;
        private List<GetInstanceGroupManagerParam> params;
        private @Nullable String project;
        private @Nullable String selfLink;
        private List<GetInstanceGroupManagerStandbyPolicy> standbyPolicies;
        private List<GetInstanceGroupManagerStatefulDisk> statefulDisks;
        private List<GetInstanceGroupManagerStatefulExternalIp> statefulExternalIps;
        private List<GetInstanceGroupManagerStatefulInternalIp> statefulInternalIps;
        private List<GetInstanceGroupManagerStatus> statuses;
        private List<String> targetPools;
        private Integer targetSize;
        private Integer targetStoppedSize;
        private Integer targetSuspendedSize;
        private List<GetInstanceGroupManagerUpdatePolicy> updatePolicies;
        private List<GetInstanceGroupManagerVersion> versions;
        private Boolean waitForInstances;
        private String waitForInstancesStatus;
        private @Nullable String zone;
        public Builder() {}
        public Builder(GetInstanceGroupManagerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allInstancesConfigs = defaults.allInstancesConfigs;
    	      this.autoHealingPolicies = defaults.autoHealingPolicies;
    	      this.baseInstanceName = defaults.baseInstanceName;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.instanceGroup = defaults.instanceGroup;
    	      this.instanceGroupManagerId = defaults.instanceGroupManagerId;
    	      this.instanceLifecyclePolicies = defaults.instanceLifecyclePolicies;
    	      this.listManagedInstancesResults = defaults.listManagedInstancesResults;
    	      this.name = defaults.name;
    	      this.namedPorts = defaults.namedPorts;
    	      this.operation = defaults.operation;
    	      this.params = defaults.params;
    	      this.project = defaults.project;
    	      this.selfLink = defaults.selfLink;
    	      this.standbyPolicies = defaults.standbyPolicies;
    	      this.statefulDisks = defaults.statefulDisks;
    	      this.statefulExternalIps = defaults.statefulExternalIps;
    	      this.statefulInternalIps = defaults.statefulInternalIps;
    	      this.statuses = defaults.statuses;
    	      this.targetPools = defaults.targetPools;
    	      this.targetSize = defaults.targetSize;
    	      this.targetStoppedSize = defaults.targetStoppedSize;
    	      this.targetSuspendedSize = defaults.targetSuspendedSize;
    	      this.updatePolicies = defaults.updatePolicies;
    	      this.versions = defaults.versions;
    	      this.waitForInstances = defaults.waitForInstances;
    	      this.waitForInstancesStatus = defaults.waitForInstancesStatus;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder allInstancesConfigs(List<GetInstanceGroupManagerAllInstancesConfig> allInstancesConfigs) {
            if (allInstancesConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "allInstancesConfigs");
            }
            this.allInstancesConfigs = allInstancesConfigs;
            return this;
        }
        public Builder allInstancesConfigs(GetInstanceGroupManagerAllInstancesConfig... allInstancesConfigs) {
            return allInstancesConfigs(List.of(allInstancesConfigs));
        }
        @CustomType.Setter
        public Builder autoHealingPolicies(List<GetInstanceGroupManagerAutoHealingPolicy> autoHealingPolicies) {
            if (autoHealingPolicies == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "autoHealingPolicies");
            }
            this.autoHealingPolicies = autoHealingPolicies;
            return this;
        }
        public Builder autoHealingPolicies(GetInstanceGroupManagerAutoHealingPolicy... autoHealingPolicies) {
            return autoHealingPolicies(List.of(autoHealingPolicies));
        }
        @CustomType.Setter
        public Builder baseInstanceName(String baseInstanceName) {
            if (baseInstanceName == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "baseInstanceName");
            }
            this.baseInstanceName = baseInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceGroup(String instanceGroup) {
            if (instanceGroup == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "instanceGroup");
            }
            this.instanceGroup = instanceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder instanceGroupManagerId(Integer instanceGroupManagerId) {
            if (instanceGroupManagerId == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "instanceGroupManagerId");
            }
            this.instanceGroupManagerId = instanceGroupManagerId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceLifecyclePolicies(List<GetInstanceGroupManagerInstanceLifecyclePolicy> instanceLifecyclePolicies) {
            if (instanceLifecyclePolicies == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "instanceLifecyclePolicies");
            }
            this.instanceLifecyclePolicies = instanceLifecyclePolicies;
            return this;
        }
        public Builder instanceLifecyclePolicies(GetInstanceGroupManagerInstanceLifecyclePolicy... instanceLifecyclePolicies) {
            return instanceLifecyclePolicies(List.of(instanceLifecyclePolicies));
        }
        @CustomType.Setter
        public Builder listManagedInstancesResults(String listManagedInstancesResults) {
            if (listManagedInstancesResults == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "listManagedInstancesResults");
            }
            this.listManagedInstancesResults = listManagedInstancesResults;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namedPorts(List<GetInstanceGroupManagerNamedPort> namedPorts) {
            if (namedPorts == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "namedPorts");
            }
            this.namedPorts = namedPorts;
            return this;
        }
        public Builder namedPorts(GetInstanceGroupManagerNamedPort... namedPorts) {
            return namedPorts(List.of(namedPorts));
        }
        @CustomType.Setter
        public Builder operation(String operation) {
            if (operation == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "operation");
            }
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder params(List<GetInstanceGroupManagerParam> params) {
            if (params == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "params");
            }
            this.params = params;
            return this;
        }
        public Builder params(GetInstanceGroupManagerParam... params) {
            return params(List.of(params));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(@Nullable String selfLink) {

            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder standbyPolicies(List<GetInstanceGroupManagerStandbyPolicy> standbyPolicies) {
            if (standbyPolicies == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "standbyPolicies");
            }
            this.standbyPolicies = standbyPolicies;
            return this;
        }
        public Builder standbyPolicies(GetInstanceGroupManagerStandbyPolicy... standbyPolicies) {
            return standbyPolicies(List.of(standbyPolicies));
        }
        @CustomType.Setter
        public Builder statefulDisks(List<GetInstanceGroupManagerStatefulDisk> statefulDisks) {
            if (statefulDisks == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "statefulDisks");
            }
            this.statefulDisks = statefulDisks;
            return this;
        }
        public Builder statefulDisks(GetInstanceGroupManagerStatefulDisk... statefulDisks) {
            return statefulDisks(List.of(statefulDisks));
        }
        @CustomType.Setter
        public Builder statefulExternalIps(List<GetInstanceGroupManagerStatefulExternalIp> statefulExternalIps) {
            if (statefulExternalIps == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "statefulExternalIps");
            }
            this.statefulExternalIps = statefulExternalIps;
            return this;
        }
        public Builder statefulExternalIps(GetInstanceGroupManagerStatefulExternalIp... statefulExternalIps) {
            return statefulExternalIps(List.of(statefulExternalIps));
        }
        @CustomType.Setter
        public Builder statefulInternalIps(List<GetInstanceGroupManagerStatefulInternalIp> statefulInternalIps) {
            if (statefulInternalIps == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "statefulInternalIps");
            }
            this.statefulInternalIps = statefulInternalIps;
            return this;
        }
        public Builder statefulInternalIps(GetInstanceGroupManagerStatefulInternalIp... statefulInternalIps) {
            return statefulInternalIps(List.of(statefulInternalIps));
        }
        @CustomType.Setter
        public Builder statuses(List<GetInstanceGroupManagerStatus> statuses) {
            if (statuses == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "statuses");
            }
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(GetInstanceGroupManagerStatus... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder targetPools(List<String> targetPools) {
            if (targetPools == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "targetPools");
            }
            this.targetPools = targetPools;
            return this;
        }
        public Builder targetPools(String... targetPools) {
            return targetPools(List.of(targetPools));
        }
        @CustomType.Setter
        public Builder targetSize(Integer targetSize) {
            if (targetSize == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "targetSize");
            }
            this.targetSize = targetSize;
            return this;
        }
        @CustomType.Setter
        public Builder targetStoppedSize(Integer targetStoppedSize) {
            if (targetStoppedSize == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "targetStoppedSize");
            }
            this.targetStoppedSize = targetStoppedSize;
            return this;
        }
        @CustomType.Setter
        public Builder targetSuspendedSize(Integer targetSuspendedSize) {
            if (targetSuspendedSize == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "targetSuspendedSize");
            }
            this.targetSuspendedSize = targetSuspendedSize;
            return this;
        }
        @CustomType.Setter
        public Builder updatePolicies(List<GetInstanceGroupManagerUpdatePolicy> updatePolicies) {
            if (updatePolicies == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "updatePolicies");
            }
            this.updatePolicies = updatePolicies;
            return this;
        }
        public Builder updatePolicies(GetInstanceGroupManagerUpdatePolicy... updatePolicies) {
            return updatePolicies(List.of(updatePolicies));
        }
        @CustomType.Setter
        public Builder versions(List<GetInstanceGroupManagerVersion> versions) {
            if (versions == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "versions");
            }
            this.versions = versions;
            return this;
        }
        public Builder versions(GetInstanceGroupManagerVersion... versions) {
            return versions(List.of(versions));
        }
        @CustomType.Setter
        public Builder waitForInstances(Boolean waitForInstances) {
            if (waitForInstances == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "waitForInstances");
            }
            this.waitForInstances = waitForInstances;
            return this;
        }
        @CustomType.Setter
        public Builder waitForInstancesStatus(String waitForInstancesStatus) {
            if (waitForInstancesStatus == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerResult", "waitForInstancesStatus");
            }
            this.waitForInstancesStatus = waitForInstancesStatus;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {

            this.zone = zone;
            return this;
        }
        public GetInstanceGroupManagerResult build() {
            final var _resultValue = new GetInstanceGroupManagerResult();
            _resultValue.allInstancesConfigs = allInstancesConfigs;
            _resultValue.autoHealingPolicies = autoHealingPolicies;
            _resultValue.baseInstanceName = baseInstanceName;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.instanceGroup = instanceGroup;
            _resultValue.instanceGroupManagerId = instanceGroupManagerId;
            _resultValue.instanceLifecyclePolicies = instanceLifecyclePolicies;
            _resultValue.listManagedInstancesResults = listManagedInstancesResults;
            _resultValue.name = name;
            _resultValue.namedPorts = namedPorts;
            _resultValue.operation = operation;
            _resultValue.params = params;
            _resultValue.project = project;
            _resultValue.selfLink = selfLink;
            _resultValue.standbyPolicies = standbyPolicies;
            _resultValue.statefulDisks = statefulDisks;
            _resultValue.statefulExternalIps = statefulExternalIps;
            _resultValue.statefulInternalIps = statefulInternalIps;
            _resultValue.statuses = statuses;
            _resultValue.targetPools = targetPools;
            _resultValue.targetSize = targetSize;
            _resultValue.targetStoppedSize = targetStoppedSize;
            _resultValue.targetSuspendedSize = targetSuspendedSize;
            _resultValue.updatePolicies = updatePolicies;
            _resultValue.versions = versions;
            _resultValue.waitForInstances = waitForInstances;
            _resultValue.waitForInstancesStatus = waitForInstancesStatus;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
