// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionBackendServiceConnectionTrackingPolicy {
    /**
     * @return Specifies connection persistence when backends are unhealthy.
     * If set to `DEFAULT_FOR_PROTOCOL`, the existing connections persist on
     * unhealthy backends only for connection-oriented protocols (TCP and SCTP)
     * and only if the Tracking Mode is PER_CONNECTION (default tracking mode)
     * or the Session Affinity is configured for 5-tuple. They do not persist
     * for UDP.
     * If set to `NEVER_PERSIST`, after a backend becomes unhealthy, the existing
     * connections on the unhealthy backend are never persisted on the unhealthy
     * backend. They are always diverted to newly selected healthy backends
     * (unless all backends are unhealthy).
     * If set to `ALWAYS_PERSIST`, existing connections always persist on
     * unhealthy backends regardless of protocol and session affinity. It is
     * generally not recommended to use this mode overriding the default.
     * Default value is `DEFAULT_FOR_PROTOCOL`.
     * Possible values are: `DEFAULT_FOR_PROTOCOL`, `NEVER_PERSIST`, `ALWAYS_PERSIST`.
     * 
     */
    private @Nullable String connectionPersistenceOnUnhealthyBackends;
    /**
     * @return Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
     * 
     */
    private @Nullable Boolean enableStrongAffinity;
    /**
     * @return Specifies how long to keep a Connection Tracking entry while there is
     * no matching traffic (in seconds).
     * For L4 ILB the minimum(default) is 10 minutes and maximum is 16 hours.
     * For NLB the minimum(default) is 60 seconds and the maximum is 16 hours.
     * 
     */
    private @Nullable Integer idleTimeoutSec;
    /**
     * @return Specifies the key used for connection tracking. There are two options:
     * `PER_CONNECTION`: The Connection Tracking is performed as per the
     * Connection Key (default Hash Method) for the specific protocol.
     * `PER_SESSION`: The Connection Tracking is performed as per the
     * configured Session Affinity. It matches the configured Session Affinity.
     * Default value is `PER_CONNECTION`.
     * Possible values are: `PER_CONNECTION`, `PER_SESSION`.
     * 
     */
    private @Nullable String trackingMode;

    private RegionBackendServiceConnectionTrackingPolicy() {}
    /**
     * @return Specifies connection persistence when backends are unhealthy.
     * If set to `DEFAULT_FOR_PROTOCOL`, the existing connections persist on
     * unhealthy backends only for connection-oriented protocols (TCP and SCTP)
     * and only if the Tracking Mode is PER_CONNECTION (default tracking mode)
     * or the Session Affinity is configured for 5-tuple. They do not persist
     * for UDP.
     * If set to `NEVER_PERSIST`, after a backend becomes unhealthy, the existing
     * connections on the unhealthy backend are never persisted on the unhealthy
     * backend. They are always diverted to newly selected healthy backends
     * (unless all backends are unhealthy).
     * If set to `ALWAYS_PERSIST`, existing connections always persist on
     * unhealthy backends regardless of protocol and session affinity. It is
     * generally not recommended to use this mode overriding the default.
     * Default value is `DEFAULT_FOR_PROTOCOL`.
     * Possible values are: `DEFAULT_FOR_PROTOCOL`, `NEVER_PERSIST`, `ALWAYS_PERSIST`.
     * 
     */
    public Optional<String> connectionPersistenceOnUnhealthyBackends() {
        return Optional.ofNullable(this.connectionPersistenceOnUnhealthyBackends);
    }
    /**
     * @return Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
     * 
     */
    public Optional<Boolean> enableStrongAffinity() {
        return Optional.ofNullable(this.enableStrongAffinity);
    }
    /**
     * @return Specifies how long to keep a Connection Tracking entry while there is
     * no matching traffic (in seconds).
     * For L4 ILB the minimum(default) is 10 minutes and maximum is 16 hours.
     * For NLB the minimum(default) is 60 seconds and the maximum is 16 hours.
     * 
     */
    public Optional<Integer> idleTimeoutSec() {
        return Optional.ofNullable(this.idleTimeoutSec);
    }
    /**
     * @return Specifies the key used for connection tracking. There are two options:
     * `PER_CONNECTION`: The Connection Tracking is performed as per the
     * Connection Key (default Hash Method) for the specific protocol.
     * `PER_SESSION`: The Connection Tracking is performed as per the
     * configured Session Affinity. It matches the configured Session Affinity.
     * Default value is `PER_CONNECTION`.
     * Possible values are: `PER_CONNECTION`, `PER_SESSION`.
     * 
     */
    public Optional<String> trackingMode() {
        return Optional.ofNullable(this.trackingMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceConnectionTrackingPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionPersistenceOnUnhealthyBackends;
        private @Nullable Boolean enableStrongAffinity;
        private @Nullable Integer idleTimeoutSec;
        private @Nullable String trackingMode;
        public Builder() {}
        public Builder(RegionBackendServiceConnectionTrackingPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPersistenceOnUnhealthyBackends = defaults.connectionPersistenceOnUnhealthyBackends;
    	      this.enableStrongAffinity = defaults.enableStrongAffinity;
    	      this.idleTimeoutSec = defaults.idleTimeoutSec;
    	      this.trackingMode = defaults.trackingMode;
        }

        @CustomType.Setter
        public Builder connectionPersistenceOnUnhealthyBackends(@Nullable String connectionPersistenceOnUnhealthyBackends) {
            this.connectionPersistenceOnUnhealthyBackends = connectionPersistenceOnUnhealthyBackends;
            return this;
        }
        @CustomType.Setter
        public Builder enableStrongAffinity(@Nullable Boolean enableStrongAffinity) {
            this.enableStrongAffinity = enableStrongAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutSec(@Nullable Integer idleTimeoutSec) {
            this.idleTimeoutSec = idleTimeoutSec;
            return this;
        }
        @CustomType.Setter
        public Builder trackingMode(@Nullable String trackingMode) {
            this.trackingMode = trackingMode;
            return this;
        }
        public RegionBackendServiceConnectionTrackingPolicy build() {
            final var o = new RegionBackendServiceConnectionTrackingPolicy();
            o.connectionPersistenceOnUnhealthyBackends = connectionPersistenceOnUnhealthyBackends;
            o.enableStrongAffinity = enableStrongAffinity;
            o.idleTimeoutSec = idleTimeoutSec;
            o.trackingMode = trackingMode;
            return o;
        }
    }
}
