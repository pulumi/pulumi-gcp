// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.siteverification.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetTokenArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTokenArgs Empty = new GetTokenArgs();

    /**
     * The site identifier. If the type is set to SITE, the identifier is a URL. If the type is
     * set to INET_DOMAIN, the identifier is a domain name.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return The site identifier. If the type is set to SITE, the identifier is a URL. If the type is
     * set to INET_DOMAIN, the identifier is a domain name.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * The type of resource to be verified, either a domain or a web site.
     * Possible values are: `INET_DOMAIN`, `SITE`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of resource to be verified, either a domain or a web site.
     * Possible values are: `INET_DOMAIN`, `SITE`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The verification method for the Site Verification system to use to verify
     * this site or domain.
     * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
     * 
     */
    @Import(name="verificationMethod", required=true)
    private Output<String> verificationMethod;

    /**
     * @return The verification method for the Site Verification system to use to verify
     * this site or domain.
     * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
     * 
     */
    public Output<String> verificationMethod() {
        return this.verificationMethod;
    }

    private GetTokenArgs() {}

    private GetTokenArgs(GetTokenArgs $) {
        this.identifier = $.identifier;
        this.type = $.type;
        this.verificationMethod = $.verificationMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTokenArgs $;

        public Builder() {
            $ = new GetTokenArgs();
        }

        public Builder(GetTokenArgs defaults) {
            $ = new GetTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifier The site identifier. If the type is set to SITE, the identifier is a URL. If the type is
         * set to INET_DOMAIN, the identifier is a domain name.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The site identifier. If the type is set to SITE, the identifier is a URL. If the type is
         * set to INET_DOMAIN, the identifier is a domain name.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param type The type of resource to be verified, either a domain or a web site.
         * Possible values are: `INET_DOMAIN`, `SITE`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of resource to be verified, either a domain or a web site.
         * Possible values are: `INET_DOMAIN`, `SITE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param verificationMethod The verification method for the Site Verification system to use to verify
         * this site or domain.
         * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder verificationMethod(Output<String> verificationMethod) {
            $.verificationMethod = verificationMethod;
            return this;
        }

        /**
         * @param verificationMethod The verification method for the Site Verification system to use to verify
         * this site or domain.
         * Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
         * 
         * @return builder
         * 
         */
        public Builder verificationMethod(String verificationMethod) {
            return verificationMethod(Output.of(verificationMethod));
        }

        public GetTokenArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetTokenArgs", "identifier");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetTokenArgs", "type");
            }
            if ($.verificationMethod == null) {
                throw new MissingRequiredPropertyException("GetTokenArgs", "verificationMethod");
            }
            return $;
        }
    }

}
