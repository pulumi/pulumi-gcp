// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class TableSchemaForeignTypeInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableSchemaForeignTypeInfoArgs Empty = new TableSchemaForeignTypeInfoArgs();

    /**
     * Specifies the system which defines the foreign data
     * type.
     * 
     */
    @Import(name="typeSystem", required=true)
    private Output<String> typeSystem;

    /**
     * @return Specifies the system which defines the foreign data
     * type.
     * 
     */
    public Output<String> typeSystem() {
        return this.typeSystem;
    }

    private TableSchemaForeignTypeInfoArgs() {}

    private TableSchemaForeignTypeInfoArgs(TableSchemaForeignTypeInfoArgs $) {
        this.typeSystem = $.typeSystem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableSchemaForeignTypeInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableSchemaForeignTypeInfoArgs $;

        public Builder() {
            $ = new TableSchemaForeignTypeInfoArgs();
        }

        public Builder(TableSchemaForeignTypeInfoArgs defaults) {
            $ = new TableSchemaForeignTypeInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param typeSystem Specifies the system which defines the foreign data
         * type.
         * 
         * @return builder
         * 
         */
        public Builder typeSystem(Output<String> typeSystem) {
            $.typeSystem = typeSystem;
            return this;
        }

        /**
         * @param typeSystem Specifies the system which defines the foreign data
         * type.
         * 
         * @return builder
         * 
         */
        public Builder typeSystem(String typeSystem) {
            return typeSystem(Output.of(typeSystem));
        }

        public TableSchemaForeignTypeInfoArgs build() {
            if ($.typeSystem == null) {
                throw new MissingRequiredPropertyException("TableSchemaForeignTypeInfoArgs", "typeSystem");
            }
            return $;
        }
    }

}
