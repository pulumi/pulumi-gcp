// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gkehub.outputs.GetFeatureFleetDefaultMemberConfig;
import com.pulumi.gcp.gkehub.outputs.GetFeatureResourceState;
import com.pulumi.gcp.gkehub.outputs.GetFeatureSpec;
import com.pulumi.gcp.gkehub.outputs.GetFeatureState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFeatureResult {
    private String createTime;
    private String deleteTime;
    private Map<String,String> effectiveLabels;
    private List<GetFeatureFleetDefaultMemberConfig> fleetDefaultMemberConfigs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String location;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private List<GetFeatureResourceState> resourceStates;
    private List<GetFeatureSpec> specs;
    private List<GetFeatureState> states;
    private String updateTime;

    private GetFeatureResult() {}
    public String createTime() {
        return this.createTime;
    }
    public String deleteTime() {
        return this.deleteTime;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public List<GetFeatureFleetDefaultMemberConfig> fleetDefaultMemberConfigs() {
        return this.fleetDefaultMemberConfigs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetFeatureResourceState> resourceStates() {
        return this.resourceStates;
    }
    public List<GetFeatureSpec> specs() {
        return this.specs;
    }
    public List<GetFeatureState> states() {
        return this.states;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String deleteTime;
        private Map<String,String> effectiveLabels;
        private List<GetFeatureFleetDefaultMemberConfig> fleetDefaultMemberConfigs;
        private String id;
        private Map<String,String> labels;
        private String location;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private List<GetFeatureResourceState> resourceStates;
        private List<GetFeatureSpec> specs;
        private List<GetFeatureState> states;
        private String updateTime;
        public Builder() {}
        public Builder(GetFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.deleteTime = defaults.deleteTime;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.fleetDefaultMemberConfigs = defaults.fleetDefaultMemberConfigs;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.resourceStates = defaults.resourceStates;
    	      this.specs = defaults.specs;
    	      this.states = defaults.states;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder deleteTime(String deleteTime) {
            if (deleteTime == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "deleteTime");
            }
            this.deleteTime = deleteTime;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder fleetDefaultMemberConfigs(List<GetFeatureFleetDefaultMemberConfig> fleetDefaultMemberConfigs) {
            if (fleetDefaultMemberConfigs == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "fleetDefaultMemberConfigs");
            }
            this.fleetDefaultMemberConfigs = fleetDefaultMemberConfigs;
            return this;
        }
        public Builder fleetDefaultMemberConfigs(GetFeatureFleetDefaultMemberConfig... fleetDefaultMemberConfigs) {
            return fleetDefaultMemberConfigs(List.of(fleetDefaultMemberConfigs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder resourceStates(List<GetFeatureResourceState> resourceStates) {
            if (resourceStates == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "resourceStates");
            }
            this.resourceStates = resourceStates;
            return this;
        }
        public Builder resourceStates(GetFeatureResourceState... resourceStates) {
            return resourceStates(List.of(resourceStates));
        }
        @CustomType.Setter
        public Builder specs(List<GetFeatureSpec> specs) {
            if (specs == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "specs");
            }
            this.specs = specs;
            return this;
        }
        public Builder specs(GetFeatureSpec... specs) {
            return specs(List.of(specs));
        }
        @CustomType.Setter
        public Builder states(List<GetFeatureState> states) {
            if (states == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "states");
            }
            this.states = states;
            return this;
        }
        public Builder states(GetFeatureState... states) {
            return states(List.of(states));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetFeatureResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetFeatureResult build() {
            final var _resultValue = new GetFeatureResult();
            _resultValue.createTime = createTime;
            _resultValue.deleteTime = deleteTime;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.fleetDefaultMemberConfigs = fleetDefaultMemberConfigs;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.resourceStates = resourceStates;
            _resultValue.specs = specs;
            _resultValue.states = states;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
