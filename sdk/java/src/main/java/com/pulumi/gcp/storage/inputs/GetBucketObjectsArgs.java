// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBucketObjectsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectsArgs Empty = new GetBucketObjectsArgs();

    /**
     * The name of the containing bucket.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the containing bucket.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * A glob pattern used to filter results (for example, `foo*bar`).
     * 
     */
    @Import(name="matchGlob")
    private @Nullable Output<String> matchGlob;

    /**
     * @return A glob pattern used to filter results (for example, `foo*bar`).
     * 
     */
    public Optional<Output<String>> matchGlob() {
        return Optional.ofNullable(this.matchGlob);
    }

    /**
     * Filter results to include only objects whose names begin with this prefix.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Filter results to include only objects whose names begin with this prefix.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    private GetBucketObjectsArgs() {}

    private GetBucketObjectsArgs(GetBucketObjectsArgs $) {
        this.bucket = $.bucket;
        this.matchGlob = $.matchGlob;
        this.prefix = $.prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBucketObjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBucketObjectsArgs $;

        public Builder() {
            $ = new GetBucketObjectsArgs();
        }

        public Builder(GetBucketObjectsArgs defaults) {
            $ = new GetBucketObjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the containing bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the containing bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param matchGlob A glob pattern used to filter results (for example, `foo*bar`).
         * 
         * @return builder
         * 
         */
        public Builder matchGlob(@Nullable Output<String> matchGlob) {
            $.matchGlob = matchGlob;
            return this;
        }

        /**
         * @param matchGlob A glob pattern used to filter results (for example, `foo*bar`).
         * 
         * @return builder
         * 
         */
        public Builder matchGlob(String matchGlob) {
            return matchGlob(Output.of(matchGlob));
        }

        /**
         * @param prefix Filter results to include only objects whose names begin with this prefix.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Filter results to include only objects whose names begin with this prefix.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public GetBucketObjectsArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("GetBucketObjectsArgs", "bucket");
            }
            return $;
        }
    }

}
