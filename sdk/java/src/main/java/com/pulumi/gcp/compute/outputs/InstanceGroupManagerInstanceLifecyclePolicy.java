// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceGroupManagerInstanceLifecyclePolicy {
    /**
     * @return , Specifies the action that a MIG performs on a failed VM. If the value of the `onFailedHealthCheck` field is `DEFAULT_ACTION`, then the same action also applies to the VMs on which your application fails a health check. Valid options are: `DO_NOTHING`, `REPAIR`. If `DO_NOTHING`, then MIG does not repair a failed VM. If `REPAIR` (default), then MIG automatically repairs a failed VM by recreating it. For more information, see about repairing VMs in a MIG.
     * 
     */
    private @Nullable String defaultActionOnFailure;
    /**
     * @return , Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: `YES`, `NO`. If `YES` and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If `NO` (default), then updates are applied in accordance with the group&#39;s update policy type.
     * 
     */
    private @Nullable String forceUpdateOnRepair;
    /**
     * @return , Specifies the action that a MIG performs on an unhealthy VM. A VM is marked as unhealthy when the application running on that VM fails a health check. Valid options are: `DEFAULT_ACTION`, `DO_NOTHING`, `REPAIR`. If `DEFAULT_ACTION` (default), then MIG uses the same action configured for the  `defaultActionOnFailure` field. If `DO_NOTHING`, then MIG does not repair unhealthy VM. If `REPAIR`, then MIG automatically repairs an unhealthy VM by recreating it. For more information, see about repairing VMs in a MIG.
     * 
     * ***
     * 
     */
    private @Nullable String onFailedHealthCheck;

    private InstanceGroupManagerInstanceLifecyclePolicy() {}
    /**
     * @return , Specifies the action that a MIG performs on a failed VM. If the value of the `onFailedHealthCheck` field is `DEFAULT_ACTION`, then the same action also applies to the VMs on which your application fails a health check. Valid options are: `DO_NOTHING`, `REPAIR`. If `DO_NOTHING`, then MIG does not repair a failed VM. If `REPAIR` (default), then MIG automatically repairs a failed VM by recreating it. For more information, see about repairing VMs in a MIG.
     * 
     */
    public Optional<String> defaultActionOnFailure() {
        return Optional.ofNullable(this.defaultActionOnFailure);
    }
    /**
     * @return , Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: `YES`, `NO`. If `YES` and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If `NO` (default), then updates are applied in accordance with the group&#39;s update policy type.
     * 
     */
    public Optional<String> forceUpdateOnRepair() {
        return Optional.ofNullable(this.forceUpdateOnRepair);
    }
    /**
     * @return , Specifies the action that a MIG performs on an unhealthy VM. A VM is marked as unhealthy when the application running on that VM fails a health check. Valid options are: `DEFAULT_ACTION`, `DO_NOTHING`, `REPAIR`. If `DEFAULT_ACTION` (default), then MIG uses the same action configured for the  `defaultActionOnFailure` field. If `DO_NOTHING`, then MIG does not repair unhealthy VM. If `REPAIR`, then MIG automatically repairs an unhealthy VM by recreating it. For more information, see about repairing VMs in a MIG.
     * 
     * ***
     * 
     */
    public Optional<String> onFailedHealthCheck() {
        return Optional.ofNullable(this.onFailedHealthCheck);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceGroupManagerInstanceLifecyclePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultActionOnFailure;
        private @Nullable String forceUpdateOnRepair;
        private @Nullable String onFailedHealthCheck;
        public Builder() {}
        public Builder(InstanceGroupManagerInstanceLifecyclePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultActionOnFailure = defaults.defaultActionOnFailure;
    	      this.forceUpdateOnRepair = defaults.forceUpdateOnRepair;
    	      this.onFailedHealthCheck = defaults.onFailedHealthCheck;
        }

        @CustomType.Setter
        public Builder defaultActionOnFailure(@Nullable String defaultActionOnFailure) {

            this.defaultActionOnFailure = defaultActionOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder forceUpdateOnRepair(@Nullable String forceUpdateOnRepair) {

            this.forceUpdateOnRepair = forceUpdateOnRepair;
            return this;
        }
        @CustomType.Setter
        public Builder onFailedHealthCheck(@Nullable String onFailedHealthCheck) {

            this.onFailedHealthCheck = onFailedHealthCheck;
            return this;
        }
        public InstanceGroupManagerInstanceLifecyclePolicy build() {
            final var _resultValue = new InstanceGroupManagerInstanceLifecyclePolicy();
            _resultValue.defaultActionOnFailure = defaultActionOnFailure;
            _resultValue.forceUpdateOnRepair = forceUpdateOnRepair;
            _resultValue.onFailedHealthCheck = onFailedHealthCheck;
            return _resultValue;
        }
    }
}
