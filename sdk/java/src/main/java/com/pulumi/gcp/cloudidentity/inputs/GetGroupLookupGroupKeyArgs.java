// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudidentity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupLookupGroupKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGroupLookupGroupKeyArgs Empty = new GetGroupLookupGroupKeyArgs();

    /**
     * (Required) The ID of the entity.
     * For Google-managed entities, the id is the email address of an existing group or user.
     * For external-identity-mapped entities, the id is a string conforming
     * to the Identity Source&#39;s requirements.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return (Required) The ID of the entity.
     * For Google-managed entities, the id is the email address of an existing group or user.
     * For external-identity-mapped entities, the id is a string conforming
     * to the Identity Source&#39;s requirements.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * (Optional) The namespace in which the entity exists.
     * If not populated, the EntityKey represents a Google-managed entity
     * such as a Google user or a Google Group.
     * If populated, the EntityKey represents an external-identity-mapped group.
     * The namespace must correspond to an identity source created in Admin Console
     * and must be in the form of `identitysources/{identity_source_id}`.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return (Optional) The namespace in which the entity exists.
     * If not populated, the EntityKey represents a Google-managed entity
     * such as a Google user or a Google Group.
     * If populated, the EntityKey represents an external-identity-mapped group.
     * The namespace must correspond to an identity source created in Admin Console
     * and must be in the form of `identitysources/{identity_source_id}`.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private GetGroupLookupGroupKeyArgs() {}

    private GetGroupLookupGroupKeyArgs(GetGroupLookupGroupKeyArgs $) {
        this.id = $.id;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupLookupGroupKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupLookupGroupKeyArgs $;

        public Builder() {
            $ = new GetGroupLookupGroupKeyArgs();
        }

        public Builder(GetGroupLookupGroupKeyArgs defaults) {
            $ = new GetGroupLookupGroupKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id (Required) The ID of the entity.
         * For Google-managed entities, the id is the email address of an existing group or user.
         * For external-identity-mapped entities, the id is a string conforming
         * to the Identity Source&#39;s requirements.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id (Required) The ID of the entity.
         * For Google-managed entities, the id is the email address of an existing group or user.
         * For external-identity-mapped entities, the id is a string conforming
         * to the Identity Source&#39;s requirements.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param namespace (Optional) The namespace in which the entity exists.
         * If not populated, the EntityKey represents a Google-managed entity
         * such as a Google user or a Google Group.
         * If populated, the EntityKey represents an external-identity-mapped group.
         * The namespace must correspond to an identity source created in Admin Console
         * and must be in the form of `identitysources/{identity_source_id}`.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace (Optional) The namespace in which the entity exists.
         * If not populated, the EntityKey represents a Google-managed entity
         * such as a Google user or a Google Group.
         * If populated, the EntityKey represents an external-identity-mapped group.
         * The namespace must correspond to an identity source created in Admin Console
         * and must be in the form of `identitysources/{identity_source_id}`.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public GetGroupLookupGroupKeyArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetGroupLookupGroupKeyArgs", "id");
            }
            return $;
        }
    }

}
