// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceBinaryAuthorization {
    /**
     * @return If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     * 
     */
    private @Nullable String breakglassJustification;
    /**
     * @return If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
     * 
     */
    private @Nullable Boolean useDefault;

    private ServiceBinaryAuthorization() {}
    /**
     * @return If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     * 
     */
    public Optional<String> breakglassJustification() {
        return Optional.ofNullable(this.breakglassJustification);
    }
    /**
     * @return If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
     * 
     */
    public Optional<Boolean> useDefault() {
        return Optional.ofNullable(this.useDefault);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceBinaryAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String breakglassJustification;
        private @Nullable Boolean useDefault;
        public Builder() {}
        public Builder(ServiceBinaryAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.breakglassJustification = defaults.breakglassJustification;
    	      this.useDefault = defaults.useDefault;
        }

        @CustomType.Setter
        public Builder breakglassJustification(@Nullable String breakglassJustification) {
            this.breakglassJustification = breakglassJustification;
            return this;
        }
        @CustomType.Setter
        public Builder useDefault(@Nullable Boolean useDefault) {
            this.useDefault = useDefault;
            return this;
        }
        public ServiceBinaryAuthorization build() {
            final var o = new ServiceBinaryAuthorization();
            o.breakglassJustification = breakglassJustification;
            o.useDefault = useDefault;
            return o;
        }
    }
}
