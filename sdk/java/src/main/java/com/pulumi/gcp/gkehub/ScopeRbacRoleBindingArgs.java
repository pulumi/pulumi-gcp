// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.ScopeRbacRoleBindingRoleArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScopeRbacRoleBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScopeRbacRoleBindingArgs Empty = new ScopeRbacRoleBindingArgs();

    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * group is the group, as seen by the kubernetes cluster.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * Labels for this ScopeRBACRoleBinding.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for this ScopeRBACRoleBinding.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Role to bind to the principal.
     * Structure is documented below.
     * 
     */
    @Import(name="role", required=true)
    private Output<ScopeRbacRoleBindingRoleArgs> role;

    /**
     * @return Role to bind to the principal.
     * Structure is documented below.
     * 
     */
    public Output<ScopeRbacRoleBindingRoleArgs> role() {
        return this.role;
    }

    /**
     * Id of the scope
     * 
     */
    @Import(name="scopeId", required=true)
    private Output<String> scopeId;

    /**
     * @return Id of the scope
     * 
     */
    public Output<String> scopeId() {
        return this.scopeId;
    }

    /**
     * The client-provided identifier of the RBAC Role Binding.
     * 
     */
    @Import(name="scopeRbacRoleBindingId", required=true)
    private Output<String> scopeRbacRoleBindingId;

    /**
     * @return The client-provided identifier of the RBAC Role Binding.
     * 
     */
    public Output<String> scopeRbacRoleBindingId() {
        return this.scopeRbacRoleBindingId;
    }

    /**
     * Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * &#34;alice&#34; or &#34;alice@domain.tld&#34;
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Principal that is be authorized in the cluster (at least of one the oneof
     * is required). Updating one will unset the other automatically.
     * user is the name of the user as seen by the kubernetes cluster, example
     * &#34;alice&#34; or &#34;alice@domain.tld&#34;
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private ScopeRbacRoleBindingArgs() {}

    private ScopeRbacRoleBindingArgs(ScopeRbacRoleBindingArgs $) {
        this.group = $.group;
        this.labels = $.labels;
        this.project = $.project;
        this.role = $.role;
        this.scopeId = $.scopeId;
        this.scopeRbacRoleBindingId = $.scopeRbacRoleBindingId;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScopeRbacRoleBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScopeRbacRoleBindingArgs $;

        public Builder() {
            $ = new ScopeRbacRoleBindingArgs();
        }

        public Builder(ScopeRbacRoleBindingArgs defaults) {
            $ = new ScopeRbacRoleBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param group Principal that is be authorized in the cluster (at least of one the oneof
         * is required). Updating one will unset the other automatically.
         * group is the group, as seen by the kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group Principal that is be authorized in the cluster (at least of one the oneof
         * is required). Updating one will unset the other automatically.
         * group is the group, as seen by the kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param labels Labels for this ScopeRBACRoleBinding.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for this ScopeRBACRoleBinding.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param role Role to bind to the principal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<ScopeRbacRoleBindingRoleArgs> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Role to bind to the principal.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder role(ScopeRbacRoleBindingRoleArgs role) {
            return role(Output.of(role));
        }

        /**
         * @param scopeId Id of the scope
         * 
         * @return builder
         * 
         */
        public Builder scopeId(Output<String> scopeId) {
            $.scopeId = scopeId;
            return this;
        }

        /**
         * @param scopeId Id of the scope
         * 
         * @return builder
         * 
         */
        public Builder scopeId(String scopeId) {
            return scopeId(Output.of(scopeId));
        }

        /**
         * @param scopeRbacRoleBindingId The client-provided identifier of the RBAC Role Binding.
         * 
         * @return builder
         * 
         */
        public Builder scopeRbacRoleBindingId(Output<String> scopeRbacRoleBindingId) {
            $.scopeRbacRoleBindingId = scopeRbacRoleBindingId;
            return this;
        }

        /**
         * @param scopeRbacRoleBindingId The client-provided identifier of the RBAC Role Binding.
         * 
         * @return builder
         * 
         */
        public Builder scopeRbacRoleBindingId(String scopeRbacRoleBindingId) {
            return scopeRbacRoleBindingId(Output.of(scopeRbacRoleBindingId));
        }

        /**
         * @param user Principal that is be authorized in the cluster (at least of one the oneof
         * is required). Updating one will unset the other automatically.
         * user is the name of the user as seen by the kubernetes cluster, example
         * &#34;alice&#34; or &#34;alice@domain.tld&#34;
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Principal that is be authorized in the cluster (at least of one the oneof
         * is required). Updating one will unset the other automatically.
         * user is the name of the user as seen by the kubernetes cluster, example
         * &#34;alice&#34; or &#34;alice@domain.tld&#34;
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ScopeRbacRoleBindingArgs build() {
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.scopeId = Objects.requireNonNull($.scopeId, "expected parameter 'scopeId' to be non-null");
            $.scopeRbacRoleBindingId = Objects.requireNonNull($.scopeRbacRoleBindingId, "expected parameter 'scopeRbacRoleBindingId' to be non-null");
            return $;
        }
    }

}
