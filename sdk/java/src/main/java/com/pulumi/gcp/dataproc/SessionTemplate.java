// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.dataproc.SessionTemplateArgs;
import com.pulumi.gcp.dataproc.inputs.SessionTemplateState;
import com.pulumi.gcp.dataproc.outputs.SessionTemplateEnvironmentConfig;
import com.pulumi.gcp.dataproc.outputs.SessionTemplateJupyterSession;
import com.pulumi.gcp.dataproc.outputs.SessionTemplateRuntimeConfig;
import com.pulumi.gcp.dataproc.outputs.SessionTemplateSparkConnectSession;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Dataproc Serverless session template defines the configuration settings for
 * creating one or more Dataproc Serverless interactive sessions.
 * 
 * To get more information about SessionTemplate, see:
 * 
 * * [API documentation](https://cloud.google.com/dataproc-serverless/docs/reference/rest/v1/projects.locations.sessionTemplates)
 * * How-to Guides
 *     * [Dataproc Serverless Session Templates](https://cloud.google.com/dataproc-serverless/docs/guides/create-serverless-sessions-templates#create-dataproc-serverless-session-template)
 * 
 * ## Example Usage
 * 
 * ### Dataproc Session Templates Jupyter
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dataproc.SessionTemplate;
 * import com.pulumi.gcp.dataproc.SessionTemplateArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateRuntimeConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigExecutionConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigExecutionConfigAuthenticationConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateJupyterSessionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleSessionTemplatesJupyter = new SessionTemplate("exampleSessionTemplatesJupyter", SessionTemplateArgs.builder()
 *             .name("projects/my-project-name/locations/us-central1/sessionTemplates/jupyter-session-template")
 *             .location("us-central1")
 *             .labels(Map.of("session_template_test", "terraform"))
 *             .runtimeConfig(SessionTemplateRuntimeConfigArgs.builder()
 *                 .properties(Map.ofEntries(
 *                     Map.entry("spark.dynamicAllocation.enabled", "false"),
 *                     Map.entry("spark.executor.instances", "2")
 *                 ))
 *                 .build())
 *             .environmentConfig(SessionTemplateEnvironmentConfigArgs.builder()
 *                 .executionConfig(SessionTemplateEnvironmentConfigExecutionConfigArgs.builder()
 *                     .subnetworkUri("default")
 *                     .idleTtl("3600s")
 *                     .networkTags("tag1")
 *                     .authenticationConfig(SessionTemplateEnvironmentConfigExecutionConfigAuthenticationConfigArgs.builder()
 *                         .userWorkloadAuthenticationType("END_USER_CREDENTIALS")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .jupyterSession(SessionTemplateJupyterSessionArgs.builder()
 *                 .kernel("PYTHON")
 *                 .displayName("tf python kernel")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Dataproc Session Templates Jupyter Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.storage.StorageFunctions;
 * import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.gcp.dataproc.MetastoreService;
 * import com.pulumi.gcp.dataproc.MetastoreServiceArgs;
 * import com.pulumi.gcp.dataproc.inputs.MetastoreServiceMaintenanceWindowArgs;
 * import com.pulumi.gcp.dataproc.inputs.MetastoreServiceHiveMetastoreConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.MetastoreServiceNetworkConfigArgs;
 * import com.pulumi.gcp.dataproc.Cluster;
 * import com.pulumi.gcp.dataproc.ClusterArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigSoftwareConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigGceClusterConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigEndpointConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigMasterConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigMasterConfigDiskConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.ClusterClusterConfigMetastoreConfigArgs;
 * import com.pulumi.gcp.dataproc.SessionTemplate;
 * import com.pulumi.gcp.dataproc.SessionTemplateArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateRuntimeConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigExecutionConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigExecutionConfigAuthenticationConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigPeripheralsConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateJupyterSessionArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         final var gcsAccount = StorageFunctions.getProjectServiceAccount(GetProjectServiceAccountArgs.builder()
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .uniformBucketLevelAccess(true)
 *             .name("dataproc-bucket")
 *             .location("US")
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var cryptoKeyMember1 = new CryptoKeyIAMMember("cryptoKeyMember1", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId("example-key")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code dataproc-accounts.iam.gserviceaccount.com", project.number()))
 *             .build());
 * 
 *         var ms = new MetastoreService("ms", MetastoreServiceArgs.builder()
 *             .serviceId("jupyter-session-template")
 *             .location("us-central1")
 *             .port(9080)
 *             .tier("DEVELOPER")
 *             .maintenanceWindow(MetastoreServiceMaintenanceWindowArgs.builder()
 *                 .hourOfDay(2)
 *                 .dayOfWeek("SUNDAY")
 *                 .build())
 *             .hiveMetastoreConfig(MetastoreServiceHiveMetastoreConfigArgs.builder()
 *                 .version("3.1.2")
 *                 .build())
 *             .networkConfig(MetastoreServiceNetworkConfigArgs.builder()
 *                 .consumers(MetastoreServiceNetworkConfigConsumerArgs.builder()
 *                     .subnetwork("projects/my-project-name/regions/us-central1/subnetworks/default")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var basic = new Cluster("basic", ClusterArgs.builder()
 *             .name("jupyter-session-template")
 *             .region("us-central1")
 *             .clusterConfig(ClusterClusterConfigArgs.builder()
 *                 .softwareConfig(ClusterClusterConfigSoftwareConfigArgs.builder()
 *                     .overrideProperties(Map.ofEntries(
 *                         Map.entry("dataproc:dataproc.allow.zero.workers", "true"),
 *                         Map.entry("spark:spark.history.fs.logDirectory", bucket.name().applyValue(_name -> String.format("gs://%s/*}&#47;{@code spark-job-history", _name)))
 *                     ))
 *                     .build())
 *                 .gceClusterConfig(ClusterClusterConfigGceClusterConfigArgs.builder()
 *                     .subnetwork("default")
 *                     .build())
 *                 .endpointConfig(ClusterClusterConfigEndpointConfigArgs.builder()
 *                     .enableHttpPortAccess(true)
 *                     .build())
 *                 .masterConfig(ClusterClusterConfigMasterConfigArgs.builder()
 *                     .numInstances(1)
 *                     .machineType("e2-standard-2")
 *                     .diskConfig(ClusterClusterConfigMasterConfigDiskConfigArgs.builder()
 *                         .bootDiskSizeGb(35)
 *                         .build())
 *                     .build())
 *                 .metastoreConfig(ClusterClusterConfigMetastoreConfigArgs.builder()
 *                     .dataprocMetastoreService(ms.name())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var dataprocSessionTemplatesJupyterFull = new SessionTemplate("dataprocSessionTemplatesJupyterFull", SessionTemplateArgs.builder()
 *             .name("projects/my-project-name/locations/us-central1/sessionTemplates/jupyter-session-template")
 *             .location("us-central1")
 *             .labels(Map.of("session_template_test", "terraform"))
 *             .runtimeConfig(SessionTemplateRuntimeConfigArgs.builder()
 *                 .properties(Map.ofEntries(
 *                     Map.entry("spark.dynamicAllocation.enabled", "false"),
 *                     Map.entry("spark.executor.instances", "2")
 *                 ))
 *                 .version("2.2")
 *                 .containerImage("us-docker.pkg.dev/my-project-name/s8s-spark-test-images/s8s-spark:latest")
 *                 .build())
 *             .environmentConfig(SessionTemplateEnvironmentConfigArgs.builder()
 *                 .executionConfig(SessionTemplateEnvironmentConfigExecutionConfigArgs.builder()
 *                     .ttl("3600s")
 *                     .networkTags("tag1")
 *                     .kmsKey("example-key")
 *                     .subnetworkUri("default")
 *                     .serviceAccount(String.format("%s-compute}{@literal @}{@code developer.gserviceaccount.com", project.number()))
 *                     .stagingBucket(bucket.name())
 *                     .authenticationConfig(SessionTemplateEnvironmentConfigExecutionConfigAuthenticationConfigArgs.builder()
 *                         .userWorkloadAuthenticationType("SERVICE_ACCOUNT")
 *                         .build())
 *                     .build())
 *                 .peripheralsConfig(SessionTemplateEnvironmentConfigPeripheralsConfigArgs.builder()
 *                     .metastoreService(ms.name())
 *                     .sparkHistoryServerConfig(SessionTemplateEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigArgs.builder()
 *                         .dataprocCluster(basic.id())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .jupyterSession(SessionTemplateJupyterSessionArgs.builder()
 *                 .kernel("PYTHON")
 *                 .displayName("tf python kernel")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(cryptoKeyMember1)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Dataproc Session Templates Spark Connect
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dataproc.SessionTemplate;
 * import com.pulumi.gcp.dataproc.SessionTemplateArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateRuntimeConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigArgs;
 * import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigExecutionConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleSessionTemplatesSparkConnect = new SessionTemplate("exampleSessionTemplatesSparkConnect", SessionTemplateArgs.builder()
 *             .name("projects/my-project-name/locations/us-central1/sessionTemplates/sc-session-template")
 *             .location("us-central1")
 *             .labels(Map.of("session_template_test", "terraform"))
 *             .runtimeConfig(SessionTemplateRuntimeConfigArgs.builder()
 *                 .properties(Map.ofEntries(
 *                     Map.entry("spark.dynamicAllocation.enabled", "false"),
 *                     Map.entry("spark.executor.instances", "2")
 *                 ))
 *                 .build())
 *             .environmentConfig(SessionTemplateEnvironmentConfigArgs.builder()
 *                 .executionConfig(SessionTemplateEnvironmentConfigExecutionConfigArgs.builder()
 *                     .subnetworkUri("default")
 *                     .ttl("3600s")
 *                     .networkTags("tag1")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * SessionTemplate can be imported using any of these accepted formats:
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, SessionTemplate can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:dataproc/sessionTemplate:SessionTemplate default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:dataproc/sessionTemplate:SessionTemplate")
public class SessionTemplate extends com.pulumi.resources.CustomResource {
    /**
     * The time when the session template was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time when the session template was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The email address of the user who created the session template.
     * 
     */
    @Export(name="creator", refs={String.class}, tree="[0]")
    private Output<String> creator;

    /**
     * @return The email address of the user who created the session template.
     * 
     */
    public Output<String> creator() {
        return this.creator;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Environment configuration for the session execution.
     * Structure is documented below.
     * 
     */
    @Export(name="environmentConfig", refs={SessionTemplateEnvironmentConfig.class}, tree="[0]")
    private Output</* @Nullable */ SessionTemplateEnvironmentConfig> environmentConfig;

    /**
     * @return Environment configuration for the session execution.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SessionTemplateEnvironmentConfig>> environmentConfig() {
        return Codegen.optional(this.environmentConfig);
    }
    /**
     * Jupyter configuration for an interactive session.
     * Structure is documented below.
     * 
     */
    @Export(name="jupyterSession", refs={SessionTemplateJupyterSession.class}, tree="[0]")
    private Output</* @Nullable */ SessionTemplateJupyterSession> jupyterSession;

    /**
     * @return Jupyter configuration for an interactive session.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SessionTemplateJupyterSession>> jupyterSession() {
        return Codegen.optional(this.jupyterSession);
    }
    /**
     * The labels to associate with this session template.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The labels to associate with this session template.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location in which the session template will be created in.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location in which the session template will be created in.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Runtime configuration for the session template.
     * Structure is documented below.
     * 
     */
    @Export(name="runtimeConfig", refs={SessionTemplateRuntimeConfig.class}, tree="[0]")
    private Output</* @Nullable */ SessionTemplateRuntimeConfig> runtimeConfig;

    /**
     * @return Runtime configuration for the session template.
     * Structure is documented below.
     * 
     */
    public Output<Optional<SessionTemplateRuntimeConfig>> runtimeConfig() {
        return Codegen.optional(this.runtimeConfig);
    }
    /**
     * Spark connect configuration for an interactive session.
     * 
     */
    @Export(name="sparkConnectSession", refs={SessionTemplateSparkConnectSession.class}, tree="[0]")
    private Output</* @Nullable */ SessionTemplateSparkConnectSession> sparkConnectSession;

    /**
     * @return Spark connect configuration for an interactive session.
     * 
     */
    public Output<Optional<SessionTemplateSparkConnectSession>> sparkConnectSession() {
        return Codegen.optional(this.sparkConnectSession);
    }
    /**
     * The time when the session template was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time when the session template was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SessionTemplate(java.lang.String name) {
        this(name, SessionTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SessionTemplate(java.lang.String name, @Nullable SessionTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SessionTemplate(java.lang.String name, @Nullable SessionTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dataproc/sessionTemplate:SessionTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SessionTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable SessionTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dataproc/sessionTemplate:SessionTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static SessionTemplateArgs makeArgs(@Nullable SessionTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SessionTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SessionTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable SessionTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SessionTemplate(name, id, state, options);
    }
}
