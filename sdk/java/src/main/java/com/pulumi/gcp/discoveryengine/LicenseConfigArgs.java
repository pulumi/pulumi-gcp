// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.discoveryengine.inputs.LicenseConfigEndDateArgs;
import com.pulumi.gcp.discoveryengine.inputs.LicenseConfigStartDateArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicenseConfigArgs Empty = new LicenseConfigArgs();

    /**
     * Whether the license config should be auto renewed when it reaches the end date.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Whether the license config should be auto renewed when it reaches the end date.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The planned end date.
     * Structure is documented below.
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<LicenseConfigEndDateArgs> endDate;

    /**
     * @return The planned end date.
     * Structure is documented below.
     * 
     */
    public Optional<Output<LicenseConfigEndDateArgs>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Whether the license config is for free trial.
     * 
     */
    @Import(name="freeTrial")
    private @Nullable Output<Boolean> freeTrial;

    /**
     * @return Whether the license config is for free trial.
     * 
     */
    public Optional<Output<Boolean>> freeTrial() {
        return Optional.ofNullable(this.freeTrial);
    }

    /**
     * The unique id of the license config.
     * 
     */
    @Import(name="licenseConfigId", required=true)
    private Output<String> licenseConfigId;

    /**
     * @return The unique id of the license config.
     * 
     */
    public Output<String> licenseConfigId() {
        return this.licenseConfigId;
    }

    /**
     * Number of licenses purchased.
     * 
     */
    @Import(name="licenseCount", required=true)
    private Output<Integer> licenseCount;

    /**
     * @return Number of licenses purchased.
     * 
     */
    public Output<Integer> licenseCount() {
        return this.licenseCount;
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The start date.
     * Structure is documented below.
     * 
     */
    @Import(name="startDate", required=true)
    private Output<LicenseConfigStartDateArgs> startDate;

    /**
     * @return The start date.
     * Structure is documented below.
     * 
     */
    public Output<LicenseConfigStartDateArgs> startDate() {
        return this.startDate;
    }

    /**
     * Subscription term.
     * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
     * 
     */
    @Import(name="subscriptionTerm", required=true)
    private Output<String> subscriptionTerm;

    /**
     * @return Subscription term.
     * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
     * 
     */
    public Output<String> subscriptionTerm() {
        return this.subscriptionTerm;
    }

    /**
     * Subscription tier information for the license config.
     * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
     * 
     */
    @Import(name="subscriptionTier", required=true)
    private Output<String> subscriptionTier;

    /**
     * @return Subscription tier information for the license config.
     * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
     * 
     */
    public Output<String> subscriptionTier() {
        return this.subscriptionTier;
    }

    private LicenseConfigArgs() {}

    private LicenseConfigArgs(LicenseConfigArgs $) {
        this.autoRenew = $.autoRenew;
        this.endDate = $.endDate;
        this.freeTrial = $.freeTrial;
        this.licenseConfigId = $.licenseConfigId;
        this.licenseCount = $.licenseCount;
        this.location = $.location;
        this.project = $.project;
        this.startDate = $.startDate;
        this.subscriptionTerm = $.subscriptionTerm;
        this.subscriptionTier = $.subscriptionTier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseConfigArgs $;

        public Builder() {
            $ = new LicenseConfigArgs();
        }

        public Builder(LicenseConfigArgs defaults) {
            $ = new LicenseConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenew Whether the license config should be auto renewed when it reaches the end date.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Whether the license config should be auto renewed when it reaches the end date.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param endDate The planned end date.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<LicenseConfigEndDateArgs> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The planned end date.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endDate(LicenseConfigEndDateArgs endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param freeTrial Whether the license config is for free trial.
         * 
         * @return builder
         * 
         */
        public Builder freeTrial(@Nullable Output<Boolean> freeTrial) {
            $.freeTrial = freeTrial;
            return this;
        }

        /**
         * @param freeTrial Whether the license config is for free trial.
         * 
         * @return builder
         * 
         */
        public Builder freeTrial(Boolean freeTrial) {
            return freeTrial(Output.of(freeTrial));
        }

        /**
         * @param licenseConfigId The unique id of the license config.
         * 
         * @return builder
         * 
         */
        public Builder licenseConfigId(Output<String> licenseConfigId) {
            $.licenseConfigId = licenseConfigId;
            return this;
        }

        /**
         * @param licenseConfigId The unique id of the license config.
         * 
         * @return builder
         * 
         */
        public Builder licenseConfigId(String licenseConfigId) {
            return licenseConfigId(Output.of(licenseConfigId));
        }

        /**
         * @param licenseCount Number of licenses purchased.
         * 
         * @return builder
         * 
         */
        public Builder licenseCount(Output<Integer> licenseCount) {
            $.licenseCount = licenseCount;
            return this;
        }

        /**
         * @param licenseCount Number of licenses purchased.
         * 
         * @return builder
         * 
         */
        public Builder licenseCount(Integer licenseCount) {
            return licenseCount(Output.of(licenseCount));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param startDate The start date.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder startDate(Output<LicenseConfigStartDateArgs> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The start date.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder startDate(LicenseConfigStartDateArgs startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param subscriptionTerm Subscription term.
         * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionTerm(Output<String> subscriptionTerm) {
            $.subscriptionTerm = subscriptionTerm;
            return this;
        }

        /**
         * @param subscriptionTerm Subscription term.
         * Possible values are: `SUBSCRIPTION_TERM_UNSPECIFIED`, `SUBSCRIPTION_TERM_ONE_MONTH`, `SUBSCRIPTION_TERM_ONE_YEAR`, `SUBSCRIPTION_TERM_THREE_YEARS`, `SUBSCRIPTION_TERM_THREE_MONTHS`, `SUBSCRIPTION_TERM_FOURTEEN_DAYS`, `SUBSCRIPTION_TERM_CUSTOM`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionTerm(String subscriptionTerm) {
            return subscriptionTerm(Output.of(subscriptionTerm));
        }

        /**
         * @param subscriptionTier Subscription tier information for the license config.
         * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionTier(Output<String> subscriptionTier) {
            $.subscriptionTier = subscriptionTier;
            return this;
        }

        /**
         * @param subscriptionTier Subscription tier information for the license config.
         * Possible values are: `SUBSCRIPTION_TIER_UNSPECIFIED`, `SUBSCRIPTION_TIER_SEARCH`, `SUBSCRIPTION_TIER_SEARCH_AND_ASSISTANT`, `SUBSCRIPTION_TIER_NOTEBOOK_LM`, `SUBSCRIPTION_TIER_FRONTLINE_WORKER`, `SUBSCRIPTION_TIER_AGENTSPACE_STARTER`, `SUBSCRIPTION_TIER_AGENTSPACE_BUSINESS`, `SUBSCRIPTION_TIER_ENTERPRISE`, `SUBSCRIPTION_TIER_EDU`, `SUBSCRIPTION_TIER_EDU_PRO`.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionTier(String subscriptionTier) {
            return subscriptionTier(Output.of(subscriptionTier));
        }

        public LicenseConfigArgs build() {
            if ($.licenseConfigId == null) {
                throw new MissingRequiredPropertyException("LicenseConfigArgs", "licenseConfigId");
            }
            if ($.licenseCount == null) {
                throw new MissingRequiredPropertyException("LicenseConfigArgs", "licenseCount");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("LicenseConfigArgs", "location");
            }
            if ($.startDate == null) {
                throw new MissingRequiredPropertyException("LicenseConfigArgs", "startDate");
            }
            if ($.subscriptionTerm == null) {
                throw new MissingRequiredPropertyException("LicenseConfigArgs", "subscriptionTerm");
            }
            if ($.subscriptionTier == null) {
                throw new MissingRequiredPropertyException("LicenseConfigArgs", "subscriptionTier");
            }
            return $;
        }
    }

}
