// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.diagflow.outputs.CxPageEntryFulfillmentConditionalCase;
import com.pulumi.gcp.diagflow.outputs.CxPageEntryFulfillmentMessage;
import com.pulumi.gcp.diagflow.outputs.CxPageEntryFulfillmentSetParameterAction;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxPageEntryFulfillment {
    /**
     * @return Conditional cases for this fulfillment.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CxPageEntryFulfillmentConditionalCase> conditionalCases;
    /**
     * @return The list of rich message responses to present to the user.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CxPageEntryFulfillmentMessage> messages;
    /**
     * @return Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
     * 
     */
    private @Nullable Boolean returnPartialResponses;
    /**
     * @return Set parameter values before executing the webhook.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CxPageEntryFulfillmentSetParameterAction> setParameterActions;
    /**
     * @return The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
     * 
     */
    private @Nullable String tag;
    /**
     * @return The webhook to call. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/webhooks/&lt;Webhook ID&gt;.
     * 
     */
    private @Nullable String webhook;

    private CxPageEntryFulfillment() {}
    /**
     * @return Conditional cases for this fulfillment.
     * Structure is documented below.
     * 
     */
    public List<CxPageEntryFulfillmentConditionalCase> conditionalCases() {
        return this.conditionalCases == null ? List.of() : this.conditionalCases;
    }
    /**
     * @return The list of rich message responses to present to the user.
     * Structure is documented below.
     * 
     */
    public List<CxPageEntryFulfillmentMessage> messages() {
        return this.messages == null ? List.of() : this.messages;
    }
    /**
     * @return Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
     * 
     */
    public Optional<Boolean> returnPartialResponses() {
        return Optional.ofNullable(this.returnPartialResponses);
    }
    /**
     * @return Set parameter values before executing the webhook.
     * Structure is documented below.
     * 
     */
    public List<CxPageEntryFulfillmentSetParameterAction> setParameterActions() {
        return this.setParameterActions == null ? List.of() : this.setParameterActions;
    }
    /**
     * @return The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    /**
     * @return The webhook to call. Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/webhooks/&lt;Webhook ID&gt;.
     * 
     */
    public Optional<String> webhook() {
        return Optional.ofNullable(this.webhook);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxPageEntryFulfillment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<CxPageEntryFulfillmentConditionalCase> conditionalCases;
        private @Nullable List<CxPageEntryFulfillmentMessage> messages;
        private @Nullable Boolean returnPartialResponses;
        private @Nullable List<CxPageEntryFulfillmentSetParameterAction> setParameterActions;
        private @Nullable String tag;
        private @Nullable String webhook;
        public Builder() {}
        public Builder(CxPageEntryFulfillment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionalCases = defaults.conditionalCases;
    	      this.messages = defaults.messages;
    	      this.returnPartialResponses = defaults.returnPartialResponses;
    	      this.setParameterActions = defaults.setParameterActions;
    	      this.tag = defaults.tag;
    	      this.webhook = defaults.webhook;
        }

        @CustomType.Setter
        public Builder conditionalCases(@Nullable List<CxPageEntryFulfillmentConditionalCase> conditionalCases) {
            this.conditionalCases = conditionalCases;
            return this;
        }
        public Builder conditionalCases(CxPageEntryFulfillmentConditionalCase... conditionalCases) {
            return conditionalCases(List.of(conditionalCases));
        }
        @CustomType.Setter
        public Builder messages(@Nullable List<CxPageEntryFulfillmentMessage> messages) {
            this.messages = messages;
            return this;
        }
        public Builder messages(CxPageEntryFulfillmentMessage... messages) {
            return messages(List.of(messages));
        }
        @CustomType.Setter
        public Builder returnPartialResponses(@Nullable Boolean returnPartialResponses) {
            this.returnPartialResponses = returnPartialResponses;
            return this;
        }
        @CustomType.Setter
        public Builder setParameterActions(@Nullable List<CxPageEntryFulfillmentSetParameterAction> setParameterActions) {
            this.setParameterActions = setParameterActions;
            return this;
        }
        public Builder setParameterActions(CxPageEntryFulfillmentSetParameterAction... setParameterActions) {
            return setParameterActions(List.of(setParameterActions));
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {
            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder webhook(@Nullable String webhook) {
            this.webhook = webhook;
            return this;
        }
        public CxPageEntryFulfillment build() {
            final var _resultValue = new CxPageEntryFulfillment();
            _resultValue.conditionalCases = conditionalCases;
            _resultValue.messages = messages;
            _resultValue.returnPartialResponses = returnPartialResponses;
            _resultValue.setParameterActions = setParameterActions;
            _resultValue.tag = tag;
            _resultValue.webhook = webhook;
            return _resultValue;
        }
    }
}
