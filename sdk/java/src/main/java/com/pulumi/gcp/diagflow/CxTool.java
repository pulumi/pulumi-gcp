// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.diagflow.CxToolArgs;
import com.pulumi.gcp.diagflow.inputs.CxToolState;
import com.pulumi.gcp.diagflow.outputs.CxToolDataStoreSpec;
import com.pulumi.gcp.diagflow.outputs.CxToolFunctionSpec;
import com.pulumi.gcp.diagflow.outputs.CxToolOpenApiSpec;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A tool provides a list of actions which are available to the Playbook to attain its goal.
 * A Tool consists of a description of the tool&#39;s usage and a specification of the tool which contains the schema and authentication information.
 * 
 * To get more information about Tool, see:
 * 
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.tools)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 * 
 * ## Example Usage
 * 
 * ### Dialogflowcx Tool Open Api
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.diagflow.CxTool;
 * import com.pulumi.gcp.diagflow.CxToolArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolOpenApiSpecArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolOpenApiSpecAuthenticationArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolOpenApiSpecAuthenticationOauthConfigArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolOpenApiSpecTlsConfigArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolOpenApiSpecServiceDirectoryConfigArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.Base64encodeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent-open-api")
 *             .location("global")
 *             .defaultLanguageCode("en")
 *             .timeZone("America/New_York")
 *             .description("Example description.")
 *             .build());
 * 
 *         var openApiTool = new CxTool("openApiTool", CxToolArgs.builder()
 *             .parent(agent.id())
 *             .displayName("Example Open API Tool")
 *             .description("Example Description")
 *             .openApiSpec(CxToolOpenApiSpecArgs.builder()
 *                 .authentication(CxToolOpenApiSpecAuthenticationArgs.builder()
 *                     .oauthConfig(CxToolOpenApiSpecAuthenticationOauthConfigArgs.builder()
 *                         .oauthGrantType("CLIENT_CREDENTIAL")
 *                         .clientId("example client ID")
 *                         .clientSecret("example client secret")
 *                         .scopes("example scope")
 *                         .secretVersionForClientSecret("projects/-/secrets/-/versions/-")
 *                         .tokenEndpoint("https://example.com/oauth/token")
 *                         .build())
 *                     .build())
 *                 .tlsConfig(CxToolOpenApiSpecTlsConfigArgs.builder()
 *                     .caCerts(CxToolOpenApiSpecTlsConfigCaCertArgs.builder()
 *                         .displayName("example ca cert name")
 *                         .cert(StdFunctions.base64encode(Base64encodeArgs.builder()
 *                             .input("example cert")
 *                             .build()).result())
 *                         .build())
 *                     .build())
 *                 .serviceDirectoryConfig(CxToolOpenApiSpecServiceDirectoryConfigArgs.builder()
 *                     .service("projects/-/locations/-/namespaces/-/services/-")
 *                     .build())
 *                 .textSchema("""
 *     {
 *       "openapi": "3.0.0",
 *       "info": {
 *         "title": "Time API",
 *         "version": "1.0.0",
 *         "description": "A simple API to get the current time."
 *       },
 *       "servers": [
 *         {
 *           "url": "https://example-api-endpoint.com"
 *         }
 *       ],
 *       "paths": {
 *         "/time": {
 *           "get": {
 *             "operationId": "getCurrentTime",
 *             "summary": "Gets the current server time.",
 *             "responses": {
 *               "200": {
 *                 "description": "Successful response with the current time.",
 *                 "content": {
 *                   "application/json": {
 *                     "schema": {
 *                       "type": "object",
 *                       "properties": {
 *                         "currentTime": {
 *                           "type": "string",
 *                           "format": "date-time",
 *                           "description": "The current time in ISO 8601 format."
 *                         }
 *                       }
 *                     }
 *                   }
 *                 }
 *               }
 *             }
 *           }
 *         }
 *       }
 *     }
 *                 """)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Dialogflowcx Tool Data Store
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.discoveryengine.DataStore;
 * import com.pulumi.gcp.discoveryengine.DataStoreArgs;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.diagflow.CxTool;
 * import com.pulumi.gcp.diagflow.CxToolArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolDataStoreSpecArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolDataStoreSpecFallbackPromptArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myDatastore = new DataStore("myDatastore", DataStoreArgs.builder()
 *             .location("global")
 *             .dataStoreId("datastore-tool-test-_29439")
 *             .displayName("datastore for Tool test")
 *             .industryVertical("GENERIC")
 *             .contentConfig("NO_CONTENT")
 *             .solutionTypes("SOLUTION_TYPE_CHAT")
 *             .build());
 * 
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent-data-store")
 *             .location("global")
 *             .defaultLanguageCode("en")
 *             .timeZone("America/New_York")
 *             .description("Example description.")
 *             .deleteChatEngineOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(myDatastore)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var dataStoreTool = new CxTool("dataStoreTool", CxToolArgs.builder()
 *             .parent(agent.id())
 *             .displayName("Example Data Store Tool")
 *             .description("Example Description")
 *             .dataStoreSpec(CxToolDataStoreSpecArgs.builder()
 *                 .dataStoreConnections(CxToolDataStoreSpecDataStoreConnectionArgs.builder()
 *                     .dataStoreType("UNSTRUCTURED")
 *                     .dataStore(myDatastore.dataStoreId().applyValue(_dataStoreId -> String.format("projects/%s/locations/global/collections/default_collection/dataStores/%s", project.number(),_dataStoreId)))
 *                     .documentProcessingMode("DOCUMENTS")
 *                     .build())
 *                 .fallbackPrompt(CxToolDataStoreSpecFallbackPromptArgs.builder()
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     myDatastore,
 *                     agent)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Dialogflowcx Tool Function
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.diagflow.CxAgent;
 * import com.pulumi.gcp.diagflow.CxAgentArgs;
 * import com.pulumi.gcp.diagflow.CxTool;
 * import com.pulumi.gcp.diagflow.CxToolArgs;
 * import com.pulumi.gcp.diagflow.inputs.CxToolFunctionSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var agent = new CxAgent("agent", CxAgentArgs.builder()
 *             .displayName("dialogflowcx-agent-fucntion")
 *             .location("global")
 *             .defaultLanguageCode("en")
 *             .timeZone("America/New_York")
 *             .description("Example description.")
 *             .build());
 * 
 *         var functionTool = new CxTool("functionTool", CxToolArgs.builder()
 *             .parent(agent.id())
 *             .displayName("Example Function Tool")
 *             .description("Example Description")
 *             .functionSpec(CxToolFunctionSpecArgs.builder()
 *                 .inputSchema("""
 *       {
 *         "type": "object",
 *         "properties": {
 *           "message_to_echo": {
 *             "type": "string",
 *             "description": "The message that should be echoed back."
 *           }
 *         },
 *         "required": [
 *           "message_to_echo"
 *         ]
 *       }
 *                 """)
 *                 .outputSchema("""
 *       {
 *         "type": "object",
 *         "properties": {
 *           "echoed_message": {
 *             "type": "string",
 *             "description": "The message that is echoed back."
 *           }
 *         }
 *       }
 *                 """)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Tool can be imported using any of these accepted formats:
 * 
 * * `{{parent}}/tools/{{name}}`
 * 
 * * `{{parent}}/{{name}}`
 * 
 * When using the `pulumi import` command, Tool can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:diagflow/cxTool:CxTool default {{parent}}/tools/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:diagflow/cxTool:CxTool default {{parent}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:diagflow/cxTool:CxTool")
public class CxTool extends com.pulumi.resources.CustomResource {
    /**
     * Data store search tool specification.
     * This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
     * Structure is documented below.
     * 
     */
    @Export(name="dataStoreSpec", refs={CxToolDataStoreSpec.class}, tree="[0]")
    private Output</* @Nullable */ CxToolDataStoreSpec> dataStoreSpec;

    /**
     * @return Data store search tool specification.
     * This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxToolDataStoreSpec>> dataStoreSpec() {
        return Codegen.optional(this.dataStoreSpec);
    }
    /**
     * High level description of the Tool and its usage.
     * 
     * ***
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return High level description of the Tool and its usage.
     * 
     * ***
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The human-readable name of the tool, unique within the agent.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The human-readable name of the tool, unique within the agent.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Client side executed function specification.
     * This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
     * Structure is documented below.
     * 
     */
    @Export(name="functionSpec", refs={CxToolFunctionSpec.class}, tree="[0]")
    private Output</* @Nullable */ CxToolFunctionSpec> functionSpec;

    /**
     * @return Client side executed function specification.
     * This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxToolFunctionSpec>> functionSpec() {
        return Codegen.optional(this.functionSpec);
    }
    /**
     * The unique identifier of the Tool.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/tools/&lt;Tool ID&gt;.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique identifier of the Tool.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;/tools/&lt;Tool ID&gt;.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * OpenAPI specification of the Tool.
     * This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
     * Structure is documented below.
     * 
     */
    @Export(name="openApiSpec", refs={CxToolOpenApiSpec.class}, tree="[0]")
    private Output</* @Nullable */ CxToolOpenApiSpec> openApiSpec;

    /**
     * @return OpenAPI specification of the Tool.
     * This field is part of a union field `specification`: Only one of `openApiSpec`, `dataStoreSpec`, or `functionSpec` may be set.
     * Structure is documented below.
     * 
     */
    public Output<Optional<CxToolOpenApiSpec>> openApiSpec() {
        return Codegen.optional(this.openApiSpec);
    }
    /**
     * The agent to create a Tool for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parent;

    /**
     * @return The agent to create a Tool for.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/agents/&lt;Agent ID&gt;.
     * 
     */
    public Output<Optional<String>> parent() {
        return Codegen.optional(this.parent);
    }
    /**
     * The tool type.
     * 
     */
    @Export(name="toolType", refs={String.class}, tree="[0]")
    private Output<String> toolType;

    /**
     * @return The tool type.
     * 
     */
    public Output<String> toolType() {
        return this.toolType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CxTool(java.lang.String name) {
        this(name, CxToolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CxTool(java.lang.String name, CxToolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CxTool(java.lang.String name, CxToolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxTool:CxTool", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CxTool(java.lang.String name, Output<java.lang.String> id, @Nullable CxToolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:diagflow/cxTool:CxTool", name, state, makeResourceOptions(options, id), false);
    }

    private static CxToolArgs makeArgs(CxToolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CxToolArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CxTool get(java.lang.String name, Output<java.lang.String> id, @Nullable CxToolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CxTool(name, id, state, options);
    }
}
