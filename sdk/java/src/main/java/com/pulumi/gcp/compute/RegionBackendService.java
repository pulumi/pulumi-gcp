// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.RegionBackendServiceArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceState;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceBackend;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceCdnPolicy;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceCircuitBreakers;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceConnectionTrackingPolicy;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceConsistentHash;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceCustomMetric;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceDynamicForwarding;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceFailoverPolicy;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceHaPolicy;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceIap;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceLogConfig;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceOutlierDetection;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceParams;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceStrongSessionAffinityCookie;
import com.pulumi.gcp.compute.outputs.RegionBackendServiceSubsetting;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Region Backend Service defines a regionally-scoped group of virtual
 * machines that will serve traffic for load balancing.
 * 
 * &gt; **Note:** Recreating a `gcp.compute.RegionBackendService` that references other dependent resources like `gcp.compute.InstanceGroup` will give a `resourceInUseByAnotherResource` error, when decreasing the number of other dependent resources.
 * Use `lifecycle.create_before_destroy` on the dependent resources to avoid this type of error as shown in the Dynamic Backend Count example.
 * 
 * To get more information about RegionBackendService, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices)
 * * How-to Guides
 *     * [Internal TCP/UDP Load Balancing](https://cloud.google.com/compute/docs/load-balancing/internal/)
 * 
 * ## Example Usage
 * 
 * ### Region Backend Service Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHealthCheck = new HealthCheck("defaultHealthCheck", HealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .name("region-service")
 *             .region("us-central1")
 *             .healthChecks(defaultHealthCheck.id())
 *             .connectionDrainingTimeoutSec(10)
 *             .sessionAffinity("CLIENT_IP")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service External Iap
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceIapArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .name("tf-test-region-service-external")
 *             .region("us-central1")
 *             .protocol("HTTP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .iap(RegionBackendServiceIapArgs.builder()
 *                 .enabled(true)
 *                 .oauth2ClientId("abc")
 *                 .oauth2ClientSecret("xyz")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Cache
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceCdnPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultRegionHealthCheck = new RegionHealthCheck("defaultRegionHealthCheck", RegionHealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .region("us-central1")
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .name("region-service")
 *             .region("us-central1")
 *             .healthChecks(defaultRegionHealthCheck.id())
 *             .enableCdn(true)
 *             .cdnPolicy(RegionBackendServiceCdnPolicyArgs.builder()
 *                 .cacheMode("CACHE_ALL_STATIC")
 *                 .defaultTtl(3600)
 *                 .clientTtl(7200)
 *                 .maxTtl(10800)
 *                 .negativeCaching(true)
 *                 .signedUrlCacheMaxAgeSec(7200)
 *                 .build())
 *             .loadBalancingScheme("EXTERNAL")
 *             .protocol("HTTP")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ilb Round Robin
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .healthChecks(healthCheck.id())
 *             .protocol("HTTP")
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .localityLbPolicy("ROUND_ROBIN")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service External
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new RegionHealthCheck("healthCheck", RegionHealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .region("us-central1")
 *             .tcpHealthCheck(RegionHealthCheckTcpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .healthChecks(healthCheck.id())
 *             .protocol("TCP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service External Weighted
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new RegionHealthCheck("healthCheck", RegionHealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .region("us-central1")
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .healthChecks(healthCheck.id())
 *             .protocol("TCP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .localityLbPolicy("WEIGHTED_MAGLEV")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ilb Ring Hash
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceCircuitBreakersArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceConsistentHashArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceConsistentHashHttpCookieArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceConsistentHashHttpCookieTtlArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceOutlierDetectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .localityLbPolicy("RING_HASH")
 *             .sessionAffinity("HTTP_COOKIE")
 *             .protocol("HTTP")
 *             .circuitBreakers(RegionBackendServiceCircuitBreakersArgs.builder()
 *                 .maxConnections(10)
 *                 .build())
 *             .consistentHash(RegionBackendServiceConsistentHashArgs.builder()
 *                 .httpCookie(RegionBackendServiceConsistentHashHttpCookieArgs.builder()
 *                     .ttl(RegionBackendServiceConsistentHashHttpCookieTtlArgs.builder()
 *                         .seconds(11)
 *                         .nanos(1111)
 *                         .build())
 *                     .name("mycookie")
 *                     .build())
 *                 .build())
 *             .outlierDetection(RegionBackendServiceOutlierDetectionArgs.builder()
 *                 .consecutiveErrors(2)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ilb Stateful Session Affinity
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceStrongSessionAffinityCookieArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceStrongSessionAffinityCookieTtlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .localityLbPolicy("RING_HASH")
 *             .sessionAffinity("STRONG_COOKIE_AFFINITY")
 *             .protocol("HTTP")
 *             .strongSessionAffinityCookie(RegionBackendServiceStrongSessionAffinityCookieArgs.builder()
 *                 .ttl(RegionBackendServiceStrongSessionAffinityCookieTtlArgs.builder()
 *                     .seconds(11)
 *                     .nanos(1111)
 *                     .build())
 *                 .name("mycookie")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Balancing Mode
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetImageArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.RegionInstanceGroupManager;
 * import com.pulumi.gcp.compute.RegionInstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var debianImage = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .family("debian-11")
 *             .project("debian-cloud")
 *             .build());
 * 
 *         var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
 *             .name("rbs-net")
 *             .autoCreateSubnetworks(false)
 *             .routingMode("REGIONAL")
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork("defaultSubnetwork", SubnetworkArgs.builder()
 *             .name("rbs-net-default")
 *             .ipCidrRange("10.1.2.0/24")
 *             .region("us-central1")
 *             .network(defaultNetwork.id())
 *             .build());
 * 
 *         var instanceTemplate = new InstanceTemplate("instanceTemplate", InstanceTemplateArgs.builder()
 *             .name("template-region-service")
 *             .machineType("e2-medium")
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .network(defaultNetwork.id())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .build())
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(debianImage.selfLink())
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .tags(            
 *                 "allow-ssh",
 *                 "load-balanced-backend")
 *             .build());
 * 
 *         var rigm = new RegionInstanceGroupManager("rigm", RegionInstanceGroupManagerArgs.builder()
 *             .region("us-central1")
 *             .name("rbs-rigm")
 *             .versions(RegionInstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(instanceTemplate.id())
 *                 .name("primary")
 *                 .build())
 *             .baseInstanceName("internal-glb")
 *             .targetSize(1)
 *             .build());
 * 
 *         var defaultRegionHealthCheck = new RegionHealthCheck("defaultRegionHealthCheck", RegionHealthCheckArgs.builder()
 *             .region("us-central1")
 *             .name("rbs-health-check")
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .portSpecification("USE_SERVING_PORT")
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .backends(RegionBackendServiceBackendArgs.builder()
 *                 .group(rigm.instanceGroup())
 *                 .balancingMode("UTILIZATION")
 *                 .capacityScaler(1.0)
 *                 .build())
 *             .region("us-central1")
 *             .name("region-service")
 *             .protocol("H2C")
 *             .timeoutSec(10)
 *             .healthChecks(defaultRegionHealthCheck.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Connection Tracking
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceConnectionTrackingPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new RegionHealthCheck("healthCheck", RegionHealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .region("us-central1")
 *             .tcpHealthCheck(RegionHealthCheckTcpHealthCheckArgs.builder()
 *                 .port(22)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .name("region-service")
 *             .region("us-central1")
 *             .healthChecks(healthCheck.id())
 *             .connectionDrainingTimeoutSec(10)
 *             .sessionAffinity("CLIENT_IP")
 *             .protocol("TCP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .connectionTrackingPolicy(RegionBackendServiceConnectionTrackingPolicyArgs.builder()
 *                 .trackingMode("PER_SESSION")
 *                 .connectionPersistenceOnUnhealthyBackends("NEVER_PERSIST")
 *                 .idleTimeoutSec(60)
 *                 .enableStrongAffinity(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ip Address Selection Policy
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var healthCheck = new RegionHealthCheck("healthCheck", RegionHealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .region("us-central1")
 *             .tcpHealthCheck(RegionHealthCheckTcpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .name("region-service")
 *             .region("us-central1")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .protocol("HTTP")
 *             .ipAddressSelectionPolicy("IPV6_ONLY")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ilb Custom Metrics
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.NetworkEndpointGroup;
 * import com.pulumi.gcp.compute.NetworkEndpointGroupArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceCustomMetricArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("network")
 *             .build());
 * 
 *         // Zonal NEG with GCE_VM_IP_PORT
 *         var defaultNetworkEndpointGroup = new NetworkEndpointGroup("defaultNetworkEndpointGroup", NetworkEndpointGroupArgs.builder()
 *             .name("network-endpoint")
 *             .network(default_.id())
 *             .defaultPort(90)
 *             .zone("us-central1-a")
 *             .networkEndpointType("GCE_VM_IP_PORT")
 *             .build());
 * 
 *         var healthCheck = new HealthCheck("healthCheck", HealthCheckArgs.builder()
 *             .name("rbs-health-check")
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .healthChecks(healthCheck.id())
 *             .loadBalancingScheme("INTERNAL_MANAGED")
 *             .localityLbPolicy("WEIGHTED_ROUND_ROBIN")
 *             .customMetrics(RegionBackendServiceCustomMetricArgs.builder()
 *                 .name("orca.application_utilization")
 *                 .dryRun(false)
 *                 .build())
 *             .backends(RegionBackendServiceBackendArgs.builder()
 *                 .group(defaultNetworkEndpointGroup.id())
 *                 .balancingMode("CUSTOM_METRICS")
 *                 .customMetrics(                
 *                     RegionBackendServiceBackendCustomMetricArgs.builder()
 *                         .name("orca.cpu_utilization")
 *                         .maxUtilization(0.9)
 *                         .dryRun(true)
 *                         .build(),
 *                     RegionBackendServiceBackendCustomMetricArgs.builder()
 *                         .name("orca.named_metrics.foo")
 *                         .dryRun(false)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Dynamic Forwarding
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceDynamicForwardingArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceDynamicForwardingIpPortSelectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionBackendService("default", RegionBackendServiceArgs.builder()
 *             .name("region-service")
 *             .region("us-central1")
 *             .loadBalancingScheme("EXTERNAL_MANAGED")
 *             .dynamicForwarding(RegionBackendServiceDynamicForwardingArgs.builder()
 *                 .ipPortSelection(RegionBackendServiceDynamicForwardingIpPortSelectionArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ha Policy
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceHaPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("rbs-net")
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .protocol("UDP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .network(default_.id())
 *             .haPolicy(RegionBackendServiceHaPolicyArgs.builder()
 *                 .fastIpMove("GARP_RA")
 *                 .build())
 *             .connectionDrainingTimeoutSec(0)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Backend Service Ha Policy Manual Leader
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetImageArgs;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.NetworkEndpointGroup;
 * import com.pulumi.gcp.compute.NetworkEndpointGroupArgs;
 * import com.pulumi.gcp.compute.NetworkEndpoint;
 * import com.pulumi.gcp.compute.NetworkEndpointArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceHaPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceHaPolicyLeaderArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceHaPolicyLeaderNetworkEndpointArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("rbs-net")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork("defaultSubnetwork", SubnetworkArgs.builder()
 *             .name("rbs-subnet")
 *             .ipCidrRange("10.1.2.0/24")
 *             .region("us-central1")
 *             .network(default_.id())
 *             .build());
 * 
 *         final var myImage = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .family("debian-12")
 *             .project("debian-cloud")
 *             .build());
 * 
 *         var endpoint_instance = new Instance("endpoint-instance", InstanceArgs.builder()
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .accessConfigs(InstanceNetworkInterfaceAccessConfigArgs.builder()
 *                     .build())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .build())
 *             .name("rbs-instance")
 *             .machineType("e2-medium")
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(myImage.selfLink())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var neg = new NetworkEndpointGroup("neg", NetworkEndpointGroupArgs.builder()
 *             .name("rbs-neg")
 *             .networkEndpointType("GCE_VM_IP")
 *             .network(default_.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .zone("us-central1-a")
 *             .build());
 * 
 *         var endpoint = new NetworkEndpoint("endpoint", NetworkEndpointArgs.builder()
 *             .networkEndpointGroup(neg.name())
 *             .instance(endpoint_instance.name())
 *             .ipAddress(endpoint_instance.networkInterfaces().applyValue(_networkInterfaces -> _networkInterfaces[0].networkIp()))
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService("defaultRegionBackendService", RegionBackendServiceArgs.builder()
 *             .region("us-central1")
 *             .name("region-service")
 *             .protocol("UDP")
 *             .loadBalancingScheme("EXTERNAL")
 *             .network(default_.id())
 *             .backends(RegionBackendServiceBackendArgs.builder()
 *                 .group(neg.selfLink())
 *                 .balancingMode("CONNECTION")
 *                 .build())
 *             .haPolicy(RegionBackendServiceHaPolicyArgs.builder()
 *                 .fastIpMove("GARP_RA")
 *                 .leader(RegionBackendServiceHaPolicyLeaderArgs.builder()
 *                     .backendGroup(neg.selfLink())
 *                     .networkEndpoint(RegionBackendServiceHaPolicyLeaderNetworkEndpointArgs.builder()
 *                         .instance(endpoint_instance.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .connectionDrainingTimeoutSec(0)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * RegionBackendService can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/regions/{{region}}/backendServices/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, RegionBackendService can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionBackendService:RegionBackendService default projects/{{project}}/regions/{{region}}/backendServices/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionBackendService:RegionBackendService default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/regionBackendService:RegionBackendService")
public class RegionBackendService extends com.pulumi.resources.CustomResource {
    /**
     * Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    @Export(name="affinityCookieTtlSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> affinityCookieTtlSec;

    /**
     * @return Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    public Output<Optional<Integer>> affinityCookieTtlSec() {
        return Codegen.optional(this.affinityCookieTtlSec);
    }
    /**
     * The set of backends that serve this RegionBackendService.
     * Structure is documented below.
     * 
     */
    @Export(name="backends", refs={List.class,RegionBackendServiceBackend.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RegionBackendServiceBackend>> backends;

    /**
     * @return The set of backends that serve this RegionBackendService.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<RegionBackendServiceBackend>>> backends() {
        return Codegen.optional(this.backends);
    }
    /**
     * Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    @Export(name="cdnPolicy", refs={RegionBackendServiceCdnPolicy.class}, tree="[0]")
    private Output<RegionBackendServiceCdnPolicy> cdnPolicy;

    /**
     * @return Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    public Output<RegionBackendServiceCdnPolicy> cdnPolicy() {
        return this.cdnPolicy;
    }
    /**
     * Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
     * and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    @Export(name="circuitBreakers", refs={RegionBackendServiceCircuitBreakers.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceCircuitBreakers> circuitBreakers;

    /**
     * @return Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
     * and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceCircuitBreakers>> circuitBreakers() {
        return Codegen.optional(this.circuitBreakers);
    }
    /**
     * Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    @Export(name="connectionDrainingTimeoutSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> connectionDrainingTimeoutSec;

    /**
     * @return Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    public Output<Optional<Integer>> connectionDrainingTimeoutSec() {
        return Codegen.optional(this.connectionDrainingTimeoutSec);
    }
    /**
     * Connection Tracking configuration for this BackendService.
     * This is available only for Layer 4 Internal Load Balancing and
     * Network Load Balancing.
     * Structure is documented below.
     * 
     */
    @Export(name="connectionTrackingPolicy", refs={RegionBackendServiceConnectionTrackingPolicy.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceConnectionTrackingPolicy> connectionTrackingPolicy;

    /**
     * @return Connection Tracking configuration for this BackendService.
     * This is available only for Layer 4 Internal Load Balancing and
     * Network Load Balancing.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceConnectionTrackingPolicy>> connectionTrackingPolicy() {
        return Codegen.optional(this.connectionTrackingPolicy);
    }
    /**
     * Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing.
     * This field only applies when all of the following are true -
     * 
     */
    @Export(name="consistentHash", refs={RegionBackendServiceConsistentHash.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceConsistentHash> consistentHash;

    /**
     * @return Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing.
     * This field only applies when all of the following are true -
     * 
     */
    public Output<Optional<RegionBackendServiceConsistentHash>> consistentHash() {
        return Codegen.optional(this.consistentHash);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
     * Structure is documented below.
     * 
     */
    @Export(name="customMetrics", refs={List.class,RegionBackendServiceCustomMetric.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RegionBackendServiceCustomMetric>> customMetrics;

    /**
     * @return List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<RegionBackendServiceCustomMetric>>> customMetrics() {
        return Codegen.optional(this.customMetrics);
    }
    /**
     * An optional description of this resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
     * feature which together with Service Extension allows customized and complex routing logic.
     * Structure is documented below.
     * 
     */
    @Export(name="dynamicForwarding", refs={RegionBackendServiceDynamicForwarding.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceDynamicForwarding> dynamicForwarding;

    /**
     * @return Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
     * feature which together with Service Extension allows customized and complex routing logic.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceDynamicForwarding>> dynamicForwarding() {
        return Codegen.optional(this.dynamicForwarding);
    }
    /**
     * If true, enable Cloud CDN for this RegionBackendService.
     * 
     */
    @Export(name="enableCdn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableCdn;

    /**
     * @return If true, enable Cloud CDN for this RegionBackendService.
     * 
     */
    public Output<Optional<Boolean>> enableCdn() {
        return Codegen.optional(this.enableCdn);
    }
    /**
     * Policy for failovers.
     * Structure is documented below.
     * 
     */
    @Export(name="failoverPolicy", refs={RegionBackendServiceFailoverPolicy.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceFailoverPolicy> failoverPolicy;

    /**
     * @return Policy for failovers.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceFailoverPolicy>> failoverPolicy() {
        return Codegen.optional(this.failoverPolicy);
    }
    /**
     * Fingerprint of this resource. A hash of the contents stored in this
     * object. This field is used in optimistic locking.
     * 
     */
    @Export(name="fingerprint", refs={String.class}, tree="[0]")
    private Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this
     * object. This field is used in optimistic locking.
     * 
     */
    public Output<String> fingerprint() {
        return this.fingerprint;
    }
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    @Export(name="generatedId", refs={Integer.class}, tree="[0]")
    private Output<Integer> generatedId;

    /**
     * @return The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    public Output<Integer> generatedId() {
        return this.generatedId;
    }
    /**
     * Configures self-managed High Availability (HA) for External and Internal Protocol Forwarding.
     * The backends of this regional backend service must only specify zonal network endpoint groups
     * (NEGs) of type GCE_VM_IP. Note that haPolicy is not for load balancing, and therefore cannot
     * be specified with sessionAffinity, connectionTrackingPolicy, and failoverPolicy. haPolicy
     * requires customers to be responsible for tracking backend endpoint health and electing a
     * leader among the healthy endpoints. Therefore, haPolicy cannot be specified with healthChecks.
     * haPolicy can only be specified for External Passthrough Network Load Balancers and Internal
     * Passthrough Network Load Balancers.
     * Structure is documented below.
     * 
     */
    @Export(name="haPolicy", refs={RegionBackendServiceHaPolicy.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceHaPolicy> haPolicy;

    /**
     * @return Configures self-managed High Availability (HA) for External and Internal Protocol Forwarding.
     * The backends of this regional backend service must only specify zonal network endpoint groups
     * (NEGs) of type GCE_VM_IP. Note that haPolicy is not for load balancing, and therefore cannot
     * be specified with sessionAffinity, connectionTrackingPolicy, and failoverPolicy. haPolicy
     * requires customers to be responsible for tracking backend endpoint health and electing a
     * leader among the healthy endpoints. Therefore, haPolicy cannot be specified with healthChecks.
     * haPolicy can only be specified for External Passthrough Network Load Balancers and Internal
     * Passthrough Network Load Balancers.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceHaPolicy>> haPolicy() {
        return Codegen.optional(this.haPolicy);
    }
    /**
     * The set of URLs to HealthCheck resources for health checking
     * this RegionBackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * 
     */
    @Export(name="healthChecks", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> healthChecks;

    /**
     * @return The set of URLs to HealthCheck resources for health checking
     * this RegionBackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * 
     */
    public Output<Optional<String>> healthChecks() {
        return Codegen.optional(this.healthChecks);
    }
    /**
     * Settings for enabling Cloud Identity Aware Proxy.
     * If OAuth client is not set, Google-managed OAuth client is used.
     * Structure is documented below.
     * 
     */
    @Export(name="iap", refs={RegionBackendServiceIap.class}, tree="[0]")
    private Output<RegionBackendServiceIap> iap;

    /**
     * @return Settings for enabling Cloud Identity Aware Proxy.
     * If OAuth client is not set, Google-managed OAuth client is used.
     * Structure is documented below.
     * 
     */
    public Output<RegionBackendServiceIap> iap() {
        return this.iap;
    }
    /**
     * Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
     * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
     * 
     */
    @Export(name="ipAddressSelectionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipAddressSelectionPolicy;

    /**
     * @return Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
     * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
     * 
     */
    public Output<Optional<String>> ipAddressSelectionPolicy() {
        return Codegen.optional(this.ipAddressSelectionPolicy);
    }
    /**
     * Indicates what kind of load balancing this regional backend service
     * will be used for. A backend service created for one type of load
     * balancing cannot be used with the other(s). For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `INTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
     * 
     */
    @Export(name="loadBalancingScheme", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loadBalancingScheme;

    /**
     * @return Indicates what kind of load balancing this regional backend service
     * will be used for. A backend service created for one type of load
     * balancing cannot be used with the other(s). For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `INTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
     * 
     */
    public Output<Optional<String>> loadBalancingScheme() {
        return Codegen.optional(this.loadBalancingScheme);
    }
    /**
     * The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
     *   reported weights. Only applicable to loadBalancingScheme
     *   EXTERNAL. If set, the Backend Service must
     *   configure a non legacy HTTP-based Health Check, and
     *   health check replies are expected to contain
     *   non-standard HTTP response header field
     *   X-Load-Balancing-Endpoint-Weight to specify the
     *   per-instance weights. If set, Load Balancing is weight
     *   based on the per-instance weights reported in the last
     *   processed health check replies, as long as every
     *   instance either reported a valid weight or had
     *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
     *   equal-weight.
     * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
     *   from Backend reported Custom Metrics. If set, the Backend Service
     *   responses are expected to contain non-standard HTTP response header field
     *   X-Endpoint-Load-Metrics. The reported metrics
     *   to use for computing the weights are specified via the
     *   backends[].customMetrics fields.
     *   locality_lb_policy is applicable to either:
     * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
     *   and loadBalancingScheme set to INTERNAL_MANAGED.
     * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
     *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
     *   Network Load Balancing. The default is MAGLEV.
     *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
     *   or RING_HASH, session affinity settings will not take effect.
     *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
     *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
     *   field set to true.
     *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
     * 
     */
    @Export(name="localityLbPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> localityLbPolicy;

    /**
     * @return The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
     *   reported weights. Only applicable to loadBalancingScheme
     *   EXTERNAL. If set, the Backend Service must
     *   configure a non legacy HTTP-based Health Check, and
     *   health check replies are expected to contain
     *   non-standard HTTP response header field
     *   X-Load-Balancing-Endpoint-Weight to specify the
     *   per-instance weights. If set, Load Balancing is weight
     *   based on the per-instance weights reported in the last
     *   processed health check replies, as long as every
     *   instance either reported a valid weight or had
     *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
     *   equal-weight.
     * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
     *   from Backend reported Custom Metrics. If set, the Backend Service
     *   responses are expected to contain non-standard HTTP response header field
     *   X-Endpoint-Load-Metrics. The reported metrics
     *   to use for computing the weights are specified via the
     *   backends[].customMetrics fields.
     *   locality_lb_policy is applicable to either:
     * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
     *   and loadBalancingScheme set to INTERNAL_MANAGED.
     * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
     *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
     *   Network Load Balancing. The default is MAGLEV.
     *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
     *   or RING_HASH, session affinity settings will not take effect.
     *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
     *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
     *   field set to true.
     *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
     * 
     */
    public Output<Optional<String>> localityLbPolicy() {
        return Codegen.optional(this.localityLbPolicy);
    }
    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", refs={RegionBackendServiceLogConfig.class}, tree="[0]")
    private Output<RegionBackendServiceLogConfig> logConfig;

    /**
     * @return This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    public Output<RegionBackendServiceLogConfig> logConfig() {
        return this.logConfig;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The URL of the network to which this backend service belongs.
     * This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    @Export(name="network", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> network;

    /**
     * @return The URL of the network to which this backend service belongs.
     * This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    public Output<Optional<String>> network() {
        return Codegen.optional(this.network);
    }
    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the `load_balancing_scheme` is set
     * to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    @Export(name="outlierDetection", refs={RegionBackendServiceOutlierDetection.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceOutlierDetection> outlierDetection;

    /**
     * @return Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the `load_balancing_scheme` is set
     * to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceOutlierDetection>> outlierDetection() {
        return Codegen.optional(this.outlierDetection);
    }
    /**
     * Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    @Export(name="params", refs={RegionBackendServiceParams.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceParams> params;

    /**
     * @return Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceParams>> params() {
        return Codegen.optional(this.params);
    }
    /**
     * A named port on a backend instance group representing the port for
     * communication to the backend VMs in that group. Required when the
     * loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
     * and the backends are instance groups. The named port must be defined on each
     * backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
     * default of &#34;http&#34; if not given.
     * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
     * 
     */
    @Export(name="portName", refs={String.class}, tree="[0]")
    private Output<String> portName;

    /**
     * @return A named port on a backend instance group representing the port for
     * communication to the backend VMs in that group. Required when the
     * loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
     * and the backends are instance groups. The named port must be defined on each
     * backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
     * default of &#34;http&#34; if not given.
     * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
     * 
     */
    public Output<String> portName() {
        return this.portName;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
     * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
     * for more information.
     * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
     * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
     * for more information.
     * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * The Region in which the created backend service should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The Region in which the created backend service should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The security policy associated with this backend service.
     * 
     */
    @Export(name="securityPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> securityPolicy;

    /**
     * @return The security policy associated with this backend service.
     * 
     */
    public Output<Optional<String>> securityPolicy() {
        return Codegen.optional(this.securityPolicy);
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `CLIENT_IP_NO_DESTINATION`, `STRONG_COOKIE_AFFINITY`.
     * 
     */
    @Export(name="sessionAffinity", refs={String.class}, tree="[0]")
    private Output<String> sessionAffinity;

    /**
     * @return Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `CLIENT_IP_NO_DESTINATION`, `STRONG_COOKIE_AFFINITY`.
     * 
     */
    public Output<String> sessionAffinity() {
        return this.sessionAffinity;
    }
    /**
     * Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
     * Structure is documented below.
     * 
     */
    @Export(name="strongSessionAffinityCookie", refs={RegionBackendServiceStrongSessionAffinityCookie.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceStrongSessionAffinityCookie> strongSessionAffinityCookie;

    /**
     * @return Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceStrongSessionAffinityCookie>> strongSessionAffinityCookie() {
        return Codegen.optional(this.strongSessionAffinityCookie);
    }
    /**
     * Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing and Internal HTTP(S) load balancing.
     * Structure is documented below.
     * 
     */
    @Export(name="subsetting", refs={RegionBackendServiceSubsetting.class}, tree="[0]")
    private Output</* @Nullable */ RegionBackendServiceSubsetting> subsetting;

    /**
     * @return Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing and Internal HTTP(S) load balancing.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionBackendServiceSubsetting>> subsetting() {
        return Codegen.optional(this.subsetting);
    }
    /**
     * The backend service timeout has a different meaning depending on the type of load balancer.
     * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
     * The default is 30 seconds.
     * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
     * 
     */
    @Export(name="timeoutSec", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeoutSec;

    /**
     * @return The backend service timeout has a different meaning depending on the type of load balancer.
     * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
     * The default is 30 seconds.
     * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
     * 
     */
    public Output<Integer> timeoutSec() {
        return this.timeoutSec;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionBackendService(java.lang.String name) {
        this(name, RegionBackendServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionBackendService(java.lang.String name, @Nullable RegionBackendServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionBackendService(java.lang.String name, @Nullable RegionBackendServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionBackendService:RegionBackendService", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RegionBackendService(java.lang.String name, Output<java.lang.String> id, @Nullable RegionBackendServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionBackendService:RegionBackendService", name, state, makeResourceOptions(options, id), false);
    }

    private static RegionBackendServiceArgs makeArgs(@Nullable RegionBackendServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RegionBackendServiceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionBackendService get(java.lang.String name, Output<java.lang.String> id, @Nullable RegionBackendServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegionBackendService(name, id, state, options);
    }
}
