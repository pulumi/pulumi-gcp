// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetListingIamPolicyResult {
    private String dataExchangeId;
    /**
     * @return (Computed) The etag of the IAM policy.
     * 
     */
    private String etag;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String listingId;
    private String location;
    /**
     * @return (Required only by `gcp.bigqueryanalyticshub.ListingIamPolicy`) The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    private String policyData;
    private String project;

    private GetListingIamPolicyResult() {}
    public String dataExchangeId() {
        return this.dataExchangeId;
    }
    /**
     * @return (Computed) The etag of the IAM policy.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String listingId() {
        return this.listingId;
    }
    public String location() {
        return this.location;
    }
    /**
     * @return (Required only by `gcp.bigqueryanalyticshub.ListingIamPolicy`) The policy data generated by
     * a `gcp.organizations.getIAMPolicy` data source.
     * 
     */
    public String policyData() {
        return this.policyData;
    }
    public String project() {
        return this.project;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListingIamPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataExchangeId;
        private String etag;
        private String id;
        private String listingId;
        private String location;
        private String policyData;
        private String project;
        public Builder() {}
        public Builder(GetListingIamPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataExchangeId = defaults.dataExchangeId;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.listingId = defaults.listingId;
    	      this.location = defaults.location;
    	      this.policyData = defaults.policyData;
    	      this.project = defaults.project;
        }

        @CustomType.Setter
        public Builder dataExchangeId(String dataExchangeId) {
            if (dataExchangeId == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "dataExchangeId");
            }
            this.dataExchangeId = dataExchangeId;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listingId(String listingId) {
            if (listingId == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "listingId");
            }
            this.listingId = listingId;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder policyData(String policyData) {
            if (policyData == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "policyData");
            }
            this.policyData = policyData;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetListingIamPolicyResult", "project");
            }
            this.project = project;
            return this;
        }
        public GetListingIamPolicyResult build() {
            final var _resultValue = new GetListingIamPolicyResult();
            _resultValue.dataExchangeId = dataExchangeId;
            _resultValue.etag = etag;
            _resultValue.id = id;
            _resultValue.listingId = listingId;
            _resultValue.location = location;
            _resultValue.policyData = policyData;
            _resultValue.project = project;
            return _resultValue;
        }
    }
}
