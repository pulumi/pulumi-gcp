// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firestore.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseCmekConfig {
    /**
     * @return (Output)
     * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
     * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
     * multiple in-use key versions.
     * The expected format is
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
     * 
     */
    private @Nullable List<String> activeKeyVersions;
    /**
     * @return The resource ID of a Cloud KMS key. If set, the database created will
     * be a Customer-managed Encryption Key (CMEK) database encrypted with
     * this key. This feature is allowlist only in initial launch.
     * Only keys in the same location as this database are allowed to be used
     * for encryption. For Firestore&#39;s nam5 multi-region, this corresponds to Cloud KMS
     * multi-region us. For Firestore&#39;s eur3 multi-region, this corresponds to
     * Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
     * This value should be the KMS key resource ID in the format of
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
     * How to retrive this resource ID is listed at
     * https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
     * 
     */
    private String kmsKeyName;

    private DatabaseCmekConfig() {}
    /**
     * @return (Output)
     * Currently in-use KMS key versions (https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
     * During key rotation (https://cloud.google.com/kms/docs/key-rotation), there can be
     * multiple in-use key versions.
     * The expected format is
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
     * 
     */
    public List<String> activeKeyVersions() {
        return this.activeKeyVersions == null ? List.of() : this.activeKeyVersions;
    }
    /**
     * @return The resource ID of a Cloud KMS key. If set, the database created will
     * be a Customer-managed Encryption Key (CMEK) database encrypted with
     * this key. This feature is allowlist only in initial launch.
     * Only keys in the same location as this database are allowed to be used
     * for encryption. For Firestore&#39;s nam5 multi-region, this corresponds to Cloud KMS
     * multi-region us. For Firestore&#39;s eur3 multi-region, this corresponds to
     * Cloud KMS multi-region europe. See https://cloud.google.com/kms/docs/locations.
     * This value should be the KMS key resource ID in the format of
     * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
     * How to retrive this resource ID is listed at
     * https://cloud.google.com/kms/docs/getting-resource-ids#getting_the_id_for_a_key_and_version.
     * 
     */
    public String kmsKeyName() {
        return this.kmsKeyName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseCmekConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> activeKeyVersions;
        private String kmsKeyName;
        public Builder() {}
        public Builder(DatabaseCmekConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeKeyVersions = defaults.activeKeyVersions;
    	      this.kmsKeyName = defaults.kmsKeyName;
        }

        @CustomType.Setter
        public Builder activeKeyVersions(@Nullable List<String> activeKeyVersions) {

            this.activeKeyVersions = activeKeyVersions;
            return this;
        }
        public Builder activeKeyVersions(String... activeKeyVersions) {
            return activeKeyVersions(List.of(activeKeyVersions));
        }
        @CustomType.Setter
        public Builder kmsKeyName(String kmsKeyName) {
            if (kmsKeyName == null) {
              throw new MissingRequiredPropertyException("DatabaseCmekConfig", "kmsKeyName");
            }
            this.kmsKeyName = kmsKeyName;
            return this;
        }
        public DatabaseCmekConfig build() {
            final var _resultValue = new DatabaseCmekConfig();
            _resultValue.activeKeyVersions = activeKeyVersions;
            _resultValue.kmsKeyName = kmsKeyName;
            return _resultValue;
        }
    }
}
