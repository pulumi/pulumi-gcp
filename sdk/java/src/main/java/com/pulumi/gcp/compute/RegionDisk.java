// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.RegionDiskArgs;
import com.pulumi.gcp.compute.inputs.RegionDiskState;
import com.pulumi.gcp.compute.outputs.RegionDiskAsyncPrimaryDisk;
import com.pulumi.gcp.compute.outputs.RegionDiskDiskEncryptionKey;
import com.pulumi.gcp.compute.outputs.RegionDiskGuestOsFeature;
import com.pulumi.gcp.compute.outputs.RegionDiskSourceSnapshotEncryptionKey;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Persistent disks are durable storage devices that function similarly to
 * the physical disks in a desktop or a server. Compute Engine manages the
 * hardware behind these devices to ensure data redundancy and optimize
 * performance for you. Persistent disks are available as either standard
 * hard disk drives (HDD) or solid-state drives (SSD).
 * 
 * Persistent disks are located independently from your virtual machine
 * instances, so you can detach or move persistent disks to keep your data
 * even after you delete your instances. Persistent disk performance scales
 * automatically with size, so you can resize your existing persistent disks
 * or add more persistent disks to an instance to meet your performance and
 * storage space requirements.
 * 
 * Add a persistent disk to your instance when you need reliable and
 * affordable storage with consistent performance characteristics.
 * 
 * To get more information about RegionDisk, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/regionDisks)
 * * How-to Guides
 *     * [Adding or Resizing Regional Persistent Disks](https://cloud.google.com/compute/docs/disks/regional-persistent-disk)
 * 
 * &gt; **Warning:** All arguments including the following potentially sensitive
 * values will be stored in the raw state as plain text: `disk_encryption_key.raw_key`, `disk_encryption_key.rsa_encrypted_key`.
 * 
 * ## Example Usage
 * 
 * ### Region Disk Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Disk;
 * import com.pulumi.gcp.compute.DiskArgs;
 * import com.pulumi.gcp.compute.Snapshot;
 * import com.pulumi.gcp.compute.SnapshotArgs;
 * import com.pulumi.gcp.compute.RegionDisk;
 * import com.pulumi.gcp.compute.RegionDiskArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var disk = new Disk("disk", DiskArgs.builder()
 *             .name("my-disk")
 *             .image("debian-cloud/debian-11")
 *             .size(50)
 *             .type("pd-ssd")
 *             .zone("us-central1-a")
 *             .build());
 * 
 *         var snapdisk = new Snapshot("snapdisk", SnapshotArgs.builder()
 *             .name("my-snapshot")
 *             .sourceDisk(disk.name())
 *             .zone("us-central1-a")
 *             .build());
 * 
 *         var regiondisk = new RegionDisk("regiondisk", RegionDiskArgs.builder()
 *             .name("my-region-disk")
 *             .snapshot(snapdisk.id())
 *             .type("pd-ssd")
 *             .region("us-central1")
 *             .physicalBlockSizeBytes(4096)
 *             .replicaZones(            
 *                 "us-central1-a",
 *                 "us-central1-f")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Disk Async
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionDisk;
 * import com.pulumi.gcp.compute.RegionDiskArgs;
 * import com.pulumi.gcp.compute.inputs.RegionDiskAsyncPrimaryDiskArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new RegionDisk("primary", RegionDiskArgs.builder()
 *             .name("primary-region-disk")
 *             .type("pd-ssd")
 *             .region("us-central1")
 *             .physicalBlockSizeBytes(4096)
 *             .replicaZones(            
 *                 "us-central1-a",
 *                 "us-central1-f")
 *             .build());
 * 
 *         var secondary = new RegionDisk("secondary", RegionDiskArgs.builder()
 *             .name("secondary-region-disk")
 *             .type("pd-ssd")
 *             .region("us-east1")
 *             .physicalBlockSizeBytes(4096)
 *             .asyncPrimaryDisk(RegionDiskAsyncPrimaryDiskArgs.builder()
 *                 .disk(primary.id())
 *                 .build())
 *             .replicaZones(            
 *                 "us-east1-b",
 *                 "us-east1-c")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Disk Features
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionDisk;
 * import com.pulumi.gcp.compute.RegionDiskArgs;
 * import com.pulumi.gcp.compute.inputs.RegionDiskGuestOsFeatureArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var regiondisk = new RegionDisk("regiondisk", RegionDiskArgs.builder()
 *             .name("my-region-features-disk")
 *             .type("pd-ssd")
 *             .region("us-central1")
 *             .physicalBlockSizeBytes(4096)
 *             .guestOsFeatures(            
 *                 RegionDiskGuestOsFeatureArgs.builder()
 *                     .type("SECURE_BOOT")
 *                     .build(),
 *                 RegionDiskGuestOsFeatureArgs.builder()
 *                     .type("MULTI_IP_SUBNET")
 *                     .build(),
 *                 RegionDiskGuestOsFeatureArgs.builder()
 *                     .type("WINDOWS")
 *                     .build())
 *             .licenses("https://www.googleapis.com/compute/v1/projects/windows-cloud/global/licenses/windows-server-core")
 *             .replicaZones(            
 *                 "us-central1-a",
 *                 "us-central1-f")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Disk Hyperdisk Balanced Ha Write Many
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionDisk;
 * import com.pulumi.gcp.compute.RegionDiskArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new RegionDisk("primary", RegionDiskArgs.builder()
 *             .name("my-region-hyperdisk")
 *             .type("hyperdisk-balanced-high-availability")
 *             .region("us-central1")
 *             .replicaZones(            
 *                 "us-central1-a",
 *                 "us-central1-f")
 *             .accessMode("READ_WRITE_MANY")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * RegionDisk can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/regions/{{region}}/disks/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, RegionDisk can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionDisk:RegionDisk default projects/{{project}}/regions/{{region}}/disks/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionDisk:RegionDisk default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionDisk:RegionDisk default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionDisk:RegionDisk default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/regionDisk:RegionDisk")
public class RegionDisk extends com.pulumi.resources.CustomResource {
    /**
     * The access mode of the disk.
     * For example:
     * * READ_WRITE_SINGLE: The default AccessMode, means the disk can be attached to single instance in RW mode.
     * * READ_WRITE_MANY: The AccessMode means the disk can be attached to multiple instances in RW mode.
     * * READ_ONLY_SINGLE: The AccessMode means the disk can be attached to multiple instances in RO mode.
     *   The AccessMode is only valid for Hyperdisk disk types.
     * 
     */
    @Export(name="accessMode", refs={String.class}, tree="[0]")
    private Output<String> accessMode;

    /**
     * @return The access mode of the disk.
     * For example:
     * * READ_WRITE_SINGLE: The default AccessMode, means the disk can be attached to single instance in RW mode.
     * * READ_WRITE_MANY: The AccessMode means the disk can be attached to multiple instances in RW mode.
     * * READ_ONLY_SINGLE: The AccessMode means the disk can be attached to multiple instances in RO mode.
     *   The AccessMode is only valid for Hyperdisk disk types.
     * 
     */
    public Output<String> accessMode() {
        return this.accessMode;
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="asyncPrimaryDisk", refs={RegionDiskAsyncPrimaryDisk.class}, tree="[0]")
    private Output</* @Nullable */ RegionDiskAsyncPrimaryDisk> asyncPrimaryDisk;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionDiskAsyncPrimaryDisk>> asyncPrimaryDisk() {
        return Codegen.optional(this.asyncPrimaryDisk);
    }
    /**
     * If set to true, a snapshot of the disk will be created before it is destroyed.
     * If your disk is encrypted with customer managed encryption keys these will be reused for the snapshot creation.
     * The name of the snapshot by default will be `{{disk-name}}-YYYYMMDD-HHmm`
     * 
     */
    @Export(name="createSnapshotBeforeDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> createSnapshotBeforeDestroy;

    /**
     * @return If set to true, a snapshot of the disk will be created before it is destroyed.
     * If your disk is encrypted with customer managed encryption keys these will be reused for the snapshot creation.
     * The name of the snapshot by default will be `{{disk-name}}-YYYYMMDD-HHmm`
     * 
     */
    public Output<Optional<Boolean>> createSnapshotBeforeDestroy() {
        return Codegen.optional(this.createSnapshotBeforeDestroy);
    }
    /**
     * This will set a custom name prefix for the snapshot that&#39;s created when the disk is deleted.
     * 
     */
    @Export(name="createSnapshotBeforeDestroyPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> createSnapshotBeforeDestroyPrefix;

    /**
     * @return This will set a custom name prefix for the snapshot that&#39;s created when the disk is deleted.
     * 
     */
    public Output<Optional<String>> createSnapshotBeforeDestroyPrefix() {
        return Codegen.optional(this.createSnapshotBeforeDestroyPrefix);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Encrypts the disk using a customer-supplied encryption key.
     * After you encrypt a disk with a customer-supplied key, you must
     * provide the same key if you use the disk later (e.g. to create a disk
     * snapshot or an image, or to attach the disk to a virtual machine).
     * Customer-supplied encryption keys do not protect access to metadata of
     * the disk.
     * If you do not provide an encryption key when creating the disk, then
     * the disk will be encrypted using an automatically generated key and
     * you do not need to provide a key to use the disk later.
     * Structure is documented below.
     * 
     */
    @Export(name="diskEncryptionKey", refs={RegionDiskDiskEncryptionKey.class}, tree="[0]")
    private Output</* @Nullable */ RegionDiskDiskEncryptionKey> diskEncryptionKey;

    /**
     * @return Encrypts the disk using a customer-supplied encryption key.
     * After you encrypt a disk with a customer-supplied key, you must
     * provide the same key if you use the disk later (e.g. to create a disk
     * snapshot or an image, or to attach the disk to a virtual machine).
     * Customer-supplied encryption keys do not protect access to metadata of
     * the disk.
     * If you do not provide an encryption key when creating the disk, then
     * the disk will be encrypted using an automatically generated key and
     * you do not need to provide a key to use the disk later.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionDiskDiskEncryptionKey>> diskEncryptionKey() {
        return Codegen.optional(this.diskEncryptionKey);
    }
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    @Export(name="diskId", refs={String.class}, tree="[0]")
    private Output<String> diskId;

    /**
     * @return The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * A list of features to enable on the guest operating system.
     * Applicable only for bootable disks.
     * Structure is documented below.
     * 
     */
    @Export(name="guestOsFeatures", refs={List.class,RegionDiskGuestOsFeature.class}, tree="[0,1]")
    private Output<List<RegionDiskGuestOsFeature>> guestOsFeatures;

    /**
     * @return A list of features to enable on the guest operating system.
     * Applicable only for bootable disks.
     * Structure is documented below.
     * 
     */
    public Output<List<RegionDiskGuestOsFeature>> guestOsFeatures() {
        return this.guestOsFeatures;
    }
    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     * 
     * &gt; **Warning:** `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     * @deprecated
     * `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     */
    @Deprecated /* `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment. */
    @Export(name="interface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interface_;

    /**
     * @return Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     * 
     * &gt; **Warning:** `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     */
    public Output<Optional<String>> interface_() {
        return Codegen.optional(this.interface_);
    }
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    @Export(name="labelFingerprint", refs={String.class}, tree="[0]")
    private Output<String> labelFingerprint;

    /**
     * @return The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    public Output<String> labelFingerprint() {
        return this.labelFingerprint;
    }
    /**
     * Labels to apply to this disk.  A list of key-&gt;value pairs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels to apply to this disk.  A list of key-&gt;value pairs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Last attach timestamp in RFC3339 text format.
     * 
     */
    @Export(name="lastAttachTimestamp", refs={String.class}, tree="[0]")
    private Output<String> lastAttachTimestamp;

    /**
     * @return Last attach timestamp in RFC3339 text format.
     * 
     */
    public Output<String> lastAttachTimestamp() {
        return this.lastAttachTimestamp;
    }
    /**
     * Last detach timestamp in RFC3339 text format.
     * 
     */
    @Export(name="lastDetachTimestamp", refs={String.class}, tree="[0]")
    private Output<String> lastDetachTimestamp;

    /**
     * @return Last detach timestamp in RFC3339 text format.
     * 
     */
    public Output<String> lastDetachTimestamp() {
        return this.lastDetachTimestamp;
    }
    /**
     * Any applicable license URI.
     * 
     */
    @Export(name="licenses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> licenses;

    /**
     * @return Any applicable license URI.
     * 
     */
    public Output<List<String>> licenses() {
        return this.licenses;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Physical block size of the persistent disk, in bytes. If not present
     * in a request, a default value is used. Currently supported sizes
     * are 4096 and 16384, other sizes may be added in the future.
     * If an unsupported value is requested, the error message will list
     * the supported values for the caller&#39;s project.
     * 
     */
    @Export(name="physicalBlockSizeBytes", refs={Integer.class}, tree="[0]")
    private Output<Integer> physicalBlockSizeBytes;

    /**
     * @return Physical block size of the persistent disk, in bytes. If not present
     * in a request, a default value is used. Currently supported sizes
     * are 4096 and 16384, other sizes may be added in the future.
     * If an unsupported value is requested, the error message will list
     * the supported values for the caller&#39;s project.
     * 
     */
    public Output<Integer> physicalBlockSizeBytes() {
        return this.physicalBlockSizeBytes;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * A reference to the region where the disk resides.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return A reference to the region where the disk resides.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * URLs of the zones where the disk should be replicated to.
     * 
     */
    @Export(name="replicaZones", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> replicaZones;

    /**
     * @return URLs of the zones where the disk should be replicated to.
     * 
     */
    public Output<List<String>> replicaZones() {
        return this.replicaZones;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * Size of the persistent disk, specified in GB. You can specify this
     * field when creating a persistent disk using the sourceImage or
     * sourceSnapshot parameter, or specify it alone to create an empty
     * persistent disk.
     * If you specify this field along with sourceImage or sourceSnapshot,
     * the value of sizeGb must not be less than the size of the sourceImage
     * or the size of the snapshot.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return Size of the persistent disk, specified in GB. You can specify this
     * field when creating a persistent disk using the sourceImage or
     * sourceSnapshot parameter, or specify it alone to create an empty
     * persistent disk.
     * If you specify this field along with sourceImage or sourceSnapshot,
     * the value of sizeGb must not be less than the size of the sourceImage
     * or the size of the snapshot.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * The source snapshot used to create this disk. You can provide this as
     * a partial or full URL to the resource. For example, the following are
     * valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
     * * `projects/project/global/snapshots/snapshot`
     * * `global/snapshots/snapshot`
     * 
     */
    @Export(name="snapshot", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> snapshot;

    /**
     * @return The source snapshot used to create this disk. You can provide this as
     * a partial or full URL to the resource. For example, the following are
     * valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
     * * `projects/project/global/snapshots/snapshot`
     * * `global/snapshots/snapshot`
     * 
     */
    public Output<Optional<String>> snapshot() {
        return Codegen.optional(this.snapshot);
    }
    /**
     * The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
     * For example, the following are valid values:
     * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/disks/{disk}
     * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/disks/{disk}
     * * projects/{project}/zones/{zone}/disks/{disk}
     * * projects/{project}/regions/{region}/disks/{disk}
     * * zones/{zone}/disks/{disk}
     * * regions/{region}/disks/{disk}
     * 
     */
    @Export(name="sourceDisk", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceDisk;

    /**
     * @return The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
     * For example, the following are valid values:
     * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/disks/{disk}
     * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/disks/{disk}
     * * projects/{project}/zones/{zone}/disks/{disk}
     * * projects/{project}/regions/{region}/disks/{disk}
     * * zones/{zone}/disks/{disk}
     * * regions/{region}/disks/{disk}
     * 
     */
    public Output<Optional<String>> sourceDisk() {
        return Codegen.optional(this.sourceDisk);
    }
    /**
     * The ID value of the disk used to create this image. This value may
     * be used to determine whether the image was taken from the current
     * or a previous instance of a given disk name.
     * 
     */
    @Export(name="sourceDiskId", refs={String.class}, tree="[0]")
    private Output<String> sourceDiskId;

    /**
     * @return The ID value of the disk used to create this image. This value may
     * be used to determine whether the image was taken from the current
     * or a previous instance of a given disk name.
     * 
     */
    public Output<String> sourceDiskId() {
        return this.sourceDiskId;
    }
    /**
     * The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    @Export(name="sourceSnapshotEncryptionKey", refs={RegionDiskSourceSnapshotEncryptionKey.class}, tree="[0]")
    private Output</* @Nullable */ RegionDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKey;

    /**
     * @return The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionDiskSourceSnapshotEncryptionKey>> sourceSnapshotEncryptionKey() {
        return Codegen.optional(this.sourceSnapshotEncryptionKey);
    }
    /**
     * The unique ID of the snapshot used to create this disk. This value
     * identifies the exact snapshot that was used to create this persistent
     * disk. For example, if you created the persistent disk from a snapshot
     * that was later deleted and recreated under the same name, the source
     * snapshot ID would identify the exact version of the snapshot that was
     * used.
     * 
     */
    @Export(name="sourceSnapshotId", refs={String.class}, tree="[0]")
    private Output<String> sourceSnapshotId;

    /**
     * @return The unique ID of the snapshot used to create this disk. This value
     * identifies the exact snapshot that was used to create this persistent
     * disk. For example, if you created the persistent disk from a snapshot
     * that was later deleted and recreated under the same name, the source
     * snapshot ID would identify the exact version of the snapshot that was
     * used.
     * 
     */
    public Output<String> sourceSnapshotId() {
        return this.sourceSnapshotId;
    }
    /**
     * URL of the disk type resource describing which disk type to use to
     * create the disk. Provide this when creating the disk.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return URL of the disk type resource describing which disk type to use to
     * create the disk. Provide this when creating the disk.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    /**
     * Links to the users of the disk (attached instances) in form:
     * project/zones/zone/instances/instance
     * 
     */
    @Export(name="users", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> users;

    /**
     * @return Links to the users of the disk (attached instances) in form:
     * project/zones/zone/instances/instance
     * 
     */
    public Output<List<String>> users() {
        return this.users;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionDisk(java.lang.String name) {
        this(name, RegionDiskArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionDisk(java.lang.String name, RegionDiskArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionDisk(java.lang.String name, RegionDiskArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionDisk:RegionDisk", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RegionDisk(java.lang.String name, Output<java.lang.String> id, @Nullable RegionDiskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionDisk:RegionDisk", name, state, makeResourceOptions(options, id), false);
    }

    private static RegionDiskArgs makeArgs(RegionDiskArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RegionDiskArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionDisk get(java.lang.String name, Output<java.lang.String> id, @Nullable RegionDiskState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegionDisk(name, id, state, options);
    }
}
