// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vmwareengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vmwareengine.inputs.ClusterAutoscalingSettingsArgs;
import com.pulumi.gcp.vmwareengine.inputs.ClusterNodeTypeConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * Configuration of the autoscaling applied to this cluster
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingSettings")
    private @Nullable Output<ClusterAutoscalingSettingsArgs> autoscalingSettings;

    /**
     * @return Configuration of the autoscaling applied to this cluster
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClusterAutoscalingSettingsArgs>> autoscalingSettings() {
        return Optional.ofNullable(this.autoscalingSettings);
    }

    /**
     * True if the cluster is a management cluster; false otherwise.
     * There can only be one management cluster in a private cloud and it has to be the first one.
     * 
     */
    @Import(name="management")
    private @Nullable Output<Boolean> management;

    /**
     * @return True if the cluster is a management cluster; false otherwise.
     * There can only be one management cluster in a private cloud and it has to be the first one.
     * 
     */
    public Optional<Output<Boolean>> management() {
        return Optional.ofNullable(this.management);
    }

    /**
     * The ID of the Cluster.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ID of the Cluster.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The map of cluster node types in this cluster,
     * where the key is canonical identifier of the node type (corresponds to the NodeType).
     * Structure is documented below.
     * 
     */
    @Import(name="nodeTypeConfigs")
    private @Nullable Output<List<ClusterNodeTypeConfigArgs>> nodeTypeConfigs;

    /**
     * @return The map of cluster node types in this cluster,
     * where the key is canonical identifier of the node type (corresponds to the NodeType).
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ClusterNodeTypeConfigArgs>>> nodeTypeConfigs() {
        return Optional.ofNullable(this.nodeTypeConfigs);
    }

    /**
     * The resource name of the private cloud to create a new cluster in.
     * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
     * For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The resource name of the private cloud to create a new cluster in.
     * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
     * For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * State of the Cluster.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the Cluster.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * System-generated unique identifier for the resource.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System-generated unique identifier for the resource.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private ClusterState() {}

    private ClusterState(ClusterState $) {
        this.autoscalingSettings = $.autoscalingSettings;
        this.management = $.management;
        this.name = $.name;
        this.nodeTypeConfigs = $.nodeTypeConfigs;
        this.parent = $.parent;
        this.state = $.state;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterState $;

        public Builder() {
            $ = new ClusterState();
        }

        public Builder(ClusterState defaults) {
            $ = new ClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscalingSettings Configuration of the autoscaling applied to this cluster
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingSettings(@Nullable Output<ClusterAutoscalingSettingsArgs> autoscalingSettings) {
            $.autoscalingSettings = autoscalingSettings;
            return this;
        }

        /**
         * @param autoscalingSettings Configuration of the autoscaling applied to this cluster
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingSettings(ClusterAutoscalingSettingsArgs autoscalingSettings) {
            return autoscalingSettings(Output.of(autoscalingSettings));
        }

        /**
         * @param management True if the cluster is a management cluster; false otherwise.
         * There can only be one management cluster in a private cloud and it has to be the first one.
         * 
         * @return builder
         * 
         */
        public Builder management(@Nullable Output<Boolean> management) {
            $.management = management;
            return this;
        }

        /**
         * @param management True if the cluster is a management cluster; false otherwise.
         * There can only be one management cluster in a private cloud and it has to be the first one.
         * 
         * @return builder
         * 
         */
        public Builder management(Boolean management) {
            return management(Output.of(management));
        }

        /**
         * @param name The ID of the Cluster.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ID of the Cluster.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeTypeConfigs The map of cluster node types in this cluster,
         * where the key is canonical identifier of the node type (corresponds to the NodeType).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypeConfigs(@Nullable Output<List<ClusterNodeTypeConfigArgs>> nodeTypeConfigs) {
            $.nodeTypeConfigs = nodeTypeConfigs;
            return this;
        }

        /**
         * @param nodeTypeConfigs The map of cluster node types in this cluster,
         * where the key is canonical identifier of the node type (corresponds to the NodeType).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypeConfigs(List<ClusterNodeTypeConfigArgs> nodeTypeConfigs) {
            return nodeTypeConfigs(Output.of(nodeTypeConfigs));
        }

        /**
         * @param nodeTypeConfigs The map of cluster node types in this cluster,
         * where the key is canonical identifier of the node type (corresponds to the NodeType).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypeConfigs(ClusterNodeTypeConfigArgs... nodeTypeConfigs) {
            return nodeTypeConfigs(List.of(nodeTypeConfigs));
        }

        /**
         * @param parent The resource name of the private cloud to create a new cluster in.
         * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
         * For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The resource name of the private cloud to create a new cluster in.
         * Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names.
         * For example: projects/my-project/locations/us-west1-a/privateClouds/my-cloud
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param state State of the Cluster.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the Cluster.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid System-generated unique identifier for the resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System-generated unique identifier for the resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public ClusterState build() {
            return $;
        }
    }

}
