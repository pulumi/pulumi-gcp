// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.HealthCheckArgs;
import com.pulumi.gcp.compute.inputs.HealthCheckState;
import com.pulumi.gcp.compute.outputs.HealthCheckGrpcHealthCheck;
import com.pulumi.gcp.compute.outputs.HealthCheckGrpcTlsHealthCheck;
import com.pulumi.gcp.compute.outputs.HealthCheckHttp2HealthCheck;
import com.pulumi.gcp.compute.outputs.HealthCheckHttpHealthCheck;
import com.pulumi.gcp.compute.outputs.HealthCheckHttpsHealthCheck;
import com.pulumi.gcp.compute.outputs.HealthCheckLogConfig;
import com.pulumi.gcp.compute.outputs.HealthCheckSslHealthCheck;
import com.pulumi.gcp.compute.outputs.HealthCheckTcpHealthCheck;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Health Checks determine whether instances are responsive and able to do work.
 * They are an important part of a comprehensive load balancing configuration,
 * as they enable monitoring instances behind load balancers.
 * 
 * Health Checks poll instances at a specified interval. Instances that
 * do not respond successfully to some number of probes in a row are marked
 * as unhealthy. No new connections are sent to unhealthy instances,
 * though existing connections will continue. The health check will
 * continue to poll unhealthy instances. If an instance later responds
 * successfully to some number of consecutive probes, it is marked
 * healthy again and can receive new connections.
 * 
 * ~&gt;**NOTE**: Legacy HTTP(S) health checks must be used for target pool-based network
 * load balancers. See the [official guide](https://cloud.google.com/load-balancing/docs/health-check-concepts#selecting_hc)
 * for choosing a type of health check.
 * 
 * To get more information about HealthCheck, see:
 * 
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/load-balancing/docs/health-checks)
 * 
 * ## Example Usage
 * 
 * ### Health Check Tcp
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcp_health_check = new HealthCheck("tcp-health-check", HealthCheckArgs.builder()
 *             .name("tcp-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Tcp Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcp_health_check = new HealthCheck("tcp-health-check", HealthCheckArgs.builder()
 *             .name("tcp-health-check")
 *             .description("Health check via tcp")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .healthyThreshold(4)
 *             .unhealthyThreshold(5)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .portName("health-check-port")
 *                 .portSpecification("USE_NAMED_PORT")
 *                 .request("ARE YOU HEALTHY?")
 *                 .proxyHeader("NONE")
 *                 .response("I AM HEALTHY")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Ssl
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckSslHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ssl_health_check = new HealthCheck("ssl-health-check", HealthCheckArgs.builder()
 *             .name("ssl-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .sslHealthCheck(HealthCheckSslHealthCheckArgs.builder()
 *                 .port(443)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Ssl Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckSslHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ssl_health_check = new HealthCheck("ssl-health-check", HealthCheckArgs.builder()
 *             .name("ssl-health-check")
 *             .description("Health check via ssl")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .healthyThreshold(4)
 *             .unhealthyThreshold(5)
 *             .sslHealthCheck(HealthCheckSslHealthCheckArgs.builder()
 *                 .portName("health-check-port")
 *                 .portSpecification("USE_NAMED_PORT")
 *                 .request("ARE YOU HEALTHY?")
 *                 .proxyHeader("NONE")
 *                 .response("I AM HEALTHY")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Http
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http_health_check = new HealthCheck("http-health-check", HealthCheckArgs.builder()
 *             .name("http-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Http Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http_health_check = new HealthCheck("http-health-check", HealthCheckArgs.builder()
 *             .name("http-health-check")
 *             .description("Health check via http")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .healthyThreshold(4)
 *             .unhealthyThreshold(5)
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .portName("health-check-port")
 *                 .portSpecification("USE_NAMED_PORT")
 *                 .host("1.2.3.4")
 *                 .requestPath("/mypath")
 *                 .proxyHeader("NONE")
 *                 .response("I AM HEALTHY")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Https
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpsHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var https_health_check = new HealthCheck("https-health-check", HealthCheckArgs.builder()
 *             .name("https-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .httpsHealthCheck(HealthCheckHttpsHealthCheckArgs.builder()
 *                 .port(443)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Https Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpsHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var https_health_check = new HealthCheck("https-health-check", HealthCheckArgs.builder()
 *             .name("https-health-check")
 *             .description("Health check via https")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .healthyThreshold(4)
 *             .unhealthyThreshold(5)
 *             .httpsHealthCheck(HealthCheckHttpsHealthCheckArgs.builder()
 *                 .portName("health-check-port")
 *                 .portSpecification("USE_NAMED_PORT")
 *                 .host("1.2.3.4")
 *                 .requestPath("/mypath")
 *                 .proxyHeader("NONE")
 *                 .response("I AM HEALTHY")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Http2
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttp2HealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http2_health_check = new HealthCheck("http2-health-check", HealthCheckArgs.builder()
 *             .name("http2-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .http2HealthCheck(HealthCheckHttp2HealthCheckArgs.builder()
 *                 .port(443)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Http2 Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttp2HealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http2_health_check = new HealthCheck("http2-health-check", HealthCheckArgs.builder()
 *             .name("http2-health-check")
 *             .description("Health check via http2")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .healthyThreshold(4)
 *             .unhealthyThreshold(5)
 *             .http2HealthCheck(HealthCheckHttp2HealthCheckArgs.builder()
 *                 .portName("health-check-port")
 *                 .portSpecification("USE_NAMED_PORT")
 *                 .host("1.2.3.4")
 *                 .requestPath("/mypath")
 *                 .proxyHeader("NONE")
 *                 .response("I AM HEALTHY")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Grpc
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckGrpcHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var grpc_health_check = new HealthCheck("grpc-health-check", HealthCheckArgs.builder()
 *             .name("grpc-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .grpcHealthCheck(HealthCheckGrpcHealthCheckArgs.builder()
 *                 .port(443)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Grpc Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckGrpcHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var grpc_health_check = new HealthCheck("grpc-health-check", HealthCheckArgs.builder()
 *             .name("grpc-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .grpcHealthCheck(HealthCheckGrpcHealthCheckArgs.builder()
 *                 .portName("health-check-port")
 *                 .portSpecification("USE_NAMED_PORT")
 *                 .grpcServiceName("testservice")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Grpc With Tls
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckGrpcTlsHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var grpc_with_tls_health_check = new HealthCheck("grpc-with-tls-health-check", HealthCheckArgs.builder()
 *             .name("grpc-with-tls-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .grpcTlsHealthCheck(HealthCheckGrpcTlsHealthCheckArgs.builder()
 *                 .port(443)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check Grpc With Tls Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckGrpcTlsHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var grpc_with_tls_health_check = new HealthCheck("grpc-with-tls-health-check", HealthCheckArgs.builder()
 *             .name("grpc-with-tls-health-check")
 *             .description("Health check via grpc with TLS")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .healthyThreshold(4)
 *             .unhealthyThreshold(5)
 *             .grpcTlsHealthCheck(HealthCheckGrpcTlsHealthCheckArgs.builder()
 *                 .portSpecification("USE_FIXED_PORT")
 *                 .port(443)
 *                 .grpcServiceName("testservice")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Health Check With Logging
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckLogConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var health_check_with_logging = new HealthCheck("health-check-with-logging", HealthCheckArgs.builder()
 *             .name("tcp-health-check")
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(22)
 *                 .build())
 *             .logConfig(HealthCheckLogConfigArgs.builder()
 *                 .enable(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Compute Health Check Http Source Regions
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http_health_check_with_source_regions = new HealthCheck("http-health-check-with-source-regions", HealthCheckArgs.builder()
 *             .name("http-health-check")
 *             .checkIntervalSec(30)
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .portSpecification("USE_FIXED_PORT")
 *                 .build())
 *             .sourceRegions(            
 *                 "us-west1",
 *                 "us-central1",
 *                 "us-east5")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Compute Health Check Https Source Regions
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpsHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var https_health_check_with_source_regions = new HealthCheck("https-health-check-with-source-regions", HealthCheckArgs.builder()
 *             .name("https-health-check")
 *             .checkIntervalSec(30)
 *             .httpsHealthCheck(HealthCheckHttpsHealthCheckArgs.builder()
 *                 .port(80)
 *                 .portSpecification("USE_FIXED_PORT")
 *                 .build())
 *             .sourceRegions(            
 *                 "us-west1",
 *                 "us-central1",
 *                 "us-east5")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Compute Health Check Tcp Source Regions
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcp_health_check_with_source_regions = new HealthCheck("tcp-health-check-with-source-regions", HealthCheckArgs.builder()
 *             .name("tcp-health-check")
 *             .checkIntervalSec(30)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .portSpecification("USE_FIXED_PORT")
 *                 .build())
 *             .sourceRegions(            
 *                 "us-west1",
 *                 "us-central1",
 *                 "us-east5")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * HealthCheck can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/global/healthChecks/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, HealthCheck can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/healthCheck:HealthCheck default projects/{{project}}/global/healthChecks/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/healthCheck:HealthCheck default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/healthCheck:HealthCheck default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/healthCheck:HealthCheck")
public class HealthCheck extends com.pulumi.resources.CustomResource {
    /**
     * How often (in seconds) to send a health check. The default value is 5
     * seconds.
     * 
     */
    @Export(name="checkIntervalSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> checkIntervalSec;

    /**
     * @return How often (in seconds) to send a health check. The default value is 5
     * seconds.
     * 
     */
    public Output<Optional<Integer>> checkIntervalSec() {
        return Codegen.optional(this.checkIntervalSec);
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="grpcHealthCheck", refs={HealthCheckGrpcHealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckGrpcHealthCheck> grpcHealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckGrpcHealthCheck>> grpcHealthCheck() {
        return Codegen.optional(this.grpcHealthCheck);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="grpcTlsHealthCheck", refs={HealthCheckGrpcTlsHealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckGrpcTlsHealthCheck> grpcTlsHealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckGrpcTlsHealthCheck>> grpcTlsHealthCheck() {
        return Codegen.optional(this.grpcTlsHealthCheck);
    }
    /**
     * A so-far unhealthy instance will be marked healthy after this many
     * consecutive successes. The default value is 2.
     * 
     */
    @Export(name="healthyThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> healthyThreshold;

    /**
     * @return A so-far unhealthy instance will be marked healthy after this many
     * consecutive successes. The default value is 2.
     * 
     */
    public Output<Optional<Integer>> healthyThreshold() {
        return Codegen.optional(this.healthyThreshold);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="http2HealthCheck", refs={HealthCheckHttp2HealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckHttp2HealthCheck> http2HealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckHttp2HealthCheck>> http2HealthCheck() {
        return Codegen.optional(this.http2HealthCheck);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="httpHealthCheck", refs={HealthCheckHttpHealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckHttpHealthCheck> httpHealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckHttpHealthCheck>> httpHealthCheck() {
        return Codegen.optional(this.httpHealthCheck);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="httpsHealthCheck", refs={HealthCheckHttpsHealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckHttpsHealthCheck> httpsHealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckHttpsHealthCheck>> httpsHealthCheck() {
        return Codegen.optional(this.httpsHealthCheck);
    }
    /**
     * Configure logging on this health check.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", refs={HealthCheckLogConfig.class}, tree="[0]")
    private Output<HealthCheckLogConfig> logConfig;

    /**
     * @return Configure logging on this health check.
     * Structure is documented below.
     * 
     */
    public Output<HealthCheckLogConfig> logConfig() {
        return this.logConfig;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the
     * last character, which cannot be a dash.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * The list of cloud regions from which health checks are performed. If
     * any regions are specified, then exactly 3 regions should be specified.
     * The region names must be valid names of Google Cloud regions. This can
     * only be set for global health check. If this list is non-empty, then
     * there are restrictions on what other health check fields are supported
     * and what other resources can use this health check:
     * * SSL, HTTP2, and GRPC protocols are not supported.
     * * The TCP request field is not supported.
     * * The proxyHeader field for HTTP, HTTPS, and TCP is not supported.
     * * The checkIntervalSec field must be at least 30.
     * * The health check cannot be used with BackendService nor with managed
     *   instance group auto-healing.
     * 
     */
    @Export(name="sourceRegions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sourceRegions;

    /**
     * @return The list of cloud regions from which health checks are performed. If
     * any regions are specified, then exactly 3 regions should be specified.
     * The region names must be valid names of Google Cloud regions. This can
     * only be set for global health check. If this list is non-empty, then
     * there are restrictions on what other health check fields are supported
     * and what other resources can use this health check:
     * * SSL, HTTP2, and GRPC protocols are not supported.
     * * The TCP request field is not supported.
     * * The proxyHeader field for HTTP, HTTPS, and TCP is not supported.
     * * The checkIntervalSec field must be at least 30.
     * * The health check cannot be used with BackendService nor with managed
     *   instance group auto-healing.
     * 
     */
    public Output<Optional<List<String>>> sourceRegions() {
        return Codegen.optional(this.sourceRegions);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="sslHealthCheck", refs={HealthCheckSslHealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckSslHealthCheck> sslHealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckSslHealthCheck>> sslHealthCheck() {
        return Codegen.optional(this.sslHealthCheck);
    }
    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Export(name="tcpHealthCheck", refs={HealthCheckTcpHealthCheck.class}, tree="[0]")
    private Output</* @Nullable */ HealthCheckTcpHealthCheck> tcpHealthCheck;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HealthCheckTcpHealthCheck>> tcpHealthCheck() {
        return Codegen.optional(this.tcpHealthCheck);
    }
    /**
     * How long (in seconds) to wait before claiming failure.
     * The default value is 5 seconds.  It is invalid for timeoutSec to have
     * greater value than checkIntervalSec.
     * 
     */
    @Export(name="timeoutSec", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutSec;

    /**
     * @return How long (in seconds) to wait before claiming failure.
     * The default value is 5 seconds.  It is invalid for timeoutSec to have
     * greater value than checkIntervalSec.
     * 
     */
    public Output<Optional<Integer>> timeoutSec() {
        return Codegen.optional(this.timeoutSec);
    }
    /**
     * The type of the health check. One of HTTP, HTTPS, TCP, or SSL.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the health check. One of HTTP, HTTPS, TCP, or SSL.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * A so-far healthy instance will be marked unhealthy after this many
     * consecutive failures. The default value is 2.
     * 
     */
    @Export(name="unhealthyThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> unhealthyThreshold;

    /**
     * @return A so-far healthy instance will be marked unhealthy after this many
     * consecutive failures. The default value is 2.
     * 
     */
    public Output<Optional<Integer>> unhealthyThreshold() {
        return Codegen.optional(this.unhealthyThreshold);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HealthCheck(java.lang.String name) {
        this(name, HealthCheckArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HealthCheck(java.lang.String name, @Nullable HealthCheckArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HealthCheck(java.lang.String name, @Nullable HealthCheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/healthCheck:HealthCheck", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private HealthCheck(java.lang.String name, Output<java.lang.String> id, @Nullable HealthCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/healthCheck:HealthCheck", name, state, makeResourceOptions(options, id), false);
    }

    private static HealthCheckArgs makeArgs(@Nullable HealthCheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HealthCheckArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HealthCheck get(java.lang.String name, Output<java.lang.String> id, @Nullable HealthCheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HealthCheck(name, id, state, options);
    }
}
