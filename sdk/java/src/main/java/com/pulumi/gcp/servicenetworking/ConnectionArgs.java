// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.servicenetworking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    @Import(name="deletionPolicy")
    private @Nullable Output<String> deletionPolicy;

    public Optional<Output<String>> deletionPolicy() {
        return Optional.ofNullable(this.deletionPolicy);
    }

    /**
     * Name of VPC network connected with service producers using VPC peering.
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return Name of VPC network connected with service producers using VPC peering.
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * Named IP address range(s) of PEERING type reserved for
     * this service provider. Note that invoking this method with a different range when connection
     * is already established will not reallocate already provisioned service producer subnetworks.
     * 
     */
    @Import(name="reservedPeeringRanges", required=true)
    private Output<List<String>> reservedPeeringRanges;

    /**
     * @return Named IP address range(s) of PEERING type reserved for
     * this service provider. Note that invoking this method with a different range when connection
     * is already established will not reallocate already provisioned service producer subnetworks.
     * 
     */
    public Output<List<String>> reservedPeeringRanges() {
        return this.reservedPeeringRanges;
    }

    /**
     * Provider peering service that is managing peering connectivity for a
     * service provider organization. For Google services that support this functionality it is
     * &#39;servicenetworking.googleapis.com&#39;.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Provider peering service that is managing peering connectivity for a
     * service provider organization. For Google services that support this functionality it is
     * &#39;servicenetworking.googleapis.com&#39;.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case of a new connection creation failure.
     * 
     */
    @Import(name="updateOnCreationFail")
    private @Nullable Output<Boolean> updateOnCreationFail;

    /**
     * @return When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case of a new connection creation failure.
     * 
     */
    public Optional<Output<Boolean>> updateOnCreationFail() {
        return Optional.ofNullable(this.updateOnCreationFail);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.deletionPolicy = $.deletionPolicy;
        this.network = $.network;
        this.reservedPeeringRanges = $.reservedPeeringRanges;
        this.service = $.service;
        this.updateOnCreationFail = $.updateOnCreationFail;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder deletionPolicy(@Nullable Output<String> deletionPolicy) {
            $.deletionPolicy = deletionPolicy;
            return this;
        }

        public Builder deletionPolicy(String deletionPolicy) {
            return deletionPolicy(Output.of(deletionPolicy));
        }

        /**
         * @param network Name of VPC network connected with service producers using VPC peering.
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Name of VPC network connected with service producers using VPC peering.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param reservedPeeringRanges Named IP address range(s) of PEERING type reserved for
         * this service provider. Note that invoking this method with a different range when connection
         * is already established will not reallocate already provisioned service producer subnetworks.
         * 
         * @return builder
         * 
         */
        public Builder reservedPeeringRanges(Output<List<String>> reservedPeeringRanges) {
            $.reservedPeeringRanges = reservedPeeringRanges;
            return this;
        }

        /**
         * @param reservedPeeringRanges Named IP address range(s) of PEERING type reserved for
         * this service provider. Note that invoking this method with a different range when connection
         * is already established will not reallocate already provisioned service producer subnetworks.
         * 
         * @return builder
         * 
         */
        public Builder reservedPeeringRanges(List<String> reservedPeeringRanges) {
            return reservedPeeringRanges(Output.of(reservedPeeringRanges));
        }

        /**
         * @param reservedPeeringRanges Named IP address range(s) of PEERING type reserved for
         * this service provider. Note that invoking this method with a different range when connection
         * is already established will not reallocate already provisioned service producer subnetworks.
         * 
         * @return builder
         * 
         */
        public Builder reservedPeeringRanges(String... reservedPeeringRanges) {
            return reservedPeeringRanges(List.of(reservedPeeringRanges));
        }

        /**
         * @param service Provider peering service that is managing peering connectivity for a
         * service provider organization. For Google services that support this functionality it is
         * &#39;servicenetworking.googleapis.com&#39;.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Provider peering service that is managing peering connectivity for a
         * service provider organization. For Google services that support this functionality it is
         * &#39;servicenetworking.googleapis.com&#39;.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param updateOnCreationFail When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case of a new connection creation failure.
         * 
         * @return builder
         * 
         */
        public Builder updateOnCreationFail(@Nullable Output<Boolean> updateOnCreationFail) {
            $.updateOnCreationFail = updateOnCreationFail;
            return this;
        }

        /**
         * @param updateOnCreationFail When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case of a new connection creation failure.
         * 
         * @return builder
         * 
         */
        public Builder updateOnCreationFail(Boolean updateOnCreationFail) {
            return updateOnCreationFail(Output.of(updateOnCreationFail));
        }

        public ConnectionArgs build() {
            if ($.network == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "network");
            }
            if ($.reservedPeeringRanges == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "reservedPeeringRanges");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ConnectionArgs", "service");
            }
            return $;
        }
    }

}
