// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.WireGroupEndpointArgs;
import com.pulumi.gcp.compute.inputs.WireGroupTopologyArgs;
import com.pulumi.gcp.compute.inputs.WireGroupWireArgs;
import com.pulumi.gcp.compute.inputs.WireGroupWireGroupPropertiesArgs;
import com.pulumi.gcp.compute.inputs.WireGroupWirePropertiesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WireGroupState extends com.pulumi.resources.ResourceArgs {

    public static final WireGroupState Empty = new WireGroupState();

    /**
     * Indicates whether the wire group is administratively enabled.
     * 
     */
    @Import(name="adminEnabled")
    private @Nullable Output<Boolean> adminEnabled;

    /**
     * @return Indicates whether the wire group is administratively enabled.
     * 
     */
    public Optional<Output<Boolean>> adminEnabled() {
        return Optional.ofNullable(this.adminEnabled);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * Required cross site network to which wire group belongs.
     * 
     */
    @Import(name="crossSiteNetwork")
    private @Nullable Output<String> crossSiteNetwork;

    /**
     * @return Required cross site network to which wire group belongs.
     * 
     */
    public Optional<Output<String>> crossSiteNetwork() {
        return Optional.ofNullable(this.crossSiteNetwork);
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<WireGroupEndpointArgs>> endpoints;

    /**
     * @return Endpoints grouped by location, each mapping to interconnect configurations.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WireGroupEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be
     * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Topology details for the wire group configuration.
     * Structure is documented below.
     * 
     */
    @Import(name="topologies")
    private @Nullable Output<List<WireGroupTopologyArgs>> topologies;

    /**
     * @return Topology details for the wire group configuration.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WireGroupTopologyArgs>>> topologies() {
        return Optional.ofNullable(this.topologies);
    }

    /**
     * Properties specific to the wire group.
     * Structure is documented below.
     * 
     */
    @Import(name="wireGroupProperties")
    private @Nullable Output<WireGroupWireGroupPropertiesArgs> wireGroupProperties;

    /**
     * @return Properties specific to the wire group.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WireGroupWireGroupPropertiesArgs>> wireGroupProperties() {
        return Optional.ofNullable(this.wireGroupProperties);
    }

    /**
     * Default properties for wires within the group.
     * Structure is documented below.
     * 
     */
    @Import(name="wireProperties")
    private @Nullable Output<WireGroupWirePropertiesArgs> wireProperties;

    /**
     * @return Default properties for wires within the group.
     * Structure is documented below.
     * 
     */
    public Optional<Output<WireGroupWirePropertiesArgs>> wireProperties() {
        return Optional.ofNullable(this.wireProperties);
    }

    /**
     * The single/redundant wire(s) managed by the wire group.
     * Structure is documented below.
     * 
     */
    @Import(name="wires")
    private @Nullable Output<List<WireGroupWireArgs>> wires;

    /**
     * @return The single/redundant wire(s) managed by the wire group.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<WireGroupWireArgs>>> wires() {
        return Optional.ofNullable(this.wires);
    }

    private WireGroupState() {}

    private WireGroupState(WireGroupState $) {
        this.adminEnabled = $.adminEnabled;
        this.creationTimestamp = $.creationTimestamp;
        this.crossSiteNetwork = $.crossSiteNetwork;
        this.description = $.description;
        this.endpoints = $.endpoints;
        this.name = $.name;
        this.project = $.project;
        this.topologies = $.topologies;
        this.wireGroupProperties = $.wireGroupProperties;
        this.wireProperties = $.wireProperties;
        this.wires = $.wires;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WireGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WireGroupState $;

        public Builder() {
            $ = new WireGroupState();
        }

        public Builder(WireGroupState defaults) {
            $ = new WireGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminEnabled Indicates whether the wire group is administratively enabled.
         * 
         * @return builder
         * 
         */
        public Builder adminEnabled(@Nullable Output<Boolean> adminEnabled) {
            $.adminEnabled = adminEnabled;
            return this;
        }

        /**
         * @param adminEnabled Indicates whether the wire group is administratively enabled.
         * 
         * @return builder
         * 
         */
        public Builder adminEnabled(Boolean adminEnabled) {
            return adminEnabled(Output.of(adminEnabled));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param crossSiteNetwork Required cross site network to which wire group belongs.
         * 
         * @return builder
         * 
         */
        public Builder crossSiteNetwork(@Nullable Output<String> crossSiteNetwork) {
            $.crossSiteNetwork = crossSiteNetwork;
            return this;
        }

        /**
         * @param crossSiteNetwork Required cross site network to which wire group belongs.
         * 
         * @return builder
         * 
         */
        public Builder crossSiteNetwork(String crossSiteNetwork) {
            return crossSiteNetwork(Output.of(crossSiteNetwork));
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpoints Endpoints grouped by location, each mapping to interconnect configurations.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<List<WireGroupEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints Endpoints grouped by location, each mapping to interconnect configurations.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<WireGroupEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints Endpoints grouped by location, each mapping to interconnect configurations.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(WireGroupEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is created. The name must be
         * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
         * long and match the regular expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters must be a dash,
         * lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is created. The name must be
         * 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters
         * long and match the regular expression `a-z?` which means the first
         * character must be a lowercase letter, and all following characters must be a dash,
         * lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param topologies Topology details for the wire group configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topologies(@Nullable Output<List<WireGroupTopologyArgs>> topologies) {
            $.topologies = topologies;
            return this;
        }

        /**
         * @param topologies Topology details for the wire group configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topologies(List<WireGroupTopologyArgs> topologies) {
            return topologies(Output.of(topologies));
        }

        /**
         * @param topologies Topology details for the wire group configuration.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topologies(WireGroupTopologyArgs... topologies) {
            return topologies(List.of(topologies));
        }

        /**
         * @param wireGroupProperties Properties specific to the wire group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wireGroupProperties(@Nullable Output<WireGroupWireGroupPropertiesArgs> wireGroupProperties) {
            $.wireGroupProperties = wireGroupProperties;
            return this;
        }

        /**
         * @param wireGroupProperties Properties specific to the wire group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wireGroupProperties(WireGroupWireGroupPropertiesArgs wireGroupProperties) {
            return wireGroupProperties(Output.of(wireGroupProperties));
        }

        /**
         * @param wireProperties Default properties for wires within the group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wireProperties(@Nullable Output<WireGroupWirePropertiesArgs> wireProperties) {
            $.wireProperties = wireProperties;
            return this;
        }

        /**
         * @param wireProperties Default properties for wires within the group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wireProperties(WireGroupWirePropertiesArgs wireProperties) {
            return wireProperties(Output.of(wireProperties));
        }

        /**
         * @param wires The single/redundant wire(s) managed by the wire group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wires(@Nullable Output<List<WireGroupWireArgs>> wires) {
            $.wires = wires;
            return this;
        }

        /**
         * @param wires The single/redundant wire(s) managed by the wire group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wires(List<WireGroupWireArgs> wires) {
            return wires(Output.of(wires));
        }

        /**
         * @param wires The single/redundant wire(s) managed by the wire group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder wires(WireGroupWireArgs... wires) {
            return wires(List.of(wires));
        }

        public WireGroupState build() {
            return $;
        }
    }

}
