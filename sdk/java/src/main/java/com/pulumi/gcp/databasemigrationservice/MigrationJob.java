// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.databasemigrationservice.MigrationJobArgs;
import com.pulumi.gcp.databasemigrationservice.inputs.MigrationJobState;
import com.pulumi.gcp.databasemigrationservice.outputs.MigrationJobDumpFlags;
import com.pulumi.gcp.databasemigrationservice.outputs.MigrationJobError;
import com.pulumi.gcp.databasemigrationservice.outputs.MigrationJobPerformanceConfig;
import com.pulumi.gcp.databasemigrationservice.outputs.MigrationJobReverseSshConnectivity;
import com.pulumi.gcp.databasemigrationservice.outputs.MigrationJobStaticIpConnectivity;
import com.pulumi.gcp.databasemigrationservice.outputs.MigrationJobVpcPeeringConnectivity;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A migration job definition.
 * 
 * To get more information about MigrationJob, see:
 * 
 * * [API documentation](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/create)
 * * How-to Guides
 *     * [Database Migration](https://cloud.google.com/database-migration/docs/)
 * 
 * ## Example Usage
 * 
 * ### Database Migration Service Migration Job Mysql To Mysql
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileMysqlSslArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.databasemigrationservice.MigrationJob;
 * import com.pulumi.gcp.databasemigrationservice.MigrationJobArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.MigrationJobPerformanceConfigArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.MigrationJobVpcPeeringConnectivityArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.MigrationJobDumpFlagsArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var sourceCsql = new DatabaseInstance("sourceCsql", DatabaseInstanceArgs.builder()
 *             .name("source-csql")
 *             .databaseVersion("MYSQL_5_7")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-n1-standard-1")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sourceSqlClientCert = new SslCert("sourceSqlClientCert", SslCertArgs.builder()
 *             .commonName("cert")
 *             .instance(sourceCsql.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceCsql)
 *                 .build());
 * 
 *         var sourceSqldbUser = new User("sourceSqldbUser", UserArgs.builder()
 *             .name("username")
 *             .instance(sourceCsql.name())
 *             .password("password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceSqlClientCert)
 *                 .build());
 * 
 *         var sourceCp = new ConnectionProfile("sourceCp", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("source-cp")
 *             .displayName("source-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .mysql(ConnectionProfileMysqlArgs.builder()
 *                 .host(sourceCsql.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(3306)
 *                 .username(sourceSqldbUser.name())
 *                 .password(sourceSqldbUser.password())
 *                 .ssl(ConnectionProfileMysqlSslArgs.builder()
 *                     .clientKey(sourceSqlClientCert.privateKey())
 *                     .clientCertificate(sourceSqlClientCert.cert())
 *                     .caCertificate(sourceSqlClientCert.serverCaCert())
 *                     .type("SERVER_CLIENT")
 *                     .build())
 *                 .cloudSqlId("source-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceSqldbUser)
 *                 .build());
 * 
 *         var destinationCsql = new DatabaseInstance("destinationCsql", DatabaseInstanceArgs.builder()
 *             .name("destination-csql")
 *             .databaseVersion("MYSQL_5_7")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-n1-standard-1")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var destinationCp = new ConnectionProfile("destinationCp", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("destination-cp")
 *             .displayName("destination-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .mysql(ConnectionProfileMysqlArgs.builder()
 *                 .cloudSqlId("destination-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(destinationCsql)
 *                 .build());
 * 
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("destination-csql")
 *             .build());
 * 
 *         var mysqltomysql = new MigrationJob("mysqltomysql", MigrationJobArgs.builder()
 *             .location("us-central1")
 *             .migrationJobId("my-migrationid")
 *             .displayName("my-migrationid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .performanceConfig(MigrationJobPerformanceConfigArgs.builder()
 *                 .dumpParallelLevel("MAX")
 *                 .build())
 *             .vpcPeeringConnectivity(MigrationJobVpcPeeringConnectivityArgs.builder()
 *                 .vpc(default_.id())
 *                 .build())
 *             .dumpType("LOGICAL")
 *             .dumpFlags(MigrationJobDumpFlagsArgs.builder()
 *                 .dumpFlags(MigrationJobDumpFlagsDumpFlagArgs.builder()
 *                     .name("max-allowed-packet")
 *                     .value("1073741824")
 *                     .build())
 *                 .build())
 *             .source(sourceCp.name())
 *             .destination(destinationCp.name())
 *             .type("CONTINUOUS")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Database Migration Service Migration Job Postgres To Postgres
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlSslArgs;
 * import com.pulumi.gcp.databasemigrationservice.MigrationJob;
 * import com.pulumi.gcp.databasemigrationservice.MigrationJobArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.MigrationJobStaticIpConnectivityArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var sourceCsql = new DatabaseInstance("sourceCsql", DatabaseInstanceArgs.builder()
 *             .name("source-csql")
 *             .databaseVersion("POSTGRES_15")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sourceSqlClientCert = new SslCert("sourceSqlClientCert", SslCertArgs.builder()
 *             .commonName("cert")
 *             .instance(sourceCsql.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceCsql)
 *                 .build());
 * 
 *         var sourceSqldbUser = new User("sourceSqldbUser", UserArgs.builder()
 *             .name("username")
 *             .instance(sourceCsql.name())
 *             .password("password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceSqlClientCert)
 *                 .build());
 * 
 *         var sourceCp = new ConnectionProfile("sourceCp", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("source-cp")
 *             .displayName("source-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .host(sourceCsql.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(3306)
 *                 .username(sourceSqldbUser.name())
 *                 .password(sourceSqldbUser.password())
 *                 .ssl(ConnectionProfilePostgresqlSslArgs.builder()
 *                     .clientKey(sourceSqlClientCert.privateKey())
 *                     .clientCertificate(sourceSqlClientCert.cert())
 *                     .caCertificate(sourceSqlClientCert.serverCaCert())
 *                     .type("SERVER_CLIENT")
 *                     .build())
 *                 .cloudSqlId("source-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceSqldbUser)
 *                 .build());
 * 
 *         var destinationCsql = new DatabaseInstance("destinationCsql", DatabaseInstanceArgs.builder()
 *             .name("destination-csql")
 *             .databaseVersion("POSTGRES_15")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var destinationCp = new ConnectionProfile("destinationCp", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("destination-cp")
 *             .displayName("destination-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .cloudSqlId("destination-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(destinationCsql)
 *                 .build());
 * 
 *         var psqltopsql = new MigrationJob("psqltopsql", MigrationJobArgs.builder()
 *             .location("us-central1")
 *             .migrationJobId("my-migrationid")
 *             .displayName("my-migrationid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .staticIpConnectivity(MigrationJobStaticIpConnectivityArgs.builder()
 *                 .build())
 *             .source(sourceCp.name())
 *             .destination(destinationCp.name())
 *             .type("CONTINUOUS")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Database Migration Service Migration Job Postgres To Alloydb
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.sql.DatabaseInstance;
 * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
 * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
 * import com.pulumi.gcp.sql.SslCert;
 * import com.pulumi.gcp.sql.SslCertArgs;
 * import com.pulumi.gcp.sql.User;
 * import com.pulumi.gcp.sql.UserArgs;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfile;
 * import com.pulumi.gcp.databasemigrationservice.ConnectionProfileArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfilePostgresqlSslArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.alloydb.Cluster;
 * import com.pulumi.gcp.alloydb.ClusterArgs;
 * import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
 * import com.pulumi.gcp.alloydb.inputs.ClusterInitialUserArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.alloydb.Instance;
 * import com.pulumi.gcp.alloydb.InstanceArgs;
 * import com.pulumi.gcp.databasemigrationservice.MigrationJob;
 * import com.pulumi.gcp.databasemigrationservice.MigrationJobArgs;
 * import com.pulumi.gcp.databasemigrationservice.inputs.MigrationJobStaticIpConnectivityArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var sourceCsql = new DatabaseInstance("sourceCsql", DatabaseInstanceArgs.builder()
 *             .name("source-csql")
 *             .databaseVersion("POSTGRES_15")
 *             .settings(DatabaseInstanceSettingsArgs.builder()
 *                 .tier("db-custom-2-13312")
 *                 .deletionProtectionEnabled(false)
 *                 .build())
 *             .deletionProtection(false)
 *             .build());
 * 
 *         var sourceSqlClientCert = new SslCert("sourceSqlClientCert", SslCertArgs.builder()
 *             .commonName("cert")
 *             .instance(sourceCsql.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceCsql)
 *                 .build());
 * 
 *         var sourceSqldbUser = new User("sourceSqldbUser", UserArgs.builder()
 *             .name("username")
 *             .instance(sourceCsql.name())
 *             .password("password")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceSqlClientCert)
 *                 .build());
 * 
 *         var sourceCp = new ConnectionProfile("sourceCp", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("source-cp")
 *             .displayName("source-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .host(sourceCsql.ipAddresses().applyValue(_ipAddresses -> _ipAddresses[0].ipAddress()))
 *                 .port(3306)
 *                 .username(sourceSqldbUser.name())
 *                 .password(sourceSqldbUser.password())
 *                 .ssl(ConnectionProfilePostgresqlSslArgs.builder()
 *                     .clientKey(sourceSqlClientCert.privateKey())
 *                     .clientCertificate(sourceSqlClientCert.cert())
 *                     .caCertificate(sourceSqlClientCert.serverCaCert())
 *                     .type("SERVER_CLIENT")
 *                     .build())
 *                 .cloudSqlId("source-csql")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(sourceSqldbUser)
 *                 .build());
 * 
 *         var default_ = new Network("default", NetworkArgs.builder()
 *             .name("destination-alloydb")
 *             .build());
 * 
 *         var destinationAlloydb = new Cluster("destinationAlloydb", ClusterArgs.builder()
 *             .clusterId("destination-alloydb")
 *             .location("us-central1")
 *             .networkConfig(ClusterNetworkConfigArgs.builder()
 *                 .network(default_.id())
 *                 .build())
 *             .databaseVersion("POSTGRES_15")
 *             .initialUser(ClusterInitialUserArgs.builder()
 *                 .user("destination-alloydb")
 *                 .password("destination-alloydb")
 *                 .build())
 *             .build());
 * 
 *         var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
 *             .name("destination-alloydb")
 *             .addressType("INTERNAL")
 *             .purpose("VPC_PEERING")
 *             .prefixLength(16)
 *             .network(default_.id())
 *             .build());
 * 
 *         var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
 *             .network(default_.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(privateIpAlloc.name())
 *             .build());
 * 
 *         var destinationAlloydbPrimary = new Instance("destinationAlloydbPrimary", InstanceArgs.builder()
 *             .cluster(destinationAlloydb.name())
 *             .instanceId("destination-alloydb-primary")
 *             .instanceType("PRIMARY")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(vpcConnection)
 *                 .build());
 * 
 *         var destinationCp = new ConnectionProfile("destinationCp", ConnectionProfileArgs.builder()
 *             .location("us-central1")
 *             .connectionProfileId("destination-cp")
 *             .displayName("destination-cp_display")
 *             .labels(Map.of("foo", "bar"))
 *             .postgresql(ConnectionProfilePostgresqlArgs.builder()
 *                 .alloydbClusterId("destination-alloydb")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     destinationAlloydb,
 *                     destinationAlloydbPrimary)
 *                 .build());
 * 
 *         var psqltoalloydb = new MigrationJob("psqltoalloydb", MigrationJobArgs.builder()
 *             .location("us-central1")
 *             .migrationJobId("my-migrationid")
 *             .displayName("my-migrationid_display")
 *             .labels(Map.of("foo", "bar"))
 *             .staticIpConnectivity(MigrationJobStaticIpConnectivityArgs.builder()
 *                 .build())
 *             .source(sourceCp.name())
 *             .destination(destinationCp.name())
 *             .type("CONTINUOUS")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * MigrationJob can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}`
 * 
 * * `{{project}}/{{location}}/{{migration_job_id}}`
 * 
 * * `{{location}}/{{migration_job_id}}`
 * 
 * When using the `pulumi import` command, MigrationJob can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default projects/{{project}}/locations/{{location}}/migrationJobs/{{migration_job_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default {{project}}/{{location}}/{{migration_job_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:databasemigrationservice/migrationJob:MigrationJob default {{location}}/{{migration_job_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:databasemigrationservice/migrationJob:MigrationJob")
public class MigrationJob extends com.pulumi.resources.CustomResource {
    /**
     * Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC &#39;Zulu&#39; format, accurate to nanoseconds. Example: &#39;2014-10-02T15:01:23.045123456Z&#39;.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC &#39;Zulu&#39; format, accurate to nanoseconds. Example: &#39;2014-10-02T15:01:23.045123456Z&#39;.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
     * 
     */
    @Export(name="destination", refs={String.class}, tree="[0]")
    private Output<String> destination;

    /**
     * @return The name of the destination connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{destinationConnectionProfile}.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }
    /**
     * The migration job display name.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The migration job display name.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * The initial dump flags.
     * Structure is documented below.
     * 
     */
    @Export(name="dumpFlags", refs={MigrationJobDumpFlags.class}, tree="[0]")
    private Output</* @Nullable */ MigrationJobDumpFlags> dumpFlags;

    /**
     * @return The initial dump flags.
     * Structure is documented below.
     * 
     */
    public Output<Optional<MigrationJobDumpFlags>> dumpFlags() {
        return Codegen.optional(this.dumpFlags);
    }
    /**
     * The path to the dump file in Google Cloud Storage,
     * in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
     * This field and the &#34;dump_flags&#34; field are mutually exclusive.
     * 
     */
    @Export(name="dumpPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dumpPath;

    /**
     * @return The path to the dump file in Google Cloud Storage,
     * in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).
     * This field and the &#34;dump_flags&#34; field are mutually exclusive.
     * 
     */
    public Output<Optional<String>> dumpPath() {
        return Codegen.optional(this.dumpPath);
    }
    /**
     * The type of the data dump. Supported for MySQL to CloudSQL for MySQL
     * migrations only.
     * Possible values are: `LOGICAL`, `PHYSICAL`.
     * 
     */
    @Export(name="dumpType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dumpType;

    /**
     * @return The type of the data dump. Supported for MySQL to CloudSQL for MySQL
     * migrations only.
     * Possible values are: `LOGICAL`, `PHYSICAL`.
     * 
     */
    public Output<Optional<String>> dumpType() {
        return Codegen.optional(this.dumpType);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Output only. The error details in case of state FAILED.
     * Structure is documented below.
     * 
     */
    @Export(name="errors", refs={List.class,MigrationJobError.class}, tree="[0,1]")
    private Output<List<MigrationJobError>> errors;

    /**
     * @return Output only. The error details in case of state FAILED.
     * Structure is documented below.
     * 
     */
    public Output<List<MigrationJobError>> errors() {
        return this.errors;
    }
    /**
     * The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location where the migration job should reside.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location where the migration job should reside.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * The ID of the migration job.
     * 
     * ***
     * 
     */
    @Export(name="migrationJobId", refs={String.class}, tree="[0]")
    private Output<String> migrationJobId;

    /**
     * @return The ID of the migration job.
     * 
     * ***
     * 
     */
    public Output<String> migrationJobId() {
        return this.migrationJobId;
    }
    /**
     * The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this migration job resource in the form of projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Data dump parallelism settings used by the migration.
     * Structure is documented below.
     * 
     */
    @Export(name="performanceConfig", refs={MigrationJobPerformanceConfig.class}, tree="[0]")
    private Output</* @Nullable */ MigrationJobPerformanceConfig> performanceConfig;

    /**
     * @return Data dump parallelism settings used by the migration.
     * Structure is documented below.
     * 
     */
    public Output<Optional<MigrationJobPerformanceConfig>> performanceConfig() {
        return Codegen.optional(this.performanceConfig);
    }
    /**
     * The current migration job phase.
     * 
     */
    @Export(name="phase", refs={String.class}, tree="[0]")
    private Output<String> phase;

    /**
     * @return The current migration job phase.
     * 
     */
    public Output<String> phase() {
        return this.phase;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The details of the VPC network that the source database is located in.
     * Structure is documented below.
     * 
     */
    @Export(name="reverseSshConnectivity", refs={MigrationJobReverseSshConnectivity.class}, tree="[0]")
    private Output</* @Nullable */ MigrationJobReverseSshConnectivity> reverseSshConnectivity;

    /**
     * @return The details of the VPC network that the source database is located in.
     * Structure is documented below.
     * 
     */
    public Output<Optional<MigrationJobReverseSshConnectivity>> reverseSshConnectivity() {
        return Codegen.optional(this.reverseSshConnectivity);
    }
    /**
     * The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
     * 
     */
    @Export(name="source", refs={String.class}, tree="[0]")
    private Output<String> source;

    /**
     * @return The name of the source connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{sourceConnectionProfile}.
     * 
     */
    public Output<String> source() {
        return this.source;
    }
    /**
     * The current migration job state.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current migration job state.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * If set to an empty object (`{}`), the source database will allow incoming
     * connections from the public IP of the destination database.
     * You can retrieve the public IP of the Cloud SQL instance from the
     * Cloud SQL console or using Cloud SQL APIs.
     * 
     */
    @Export(name="staticIpConnectivity", refs={MigrationJobStaticIpConnectivity.class}, tree="[0]")
    private Output</* @Nullable */ MigrationJobStaticIpConnectivity> staticIpConnectivity;

    /**
     * @return If set to an empty object (`{}`), the source database will allow incoming
     * connections from the public IP of the destination database.
     * You can retrieve the public IP of the Cloud SQL instance from the
     * Cloud SQL console or using Cloud SQL APIs.
     * 
     */
    public Output<Optional<MigrationJobStaticIpConnectivity>> staticIpConnectivity() {
        return Codegen.optional(this.staticIpConnectivity);
    }
    /**
     * The type of the migration job.
     * Possible values are: `ONE_TIME`, `CONTINUOUS`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the migration job.
     * Possible values are: `ONE_TIME`, `CONTINUOUS`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The details of the VPC network that the source database is located in.
     * Structure is documented below.
     * 
     */
    @Export(name="vpcPeeringConnectivity", refs={MigrationJobVpcPeeringConnectivity.class}, tree="[0]")
    private Output</* @Nullable */ MigrationJobVpcPeeringConnectivity> vpcPeeringConnectivity;

    /**
     * @return The details of the VPC network that the source database is located in.
     * Structure is documented below.
     * 
     */
    public Output<Optional<MigrationJobVpcPeeringConnectivity>> vpcPeeringConnectivity() {
        return Codegen.optional(this.vpcPeeringConnectivity);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MigrationJob(java.lang.String name) {
        this(name, MigrationJobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MigrationJob(java.lang.String name, MigrationJobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MigrationJob(java.lang.String name, MigrationJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:databasemigrationservice/migrationJob:MigrationJob", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MigrationJob(java.lang.String name, Output<java.lang.String> id, @Nullable MigrationJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:databasemigrationservice/migrationJob:MigrationJob", name, state, makeResourceOptions(options, id), false);
    }

    private static MigrationJobArgs makeArgs(MigrationJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MigrationJobArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MigrationJob get(java.lang.String name, Output<java.lang.String> id, @Nullable MigrationJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MigrationJob(name, id, state, options);
    }
}
