// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionState;
import com.pulumi.gcp.cloudfunctionsv2.outputs.FunctionBuildConfig;
import com.pulumi.gcp.cloudfunctionsv2.outputs.FunctionEventTrigger;
import com.pulumi.gcp.cloudfunctionsv2.outputs.FunctionServiceConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Cloud Function that contains user computation executed in response to an event.
 * 
 * To get more information about function, see:
 * 
 * * [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions)
 * 
 * ## Example Usage
 * 
 * ### Cloudfunctions2 Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("function-v2")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionEventTriggerArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var account = new Account("account", AccountArgs.builder()
 *             .accountId("gcf-sa")
 *             .displayName("Test Service Account")
 *             .build());
 * 
 *         var topic = new Topic("topic", TopicArgs.builder()
 *             .name("functions2-topic")
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("gcf-function")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloPubSub")
 *                 .environmentVariables(Map.of("BUILD_CONFIG_TEST", "build_test"))
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(3)
 *                 .minInstanceCount(1)
 *                 .availableMemory("4Gi")
 *                 .timeoutSeconds(60)
 *                 .maxInstanceRequestConcurrency(80)
 *                 .availableCpu("4")
 *                 .environmentVariables(Map.of("SERVICE_CONFIG_TEST", "config_test"))
 *                 .ingressSettings("ALLOW_INTERNAL_ONLY")
 *                 .allTrafficOnLatestRevision(true)
 *                 .serviceAccountEmail(account.email())
 *                 .build())
 *             .eventTrigger(FunctionEventTriggerArgs.builder()
 *                 .triggerRegion("us-central1")
 *                 .eventType("google.cloud.pubsub.topic.v1.messagePublished")
 *                 .pubsubTopic(topic.id())
 *                 .retryPolicy("RETRY_POLICY_RETRY")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Scheduler Auth
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionIamMember;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionIamMemberArgs;
 * import com.pulumi.gcp.cloudrun.IamMember;
 * import com.pulumi.gcp.cloudrun.IamMemberArgs;
 * import com.pulumi.gcp.cloudscheduler.Job;
 * import com.pulumi.gcp.cloudscheduler.JobArgs;
 * import com.pulumi.gcp.cloudscheduler.inputs.JobHttpTargetArgs;
 * import com.pulumi.gcp.cloudscheduler.inputs.JobHttpTargetOidcTokenArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var account = new Account("account", AccountArgs.builder()
 *             .accountId("gcf-sa")
 *             .displayName("Test Service Account")
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("gcf-function")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .minInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .serviceAccountEmail(account.email())
 *                 .build())
 *             .build());
 * 
 *         var invoker = new FunctionIamMember("invoker", FunctionIamMemberArgs.builder()
 *             .project(function.project())
 *             .location(function.location())
 *             .cloudFunction(function.name())
 *             .role("roles/cloudfunctions.invoker")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var cloudRunInvoker = new IamMember("cloudRunInvoker", IamMemberArgs.builder()
 *             .project(function.project())
 *             .location(function.location())
 *             .service(function.name())
 *             .role("roles/run.invoker")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var invokeCloudFunction = new Job("invokeCloudFunction", JobArgs.builder()
 *             .name("invoke-gcf-function")
 *             .description("Schedule the HTTPS trigger for cloud function")
 *             .schedule("0 0 * * *")
 *             .project(function.project())
 *             .region(function.location())
 *             .httpTarget(JobHttpTargetArgs.builder()
 *                 .uri(function.serviceConfig().applyValue(serviceConfig -> serviceConfig.uri()))
 *                 .httpMethod("POST")
 *                 .oidcToken(JobHttpTargetOidcTokenArgs.builder()
 *                     .audience(function.serviceConfig().applyValue(serviceConfig -> String.format("%s/", serviceConfig.uri())))
 *                     .serviceAccountEmail(account.email())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Basic Gcs
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.storage.StorageFunctions;
 * import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionEventTriggerArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var source_bucket = new Bucket("source-bucket", BucketArgs.builder()
 *             .name("gcf-source-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(source_bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var trigger_bucket = new Bucket("trigger-bucket", BucketArgs.builder()
 *             .name("gcf-trigger-bucket")
 *             .location("us-central1")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
 * 
 *         // To use GCS CloudEvent triggers, the GCS service account requires the Pub/Sub Publisher(roles/pubsub.publisher) IAM role in the specified project.
 *         // (See https://cloud.google.com/eventarc/docs/run/quickstart-storage#before-you-begin)
 *         var gcs_pubsub_publishing = new IAMMember("gcs-pubsub-publishing", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/pubsub.publisher")
 *             .member(String.format("serviceAccount:%s", gcsAccount.applyValue(getProjectServiceAccountResult -> getProjectServiceAccountResult.emailAddress())))
 *             .build());
 * 
 *         var account = new Account("account", AccountArgs.builder()
 *             .accountId("gcf-sa")
 *             .displayName("Test Service Account - used for both the cloud function and eventarc trigger in the test")
 *             .build());
 * 
 *         // Permissions on the service account used by the function and Eventarc trigger
 *         var invoking = new IAMMember("invoking", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/run.invoker")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(gcs_pubsub_publishing)
 *                 .build());
 * 
 *         var event_receiving = new IAMMember("event-receiving", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/eventarc.eventReceiver")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(invoking)
 *                 .build());
 * 
 *         var artifactregistry_reader = new IAMMember("artifactregistry-reader", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/artifactregistry.reader")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(event_receiving)
 *                 .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("gcf-function")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs12")
 *                 .entryPoint("entryPoint")
 *                 .environmentVariables(Map.of("BUILD_CONFIG_TEST", "build_test"))
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(source_bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(3)
 *                 .minInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .environmentVariables(Map.of("SERVICE_CONFIG_TEST", "config_test"))
 *                 .ingressSettings("ALLOW_INTERNAL_ONLY")
 *                 .allTrafficOnLatestRevision(true)
 *                 .serviceAccountEmail(account.email())
 *                 .build())
 *             .eventTrigger(FunctionEventTriggerArgs.builder()
 *                 .eventType("google.cloud.storage.object.v1.finalized")
 *                 .retryPolicy("RETRY_POLICY_RETRY")
 *                 .serviceAccountEmail(account.email())
 *                 .eventFilters(FunctionEventTriggerEventFilterArgs.builder()
 *                     .attribute("bucket")
 *                     .value(trigger_bucket.name())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     event_receiving,
 *                     artifactregistry_reader)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Basic Auditlogs
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionEventTriggerArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // This example follows the examples shown in this Google Cloud Community blog post
 *         // https://medium.com/google-cloud/applying-a-path-pattern-when-filtering-in-eventarc-f06b937b4c34
 *         // and the docs:
 *         // https://cloud.google.com/eventarc/docs/path-patterns
 *         var source_bucket = new Bucket("source-bucket", BucketArgs.builder()
 *             .name("gcf-source-bucket")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(source_bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var account = new Account("account", AccountArgs.builder()
 *             .accountId("gcf-sa")
 *             .displayName("Test Service Account - used for both the cloud function and eventarc trigger in the test")
 *             .build());
 * 
 *         // Note: The right way of listening for Cloud Storage events is to use a Cloud Storage trigger.
 *         // Here we use Audit Logs to monitor the bucket so path patterns can be used in the example of
 *         // google_cloudfunctions2_function below (Audit Log events have path pattern support)
 *         var audit_log_bucket = new Bucket("audit-log-bucket", BucketArgs.builder()
 *             .name("gcf-auditlog-bucket")
 *             .location("us-central1")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         // Permissions on the service account used by the function and Eventarc trigger
 *         var invoking = new IAMMember("invoking", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/run.invoker")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var event_receiving = new IAMMember("event-receiving", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/eventarc.eventReceiver")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(invoking)
 *                 .build());
 * 
 *         var artifactregistry_reader = new IAMMember("artifactregistry-reader", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/artifactregistry.reader")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(event_receiving)
 *                 .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("gcf-function")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs12")
 *                 .entryPoint("entryPoint")
 *                 .environmentVariables(Map.of("BUILD_CONFIG_TEST", "build_test"))
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(source_bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(3)
 *                 .minInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .environmentVariables(Map.of("SERVICE_CONFIG_TEST", "config_test"))
 *                 .ingressSettings("ALLOW_INTERNAL_ONLY")
 *                 .allTrafficOnLatestRevision(true)
 *                 .serviceAccountEmail(account.email())
 *                 .build())
 *             .eventTrigger(FunctionEventTriggerArgs.builder()
 *                 .triggerRegion("us-central1")
 *                 .eventType("google.cloud.audit.log.v1.written")
 *                 .retryPolicy("RETRY_POLICY_RETRY")
 *                 .serviceAccountEmail(account.email())
 *                 .eventFilters(                
 *                     FunctionEventTriggerEventFilterArgs.builder()
 *                         .attribute("serviceName")
 *                         .value("storage.googleapis.com")
 *                         .build(),
 *                     FunctionEventTriggerEventFilterArgs.builder()
 *                         .attribute("methodName")
 *                         .value("storage.objects.create")
 *                         .build(),
 *                     FunctionEventTriggerEventFilterArgs.builder()
 *                         .attribute("resourceName")
 *                         .value(audit_log_bucket.name().applyValue(name -> String.format("/projects/_/buckets/%s/objects/*.txt", name)))
 *                         .operator("match-path-pattern")
 *                         .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     event_receiving,
 *                     artifactregistry_reader)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Basic Builder
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.SleepArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var account = new Account("account", AccountArgs.builder()
 *             .accountId("gcf-sa")
 *             .displayName("Test Service Account")
 *             .build());
 * 
 *         var logWriter = new IAMMember("logWriter", IAMMemberArgs.builder()
 *             .project(account.project())
 *             .role("roles/logging.logWriter")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var artifactRegistryWriter = new IAMMember("artifactRegistryWriter", IAMMemberArgs.builder()
 *             .project(account.project())
 *             .role("roles/artifactregistry.writer")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var storageObjectAdmin = new IAMMember("storageObjectAdmin", IAMMemberArgs.builder()
 *             .project(account.project())
 *             .role("roles/storage.objectAdmin")
 *             .member(account.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         // builder permissions need to stablize before it can pull the source zip
 *         var wait60s = new Sleep("wait60s", SleepArgs.builder()
 *             .createDuration("60s")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     logWriter,
 *                     artifactRegistryWriter,
 *                     storageObjectAdmin)
 *                 .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("function-v2")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .serviceAccount(account.id())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(wait60s)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Secret Env
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var secret = new Secret("secret", SecretArgs.builder()
 *             .secretId("secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .userManaged(SecretReplicationUserManagedArgs.builder()
 *                     .replicas(SecretReplicationUserManagedReplicaArgs.builder()
 *                         .location("us-central1")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secretSecretVersion = new SecretVersion("secretSecretVersion", SecretVersionArgs.builder()
 *             .secret(secret.name())
 *             .secretData("secret")
 *             .enabled(true)
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("function-secret")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .secretEnvironmentVariables(FunctionServiceConfigSecretEnvironmentVariableArgs.builder()
 *                     .key("TEST")
 *                     .projectId(project)
 *                     .secret(secret.secretId())
 *                     .version("latest")
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secretSecretVersion)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Secret Volume
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var secret = new Secret("secret", SecretArgs.builder()
 *             .secretId("secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .userManaged(SecretReplicationUserManagedArgs.builder()
 *                     .replicas(SecretReplicationUserManagedReplicaArgs.builder()
 *                         .location("us-central1")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secretSecretVersion = new SecretVersion("secretSecretVersion", SecretVersionArgs.builder()
 *             .secret(secret.name())
 *             .secretData("secret")
 *             .enabled(true)
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("function-secret")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .secretVolumes(FunctionServiceConfigSecretVolumeArgs.builder()
 *                     .mountPath("/etc/secrets")
 *                     .projectId(project)
 *                     .secret(secret.secretId())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(secretSecretVersion)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Private Workerpool
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.cloudbuild.WorkerPool;
 * import com.pulumi.gcp.cloudbuild.WorkerPoolArgs;
 * import com.pulumi.gcp.cloudbuild.inputs.WorkerPoolWorkerConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var pool = new WorkerPool("pool", WorkerPoolArgs.builder()
 *             .name("workerpool")
 *             .location("us-central1")
 *             .workerConfig(WorkerPoolWorkerConfigArgs.builder()
 *                 .diskSizeGb(100)
 *                 .machineType("e2-standard-8")
 *                 .noExternalIp(false)
 *                 .build())
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("function-workerpool")
 *             .location("us-central1")
 *             .description("a new function")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .workerPool(pool.id())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Cloudfunctions2 Cmek Docs
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.artifactregistry.Repository;
 * import com.pulumi.gcp.artifactregistry.RepositoryArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
 * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
 * import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
 * import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = "my-project-name";
 * 
 *         final var projectGetProject = OrganizationsFunctions.getProject();
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name(String.format("%s-gcf-source", project))
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var eaSa = new ServiceIdentity("eaSa", ServiceIdentityArgs.builder()
 *             .project(projectGetProject.applyValue(getProjectResult -> getProjectResult.projectId()))
 *             .service("eventarc.googleapis.com")
 *             .build());
 * 
 *         var unencoded_ar_repo = new Repository("unencoded-ar-repo", RepositoryArgs.builder()
 *             .repositoryId("ar-repo")
 *             .location("us-central1")
 *             .format("DOCKER")
 *             .build());
 * 
 *         var gcfCmekKeyuser = new CryptoKeyIAMBinding("gcfCmekKeyuser", CryptoKeyIAMBindingArgs.builder()
 *             .cryptoKeyId("cmek-key")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .members(            
 *                 String.format("serviceAccount:service-%s{@literal @}gcf-admin-robot.iam.gserviceaccount.com", projectGetProject.applyValue(getProjectResult -> getProjectResult.number())),
 *                 String.format("serviceAccount:service-%s{@literal @}gcp-sa-artifactregistry.iam.gserviceaccount.com", projectGetProject.applyValue(getProjectResult -> getProjectResult.number())),
 *                 String.format("serviceAccount:service-%s{@literal @}gs-project-accounts.iam.gserviceaccount.com", projectGetProject.applyValue(getProjectResult -> getProjectResult.number())),
 *                 String.format("serviceAccount:service-%s{@literal @}serverless-robot-prod.iam.gserviceaccount.com", projectGetProject.applyValue(getProjectResult -> getProjectResult.number())),
 *                 eaSa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(eaSa)
 *                 .build());
 * 
 *         var encoded_ar_repo = new Repository("encoded-ar-repo", RepositoryArgs.builder()
 *             .location("us-central1")
 *             .repositoryId("cmek-repo")
 *             .format("DOCKER")
 *             .kmsKeyName("cmek-key")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(gcfCmekKeyuser)
 *                 .build());
 * 
 *         var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
 *             .location(encoded_ar_repo.location())
 *             .repository(encoded_ar_repo.name())
 *             .role("roles/artifactregistry.admin")
 *             .members(String.format("serviceAccount:service-%s{@literal @}gcf-admin-robot.iam.gserviceaccount.com", projectGetProject.applyValue(getProjectResult -> getProjectResult.number())))
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .name("function-cmek")
 *             .location("us-central1")
 *             .description("CMEK function")
 *             .kmsKeyName("cmek-key")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs16")
 *                 .entryPoint("helloHttp")
 *                 .dockerRepository(encoded_ar_repo.id())
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(gcfCmekKeyuser)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * function can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/functions/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, function can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:cloudfunctionsv2/function:Function default projects/{{project}}/locations/{{location}}/functions/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:cloudfunctionsv2/function:Function default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:cloudfunctionsv2/function:Function default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:cloudfunctionsv2/function:Function")
public class Function extends com.pulumi.resources.CustomResource {
    /**
     * Describes the Build step of the function that builds a container
     * from the given source.
     * Structure is documented below.
     * 
     */
    @Export(name="buildConfig", refs={FunctionBuildConfig.class}, tree="[0]")
    private Output</* @Nullable */ FunctionBuildConfig> buildConfig;

    /**
     * @return Describes the Build step of the function that builds a container
     * from the given source.
     * Structure is documented below.
     * 
     */
    public Output<Optional<FunctionBuildConfig>> buildConfig() {
        return Codegen.optional(this.buildConfig);
    }
    /**
     * User-provided description of a function.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return User-provided description of a function.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The environment the function is hosted on.
     * 
     */
    @Export(name="environment", refs={String.class}, tree="[0]")
    private Output<String> environment;

    /**
     * @return The environment the function is hosted on.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }
    /**
     * An Eventarc trigger managed by Google Cloud Functions that fires events in
     * response to a condition in another service.
     * Structure is documented below.
     * 
     */
    @Export(name="eventTrigger", refs={FunctionEventTrigger.class}, tree="[0]")
    private Output</* @Nullable */ FunctionEventTrigger> eventTrigger;

    /**
     * @return An Eventarc trigger managed by Google Cloud Functions that fires events in
     * response to a condition in another service.
     * Structure is documented below.
     * 
     */
    public Output<Optional<FunctionEventTrigger>> eventTrigger() {
        return Codegen.optional(this.eventTrigger);
    }
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
     * It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
     * 
     */
    @Export(name="kmsKeyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kmsKeyName;

    /**
     * @return Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
     * It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
     * 
     */
    public Output<Optional<String>> kmsKeyName() {
        return Codegen.optional(this.kmsKeyName);
    }
    /**
     * A set of key/value label pairs associated with this Cloud Function.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return A set of key/value label pairs associated with this Cloud Function.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of this cloud function.
     * 
     * ***
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of this cloud function.
     * 
     * ***
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * A user-defined name of the function. Function names must
     * be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A user-defined name of the function. Function names must
     * be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}functions/*`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Describes the Service being deployed.
     * Structure is documented below.
     * 
     */
    @Export(name="serviceConfig", refs={FunctionServiceConfig.class}, tree="[0]")
    private Output</* @Nullable */ FunctionServiceConfig> serviceConfig;

    /**
     * @return Describes the Service being deployed.
     * Structure is documented below.
     * 
     */
    public Output<Optional<FunctionServiceConfig>> serviceConfig() {
        return Codegen.optional(this.serviceConfig);
    }
    /**
     * Describes the current state of the function.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Describes the current state of the function.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The last update timestamp of a Cloud Function.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The last update timestamp of a Cloud Function.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Output only. The deployed url for the function.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return Output only. The deployed url for the function.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Function(String name) {
        this(name, FunctionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Function(String name, FunctionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Function(String name, FunctionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudfunctionsv2/function:Function", name, args == null ? FunctionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Function(String name, Output<String> id, @Nullable FunctionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:cloudfunctionsv2/function:Function", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Function get(String name, Output<String> id, @Nullable FunctionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Function(name, id, state, options);
    }
}
