// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dns.inputs.RecordSetRoutingPolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordSetArgs Empty = new RecordSetArgs();

    /**
     * The name of the zone in which this record set will
     * reside.
     * 
     */
    @Import(name="managedZone", required=true)
    private Output<String> managedZone;

    /**
     * @return The name of the zone in which this record set will
     * reside.
     * 
     */
    public Output<String> managedZone() {
        return this.managedZone;
    }

    /**
     * The DNS name this record set will apply to.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The DNS name this record set will apply to.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The configuration for steering traffic based on query.
     * Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
     * Structure is documented below.
     * 
     */
    @Import(name="routingPolicy")
    private @Nullable Output<RecordSetRoutingPolicyArgs> routingPolicy;

    /**
     * @return The configuration for steering traffic based on query.
     * Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RecordSetRoutingPolicyArgs>> routingPolicy() {
        return Optional.ofNullable(this.routingPolicy);
    }

    /**
     * Same as `rrdatas` above.
     * 
     */
    @Import(name="rrdatas")
    private @Nullable Output<List<String>> rrdatas;

    /**
     * @return Same as `rrdatas` above.
     * 
     */
    public Optional<Output<List<String>>> rrdatas() {
        return Optional.ofNullable(this.rrdatas);
    }

    /**
     * The time-to-live of this record set (seconds).
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The time-to-live of this record set (seconds).
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The DNS record set type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The DNS record set type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RecordSetArgs() {}

    private RecordSetArgs(RecordSetArgs $) {
        this.managedZone = $.managedZone;
        this.name = $.name;
        this.project = $.project;
        this.routingPolicy = $.routingPolicy;
        this.rrdatas = $.rrdatas;
        this.ttl = $.ttl;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordSetArgs $;

        public Builder() {
            $ = new RecordSetArgs();
        }

        public Builder(RecordSetArgs defaults) {
            $ = new RecordSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param managedZone The name of the zone in which this record set will
         * reside.
         * 
         * @return builder
         * 
         */
        public Builder managedZone(Output<String> managedZone) {
            $.managedZone = managedZone;
            return this;
        }

        /**
         * @param managedZone The name of the zone in which this record set will
         * reside.
         * 
         * @return builder
         * 
         */
        public Builder managedZone(String managedZone) {
            return managedZone(Output.of(managedZone));
        }

        /**
         * @param name The DNS name this record set will apply to.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The DNS name this record set will apply to.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param routingPolicy The configuration for steering traffic based on query.
         * Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder routingPolicy(@Nullable Output<RecordSetRoutingPolicyArgs> routingPolicy) {
            $.routingPolicy = routingPolicy;
            return this;
        }

        /**
         * @param routingPolicy The configuration for steering traffic based on query.
         * Now you can specify either Weighted Round Robin(WRR) type or Geolocation(GEO) type.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder routingPolicy(RecordSetRoutingPolicyArgs routingPolicy) {
            return routingPolicy(Output.of(routingPolicy));
        }

        /**
         * @param rrdatas Same as `rrdatas` above.
         * 
         * @return builder
         * 
         */
        public Builder rrdatas(@Nullable Output<List<String>> rrdatas) {
            $.rrdatas = rrdatas;
            return this;
        }

        /**
         * @param rrdatas Same as `rrdatas` above.
         * 
         * @return builder
         * 
         */
        public Builder rrdatas(List<String> rrdatas) {
            return rrdatas(Output.of(rrdatas));
        }

        /**
         * @param rrdatas Same as `rrdatas` above.
         * 
         * @return builder
         * 
         */
        public Builder rrdatas(String... rrdatas) {
            return rrdatas(List.of(rrdatas));
        }

        /**
         * @param ttl The time-to-live of this record set (seconds).
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The time-to-live of this record set (seconds).
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type The DNS record set type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The DNS record set type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RecordSetArgs build() {
            $.managedZone = Objects.requireNonNull($.managedZone, "expected parameter 'managedZone' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
