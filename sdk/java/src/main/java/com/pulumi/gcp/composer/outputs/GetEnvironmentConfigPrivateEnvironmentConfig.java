// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.composer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEnvironmentConfigPrivateEnvironmentConfig {
    /**
     * @return When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    private String cloudComposerConnectionSubnetwork;
    /**
     * @return The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    private String cloudComposerNetworkIpv4CidrBlock;
    /**
     * @return The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block.
     * 
     */
    private String cloudSqlIpv4CidrBlock;
    /**
     * @return Mode of internal communication within the Composer environment. Must be one of &#34;VPC_PEERING&#34; or &#34;PRIVATE_SERVICE_CONNECT&#34;.
     * 
     */
    private String connectionType;
    /**
     * @return If true, access to the public endpoint of the GKE cluster is denied. If this field is set to true, ip_allocation_policy.use_ip_aliases must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private Boolean enablePrivateEndpoint;
    /**
     * @return When enabled, IPs from public (non-RFC1918) ranges can be used for ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
     * 
     */
    private Boolean enablePrivatelyUsedPublicIps;
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster&#39;s network. If left blank, the default value of &#39;172.16.0.0/28&#39; is used.
     * 
     */
    private String masterIpv4CidrBlock;
    /**
     * @return The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    private String webServerIpv4CidrBlock;

    private GetEnvironmentConfigPrivateEnvironmentConfig() {}
    /**
     * @return When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public String cloudComposerConnectionSubnetwork() {
        return this.cloudComposerConnectionSubnetwork;
    }
    /**
     * @return The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     * 
     */
    public String cloudComposerNetworkIpv4CidrBlock() {
        return this.cloudComposerNetworkIpv4CidrBlock;
    }
    /**
     * @return The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block.
     * 
     */
    public String cloudSqlIpv4CidrBlock() {
        return this.cloudSqlIpv4CidrBlock;
    }
    /**
     * @return Mode of internal communication within the Composer environment. Must be one of &#34;VPC_PEERING&#34; or &#34;PRIVATE_SERVICE_CONNECT&#34;.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return If true, access to the public endpoint of the GKE cluster is denied. If this field is set to true, ip_allocation_policy.use_ip_aliases must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public Boolean enablePrivateEndpoint() {
        return this.enablePrivateEndpoint;
    }
    /**
     * @return When enabled, IPs from public (non-RFC1918) ranges can be used for ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
     * 
     */
    public Boolean enablePrivatelyUsedPublicIps() {
        return this.enablePrivatelyUsedPublicIps;
    }
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster&#39;s network. If left blank, the default value of &#39;172.16.0.0/28&#39; is used.
     * 
     */
    public String masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }
    /**
     * @return The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     * 
     */
    public String webServerIpv4CidrBlock() {
        return this.webServerIpv4CidrBlock;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentConfigPrivateEnvironmentConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cloudComposerConnectionSubnetwork;
        private String cloudComposerNetworkIpv4CidrBlock;
        private String cloudSqlIpv4CidrBlock;
        private String connectionType;
        private Boolean enablePrivateEndpoint;
        private Boolean enablePrivatelyUsedPublicIps;
        private String masterIpv4CidrBlock;
        private String webServerIpv4CidrBlock;
        public Builder() {}
        public Builder(GetEnvironmentConfigPrivateEnvironmentConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudComposerConnectionSubnetwork = defaults.cloudComposerConnectionSubnetwork;
    	      this.cloudComposerNetworkIpv4CidrBlock = defaults.cloudComposerNetworkIpv4CidrBlock;
    	      this.cloudSqlIpv4CidrBlock = defaults.cloudSqlIpv4CidrBlock;
    	      this.connectionType = defaults.connectionType;
    	      this.enablePrivateEndpoint = defaults.enablePrivateEndpoint;
    	      this.enablePrivatelyUsedPublicIps = defaults.enablePrivatelyUsedPublicIps;
    	      this.masterIpv4CidrBlock = defaults.masterIpv4CidrBlock;
    	      this.webServerIpv4CidrBlock = defaults.webServerIpv4CidrBlock;
        }

        @CustomType.Setter
        public Builder cloudComposerConnectionSubnetwork(String cloudComposerConnectionSubnetwork) {
            if (cloudComposerConnectionSubnetwork == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "cloudComposerConnectionSubnetwork");
            }
            this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder cloudComposerNetworkIpv4CidrBlock(String cloudComposerNetworkIpv4CidrBlock) {
            if (cloudComposerNetworkIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "cloudComposerNetworkIpv4CidrBlock");
            }
            this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder cloudSqlIpv4CidrBlock(String cloudSqlIpv4CidrBlock) {
            if (cloudSqlIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "cloudSqlIpv4CidrBlock");
            }
            this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            if (connectionType == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "connectionType");
            }
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
            if (enablePrivateEndpoint == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "enablePrivateEndpoint");
            }
            this.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivatelyUsedPublicIps(Boolean enablePrivatelyUsedPublicIps) {
            if (enablePrivatelyUsedPublicIps == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "enablePrivatelyUsedPublicIps");
            }
            this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
            return this;
        }
        @CustomType.Setter
        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            if (masterIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "masterIpv4CidrBlock");
            }
            this.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder webServerIpv4CidrBlock(String webServerIpv4CidrBlock) {
            if (webServerIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentConfigPrivateEnvironmentConfig", "webServerIpv4CidrBlock");
            }
            this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
            return this;
        }
        public GetEnvironmentConfigPrivateEnvironmentConfig build() {
            final var _resultValue = new GetEnvironmentConfigPrivateEnvironmentConfig();
            _resultValue.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
            _resultValue.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
            _resultValue.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
            _resultValue.connectionType = connectionType;
            _resultValue.enablePrivateEndpoint = enablePrivateEndpoint;
            _resultValue.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
            _resultValue.masterIpv4CidrBlock = masterIpv4CidrBlock;
            _resultValue.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
            return _resultValue;
        }
    }
}
