// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataStoreArgs Empty = new DataStoreArgs();

    /**
     * The content config of the data store.
     * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
     * 
     */
    @Import(name="contentConfig", required=true)
    private Output<String> contentConfig;

    /**
     * @return The content config of the data store.
     * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
     * 
     */
    public Output<String> contentConfig() {
        return this.contentConfig;
    }

    /**
     * If true, an advanced data store for site search will be created. If the
     * data store is not configured as site search (GENERIC vertical and
     * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     * 
     */
    @Import(name="createAdvancedSiteSearch")
    private @Nullable Output<Boolean> createAdvancedSiteSearch;

    /**
     * @return If true, an advanced data store for site search will be created. If the
     * data store is not configured as site search (GENERIC vertical and
     * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     * 
     */
    public Optional<Output<Boolean>> createAdvancedSiteSearch() {
        return Optional.ofNullable(this.createAdvancedSiteSearch);
    }

    /**
     * The unique id of the data store.
     * 
     * ***
     * 
     */
    @Import(name="dataStoreId", required=true)
    private Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     * ***
     * 
     */
    public Output<String> dataStoreId() {
        return this.dataStoreId;
    }

    /**
     * The display name of the data store. This field must be a UTF-8 encoded
     * string with a length limit of 128 characters.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the data store. This field must be a UTF-8 encoded
     * string with a length limit of 128 characters.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The industry vertical that the data store registers.
     * Possible values are: `GENERIC`, `MEDIA`.
     * 
     */
    @Import(name="industryVertical", required=true)
    private Output<String> industryVertical;

    /**
     * @return The industry vertical that the data store registers.
     * Possible values are: `GENERIC`, `MEDIA`.
     * 
     */
    public Output<String> industryVertical() {
        return this.industryVertical;
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The solutions that the data store enrolls.
     * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
     * 
     */
    @Import(name="solutionTypes")
    private @Nullable Output<List<String>> solutionTypes;

    /**
     * @return The solutions that the data store enrolls.
     * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
     * 
     */
    public Optional<Output<List<String>>> solutionTypes() {
        return Optional.ofNullable(this.solutionTypes);
    }

    private DataStoreArgs() {}

    private DataStoreArgs(DataStoreArgs $) {
        this.contentConfig = $.contentConfig;
        this.createAdvancedSiteSearch = $.createAdvancedSiteSearch;
        this.dataStoreId = $.dataStoreId;
        this.displayName = $.displayName;
        this.industryVertical = $.industryVertical;
        this.location = $.location;
        this.project = $.project;
        this.solutionTypes = $.solutionTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreArgs $;

        public Builder() {
            $ = new DataStoreArgs();
        }

        public Builder(DataStoreArgs defaults) {
            $ = new DataStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentConfig The content config of the data store.
         * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
         * 
         * @return builder
         * 
         */
        public Builder contentConfig(Output<String> contentConfig) {
            $.contentConfig = contentConfig;
            return this;
        }

        /**
         * @param contentConfig The content config of the data store.
         * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
         * 
         * @return builder
         * 
         */
        public Builder contentConfig(String contentConfig) {
            return contentConfig(Output.of(contentConfig));
        }

        /**
         * @param createAdvancedSiteSearch If true, an advanced data store for site search will be created. If the
         * data store is not configured as site search (GENERIC vertical and
         * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder createAdvancedSiteSearch(@Nullable Output<Boolean> createAdvancedSiteSearch) {
            $.createAdvancedSiteSearch = createAdvancedSiteSearch;
            return this;
        }

        /**
         * @param createAdvancedSiteSearch If true, an advanced data store for site search will be created. If the
         * data store is not configured as site search (GENERIC vertical and
         * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder createAdvancedSiteSearch(Boolean createAdvancedSiteSearch) {
            return createAdvancedSiteSearch(Output.of(createAdvancedSiteSearch));
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(Output<String> dataStoreId) {
            $.dataStoreId = dataStoreId;
            return this;
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(String dataStoreId) {
            return dataStoreId(Output.of(dataStoreId));
        }

        /**
         * @param displayName The display name of the data store. This field must be a UTF-8 encoded
         * string with a length limit of 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the data store. This field must be a UTF-8 encoded
         * string with a length limit of 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param industryVertical The industry vertical that the data store registers.
         * Possible values are: `GENERIC`, `MEDIA`.
         * 
         * @return builder
         * 
         */
        public Builder industryVertical(Output<String> industryVertical) {
            $.industryVertical = industryVertical;
            return this;
        }

        /**
         * @param industryVertical The industry vertical that the data store registers.
         * Possible values are: `GENERIC`, `MEDIA`.
         * 
         * @return builder
         * 
         */
        public Builder industryVertical(String industryVertical) {
            return industryVertical(Output.of(industryVertical));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param solutionTypes The solutions that the data store enrolls.
         * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(@Nullable Output<List<String>> solutionTypes) {
            $.solutionTypes = solutionTypes;
            return this;
        }

        /**
         * @param solutionTypes The solutions that the data store enrolls.
         * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(List<String> solutionTypes) {
            return solutionTypes(Output.of(solutionTypes));
        }

        /**
         * @param solutionTypes The solutions that the data store enrolls.
         * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(String... solutionTypes) {
            return solutionTypes(List.of(solutionTypes));
        }

        public DataStoreArgs build() {
            if ($.contentConfig == null) {
                throw new MissingRequiredPropertyException("DataStoreArgs", "contentConfig");
            }
            if ($.dataStoreId == null) {
                throw new MissingRequiredPropertyException("DataStoreArgs", "dataStoreId");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("DataStoreArgs", "displayName");
            }
            if ($.industryVertical == null) {
                throw new MissingRequiredPropertyException("DataStoreArgs", "industryVertical");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("DataStoreArgs", "location");
            }
            return $;
        }
    }

}
