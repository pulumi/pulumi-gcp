// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.spanner.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.spanner.outputs.GetDatabaseEncryptionConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseResult {
    private String databaseDialect;
    private List<String> ddls;
    private Boolean deletionProtection;
    private Boolean enableDropProtection;
    private List<GetDatabaseEncryptionConfig> encryptionConfigs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String instance;
    private String name;
    private @Nullable String project;
    private String state;
    private String versionRetentionPeriod;

    private GetDatabaseResult() {}
    public String databaseDialect() {
        return this.databaseDialect;
    }
    public List<String> ddls() {
        return this.ddls;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public Boolean enableDropProtection() {
        return this.enableDropProtection;
    }
    public List<GetDatabaseEncryptionConfig> encryptionConfigs() {
        return this.encryptionConfigs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instance() {
        return this.instance;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String state() {
        return this.state;
    }
    public String versionRetentionPeriod() {
        return this.versionRetentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String databaseDialect;
        private List<String> ddls;
        private Boolean deletionProtection;
        private Boolean enableDropProtection;
        private List<GetDatabaseEncryptionConfig> encryptionConfigs;
        private String id;
        private String instance;
        private String name;
        private @Nullable String project;
        private String state;
        private String versionRetentionPeriod;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseDialect = defaults.databaseDialect;
    	      this.ddls = defaults.ddls;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.enableDropProtection = defaults.enableDropProtection;
    	      this.encryptionConfigs = defaults.encryptionConfigs;
    	      this.id = defaults.id;
    	      this.instance = defaults.instance;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.versionRetentionPeriod = defaults.versionRetentionPeriod;
        }

        @CustomType.Setter
        public Builder databaseDialect(String databaseDialect) {
            if (databaseDialect == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "databaseDialect");
            }
            this.databaseDialect = databaseDialect;
            return this;
        }
        @CustomType.Setter
        public Builder ddls(List<String> ddls) {
            if (ddls == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "ddls");
            }
            this.ddls = ddls;
            return this;
        }
        public Builder ddls(String... ddls) {
            return ddls(List.of(ddls));
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder enableDropProtection(Boolean enableDropProtection) {
            if (enableDropProtection == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "enableDropProtection");
            }
            this.enableDropProtection = enableDropProtection;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfigs(List<GetDatabaseEncryptionConfig> encryptionConfigs) {
            if (encryptionConfigs == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "encryptionConfigs");
            }
            this.encryptionConfigs = encryptionConfigs;
            return this;
        }
        public Builder encryptionConfigs(GetDatabaseEncryptionConfig... encryptionConfigs) {
            return encryptionConfigs(List.of(encryptionConfigs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instance(String instance) {
            if (instance == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "instance");
            }
            this.instance = instance;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder versionRetentionPeriod(String versionRetentionPeriod) {
            if (versionRetentionPeriod == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "versionRetentionPeriod");
            }
            this.versionRetentionPeriod = versionRetentionPeriod;
            return this;
        }
        public GetDatabaseResult build() {
            final var _resultValue = new GetDatabaseResult();
            _resultValue.databaseDialect = databaseDialect;
            _resultValue.ddls = ddls;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.enableDropProtection = enableDropProtection;
            _resultValue.encryptionConfigs = encryptionConfigs;
            _resultValue.id = id;
            _resultValue.instance = instance;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.state = state;
            _resultValue.versionRetentionPeriod = versionRetentionPeriod;
            return _resultValue;
        }
    }
}
