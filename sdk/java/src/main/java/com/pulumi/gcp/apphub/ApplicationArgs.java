// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apphub.inputs.ApplicationAttributesArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * Required. The Application identifier.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return Required. The Application identifier.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * Consumer provided attributes.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<ApplicationAttributesArgs> attributes;

    /**
     * @return Consumer provided attributes.
     * 
     */
    public Optional<Output<ApplicationAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Optional. User-defined description of an Application.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. User-defined description of an Application.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Optional. User-defined name for the Application.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Optional. User-defined name for the Application.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Part of `parent`. See documentation of `projectsId`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Part of `parent`. See documentation of `projectsId`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Scope of an application.
     * Structure is documented below.
     * 
     */
    @Import(name="scope", required=true)
    private Output<ApplicationScopeArgs> scope;

    /**
     * @return Scope of an application.
     * Structure is documented below.
     * 
     */
    public Output<ApplicationScopeArgs> scope() {
        return this.scope;
    }

    private ApplicationArgs() {}

    private ApplicationArgs(ApplicationArgs $) {
        this.applicationId = $.applicationId;
        this.attributes = $.attributes;
        this.description = $.description;
        this.displayName = $.displayName;
        this.location = $.location;
        this.project = $.project;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationArgs $;

        public Builder() {
            $ = new ApplicationArgs();
        }

        public Builder(ApplicationArgs defaults) {
            $ = new ApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Required. The Application identifier.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Required. The Application identifier.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param attributes Consumer provided attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<ApplicationAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Consumer provided attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(ApplicationAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param description Optional. User-defined description of an Application.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. User-defined description of an Application.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Optional. User-defined name for the Application.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Optional. User-defined name for the Application.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location Part of `parent`. See documentation of `projectsId`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Part of `parent`. See documentation of `projectsId`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scope Scope of an application.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<ApplicationScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of an application.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder scope(ApplicationScopeArgs scope) {
            return scope(Output.of(scope));
        }

        public ApplicationArgs build() {
            if ($.applicationId == null) {
                throw new MissingRequiredPropertyException("ApplicationArgs", "applicationId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ApplicationArgs", "location");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("ApplicationArgs", "scope");
            }
            return $;
        }
    }

}
