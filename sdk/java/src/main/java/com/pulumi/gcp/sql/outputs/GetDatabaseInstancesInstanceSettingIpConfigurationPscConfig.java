// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.sql.outputs.GetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig {
    /**
     * @return List of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
     * 
     */
    private List<String> allowedConsumerProjects;
    /**
     * @return Name of network attachment resource used to authorize a producer service to connect a PSC interface to the consumer&#39;s VPC. For example: &#34;projects/myProject/regions/myRegion/networkAttachments/myNetworkAttachment&#34;. This is required to enable outbound connection on a PSC instance.
     * 
     */
    private String networkAttachmentUri;
    /**
     * @return A comma-separated list of networks or a comma-separated list of network-project pairs. Each project in this list is represented by a project number (numeric) or by a project ID (alphanumeric). This allows Private Service Connect connections to be created automatically for the specified networks.
     * 
     */
    private List<GetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection> pscAutoConnections;
    /**
     * @return Whether PSC connectivity is enabled for this instance.
     * 
     */
    private Boolean pscEnabled;

    private GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig() {}
    /**
     * @return List of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
     * 
     */
    public List<String> allowedConsumerProjects() {
        return this.allowedConsumerProjects;
    }
    /**
     * @return Name of network attachment resource used to authorize a producer service to connect a PSC interface to the consumer&#39;s VPC. For example: &#34;projects/myProject/regions/myRegion/networkAttachments/myNetworkAttachment&#34;. This is required to enable outbound connection on a PSC instance.
     * 
     */
    public String networkAttachmentUri() {
        return this.networkAttachmentUri;
    }
    /**
     * @return A comma-separated list of networks or a comma-separated list of network-project pairs. Each project in this list is represented by a project number (numeric) or by a project ID (alphanumeric). This allows Private Service Connect connections to be created automatically for the specified networks.
     * 
     */
    public List<GetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection> pscAutoConnections() {
        return this.pscAutoConnections;
    }
    /**
     * @return Whether PSC connectivity is enabled for this instance.
     * 
     */
    public Boolean pscEnabled() {
        return this.pscEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedConsumerProjects;
        private String networkAttachmentUri;
        private List<GetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection> pscAutoConnections;
        private Boolean pscEnabled;
        public Builder() {}
        public Builder(GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedConsumerProjects = defaults.allowedConsumerProjects;
    	      this.networkAttachmentUri = defaults.networkAttachmentUri;
    	      this.pscAutoConnections = defaults.pscAutoConnections;
    	      this.pscEnabled = defaults.pscEnabled;
        }

        @CustomType.Setter
        public Builder allowedConsumerProjects(List<String> allowedConsumerProjects) {
            if (allowedConsumerProjects == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig", "allowedConsumerProjects");
            }
            this.allowedConsumerProjects = allowedConsumerProjects;
            return this;
        }
        public Builder allowedConsumerProjects(String... allowedConsumerProjects) {
            return allowedConsumerProjects(List.of(allowedConsumerProjects));
        }
        @CustomType.Setter
        public Builder networkAttachmentUri(String networkAttachmentUri) {
            if (networkAttachmentUri == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig", "networkAttachmentUri");
            }
            this.networkAttachmentUri = networkAttachmentUri;
            return this;
        }
        @CustomType.Setter
        public Builder pscAutoConnections(List<GetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection> pscAutoConnections) {
            if (pscAutoConnections == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig", "pscAutoConnections");
            }
            this.pscAutoConnections = pscAutoConnections;
            return this;
        }
        public Builder pscAutoConnections(GetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection... pscAutoConnections) {
            return pscAutoConnections(List.of(pscAutoConnections));
        }
        @CustomType.Setter
        public Builder pscEnabled(Boolean pscEnabled) {
            if (pscEnabled == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig", "pscEnabled");
            }
            this.pscEnabled = pscEnabled;
            return this;
        }
        public GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig build() {
            final var _resultValue = new GetDatabaseInstancesInstanceSettingIpConfigurationPscConfig();
            _resultValue.allowedConsumerProjects = allowedConsumerProjects;
            _resultValue.networkAttachmentUri = networkAttachmentUri;
            _resultValue.pscAutoConnections = pscAutoConnections;
            _resultValue.pscEnabled = pscEnabled;
            return _resultValue;
        }
    }
}
