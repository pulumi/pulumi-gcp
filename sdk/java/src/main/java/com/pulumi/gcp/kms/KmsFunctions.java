// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyPlainArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionPlainArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsPlainArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeysArgs;
import com.pulumi.gcp.kms.inputs.GetCryptoKeysPlainArgs;
import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyArgs;
import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
import com.pulumi.gcp.kms.inputs.GetKMSKeyRingPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKMSSecretArgs;
import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricArgs;
import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextArgs;
import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKMSSecretPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyArgs;
import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyPlainArgs;
import com.pulumi.gcp.kms.inputs.GetKeyRingsArgs;
import com.pulumi.gcp.kms.inputs.GetKeyRingsPlainArgs;
import com.pulumi.gcp.kms.outputs.GetCryptoKeyIamPolicyResult;
import com.pulumi.gcp.kms.outputs.GetCryptoKeyLatestVersionResult;
import com.pulumi.gcp.kms.outputs.GetCryptoKeyVersionsResult;
import com.pulumi.gcp.kms.outputs.GetCryptoKeysResult;
import com.pulumi.gcp.kms.outputs.GetEkmConnectionIamPolicyResult;
import com.pulumi.gcp.kms.outputs.GetKMSCryptoKeyResult;
import com.pulumi.gcp.kms.outputs.GetKMSCryptoKeyVersionResult;
import com.pulumi.gcp.kms.outputs.GetKMSKeyRingResult;
import com.pulumi.gcp.kms.outputs.GetKMSSecretAsymmetricResult;
import com.pulumi.gcp.kms.outputs.GetKMSSecretCiphertextResult;
import com.pulumi.gcp.kms.outputs.GetKMSSecretResult;
import com.pulumi.gcp.kms.outputs.GetKeyRingIamPolicyResult;
import com.pulumi.gcp.kms.outputs.GetKeyRingsResult;
import java.util.concurrent.CompletableFuture;

public final class KmsFunctions {
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS crypto key.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = KmsFunctions.getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs.builder()
     *             .cryptoKeyId(cryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyIamPolicyResult> getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs args) {
        return getCryptoKeyIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS crypto key.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = KmsFunctions.getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs.builder()
     *             .cryptoKeyId(cryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCryptoKeyIamPolicyResult> getCryptoKeyIamPolicyPlain(GetCryptoKeyIamPolicyPlainArgs args) {
        return getCryptoKeyIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS crypto key.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = KmsFunctions.getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs.builder()
     *             .cryptoKeyId(cryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyIamPolicyResult> getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy", TypeShape.of(GetCryptoKeyIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS crypto key.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = KmsFunctions.getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs.builder()
     *             .cryptoKeyId(cryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyIamPolicyResult> getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy", TypeShape.of(GetCryptoKeyIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS crypto key.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = KmsFunctions.getCryptoKeyIamPolicy(GetCryptoKeyIamPolicyArgs.builder()
     *             .cryptoKeyId(cryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCryptoKeyIamPolicyResult> getCryptoKeyIamPolicyPlain(GetCryptoKeyIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getCryptoKeyIamPolicy:getCryptoKeyIamPolicy", TypeShape.of(GetCryptoKeyIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to the latest Google Cloud Platform KMS CryptoKeyVersion in a CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyLatestVersion = KmsFunctions.getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyLatestVersionResult> getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs args) {
        return getCryptoKeyLatestVersion(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to the latest Google Cloud Platform KMS CryptoKeyVersion in a CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyLatestVersion = KmsFunctions.getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCryptoKeyLatestVersionResult> getCryptoKeyLatestVersionPlain(GetCryptoKeyLatestVersionPlainArgs args) {
        return getCryptoKeyLatestVersionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to the latest Google Cloud Platform KMS CryptoKeyVersion in a CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyLatestVersion = KmsFunctions.getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyLatestVersionResult> getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeyLatestVersion:getCryptoKeyLatestVersion", TypeShape.of(GetCryptoKeyLatestVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to the latest Google Cloud Platform KMS CryptoKeyVersion in a CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyLatestVersion = KmsFunctions.getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyLatestVersionResult> getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeyLatestVersion:getCryptoKeyLatestVersion", TypeShape.of(GetCryptoKeyLatestVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to the latest Google Cloud Platform KMS CryptoKeyVersion in a CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyLatestVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyLatestVersion = KmsFunctions.getCryptoKeyLatestVersion(GetCryptoKeyLatestVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCryptoKeyLatestVersionResult> getCryptoKeyLatestVersionPlain(GetCryptoKeyLatestVersionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getCryptoKeyLatestVersion:getCryptoKeyLatestVersion", TypeShape.of(GetCryptoKeyLatestVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Google Cloud Platform KMS CryptoKeyVersions. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersions = KmsFunctions.getCryptoKeyVersions(GetCryptoKeyVersionsArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyVersionsResult> getCryptoKeyVersions(GetCryptoKeyVersionsArgs args) {
        return getCryptoKeyVersions(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Google Cloud Platform KMS CryptoKeyVersions. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersions = KmsFunctions.getCryptoKeyVersions(GetCryptoKeyVersionsArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCryptoKeyVersionsResult> getCryptoKeyVersionsPlain(GetCryptoKeyVersionsPlainArgs args) {
        return getCryptoKeyVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Google Cloud Platform KMS CryptoKeyVersions. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersions = KmsFunctions.getCryptoKeyVersions(GetCryptoKeyVersionsArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyVersionsResult> getCryptoKeyVersions(GetCryptoKeyVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeyVersions:getCryptoKeyVersions", TypeShape.of(GetCryptoKeyVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Google Cloud Platform KMS CryptoKeyVersions. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersions = KmsFunctions.getCryptoKeyVersions(GetCryptoKeyVersionsArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCryptoKeyVersionsResult> getCryptoKeyVersions(GetCryptoKeyVersionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeyVersions:getCryptoKeyVersions", TypeShape.of(GetCryptoKeyVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Google Cloud Platform KMS CryptoKeyVersions. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetCryptoKeyVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersions = KmsFunctions.getCryptoKeyVersions(GetCryptoKeyVersionsArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCryptoKeyVersionsResult> getCryptoKeyVersionsPlain(GetCryptoKeyVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getCryptoKeyVersions:getCryptoKeyVersions", TypeShape.of(GetCryptoKeyVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to all Google Cloud Platform KMS CryptoKeys in a given KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     */
    public static Output<GetCryptoKeysResult> getCryptoKeys(GetCryptoKeysArgs args) {
        return getCryptoKeys(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to all Google Cloud Platform KMS CryptoKeys in a given KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     */
    public static CompletableFuture<GetCryptoKeysResult> getCryptoKeysPlain(GetCryptoKeysPlainArgs args) {
        return getCryptoKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to all Google Cloud Platform KMS CryptoKeys in a given KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     */
    public static Output<GetCryptoKeysResult> getCryptoKeys(GetCryptoKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeys:getCryptoKeys", TypeShape.of(GetCryptoKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to all Google Cloud Platform KMS CryptoKeys in a given KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     */
    public static Output<GetCryptoKeysResult> getCryptoKeys(GetCryptoKeysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getCryptoKeys:getCryptoKeys", TypeShape.of(GetCryptoKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to all Google Cloud Platform KMS CryptoKeys in a given KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     */
    public static CompletableFuture<GetCryptoKeysResult> getCryptoKeysPlain(GetCryptoKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getCryptoKeys:getCryptoKeys", TypeShape.of(GetCryptoKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for ekmconnection
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = KmsFunctions.getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs.builder()
     *             .project(example_ekmconnection.project())
     *             .location(example_ekmconnection.location())
     *             .name(example_ekmconnection.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEkmConnectionIamPolicyResult> getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs args) {
        return getEkmConnectionIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for ekmconnection
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = KmsFunctions.getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs.builder()
     *             .project(example_ekmconnection.project())
     *             .location(example_ekmconnection.location())
     *             .name(example_ekmconnection.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEkmConnectionIamPolicyResult> getEkmConnectionIamPolicyPlain(GetEkmConnectionIamPolicyPlainArgs args) {
        return getEkmConnectionIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for ekmconnection
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = KmsFunctions.getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs.builder()
     *             .project(example_ekmconnection.project())
     *             .location(example_ekmconnection.location())
     *             .name(example_ekmconnection.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEkmConnectionIamPolicyResult> getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getEkmConnectionIamPolicy:getEkmConnectionIamPolicy", TypeShape.of(GetEkmConnectionIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for ekmconnection
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = KmsFunctions.getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs.builder()
     *             .project(example_ekmconnection.project())
     *             .location(example_ekmconnection.location())
     *             .name(example_ekmconnection.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEkmConnectionIamPolicyResult> getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getEkmConnectionIamPolicy:getEkmConnectionIamPolicy", TypeShape.of(GetEkmConnectionIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for ekmconnection
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetEkmConnectionIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var policy = KmsFunctions.getEkmConnectionIamPolicy(GetEkmConnectionIamPolicyArgs.builder()
     *             .project(example_ekmconnection.project())
     *             .location(example_ekmconnection.location())
     *             .name(example_ekmconnection.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEkmConnectionIamPolicyResult> getEkmConnectionIamPolicyPlain(GetEkmConnectionIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getEkmConnectionIamPolicy:getEkmConnectionIamPolicy", TypeShape.of(GetEkmConnectionIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSCryptoKeyResult> getKMSCryptoKey(GetKMSCryptoKeyArgs args) {
        return getKMSCryptoKey(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKMSCryptoKeyResult> getKMSCryptoKeyPlain(GetKMSCryptoKeyPlainArgs args) {
        return getKMSCryptoKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSCryptoKeyResult> getKMSCryptoKey(GetKMSCryptoKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSCryptoKey:getKMSCryptoKey", TypeShape.of(GetKMSCryptoKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSCryptoKeyResult> getKMSCryptoKey(GetKMSCryptoKeyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSCryptoKey:getKMSCryptoKey", TypeShape.of(GetKMSCryptoKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKey. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).
     * 
     * A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
     * Google Cloud KMS KeyRing.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKMSCryptoKeyResult> getKMSCryptoKeyPlain(GetKMSCryptoKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKMSCryptoKey:getKMSCryptoKey", TypeShape.of(GetKMSCryptoKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKeyVersion. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersion = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSCryptoKeyVersionResult> getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs args) {
        return getKMSCryptoKeyVersion(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKeyVersion. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersion = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKMSCryptoKeyVersionResult> getKMSCryptoKeyVersionPlain(GetKMSCryptoKeyVersionPlainArgs args) {
        return getKMSCryptoKeyVersionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKeyVersion. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersion = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSCryptoKeyVersionResult> getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion", TypeShape.of(GetKMSCryptoKeyVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKeyVersion. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersion = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSCryptoKeyVersionResult> getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion", TypeShape.of(GetKMSCryptoKeyVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to a Google Cloud Platform KMS CryptoKeyVersion. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_version)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions).
     * 
     * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKey(GetKMSCryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.applyValue(getKMSKeyRingResult -> getKMSKeyRingResult.id()))
     *             .build());
     * 
     *         final var myCryptoKeyVersion = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKMSCryptoKeyVersionResult> getKMSCryptoKeyVersionPlain(GetKMSCryptoKeyVersionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKMSCryptoKeyVersion:getKMSCryptoKeyVersion", TypeShape.of(GetKMSCryptoKeyVersionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Google Cloud Platform KMS KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_ring)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings).
     * 
     * A KeyRing is a grouping of CryptoKeys for organizational purposes. A KeyRing belongs to a Google Cloud Platform Project
     * and resides in a specific location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSKeyRingResult> getKMSKeyRing(GetKMSKeyRingArgs args) {
        return getKMSKeyRing(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Google Cloud Platform KMS KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_ring)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings).
     * 
     * A KeyRing is a grouping of CryptoKeys for organizational purposes. A KeyRing belongs to a Google Cloud Platform Project
     * and resides in a specific location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKMSKeyRingResult> getKMSKeyRingPlain(GetKMSKeyRingPlainArgs args) {
        return getKMSKeyRingPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to Google Cloud Platform KMS KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_ring)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings).
     * 
     * A KeyRing is a grouping of CryptoKeys for organizational purposes. A KeyRing belongs to a Google Cloud Platform Project
     * and resides in a specific location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSKeyRingResult> getKMSKeyRing(GetKMSKeyRingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSKeyRing:getKMSKeyRing", TypeShape.of(GetKMSKeyRingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Google Cloud Platform KMS KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_ring)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings).
     * 
     * A KeyRing is a grouping of CryptoKeys for organizational purposes. A KeyRing belongs to a Google Cloud Platform Project
     * and resides in a specific location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKMSKeyRingResult> getKMSKeyRing(GetKMSKeyRingArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSKeyRing:getKMSKeyRing", TypeShape.of(GetKMSKeyRingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to Google Cloud Platform KMS KeyRing. For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key_ring)
     * and
     * [API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings).
     * 
     * A KeyRing is a grouping of CryptoKeys for organizational purposes. A KeyRing belongs to a Google Cloud Platform Project
     * and resides in a specific location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSKeyRingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKeyRing = KmsFunctions.getKMSKeyRing(GetKMSKeyRingArgs.builder()
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKMSKeyRingResult> getKMSKeyRingPlain(GetKMSKeyRingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKMSKeyRing:getKMSKeyRing", TypeShape.of(GetKMSKeyRingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to use data encrypted with Google Cloud KMS
     * within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data provider will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/encrypt) to encrypt some
     * sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecret(GetKMSSecretArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .ciphertext("CiQAqD+xX4SXOSziF4a8JYvq4spfAuWhhYSNul33H85HnVtNQW4SOgDu2UZ46dQCRFl5MF6ekabviN8xq+F+2035ZJ85B+xTYXqNf4mZs0RJitnWWuXlYQh6axnnJYu3kDU=")
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPassword.applyValue(getKMSSecretResult -> getKMSSecretResult.plaintext()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static Output<GetKMSSecretResult> getKMSSecret(GetKMSSecretArgs args) {
        return getKMSSecret(args, InvokeOptions.Empty);
    }
    /**
     * This data source allows you to use data encrypted with Google Cloud KMS
     * within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data provider will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/encrypt) to encrypt some
     * sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecret(GetKMSSecretArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .ciphertext("CiQAqD+xX4SXOSziF4a8JYvq4spfAuWhhYSNul33H85HnVtNQW4SOgDu2UZ46dQCRFl5MF6ekabviN8xq+F+2035ZJ85B+xTYXqNf4mZs0RJitnWWuXlYQh6axnnJYu3kDU=")
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPassword.applyValue(getKMSSecretResult -> getKMSSecretResult.plaintext()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static CompletableFuture<GetKMSSecretResult> getKMSSecretPlain(GetKMSSecretPlainArgs args) {
        return getKMSSecretPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source allows you to use data encrypted with Google Cloud KMS
     * within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data provider will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/encrypt) to encrypt some
     * sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecret(GetKMSSecretArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .ciphertext("CiQAqD+xX4SXOSziF4a8JYvq4spfAuWhhYSNul33H85HnVtNQW4SOgDu2UZ46dQCRFl5MF6ekabviN8xq+F+2035ZJ85B+xTYXqNf4mZs0RJitnWWuXlYQh6axnnJYu3kDU=")
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPassword.applyValue(getKMSSecretResult -> getKMSSecretResult.plaintext()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static Output<GetKMSSecretResult> getKMSSecret(GetKMSSecretArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSSecret:getKMSSecret", TypeShape.of(GetKMSSecretResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to use data encrypted with Google Cloud KMS
     * within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data provider will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/encrypt) to encrypt some
     * sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecret(GetKMSSecretArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .ciphertext("CiQAqD+xX4SXOSziF4a8JYvq4spfAuWhhYSNul33H85HnVtNQW4SOgDu2UZ46dQCRFl5MF6ekabviN8xq+F+2035ZJ85B+xTYXqNf4mZs0RJitnWWuXlYQh6axnnJYu3kDU=")
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPassword.applyValue(getKMSSecretResult -> getKMSSecretResult.plaintext()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static Output<GetKMSSecretResult> getKMSSecret(GetKMSSecretArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSSecret:getKMSSecret", TypeShape.of(GetKMSSecretResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to use data encrypted with Google Cloud KMS
     * within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data provider will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/encrypt) to encrypt some
     * sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecret(GetKMSSecretArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .ciphertext("CiQAqD+xX4SXOSziF4a8JYvq4spfAuWhhYSNul33H85HnVtNQW4SOgDu2UZ46dQCRFl5MF6ekabviN8xq+F+2035ZJ85B+xTYXqNf4mZs0RJitnWWuXlYQh6axnnJYu3kDU=")
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPassword.applyValue(getKMSSecretResult -> getKMSSecretResult.plaintext()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static CompletableFuture<GetKMSSecretResult> getKMSSecretPlain(GetKMSSecretPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKMSSecret:getKMSSecret", TypeShape.of(GetKMSSecretResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateArgs;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKeyCryptoKey = new CryptoKey("myCryptoKeyCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .purpose("ASYMMETRIC_DECRYPT")
     *             .versionTemplate(CryptoKeyVersionTemplateArgs.builder()
     *                 .algorithm("RSA_DECRYPT_OAEP_4096_SHA256")
     *                 .build())
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myCryptoKeyCryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/kms/docs/encrypt-decrypt-rsa#kms-encrypt-asymmetric-cli) to encrypt
     * some sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs.builder()
     *             .cryptoKeyVersion(myCryptoKey.id())
     *             .crc32("12c59e54")
     *             .ciphertext("""
     *     M7nUoba9EGVTu2LjNjBKGdGVBYjyS/i/AY+4yQMQF0Qf/RfUfX31Jw6+VO9OuThq
     *     ylu/7ihX9XD4bM7yYdXnMv9p1OHQUlorSBSbb/J6n1W9UJhcp6um8Tw8/Isx4f75
     *     4PskYS6f8Y2ItliGt1/A9iR5BTgGtJBwOxMlgoX2Ggq+Nh4E5SbdoaE5o6CO1nBx
     *     eIPsPEebQ6qC4JehQM3IGuV/lrm58+hZhaXAqNzX1cEYyAt5GYqJIVCiI585SUYs
     *     wRToGyTgaN+zthF0HP9IWlR4Am4LmJ/1OcePTnYw11CkU8wNRbDzVAzogwNH+rXr
     *     LTmf7hxVjBm6bBSVSNFcBKAXFlllubSfIeZ5hgzGqn54OmSf6odO12L5JxllddHc
     *     yAd54vWKs2kJtnsKV2V4ZdkI0w6y1TeI67baFZDNGo6qsCpFMPnvv7d46Pg2VOp1
     *     J6Ivner0NnNHE4MzNmpZRk8WXMwqq4P/gTiT7F/aCX6oFCUQ4AWPQhJYh2dkcOmL
     *     IP+47Veb10aFn61F1CJwpmOOiGNXKdDT1vK8CMnnwhm825K0q/q9Zqpzc1+1ae1z
     *     mSqol1zCoa88CuSN6nTLQlVnN/dzfrGbc0boJPaM0iGhHtSzHk4SWg84LhiJB1q9
     *     A9XFJmOVdkvRY9nnz/iVLAdd0Q3vFtLqCdUYsNN2yh4=
     *             """)
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPasswordGoogleKmsSecret.plaintext())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static Output<GetKMSSecretAsymmetricResult> getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs args) {
        return getKMSSecretAsymmetric(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateArgs;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKeyCryptoKey = new CryptoKey("myCryptoKeyCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .purpose("ASYMMETRIC_DECRYPT")
     *             .versionTemplate(CryptoKeyVersionTemplateArgs.builder()
     *                 .algorithm("RSA_DECRYPT_OAEP_4096_SHA256")
     *                 .build())
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myCryptoKeyCryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/kms/docs/encrypt-decrypt-rsa#kms-encrypt-asymmetric-cli) to encrypt
     * some sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs.builder()
     *             .cryptoKeyVersion(myCryptoKey.id())
     *             .crc32("12c59e54")
     *             .ciphertext("""
     *     M7nUoba9EGVTu2LjNjBKGdGVBYjyS/i/AY+4yQMQF0Qf/RfUfX31Jw6+VO9OuThq
     *     ylu/7ihX9XD4bM7yYdXnMv9p1OHQUlorSBSbb/J6n1W9UJhcp6um8Tw8/Isx4f75
     *     4PskYS6f8Y2ItliGt1/A9iR5BTgGtJBwOxMlgoX2Ggq+Nh4E5SbdoaE5o6CO1nBx
     *     eIPsPEebQ6qC4JehQM3IGuV/lrm58+hZhaXAqNzX1cEYyAt5GYqJIVCiI585SUYs
     *     wRToGyTgaN+zthF0HP9IWlR4Am4LmJ/1OcePTnYw11CkU8wNRbDzVAzogwNH+rXr
     *     LTmf7hxVjBm6bBSVSNFcBKAXFlllubSfIeZ5hgzGqn54OmSf6odO12L5JxllddHc
     *     yAd54vWKs2kJtnsKV2V4ZdkI0w6y1TeI67baFZDNGo6qsCpFMPnvv7d46Pg2VOp1
     *     J6Ivner0NnNHE4MzNmpZRk8WXMwqq4P/gTiT7F/aCX6oFCUQ4AWPQhJYh2dkcOmL
     *     IP+47Veb10aFn61F1CJwpmOOiGNXKdDT1vK8CMnnwhm825K0q/q9Zqpzc1+1ae1z
     *     mSqol1zCoa88CuSN6nTLQlVnN/dzfrGbc0boJPaM0iGhHtSzHk4SWg84LhiJB1q9
     *     A9XFJmOVdkvRY9nnz/iVLAdd0Q3vFtLqCdUYsNN2yh4=
     *             """)
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPasswordGoogleKmsSecret.plaintext())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static CompletableFuture<GetKMSSecretAsymmetricResult> getKMSSecretAsymmetricPlain(GetKMSSecretAsymmetricPlainArgs args) {
        return getKMSSecretAsymmetricPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateArgs;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKeyCryptoKey = new CryptoKey("myCryptoKeyCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .purpose("ASYMMETRIC_DECRYPT")
     *             .versionTemplate(CryptoKeyVersionTemplateArgs.builder()
     *                 .algorithm("RSA_DECRYPT_OAEP_4096_SHA256")
     *                 .build())
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myCryptoKeyCryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/kms/docs/encrypt-decrypt-rsa#kms-encrypt-asymmetric-cli) to encrypt
     * some sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs.builder()
     *             .cryptoKeyVersion(myCryptoKey.id())
     *             .crc32("12c59e54")
     *             .ciphertext("""
     *     M7nUoba9EGVTu2LjNjBKGdGVBYjyS/i/AY+4yQMQF0Qf/RfUfX31Jw6+VO9OuThq
     *     ylu/7ihX9XD4bM7yYdXnMv9p1OHQUlorSBSbb/J6n1W9UJhcp6um8Tw8/Isx4f75
     *     4PskYS6f8Y2ItliGt1/A9iR5BTgGtJBwOxMlgoX2Ggq+Nh4E5SbdoaE5o6CO1nBx
     *     eIPsPEebQ6qC4JehQM3IGuV/lrm58+hZhaXAqNzX1cEYyAt5GYqJIVCiI585SUYs
     *     wRToGyTgaN+zthF0HP9IWlR4Am4LmJ/1OcePTnYw11CkU8wNRbDzVAzogwNH+rXr
     *     LTmf7hxVjBm6bBSVSNFcBKAXFlllubSfIeZ5hgzGqn54OmSf6odO12L5JxllddHc
     *     yAd54vWKs2kJtnsKV2V4ZdkI0w6y1TeI67baFZDNGo6qsCpFMPnvv7d46Pg2VOp1
     *     J6Ivner0NnNHE4MzNmpZRk8WXMwqq4P/gTiT7F/aCX6oFCUQ4AWPQhJYh2dkcOmL
     *     IP+47Veb10aFn61F1CJwpmOOiGNXKdDT1vK8CMnnwhm825K0q/q9Zqpzc1+1ae1z
     *     mSqol1zCoa88CuSN6nTLQlVnN/dzfrGbc0boJPaM0iGhHtSzHk4SWg84LhiJB1q9
     *     A9XFJmOVdkvRY9nnz/iVLAdd0Q3vFtLqCdUYsNN2yh4=
     *             """)
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPasswordGoogleKmsSecret.plaintext())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static Output<GetKMSSecretAsymmetricResult> getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", TypeShape.of(GetKMSSecretAsymmetricResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateArgs;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKeyCryptoKey = new CryptoKey("myCryptoKeyCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .purpose("ASYMMETRIC_DECRYPT")
     *             .versionTemplate(CryptoKeyVersionTemplateArgs.builder()
     *                 .algorithm("RSA_DECRYPT_OAEP_4096_SHA256")
     *                 .build())
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myCryptoKeyCryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/kms/docs/encrypt-decrypt-rsa#kms-encrypt-asymmetric-cli) to encrypt
     * some sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs.builder()
     *             .cryptoKeyVersion(myCryptoKey.id())
     *             .crc32("12c59e54")
     *             .ciphertext("""
     *     M7nUoba9EGVTu2LjNjBKGdGVBYjyS/i/AY+4yQMQF0Qf/RfUfX31Jw6+VO9OuThq
     *     ylu/7ihX9XD4bM7yYdXnMv9p1OHQUlorSBSbb/J6n1W9UJhcp6um8Tw8/Isx4f75
     *     4PskYS6f8Y2ItliGt1/A9iR5BTgGtJBwOxMlgoX2Ggq+Nh4E5SbdoaE5o6CO1nBx
     *     eIPsPEebQ6qC4JehQM3IGuV/lrm58+hZhaXAqNzX1cEYyAt5GYqJIVCiI585SUYs
     *     wRToGyTgaN+zthF0HP9IWlR4Am4LmJ/1OcePTnYw11CkU8wNRbDzVAzogwNH+rXr
     *     LTmf7hxVjBm6bBSVSNFcBKAXFlllubSfIeZ5hgzGqn54OmSf6odO12L5JxllddHc
     *     yAd54vWKs2kJtnsKV2V4ZdkI0w6y1TeI67baFZDNGo6qsCpFMPnvv7d46Pg2VOp1
     *     J6Ivner0NnNHE4MzNmpZRk8WXMwqq4P/gTiT7F/aCX6oFCUQ4AWPQhJYh2dkcOmL
     *     IP+47Veb10aFn61F1CJwpmOOiGNXKdDT1vK8CMnnwhm825K0q/q9Zqpzc1+1ae1z
     *     mSqol1zCoa88CuSN6nTLQlVnN/dzfrGbc0boJPaM0iGhHtSzHk4SWg84LhiJB1q9
     *     A9XFJmOVdkvRY9nnz/iVLAdd0Q3vFtLqCdUYsNN2yh4=
     *             """)
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPasswordGoogleKmsSecret.plaintext())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static Output<GetKMSSecretAsymmetricResult> getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", TypeShape.of(GetKMSSecretAsymmetricResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import com.pulumi.gcp.kms.inputs.CryptoKeyVersionTemplateArgs;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSCryptoKeyVersionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKeyCryptoKey = new CryptoKey("myCryptoKeyCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .purpose("ASYMMETRIC_DECRYPT")
     *             .versionTemplate(CryptoKeyVersionTemplateArgs.builder()
     *                 .algorithm("RSA_DECRYPT_OAEP_4096_SHA256")
     *                 .build())
     *             .build());
     * 
     *         final var myCryptoKey = KmsFunctions.getKMSCryptoKeyVersion(GetKMSCryptoKeyVersionArgs.builder()
     *             .cryptoKey(myCryptoKeyCryptoKey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, use the [Cloud SDK](https://cloud.google.com/kms/docs/encrypt-decrypt-rsa#kms-encrypt-asymmetric-cli) to encrypt
     * some sensitive information:
     * 
     * Finally, reference the encrypted ciphertext in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretAsymmetricArgs;
     * import com.pulumi.random.RandomId;
     * import com.pulumi.random.RandomIdArgs;
     * import com.pulumi.gcp.sql.DatabaseInstance;
     * import com.pulumi.gcp.sql.DatabaseInstanceArgs;
     * import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
     * import com.pulumi.gcp.sql.User;
     * import com.pulumi.gcp.sql.UserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sqlUserPassword = KmsFunctions.getKMSSecretAsymmetric(GetKMSSecretAsymmetricArgs.builder()
     *             .cryptoKeyVersion(myCryptoKey.id())
     *             .crc32("12c59e54")
     *             .ciphertext("""
     *     M7nUoba9EGVTu2LjNjBKGdGVBYjyS/i/AY+4yQMQF0Qf/RfUfX31Jw6+VO9OuThq
     *     ylu/7ihX9XD4bM7yYdXnMv9p1OHQUlorSBSbb/J6n1W9UJhcp6um8Tw8/Isx4f75
     *     4PskYS6f8Y2ItliGt1/A9iR5BTgGtJBwOxMlgoX2Ggq+Nh4E5SbdoaE5o6CO1nBx
     *     eIPsPEebQ6qC4JehQM3IGuV/lrm58+hZhaXAqNzX1cEYyAt5GYqJIVCiI585SUYs
     *     wRToGyTgaN+zthF0HP9IWlR4Am4LmJ/1OcePTnYw11CkU8wNRbDzVAzogwNH+rXr
     *     LTmf7hxVjBm6bBSVSNFcBKAXFlllubSfIeZ5hgzGqn54OmSf6odO12L5JxllddHc
     *     yAd54vWKs2kJtnsKV2V4ZdkI0w6y1TeI67baFZDNGo6qsCpFMPnvv7d46Pg2VOp1
     *     J6Ivner0NnNHE4MzNmpZRk8WXMwqq4P/gTiT7F/aCX6oFCUQ4AWPQhJYh2dkcOmL
     *     IP+47Veb10aFn61F1CJwpmOOiGNXKdDT1vK8CMnnwhm825K0q/q9Zqpzc1+1ae1z
     *     mSqol1zCoa88CuSN6nTLQlVnN/dzfrGbc0boJPaM0iGhHtSzHk4SWg84LhiJB1q9
     *     A9XFJmOVdkvRY9nnz/iVLAdd0Q3vFtLqCdUYsNN2yh4=
     *             """)
     *             .build());
     * 
     *         var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
     *             .byteLength(4)
     *             .build());
     * 
     *         var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
     *             .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
     *             .databaseVersion("MYSQL_5_7")
     *             .settings(DatabaseInstanceSettingsArgs.builder()
     *                 .tier("db-f1-micro")
     *                 .build())
     *             .build());
     * 
     *         var users = new User("users", UserArgs.builder()
     *             .name("me")
     *             .instance(main.name())
     *             .host("me.com")
     *             .password(sqlUserPasswordGoogleKmsSecret.plaintext())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * This will result in a Cloud SQL user being created with password `my-secret-password`.
     * 
     */
    public static CompletableFuture<GetKMSSecretAsymmetricResult> getKMSSecretAsymmetricPlain(GetKMSSecretAsymmetricPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKMSSecretAsymmetric:getKMSSecretAsymmetric", TypeShape.of(GetKMSSecretAsymmetricResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
     * 
     * This data source allows you to encrypt data with Google Cloud KMS and use the
     * ciphertext within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPassword = KmsFunctions.getKMSSecretCiphertext(GetKMSSecretCiphertextArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .plaintext("my-secret-password")
     *             .build());
     * 
     *         var instance = new Instance("instance", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs()
     *                 .network("default")
     *                 .build())
     *             .name("test")
     *             .machineType("e2-medium")
     *             .zone("us-central1-a")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image("debian-cloud/debian-11")
     *                     .build())
     *                 .build())
     *             .metadata(Map.of("password", myPassword.applyValue(getKMSSecretCiphertextResult -> getKMSSecretCiphertextResult.ciphertext())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The resulting instance can then access the encrypted password from its metadata
     * and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
     * 
     */
    public static Output<GetKMSSecretCiphertextResult> getKMSSecretCiphertext(GetKMSSecretCiphertextArgs args) {
        return getKMSSecretCiphertext(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
     * 
     * This data source allows you to encrypt data with Google Cloud KMS and use the
     * ciphertext within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPassword = KmsFunctions.getKMSSecretCiphertext(GetKMSSecretCiphertextArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .plaintext("my-secret-password")
     *             .build());
     * 
     *         var instance = new Instance("instance", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs()
     *                 .network("default")
     *                 .build())
     *             .name("test")
     *             .machineType("e2-medium")
     *             .zone("us-central1-a")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image("debian-cloud/debian-11")
     *                     .build())
     *                 .build())
     *             .metadata(Map.of("password", myPassword.applyValue(getKMSSecretCiphertextResult -> getKMSSecretCiphertextResult.ciphertext())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The resulting instance can then access the encrypted password from its metadata
     * and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
     * 
     */
    public static CompletableFuture<GetKMSSecretCiphertextResult> getKMSSecretCiphertextPlain(GetKMSSecretCiphertextPlainArgs args) {
        return getKMSSecretCiphertextPlain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
     * 
     * This data source allows you to encrypt data with Google Cloud KMS and use the
     * ciphertext within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPassword = KmsFunctions.getKMSSecretCiphertext(GetKMSSecretCiphertextArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .plaintext("my-secret-password")
     *             .build());
     * 
     *         var instance = new Instance("instance", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs()
     *                 .network("default")
     *                 .build())
     *             .name("test")
     *             .machineType("e2-medium")
     *             .zone("us-central1-a")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image("debian-cloud/debian-11")
     *                     .build())
     *                 .build())
     *             .metadata(Map.of("password", myPassword.applyValue(getKMSSecretCiphertextResult -> getKMSSecretCiphertextResult.ciphertext())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The resulting instance can then access the encrypted password from its metadata
     * and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
     * 
     */
    public static Output<GetKMSSecretCiphertextResult> getKMSSecretCiphertext(GetKMSSecretCiphertextArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext", TypeShape.of(GetKMSSecretCiphertextResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
     * 
     * This data source allows you to encrypt data with Google Cloud KMS and use the
     * ciphertext within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPassword = KmsFunctions.getKMSSecretCiphertext(GetKMSSecretCiphertextArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .plaintext("my-secret-password")
     *             .build());
     * 
     *         var instance = new Instance("instance", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs()
     *                 .network("default")
     *                 .build())
     *             .name("test")
     *             .machineType("e2-medium")
     *             .zone("us-central1-a")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image("debian-cloud/debian-11")
     *                     .build())
     *                 .build())
     *             .metadata(Map.of("password", myPassword.applyValue(getKMSSecretCiphertextResult -> getKMSSecretCiphertextResult.ciphertext())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The resulting instance can then access the encrypted password from its metadata
     * and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
     * 
     */
    public static Output<GetKMSSecretCiphertextResult> getKMSSecretCiphertext(GetKMSSecretCiphertextArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext", TypeShape.of(GetKMSSecretCiphertextResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **Warning:** This data source is deprecated. Use the `gcp.kms.SecretCiphertext` **resource** instead.
     * 
     * This data source allows you to encrypt data with Google Cloud KMS and use the
     * ciphertext within your resource definitions.
     * 
     * For more information see
     * [the official documentation](https://cloud.google.com/kms/docs/encrypt-decrypt).
     * 
     * &gt; **NOTE:** Using this data source will allow you to conceal secret data within your
     * resource definitions, but it does not take care of protecting that data in the
     * logging output, plan output, or state output.  Please take care to secure your secret
     * data outside of resource definitions.
     * 
     * ## Example Usage
     * 
     * First, create a KMS KeyRing and CryptoKey using the resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KeyRing;
     * import com.pulumi.gcp.kms.KeyRingArgs;
     * import com.pulumi.gcp.kms.CryptoKey;
     * import com.pulumi.gcp.kms.CryptoKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myKeyRing = new KeyRing("myKeyRing", KeyRingArgs.builder()
     *             .project("my-project")
     *             .name("my-key-ring")
     *             .location("us-central1")
     *             .build());
     * 
     *         var myCryptoKey = new CryptoKey("myCryptoKey", CryptoKeyArgs.builder()
     *             .name("my-crypto-key")
     *             .keyRing(myKeyRing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Next, encrypt some sensitive information and use the encrypted data in your resource definitions:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKMSSecretCiphertextArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import com.pulumi.gcp.compute.InstanceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
     * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myPassword = KmsFunctions.getKMSSecretCiphertext(GetKMSSecretCiphertextArgs.builder()
     *             .cryptoKey(myCryptoKey.id())
     *             .plaintext("my-secret-password")
     *             .build());
     * 
     *         var instance = new Instance("instance", InstanceArgs.builder()
     *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
     *                 .accessConfigs()
     *                 .network("default")
     *                 .build())
     *             .name("test")
     *             .machineType("e2-medium")
     *             .zone("us-central1-a")
     *             .bootDisk(InstanceBootDiskArgs.builder()
     *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
     *                     .image("debian-cloud/debian-11")
     *                     .build())
     *                 .build())
     *             .metadata(Map.of("password", myPassword.applyValue(getKMSSecretCiphertextResult -> getKMSSecretCiphertextResult.ciphertext())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * The resulting instance can then access the encrypted password from its metadata
     * and decrypt it, e.g. using the [Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/kms/decrypt)):
     * 
     */
    public static CompletableFuture<GetKMSSecretCiphertextResult> getKMSSecretCiphertextPlain(GetKMSSecretCiphertextPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKMSSecretCiphertext:getKMSSecretCiphertext", TypeShape.of(GetKMSSecretCiphertextResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS key ring.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testKeyRingIamPolicy = KmsFunctions.getKeyRingIamPolicy(GetKeyRingIamPolicyArgs.builder()
     *             .keyRingId("{project_id}/{location_name}/{key_ring_name}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKeyRingIamPolicyResult> getKeyRingIamPolicy(GetKeyRingIamPolicyArgs args) {
        return getKeyRingIamPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS key ring.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testKeyRingIamPolicy = KmsFunctions.getKeyRingIamPolicy(GetKeyRingIamPolicyArgs.builder()
     *             .keyRingId("{project_id}/{location_name}/{key_ring_name}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKeyRingIamPolicyResult> getKeyRingIamPolicyPlain(GetKeyRingIamPolicyPlainArgs args) {
        return getKeyRingIamPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS key ring.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testKeyRingIamPolicy = KmsFunctions.getKeyRingIamPolicy(GetKeyRingIamPolicyArgs.builder()
     *             .keyRingId("{project_id}/{location_name}/{key_ring_name}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKeyRingIamPolicyResult> getKeyRingIamPolicy(GetKeyRingIamPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy", TypeShape.of(GetKeyRingIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS key ring.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testKeyRingIamPolicy = KmsFunctions.getKeyRingIamPolicy(GetKeyRingIamPolicyArgs.builder()
     *             .keyRingId("{project_id}/{location_name}/{key_ring_name}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKeyRingIamPolicyResult> getKeyRingIamPolicy(GetKeyRingIamPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy", TypeShape.of(GetKeyRingIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the current IAM policy data for a Google Cloud KMS key ring.
     * 
     * ## example
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.kms.KmsFunctions;
     * import com.pulumi.gcp.kms.inputs.GetKeyRingIamPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testKeyRingIamPolicy = KmsFunctions.getKeyRingIamPolicy(GetKeyRingIamPolicyArgs.builder()
     *             .keyRingId("{project_id}/{location_name}/{key_ring_name}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKeyRingIamPolicyResult> getKeyRingIamPolicyPlain(GetKeyRingIamPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKeyRingIamPolicy:getKeyRingIamPolicy", TypeShape.of(GetKeyRingIamPolicyResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetKeyRingsResult> getKeyRings(GetKeyRingsArgs args) {
        return getKeyRings(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetKeyRingsResult> getKeyRingsPlain(GetKeyRingsPlainArgs args) {
        return getKeyRingsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetKeyRingsResult> getKeyRings(GetKeyRingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKeyRings:getKeyRings", TypeShape.of(GetKeyRingsResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetKeyRingsResult> getKeyRings(GetKeyRingsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("gcp:kms/getKeyRings:getKeyRings", TypeShape.of(GetKeyRingsResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetKeyRingsResult> getKeyRingsPlain(GetKeyRingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:kms/getKeyRings:getKeyRings", TypeShape.of(GetKeyRingsResult.class), args, Utilities.withVersion(options));
    }
}
