// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialAuthToken;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialJwt;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialOauth2AuthorizationCode;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialOauth2ClientCredentials;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialOidcToken;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialServiceAccountCredentials;
import com.pulumi.gcp.applicationintegration.outputs.AuthConfigDecryptedCredentialUsernameAndPassword;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthConfigDecryptedCredential {
    /**
     * @return Auth token credential.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialAuthToken authToken;
    /**
     * @return Credential type associated with auth configs.
     * 
     */
    private String credentialType;
    /**
     * @return JWT credential.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialJwt jwt;
    /**
     * @return OAuth2 authorization code credential.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialOauth2AuthorizationCode oauth2AuthorizationCode;
    /**
     * @return OAuth2 client credentials.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialOauth2ClientCredentials oauth2ClientCredentials;
    /**
     * @return Google OIDC ID Token.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialOidcToken oidcToken;
    /**
     * @return Service account credential.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialServiceAccountCredentials serviceAccountCredentials;
    /**
     * @return Username and password credential.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthConfigDecryptedCredentialUsernameAndPassword usernameAndPassword;

    private AuthConfigDecryptedCredential() {}
    /**
     * @return Auth token credential.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialAuthToken> authToken() {
        return Optional.ofNullable(this.authToken);
    }
    /**
     * @return Credential type associated with auth configs.
     * 
     */
    public String credentialType() {
        return this.credentialType;
    }
    /**
     * @return JWT credential.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialJwt> jwt() {
        return Optional.ofNullable(this.jwt);
    }
    /**
     * @return OAuth2 authorization code credential.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialOauth2AuthorizationCode> oauth2AuthorizationCode() {
        return Optional.ofNullable(this.oauth2AuthorizationCode);
    }
    /**
     * @return OAuth2 client credentials.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialOauth2ClientCredentials> oauth2ClientCredentials() {
        return Optional.ofNullable(this.oauth2ClientCredentials);
    }
    /**
     * @return Google OIDC ID Token.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialOidcToken> oidcToken() {
        return Optional.ofNullable(this.oidcToken);
    }
    /**
     * @return Service account credential.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialServiceAccountCredentials> serviceAccountCredentials() {
        return Optional.ofNullable(this.serviceAccountCredentials);
    }
    /**
     * @return Username and password credential.
     * Structure is documented below.
     * 
     */
    public Optional<AuthConfigDecryptedCredentialUsernameAndPassword> usernameAndPassword() {
        return Optional.ofNullable(this.usernameAndPassword);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthConfigDecryptedCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AuthConfigDecryptedCredentialAuthToken authToken;
        private String credentialType;
        private @Nullable AuthConfigDecryptedCredentialJwt jwt;
        private @Nullable AuthConfigDecryptedCredentialOauth2AuthorizationCode oauth2AuthorizationCode;
        private @Nullable AuthConfigDecryptedCredentialOauth2ClientCredentials oauth2ClientCredentials;
        private @Nullable AuthConfigDecryptedCredentialOidcToken oidcToken;
        private @Nullable AuthConfigDecryptedCredentialServiceAccountCredentials serviceAccountCredentials;
        private @Nullable AuthConfigDecryptedCredentialUsernameAndPassword usernameAndPassword;
        public Builder() {}
        public Builder(AuthConfigDecryptedCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authToken = defaults.authToken;
    	      this.credentialType = defaults.credentialType;
    	      this.jwt = defaults.jwt;
    	      this.oauth2AuthorizationCode = defaults.oauth2AuthorizationCode;
    	      this.oauth2ClientCredentials = defaults.oauth2ClientCredentials;
    	      this.oidcToken = defaults.oidcToken;
    	      this.serviceAccountCredentials = defaults.serviceAccountCredentials;
    	      this.usernameAndPassword = defaults.usernameAndPassword;
        }

        @CustomType.Setter
        public Builder authToken(@Nullable AuthConfigDecryptedCredentialAuthToken authToken) {

            this.authToken = authToken;
            return this;
        }
        @CustomType.Setter
        public Builder credentialType(String credentialType) {
            if (credentialType == null) {
              throw new MissingRequiredPropertyException("AuthConfigDecryptedCredential", "credentialType");
            }
            this.credentialType = credentialType;
            return this;
        }
        @CustomType.Setter
        public Builder jwt(@Nullable AuthConfigDecryptedCredentialJwt jwt) {

            this.jwt = jwt;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2AuthorizationCode(@Nullable AuthConfigDecryptedCredentialOauth2AuthorizationCode oauth2AuthorizationCode) {

            this.oauth2AuthorizationCode = oauth2AuthorizationCode;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2ClientCredentials(@Nullable AuthConfigDecryptedCredentialOauth2ClientCredentials oauth2ClientCredentials) {

            this.oauth2ClientCredentials = oauth2ClientCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder oidcToken(@Nullable AuthConfigDecryptedCredentialOidcToken oidcToken) {

            this.oidcToken = oidcToken;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountCredentials(@Nullable AuthConfigDecryptedCredentialServiceAccountCredentials serviceAccountCredentials) {

            this.serviceAccountCredentials = serviceAccountCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder usernameAndPassword(@Nullable AuthConfigDecryptedCredentialUsernameAndPassword usernameAndPassword) {

            this.usernameAndPassword = usernameAndPassword;
            return this;
        }
        public AuthConfigDecryptedCredential build() {
            final var _resultValue = new AuthConfigDecryptedCredential();
            _resultValue.authToken = authToken;
            _resultValue.credentialType = credentialType;
            _resultValue.jwt = jwt;
            _resultValue.oauth2AuthorizationCode = oauth2AuthorizationCode;
            _resultValue.oauth2ClientCredentials = oauth2ClientCredentials;
            _resultValue.oidcToken = oidcToken;
            _resultValue.serviceAccountCredentials = serviceAccountCredentials;
            _resultValue.usernameAndPassword = usernameAndPassword;
            return _resultValue;
        }
    }
}
