// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.colab;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.colab.NotebookExecutionArgs;
import com.pulumi.gcp.colab.inputs.NotebookExecutionState;
import com.pulumi.gcp.colab.outputs.NotebookExecutionDataformRepositorySource;
import com.pulumi.gcp.colab.outputs.NotebookExecutionDirectNotebookSource;
import com.pulumi.gcp.colab.outputs.NotebookExecutionGcsNotebookSource;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &#39;An instance of a notebook Execution&#39;
 * 
 * To get more information about NotebookExecution, see:
 * 
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.notebookExecutionJobs)
 * * How-to Guides
 *     * [Schedule a notebook run](https://cloud.google.com/colab/docs/schedule-notebook-run)
 * 
 * ## Example Usage
 * 
 * ### Colab Notebook Execution Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.colab.NotebookExecution;
 * import com.pulumi.gcp.colab.NotebookExecutionArgs;
 * import com.pulumi.gcp.colab.inputs.NotebookExecutionDirectNotebookSourceArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.Base64encodeArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var myRuntimeTemplate = new RuntimeTemplate("myRuntimeTemplate", RuntimeTemplateArgs.builder()
 *             .name("runtime-template-name")
 *             .displayName("Runtime template")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *         var outputBucket = new Bucket("outputBucket", BucketArgs.builder()
 *             .name("my_bucket")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var notebook_execution = new NotebookExecution("notebook-execution", NotebookExecutionArgs.builder()
 *             .displayName("Notebook execution basic")
 *             .location("us-central1")
 *             .directNotebookSource(NotebookExecutionDirectNotebookSourceArgs.builder()
 *                 .content(StdFunctions.base64encode(Base64encodeArgs.builder()
 *                     .input("""
 *     }{{@code
 *       "cells": [
 *         }{{@code
 *           "cell_type": "code",
 *           "execution_count": null,
 *           "metadata": }{}{@code ,
 *           "outputs": [],
 *           "source": [
 *             "print(\"Hello, World!\")"
 *           ]
 *         }}{@code
 *       ],
 *       "metadata": }{{@code
 *         "kernelspec": }{{@code
 *           "display_name": "Python 3",
 *           "language": "python",
 *           "name": "python3"
 *         }}{@code ,
 *         "language_info": }{{@code
 *           "codemirror_mode": }{{@code
 *             "name": "ipython",
 *             "version": 3
 *           }}{@code ,
 *           "file_extension": ".py",
 *           "mimetype": "text/x-python",
 *           "name": "python",
 *           "nbconvert_exporter": "python",
 *           "pygments_lexer": "ipython3",
 *           "version": "3.8.5"
 *         }}{@code
 *       }}{@code ,
 *       "nbformat": 4,
 *       "nbformat_minor": 4
 *     }}{@code
 *                     """)
 *                     .build()).result())
 *                 .build())
 *             .notebookRuntimeTemplateResourceName(Output.tuple(myRuntimeTemplate.project(), myRuntimeTemplate.location(), myRuntimeTemplate.name()).applyValue(values -> }{{@code
 *                 var project = values.t1;
 *                 var location = values.t2;
 *                 var name = values.t3;
 *                 return String.format("projects/%s/locations/%s/notebookRuntimeTemplates/%s", project,location,name);
 *             }}{@code ))
 *             .gcsOutputUri(outputBucket.name().applyValue(_name -> String.format("gs://%s", _name)))
 *             .serviceAccount("my}{@literal @}{@code service-account.com")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     myRuntimeTemplate,
 *                     outputBucket)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Colab Notebook Execution Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.colab.NotebookExecution;
 * import com.pulumi.gcp.colab.NotebookExecutionArgs;
 * import com.pulumi.gcp.colab.inputs.NotebookExecutionGcsNotebookSourceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var myRuntimeTemplate = new RuntimeTemplate("myRuntimeTemplate", RuntimeTemplateArgs.builder()
 *             .name("runtime-template-name")
 *             .displayName("Runtime template")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *         var outputBucket = new Bucket("outputBucket", BucketArgs.builder()
 *             .name("my_bucket")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var notebook = new BucketObject("notebook", BucketObjectArgs.builder()
 *             .name("hello_world.ipynb")
 *             .bucket(outputBucket.name())
 *             .content("""
 *     }{{@code
 *       "cells": [
 *         }{{@code
 *           "cell_type": "code",
 *           "execution_count": null,
 *           "metadata": }{}{@code ,
 *           "outputs": [],
 *           "source": [
 *             "print(\"Hello, World!\")"
 *           ]
 *         }}{@code
 *       ],
 *       "metadata": }{{@code
 *         "kernelspec": }{{@code
 *           "display_name": "Python 3",
 *           "language": "python",
 *           "name": "python3"
 *         }}{@code ,
 *         "language_info": }{{@code
 *           "codemirror_mode": }{{@code
 *             "name": "ipython",
 *             "version": 3
 *           }}{@code ,
 *           "file_extension": ".py",
 *           "mimetype": "text/x-python",
 *           "name": "python",
 *           "nbconvert_exporter": "python",
 *           "pygments_lexer": "ipython3",
 *           "version": "3.8.5"
 *         }}{@code
 *       }}{@code ,
 *       "nbformat": 4,
 *       "nbformat_minor": 4
 *     }}{@code
 *             """)
 *             .build());
 * 
 *         var notebook_execution = new NotebookExecution("notebook-execution", NotebookExecutionArgs.builder()
 *             .notebookExecutionJobId("colab-notebook-execution")
 *             .displayName("Notebook execution full")
 *             .location("us-central1")
 *             .executionTimeout("86400s")
 *             .gcsNotebookSource(NotebookExecutionGcsNotebookSourceArgs.builder()
 *                 .uri(Output.tuple(notebook.bucket(), notebook.name()).applyValue(values -> }{{@code
 *                     var bucket = values.t1;
 *                     var name = values.t2;
 *                     return String.format("gs://%s/%s", bucket,name);
 *                 }}{@code ))
 *                 .generation(notebook.generation())
 *                 .build())
 *             .serviceAccount("my}{@literal @}{@code service-account.com")
 *             .gcsOutputUri(outputBucket.name().applyValue(_name -> String.format("gs://%s", _name)))
 *             .notebookRuntimeTemplateResourceName(Output.tuple(myRuntimeTemplate.project(), myRuntimeTemplate.location(), myRuntimeTemplate.name()).applyValue(values -> }{{@code
 *                 var project = values.t1;
 *                 var location = values.t2;
 *                 var name = values.t3;
 *                 return String.format("projects/%s/locations/%s/notebookRuntimeTemplates/%s", project,location,name);
 *             }}{@code ))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     notebook,
 *                     outputBucket,
 *                     myRuntimeTemplate)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Colab Notebook Execution Dataform
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.colab.RuntimeTemplate;
 * import com.pulumi.gcp.colab.RuntimeTemplateArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateMachineSpecArgs;
 * import com.pulumi.gcp.colab.inputs.RuntimeTemplateNetworkSpecArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.dataform.Repository;
 * import com.pulumi.gcp.dataform.RepositoryArgs;
 * import com.pulumi.gcp.dataform.inputs.RepositoryGitRemoteSettingsArgs;
 * import com.pulumi.gcp.dataform.inputs.RepositoryWorkspaceCompilationOverridesArgs;
 * import com.pulumi.gcp.colab.NotebookExecution;
 * import com.pulumi.gcp.colab.NotebookExecutionArgs;
 * import com.pulumi.gcp.colab.inputs.NotebookExecutionDataformRepositorySourceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var myRuntimeTemplate = new RuntimeTemplate("myRuntimeTemplate", RuntimeTemplateArgs.builder()
 *             .name("runtime-template-name")
 *             .displayName("Runtime template")
 *             .location("us-central1")
 *             .machineSpec(RuntimeTemplateMachineSpecArgs.builder()
 *                 .machineType("e2-standard-4")
 *                 .build())
 *             .networkSpec(RuntimeTemplateNetworkSpecArgs.builder()
 *                 .enableInternetAccess(true)
 *                 .build())
 *             .build());
 * 
 *         var outputBucket = new Bucket("outputBucket", BucketArgs.builder()
 *             .name("my_bucket")
 *             .location("US")
 *             .forceDestroy(true)
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var secret = new Secret("secret", SecretArgs.builder()
 *             .secretId("secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secretVersion = new SecretVersion("secretVersion", SecretVersionArgs.builder()
 *             .secret(secret.id())
 *             .secretData("secret-data")
 *             .build());
 * 
 *         var dataformRepository = new Repository("dataformRepository", RepositoryArgs.builder()
 *             .name("dataform-repository")
 *             .displayName("dataform_repository")
 *             .npmrcEnvironmentVariablesSecretVersion(secretVersion.id())
 *             .kmsKeyName("my-crypto-key")
 *             .labels(Map.of("label_foo1", "label-bar1"))
 *             .gitRemoteSettings(RepositoryGitRemoteSettingsArgs.builder()
 *                 .url("https://github.com/OWNER/REPOSITORY.git")
 *                 .defaultBranch("main")
 *                 .authenticationTokenSecretVersion(secretVersion.id())
 *                 .build())
 *             .workspaceCompilationOverrides(RepositoryWorkspaceCompilationOverridesArgs.builder()
 *                 .defaultDatabase("database")
 *                 .schemaSuffix("_suffix")
 *                 .tablePrefix("prefix_")
 *                 .build())
 *             .build());
 * 
 *         var notebook_execution = new NotebookExecution("notebook-execution", NotebookExecutionArgs.builder()
 *             .displayName("Notebook execution Dataform")
 *             .location("us-central1")
 *             .dataformRepositorySource(NotebookExecutionDataformRepositorySourceArgs.builder()
 *                 .commitSha("randomsha123")
 *                 .dataformRepositoryResourceName(Output.tuple(myRuntimeTemplate.project(), myRuntimeTemplate.location(), dataformRepository.name()).applyValue(values -> }{{@code
 *                     var project = values.t1;
 *                     var location = values.t2;
 *                     var name = values.t3;
 *                     return String.format("projects/%s/locations/%s/repositories/%s", project,location,name);
 *                 }}{@code ))
 *                 .build())
 *             .notebookRuntimeTemplateResourceName(Output.tuple(myRuntimeTemplate.project(), myRuntimeTemplate.location(), myRuntimeTemplate.name()).applyValue(values -> }{{@code
 *                 var project = values.t1;
 *                 var location = values.t2;
 *                 var name = values.t3;
 *                 return String.format("projects/%s/locations/%s/notebookRuntimeTemplates/%s", project,location,name);
 *             }}{@code ))
 *             .gcsOutputUri(outputBucket.name().applyValue(_name -> String.format("gs://%s", _name)))
 *             .serviceAccount("my}{@literal @}{@code service-account.com")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     myRuntimeTemplate,
 *                     outputBucket,
 *                     secretVersion,
 *                     dataformRepository,
 *                     secret)
 *                 .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NotebookExecution can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}`
 * 
 * * `{{project}}/{{location}}/{{notebook_execution_job_id}}`
 * 
 * * `{{location}}/{{notebook_execution_job_id}}`
 * 
 * When using the `pulumi import` command, NotebookExecution can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:colab/notebookExecution:NotebookExecution default projects/{{project}}/locations/{{location}}/notebookExecutionJobs/{{notebook_execution_job_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:colab/notebookExecution:NotebookExecution default {{project}}/{{location}}/{{notebook_execution_job_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:colab/notebookExecution:NotebookExecution default {{location}}/{{notebook_execution_job_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:colab/notebookExecution:NotebookExecution")
public class NotebookExecution extends com.pulumi.resources.CustomResource {
    /**
     * The Dataform Repository containing the input notebook.
     * Structure is documented below.
     * 
     */
    @Export(name="dataformRepositorySource", refs={NotebookExecutionDataformRepositorySource.class}, tree="[0]")
    private Output</* @Nullable */ NotebookExecutionDataformRepositorySource> dataformRepositorySource;

    /**
     * @return The Dataform Repository containing the input notebook.
     * Structure is documented below.
     * 
     */
    public Output<Optional<NotebookExecutionDataformRepositorySource>> dataformRepositorySource() {
        return Codegen.optional(this.dataformRepositorySource);
    }
    /**
     * The content of the input notebook in ipynb format.
     * Structure is documented below.
     * 
     */
    @Export(name="directNotebookSource", refs={NotebookExecutionDirectNotebookSource.class}, tree="[0]")
    private Output</* @Nullable */ NotebookExecutionDirectNotebookSource> directNotebookSource;

    /**
     * @return The content of the input notebook in ipynb format.
     * Structure is documented below.
     * 
     */
    public Output<Optional<NotebookExecutionDirectNotebookSource>> directNotebookSource() {
        return Codegen.optional(this.directNotebookSource);
    }
    /**
     * Required. The display name of the Notebook Execution.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Required. The display name of the Notebook Execution.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Max running time of the execution job in seconds (default 86400s / 24 hrs).
     * 
     */
    @Export(name="executionTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> executionTimeout;

    /**
     * @return Max running time of the execution job in seconds (default 86400s / 24 hrs).
     * 
     */
    public Output<Optional<String>> executionTimeout() {
        return Codegen.optional(this.executionTimeout);
    }
    /**
     * The user email to run the execution as.
     * 
     */
    @Export(name="executionUser", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> executionUser;

    /**
     * @return The user email to run the execution as.
     * 
     */
    public Output<Optional<String>> executionUser() {
        return Codegen.optional(this.executionUser);
    }
    /**
     * The Cloud Storage uri for the input notebook.
     * Structure is documented below.
     * 
     */
    @Export(name="gcsNotebookSource", refs={NotebookExecutionGcsNotebookSource.class}, tree="[0]")
    private Output</* @Nullable */ NotebookExecutionGcsNotebookSource> gcsNotebookSource;

    /**
     * @return The Cloud Storage uri for the input notebook.
     * Structure is documented below.
     * 
     */
    public Output<Optional<NotebookExecutionGcsNotebookSource>> gcsNotebookSource() {
        return Codegen.optional(this.gcsNotebookSource);
    }
    /**
     * The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
     * 
     */
    @Export(name="gcsOutputUri", refs={String.class}, tree="[0]")
    private Output<String> gcsOutputUri;

    /**
     * @return The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
     * 
     */
    public Output<String> gcsOutputUri() {
        return this.gcsOutputUri;
    }
    /**
     * The location for the resource: https://cloud.google.com/colab/docs/locations
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource: https://cloud.google.com/colab/docs/locations
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * User specified ID for the Notebook Execution Job
     * 
     */
    @Export(name="notebookExecutionJobId", refs={String.class}, tree="[0]")
    private Output<String> notebookExecutionJobId;

    /**
     * @return User specified ID for the Notebook Execution Job
     * 
     */
    public Output<String> notebookExecutionJobId() {
        return this.notebookExecutionJobId;
    }
    /**
     * The NotebookRuntimeTemplate to source compute configuration from.
     * 
     */
    @Export(name="notebookRuntimeTemplateResourceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notebookRuntimeTemplateResourceName;

    /**
     * @return The NotebookRuntimeTemplate to source compute configuration from.
     * 
     */
    public Output<Optional<String>> notebookRuntimeTemplateResourceName() {
        return Codegen.optional(this.notebookRuntimeTemplateResourceName);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The service account to run the execution as.
     * 
     */
    @Export(name="serviceAccount", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceAccount;

    /**
     * @return The service account to run the execution as.
     * 
     */
    public Output<Optional<String>> serviceAccount() {
        return Codegen.optional(this.serviceAccount);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotebookExecution(java.lang.String name) {
        this(name, NotebookExecutionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotebookExecution(java.lang.String name, NotebookExecutionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotebookExecution(java.lang.String name, NotebookExecutionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:colab/notebookExecution:NotebookExecution", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NotebookExecution(java.lang.String name, Output<java.lang.String> id, @Nullable NotebookExecutionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:colab/notebookExecution:NotebookExecution", name, state, makeResourceOptions(options, id), false);
    }

    private static NotebookExecutionArgs makeArgs(NotebookExecutionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NotebookExecutionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotebookExecution get(java.lang.String name, Output<java.lang.String> id, @Nullable NotebookExecutionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotebookExecution(name, id, state, options);
    }
}
