// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.securesourcemanager.inputs.HookPushOptionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HookArgs extends com.pulumi.resources.ResourceArgs {

    public static final HookArgs Empty = new HookArgs();

    /**
     * Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Determines if the hook disabled or not.
     * Set to true to stop sending traffic.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     * 
     */
    @Import(name="events")
    private @Nullable Output<List<String>> events;

    /**
     * @return The events that trigger hook on.
     * Each value may be one of: `PUSH`, `PULL_REQUEST`.
     * 
     */
    public Optional<Output<List<String>>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * The ID for the Hook.
     * 
     */
    @Import(name="hookId", required=true)
    private Output<String> hookId;

    /**
     * @return The ID for the Hook.
     * 
     */
    public Output<String> hookId() {
        return this.hookId;
    }

    /**
     * The location for the Repository.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location for the Repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The trigger option for push events.
     * Structure is documented below.
     * 
     */
    @Import(name="pushOption")
    private @Nullable Output<HookPushOptionArgs> pushOption;

    /**
     * @return The trigger option for push events.
     * Structure is documented below.
     * 
     */
    public Optional<Output<HookPushOptionArgs>> pushOption() {
        return Optional.ofNullable(this.pushOption);
    }

    /**
     * The ID for the Repository.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<String> repositoryId;

    /**
     * @return The ID for the Repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     * The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="sensitiveQueryString")
    private @Nullable Output<String> sensitiveQueryString;

    /**
     * @return The sensitive query string to be appended to the target URI.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> sensitiveQueryString() {
        return Optional.ofNullable(this.sensitiveQueryString);
    }

    /**
     * The target URI to which the payloads will be delivered.
     * 
     */
    @Import(name="targetUri", required=true)
    private Output<String> targetUri;

    /**
     * @return The target URI to which the payloads will be delivered.
     * 
     */
    public Output<String> targetUri() {
        return this.targetUri;
    }

    private HookArgs() {}

    private HookArgs(HookArgs $) {
        this.disabled = $.disabled;
        this.events = $.events;
        this.hookId = $.hookId;
        this.location = $.location;
        this.project = $.project;
        this.pushOption = $.pushOption;
        this.repositoryId = $.repositoryId;
        this.sensitiveQueryString = $.sensitiveQueryString;
        this.targetUri = $.targetUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HookArgs $;

        public Builder() {
            $ = new HookArgs();
        }

        public Builder(HookArgs defaults) {
            $ = new HookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Determines if the hook disabled or not.
         * Set to true to stop sending traffic.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Determines if the hook disabled or not.
         * Set to true to stop sending traffic.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param events The events that trigger hook on.
         * Each value may be one of: `PUSH`, `PULL_REQUEST`.
         * 
         * @return builder
         * 
         */
        public Builder events(@Nullable Output<List<String>> events) {
            $.events = events;
            return this;
        }

        /**
         * @param events The events that trigger hook on.
         * Each value may be one of: `PUSH`, `PULL_REQUEST`.
         * 
         * @return builder
         * 
         */
        public Builder events(List<String> events) {
            return events(Output.of(events));
        }

        /**
         * @param events The events that trigger hook on.
         * Each value may be one of: `PUSH`, `PULL_REQUEST`.
         * 
         * @return builder
         * 
         */
        public Builder events(String... events) {
            return events(List.of(events));
        }

        /**
         * @param hookId The ID for the Hook.
         * 
         * @return builder
         * 
         */
        public Builder hookId(Output<String> hookId) {
            $.hookId = hookId;
            return this;
        }

        /**
         * @param hookId The ID for the Hook.
         * 
         * @return builder
         * 
         */
        public Builder hookId(String hookId) {
            return hookId(Output.of(hookId));
        }

        /**
         * @param location The location for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pushOption The trigger option for push events.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pushOption(@Nullable Output<HookPushOptionArgs> pushOption) {
            $.pushOption = pushOption;
            return this;
        }

        /**
         * @param pushOption The trigger option for push events.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder pushOption(HookPushOptionArgs pushOption) {
            return pushOption(Output.of(pushOption));
        }

        /**
         * @param repositoryId The ID for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID for the Repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param sensitiveQueryString The sensitive query string to be appended to the target URI.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveQueryString(@Nullable Output<String> sensitiveQueryString) {
            $.sensitiveQueryString = sensitiveQueryString;
            return this;
        }

        /**
         * @param sensitiveQueryString The sensitive query string to be appended to the target URI.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveQueryString(String sensitiveQueryString) {
            return sensitiveQueryString(Output.of(sensitiveQueryString));
        }

        /**
         * @param targetUri The target URI to which the payloads will be delivered.
         * 
         * @return builder
         * 
         */
        public Builder targetUri(Output<String> targetUri) {
            $.targetUri = targetUri;
            return this;
        }

        /**
         * @param targetUri The target URI to which the payloads will be delivered.
         * 
         * @return builder
         * 
         */
        public Builder targetUri(String targetUri) {
            return targetUri(Output.of(targetUri));
        }

        public HookArgs build() {
            if ($.hookId == null) {
                throw new MissingRequiredPropertyException("HookArgs", "hookId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("HookArgs", "location");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("HookArgs", "repositoryId");
            }
            if ($.targetUri == null) {
                throw new MissingRequiredPropertyException("HookArgs", "targetUri");
            }
            return $;
        }
    }

}
