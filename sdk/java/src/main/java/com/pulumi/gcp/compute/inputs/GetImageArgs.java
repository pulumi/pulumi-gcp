// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageArgs Empty = new GetImageArgs();

    /**
     * The family name of the image.
     * 
     */
    @Import(name="family")
    private @Nullable Output<String> family;

    /**
     * @return The family name of the image.
     * 
     */
    public Optional<Output<String>> family() {
        return Optional.ofNullable(this.family);
    }

    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * , `family` or `filter` - (Required) The name of a specific image or a family.
     * Exactly one of `name`, `family` or `filter` must be specified. If `name` is specified, it will fetch
     * the corresponding image. If `family` is specified, it will return the latest image
     * that is part of an image family and is not deprecated. If you specify `filter`, your
     * filter must return exactly one image. Filter syntax can be found [here](https://cloud.google.com/compute/docs/reference/rest/v1/images/list) in the filter section.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return , `family` or `filter` - (Required) The name of a specific image or a family.
     * Exactly one of `name`, `family` or `filter` must be specified. If `name` is specified, it will fetch
     * the corresponding image. If `family` is specified, it will return the latest image
     * that is part of an image family and is not deprecated. If you specify `filter`, your
     * filter must return exactly one image. Filter syntax can be found [here](https://cloud.google.com/compute/docs/reference/rest/v1/images/list) in the filter section.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project in which the resource belongs. If it is not
     * provided, the provider project is used. If you are using a
     * [public base image][pubimg], be sure to specify the correct Image Project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project in which the resource belongs. If it is not
     * provided, the provider project is used. If you are using a
     * [public base image][pubimg], be sure to specify the correct Image Project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetImageArgs() {}

    private GetImageArgs(GetImageArgs $) {
        this.family = $.family;
        this.filter = $.filter;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageArgs $;

        public Builder() {
            $ = new GetImageArgs();
        }

        public Builder(GetImageArgs defaults) {
            $ = new GetImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param family The family name of the image.
         * 
         * @return builder
         * 
         */
        public Builder family(@Nullable Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family The family name of the image.
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param name , `family` or `filter` - (Required) The name of a specific image or a family.
         * Exactly one of `name`, `family` or `filter` must be specified. If `name` is specified, it will fetch
         * the corresponding image. If `family` is specified, it will return the latest image
         * that is part of an image family and is not deprecated. If you specify `filter`, your
         * filter must return exactly one image. Filter syntax can be found [here](https://cloud.google.com/compute/docs/reference/rest/v1/images/list) in the filter section.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name , `family` or `filter` - (Required) The name of a specific image or a family.
         * Exactly one of `name`, `family` or `filter` must be specified. If `name` is specified, it will fetch
         * the corresponding image. If `family` is specified, it will return the latest image
         * that is part of an image family and is not deprecated. If you specify `filter`, your
         * filter must return exactly one image. Filter syntax can be found [here](https://cloud.google.com/compute/docs/reference/rest/v1/images/list) in the filter section.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The project in which the resource belongs. If it is not
         * provided, the provider project is used. If you are using a
         * [public base image][pubimg], be sure to specify the correct Image Project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project in which the resource belongs. If it is not
         * provided, the provider project is used. If you are using a
         * [public base image][pubimg], be sure to specify the correct Image Project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetImageArgs build() {
            return $;
        }
    }

}
