// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiFeatureGroupBigQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiFeatureGroupBigQueryArgs Empty = new AiFeatureGroupBigQueryArgs();

    /**
     * The BigQuery source URI that points to either a BigQuery Table or View.
     * Structure is documented below.
     * 
     */
    @Import(name="bigQuerySource", required=true)
    private Output<AiFeatureGroupBigQueryBigQuerySourceArgs> bigQuerySource;

    /**
     * @return The BigQuery source URI that points to either a BigQuery Table or View.
     * Structure is documented below.
     * 
     */
    public Output<AiFeatureGroupBigQueryBigQuerySourceArgs> bigQuerySource() {
        return this.bigQuerySource;
    }

    /**
     * Columns to construct entityId / row keys. If not provided defaults to entityId.
     * 
     */
    @Import(name="entityIdColumns")
    private @Nullable Output<List<String>> entityIdColumns;

    /**
     * @return Columns to construct entityId / row keys. If not provided defaults to entityId.
     * 
     */
    public Optional<Output<List<String>>> entityIdColumns() {
        return Optional.ofNullable(this.entityIdColumns);
    }

    private AiFeatureGroupBigQueryArgs() {}

    private AiFeatureGroupBigQueryArgs(AiFeatureGroupBigQueryArgs $) {
        this.bigQuerySource = $.bigQuerySource;
        this.entityIdColumns = $.entityIdColumns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiFeatureGroupBigQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiFeatureGroupBigQueryArgs $;

        public Builder() {
            $ = new AiFeatureGroupBigQueryArgs();
        }

        public Builder(AiFeatureGroupBigQueryArgs defaults) {
            $ = new AiFeatureGroupBigQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bigQuerySource The BigQuery source URI that points to either a BigQuery Table or View.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigQuerySource(Output<AiFeatureGroupBigQueryBigQuerySourceArgs> bigQuerySource) {
            $.bigQuerySource = bigQuerySource;
            return this;
        }

        /**
         * @param bigQuerySource The BigQuery source URI that points to either a BigQuery Table or View.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs bigQuerySource) {
            return bigQuerySource(Output.of(bigQuerySource));
        }

        /**
         * @param entityIdColumns Columns to construct entityId / row keys. If not provided defaults to entityId.
         * 
         * @return builder
         * 
         */
        public Builder entityIdColumns(@Nullable Output<List<String>> entityIdColumns) {
            $.entityIdColumns = entityIdColumns;
            return this;
        }

        /**
         * @param entityIdColumns Columns to construct entityId / row keys. If not provided defaults to entityId.
         * 
         * @return builder
         * 
         */
        public Builder entityIdColumns(List<String> entityIdColumns) {
            return entityIdColumns(Output.of(entityIdColumns));
        }

        /**
         * @param entityIdColumns Columns to construct entityId / row keys. If not provided defaults to entityId.
         * 
         * @return builder
         * 
         */
        public Builder entityIdColumns(String... entityIdColumns) {
            return entityIdColumns(List.of(entityIdColumns));
        }

        public AiFeatureGroupBigQueryArgs build() {
            if ($.bigQuerySource == null) {
                throw new MissingRequiredPropertyException("AiFeatureGroupBigQueryArgs", "bigQuerySource");
            }
            return $;
        }
    }

}
