// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs Empty = new PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs();

    /**
     * Duration format. The minimum age a table must have before Cloud DLP can profile it. Value greater than 1.
     * 
     */
    @Import(name="minAge")
    private @Nullable Output<String> minAge;

    /**
     * @return Duration format. The minimum age a table must have before Cloud DLP can profile it. Value greater than 1.
     * 
     */
    public Optional<Output<String>> minAge() {
        return Optional.ofNullable(this.minAge);
    }

    /**
     * Minimum number of rows that should be present before Cloud DLP profiles as a table.
     * 
     */
    @Import(name="minRowCount")
    private @Nullable Output<Integer> minRowCount;

    /**
     * @return Minimum number of rows that should be present before Cloud DLP profiles as a table.
     * 
     */
    public Optional<Output<Integer>> minRowCount() {
        return Optional.ofNullable(this.minRowCount);
    }

    private PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs() {}

    private PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs(PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs $) {
        this.minAge = $.minAge;
        this.minRowCount = $.minRowCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs();
        }

        public Builder(PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs defaults) {
            $ = new PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minAge Duration format. The minimum age a table must have before Cloud DLP can profile it. Value greater than 1.
         * 
         * @return builder
         * 
         */
        public Builder minAge(@Nullable Output<String> minAge) {
            $.minAge = minAge;
            return this;
        }

        /**
         * @param minAge Duration format. The minimum age a table must have before Cloud DLP can profile it. Value greater than 1.
         * 
         * @return builder
         * 
         */
        public Builder minAge(String minAge) {
            return minAge(Output.of(minAge));
        }

        /**
         * @param minRowCount Minimum number of rows that should be present before Cloud DLP profiles as a table.
         * 
         * @return builder
         * 
         */
        public Builder minRowCount(@Nullable Output<Integer> minRowCount) {
            $.minRowCount = minRowCount;
            return this;
        }

        /**
         * @param minRowCount Minimum number of rows that should be present before Cloud DLP profiles as a table.
         * 
         * @return builder
         * 
         */
        public Builder minRowCount(Integer minRowCount) {
            return minRowCount(Output.of(minRowCount));
        }

        public PreventionDiscoveryConfigTargetBigQueryTargetConditionsOrConditionsArgs build() {
            return $;
        }
    }

}
