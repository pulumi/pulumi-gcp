// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs;
import com.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs;
import com.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs;
import com.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs;
import com.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs;
import com.pulumi.gcp.diagflow.inputs.CxFlowEventHandlerTriggerFulfillmentMessageTextArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxFlowEventHandlerTriggerFulfillmentMessageArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxFlowEventHandlerTriggerFulfillmentMessageArgs Empty = new CxFlowEventHandlerTriggerFulfillmentMessageArgs();

    /**
     * The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
     * 
     */
    @Import(name="channel")
    private @Nullable Output<String> channel;

    /**
     * @return The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
     * 
     */
    public Optional<Output<String>> channel() {
        return Optional.ofNullable(this.channel);
    }

    /**
     * Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
     * Dialogflow only uses this to determine which conversations should be counted as successful and doesn&#39;t process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don&#39;t return ConversationSuccess.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
     * * In a webhook response when you determine that you handled the customer issue.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    @Import(name="conversationSuccess")
    private @Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs> conversationSuccess;

    /**
     * @return Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
     * Dialogflow only uses this to determine which conversations should be counted as successful and doesn&#39;t process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don&#39;t return ConversationSuccess.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
     * * In a webhook response when you determine that you handled the customer issue.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs>> conversationSuccess() {
        return Optional.ofNullable(this.conversationSuccess);
    }

    /**
     * Indicates that the conversation should be handed off to a live agent.
     * Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
     * * In a webhook response when you determine that the customer issue can only be handled by a human.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    @Import(name="liveAgentHandoff")
    private @Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs> liveAgentHandoff;

    /**
     * @return Indicates that the conversation should be handed off to a live agent.
     * Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
     * * In a webhook response when you determine that the customer issue can only be handled by a human.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs>> liveAgentHandoff() {
        return Optional.ofNullable(this.liveAgentHandoff);
    }

    /**
     * A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    @Import(name="outputAudioText")
    private @Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs> outputAudioText;

    /**
     * @return A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs>> outputAudioText() {
        return Optional.ofNullable(this.outputAudioText);
    }

    /**
     * Returns a response containing a custom, platform-specific payload.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * 
     */
    @Import(name="payload")
    private @Nullable Output<String> payload;

    /**
     * @return Returns a response containing a custom, platform-specific payload.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * 
     */
    public Optional<Output<String>> payload() {
        return Optional.ofNullable(this.payload);
    }

    /**
     * Specifies an audio clip to be played by the client as part of the response.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    @Import(name="playAudio")
    private @Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs> playAudio;

    /**
     * @return Specifies an audio clip to be played by the client as part of the response.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs>> playAudio() {
        return Optional.ofNullable(this.playAudio);
    }

    /**
     * Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    @Import(name="telephonyTransferCall")
    private @Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs> telephonyTransferCall;

    /**
     * @return Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs>> telephonyTransferCall() {
        return Optional.ofNullable(this.telephonyTransferCall);
    }

    /**
     * The text response message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    @Import(name="text")
    private @Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageTextArgs> text;

    /**
     * @return The text response message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxFlowEventHandlerTriggerFulfillmentMessageTextArgs>> text() {
        return Optional.ofNullable(this.text);
    }

    private CxFlowEventHandlerTriggerFulfillmentMessageArgs() {}

    private CxFlowEventHandlerTriggerFulfillmentMessageArgs(CxFlowEventHandlerTriggerFulfillmentMessageArgs $) {
        this.channel = $.channel;
        this.conversationSuccess = $.conversationSuccess;
        this.liveAgentHandoff = $.liveAgentHandoff;
        this.outputAudioText = $.outputAudioText;
        this.payload = $.payload;
        this.playAudio = $.playAudio;
        this.telephonyTransferCall = $.telephonyTransferCall;
        this.text = $.text;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxFlowEventHandlerTriggerFulfillmentMessageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxFlowEventHandlerTriggerFulfillmentMessageArgs $;

        public Builder() {
            $ = new CxFlowEventHandlerTriggerFulfillmentMessageArgs();
        }

        public Builder(CxFlowEventHandlerTriggerFulfillmentMessageArgs defaults) {
            $ = new CxFlowEventHandlerTriggerFulfillmentMessageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param channel The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
         * 
         * @return builder
         * 
         */
        public Builder channel(@Nullable Output<String> channel) {
            $.channel = channel;
            return this;
        }

        /**
         * @param channel The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
         * 
         * @return builder
         * 
         */
        public Builder channel(String channel) {
            return channel(Output.of(channel));
        }

        /**
         * @param conversationSuccess Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
         * Dialogflow only uses this to determine which conversations should be counted as successful and doesn&#39;t process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don&#39;t return ConversationSuccess.
         * You may set this, for example:
         * * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
         * * In a webhook response when you determine that you handled the customer issue.
         *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conversationSuccess(@Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs> conversationSuccess) {
            $.conversationSuccess = conversationSuccess;
            return this;
        }

        /**
         * @param conversationSuccess Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
         * Dialogflow only uses this to determine which conversations should be counted as successful and doesn&#39;t process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don&#39;t return ConversationSuccess.
         * You may set this, for example:
         * * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
         * * In a webhook response when you determine that you handled the customer issue.
         *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder conversationSuccess(CxFlowEventHandlerTriggerFulfillmentMessageConversationSuccessArgs conversationSuccess) {
            return conversationSuccess(Output.of(conversationSuccess));
        }

        /**
         * @param liveAgentHandoff Indicates that the conversation should be handed off to a live agent.
         * Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
         * You may set this, for example:
         * * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
         * * In a webhook response when you determine that the customer issue can only be handled by a human.
         *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder liveAgentHandoff(@Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs> liveAgentHandoff) {
            $.liveAgentHandoff = liveAgentHandoff;
            return this;
        }

        /**
         * @param liveAgentHandoff Indicates that the conversation should be handed off to a live agent.
         * Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
         * You may set this, for example:
         * * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
         * * In a webhook response when you determine that the customer issue can only be handled by a human.
         *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder liveAgentHandoff(CxFlowEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArgs liveAgentHandoff) {
            return liveAgentHandoff(Output.of(liveAgentHandoff));
        }

        /**
         * @param outputAudioText A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputAudioText(@Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs> outputAudioText) {
            $.outputAudioText = outputAudioText;
            return this;
        }

        /**
         * @param outputAudioText A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outputAudioText(CxFlowEventHandlerTriggerFulfillmentMessageOutputAudioTextArgs outputAudioText) {
            return outputAudioText(Output.of(outputAudioText));
        }

        /**
         * @param payload Returns a response containing a custom, platform-specific payload.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * 
         * @return builder
         * 
         */
        public Builder payload(@Nullable Output<String> payload) {
            $.payload = payload;
            return this;
        }

        /**
         * @param payload Returns a response containing a custom, platform-specific payload.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * 
         * @return builder
         * 
         */
        public Builder payload(String payload) {
            return payload(Output.of(payload));
        }

        /**
         * @param playAudio Specifies an audio clip to be played by the client as part of the response.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder playAudio(@Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs> playAudio) {
            $.playAudio = playAudio;
            return this;
        }

        /**
         * @param playAudio Specifies an audio clip to be played by the client as part of the response.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder playAudio(CxFlowEventHandlerTriggerFulfillmentMessagePlayAudioArgs playAudio) {
            return playAudio(Output.of(playAudio));
        }

        /**
         * @param telephonyTransferCall Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder telephonyTransferCall(@Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs> telephonyTransferCall) {
            $.telephonyTransferCall = telephonyTransferCall;
            return this;
        }

        /**
         * @param telephonyTransferCall Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder telephonyTransferCall(CxFlowEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArgs telephonyTransferCall) {
            return telephonyTransferCall(Output.of(telephonyTransferCall));
        }

        /**
         * @param text The text response message.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<CxFlowEventHandlerTriggerFulfillmentMessageTextArgs> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The text response message.
         * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder text(CxFlowEventHandlerTriggerFulfillmentMessageTextArgs text) {
            return text(Output.of(text));
        }

        public CxFlowEventHandlerTriggerFulfillmentMessageArgs build() {
            return $;
        }
    }

}
