// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workstations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkstationConfigContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkstationConfigContainerArgs Empty = new WorkstationConfigContainerArgs();

    /**
     * Arguments passed to the entrypoint.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return Arguments passed to the entrypoint.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * If set, overrides the default ENTRYPOINT specified by the image.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return If set, overrides the default ENTRYPOINT specified by the image.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * Environment variables passed to the container.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    @Import(name="env")
    private @Nullable Output<Map<String,String>> env;

    /**
     * @return Environment variables passed to the container.
     * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
     * 
     */
    public Optional<Output<Map<String,String>>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * Docker image defining the container. This image must be accessible by the config&#39;s service account.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Docker image defining the container. This image must be accessible by the config&#39;s service account.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * If set, overrides the USER specified in the image with the given uid.
     * 
     */
    @Import(name="runAsUser")
    private @Nullable Output<Integer> runAsUser;

    /**
     * @return If set, overrides the USER specified in the image with the given uid.
     * 
     */
    public Optional<Output<Integer>> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }

    /**
     * If set, overrides the default DIR specified by the image.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return If set, overrides the default DIR specified by the image.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private WorkstationConfigContainerArgs() {}

    private WorkstationConfigContainerArgs(WorkstationConfigContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.env = $.env;
        this.image = $.image;
        this.runAsUser = $.runAsUser;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkstationConfigContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkstationConfigContainerArgs $;

        public Builder() {
            $ = new WorkstationConfigContainerArgs();
        }

        public Builder(WorkstationConfigContainerArgs defaults) {
            $ = new WorkstationConfigContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args Arguments passed to the entrypoint.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args Arguments passed to the entrypoint.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args Arguments passed to the entrypoint.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands If set, overrides the default ENTRYPOINT specified by the image.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands If set, overrides the default ENTRYPOINT specified by the image.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands If set, overrides the default ENTRYPOINT specified by the image.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param env Environment variables passed to the container.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable Output<Map<String,String>> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Environment variables passed to the container.
         * The elements are of the form &#34;KEY=VALUE&#34; for the environment variable &#34;KEY&#34; being given the value &#34;VALUE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder env(Map<String,String> env) {
            return env(Output.of(env));
        }

        /**
         * @param image Docker image defining the container. This image must be accessible by the config&#39;s service account.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Docker image defining the container. This image must be accessible by the config&#39;s service account.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param runAsUser If set, overrides the USER specified in the image with the given uid.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(@Nullable Output<Integer> runAsUser) {
            $.runAsUser = runAsUser;
            return this;
        }

        /**
         * @param runAsUser If set, overrides the USER specified in the image with the given uid.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(Integer runAsUser) {
            return runAsUser(Output.of(runAsUser));
        }

        /**
         * @param workingDir If set, overrides the default DIR specified by the image.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir If set, overrides the default DIR specified by the image.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public WorkstationConfigContainerArgs build() {
            return $;
        }
    }

}
