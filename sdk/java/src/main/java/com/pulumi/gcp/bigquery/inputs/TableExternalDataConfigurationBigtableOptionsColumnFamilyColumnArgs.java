// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs Empty = new TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs();

    /**
     * The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
     * 
     */
    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
     * 
     */
    @Import(name="fieldName")
    private @Nullable Output<String> fieldName;

    /**
     * @return If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
     * 
     */
    public Optional<Output<String>> fieldName() {
        return Optional.ofNullable(this.fieldName);
    }

    /**
     * If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
     * 
     */
    @Import(name="onlyReadLatest")
    private @Nullable Output<Boolean> onlyReadLatest;

    /**
     * @return If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
     * 
     */
    public Optional<Output<Boolean>> onlyReadLatest() {
        return Optional.ofNullable(this.onlyReadLatest);
    }

    /**
     * Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifierString field. Otherwise, a base-64 encoded value must be set to qualifierEncoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as fieldName.
     * 
     */
    @Import(name="qualifierEncoded")
    private @Nullable Output<String> qualifierEncoded;

    /**
     * @return Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifierString field. Otherwise, a base-64 encoded value must be set to qualifierEncoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as fieldName.
     * 
     */
    public Optional<Output<String>> qualifierEncoded() {
        return Optional.ofNullable(this.qualifierEncoded);
    }

    /**
     * Qualifier string.
     * 
     */
    @Import(name="qualifierString")
    private @Nullable Output<String> qualifierString;

    /**
     * @return Qualifier string.
     * 
     */
    public Optional<Output<String>> qualifierString() {
        return Optional.ofNullable(this.qualifierString);
    }

    /**
     * The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;, Default type is &#34;BYTES&#34;. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;, Default type is &#34;BYTES&#34;. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs() {}

    private TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs $) {
        this.encoding = $.encoding;
        this.fieldName = $.fieldName;
        this.onlyReadLatest = $.onlyReadLatest;
        this.qualifierEncoded = $.qualifierEncoded;
        this.qualifierString = $.qualifierString;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs $;

        public Builder() {
            $ = new TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs();
        }

        public Builder(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs defaults) {
            $ = new TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encoding The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. &#39;encoding&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;encoding&#39; is set at both levels.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param fieldName If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(@Nullable Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param onlyReadLatest If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
         * 
         * @return builder
         * 
         */
        public Builder onlyReadLatest(@Nullable Output<Boolean> onlyReadLatest) {
            $.onlyReadLatest = onlyReadLatest;
            return this;
        }

        /**
         * @param onlyReadLatest If this is set, only the latest version of value in this column are exposed. &#39;onlyReadLatest&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;onlyReadLatest&#39; is set at both levels.
         * 
         * @return builder
         * 
         */
        public Builder onlyReadLatest(Boolean onlyReadLatest) {
            return onlyReadLatest(Output.of(onlyReadLatest));
        }

        /**
         * @param qualifierEncoded Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifierString field. Otherwise, a base-64 encoded value must be set to qualifierEncoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as fieldName.
         * 
         * @return builder
         * 
         */
        public Builder qualifierEncoded(@Nullable Output<String> qualifierEncoded) {
            $.qualifierEncoded = qualifierEncoded;
            return this;
        }

        /**
         * @param qualifierEncoded Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifierString field. Otherwise, a base-64 encoded value must be set to qualifierEncoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as fieldName.
         * 
         * @return builder
         * 
         */
        public Builder qualifierEncoded(String qualifierEncoded) {
            return qualifierEncoded(Output.of(qualifierEncoded));
        }

        /**
         * @param qualifierString Qualifier string.
         * 
         * @return builder
         * 
         */
        public Builder qualifierString(@Nullable Output<String> qualifierString) {
            $.qualifierString = qualifierString;
            return this;
        }

        /**
         * @param qualifierString Qualifier string.
         * 
         * @return builder
         * 
         */
        public Builder qualifierString(String qualifierString) {
            return qualifierString(Output.of(qualifierString));
        }

        /**
         * @param type The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;, Default type is &#34;BYTES&#34;. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;, Default type is &#34;BYTES&#34;. &#39;type&#39; can also be set at the column family level. However, the setting at this level takes precedence if &#39;type&#39; is set at both levels.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs build() {
            return $;
        }
    }

}
