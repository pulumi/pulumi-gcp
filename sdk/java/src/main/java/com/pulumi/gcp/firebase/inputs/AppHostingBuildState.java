// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebase.inputs.AppHostingBuildErrorArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingBuildSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingBuildState extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingBuildState Empty = new AppHostingBuildState();

    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of the annotations
     * present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of the annotations
     * present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The ID of the Backend that this Build applies to
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The ID of the Backend that this Build applies to
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The user-specified ID of the build being created.
     * 
     */
    @Import(name="buildId")
    private @Nullable Output<String> buildId;

    /**
     * @return The user-specified ID of the build being created.
     * 
     */
    public Optional<Output<String>> buildId() {
        return Optional.ofNullable(this.buildId);
    }

    /**
     * The location of the [Cloud Build
     * logs](https://cloud.google.com/build/docs/view-build-results) for the build
     * process.
     * 
     */
    @Import(name="buildLogsUri")
    private @Nullable Output<String> buildLogsUri;

    /**
     * @return The location of the [Cloud Build
     * logs](https://cloud.google.com/build/docs/view-build-results) for the build
     * process.
     * 
     */
    public Optional<Output<String>> buildLogsUri() {
        return Optional.ofNullable(this.buildLogsUri);
    }

    /**
     * Time at which the build was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time at which the build was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Human-readable name. 63 character limit.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Human-readable name. 63 character limit.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * The environment name of the backend when this build was created.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The environment name of the backend when this build was created.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The source of the error for the build, if in a `FAILED` state.
     * Possible values:
     * CLOUD_BUILD
     * CLOUD_RUN
     * 
     */
    @Import(name="errorSource")
    private @Nullable Output<String> errorSource;

    /**
     * @return The source of the error for the build, if in a `FAILED` state.
     * Possible values:
     * CLOUD_BUILD
     * CLOUD_RUN
     * 
     */
    public Optional<Output<String>> errorSource() {
        return Optional.ofNullable(this.errorSource);
    }

    /**
     * The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     * Structure is documented below.
     * 
     */
    @Import(name="errors")
    private @Nullable Output<List<AppHostingBuildErrorArgs>> errors;

    /**
     * @return The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AppHostingBuildErrorArgs>>> errors() {
        return Optional.ofNullable(this.errors);
    }

    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The Artifact Registry
     * [container
     * image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
     * URI, used by the Cloud Run
     * [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
     * for this build.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The Artifact Registry
     * [container
     * image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
     * URI, used by the Cloud Run
     * [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
     * for this build.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the Backend that this Build applies to
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the Backend that this Build applies to
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of the build.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of the build.
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * The source for the build.
     * Structure is documented below.
     * 
     */
    @Import(name="source")
    private @Nullable Output<AppHostingBuildSourceArgs> source;

    /**
     * @return The source for the build.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AppHostingBuildSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The state of the build.
     * Possible values:
     * BUILDING
     * BUILT
     * DEPLOYING
     * READY
     * FAILED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the build.
     * Possible values:
     * BUILDING
     * BUILT
     * DEPLOYING
     * READY
     * FAILED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * System-assigned, unique identifier.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System-assigned, unique identifier.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Time at which the build was last updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time at which the build was last updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AppHostingBuildState() {}

    private AppHostingBuildState(AppHostingBuildState $) {
        this.annotations = $.annotations;
        this.backend = $.backend;
        this.buildId = $.buildId;
        this.buildLogsUri = $.buildLogsUri;
        this.createTime = $.createTime;
        this.displayName = $.displayName;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.environment = $.environment;
        this.errorSource = $.errorSource;
        this.errors = $.errors;
        this.etag = $.etag;
        this.image = $.image;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.source = $.source;
        this.state = $.state;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingBuildState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingBuildState $;

        public Builder() {
            $ = new AppHostingBuildState();
        }

        public Builder(AppHostingBuildState defaults) {
            $ = new AppHostingBuildState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
         * should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
         * annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of the annotations
         * present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
         * should be preserved when modifying objects. **Note**: This field is non-authoritative, and will only manage the
         * annotations present in your configuration. Please refer to the field &#39;effective_annotations&#39; for all of the annotations
         * present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param backend The ID of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The ID of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param buildId The user-specified ID of the build being created.
         * 
         * @return builder
         * 
         */
        public Builder buildId(@Nullable Output<String> buildId) {
            $.buildId = buildId;
            return this;
        }

        /**
         * @param buildId The user-specified ID of the build being created.
         * 
         * @return builder
         * 
         */
        public Builder buildId(String buildId) {
            return buildId(Output.of(buildId));
        }

        /**
         * @param buildLogsUri The location of the [Cloud Build
         * logs](https://cloud.google.com/build/docs/view-build-results) for the build
         * process.
         * 
         * @return builder
         * 
         */
        public Builder buildLogsUri(@Nullable Output<String> buildLogsUri) {
            $.buildLogsUri = buildLogsUri;
            return this;
        }

        /**
         * @param buildLogsUri The location of the [Cloud Build
         * logs](https://cloud.google.com/build/docs/view-build-results) for the build
         * process.
         * 
         * @return builder
         * 
         */
        public Builder buildLogsUri(String buildLogsUri) {
            return buildLogsUri(Output.of(buildLogsUri));
        }

        /**
         * @param createTime Time at which the build was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time at which the build was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Human-readable name. 63 character limit.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param environment The environment name of the backend when this build was created.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The environment name of the backend when this build was created.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param errorSource The source of the error for the build, if in a `FAILED` state.
         * Possible values:
         * CLOUD_BUILD
         * CLOUD_RUN
         * 
         * @return builder
         * 
         */
        public Builder errorSource(@Nullable Output<String> errorSource) {
            $.errorSource = errorSource;
            return this;
        }

        /**
         * @param errorSource The source of the error for the build, if in a `FAILED` state.
         * Possible values:
         * CLOUD_BUILD
         * CLOUD_RUN
         * 
         * @return builder
         * 
         */
        public Builder errorSource(String errorSource) {
            return errorSource(Output.of(errorSource));
        }

        /**
         * @param errors The `Status` type defines a logical error model that is suitable for
         * different programming environments, including REST APIs and RPC APIs. It is
         * used by [gRPC](https://github.com/grpc). Each `Status` message contains
         * three pieces of data: error code, error message, and error details.
         * You can find out more about this error model and how to work with it in the
         * [API Design Guide](https://cloud.google.com/apis/design/errors).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errors(@Nullable Output<List<AppHostingBuildErrorArgs>> errors) {
            $.errors = errors;
            return this;
        }

        /**
         * @param errors The `Status` type defines a logical error model that is suitable for
         * different programming environments, including REST APIs and RPC APIs. It is
         * used by [gRPC](https://github.com/grpc). Each `Status` message contains
         * three pieces of data: error code, error message, and error details.
         * You can find out more about this error model and how to work with it in the
         * [API Design Guide](https://cloud.google.com/apis/design/errors).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errors(List<AppHostingBuildErrorArgs> errors) {
            return errors(Output.of(errors));
        }

        /**
         * @param errors The `Status` type defines a logical error model that is suitable for
         * different programming environments, including REST APIs and RPC APIs. It is
         * used by [gRPC](https://github.com/grpc). Each `Status` message contains
         * three pieces of data: error code, error message, and error details.
         * You can find out more about this error model and how to work with it in the
         * [API Design Guide](https://cloud.google.com/apis/design/errors).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errors(AppHostingBuildErrorArgs... errors) {
            return errors(List.of(errors));
        }

        /**
         * @param etag Server-computed checksum based on other values; may be sent
         * on update or delete to ensure operation is done on expected resource.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Server-computed checksum based on other values; may be sent
         * on update or delete to ensure operation is done on expected resource.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param image The Artifact Registry
         * [container
         * image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
         * URI, used by the Cloud Run
         * [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
         * for this build.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The Artifact Registry
         * [container
         * image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
         * URI, used by the Cloud Run
         * [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
         * for this build.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param labels Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
         * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
         * &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Unstructured key value map that can be used to organize and categorize objects. **Note**: This field is
         * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
         * &#39;effective_labels&#39; for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Backend that this Build applies to
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of the build.
         * Format:
         * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of the build.
         * Format:
         * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param source The source for the build.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<AppHostingBuildSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source for the build.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder source(AppHostingBuildSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param state The state of the build.
         * Possible values:
         * BUILDING
         * BUILT
         * DEPLOYING
         * READY
         * FAILED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the build.
         * Possible values:
         * BUILDING
         * BUILT
         * DEPLOYING
         * READY
         * FAILED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid System-assigned, unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System-assigned, unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Time at which the build was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time at which the build was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AppHostingBuildState build() {
            return $;
        }
    }

}
