// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterControlPlaneNodeAutoResizeConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareClusterControlPlaneNodeVsphereConfigArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VMwareClusterControlPlaneNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareClusterControlPlaneNodeArgs Empty = new VMwareClusterControlPlaneNodeArgs();

    /**
     * AutoResizeConfig provides auto resizing configurations.
     * Structure is documented below.
     * 
     */
    @Import(name="autoResizeConfig")
    private @Nullable Output<VMwareClusterControlPlaneNodeAutoResizeConfigArgs> autoResizeConfig;

    /**
     * @return AutoResizeConfig provides auto resizing configurations.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareClusterControlPlaneNodeAutoResizeConfigArgs>> autoResizeConfig() {
        return Optional.ofNullable(this.autoResizeConfig);
    }

    /**
     * The number of CPUs for each admin cluster node that serve as control planes
     * for this VMware User Cluster. (default: 4 CPUs)
     * 
     */
    @Import(name="cpus")
    private @Nullable Output<Integer> cpus;

    /**
     * @return The number of CPUs for each admin cluster node that serve as control planes
     * for this VMware User Cluster. (default: 4 CPUs)
     * 
     */
    public Optional<Output<Integer>> cpus() {
        return Optional.ofNullable(this.cpus);
    }

    /**
     * The megabytes of memory for each admin cluster node that serves as a
     * control plane for this VMware User Cluster (default: 8192 MB memory).
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The megabytes of memory for each admin cluster node that serves as a
     * control plane for this VMware User Cluster (default: 8192 MB memory).
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The number of control plane nodes for this VMware User Cluster.
     * (default: 1 replica).
     * 
     */
    @Import(name="replicas")
    private @Nullable Output<Integer> replicas;

    /**
     * @return The number of control plane nodes for this VMware User Cluster.
     * (default: 1 replica).
     * 
     */
    public Optional<Output<Integer>> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    /**
     * (Output)
     * Vsphere-specific config.
     * Structure is documented below.
     * 
     */
    @Import(name="vsphereConfigs")
    private @Nullable Output<List<VMwareClusterControlPlaneNodeVsphereConfigArgs>> vsphereConfigs;

    /**
     * @return (Output)
     * Vsphere-specific config.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VMwareClusterControlPlaneNodeVsphereConfigArgs>>> vsphereConfigs() {
        return Optional.ofNullable(this.vsphereConfigs);
    }

    private VMwareClusterControlPlaneNodeArgs() {}

    private VMwareClusterControlPlaneNodeArgs(VMwareClusterControlPlaneNodeArgs $) {
        this.autoResizeConfig = $.autoResizeConfig;
        this.cpus = $.cpus;
        this.memory = $.memory;
        this.replicas = $.replicas;
        this.vsphereConfigs = $.vsphereConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareClusterControlPlaneNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareClusterControlPlaneNodeArgs $;

        public Builder() {
            $ = new VMwareClusterControlPlaneNodeArgs();
        }

        public Builder(VMwareClusterControlPlaneNodeArgs defaults) {
            $ = new VMwareClusterControlPlaneNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoResizeConfig AutoResizeConfig provides auto resizing configurations.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoResizeConfig(@Nullable Output<VMwareClusterControlPlaneNodeAutoResizeConfigArgs> autoResizeConfig) {
            $.autoResizeConfig = autoResizeConfig;
            return this;
        }

        /**
         * @param autoResizeConfig AutoResizeConfig provides auto resizing configurations.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoResizeConfig(VMwareClusterControlPlaneNodeAutoResizeConfigArgs autoResizeConfig) {
            return autoResizeConfig(Output.of(autoResizeConfig));
        }

        /**
         * @param cpus The number of CPUs for each admin cluster node that serve as control planes
         * for this VMware User Cluster. (default: 4 CPUs)
         * 
         * @return builder
         * 
         */
        public Builder cpus(@Nullable Output<Integer> cpus) {
            $.cpus = cpus;
            return this;
        }

        /**
         * @param cpus The number of CPUs for each admin cluster node that serve as control planes
         * for this VMware User Cluster. (default: 4 CPUs)
         * 
         * @return builder
         * 
         */
        public Builder cpus(Integer cpus) {
            return cpus(Output.of(cpus));
        }

        /**
         * @param memory The megabytes of memory for each admin cluster node that serves as a
         * control plane for this VMware User Cluster (default: 8192 MB memory).
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The megabytes of memory for each admin cluster node that serves as a
         * control plane for this VMware User Cluster (default: 8192 MB memory).
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param replicas The number of control plane nodes for this VMware User Cluster.
         * (default: 1 replica).
         * 
         * @return builder
         * 
         */
        public Builder replicas(@Nullable Output<Integer> replicas) {
            $.replicas = replicas;
            return this;
        }

        /**
         * @param replicas The number of control plane nodes for this VMware User Cluster.
         * (default: 1 replica).
         * 
         * @return builder
         * 
         */
        public Builder replicas(Integer replicas) {
            return replicas(Output.of(replicas));
        }

        /**
         * @param vsphereConfigs (Output)
         * Vsphere-specific config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfigs(@Nullable Output<List<VMwareClusterControlPlaneNodeVsphereConfigArgs>> vsphereConfigs) {
            $.vsphereConfigs = vsphereConfigs;
            return this;
        }

        /**
         * @param vsphereConfigs (Output)
         * Vsphere-specific config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfigs(List<VMwareClusterControlPlaneNodeVsphereConfigArgs> vsphereConfigs) {
            return vsphereConfigs(Output.of(vsphereConfigs));
        }

        /**
         * @param vsphereConfigs (Output)
         * Vsphere-specific config.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfigs(VMwareClusterControlPlaneNodeVsphereConfigArgs... vsphereConfigs) {
            return vsphereConfigs(List.of(vsphereConfigs));
        }

        public VMwareClusterControlPlaneNodeArgs build() {
            return $;
        }
    }

}
