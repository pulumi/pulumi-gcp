// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigTransformationRuleFieldActionArgs;
import com.pulumi.gcp.gkebackup.inputs.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RestorePlanRestoreConfigTransformationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestorePlanRestoreConfigTransformationRuleArgs Empty = new RestorePlanRestoreConfigTransformationRuleArgs();

    /**
     * The description is a user specified string description
     * of the transformation rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description is a user specified string description
     * of the transformation rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of transformation rule actions to take against candidate
     * resources. Actions are executed in order defined - this order
     * matters, as they could potentially interfere with each other and
     * the first operation could affect the outcome of the second operation.
     * Structure is documented below.
     * 
     */
    @Import(name="fieldActions", required=true)
    private Output<List<RestorePlanRestoreConfigTransformationRuleFieldActionArgs>> fieldActions;

    /**
     * @return A list of transformation rule actions to take against candidate
     * resources. Actions are executed in order defined - this order
     * matters, as they could potentially interfere with each other and
     * the first operation could affect the outcome of the second operation.
     * Structure is documented below.
     * 
     */
    public Output<List<RestorePlanRestoreConfigTransformationRuleFieldActionArgs>> fieldActions() {
        return this.fieldActions;
    }

    /**
     * This field is used to specify a set of fields that should be used to
     * determine which resources in backup should be acted upon by the
     * supplied transformation rule actions, and this will ensure that only
     * specific resources are affected by transformation rule actions.
     * Structure is documented below.
     * 
     */
    @Import(name="resourceFilter")
    private @Nullable Output<RestorePlanRestoreConfigTransformationRuleResourceFilterArgs> resourceFilter;

    /**
     * @return This field is used to specify a set of fields that should be used to
     * determine which resources in backup should be acted upon by the
     * supplied transformation rule actions, and this will ensure that only
     * specific resources are affected by transformation rule actions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RestorePlanRestoreConfigTransformationRuleResourceFilterArgs>> resourceFilter() {
        return Optional.ofNullable(this.resourceFilter);
    }

    private RestorePlanRestoreConfigTransformationRuleArgs() {}

    private RestorePlanRestoreConfigTransformationRuleArgs(RestorePlanRestoreConfigTransformationRuleArgs $) {
        this.description = $.description;
        this.fieldActions = $.fieldActions;
        this.resourceFilter = $.resourceFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestorePlanRestoreConfigTransformationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestorePlanRestoreConfigTransformationRuleArgs $;

        public Builder() {
            $ = new RestorePlanRestoreConfigTransformationRuleArgs();
        }

        public Builder(RestorePlanRestoreConfigTransformationRuleArgs defaults) {
            $ = new RestorePlanRestoreConfigTransformationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description is a user specified string description
         * of the transformation rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description is a user specified string description
         * of the transformation rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fieldActions A list of transformation rule actions to take against candidate
         * resources. Actions are executed in order defined - this order
         * matters, as they could potentially interfere with each other and
         * the first operation could affect the outcome of the second operation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fieldActions(Output<List<RestorePlanRestoreConfigTransformationRuleFieldActionArgs>> fieldActions) {
            $.fieldActions = fieldActions;
            return this;
        }

        /**
         * @param fieldActions A list of transformation rule actions to take against candidate
         * resources. Actions are executed in order defined - this order
         * matters, as they could potentially interfere with each other and
         * the first operation could affect the outcome of the second operation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fieldActions(List<RestorePlanRestoreConfigTransformationRuleFieldActionArgs> fieldActions) {
            return fieldActions(Output.of(fieldActions));
        }

        /**
         * @param fieldActions A list of transformation rule actions to take against candidate
         * resources. Actions are executed in order defined - this order
         * matters, as they could potentially interfere with each other and
         * the first operation could affect the outcome of the second operation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder fieldActions(RestorePlanRestoreConfigTransformationRuleFieldActionArgs... fieldActions) {
            return fieldActions(List.of(fieldActions));
        }

        /**
         * @param resourceFilter This field is used to specify a set of fields that should be used to
         * determine which resources in backup should be acted upon by the
         * supplied transformation rule actions, and this will ensure that only
         * specific resources are affected by transformation rule actions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceFilter(@Nullable Output<RestorePlanRestoreConfigTransformationRuleResourceFilterArgs> resourceFilter) {
            $.resourceFilter = resourceFilter;
            return this;
        }

        /**
         * @param resourceFilter This field is used to specify a set of fields that should be used to
         * determine which resources in backup should be acted upon by the
         * supplied transformation rule actions, and this will ensure that only
         * specific resources are affected by transformation rule actions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceFilter(RestorePlanRestoreConfigTransformationRuleResourceFilterArgs resourceFilter) {
            return resourceFilter(Output.of(resourceFilter));
        }

        public RestorePlanRestoreConfigTransformationRuleArgs build() {
            $.fieldActions = Objects.requireNonNull($.fieldActions, "expected parameter 'fieldActions' to be non-null");
            return $;
        }
    }

}
