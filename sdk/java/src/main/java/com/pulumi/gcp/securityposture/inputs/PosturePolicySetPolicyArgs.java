// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securityposture.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetPolicyComplianceStandardArgs;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetPolicyConstraintArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PosturePolicySetPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PosturePolicySetPolicyArgs Empty = new PosturePolicySetPolicyArgs();

    /**
     * Mapping for policy to security standards and controls.
     * Structure is documented below.
     * 
     */
    @Import(name="complianceStandards")
    private @Nullable Output<List<PosturePolicySetPolicyComplianceStandardArgs>> complianceStandards;

    /**
     * @return Mapping for policy to security standards and controls.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<PosturePolicySetPolicyComplianceStandardArgs>>> complianceStandards() {
        return Optional.ofNullable(this.complianceStandards);
    }

    /**
     * Policy constraint definition.It can have the definition of one of following constraints: orgPolicyConstraint orgPolicyConstraintCustom securityHealthAnalyticsModule securityHealthAnalyticsCustomModule
     * Structure is documented below.
     * 
     */
    @Import(name="constraint", required=true)
    private Output<PosturePolicySetPolicyConstraintArgs> constraint;

    /**
     * @return Policy constraint definition.It can have the definition of one of following constraints: orgPolicyConstraint orgPolicyConstraintCustom securityHealthAnalyticsModule securityHealthAnalyticsCustomModule
     * Structure is documented below.
     * 
     */
    public Output<PosturePolicySetPolicyConstraintArgs> constraint() {
        return this.constraint;
    }

    /**
     * Description of the policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the policy.
     * 
     */
    @Import(name="policyId", required=true)
    private Output<String> policyId;

    /**
     * @return ID of the policy.
     * 
     */
    public Output<String> policyId() {
        return this.policyId;
    }

    private PosturePolicySetPolicyArgs() {}

    private PosturePolicySetPolicyArgs(PosturePolicySetPolicyArgs $) {
        this.complianceStandards = $.complianceStandards;
        this.constraint = $.constraint;
        this.description = $.description;
        this.policyId = $.policyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PosturePolicySetPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PosturePolicySetPolicyArgs $;

        public Builder() {
            $ = new PosturePolicySetPolicyArgs();
        }

        public Builder(PosturePolicySetPolicyArgs defaults) {
            $ = new PosturePolicySetPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complianceStandards Mapping for policy to security standards and controls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder complianceStandards(@Nullable Output<List<PosturePolicySetPolicyComplianceStandardArgs>> complianceStandards) {
            $.complianceStandards = complianceStandards;
            return this;
        }

        /**
         * @param complianceStandards Mapping for policy to security standards and controls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder complianceStandards(List<PosturePolicySetPolicyComplianceStandardArgs> complianceStandards) {
            return complianceStandards(Output.of(complianceStandards));
        }

        /**
         * @param complianceStandards Mapping for policy to security standards and controls.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder complianceStandards(PosturePolicySetPolicyComplianceStandardArgs... complianceStandards) {
            return complianceStandards(List.of(complianceStandards));
        }

        /**
         * @param constraint Policy constraint definition.It can have the definition of one of following constraints: orgPolicyConstraint orgPolicyConstraintCustom securityHealthAnalyticsModule securityHealthAnalyticsCustomModule
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder constraint(Output<PosturePolicySetPolicyConstraintArgs> constraint) {
            $.constraint = constraint;
            return this;
        }

        /**
         * @param constraint Policy constraint definition.It can have the definition of one of following constraints: orgPolicyConstraint orgPolicyConstraintCustom securityHealthAnalyticsModule securityHealthAnalyticsCustomModule
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder constraint(PosturePolicySetPolicyConstraintArgs constraint) {
            return constraint(Output.of(constraint));
        }

        /**
         * @param description Description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param policyId ID of the policy.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId ID of the policy.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        public PosturePolicySetPolicyArgs build() {
            if ($.constraint == null) {
                throw new MissingRequiredPropertyException("PosturePolicySetPolicyArgs", "constraint");
            }
            if ($.policyId == null) {
                throw new MissingRequiredPropertyException("PosturePolicySetPolicyArgs", "policyId");
            }
            return $;
        }
    }

}
