// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GdcSparkApplicationSparkRApplicationConfig {
    /**
     * @return HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    private @Nullable List<String> archiveUris;
    /**
     * @return The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     * 
     */
    private @Nullable List<String> args;
    /**
     * @return HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     * 
     */
    private @Nullable List<String> fileUris;
    /**
     * @return The HCFS URI of the main R file to use as the driver. Must be a .R file.
     * 
     */
    private String mainRFileUri;

    private GdcSparkApplicationSparkRApplicationConfig() {}
    /**
     * @return HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     * 
     */
    public List<String> archiveUris() {
        return this.archiveUris == null ? List.of() : this.archiveUris;
    }
    /**
     * @return The arguments to pass to the driver.  Do not include arguments, such as `--conf`, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     * 
     */
    public List<String> args() {
        return this.args == null ? List.of() : this.args;
    }
    /**
     * @return HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     * 
     */
    public List<String> fileUris() {
        return this.fileUris == null ? List.of() : this.fileUris;
    }
    /**
     * @return The HCFS URI of the main R file to use as the driver. Must be a .R file.
     * 
     */
    public String mainRFileUri() {
        return this.mainRFileUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GdcSparkApplicationSparkRApplicationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> archiveUris;
        private @Nullable List<String> args;
        private @Nullable List<String> fileUris;
        private String mainRFileUri;
        public Builder() {}
        public Builder(GdcSparkApplicationSparkRApplicationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveUris = defaults.archiveUris;
    	      this.args = defaults.args;
    	      this.fileUris = defaults.fileUris;
    	      this.mainRFileUri = defaults.mainRFileUri;
        }

        @CustomType.Setter
        public Builder archiveUris(@Nullable List<String> archiveUris) {

            this.archiveUris = archiveUris;
            return this;
        }
        public Builder archiveUris(String... archiveUris) {
            return archiveUris(List.of(archiveUris));
        }
        @CustomType.Setter
        public Builder args(@Nullable List<String> args) {

            this.args = args;
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder fileUris(@Nullable List<String> fileUris) {

            this.fileUris = fileUris;
            return this;
        }
        public Builder fileUris(String... fileUris) {
            return fileUris(List.of(fileUris));
        }
        @CustomType.Setter
        public Builder mainRFileUri(String mainRFileUri) {
            if (mainRFileUri == null) {
              throw new MissingRequiredPropertyException("GdcSparkApplicationSparkRApplicationConfig", "mainRFileUri");
            }
            this.mainRFileUri = mainRFileUri;
            return this;
        }
        public GdcSparkApplicationSparkRApplicationConfig build() {
            final var _resultValue = new GdcSparkApplicationSparkRApplicationConfig();
            _resultValue.archiveUris = archiveUris;
            _resultValue.args = args;
            _resultValue.fileUris = fileUris;
            _resultValue.mainRFileUri = mainRFileUri;
            return _resultValue;
        }
    }
}
