// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.storage.inputs.GetBucketArgs;
import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
import com.pulumi.gcp.storage.inputs.GetBucketObjectContentArgs;
import com.pulumi.gcp.storage.inputs.GetBucketObjectContentPlainArgs;
import com.pulumi.gcp.storage.inputs.GetBucketObjectPlainArgs;
import com.pulumi.gcp.storage.inputs.GetBucketPlainArgs;
import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlPlainArgs;
import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountArgs;
import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountPlainArgs;
import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountPlainArgs;
import com.pulumi.gcp.storage.outputs.GetBucketObjectContentResult;
import com.pulumi.gcp.storage.outputs.GetBucketObjectResult;
import com.pulumi.gcp.storage.outputs.GetBucketResult;
import com.pulumi.gcp.storage.outputs.GetObjectSignedUrlResult;
import com.pulumi.gcp.storage.outputs.GetProjectServiceAccountResult;
import com.pulumi.gcp.storage.outputs.GetTransferProjectServieAccountResult;
import java.util.concurrent.CompletableFuture;

public final class StorageFunctions {
    /**
     * Gets an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-bucket = StorageFunctions.getBucket(GetBucketArgs.builder()
     *             .name(&#34;my-bucket&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketResult> getBucket(GetBucketArgs args) {
        return getBucket(args, InvokeOptions.Empty);
    }
    /**
     * Gets an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-bucket = StorageFunctions.getBucket(GetBucketArgs.builder()
     *             .name(&#34;my-bucket&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketResult> getBucketPlain(GetBucketPlainArgs args) {
        return getBucketPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-bucket = StorageFunctions.getBucket(GetBucketArgs.builder()
     *             .name(&#34;my-bucket&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketResult> getBucket(GetBucketArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:storage/getBucket:getBucket", TypeShape.of(GetBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/buckets).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-bucket = StorageFunctions.getBucket(GetBucketArgs.builder()
     *             .name(&#34;my-bucket&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketResult> getBucketPlain(GetBucketPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:storage/getBucket:getBucket", TypeShape.of(GetBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * ## Example Usage
     * 
     * Example picture stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
     *             .bucket(&#34;image-store&#34;)
     *             .name(&#34;folder/butterfly01.jpg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketObjectResult> getBucketObject() {
        return getBucketObject(GetBucketObjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * ## Example Usage
     * 
     * Example picture stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
     *             .bucket(&#34;image-store&#34;)
     *             .name(&#34;folder/butterfly01.jpg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketObjectResult> getBucketObjectPlain() {
        return getBucketObjectPlain(GetBucketObjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * ## Example Usage
     * 
     * Example picture stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
     *             .bucket(&#34;image-store&#34;)
     *             .name(&#34;folder/butterfly01.jpg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketObjectResult> getBucketObject(GetBucketObjectArgs args) {
        return getBucketObject(args, InvokeOptions.Empty);
    }
    /**
     * Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * ## Example Usage
     * 
     * Example picture stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
     *             .bucket(&#34;image-store&#34;)
     *             .name(&#34;folder/butterfly01.jpg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketObjectResult> getBucketObjectPlain(GetBucketObjectPlainArgs args) {
        return getBucketObjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * ## Example Usage
     * 
     * Example picture stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
     *             .bucket(&#34;image-store&#34;)
     *             .name(&#34;folder/butterfly01.jpg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketObjectResult> getBucketObject(GetBucketObjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:storage/getBucketObject:getBucketObject", TypeShape.of(GetBucketObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * ## Example Usage
     * 
     * Example picture stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
     *             .bucket(&#34;image-store&#34;)
     *             .name(&#34;folder/butterfly01.jpg&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketObjectResult> getBucketObjectPlain(GetBucketObjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:storage/getBucketObject:getBucketObject", TypeShape.of(GetBucketObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets an existing object content inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * &gt; **Warning:** The object content will be saved in the state, and visiable to everyone who has access to the state file.
     * 
     * ## Example Usage
     * 
     * Example file object  stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectContentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var key = StorageFunctions.getBucketObjectContent(GetBucketObjectContentArgs.builder()
     *             .name(&#34;encryptedkey&#34;)
     *             .bucket(&#34;keystore&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;encrypted&#34;, key.applyValue(getBucketObjectContentResult -&gt; getBucketObjectContentResult.content()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketObjectContentResult> getBucketObjectContent(GetBucketObjectContentArgs args) {
        return getBucketObjectContent(args, InvokeOptions.Empty);
    }
    /**
     * Gets an existing object content inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * &gt; **Warning:** The object content will be saved in the state, and visiable to everyone who has access to the state file.
     * 
     * ## Example Usage
     * 
     * Example file object  stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectContentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var key = StorageFunctions.getBucketObjectContent(GetBucketObjectContentArgs.builder()
     *             .name(&#34;encryptedkey&#34;)
     *             .bucket(&#34;keystore&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;encrypted&#34;, key.applyValue(getBucketObjectContentResult -&gt; getBucketObjectContentResult.content()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketObjectContentResult> getBucketObjectContentPlain(GetBucketObjectContentPlainArgs args) {
        return getBucketObjectContentPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets an existing object content inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * &gt; **Warning:** The object content will be saved in the state, and visiable to everyone who has access to the state file.
     * 
     * ## Example Usage
     * 
     * Example file object  stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectContentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var key = StorageFunctions.getBucketObjectContent(GetBucketObjectContentArgs.builder()
     *             .name(&#34;encryptedkey&#34;)
     *             .bucket(&#34;keystore&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;encrypted&#34;, key.applyValue(getBucketObjectContentResult -&gt; getBucketObjectContentResult.content()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBucketObjectContentResult> getBucketObjectContent(GetBucketObjectContentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:storage/getBucketObjectContent:getBucketObjectContent", TypeShape.of(GetBucketObjectContentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets an existing object content inside an existing bucket in Google Cloud Storage service (GCS).
     * See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
     * and
     * [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
     * 
     * &gt; **Warning:** The object content will be saved in the state, and visiable to everyone who has access to the state file.
     * 
     * ## Example Usage
     * 
     * Example file object  stored within a folder.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetBucketObjectContentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var key = StorageFunctions.getBucketObjectContent(GetBucketObjectContentArgs.builder()
     *             .name(&#34;encryptedkey&#34;)
     *             .bucket(&#34;keystore&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;encrypted&#34;, key.applyValue(getBucketObjectContentResult -&gt; getBucketObjectContentResult.content()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBucketObjectContentResult> getBucketObjectContentPlain(GetBucketObjectContentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:storage/getBucketObjectContent:getBucketObjectContent", TypeShape.of(GetBucketObjectContentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The Google Cloud storage signed URL data source generates a signed URL for a given storage object. Signed URLs provide a way to give time-limited read or write access to anyone in possession of the URL, regardless of whether they have a Google account.
     * 
     * For more info about signed URL&#39;s is available [here](https://cloud.google.com/storage/docs/access-control/signed-urls).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var artifact = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;install_binaries&#34;)
     *             .path(&#34;path/to/install_file.bin&#34;)
     *             .build());
     * 
     *         var vm = new Instance(&#34;vm&#34;);
     * 
     *     }
     * }
     * ```
     * ## Full Example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var getUrl = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;fried_chicken&#34;)
     *             .path(&#34;path/to/file&#34;)
     *             .contentMd5(&#34;pRviqwS4c4OTJRTe03FD1w==&#34;)
     *             .contentType(&#34;text/plain&#34;)
     *             .duration(&#34;2d&#34;)
     *             .credentials(Files.readString(Paths.get(&#34;path/to/credentials.json&#34;)))
     *             .extensionHeaders(Map.of(&#34;x-goog-if-generation-match&#34;, 1))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetObjectSignedUrlResult> getObjectSignedUrl(GetObjectSignedUrlArgs args) {
        return getObjectSignedUrl(args, InvokeOptions.Empty);
    }
    /**
     * The Google Cloud storage signed URL data source generates a signed URL for a given storage object. Signed URLs provide a way to give time-limited read or write access to anyone in possession of the URL, regardless of whether they have a Google account.
     * 
     * For more info about signed URL&#39;s is available [here](https://cloud.google.com/storage/docs/access-control/signed-urls).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var artifact = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;install_binaries&#34;)
     *             .path(&#34;path/to/install_file.bin&#34;)
     *             .build());
     * 
     *         var vm = new Instance(&#34;vm&#34;);
     * 
     *     }
     * }
     * ```
     * ## Full Example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var getUrl = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;fried_chicken&#34;)
     *             .path(&#34;path/to/file&#34;)
     *             .contentMd5(&#34;pRviqwS4c4OTJRTe03FD1w==&#34;)
     *             .contentType(&#34;text/plain&#34;)
     *             .duration(&#34;2d&#34;)
     *             .credentials(Files.readString(Paths.get(&#34;path/to/credentials.json&#34;)))
     *             .extensionHeaders(Map.of(&#34;x-goog-if-generation-match&#34;, 1))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetObjectSignedUrlResult> getObjectSignedUrlPlain(GetObjectSignedUrlPlainArgs args) {
        return getObjectSignedUrlPlain(args, InvokeOptions.Empty);
    }
    /**
     * The Google Cloud storage signed URL data source generates a signed URL for a given storage object. Signed URLs provide a way to give time-limited read or write access to anyone in possession of the URL, regardless of whether they have a Google account.
     * 
     * For more info about signed URL&#39;s is available [here](https://cloud.google.com/storage/docs/access-control/signed-urls).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var artifact = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;install_binaries&#34;)
     *             .path(&#34;path/to/install_file.bin&#34;)
     *             .build());
     * 
     *         var vm = new Instance(&#34;vm&#34;);
     * 
     *     }
     * }
     * ```
     * ## Full Example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var getUrl = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;fried_chicken&#34;)
     *             .path(&#34;path/to/file&#34;)
     *             .contentMd5(&#34;pRviqwS4c4OTJRTe03FD1w==&#34;)
     *             .contentType(&#34;text/plain&#34;)
     *             .duration(&#34;2d&#34;)
     *             .credentials(Files.readString(Paths.get(&#34;path/to/credentials.json&#34;)))
     *             .extensionHeaders(Map.of(&#34;x-goog-if-generation-match&#34;, 1))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetObjectSignedUrlResult> getObjectSignedUrl(GetObjectSignedUrlArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:storage/getObjectSignedUrl:getObjectSignedUrl", TypeShape.of(GetObjectSignedUrlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The Google Cloud storage signed URL data source generates a signed URL for a given storage object. Signed URLs provide a way to give time-limited read or write access to anyone in possession of the URL, regardless of whether they have a Google account.
     * 
     * For more info about signed URL&#39;s is available [here](https://cloud.google.com/storage/docs/access-control/signed-urls).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import com.pulumi.gcp.compute.Instance;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var artifact = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;install_binaries&#34;)
     *             .path(&#34;path/to/install_file.bin&#34;)
     *             .build());
     * 
     *         var vm = new Instance(&#34;vm&#34;);
     * 
     *     }
     * }
     * ```
     * ## Full Example
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var getUrl = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
     *             .bucket(&#34;fried_chicken&#34;)
     *             .path(&#34;path/to/file&#34;)
     *             .contentMd5(&#34;pRviqwS4c4OTJRTe03FD1w==&#34;)
     *             .contentType(&#34;text/plain&#34;)
     *             .duration(&#34;2d&#34;)
     *             .credentials(Files.readString(Paths.get(&#34;path/to/credentials.json&#34;)))
     *             .extensionHeaders(Map.of(&#34;x-goog-if-generation-match&#34;, 1))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetObjectSignedUrlResult> getObjectSignedUrlPlain(GetObjectSignedUrlPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:storage/getObjectSignedUrl:getObjectSignedUrl", TypeShape.of(GetObjectSignedUrlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the email address of a project&#39;s unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
     * 
     * For each Google Cloud project, Google maintains a unique service account which
     * is used as the identity for various Google Cloud Storage operations, including
     * operations involving
     * [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
     * and those involving
     * [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
     * This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
     * these customer-managed resources.
     * 
     * The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
     * However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
     * presuppose its existence.
     * These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
     * service account&#39;s identity, or performing some operations in the UI which must use the service account&#39;s identity, such as attempting to list Cloud KMS keys
     * on the bucket creation page.
     * 
     * Use of this data source calls the relevant API endpoint to obtain the service account&#39;s identity and thus ensures it exists prior to any API operations
     * which demand its existence, such as specifying it in Cloud IAM policy.
     * Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
     * provider update errors in cases where the service account does not yet exist.
     * 
     * &gt;  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
     *    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
     *    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
     *    bucket configuration, otherwise the API calls will fail.
     *    You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
     *    See the examples here and in the `gcp.storage.Notification` resource.
     * 
     * For more information see
     * [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
     * 
     * ## Example Usage
     * ### Pub/Sub Notifications
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.pubsub.TopicIAMBinding;
     * import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new TopicIAMBinding(&#34;binding&#34;, TopicIAMBindingArgs.builder()        
     *             .topic(google_pubsub_topic.topic().name())
     *             .role(&#34;roles/pubsub.publisher&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Cloud KMS Keys
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new CryptoKeyIAMBinding(&#34;binding&#34;, CryptoKeyIAMBindingArgs.builder()        
     *             .cryptoKeyId(&#34;your-crypto-key-id&#34;)
     *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
     *             .location(&#34;US&#34;)
     *             .encryption(BucketEncryptionArgs.builder()
     *                 .defaultKmsKeyName(&#34;your-crypto-key-id&#34;)
     *                 .build())
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(binding)
     *                 .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectServiceAccountResult> getProjectServiceAccount() {
        return getProjectServiceAccount(GetProjectServiceAccountArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get the email address of a project&#39;s unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
     * 
     * For each Google Cloud project, Google maintains a unique service account which
     * is used as the identity for various Google Cloud Storage operations, including
     * operations involving
     * [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
     * and those involving
     * [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
     * This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
     * these customer-managed resources.
     * 
     * The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
     * However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
     * presuppose its existence.
     * These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
     * service account&#39;s identity, or performing some operations in the UI which must use the service account&#39;s identity, such as attempting to list Cloud KMS keys
     * on the bucket creation page.
     * 
     * Use of this data source calls the relevant API endpoint to obtain the service account&#39;s identity and thus ensures it exists prior to any API operations
     * which demand its existence, such as specifying it in Cloud IAM policy.
     * Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
     * provider update errors in cases where the service account does not yet exist.
     * 
     * &gt;  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
     *    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
     *    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
     *    bucket configuration, otherwise the API calls will fail.
     *    You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
     *    See the examples here and in the `gcp.storage.Notification` resource.
     * 
     * For more information see
     * [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
     * 
     * ## Example Usage
     * ### Pub/Sub Notifications
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.pubsub.TopicIAMBinding;
     * import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new TopicIAMBinding(&#34;binding&#34;, TopicIAMBindingArgs.builder()        
     *             .topic(google_pubsub_topic.topic().name())
     *             .role(&#34;roles/pubsub.publisher&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Cloud KMS Keys
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new CryptoKeyIAMBinding(&#34;binding&#34;, CryptoKeyIAMBindingArgs.builder()        
     *             .cryptoKeyId(&#34;your-crypto-key-id&#34;)
     *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
     *             .location(&#34;US&#34;)
     *             .encryption(BucketEncryptionArgs.builder()
     *                 .defaultKmsKeyName(&#34;your-crypto-key-id&#34;)
     *                 .build())
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(binding)
     *                 .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectServiceAccountResult> getProjectServiceAccountPlain() {
        return getProjectServiceAccountPlain(GetProjectServiceAccountPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get the email address of a project&#39;s unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
     * 
     * For each Google Cloud project, Google maintains a unique service account which
     * is used as the identity for various Google Cloud Storage operations, including
     * operations involving
     * [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
     * and those involving
     * [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
     * This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
     * these customer-managed resources.
     * 
     * The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
     * However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
     * presuppose its existence.
     * These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
     * service account&#39;s identity, or performing some operations in the UI which must use the service account&#39;s identity, such as attempting to list Cloud KMS keys
     * on the bucket creation page.
     * 
     * Use of this data source calls the relevant API endpoint to obtain the service account&#39;s identity and thus ensures it exists prior to any API operations
     * which demand its existence, such as specifying it in Cloud IAM policy.
     * Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
     * provider update errors in cases where the service account does not yet exist.
     * 
     * &gt;  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
     *    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
     *    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
     *    bucket configuration, otherwise the API calls will fail.
     *    You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
     *    See the examples here and in the `gcp.storage.Notification` resource.
     * 
     * For more information see
     * [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
     * 
     * ## Example Usage
     * ### Pub/Sub Notifications
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.pubsub.TopicIAMBinding;
     * import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new TopicIAMBinding(&#34;binding&#34;, TopicIAMBindingArgs.builder()        
     *             .topic(google_pubsub_topic.topic().name())
     *             .role(&#34;roles/pubsub.publisher&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Cloud KMS Keys
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new CryptoKeyIAMBinding(&#34;binding&#34;, CryptoKeyIAMBindingArgs.builder()        
     *             .cryptoKeyId(&#34;your-crypto-key-id&#34;)
     *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
     *             .location(&#34;US&#34;)
     *             .encryption(BucketEncryptionArgs.builder()
     *                 .defaultKmsKeyName(&#34;your-crypto-key-id&#34;)
     *                 .build())
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(binding)
     *                 .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectServiceAccountResult> getProjectServiceAccount(GetProjectServiceAccountArgs args) {
        return getProjectServiceAccount(args, InvokeOptions.Empty);
    }
    /**
     * Get the email address of a project&#39;s unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
     * 
     * For each Google Cloud project, Google maintains a unique service account which
     * is used as the identity for various Google Cloud Storage operations, including
     * operations involving
     * [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
     * and those involving
     * [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
     * This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
     * these customer-managed resources.
     * 
     * The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
     * However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
     * presuppose its existence.
     * These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
     * service account&#39;s identity, or performing some operations in the UI which must use the service account&#39;s identity, such as attempting to list Cloud KMS keys
     * on the bucket creation page.
     * 
     * Use of this data source calls the relevant API endpoint to obtain the service account&#39;s identity and thus ensures it exists prior to any API operations
     * which demand its existence, such as specifying it in Cloud IAM policy.
     * Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
     * provider update errors in cases where the service account does not yet exist.
     * 
     * &gt;  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
     *    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
     *    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
     *    bucket configuration, otherwise the API calls will fail.
     *    You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
     *    See the examples here and in the `gcp.storage.Notification` resource.
     * 
     * For more information see
     * [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
     * 
     * ## Example Usage
     * ### Pub/Sub Notifications
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.pubsub.TopicIAMBinding;
     * import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new TopicIAMBinding(&#34;binding&#34;, TopicIAMBindingArgs.builder()        
     *             .topic(google_pubsub_topic.topic().name())
     *             .role(&#34;roles/pubsub.publisher&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Cloud KMS Keys
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new CryptoKeyIAMBinding(&#34;binding&#34;, CryptoKeyIAMBindingArgs.builder()        
     *             .cryptoKeyId(&#34;your-crypto-key-id&#34;)
     *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
     *             .location(&#34;US&#34;)
     *             .encryption(BucketEncryptionArgs.builder()
     *                 .defaultKmsKeyName(&#34;your-crypto-key-id&#34;)
     *                 .build())
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(binding)
     *                 .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectServiceAccountResult> getProjectServiceAccountPlain(GetProjectServiceAccountPlainArgs args) {
        return getProjectServiceAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the email address of a project&#39;s unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
     * 
     * For each Google Cloud project, Google maintains a unique service account which
     * is used as the identity for various Google Cloud Storage operations, including
     * operations involving
     * [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
     * and those involving
     * [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
     * This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
     * these customer-managed resources.
     * 
     * The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
     * However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
     * presuppose its existence.
     * These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
     * service account&#39;s identity, or performing some operations in the UI which must use the service account&#39;s identity, such as attempting to list Cloud KMS keys
     * on the bucket creation page.
     * 
     * Use of this data source calls the relevant API endpoint to obtain the service account&#39;s identity and thus ensures it exists prior to any API operations
     * which demand its existence, such as specifying it in Cloud IAM policy.
     * Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
     * provider update errors in cases where the service account does not yet exist.
     * 
     * &gt;  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
     *    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
     *    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
     *    bucket configuration, otherwise the API calls will fail.
     *    You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
     *    See the examples here and in the `gcp.storage.Notification` resource.
     * 
     * For more information see
     * [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
     * 
     * ## Example Usage
     * ### Pub/Sub Notifications
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.pubsub.TopicIAMBinding;
     * import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new TopicIAMBinding(&#34;binding&#34;, TopicIAMBindingArgs.builder()        
     *             .topic(google_pubsub_topic.topic().name())
     *             .role(&#34;roles/pubsub.publisher&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Cloud KMS Keys
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new CryptoKeyIAMBinding(&#34;binding&#34;, CryptoKeyIAMBindingArgs.builder()        
     *             .cryptoKeyId(&#34;your-crypto-key-id&#34;)
     *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
     *             .location(&#34;US&#34;)
     *             .encryption(BucketEncryptionArgs.builder()
     *                 .defaultKmsKeyName(&#34;your-crypto-key-id&#34;)
     *                 .build())
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(binding)
     *                 .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectServiceAccountResult> getProjectServiceAccount(GetProjectServiceAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:storage/getProjectServiceAccount:getProjectServiceAccount", TypeShape.of(GetProjectServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the email address of a project&#39;s unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).
     * 
     * For each Google Cloud project, Google maintains a unique service account which
     * is used as the identity for various Google Cloud Storage operations, including
     * operations involving
     * [customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
     * and those involving
     * [storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
     * This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
     * these customer-managed resources.
     * 
     * The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
     * However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
     * presuppose its existence.
     * These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
     * service account&#39;s identity, or performing some operations in the UI which must use the service account&#39;s identity, such as attempting to list Cloud KMS keys
     * on the bucket creation page.
     * 
     * Use of this data source calls the relevant API endpoint to obtain the service account&#39;s identity and thus ensures it exists prior to any API operations
     * which demand its existence, such as specifying it in Cloud IAM policy.
     * Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
     * provider update errors in cases where the service account does not yet exist.
     * 
     * &gt;  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
     *    you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
     *    Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
     *    bucket configuration, otherwise the API calls will fail.
     *    You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
     *    See the examples here and in the `gcp.storage.Notification` resource.
     * 
     * For more information see
     * [the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).
     * 
     * ## Example Usage
     * ### Pub/Sub Notifications
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.pubsub.TopicIAMBinding;
     * import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new TopicIAMBinding(&#34;binding&#34;, TopicIAMBindingArgs.builder()        
     *             .topic(google_pubsub_topic.topic().name())
     *             .role(&#34;roles/pubsub.publisher&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Cloud KMS Keys
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
     * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
     * import com.pulumi.gcp.storage.Bucket;
     * import com.pulumi.gcp.storage.BucketArgs;
     * import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var gcsAccount = StorageFunctions.getProjectServiceAccount();
     * 
     *         var binding = new CryptoKeyIAMBinding(&#34;binding&#34;, CryptoKeyIAMBindingArgs.builder()        
     *             .cryptoKeyId(&#34;your-crypto-key-id&#34;)
     *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
     *             .members(String.format(&#34;serviceAccount:%s&#34;, gcsAccount.applyValue(getProjectServiceAccountResult -&gt; getProjectServiceAccountResult.emailAddress())))
     *             .build());
     * 
     *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
     *             .location(&#34;US&#34;)
     *             .encryption(BucketEncryptionArgs.builder()
     *                 .defaultKmsKeyName(&#34;your-crypto-key-id&#34;)
     *                 .build())
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(binding)
     *                 .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectServiceAccountResult> getProjectServiceAccountPlain(GetProjectServiceAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:storage/getProjectServiceAccount:getProjectServiceAccount", TypeShape.of(GetProjectServiceAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve Storage Transfer service account for this project
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = StorageFunctions.getTransferProjectServieAccount();
     * 
     *         ctx.export(&#34;defaultAccount&#34;, default_.email());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTransferProjectServieAccountResult> getTransferProjectServieAccount() {
        return getTransferProjectServieAccount(GetTransferProjectServieAccountArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve Storage Transfer service account for this project
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = StorageFunctions.getTransferProjectServieAccount();
     * 
     *         ctx.export(&#34;defaultAccount&#34;, default_.email());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTransferProjectServieAccountResult> getTransferProjectServieAccountPlain() {
        return getTransferProjectServieAccountPlain(GetTransferProjectServieAccountPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve Storage Transfer service account for this project
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = StorageFunctions.getTransferProjectServieAccount();
     * 
     *         ctx.export(&#34;defaultAccount&#34;, default_.email());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTransferProjectServieAccountResult> getTransferProjectServieAccount(GetTransferProjectServieAccountArgs args) {
        return getTransferProjectServieAccount(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve Storage Transfer service account for this project
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = StorageFunctions.getTransferProjectServieAccount();
     * 
     *         ctx.export(&#34;defaultAccount&#34;, default_.email());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTransferProjectServieAccountResult> getTransferProjectServieAccountPlain(GetTransferProjectServieAccountPlainArgs args) {
        return getTransferProjectServieAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve Storage Transfer service account for this project
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = StorageFunctions.getTransferProjectServieAccount();
     * 
     *         ctx.export(&#34;defaultAccount&#34;, default_.email());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTransferProjectServieAccountResult> getTransferProjectServieAccount(GetTransferProjectServieAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("gcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccount", TypeShape.of(GetTransferProjectServieAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve Storage Transfer service account for this project
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.gcp.storage.StorageFunctions;
     * import com.pulumi.gcp.storage.inputs.GetTransferProjectServieAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = StorageFunctions.getTransferProjectServieAccount();
     * 
     *         ctx.export(&#34;defaultAccount&#34;, default_.email());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTransferProjectServieAccountResult> getTransferProjectServieAccountPlain(GetTransferProjectServieAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("gcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccount", TypeShape.of(GetTransferProjectServieAccountResult.class), args, Utilities.withVersion(options));
    }
}
