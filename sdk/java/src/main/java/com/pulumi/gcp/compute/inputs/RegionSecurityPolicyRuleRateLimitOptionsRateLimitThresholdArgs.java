// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs Empty = new RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs();

    /**
     * Number of HTTP(S) requests for calculating the threshold.
     * 
     */
    @Import(name="count")
    private @Nullable Output<Integer> count;

    /**
     * @return Number of HTTP(S) requests for calculating the threshold.
     * 
     */
    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Interval over which the threshold is computed.
     * 
     */
    @Import(name="intervalSec")
    private @Nullable Output<Integer> intervalSec;

    /**
     * @return Interval over which the threshold is computed.
     * 
     */
    public Optional<Output<Integer>> intervalSec() {
        return Optional.ofNullable(this.intervalSec);
    }

    private RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs() {}

    private RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs(RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs $) {
        this.count = $.count;
        this.intervalSec = $.intervalSec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs $;

        public Builder() {
            $ = new RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs();
        }

        public Builder(RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs defaults) {
            $ = new RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Number of HTTP(S) requests for calculating the threshold.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Number of HTTP(S) requests for calculating the threshold.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param intervalSec Interval over which the threshold is computed.
         * 
         * @return builder
         * 
         */
        public Builder intervalSec(@Nullable Output<Integer> intervalSec) {
            $.intervalSec = intervalSec;
            return this;
        }

        /**
         * @param intervalSec Interval over which the threshold is computed.
         * 
         * @return builder
         * 
         */
        public Builder intervalSec(Integer intervalSec) {
            return intervalSec(Output.of(intervalSec));
        }

        public RegionSecurityPolicyRuleRateLimitOptionsRateLimitThresholdArgs build() {
            return $;
        }
    }

}
