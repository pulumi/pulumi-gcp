// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vpcaccess.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.vpcaccess.outputs.GetConnectorSubnet;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectorResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String ipCidrRange;
    private String machineType;
    private Integer maxInstances;
    private Integer maxThroughput;
    private Integer minInstances;
    private Integer minThroughput;
    private String name;
    private String network;
    private @Nullable String project;
    private @Nullable String region;
    private String selfLink;
    private String state;
    private List<GetConnectorSubnet> subnets;

    private GetConnectorResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ipCidrRange() {
        return this.ipCidrRange;
    }
    public String machineType() {
        return this.machineType;
    }
    public Integer maxInstances() {
        return this.maxInstances;
    }
    public Integer maxThroughput() {
        return this.maxThroughput;
    }
    public Integer minInstances() {
        return this.minInstances;
    }
    public Integer minThroughput() {
        return this.minThroughput;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public String selfLink() {
        return this.selfLink;
    }
    public String state() {
        return this.state;
    }
    public List<GetConnectorSubnet> subnets() {
        return this.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String ipCidrRange;
        private String machineType;
        private Integer maxInstances;
        private Integer maxThroughput;
        private Integer minInstances;
        private Integer minThroughput;
        private String name;
        private String network;
        private @Nullable String project;
        private @Nullable String region;
        private String selfLink;
        private String state;
        private List<GetConnectorSubnet> subnets;
        public Builder() {}
        public Builder(GetConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.machineType = defaults.machineType;
    	      this.maxInstances = defaults.maxInstances;
    	      this.maxThroughput = defaults.maxThroughput;
    	      this.minInstances = defaults.minInstances;
    	      this.minThroughput = defaults.minThroughput;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.project = defaults.project;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
    	      this.state = defaults.state;
    	      this.subnets = defaults.subnets;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipCidrRange(String ipCidrRange) {
            this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
            return this;
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }
        @CustomType.Setter
        public Builder maxInstances(Integer maxInstances) {
            this.maxInstances = Objects.requireNonNull(maxInstances);
            return this;
        }
        @CustomType.Setter
        public Builder maxThroughput(Integer maxThroughput) {
            this.maxThroughput = Objects.requireNonNull(maxThroughput);
            return this;
        }
        @CustomType.Setter
        public Builder minInstances(Integer minInstances) {
            this.minInstances = Objects.requireNonNull(minInstances);
            return this;
        }
        @CustomType.Setter
        public Builder minThroughput(Integer minThroughput) {
            this.minThroughput = Objects.requireNonNull(minThroughput);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder subnets(List<GetConnectorSubnet> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(GetConnectorSubnet... subnets) {
            return subnets(List.of(subnets));
        }
        public GetConnectorResult build() {
            final var o = new GetConnectorResult();
            o.id = id;
            o.ipCidrRange = ipCidrRange;
            o.machineType = machineType;
            o.maxInstances = maxInstances;
            o.maxThroughput = maxThroughput;
            o.minInstances = minInstances;
            o.minThroughput = minThroughput;
            o.name = name;
            o.network = network;
            o.project = project;
            o.region = region;
            o.selfLink = selfLink;
            o.state = state;
            o.subnets = subnets;
            return o;
        }
    }
}
