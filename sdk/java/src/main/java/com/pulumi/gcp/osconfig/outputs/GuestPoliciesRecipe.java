// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.osconfig.outputs.GuestPoliciesRecipeArtifact;
import com.pulumi.gcp.osconfig.outputs.GuestPoliciesRecipeInstallStep;
import com.pulumi.gcp.osconfig.outputs.GuestPoliciesRecipeUpdateStep;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GuestPoliciesRecipe {
    /**
     * @return Resources available to be used in the steps in the recipe.
     * Structure is documented below.
     * 
     */
    private @Nullable List<GuestPoliciesRecipeArtifact> artifacts;
    /**
     * @return Default is INSTALLED. The desired state the agent should maintain for this recipe.
     * INSTALLED: The software recipe is installed on the instance but won&#39;t be updated to new versions.
     * INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
     * if a higher version of the recipe is assigned to this instance.
     * REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     * Default value is `INSTALLED`.
     * Possible values are `INSTALLED`, `UPDATED`, and `REMOVED`.
     * 
     */
    private @Nullable String desiredState;
    /**
     * @return Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
     * Any steps taken (including partially completed steps) are not rolled back.
     * Structure is documented below.
     * 
     */
    private @Nullable List<GuestPoliciesRecipeInstallStep> installSteps;
    /**
     * @return Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
     * Names are also used to identify resources which helps to determine whether guest policies have conflicts.
     * This means that requests to create multiple recipes with the same name and version are rejected since they
     * could potentially have conflicting assignments.
     * 
     */
    private String name;
    /**
     * @return Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
     * Any steps taken (including partially completed steps) are not rolled back.
     * Structure is documented below.
     * 
     */
    private @Nullable List<GuestPoliciesRecipeUpdateStep> updateSteps;
    /**
     * @return The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     * 
     */
    private @Nullable String version;

    private GuestPoliciesRecipe() {}
    /**
     * @return Resources available to be used in the steps in the recipe.
     * Structure is documented below.
     * 
     */
    public List<GuestPoliciesRecipeArtifact> artifacts() {
        return this.artifacts == null ? List.of() : this.artifacts;
    }
    /**
     * @return Default is INSTALLED. The desired state the agent should maintain for this recipe.
     * INSTALLED: The software recipe is installed on the instance but won&#39;t be updated to new versions.
     * INSTALLED_KEEP_UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version,
     * if a higher version of the recipe is assigned to this instance.
     * REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     * Default value is `INSTALLED`.
     * Possible values are `INSTALLED`, `UPDATED`, and `REMOVED`.
     * 
     */
    public Optional<String> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }
    /**
     * @return Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation.
     * Any steps taken (including partially completed steps) are not rolled back.
     * Structure is documented below.
     * 
     */
    public List<GuestPoliciesRecipeInstallStep> installSteps() {
        return this.installSteps == null ? List.of() : this.installSteps;
    }
    /**
     * @return Unique identifier for the recipe. Only one recipe with a given name is installed on an instance.
     * Names are also used to identify resources which helps to determine whether guest policies have conflicts.
     * This means that requests to create multiple recipes with the same name and version are rejected since they
     * could potentially have conflicting assignments.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe.
     * Any steps taken (including partially completed steps) are not rolled back.
     * Structure is documented below.
     * 
     */
    public List<GuestPoliciesRecipeUpdateStep> updateSteps() {
        return this.updateSteps == null ? List.of() : this.updateSteps;
    }
    /**
     * @return The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GuestPoliciesRecipe defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GuestPoliciesRecipeArtifact> artifacts;
        private @Nullable String desiredState;
        private @Nullable List<GuestPoliciesRecipeInstallStep> installSteps;
        private String name;
        private @Nullable List<GuestPoliciesRecipeUpdateStep> updateSteps;
        private @Nullable String version;
        public Builder() {}
        public Builder(GuestPoliciesRecipe defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifacts = defaults.artifacts;
    	      this.desiredState = defaults.desiredState;
    	      this.installSteps = defaults.installSteps;
    	      this.name = defaults.name;
    	      this.updateSteps = defaults.updateSteps;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder artifacts(@Nullable List<GuestPoliciesRecipeArtifact> artifacts) {
            this.artifacts = artifacts;
            return this;
        }
        public Builder artifacts(GuestPoliciesRecipeArtifact... artifacts) {
            return artifacts(List.of(artifacts));
        }
        @CustomType.Setter
        public Builder desiredState(@Nullable String desiredState) {
            this.desiredState = desiredState;
            return this;
        }
        @CustomType.Setter
        public Builder installSteps(@Nullable List<GuestPoliciesRecipeInstallStep> installSteps) {
            this.installSteps = installSteps;
            return this;
        }
        public Builder installSteps(GuestPoliciesRecipeInstallStep... installSteps) {
            return installSteps(List.of(installSteps));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder updateSteps(@Nullable List<GuestPoliciesRecipeUpdateStep> updateSteps) {
            this.updateSteps = updateSteps;
            return this;
        }
        public Builder updateSteps(GuestPoliciesRecipeUpdateStep... updateSteps) {
            return updateSteps(List.of(updateSteps));
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GuestPoliciesRecipe build() {
            final var o = new GuestPoliciesRecipe();
            o.artifacts = artifacts;
            o.desiredState = desiredState;
            o.installSteps = installSteps;
            o.name = name;
            o.updateSteps = updateSteps;
            o.version = version;
            return o;
        }
    }
}
