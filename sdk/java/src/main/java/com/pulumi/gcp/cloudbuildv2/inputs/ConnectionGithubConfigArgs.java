// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudbuildv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudbuildv2.inputs.ConnectionGithubConfigAuthorizerCredentialArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionGithubConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionGithubConfigArgs Empty = new ConnectionGithubConfigArgs();

    /**
     * GitHub App installation id.
     * 
     */
    @Import(name="appInstallationId")
    private @Nullable Output<Integer> appInstallationId;

    /**
     * @return GitHub App installation id.
     * 
     */
    public Optional<Output<Integer>> appInstallationId() {
        return Optional.ofNullable(this.appInstallationId);
    }

    /**
     * OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
     * 
     */
    @Import(name="authorizerCredential")
    private @Nullable Output<ConnectionGithubConfigAuthorizerCredentialArgs> authorizerCredential;

    /**
     * @return OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
     * 
     */
    public Optional<Output<ConnectionGithubConfigAuthorizerCredentialArgs>> authorizerCredential() {
        return Optional.ofNullable(this.authorizerCredential);
    }

    private ConnectionGithubConfigArgs() {}

    private ConnectionGithubConfigArgs(ConnectionGithubConfigArgs $) {
        this.appInstallationId = $.appInstallationId;
        this.authorizerCredential = $.authorizerCredential;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionGithubConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionGithubConfigArgs $;

        public Builder() {
            $ = new ConnectionGithubConfigArgs();
        }

        public Builder(ConnectionGithubConfigArgs defaults) {
            $ = new ConnectionGithubConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appInstallationId GitHub App installation id.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(@Nullable Output<Integer> appInstallationId) {
            $.appInstallationId = appInstallationId;
            return this;
        }

        /**
         * @param appInstallationId GitHub App installation id.
         * 
         * @return builder
         * 
         */
        public Builder appInstallationId(Integer appInstallationId) {
            return appInstallationId(Output.of(appInstallationId));
        }

        /**
         * @param authorizerCredential OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(@Nullable Output<ConnectionGithubConfigAuthorizerCredentialArgs> authorizerCredential) {
            $.authorizerCredential = authorizerCredential;
            return this;
        }

        /**
         * @param authorizerCredential OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(ConnectionGithubConfigAuthorizerCredentialArgs authorizerCredential) {
            return authorizerCredential(Output.of(authorizerCredential));
        }

        public ConnectionGithubConfigArgs build() {
            return $;
        }
    }

}
