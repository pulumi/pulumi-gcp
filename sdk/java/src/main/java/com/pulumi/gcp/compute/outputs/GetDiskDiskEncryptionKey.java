// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDiskDiskEncryptionKey {
    /**
     * @return The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
     * in the cloud console. Your project&#39;s Compute Engine System service account
     * (&#39;service-{{PROJECT_NUMBER}}{@literal @}compute-system.iam.gserviceaccount.com&#39;) must have
     * &#39;roles/cloudkms.cryptoKeyEncrypterDecrypter&#39; to use this feature.
     * See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
     * 
     */
    private String kmsKeySelfLink;
    /**
     * @return The service account used for the encryption request for the given KMS key.
     * If absent, the Compute Engine Service Agent service account is used.
     * 
     */
    private String kmsKeyServiceAccount;
    /**
     * @return Specifies a 256-bit customer-supplied encryption key, encoded in
     * RFC 4648 base64 to either encrypt or decrypt this resource.
     * 
     */
    private String rawKey;
    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
     * customer-supplied encryption key to either encrypt or decrypt
     * this resource. You can provide either the rawKey or the rsaEncryptedKey.
     * 
     */
    private String rsaEncryptedKey;
    /**
     * @return The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
     * encryption key that protects this resource.
     * 
     */
    private String sha256;

    private GetDiskDiskEncryptionKey() {}
    /**
     * @return The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
     * in the cloud console. Your project&#39;s Compute Engine System service account
     * (&#39;service-{{PROJECT_NUMBER}}{@literal @}compute-system.iam.gserviceaccount.com&#39;) must have
     * &#39;roles/cloudkms.cryptoKeyEncrypterDecrypter&#39; to use this feature.
     * See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
     * 
     */
    public String kmsKeySelfLink() {
        return this.kmsKeySelfLink;
    }
    /**
     * @return The service account used for the encryption request for the given KMS key.
     * If absent, the Compute Engine Service Agent service account is used.
     * 
     */
    public String kmsKeyServiceAccount() {
        return this.kmsKeyServiceAccount;
    }
    /**
     * @return Specifies a 256-bit customer-supplied encryption key, encoded in
     * RFC 4648 base64 to either encrypt or decrypt this resource.
     * 
     */
    public String rawKey() {
        return this.rawKey;
    }
    /**
     * @return Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
     * customer-supplied encryption key to either encrypt or decrypt
     * this resource. You can provide either the rawKey or the rsaEncryptedKey.
     * 
     */
    public String rsaEncryptedKey() {
        return this.rsaEncryptedKey;
    }
    /**
     * @return The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
     * encryption key that protects this resource.
     * 
     */
    public String sha256() {
        return this.sha256;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskDiskEncryptionKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String kmsKeySelfLink;
        private String kmsKeyServiceAccount;
        private String rawKey;
        private String rsaEncryptedKey;
        private String sha256;
        public Builder() {}
        public Builder(GetDiskDiskEncryptionKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kmsKeySelfLink = defaults.kmsKeySelfLink;
    	      this.kmsKeyServiceAccount = defaults.kmsKeyServiceAccount;
    	      this.rawKey = defaults.rawKey;
    	      this.rsaEncryptedKey = defaults.rsaEncryptedKey;
    	      this.sha256 = defaults.sha256;
        }

        @CustomType.Setter
        public Builder kmsKeySelfLink(String kmsKeySelfLink) {
            if (kmsKeySelfLink == null) {
              throw new MissingRequiredPropertyException("GetDiskDiskEncryptionKey", "kmsKeySelfLink");
            }
            this.kmsKeySelfLink = kmsKeySelfLink;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyServiceAccount(String kmsKeyServiceAccount) {
            if (kmsKeyServiceAccount == null) {
              throw new MissingRequiredPropertyException("GetDiskDiskEncryptionKey", "kmsKeyServiceAccount");
            }
            this.kmsKeyServiceAccount = kmsKeyServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder rawKey(String rawKey) {
            if (rawKey == null) {
              throw new MissingRequiredPropertyException("GetDiskDiskEncryptionKey", "rawKey");
            }
            this.rawKey = rawKey;
            return this;
        }
        @CustomType.Setter
        public Builder rsaEncryptedKey(String rsaEncryptedKey) {
            if (rsaEncryptedKey == null) {
              throw new MissingRequiredPropertyException("GetDiskDiskEncryptionKey", "rsaEncryptedKey");
            }
            this.rsaEncryptedKey = rsaEncryptedKey;
            return this;
        }
        @CustomType.Setter
        public Builder sha256(String sha256) {
            if (sha256 == null) {
              throw new MissingRequiredPropertyException("GetDiskDiskEncryptionKey", "sha256");
            }
            this.sha256 = sha256;
            return this;
        }
        public GetDiskDiskEncryptionKey build() {
            final var _resultValue = new GetDiskDiskEncryptionKey();
            _resultValue.kmsKeySelfLink = kmsKeySelfLink;
            _resultValue.kmsKeyServiceAccount = kmsKeyServiceAccount;
            _resultValue.rawKey = rawKey;
            _resultValue.rsaEncryptedKey = rsaEncryptedKey;
            _resultValue.sha256 = sha256;
            return _resultValue;
        }
    }
}
