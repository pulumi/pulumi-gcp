// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs Empty = new AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs();

    /**
     * The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &#34;:authority&#34;. For matching a request&#39;s method, use the headerName &#34;:method&#34;.
     * 
     */
    @Import(name="headerName", required=true)
    private Output<String> headerName;

    /**
     * @return The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &#34;:authority&#34;. For matching a request&#39;s method, use the headerName &#34;:method&#34;.
     * 
     */
    public Output<String> headerName() {
        return this.headerName;
    }

    /**
     * The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier.
     * 
     */
    @Import(name="regexMatch", required=true)
    private Output<String> regexMatch;

    /**
     * @return The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier.
     * 
     */
    public Output<String> regexMatch() {
        return this.regexMatch;
    }

    private AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs() {}

    private AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs(AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs $) {
        this.headerName = $.headerName;
        this.regexMatch = $.regexMatch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs $;

        public Builder() {
            $ = new AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs();
        }

        public Builder(AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs defaults) {
            $ = new AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headerName The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &#34;:authority&#34;. For matching a request&#39;s method, use the headerName &#34;:method&#34;.
         * 
         * @return builder
         * 
         */
        public Builder headerName(Output<String> headerName) {
            $.headerName = headerName;
            return this;
        }

        /**
         * @param headerName The name of the HTTP header to match. For matching against the HTTP request&#39;s authority, use a headerMatch with the header name &#34;:authority&#34;. For matching a request&#39;s method, use the headerName &#34;:method&#34;.
         * 
         * @return builder
         * 
         */
        public Builder headerName(String headerName) {
            return headerName(Output.of(headerName));
        }

        /**
         * @param regexMatch The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier.
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(Output<String> regexMatch) {
            $.regexMatch = regexMatch;
            return this;
        }

        /**
         * @param regexMatch The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header&#39;s port specifier.
         * 
         * @return builder
         * 
         */
        public Builder regexMatch(String regexMatch) {
            return regexMatch(Output.of(regexMatch));
        }

        public AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs build() {
            $.headerName = Objects.requireNonNull($.headerName, "expected parameter 'headerName' to be non-null");
            $.regexMatch = Objects.requireNonNull($.regexMatch, "expected parameter 'regexMatch' to be non-null");
            return $;
        }
    }

}
