// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileOracleForwardSshConnectivity;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileOraclePrivateConnectivity;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileOracleSsl;
import com.pulumi.gcp.databasemigrationservice.outputs.ConnectionProfileOracleStaticServiceIpConnectivity;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionProfileOracle {
    /**
     * @return Required. Database service for the Oracle connection.
     * 
     */
    private String databaseService;
    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionProfileOracleForwardSshConnectivity forwardSshConnectivity;
    /**
     * @return Required. The IP or hostname of the source Oracle database.
     * 
     */
    private String host;
    /**
     * @return Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
     * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    private String password;
    /**
     * @return (Output)
     * Output only. Indicates If this connection profile password is stored.
     * 
     */
    private @Nullable Boolean passwordSet;
    /**
     * @return Required. The network port of the source Oracle database.
     * 
     */
    private Integer port;
    /**
     * @return Configuration for using a private network to communicate with the source database
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionProfileOraclePrivateConnectivity privateConnectivity;
    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    private @Nullable ConnectionProfileOracleSsl ssl;
    /**
     * @return This object has no nested fields.
     * Static IP address connectivity configured on service project.
     * 
     */
    private @Nullable ConnectionProfileOracleStaticServiceIpConnectivity staticServiceIpConnectivity;
    /**
     * @return Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    private String username;

    private ConnectionProfileOracle() {}
    /**
     * @return Required. Database service for the Oracle connection.
     * 
     */
    public String databaseService() {
        return this.databaseService;
    }
    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionProfileOracleForwardSshConnectivity> forwardSshConnectivity() {
        return Optional.ofNullable(this.forwardSshConnectivity);
    }
    /**
     * @return Required. The IP or hostname of the source Oracle database.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
     * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return (Output)
     * Output only. Indicates If this connection profile password is stored.
     * 
     */
    public Optional<Boolean> passwordSet() {
        return Optional.ofNullable(this.passwordSet);
    }
    /**
     * @return Required. The network port of the source Oracle database.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Configuration for using a private network to communicate with the source database
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionProfileOraclePrivateConnectivity> privateConnectivity() {
        return Optional.ofNullable(this.privateConnectivity);
    }
    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    public Optional<ConnectionProfileOracleSsl> ssl() {
        return Optional.ofNullable(this.ssl);
    }
    /**
     * @return This object has no nested fields.
     * Static IP address connectivity configured on service project.
     * 
     */
    public Optional<ConnectionProfileOracleStaticServiceIpConnectivity> staticServiceIpConnectivity() {
        return Optional.ofNullable(this.staticServiceIpConnectivity);
    }
    /**
     * @return Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionProfileOracle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String databaseService;
        private @Nullable ConnectionProfileOracleForwardSshConnectivity forwardSshConnectivity;
        private String host;
        private String password;
        private @Nullable Boolean passwordSet;
        private Integer port;
        private @Nullable ConnectionProfileOraclePrivateConnectivity privateConnectivity;
        private @Nullable ConnectionProfileOracleSsl ssl;
        private @Nullable ConnectionProfileOracleStaticServiceIpConnectivity staticServiceIpConnectivity;
        private String username;
        public Builder() {}
        public Builder(ConnectionProfileOracle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseService = defaults.databaseService;
    	      this.forwardSshConnectivity = defaults.forwardSshConnectivity;
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.passwordSet = defaults.passwordSet;
    	      this.port = defaults.port;
    	      this.privateConnectivity = defaults.privateConnectivity;
    	      this.ssl = defaults.ssl;
    	      this.staticServiceIpConnectivity = defaults.staticServiceIpConnectivity;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder databaseService(String databaseService) {
            this.databaseService = Objects.requireNonNull(databaseService);
            return this;
        }
        @CustomType.Setter
        public Builder forwardSshConnectivity(@Nullable ConnectionProfileOracleForwardSshConnectivity forwardSshConnectivity) {
            this.forwardSshConnectivity = forwardSshConnectivity;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder passwordSet(@Nullable Boolean passwordSet) {
            this.passwordSet = passwordSet;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder privateConnectivity(@Nullable ConnectionProfileOraclePrivateConnectivity privateConnectivity) {
            this.privateConnectivity = privateConnectivity;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(@Nullable ConnectionProfileOracleSsl ssl) {
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder staticServiceIpConnectivity(@Nullable ConnectionProfileOracleStaticServiceIpConnectivity staticServiceIpConnectivity) {
            this.staticServiceIpConnectivity = staticServiceIpConnectivity;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public ConnectionProfileOracle build() {
            final var _resultValue = new ConnectionProfileOracle();
            _resultValue.databaseService = databaseService;
            _resultValue.forwardSshConnectivity = forwardSshConnectivity;
            _resultValue.host = host;
            _resultValue.password = password;
            _resultValue.passwordSet = passwordSet;
            _resultValue.port = port;
            _resultValue.privateConnectivity = privateConnectivity;
            _resultValue.ssl = ssl;
            _resultValue.staticServiceIpConnectivity = staticServiceIpConnectivity;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
