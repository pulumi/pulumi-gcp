// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionsInstanceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionsInstanceConfigArgs Empty = new ExtensionsInstanceConfigArgs();

    /**
     * List of extension events selected by consumer that extension is allowed to
     * emit, identified by their types.
     * 
     */
    @Import(name="allowedEventTypes")
    private @Nullable Output<List<String>> allowedEventTypes;

    /**
     * @return List of extension events selected by consumer that extension is allowed to
     * emit, identified by their types.
     * 
     */
    public Optional<Output<List<String>>> allowedEventTypes() {
        return Optional.ofNullable(this.allowedEventTypes);
    }

    /**
     * (Output)
     * The time at which the Extension Instance Config was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return (Output)
     * The time at which the Extension Instance Config was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Fully qualified Eventarc resource name that consumers should use for event triggers.
     * 
     */
    @Import(name="eventarcChannel")
    private @Nullable Output<String> eventarcChannel;

    /**
     * @return Fully qualified Eventarc resource name that consumers should use for event triggers.
     * 
     */
    public Optional<Output<String>> eventarcChannel() {
        return Optional.ofNullable(this.eventarcChannel);
    }

    /**
     * The ref of the Extension from the Registry (e.g. publisher-id/awesome-extension)
     * 
     */
    @Import(name="extensionRef", required=true)
    private Output<String> extensionRef;

    /**
     * @return The ref of the Extension from the Registry (e.g. publisher-id/awesome-extension)
     * 
     */
    public Output<String> extensionRef() {
        return this.extensionRef;
    }

    /**
     * The version of the Extension from the Registry (e.g. 1.0.3). If left blank, latest is assumed.
     * 
     */
    @Import(name="extensionVersion")
    private @Nullable Output<String> extensionVersion;

    /**
     * @return The version of the Extension from the Registry (e.g. 1.0.3). If left blank, latest is assumed.
     * 
     */
    public Optional<Output<String>> extensionVersion() {
        return Optional.ofNullable(this.extensionVersion);
    }

    /**
     * (Output)
     * The unique identifier for this configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Output)
     * The unique identifier for this configuration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Environment variables that may be configured for the Extension
     * 
     */
    @Import(name="params", required=true)
    private Output<Map<String,String>> params;

    /**
     * @return Environment variables that may be configured for the Extension
     * 
     */
    public Output<Map<String,String>> params() {
        return this.params;
    }

    /**
     * (Output)
     * Postinstall instructions to be shown for this Extension, with
     * template strings representing function and parameter values substituted
     * with actual values. These strings include: ${param:FOO},
     * ${function:myFunc.url},
     * ${function:myFunc.name}, and ${function:myFunc.location}
     * 
     * ***
     * 
     */
    @Import(name="populatedPostinstallContent")
    private @Nullable Output<String> populatedPostinstallContent;

    /**
     * @return (Output)
     * Postinstall instructions to be shown for this Extension, with
     * template strings representing function and parameter values substituted
     * with actual values. These strings include: ${param:FOO},
     * ${function:myFunc.url},
     * ${function:myFunc.name}, and ${function:myFunc.location}
     * 
     * ***
     * 
     */
    public Optional<Output<String>> populatedPostinstallContent() {
        return Optional.ofNullable(this.populatedPostinstallContent);
    }

    /**
     * Params whose values are only available at deployment time.
     * Unlike other params, these will not be set as environment variables on
     * functions.
     * 
     */
    @Import(name="systemParams")
    private @Nullable Output<Map<String,String>> systemParams;

    /**
     * @return Params whose values are only available at deployment time.
     * Unlike other params, these will not be set as environment variables on
     * functions.
     * 
     */
    public Optional<Output<Map<String,String>>> systemParams() {
        return Optional.ofNullable(this.systemParams);
    }

    private ExtensionsInstanceConfigArgs() {}

    private ExtensionsInstanceConfigArgs(ExtensionsInstanceConfigArgs $) {
        this.allowedEventTypes = $.allowedEventTypes;
        this.createTime = $.createTime;
        this.eventarcChannel = $.eventarcChannel;
        this.extensionRef = $.extensionRef;
        this.extensionVersion = $.extensionVersion;
        this.name = $.name;
        this.params = $.params;
        this.populatedPostinstallContent = $.populatedPostinstallContent;
        this.systemParams = $.systemParams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionsInstanceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionsInstanceConfigArgs $;

        public Builder() {
            $ = new ExtensionsInstanceConfigArgs();
        }

        public Builder(ExtensionsInstanceConfigArgs defaults) {
            $ = new ExtensionsInstanceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedEventTypes List of extension events selected by consumer that extension is allowed to
         * emit, identified by their types.
         * 
         * @return builder
         * 
         */
        public Builder allowedEventTypes(@Nullable Output<List<String>> allowedEventTypes) {
            $.allowedEventTypes = allowedEventTypes;
            return this;
        }

        /**
         * @param allowedEventTypes List of extension events selected by consumer that extension is allowed to
         * emit, identified by their types.
         * 
         * @return builder
         * 
         */
        public Builder allowedEventTypes(List<String> allowedEventTypes) {
            return allowedEventTypes(Output.of(allowedEventTypes));
        }

        /**
         * @param allowedEventTypes List of extension events selected by consumer that extension is allowed to
         * emit, identified by their types.
         * 
         * @return builder
         * 
         */
        public Builder allowedEventTypes(String... allowedEventTypes) {
            return allowedEventTypes(List.of(allowedEventTypes));
        }

        /**
         * @param createTime (Output)
         * The time at which the Extension Instance Config was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime (Output)
         * The time at which the Extension Instance Config was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param eventarcChannel Fully qualified Eventarc resource name that consumers should use for event triggers.
         * 
         * @return builder
         * 
         */
        public Builder eventarcChannel(@Nullable Output<String> eventarcChannel) {
            $.eventarcChannel = eventarcChannel;
            return this;
        }

        /**
         * @param eventarcChannel Fully qualified Eventarc resource name that consumers should use for event triggers.
         * 
         * @return builder
         * 
         */
        public Builder eventarcChannel(String eventarcChannel) {
            return eventarcChannel(Output.of(eventarcChannel));
        }

        /**
         * @param extensionRef The ref of the Extension from the Registry (e.g. publisher-id/awesome-extension)
         * 
         * @return builder
         * 
         */
        public Builder extensionRef(Output<String> extensionRef) {
            $.extensionRef = extensionRef;
            return this;
        }

        /**
         * @param extensionRef The ref of the Extension from the Registry (e.g. publisher-id/awesome-extension)
         * 
         * @return builder
         * 
         */
        public Builder extensionRef(String extensionRef) {
            return extensionRef(Output.of(extensionRef));
        }

        /**
         * @param extensionVersion The version of the Extension from the Registry (e.g. 1.0.3). If left blank, latest is assumed.
         * 
         * @return builder
         * 
         */
        public Builder extensionVersion(@Nullable Output<String> extensionVersion) {
            $.extensionVersion = extensionVersion;
            return this;
        }

        /**
         * @param extensionVersion The version of the Extension from the Registry (e.g. 1.0.3). If left blank, latest is assumed.
         * 
         * @return builder
         * 
         */
        public Builder extensionVersion(String extensionVersion) {
            return extensionVersion(Output.of(extensionVersion));
        }

        /**
         * @param name (Output)
         * The unique identifier for this configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Output)
         * The unique identifier for this configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param params Environment variables that may be configured for the Extension
         * 
         * @return builder
         * 
         */
        public Builder params(Output<Map<String,String>> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Environment variables that may be configured for the Extension
         * 
         * @return builder
         * 
         */
        public Builder params(Map<String,String> params) {
            return params(Output.of(params));
        }

        /**
         * @param populatedPostinstallContent (Output)
         * Postinstall instructions to be shown for this Extension, with
         * template strings representing function and parameter values substituted
         * with actual values. These strings include: ${param:FOO},
         * ${function:myFunc.url},
         * ${function:myFunc.name}, and ${function:myFunc.location}
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder populatedPostinstallContent(@Nullable Output<String> populatedPostinstallContent) {
            $.populatedPostinstallContent = populatedPostinstallContent;
            return this;
        }

        /**
         * @param populatedPostinstallContent (Output)
         * Postinstall instructions to be shown for this Extension, with
         * template strings representing function and parameter values substituted
         * with actual values. These strings include: ${param:FOO},
         * ${function:myFunc.url},
         * ${function:myFunc.name}, and ${function:myFunc.location}
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder populatedPostinstallContent(String populatedPostinstallContent) {
            return populatedPostinstallContent(Output.of(populatedPostinstallContent));
        }

        /**
         * @param systemParams Params whose values are only available at deployment time.
         * Unlike other params, these will not be set as environment variables on
         * functions.
         * 
         * @return builder
         * 
         */
        public Builder systemParams(@Nullable Output<Map<String,String>> systemParams) {
            $.systemParams = systemParams;
            return this;
        }

        /**
         * @param systemParams Params whose values are only available at deployment time.
         * Unlike other params, these will not be set as environment variables on
         * functions.
         * 
         * @return builder
         * 
         */
        public Builder systemParams(Map<String,String> systemParams) {
            return systemParams(Output.of(systemParams));
        }

        public ExtensionsInstanceConfigArgs build() {
            $.extensionRef = Objects.requireNonNull($.extensionRef, "expected parameter 'extensionRef' to be non-null");
            $.params = Objects.requireNonNull($.params, "expected parameter 'params' to be non-null");
            return $;
        }
    }

}
