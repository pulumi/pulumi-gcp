// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.BackendServiceConsistentHashHttpCookie;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendServiceConsistentHash {
    /**
     * @return Hash is based on HTTP Cookie. This field describes a HTTP cookie
     * that will be used as the hash key for the consistent hash load
     * balancer. If the cookie is not present, it will be generated.
     * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
     * Structure is documented below.
     * 
     */
    private @Nullable BackendServiceConsistentHashHttpCookie httpCookie;
    /**
     * @return The hash based on the value of the specified header field.
     * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    private @Nullable String httpHeaderName;
    /**
     * @return The minimum number of virtual nodes to use for the hash ring.
     * Larger ring sizes result in more granular load
     * distributions. If the number of hosts in the load balancing pool
     * is larger than the ring size, each host will be assigned a single
     * virtual node.
     * Defaults to 1024.
     * 
     */
    private @Nullable Integer minimumRingSize;

    private BackendServiceConsistentHash() {}
    /**
     * @return Hash is based on HTTP Cookie. This field describes a HTTP cookie
     * that will be used as the hash key for the consistent hash load
     * balancer. If the cookie is not present, it will be generated.
     * This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
     * Structure is documented below.
     * 
     */
    public Optional<BackendServiceConsistentHashHttpCookie> httpCookie() {
        return Optional.ofNullable(this.httpCookie);
    }
    /**
     * @return The hash based on the value of the specified header field.
     * This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     * 
     */
    public Optional<String> httpHeaderName() {
        return Optional.ofNullable(this.httpHeaderName);
    }
    /**
     * @return The minimum number of virtual nodes to use for the hash ring.
     * Larger ring sizes result in more granular load
     * distributions. If the number of hosts in the load balancing pool
     * is larger than the ring size, each host will be assigned a single
     * virtual node.
     * Defaults to 1024.
     * 
     */
    public Optional<Integer> minimumRingSize() {
        return Optional.ofNullable(this.minimumRingSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendServiceConsistentHash defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BackendServiceConsistentHashHttpCookie httpCookie;
        private @Nullable String httpHeaderName;
        private @Nullable Integer minimumRingSize;
        public Builder() {}
        public Builder(BackendServiceConsistentHash defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpCookie = defaults.httpCookie;
    	      this.httpHeaderName = defaults.httpHeaderName;
    	      this.minimumRingSize = defaults.minimumRingSize;
        }

        @CustomType.Setter
        public Builder httpCookie(@Nullable BackendServiceConsistentHashHttpCookie httpCookie) {
            this.httpCookie = httpCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeaderName(@Nullable String httpHeaderName) {
            this.httpHeaderName = httpHeaderName;
            return this;
        }
        @CustomType.Setter
        public Builder minimumRingSize(@Nullable Integer minimumRingSize) {
            this.minimumRingSize = minimumRingSize;
            return this;
        }
        public BackendServiceConsistentHash build() {
            final var o = new BackendServiceConsistentHash();
            o.httpCookie = httpCookie;
            o.httpHeaderName = httpHeaderName;
            o.minimumRingSize = minimumRingSize;
            return o;
        }
    }
}
