// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificatemanager.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificatemanager.outputs.GetCertificatesCertificateManaged;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificatesCertificate {
    /**
     * @return A human-readable description of the resource.
     * 
     */
    private String description;
    private Map<String,String> effectiveLabels;
    /**
     * @return Set of label tags associated with the Certificate resource.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    private String location;
    /**
     * @return Configuration and state of a Managed Certificate.
     * Certificate Manager provisions and renews Managed Certificates
     * automatically, for as long as it&#39;s authorized to do so.
     * 
     */
    private List<GetCertificatesCertificateManaged> manageds;
    /**
     * @return A user-defined name of the certificate. Certificate names must be unique
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    private String name;
    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    private String project;
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    private Map<String,String> pulumiLabels;
    /**
     * @return The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6)
     * 
     */
    private List<String> sanDnsnames;
    /**
     * @return The scope of the certificate.
     * 
     * DEFAULT: Certificates with default scope are served from core Google data centers.
     * If unsure, choose this option.
     * 
     * EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
     * See https://cloud.google.com/vpc/docs/edge-locations.
     * 
     * ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
     * See https://cloud.google.com/compute/docs/regions-zones.
     * 
     * CLIENT_AUTH: Certificates with CLIENT_AUTH scope are used by a load balancer (TLS client) to be presented to the backend (TLS server) when backend mTLS is configured.
     * See https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#client-certificate.
     * 
     */
    private String scope;

    private GetCertificatesCertificate() {}
    /**
     * @return A human-readable description of the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * @return Set of label tags associated with the Certificate resource.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field &#39;effective_labels&#39; for all of the labels present on the resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The Certificate Manager location. If not specified, &#34;global&#34; is used.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Configuration and state of a Managed Certificate.
     * Certificate Manager provisions and renews Managed Certificates
     * automatically, for as long as it&#39;s authorized to do so.
     * 
     */
    public List<GetCertificatesCertificateManaged> manageds() {
        return this.manageds;
    }
    /**
     * @return A user-defined name of the certificate. Certificate names must be unique
     * The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
     * and all following characters must be a dash, underscore, letter or digit.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The combination of labels configured directly on the resource
     *  and default labels configured on the provider.
     * 
     */
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * @return The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6)
     * 
     */
    public List<String> sanDnsnames() {
        return this.sanDnsnames;
    }
    /**
     * @return The scope of the certificate.
     * 
     * DEFAULT: Certificates with default scope are served from core Google data centers.
     * If unsure, choose this option.
     * 
     * EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
     * See https://cloud.google.com/vpc/docs/edge-locations.
     * 
     * ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
     * See https://cloud.google.com/compute/docs/regions-zones.
     * 
     * CLIENT_AUTH: Certificates with CLIENT_AUTH scope are used by a load balancer (TLS client) to be presented to the backend (TLS server) when backend mTLS is configured.
     * See https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls#client-certificate.
     * 
     */
    public String scope() {
        return this.scope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificatesCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Map<String,String> effectiveLabels;
        private Map<String,String> labels;
        private String location;
        private List<GetCertificatesCertificateManaged> manageds;
        private String name;
        private String project;
        private Map<String,String> pulumiLabels;
        private List<String> sanDnsnames;
        private String scope;
        public Builder() {}
        public Builder(GetCertificatesCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.manageds = defaults.manageds;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.sanDnsnames = defaults.sanDnsnames;
    	      this.scope = defaults.scope;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder manageds(List<GetCertificatesCertificateManaged> manageds) {
            if (manageds == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "manageds");
            }
            this.manageds = manageds;
            return this;
        }
        public Builder manageds(GetCertificatesCertificateManaged... manageds) {
            return manageds(List.of(manageds));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder sanDnsnames(List<String> sanDnsnames) {
            if (sanDnsnames == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "sanDnsnames");
            }
            this.sanDnsnames = sanDnsnames;
            return this;
        }
        public Builder sanDnsnames(String... sanDnsnames) {
            return sanDnsnames(List.of(sanDnsnames));
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetCertificatesCertificate", "scope");
            }
            this.scope = scope;
            return this;
        }
        public GetCertificatesCertificate build() {
            final var _resultValue = new GetCertificatesCertificate();
            _resultValue.description = description;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.manageds = manageds;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.sanDnsnames = sanDnsnames;
            _resultValue.scope = scope;
            return _resultValue;
        }
    }
}
