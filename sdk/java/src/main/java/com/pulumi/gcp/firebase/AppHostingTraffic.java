// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.AppHostingTrafficArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingTrafficState;
import com.pulumi.gcp.firebase.outputs.AppHostingTrafficCurrent;
import com.pulumi.gcp.firebase.outputs.AppHostingTrafficRolloutPolicy;
import com.pulumi.gcp.firebase.outputs.AppHostingTrafficTarget;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Controls traffic configuration for a backend.
 * 
 * ## Example Usage
 * 
 * ### Firebase App Hosting Traffic Target
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.firebase.AppHostingBuild;
 * import com.pulumi.gcp.firebase.AppHostingBuildArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingBuildSourceArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingBuildSourceContainerArgs;
 * import com.pulumi.gcp.firebase.AppHostingTraffic;
 * import com.pulumi.gcp.firebase.AppHostingTrafficArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingTrafficTargetArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         //## Include these blocks only once per project if you are starting from scratch ###
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("firebase-app-hosting-compute")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var fah = new Service("fah", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebaseapphosting.googleapis.com")
 *             .disableOnDestroy(false)
 *             .build());
 * 
 *         var exampleAppHostingBackend = new AppHostingBackend("exampleAppHostingBackend", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("asia-east1")
 *             .backendId("traffic-tg")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fah)
 *                 .build());
 * 
 *         var exampleAppHostingBuild = new AppHostingBuild("exampleAppHostingBuild", AppHostingBuildArgs.builder()
 *             .project(exampleAppHostingBackend.project())
 *             .location(exampleAppHostingBackend.location())
 *             .backend(exampleAppHostingBackend.backendId())
 *             .buildId("target-build")
 *             .source(AppHostingBuildSourceArgs.builder()
 *                 .container(AppHostingBuildSourceContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/hello")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var example = new AppHostingTraffic("example", AppHostingTrafficArgs.builder()
 *             .project(exampleAppHostingBackend.project())
 *             .location(exampleAppHostingBackend.location())
 *             .backend(exampleAppHostingBackend.backendId())
 *             .target(AppHostingTrafficTargetArgs.builder()
 *                 .splits(AppHostingTrafficTargetSplitArgs.builder()
 *                     .build(exampleAppHostingBuild.name())
 *                     .percent(100)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var appHostingSaRunner = new IAMMember("appHostingSaRunner", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/firebaseapphosting.computeRunner")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebase App Hosting Traffic Rollout Policy
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.firebase.AppHostingTraffic;
 * import com.pulumi.gcp.firebase.AppHostingTrafficArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingTrafficRolloutPolicyArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         //## Include these blocks only once per project if you are starting from scratch ###
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("firebase-app-hosting-compute")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var fah = new Service("fah", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebaseapphosting.googleapis.com")
 *             .disableOnDestroy(false)
 *             .build());
 * 
 *         var exampleAppHostingBackend = new AppHostingBackend("exampleAppHostingBackend", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("asia-east1")
 *             .backendId("traffic-rp")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fah)
 *                 .build());
 * 
 *         var example = new AppHostingTraffic("example", AppHostingTrafficArgs.builder()
 *             .project(exampleAppHostingBackend.project())
 *             .location(exampleAppHostingBackend.location())
 *             .backend(exampleAppHostingBackend.backendId())
 *             .rolloutPolicy(AppHostingTrafficRolloutPolicyArgs.builder()
 *                 .codebaseBranch("main")
 *                 .build())
 *             .build());
 * 
 *         var appHostingSaRunner = new IAMMember("appHostingSaRunner", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/firebaseapphosting.computeRunner")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebase App Hosting Traffic Rollout Policy Disabled
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.firebase.AppHostingBackend;
 * import com.pulumi.gcp.firebase.AppHostingBackendArgs;
 * import com.pulumi.gcp.firebase.AppHostingTraffic;
 * import com.pulumi.gcp.firebase.AppHostingTrafficArgs;
 * import com.pulumi.gcp.firebase.inputs.AppHostingTrafficRolloutPolicyArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         //## Include these blocks only once per project if you are starting from scratch ###
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .project("my-project-name")
 *             .accountId("firebase-app-hosting-compute")
 *             .displayName("Firebase App Hosting compute service account")
 *             .createIgnoreAlreadyExists(true)
 *             .build());
 * 
 *         var fah = new Service("fah", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .service("firebaseapphosting.googleapis.com")
 *             .disableOnDestroy(false)
 *             .build());
 * 
 *         var exampleAppHostingBackend = new AppHostingBackend("exampleAppHostingBackend", AppHostingBackendArgs.builder()
 *             .project("my-project-name")
 *             .location("asia-east1")
 *             .backendId("traffic-rpd")
 *             .appId("1:0000000000:web:674cde32020e16fbce9dbd")
 *             .servingLocality("GLOBAL_ACCESS")
 *             .serviceAccount(serviceAccount.email())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(fah)
 *                 .build());
 * 
 *         var example = new AppHostingTraffic("example", AppHostingTrafficArgs.builder()
 *             .project(exampleAppHostingBackend.project())
 *             .location(exampleAppHostingBackend.location())
 *             .backend(exampleAppHostingBackend.backendId())
 *             .rolloutPolicy(AppHostingTrafficRolloutPolicyArgs.builder()
 *                 .disabled(true)
 *                 .codebaseBranch("main")
 *                 .build())
 *             .build());
 * 
 *         var appHostingSaRunner = new IAMMember("appHostingSaRunner", IAMMemberArgs.builder()
 *             .project("my-project-name")
 *             .role("roles/firebaseapphosting.computeRunner")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Traffic can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic`
 * 
 * * `{{project}}/{{location}}/{{backend}}`
 * 
 * * `{{location}}/{{backend}}`
 * 
 * When using the `pulumi import` command, Traffic can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default projects/{{project}}/locations/{{location}}/backends/{{backend}}/traffic
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default {{project}}/{{location}}/{{backend}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appHostingTraffic:AppHostingTraffic default {{location}}/{{backend}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/appHostingTraffic:AppHostingTraffic")
public class AppHostingTraffic extends com.pulumi.resources.CustomResource {
    /**
     * Id of the backend that this Traffic config applies to
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output<String> backend;

    /**
     * @return Id of the backend that this Traffic config applies to
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * Time at which the backend was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time at which the backend was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Current state of traffic allocation for the backend.
     * When setting `target`, this field may differ for some time until the desired state is reached.
     * Structure is documented below.
     * 
     */
    @Export(name="currents", refs={List.class,AppHostingTrafficCurrent.class}, tree="[0,1]")
    private Output<List<AppHostingTrafficCurrent>> currents;

    /**
     * @return Current state of traffic allocation for the backend.
     * When setting `target`, this field may differ for some time until the desired state is reached.
     * Structure is documented below.
     * 
     */
    public Output<List<AppHostingTrafficCurrent>> currents() {
        return this.currents;
    }
    /**
     * Time at which the backend was deleted.
     * 
     */
    @Export(name="deleteTime", refs={String.class}, tree="[0]")
    private Output<String> deleteTime;

    /**
     * @return Time at which the backend was deleted.
     * 
     */
    public Output<String> deleteTime() {
        return this.deleteTime;
    }
    /**
     * Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Server-computed checksum based on other values; may be sent
     * on update or delete to ensure operation is done on expected resource.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The location the Backend that this Traffic config applies to
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location the Backend that this Traffic config applies to
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Identifier. The resource name of the backend traffic config
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. The resource name of the backend traffic config
     * Format:
     * `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The policy for how builds and rollouts are triggered and rolled out.
     * Structure is documented below.
     * 
     */
    @Export(name="rolloutPolicy", refs={AppHostingTrafficRolloutPolicy.class}, tree="[0]")
    private Output</* @Nullable */ AppHostingTrafficRolloutPolicy> rolloutPolicy;

    /**
     * @return The policy for how builds and rollouts are triggered and rolled out.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AppHostingTrafficRolloutPolicy>> rolloutPolicy() {
        return Codegen.optional(this.rolloutPolicy);
    }
    /**
     * Set to manually control the desired traffic for the backend. This will
     * cause current to eventually match this value. The percentages must add
     * up to 100.
     * Structure is documented below.
     * 
     */
    @Export(name="target", refs={AppHostingTrafficTarget.class}, tree="[0]")
    private Output</* @Nullable */ AppHostingTrafficTarget> target;

    /**
     * @return Set to manually control the desired traffic for the backend. This will
     * cause current to eventually match this value. The percentages must add
     * up to 100.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AppHostingTrafficTarget>> target() {
        return Codegen.optional(this.target);
    }
    /**
     * System-assigned, unique identifier.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return System-assigned, unique identifier.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Time at which the backend was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time at which the backend was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppHostingTraffic(java.lang.String name) {
        this(name, AppHostingTrafficArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppHostingTraffic(java.lang.String name, AppHostingTrafficArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppHostingTraffic(java.lang.String name, AppHostingTrafficArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appHostingTraffic:AppHostingTraffic", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AppHostingTraffic(java.lang.String name, Output<java.lang.String> id, @Nullable AppHostingTrafficState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appHostingTraffic:AppHostingTraffic", name, state, makeResourceOptions(options, id), false);
    }

    private static AppHostingTrafficArgs makeArgs(AppHostingTrafficArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AppHostingTrafficArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppHostingTraffic get(java.lang.String name, Output<java.lang.String> id, @Nullable AppHostingTrafficState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AppHostingTraffic(name, id, state, options);
    }
}
