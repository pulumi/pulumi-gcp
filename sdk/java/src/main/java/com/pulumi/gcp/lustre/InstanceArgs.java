// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.lustre;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Required. The storage capacity of the instance in gibibytes (GiB). Allowed values
     * are from 18000 to 954000, in increments of 9000.
     * 
     */
    @Import(name="capacityGib", required=true)
    private Output<String> capacityGib;

    /**
     * @return Required. The storage capacity of the instance in gibibytes (GiB). Allowed values
     * are from 18000 to 954000, in increments of 9000.
     * 
     */
    public Output<String> capacityGib() {
        return this.capacityGib;
    }

    /**
     * Optional. A user-readable description of the instance.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. A user-readable description of the instance.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Required. Immutable. The filesystem name for this instance. This name is used by client-side
     * tools, including when mounting the instance. Must be 8 characters or less
     * and may only contain letters and numbers.
     * 
     */
    @Import(name="filesystem", required=true)
    private Output<String> filesystem;

    /**
     * @return Required. Immutable. The filesystem name for this instance. This name is used by client-side
     * tools, including when mounting the instance. Must be 8 characters or less
     * and may only contain letters and numbers.
     * 
     */
    public Output<String> filesystem() {
        return this.filesystem;
    }

    /**
     * Optional. Indicates whether you want to enable support for GKE clients. By default,
     * GKE clients are not supported.
     * 
     */
    @Import(name="gkeSupportEnabled")
    private @Nullable Output<Boolean> gkeSupportEnabled;

    /**
     * @return Optional. Indicates whether you want to enable support for GKE clients. By default,
     * GKE clients are not supported.
     * 
     */
    public Optional<Output<Boolean>> gkeSupportEnabled() {
        return Optional.ofNullable(this.gkeSupportEnabled);
    }

    /**
     * Required. The name of the Managed Lustre instance.
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * 
     * ***
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return Required. The name of the Managed Lustre instance.
     * * Must contain only lowercase letters, numbers, and hyphens.
     * * Must start with a letter.
     * * Must be between 1-63 characters.
     * * Must end with a number or a letter.
     * 
     * ***
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Required. Immutable. The full name of the VPC network to which the instance is connected.
     * Must be in the format
     * `projects/{project_id}/global/networks/{network_name}`.
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return Required. Immutable. The full name of the VPC network to which the instance is connected.
     * Must be in the format
     * `projects/{project_id}/global/networks/{network_name}`.
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.capacityGib = $.capacityGib;
        this.description = $.description;
        this.filesystem = $.filesystem;
        this.gkeSupportEnabled = $.gkeSupportEnabled;
        this.instanceId = $.instanceId;
        this.labels = $.labels;
        this.location = $.location;
        this.network = $.network;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityGib Required. The storage capacity of the instance in gibibytes (GiB). Allowed values
         * are from 18000 to 954000, in increments of 9000.
         * 
         * @return builder
         * 
         */
        public Builder capacityGib(Output<String> capacityGib) {
            $.capacityGib = capacityGib;
            return this;
        }

        /**
         * @param capacityGib Required. The storage capacity of the instance in gibibytes (GiB). Allowed values
         * are from 18000 to 954000, in increments of 9000.
         * 
         * @return builder
         * 
         */
        public Builder capacityGib(String capacityGib) {
            return capacityGib(Output.of(capacityGib));
        }

        /**
         * @param description Optional. A user-readable description of the instance.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. A user-readable description of the instance.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filesystem Required. Immutable. The filesystem name for this instance. This name is used by client-side
         * tools, including when mounting the instance. Must be 8 characters or less
         * and may only contain letters and numbers.
         * 
         * @return builder
         * 
         */
        public Builder filesystem(Output<String> filesystem) {
            $.filesystem = filesystem;
            return this;
        }

        /**
         * @param filesystem Required. Immutable. The filesystem name for this instance. This name is used by client-side
         * tools, including when mounting the instance. Must be 8 characters or less
         * and may only contain letters and numbers.
         * 
         * @return builder
         * 
         */
        public Builder filesystem(String filesystem) {
            return filesystem(Output.of(filesystem));
        }

        /**
         * @param gkeSupportEnabled Optional. Indicates whether you want to enable support for GKE clients. By default,
         * GKE clients are not supported.
         * 
         * @return builder
         * 
         */
        public Builder gkeSupportEnabled(@Nullable Output<Boolean> gkeSupportEnabled) {
            $.gkeSupportEnabled = gkeSupportEnabled;
            return this;
        }

        /**
         * @param gkeSupportEnabled Optional. Indicates whether you want to enable support for GKE clients. By default,
         * GKE clients are not supported.
         * 
         * @return builder
         * 
         */
        public Builder gkeSupportEnabled(Boolean gkeSupportEnabled) {
            return gkeSupportEnabled(Output.of(gkeSupportEnabled));
        }

        /**
         * @param instanceId Required. The name of the Managed Lustre instance.
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Required. The name of the Managed Lustre instance.
         * * Must contain only lowercase letters, numbers, and hyphens.
         * * Must start with a letter.
         * * Must be between 1-63 characters.
         * * Must end with a number or a letter.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param network Required. Immutable. The full name of the VPC network to which the instance is connected.
         * Must be in the format
         * `projects/{project_id}/global/networks/{network_name}`.
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Required. Immutable. The full name of the VPC network to which the instance is connected.
         * Must be in the format
         * `projects/{project_id}/global/networks/{network_name}`.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public InstanceArgs build() {
            if ($.capacityGib == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "capacityGib");
            }
            if ($.filesystem == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "filesystem");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "instanceId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "location");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "network");
            }
            return $;
        }
    }

}
