// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetAttachedInstallManifestArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAttachedInstallManifestArgs Empty = new GetAttachedInstallManifestArgs();

    /**
     * The name that will be used when creating the attached cluster resource.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The name that will be used when creating the attached cluster resource.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * The location to list versions for.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location to list versions for.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The platform version for the cluster. A list of valid values can be retrieved using the `gcp.container.getAttachedVersions` data source.
     * 
     */
    @Import(name="platformVersion", required=true)
    private Output<String> platformVersion;

    /**
     * @return The platform version for the cluster. A list of valid values can be retrieved using the `gcp.container.getAttachedVersions` data source.
     * 
     */
    public Output<String> platformVersion() {
        return this.platformVersion;
    }

    /**
     * ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
     * Defaults to the project that the provider is authenticated with.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
     * Defaults to the project that the provider is authenticated with.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    private GetAttachedInstallManifestArgs() {}

    private GetAttachedInstallManifestArgs(GetAttachedInstallManifestArgs $) {
        this.clusterId = $.clusterId;
        this.location = $.location;
        this.platformVersion = $.platformVersion;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAttachedInstallManifestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAttachedInstallManifestArgs $;

        public Builder() {
            $ = new GetAttachedInstallManifestArgs();
        }

        public Builder(GetAttachedInstallManifestArgs defaults) {
            $ = new GetAttachedInstallManifestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The name that will be used when creating the attached cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The name that will be used when creating the attached cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param location The location to list versions for.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location to list versions for.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param platformVersion The platform version for the cluster. A list of valid values can be retrieved using the `gcp.container.getAttachedVersions` data source.
         * 
         * @return builder
         * 
         */
        public Builder platformVersion(Output<String> platformVersion) {
            $.platformVersion = platformVersion;
            return this;
        }

        /**
         * @param platformVersion The platform version for the cluster. A list of valid values can be retrieved using the `gcp.container.getAttachedVersions` data source.
         * 
         * @return builder
         * 
         */
        public Builder platformVersion(String platformVersion) {
            return platformVersion(Output.of(platformVersion));
        }

        /**
         * @param project ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
         * Defaults to the project that the provider is authenticated with.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project ID of the project to list available platform versions for. Should match the project the cluster will be deployed to.
         * Defaults to the project that the provider is authenticated with.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetAttachedInstallManifestArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.platformVersion = Objects.requireNonNull($.platformVersion, "expected parameter 'platformVersion' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
