// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.privilegedaccessmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.privilegedaccessmanager.inputs.EntitlementApprovalWorkflowManualApprovalsArgs;
import java.util.Objects;


public final class EntitlementApprovalWorkflowArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntitlementApprovalWorkflowArgs Empty = new EntitlementApprovalWorkflowArgs();

    /**
     * A manual approval workflow where users who are designated as approvers need to call the ApproveGrant/DenyGrant APIs for an Grant.
     * The workflow can consist of multiple serial steps where each step defines who can act as Approver in that step and how many of those users should approve before the workflow moves to the next step.
     * This can be used to create approval workflows such as
     * * Require an approval from any user in a group G.
     * * Require an approval from any k number of users from a Group G.
     * * Require an approval from any user in a group G and then from a user U. etc.
     *   A single user might be part of `approvers` ACL for multiple steps in this workflow but they can only approve once and that approval will only be considered to satisfy the approval step at which it was granted.
     *   Structure is documented below.
     * 
     */
    @Import(name="manualApprovals", required=true)
    private Output<EntitlementApprovalWorkflowManualApprovalsArgs> manualApprovals;

    /**
     * @return A manual approval workflow where users who are designated as approvers need to call the ApproveGrant/DenyGrant APIs for an Grant.
     * The workflow can consist of multiple serial steps where each step defines who can act as Approver in that step and how many of those users should approve before the workflow moves to the next step.
     * This can be used to create approval workflows such as
     * * Require an approval from any user in a group G.
     * * Require an approval from any k number of users from a Group G.
     * * Require an approval from any user in a group G and then from a user U. etc.
     *   A single user might be part of `approvers` ACL for multiple steps in this workflow but they can only approve once and that approval will only be considered to satisfy the approval step at which it was granted.
     *   Structure is documented below.
     * 
     */
    public Output<EntitlementApprovalWorkflowManualApprovalsArgs> manualApprovals() {
        return this.manualApprovals;
    }

    private EntitlementApprovalWorkflowArgs() {}

    private EntitlementApprovalWorkflowArgs(EntitlementApprovalWorkflowArgs $) {
        this.manualApprovals = $.manualApprovals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntitlementApprovalWorkflowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntitlementApprovalWorkflowArgs $;

        public Builder() {
            $ = new EntitlementApprovalWorkflowArgs();
        }

        public Builder(EntitlementApprovalWorkflowArgs defaults) {
            $ = new EntitlementApprovalWorkflowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manualApprovals A manual approval workflow where users who are designated as approvers need to call the ApproveGrant/DenyGrant APIs for an Grant.
         * The workflow can consist of multiple serial steps where each step defines who can act as Approver in that step and how many of those users should approve before the workflow moves to the next step.
         * This can be used to create approval workflows such as
         * * Require an approval from any user in a group G.
         * * Require an approval from any k number of users from a Group G.
         * * Require an approval from any user in a group G and then from a user U. etc.
         *   A single user might be part of `approvers` ACL for multiple steps in this workflow but they can only approve once and that approval will only be considered to satisfy the approval step at which it was granted.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder manualApprovals(Output<EntitlementApprovalWorkflowManualApprovalsArgs> manualApprovals) {
            $.manualApprovals = manualApprovals;
            return this;
        }

        /**
         * @param manualApprovals A manual approval workflow where users who are designated as approvers need to call the ApproveGrant/DenyGrant APIs for an Grant.
         * The workflow can consist of multiple serial steps where each step defines who can act as Approver in that step and how many of those users should approve before the workflow moves to the next step.
         * This can be used to create approval workflows such as
         * * Require an approval from any user in a group G.
         * * Require an approval from any k number of users from a Group G.
         * * Require an approval from any user in a group G and then from a user U. etc.
         *   A single user might be part of `approvers` ACL for multiple steps in this workflow but they can only approve once and that approval will only be considered to satisfy the approval step at which it was granted.
         *   Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder manualApprovals(EntitlementApprovalWorkflowManualApprovalsArgs manualApprovals) {
            return manualApprovals(Output.of(manualApprovals));
        }

        public EntitlementApprovalWorkflowArgs build() {
            if ($.manualApprovals == null) {
                throw new MissingRequiredPropertyException("EntitlementApprovalWorkflowArgs", "manualApprovals");
            }
            return $;
        }
    }

}
