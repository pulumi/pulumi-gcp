// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apigee.ControlPlaneAccessArgs;
import com.pulumi.gcp.apigee.inputs.ControlPlaneAccessState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Authorize the Runtime components to access directly with Apigee Control Plane.
 * 
 * To get more information about ControlPlaneAccess, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations/updateControlPlaneAccess)
 * * How-to Guides
 *     * [Enable ControlPlane access](https://cloud.google.com/apigee/docs/hybrid/v1.14/install-enable-control-plane-access)
 * 
 * ## Example Usage
 * 
 * ### Apigee Control Plane Access Basic Test
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.Project;
 * import com.pulumi.gcp.organizations.ProjectArgs;
 * import com.pulumi.gcp.projects.Service;
 * import com.pulumi.gcp.projects.ServiceArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.gcp.apigee.ControlPlaneAccess;
 * import com.pulumi.gcp.apigee.ControlPlaneAccessArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var project = new Project("project", ProjectArgs.builder()
 *             .projectId("my-project")
 *             .name("my-project")
 *             .orgId("123456789")
 *             .billingAccount("000000-0000000-0000000-000000")
 *             .deletionPolicy("DELETE")
 *             .build());
 * 
 *         var apigee = new Service("apigee", ServiceArgs.builder()
 *             .project(project.projectId())
 *             .service("apigee.googleapis.com")
 *             .build());
 * 
 *         var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
 *             .analyticsRegion("us-central1")
 *             .projectId(project.projectId())
 *             .runtimeType("HYBRID")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigee)
 *                 .build());
 * 
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .accountId("my-account")
 *             .displayName("Service Account")
 *             .build());
 * 
 *         var synchronizer_iam = new IAMMember("synchronizer-iam", IAMMemberArgs.builder()
 *             .project(project.projectId())
 *             .role("roles/apigee.synchronizerManager")
 *             .member(serviceAccount.email().applyValue(_email -> String.format("serviceAccount:%s", _email)))
 *             .build());
 * 
 *         var apigeeControlPlaneAccess = new ControlPlaneAccess("apigeeControlPlaneAccess", ControlPlaneAccessArgs.builder()
 *             .name(apigeeOrg.name())
 *             .synchronizerIdentities(serviceAccount.email().applyValue(_email -> String.format("serviceAccount:%s", _email)))
 *             .analyticsPublisherIdentities(serviceAccount.email().applyValue(_email -> String.format("serviceAccount:%s", _email)))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ControlPlaneAccess can be imported using any of these accepted formats:
 * 
 * * `organizations/{{name}}/controlPlaneAccess`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, ControlPlaneAccess can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:apigee/controlPlaneAccess:ControlPlaneAccess default organizations/{{name}}/controlPlaneAccess
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:apigee/controlPlaneAccess:ControlPlaneAccess default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:apigee/controlPlaneAccess:ControlPlaneAccess")
public class ControlPlaneAccess extends com.pulumi.resources.CustomResource {
    /**
     * Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * 
     */
    @Export(name="analyticsPublisherIdentities", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> analyticsPublisherIdentities;

    /**
     * @return Array of service accounts authorized to publish analytics data to the control plane, each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * 
     */
    public Output<Optional<List<String>>> analyticsPublisherIdentities() {
        return Codegen.optional(this.analyticsPublisherIdentities);
    }
    /**
     * Name of the Apigee organization.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Apigee organization.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     * 
     */
    @Export(name="synchronizerIdentities", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> synchronizerIdentities;

    /**
     * @return Array of service accounts to grant access to control plane resources (for the Synchronizer component), each specified using the following format: `serviceAccount:service-account-name`.
     * The `service-account-name` is formatted like an email address. For example: serviceAccount{@literal @}my_project_id.iam.gserviceaccount.com
     * You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
     * The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     * 
     */
    public Output<Optional<List<String>>> synchronizerIdentities() {
        return Codegen.optional(this.synchronizerIdentities);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ControlPlaneAccess(java.lang.String name) {
        this(name, ControlPlaneAccessArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ControlPlaneAccess(java.lang.String name, @Nullable ControlPlaneAccessArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ControlPlaneAccess(java.lang.String name, @Nullable ControlPlaneAccessArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/controlPlaneAccess:ControlPlaneAccess", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ControlPlaneAccess(java.lang.String name, Output<java.lang.String> id, @Nullable ControlPlaneAccessState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/controlPlaneAccess:ControlPlaneAccess", name, state, makeResourceOptions(options, id), false);
    }

    private static ControlPlaneAccessArgs makeArgs(@Nullable ControlPlaneAccessArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ControlPlaneAccessArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ControlPlaneAccess get(java.lang.String name, Output<java.lang.String> id, @Nullable ControlPlaneAccessState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ControlPlaneAccess(name, id, state, options);
    }
}
