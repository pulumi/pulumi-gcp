// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memcache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class InstanceNodeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceNodeConfigArgs Empty = new InstanceNodeConfigArgs();

    /**
     * Number of CPUs per node.
     * 
     */
    @Import(name="cpuCount", required=true)
    private Output<Integer> cpuCount;

    /**
     * @return Number of CPUs per node.
     * 
     */
    public Output<Integer> cpuCount() {
        return this.cpuCount;
    }

    /**
     * Memory size in Mebibytes for each memcache node.
     * 
     */
    @Import(name="memorySizeMb", required=true)
    private Output<Integer> memorySizeMb;

    /**
     * @return Memory size in Mebibytes for each memcache node.
     * 
     */
    public Output<Integer> memorySizeMb() {
        return this.memorySizeMb;
    }

    private InstanceNodeConfigArgs() {}

    private InstanceNodeConfigArgs(InstanceNodeConfigArgs $) {
        this.cpuCount = $.cpuCount;
        this.memorySizeMb = $.memorySizeMb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceNodeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceNodeConfigArgs $;

        public Builder() {
            $ = new InstanceNodeConfigArgs();
        }

        public Builder(InstanceNodeConfigArgs defaults) {
            $ = new InstanceNodeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuCount Number of CPUs per node.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount Number of CPUs per node.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param memorySizeMb Memory size in Mebibytes for each memcache node.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeMb(Output<Integer> memorySizeMb) {
            $.memorySizeMb = memorySizeMb;
            return this;
        }

        /**
         * @param memorySizeMb Memory size in Mebibytes for each memcache node.
         * 
         * @return builder
         * 
         */
        public Builder memorySizeMb(Integer memorySizeMb) {
            return memorySizeMb(Output.of(memorySizeMb));
        }

        public InstanceNodeConfigArgs build() {
            $.cpuCount = Objects.requireNonNull($.cpuCount, "expected parameter 'cpuCount' to be non-null");
            $.memorySizeMb = Objects.requireNonNull($.memorySizeMb, "expected parameter 'memorySizeMb' to be non-null");
            return $;
        }
    }

}
