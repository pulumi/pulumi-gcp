// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.firebase.inputs.AppHostingDomainCustomDomainStatusIssueArgs;
import com.pulumi.gcp.firebase.inputs.AppHostingDomainCustomDomainStatusRequiredDnsUpdateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppHostingDomainCustomDomainStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppHostingDomainCustomDomainStatusArgs Empty = new AppHostingDomainCustomDomainStatusArgs();

    /**
     * (Output)
     * Possible values:
     * CERT_PREPARING
     * CERT_VALIDATING
     * CERT_PROPAGATING
     * CERT_ACTIVE
     * CERT_EXPIRING_SOON
     * CERT_EXPIRED
     * 
     */
    @Import(name="certState")
    private @Nullable Output<String> certState;

    /**
     * @return (Output)
     * Possible values:
     * CERT_PREPARING
     * CERT_VALIDATING
     * CERT_PROPAGATING
     * CERT_ACTIVE
     * CERT_EXPIRING_SOON
     * CERT_EXPIRED
     * 
     */
    public Optional<Output<String>> certState() {
        return Optional.ofNullable(this.certState);
    }

    /**
     * (Output)
     * Possible values:
     * HOST_UNHOSTED
     * HOST_UNREACHABLE
     * HOST_NON_FAH
     * HOST_CONFLICT
     * HOST_WRONG_SHARD
     * HOST_ACTIVE
     * 
     */
    @Import(name="hostState")
    private @Nullable Output<String> hostState;

    /**
     * @return (Output)
     * Possible values:
     * HOST_UNHOSTED
     * HOST_UNREACHABLE
     * HOST_NON_FAH
     * HOST_CONFLICT
     * HOST_WRONG_SHARD
     * HOST_ACTIVE
     * 
     */
    public Optional<Output<String>> hostState() {
        return Optional.ofNullable(this.hostState);
    }

    /**
     * (Output)
     * A list of issues with domain configuration. Allows users to self-correct
     * problems with DNS records.
     * Structure is documented below.
     * 
     */
    @Import(name="issues")
    private @Nullable Output<List<AppHostingDomainCustomDomainStatusIssueArgs>> issues;

    /**
     * @return (Output)
     * A list of issues with domain configuration. Allows users to self-correct
     * problems with DNS records.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AppHostingDomainCustomDomainStatusIssueArgs>>> issues() {
        return Optional.ofNullable(this.issues);
    }

    /**
     * (Output)
     * Possible values:
     * OWNERSHIP_MISSING
     * OWNERSHIP_UNREACHABLE
     * OWNERSHIP_MISMATCH
     * OWNERSHIP_CONFLICT
     * OWNERSHIP_PENDING
     * OWNERSHIP_ACTIVE
     * 
     */
    @Import(name="ownershipState")
    private @Nullable Output<String> ownershipState;

    /**
     * @return (Output)
     * Possible values:
     * OWNERSHIP_MISSING
     * OWNERSHIP_UNREACHABLE
     * OWNERSHIP_MISMATCH
     * OWNERSHIP_CONFLICT
     * OWNERSHIP_PENDING
     * OWNERSHIP_ACTIVE
     * 
     */
    public Optional<Output<String>> ownershipState() {
        return Optional.ofNullable(this.ownershipState);
    }

    /**
     * (Output)
     * Lists the records that must added or removed to a custom domain&#39;s DNS
     * in order to finish setup and start serving content.
     * Field is present during onboarding. Also present after onboarding if one
     * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
     * records are in a bad state.
     * Structure is documented below.
     * 
     */
    @Import(name="requiredDnsUpdates")
    private @Nullable Output<List<AppHostingDomainCustomDomainStatusRequiredDnsUpdateArgs>> requiredDnsUpdates;

    /**
     * @return (Output)
     * Lists the records that must added or removed to a custom domain&#39;s DNS
     * in order to finish setup and start serving content.
     * Field is present during onboarding. Also present after onboarding if one
     * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
     * records are in a bad state.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AppHostingDomainCustomDomainStatusRequiredDnsUpdateArgs>>> requiredDnsUpdates() {
        return Optional.ofNullable(this.requiredDnsUpdates);
    }

    private AppHostingDomainCustomDomainStatusArgs() {}

    private AppHostingDomainCustomDomainStatusArgs(AppHostingDomainCustomDomainStatusArgs $) {
        this.certState = $.certState;
        this.hostState = $.hostState;
        this.issues = $.issues;
        this.ownershipState = $.ownershipState;
        this.requiredDnsUpdates = $.requiredDnsUpdates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppHostingDomainCustomDomainStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppHostingDomainCustomDomainStatusArgs $;

        public Builder() {
            $ = new AppHostingDomainCustomDomainStatusArgs();
        }

        public Builder(AppHostingDomainCustomDomainStatusArgs defaults) {
            $ = new AppHostingDomainCustomDomainStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certState (Output)
         * Possible values:
         * CERT_PREPARING
         * CERT_VALIDATING
         * CERT_PROPAGATING
         * CERT_ACTIVE
         * CERT_EXPIRING_SOON
         * CERT_EXPIRED
         * 
         * @return builder
         * 
         */
        public Builder certState(@Nullable Output<String> certState) {
            $.certState = certState;
            return this;
        }

        /**
         * @param certState (Output)
         * Possible values:
         * CERT_PREPARING
         * CERT_VALIDATING
         * CERT_PROPAGATING
         * CERT_ACTIVE
         * CERT_EXPIRING_SOON
         * CERT_EXPIRED
         * 
         * @return builder
         * 
         */
        public Builder certState(String certState) {
            return certState(Output.of(certState));
        }

        /**
         * @param hostState (Output)
         * Possible values:
         * HOST_UNHOSTED
         * HOST_UNREACHABLE
         * HOST_NON_FAH
         * HOST_CONFLICT
         * HOST_WRONG_SHARD
         * HOST_ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder hostState(@Nullable Output<String> hostState) {
            $.hostState = hostState;
            return this;
        }

        /**
         * @param hostState (Output)
         * Possible values:
         * HOST_UNHOSTED
         * HOST_UNREACHABLE
         * HOST_NON_FAH
         * HOST_CONFLICT
         * HOST_WRONG_SHARD
         * HOST_ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder hostState(String hostState) {
            return hostState(Output.of(hostState));
        }

        /**
         * @param issues (Output)
         * A list of issues with domain configuration. Allows users to self-correct
         * problems with DNS records.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder issues(@Nullable Output<List<AppHostingDomainCustomDomainStatusIssueArgs>> issues) {
            $.issues = issues;
            return this;
        }

        /**
         * @param issues (Output)
         * A list of issues with domain configuration. Allows users to self-correct
         * problems with DNS records.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder issues(List<AppHostingDomainCustomDomainStatusIssueArgs> issues) {
            return issues(Output.of(issues));
        }

        /**
         * @param issues (Output)
         * A list of issues with domain configuration. Allows users to self-correct
         * problems with DNS records.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder issues(AppHostingDomainCustomDomainStatusIssueArgs... issues) {
            return issues(List.of(issues));
        }

        /**
         * @param ownershipState (Output)
         * Possible values:
         * OWNERSHIP_MISSING
         * OWNERSHIP_UNREACHABLE
         * OWNERSHIP_MISMATCH
         * OWNERSHIP_CONFLICT
         * OWNERSHIP_PENDING
         * OWNERSHIP_ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder ownershipState(@Nullable Output<String> ownershipState) {
            $.ownershipState = ownershipState;
            return this;
        }

        /**
         * @param ownershipState (Output)
         * Possible values:
         * OWNERSHIP_MISSING
         * OWNERSHIP_UNREACHABLE
         * OWNERSHIP_MISMATCH
         * OWNERSHIP_CONFLICT
         * OWNERSHIP_PENDING
         * OWNERSHIP_ACTIVE
         * 
         * @return builder
         * 
         */
        public Builder ownershipState(String ownershipState) {
            return ownershipState(Output.of(ownershipState));
        }

        /**
         * @param requiredDnsUpdates (Output)
         * Lists the records that must added or removed to a custom domain&#39;s DNS
         * in order to finish setup and start serving content.
         * Field is present during onboarding. Also present after onboarding if one
         * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
         * records are in a bad state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requiredDnsUpdates(@Nullable Output<List<AppHostingDomainCustomDomainStatusRequiredDnsUpdateArgs>> requiredDnsUpdates) {
            $.requiredDnsUpdates = requiredDnsUpdates;
            return this;
        }

        /**
         * @param requiredDnsUpdates (Output)
         * Lists the records that must added or removed to a custom domain&#39;s DNS
         * in order to finish setup and start serving content.
         * Field is present during onboarding. Also present after onboarding if one
         * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
         * records are in a bad state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requiredDnsUpdates(List<AppHostingDomainCustomDomainStatusRequiredDnsUpdateArgs> requiredDnsUpdates) {
            return requiredDnsUpdates(Output.of(requiredDnsUpdates));
        }

        /**
         * @param requiredDnsUpdates (Output)
         * Lists the records that must added or removed to a custom domain&#39;s DNS
         * in order to finish setup and start serving content.
         * Field is present during onboarding. Also present after onboarding if one
         * or more of the above states is not *_ACTIVE, indicating the domain&#39;s DNS
         * records are in a bad state.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requiredDnsUpdates(AppHostingDomainCustomDomainStatusRequiredDnsUpdateArgs... requiredDnsUpdates) {
            return requiredDnsUpdates(List.of(requiredDnsUpdates));
        }

        public AppHostingDomainCustomDomainStatusArgs build() {
            return $;
        }
    }

}
