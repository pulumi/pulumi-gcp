// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.kms.outputs.GetCryptoKeyVersionsVersionPublicKey;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCryptoKeyVersionsVersion {
    /**
     * @return The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    private String algorithm;
    /**
     * @return The `id` of the Google Cloud Platform CryptoKey to which the key version belongs. This is also the `id` field of the
     * `gcp.kms.CryptoKey` resource/datasource.
     * 
     */
    private String cryptoKey;
    private String id;
    private String name;
    private String protectionLevel;
    private List<GetCryptoKeyVersionsVersionPublicKey> publicKeys;
    private String state;
    private Integer version;

    private GetCryptoKeyVersionsVersion() {}
    /**
     * @return The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return The `id` of the Google Cloud Platform CryptoKey to which the key version belongs. This is also the `id` field of the
     * `gcp.kms.CryptoKey` resource/datasource.
     * 
     */
    public String cryptoKey() {
        return this.cryptoKey;
    }
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String protectionLevel() {
        return this.protectionLevel;
    }
    public List<GetCryptoKeyVersionsVersionPublicKey> publicKeys() {
        return this.publicKeys;
    }
    public String state() {
        return this.state;
    }
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoKeyVersionsVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String cryptoKey;
        private String id;
        private String name;
        private String protectionLevel;
        private List<GetCryptoKeyVersionsVersionPublicKey> publicKeys;
        private String state;
        private Integer version;
        public Builder() {}
        public Builder(GetCryptoKeyVersionsVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.cryptoKey = defaults.cryptoKey;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.protectionLevel = defaults.protectionLevel;
    	      this.publicKeys = defaults.publicKeys;
    	      this.state = defaults.state;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder cryptoKey(String cryptoKey) {
            if (cryptoKey == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "cryptoKey");
            }
            this.cryptoKey = cryptoKey;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protectionLevel(String protectionLevel) {
            if (protectionLevel == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "protectionLevel");
            }
            this.protectionLevel = protectionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder publicKeys(List<GetCryptoKeyVersionsVersionPublicKey> publicKeys) {
            if (publicKeys == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "publicKeys");
            }
            this.publicKeys = publicKeys;
            return this;
        }
        public Builder publicKeys(GetCryptoKeyVersionsVersionPublicKey... publicKeys) {
            return publicKeys(List.of(publicKeys));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCryptoKeyVersionsVersion", "version");
            }
            this.version = version;
            return this;
        }
        public GetCryptoKeyVersionsVersion build() {
            final var _resultValue = new GetCryptoKeyVersionsVersion();
            _resultValue.algorithm = algorithm;
            _resultValue.cryptoKey = cryptoKey;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.protectionLevel = protectionLevel;
            _resultValue.publicKeys = publicKeys;
            _resultValue.state = state;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
