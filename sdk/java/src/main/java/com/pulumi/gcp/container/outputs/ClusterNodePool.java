// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.ClusterNodePoolAutoscaling;
import com.pulumi.gcp.container.outputs.ClusterNodePoolManagement;
import com.pulumi.gcp.container.outputs.ClusterNodePoolNetworkConfig;
import com.pulumi.gcp.container.outputs.ClusterNodePoolNodeConfig;
import com.pulumi.gcp.container.outputs.ClusterNodePoolPlacementPolicy;
import com.pulumi.gcp.container.outputs.ClusterNodePoolQueuedProvisioning;
import com.pulumi.gcp.container.outputs.ClusterNodePoolUpgradeSettings;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodePool {
    /**
     * @return Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     * 
     */
    private @Nullable ClusterNodePoolAutoscaling autoscaling;
    /**
     * @return The number of nodes to create in this
     * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
     * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
     * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
     * set this to a value of at least `1`, alongside setting
     * `remove_default_node_pool` to `true`.
     * 
     */
    private @Nullable Integer initialNodeCount;
    /**
     * @return The resource URLs of the managed instance groups associated with this node pool.
     * 
     */
    private @Nullable List<String> instanceGroupUrls;
    /**
     * @return List of instance group URLs which have been assigned to this node pool.
     * 
     */
    private @Nullable List<String> managedInstanceGroupUrls;
    /**
     * @return Node management configuration, wherein auto-repair and auto-upgrade is configured.
     * 
     */
    private @Nullable ClusterNodePoolManagement management;
    /**
     * @return The maximum number of pods per node in this node pool. Note that this does not work on node pools which are &#34;route-based&#34; - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     * 
     */
    private @Nullable Integer maxPodsPerNode;
    /**
     * @return The name of the cluster, unique within the project and
     * location.
     * 
     */
    private @Nullable String name;
    /**
     * @return Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     * 
     */
    private @Nullable String namePrefix;
    /**
     * @return Configuration for
     * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
     * 
     */
    private @Nullable ClusterNodePoolNetworkConfig networkConfig;
    /**
     * @return Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `node_pool` block; this configuration
     * manages the default node pool, which isn&#39;t recommended to be used.
     * Structure is documented below.
     * 
     */
    private @Nullable ClusterNodePoolNodeConfig nodeConfig;
    /**
     * @return The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
     * 
     */
    private @Nullable Integer nodeCount;
    /**
     * @return The list of zones in which the cluster&#39;s nodes
     * are located. Nodes must be in the region of their regional cluster or in the
     * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
     * a zonal cluster, omit the cluster&#39;s zone.
     * 
     * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
     * defined; in a multi-zonal cluster, the cluster master is only present in a
     * single zone while nodes are present in each of the primary zone and the node
     * locations. In contrast, in a regional cluster, cluster master nodes are present
     * in multiple zones in the region. For that reason, regional clusters should be
     * preferred.
     * 
     */
    private @Nullable List<String> nodeLocations;
    /**
     * @return Specifies the node placement policy
     * 
     */
    private @Nullable ClusterNodePoolPlacementPolicy placementPolicy;
    /**
     * @return Specifies the configuration of queued provisioning
     * 
     */
    private @Nullable ClusterNodePoolQueuedProvisioning queuedProvisioning;
    /**
     * @return Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
     * 
     */
    private @Nullable ClusterNodePoolUpgradeSettings upgradeSettings;
    private @Nullable String version;

    private ClusterNodePool() {}
    /**
     * @return Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     * 
     */
    public Optional<ClusterNodePoolAutoscaling> autoscaling() {
        return Optional.ofNullable(this.autoscaling);
    }
    /**
     * @return The number of nodes to create in this
     * cluster&#39;s default node pool. In regional or multi-zonal clusters, this is the
     * number of nodes per zone. Must be set if `node_pool` is not set. If you&#39;re using
     * `gcp.container.NodePool` objects with no default node pool, you&#39;ll need to
     * set this to a value of at least `1`, alongside setting
     * `remove_default_node_pool` to `true`.
     * 
     */
    public Optional<Integer> initialNodeCount() {
        return Optional.ofNullable(this.initialNodeCount);
    }
    /**
     * @return The resource URLs of the managed instance groups associated with this node pool.
     * 
     */
    public List<String> instanceGroupUrls() {
        return this.instanceGroupUrls == null ? List.of() : this.instanceGroupUrls;
    }
    /**
     * @return List of instance group URLs which have been assigned to this node pool.
     * 
     */
    public List<String> managedInstanceGroupUrls() {
        return this.managedInstanceGroupUrls == null ? List.of() : this.managedInstanceGroupUrls;
    }
    /**
     * @return Node management configuration, wherein auto-repair and auto-upgrade is configured.
     * 
     */
    public Optional<ClusterNodePoolManagement> management() {
        return Optional.ofNullable(this.management);
    }
    /**
     * @return The maximum number of pods per node in this node pool. Note that this does not work on node pools which are &#34;route-based&#34; - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     * 
     */
    public Optional<Integer> maxPodsPerNode() {
        return Optional.ofNullable(this.maxPodsPerNode);
    }
    /**
     * @return The name of the cluster, unique within the project and
     * location.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     * 
     */
    public Optional<String> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }
    /**
     * @return Configuration for
     * [Adding Pod IP address ranges](https://cloud.google.com/kubernetes-engine/docs/how-to/multi-pod-cidr)) to the node pool. Structure is documented below
     * 
     */
    public Optional<ClusterNodePoolNetworkConfig> networkConfig() {
        return Optional.ofNullable(this.networkConfig);
    }
    /**
     * @return Parameters used in creating the default node pool.
     * Generally, this field should not be used at the same time as a
     * `gcp.container.NodePool` or a `node_pool` block; this configuration
     * manages the default node pool, which isn&#39;t recommended to be used.
     * Structure is documented below.
     * 
     */
    public Optional<ClusterNodePoolNodeConfig> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }
    /**
     * @return The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
     * 
     */
    public Optional<Integer> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }
    /**
     * @return The list of zones in which the cluster&#39;s nodes
     * are located. Nodes must be in the region of their regional cluster or in the
     * same region as their cluster&#39;s zone for zonal clusters. If this is specified for
     * a zonal cluster, omit the cluster&#39;s zone.
     * 
     * &gt; A &#34;multi-zonal&#34; cluster is a zonal cluster with at least one additional zone
     * defined; in a multi-zonal cluster, the cluster master is only present in a
     * single zone while nodes are present in each of the primary zone and the node
     * locations. In contrast, in a regional cluster, cluster master nodes are present
     * in multiple zones in the region. For that reason, regional clusters should be
     * preferred.
     * 
     */
    public List<String> nodeLocations() {
        return this.nodeLocations == null ? List.of() : this.nodeLocations;
    }
    /**
     * @return Specifies the node placement policy
     * 
     */
    public Optional<ClusterNodePoolPlacementPolicy> placementPolicy() {
        return Optional.ofNullable(this.placementPolicy);
    }
    /**
     * @return Specifies the configuration of queued provisioning
     * 
     */
    public Optional<ClusterNodePoolQueuedProvisioning> queuedProvisioning() {
        return Optional.ofNullable(this.queuedProvisioning);
    }
    /**
     * @return Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.
     * 
     */
    public Optional<ClusterNodePoolUpgradeSettings> upgradeSettings() {
        return Optional.ofNullable(this.upgradeSettings);
    }
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodePool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterNodePoolAutoscaling autoscaling;
        private @Nullable Integer initialNodeCount;
        private @Nullable List<String> instanceGroupUrls;
        private @Nullable List<String> managedInstanceGroupUrls;
        private @Nullable ClusterNodePoolManagement management;
        private @Nullable Integer maxPodsPerNode;
        private @Nullable String name;
        private @Nullable String namePrefix;
        private @Nullable ClusterNodePoolNetworkConfig networkConfig;
        private @Nullable ClusterNodePoolNodeConfig nodeConfig;
        private @Nullable Integer nodeCount;
        private @Nullable List<String> nodeLocations;
        private @Nullable ClusterNodePoolPlacementPolicy placementPolicy;
        private @Nullable ClusterNodePoolQueuedProvisioning queuedProvisioning;
        private @Nullable ClusterNodePoolUpgradeSettings upgradeSettings;
        private @Nullable String version;
        public Builder() {}
        public Builder(ClusterNodePool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscaling = defaults.autoscaling;
    	      this.initialNodeCount = defaults.initialNodeCount;
    	      this.instanceGroupUrls = defaults.instanceGroupUrls;
    	      this.managedInstanceGroupUrls = defaults.managedInstanceGroupUrls;
    	      this.management = defaults.management;
    	      this.maxPodsPerNode = defaults.maxPodsPerNode;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.networkConfig = defaults.networkConfig;
    	      this.nodeConfig = defaults.nodeConfig;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeLocations = defaults.nodeLocations;
    	      this.placementPolicy = defaults.placementPolicy;
    	      this.queuedProvisioning = defaults.queuedProvisioning;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder autoscaling(@Nullable ClusterNodePoolAutoscaling autoscaling) {

            this.autoscaling = autoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder initialNodeCount(@Nullable Integer initialNodeCount) {

            this.initialNodeCount = initialNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder instanceGroupUrls(@Nullable List<String> instanceGroupUrls) {

            this.instanceGroupUrls = instanceGroupUrls;
            return this;
        }
        public Builder instanceGroupUrls(String... instanceGroupUrls) {
            return instanceGroupUrls(List.of(instanceGroupUrls));
        }
        @CustomType.Setter
        public Builder managedInstanceGroupUrls(@Nullable List<String> managedInstanceGroupUrls) {

            this.managedInstanceGroupUrls = managedInstanceGroupUrls;
            return this;
        }
        public Builder managedInstanceGroupUrls(String... managedInstanceGroupUrls) {
            return managedInstanceGroupUrls(List.of(managedInstanceGroupUrls));
        }
        @CustomType.Setter
        public Builder management(@Nullable ClusterNodePoolManagement management) {

            this.management = management;
            return this;
        }
        @CustomType.Setter
        public Builder maxPodsPerNode(@Nullable Integer maxPodsPerNode) {

            this.maxPodsPerNode = maxPodsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(@Nullable String namePrefix) {

            this.namePrefix = namePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfig(@Nullable ClusterNodePoolNetworkConfig networkConfig) {

            this.networkConfig = networkConfig;
            return this;
        }
        @CustomType.Setter
        public Builder nodeConfig(@Nullable ClusterNodePoolNodeConfig nodeConfig) {

            this.nodeConfig = nodeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(@Nullable Integer nodeCount) {

            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nodeLocations(@Nullable List<String> nodeLocations) {

            this.nodeLocations = nodeLocations;
            return this;
        }
        public Builder nodeLocations(String... nodeLocations) {
            return nodeLocations(List.of(nodeLocations));
        }
        @CustomType.Setter
        public Builder placementPolicy(@Nullable ClusterNodePoolPlacementPolicy placementPolicy) {

            this.placementPolicy = placementPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder queuedProvisioning(@Nullable ClusterNodePoolQueuedProvisioning queuedProvisioning) {

            this.queuedProvisioning = queuedProvisioning;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeSettings(@Nullable ClusterNodePoolUpgradeSettings upgradeSettings) {

            this.upgradeSettings = upgradeSettings;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        public ClusterNodePool build() {
            final var _resultValue = new ClusterNodePool();
            _resultValue.autoscaling = autoscaling;
            _resultValue.initialNodeCount = initialNodeCount;
            _resultValue.instanceGroupUrls = instanceGroupUrls;
            _resultValue.managedInstanceGroupUrls = managedInstanceGroupUrls;
            _resultValue.management = management;
            _resultValue.maxPodsPerNode = maxPodsPerNode;
            _resultValue.name = name;
            _resultValue.namePrefix = namePrefix;
            _resultValue.networkConfig = networkConfig;
            _resultValue.nodeConfig = nodeConfig;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nodeLocations = nodeLocations;
            _resultValue.placementPolicy = placementPolicy;
            _resultValue.queuedProvisioning = queuedProvisioning;
            _resultValue.upgradeSettings = upgradeSettings;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
