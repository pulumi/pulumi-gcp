// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StoragePoolStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final StoragePoolStatusArgs Empty = new StoragePoolStatusArgs();

    /**
     * (Output)
     * Number of disks used.
     * 
     */
    @Import(name="diskCount")
    private @Nullable Output<String> diskCount;

    /**
     * @return (Output)
     * Number of disks used.
     * 
     */
    public Optional<Output<String>> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }

    /**
     * (Output)
     * Timestamp of the last successful resize in RFC3339 text format.
     * 
     */
    @Import(name="lastResizeTimestamp")
    private @Nullable Output<String> lastResizeTimestamp;

    /**
     * @return (Output)
     * Timestamp of the last successful resize in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> lastResizeTimestamp() {
        return Optional.ofNullable(this.lastResizeTimestamp);
    }

    /**
     * (Output)
     * Maximum allowed aggregate disk size in gigabytes.
     * 
     */
    @Import(name="maxTotalProvisionedDiskCapacityGb")
    private @Nullable Output<String> maxTotalProvisionedDiskCapacityGb;

    /**
     * @return (Output)
     * Maximum allowed aggregate disk size in gigabytes.
     * 
     */
    public Optional<Output<String>> maxTotalProvisionedDiskCapacityGb() {
        return Optional.ofNullable(this.maxTotalProvisionedDiskCapacityGb);
    }

    /**
     * (Output)
     * Space used by data stored in disks within the storage pool (in bytes).
     * This will reflect the total number of bytes written to the disks in the pool, in contrast to the capacity of those disks.
     * 
     */
    @Import(name="poolUsedCapacityBytes")
    private @Nullable Output<String> poolUsedCapacityBytes;

    /**
     * @return (Output)
     * Space used by data stored in disks within the storage pool (in bytes).
     * This will reflect the total number of bytes written to the disks in the pool, in contrast to the capacity of those disks.
     * 
     */
    public Optional<Output<String>> poolUsedCapacityBytes() {
        return Optional.ofNullable(this.poolUsedCapacityBytes);
    }

    /**
     * (Output)
     * Sum of all the disks&#39; provisioned IOPS, minus some amount that is allowed per disk that is not counted towards pool&#39;s IOPS capacity. For more information, see https://cloud.google.com/compute/docs/disks/storage-pools.
     * 
     */
    @Import(name="poolUsedIops")
    private @Nullable Output<String> poolUsedIops;

    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned IOPS, minus some amount that is allowed per disk that is not counted towards pool&#39;s IOPS capacity. For more information, see https://cloud.google.com/compute/docs/disks/storage-pools.
     * 
     */
    public Optional<Output<String>> poolUsedIops() {
        return Optional.ofNullable(this.poolUsedIops);
    }

    /**
     * (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s.
     * 
     */
    @Import(name="poolUsedThroughput")
    private @Nullable Output<String> poolUsedThroughput;

    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s.
     * 
     */
    public Optional<Output<String>> poolUsedThroughput() {
        return Optional.ofNullable(this.poolUsedThroughput);
    }

    /**
     * (Output)
     * Amount of data written into the pool, before it is compacted.
     * 
     */
    @Import(name="poolUserWrittenBytes")
    private @Nullable Output<String> poolUserWrittenBytes;

    /**
     * @return (Output)
     * Amount of data written into the pool, before it is compacted.
     * 
     */
    public Optional<Output<String>> poolUserWrittenBytes() {
        return Optional.ofNullable(this.poolUserWrittenBytes);
    }

    /**
     * (Output)
     * Sum of all the capacity provisioned in disks in this storage pool.
     * A disk&#39;s provisioned capacity is the same as its total capacity.
     * 
     */
    @Import(name="totalProvisionedDiskCapacityGb")
    private @Nullable Output<String> totalProvisionedDiskCapacityGb;

    /**
     * @return (Output)
     * Sum of all the capacity provisioned in disks in this storage pool.
     * A disk&#39;s provisioned capacity is the same as its total capacity.
     * 
     */
    public Optional<Output<String>> totalProvisionedDiskCapacityGb() {
        return Optional.ofNullable(this.totalProvisionedDiskCapacityGb);
    }

    /**
     * (Output)
     * Sum of all the disks&#39; provisioned IOPS.
     * 
     */
    @Import(name="totalProvisionedDiskIops")
    private @Nullable Output<String> totalProvisionedDiskIops;

    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned IOPS.
     * 
     */
    public Optional<Output<String>> totalProvisionedDiskIops() {
        return Optional.ofNullable(this.totalProvisionedDiskIops);
    }

    /**
     * (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s,
     * minus some amount that is allowed per disk that is not counted towards pool&#39;s throughput capacity.
     * 
     */
    @Import(name="totalProvisionedDiskThroughput")
    private @Nullable Output<String> totalProvisionedDiskThroughput;

    /**
     * @return (Output)
     * Sum of all the disks&#39; provisioned throughput in MB/s,
     * minus some amount that is allowed per disk that is not counted towards pool&#39;s throughput capacity.
     * 
     */
    public Optional<Output<String>> totalProvisionedDiskThroughput() {
        return Optional.ofNullable(this.totalProvisionedDiskThroughput);
    }

    private StoragePoolStatusArgs() {}

    private StoragePoolStatusArgs(StoragePoolStatusArgs $) {
        this.diskCount = $.diskCount;
        this.lastResizeTimestamp = $.lastResizeTimestamp;
        this.maxTotalProvisionedDiskCapacityGb = $.maxTotalProvisionedDiskCapacityGb;
        this.poolUsedCapacityBytes = $.poolUsedCapacityBytes;
        this.poolUsedIops = $.poolUsedIops;
        this.poolUsedThroughput = $.poolUsedThroughput;
        this.poolUserWrittenBytes = $.poolUserWrittenBytes;
        this.totalProvisionedDiskCapacityGb = $.totalProvisionedDiskCapacityGb;
        this.totalProvisionedDiskIops = $.totalProvisionedDiskIops;
        this.totalProvisionedDiskThroughput = $.totalProvisionedDiskThroughput;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StoragePoolStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StoragePoolStatusArgs $;

        public Builder() {
            $ = new StoragePoolStatusArgs();
        }

        public Builder(StoragePoolStatusArgs defaults) {
            $ = new StoragePoolStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskCount (Output)
         * Number of disks used.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(@Nullable Output<String> diskCount) {
            $.diskCount = diskCount;
            return this;
        }

        /**
         * @param diskCount (Output)
         * Number of disks used.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(String diskCount) {
            return diskCount(Output.of(diskCount));
        }

        /**
         * @param lastResizeTimestamp (Output)
         * Timestamp of the last successful resize in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder lastResizeTimestamp(@Nullable Output<String> lastResizeTimestamp) {
            $.lastResizeTimestamp = lastResizeTimestamp;
            return this;
        }

        /**
         * @param lastResizeTimestamp (Output)
         * Timestamp of the last successful resize in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder lastResizeTimestamp(String lastResizeTimestamp) {
            return lastResizeTimestamp(Output.of(lastResizeTimestamp));
        }

        /**
         * @param maxTotalProvisionedDiskCapacityGb (Output)
         * Maximum allowed aggregate disk size in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder maxTotalProvisionedDiskCapacityGb(@Nullable Output<String> maxTotalProvisionedDiskCapacityGb) {
            $.maxTotalProvisionedDiskCapacityGb = maxTotalProvisionedDiskCapacityGb;
            return this;
        }

        /**
         * @param maxTotalProvisionedDiskCapacityGb (Output)
         * Maximum allowed aggregate disk size in gigabytes.
         * 
         * @return builder
         * 
         */
        public Builder maxTotalProvisionedDiskCapacityGb(String maxTotalProvisionedDiskCapacityGb) {
            return maxTotalProvisionedDiskCapacityGb(Output.of(maxTotalProvisionedDiskCapacityGb));
        }

        /**
         * @param poolUsedCapacityBytes (Output)
         * Space used by data stored in disks within the storage pool (in bytes).
         * This will reflect the total number of bytes written to the disks in the pool, in contrast to the capacity of those disks.
         * 
         * @return builder
         * 
         */
        public Builder poolUsedCapacityBytes(@Nullable Output<String> poolUsedCapacityBytes) {
            $.poolUsedCapacityBytes = poolUsedCapacityBytes;
            return this;
        }

        /**
         * @param poolUsedCapacityBytes (Output)
         * Space used by data stored in disks within the storage pool (in bytes).
         * This will reflect the total number of bytes written to the disks in the pool, in contrast to the capacity of those disks.
         * 
         * @return builder
         * 
         */
        public Builder poolUsedCapacityBytes(String poolUsedCapacityBytes) {
            return poolUsedCapacityBytes(Output.of(poolUsedCapacityBytes));
        }

        /**
         * @param poolUsedIops (Output)
         * Sum of all the disks&#39; provisioned IOPS, minus some amount that is allowed per disk that is not counted towards pool&#39;s IOPS capacity. For more information, see https://cloud.google.com/compute/docs/disks/storage-pools.
         * 
         * @return builder
         * 
         */
        public Builder poolUsedIops(@Nullable Output<String> poolUsedIops) {
            $.poolUsedIops = poolUsedIops;
            return this;
        }

        /**
         * @param poolUsedIops (Output)
         * Sum of all the disks&#39; provisioned IOPS, minus some amount that is allowed per disk that is not counted towards pool&#39;s IOPS capacity. For more information, see https://cloud.google.com/compute/docs/disks/storage-pools.
         * 
         * @return builder
         * 
         */
        public Builder poolUsedIops(String poolUsedIops) {
            return poolUsedIops(Output.of(poolUsedIops));
        }

        /**
         * @param poolUsedThroughput (Output)
         * Sum of all the disks&#39; provisioned throughput in MB/s.
         * 
         * @return builder
         * 
         */
        public Builder poolUsedThroughput(@Nullable Output<String> poolUsedThroughput) {
            $.poolUsedThroughput = poolUsedThroughput;
            return this;
        }

        /**
         * @param poolUsedThroughput (Output)
         * Sum of all the disks&#39; provisioned throughput in MB/s.
         * 
         * @return builder
         * 
         */
        public Builder poolUsedThroughput(String poolUsedThroughput) {
            return poolUsedThroughput(Output.of(poolUsedThroughput));
        }

        /**
         * @param poolUserWrittenBytes (Output)
         * Amount of data written into the pool, before it is compacted.
         * 
         * @return builder
         * 
         */
        public Builder poolUserWrittenBytes(@Nullable Output<String> poolUserWrittenBytes) {
            $.poolUserWrittenBytes = poolUserWrittenBytes;
            return this;
        }

        /**
         * @param poolUserWrittenBytes (Output)
         * Amount of data written into the pool, before it is compacted.
         * 
         * @return builder
         * 
         */
        public Builder poolUserWrittenBytes(String poolUserWrittenBytes) {
            return poolUserWrittenBytes(Output.of(poolUserWrittenBytes));
        }

        /**
         * @param totalProvisionedDiskCapacityGb (Output)
         * Sum of all the capacity provisioned in disks in this storage pool.
         * A disk&#39;s provisioned capacity is the same as its total capacity.
         * 
         * @return builder
         * 
         */
        public Builder totalProvisionedDiskCapacityGb(@Nullable Output<String> totalProvisionedDiskCapacityGb) {
            $.totalProvisionedDiskCapacityGb = totalProvisionedDiskCapacityGb;
            return this;
        }

        /**
         * @param totalProvisionedDiskCapacityGb (Output)
         * Sum of all the capacity provisioned in disks in this storage pool.
         * A disk&#39;s provisioned capacity is the same as its total capacity.
         * 
         * @return builder
         * 
         */
        public Builder totalProvisionedDiskCapacityGb(String totalProvisionedDiskCapacityGb) {
            return totalProvisionedDiskCapacityGb(Output.of(totalProvisionedDiskCapacityGb));
        }

        /**
         * @param totalProvisionedDiskIops (Output)
         * Sum of all the disks&#39; provisioned IOPS.
         * 
         * @return builder
         * 
         */
        public Builder totalProvisionedDiskIops(@Nullable Output<String> totalProvisionedDiskIops) {
            $.totalProvisionedDiskIops = totalProvisionedDiskIops;
            return this;
        }

        /**
         * @param totalProvisionedDiskIops (Output)
         * Sum of all the disks&#39; provisioned IOPS.
         * 
         * @return builder
         * 
         */
        public Builder totalProvisionedDiskIops(String totalProvisionedDiskIops) {
            return totalProvisionedDiskIops(Output.of(totalProvisionedDiskIops));
        }

        /**
         * @param totalProvisionedDiskThroughput (Output)
         * Sum of all the disks&#39; provisioned throughput in MB/s,
         * minus some amount that is allowed per disk that is not counted towards pool&#39;s throughput capacity.
         * 
         * @return builder
         * 
         */
        public Builder totalProvisionedDiskThroughput(@Nullable Output<String> totalProvisionedDiskThroughput) {
            $.totalProvisionedDiskThroughput = totalProvisionedDiskThroughput;
            return this;
        }

        /**
         * @param totalProvisionedDiskThroughput (Output)
         * Sum of all the disks&#39; provisioned throughput in MB/s,
         * minus some amount that is allowed per disk that is not counted towards pool&#39;s throughput capacity.
         * 
         * @return builder
         * 
         */
        public Builder totalProvisionedDiskThroughput(String totalProvisionedDiskThroughput) {
            return totalProvisionedDiskThroughput(Output.of(totalProvisionedDiskThroughput));
        }

        public StoragePoolStatusArgs build() {
            return $;
        }
    }

}
