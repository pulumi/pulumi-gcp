// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs Empty = new AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs();

    /**
     * The metric specifications that overrides a resource
     * utilization metric (CPU utilization, accelerator&#39;s duty cycle, and so on)
     * target value (default to 60 if not set). At most one entry is allowed per
     * metric.
     * If machine_spec.accelerator_count is
     * above 0, the autoscaling will be based on both CPU utilization and
     * accelerator&#39;s duty cycle metrics and scale up when either metrics exceeds
     * its target value while scale down if both metrics are under their target
     * value. The default target value is 60 for both metrics.
     * If machine_spec.accelerator_count is
     * 0, the autoscaling will be based on CPU utilization metric only with
     * default target value 60 if not explicitly set.
     * For example, in the case of Online Prediction, if you want to override
     * target CPU utilization to 80, you should set
     * autoscaling_metric_specs.metric_name
     * to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
     * autoscaling_metric_specs.target to `80`.
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingMetricSpecs")
    private @Nullable Output<List<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs>> autoscalingMetricSpecs;

    /**
     * @return The metric specifications that overrides a resource
     * utilization metric (CPU utilization, accelerator&#39;s duty cycle, and so on)
     * target value (default to 60 if not set). At most one entry is allowed per
     * metric.
     * If machine_spec.accelerator_count is
     * above 0, the autoscaling will be based on both CPU utilization and
     * accelerator&#39;s duty cycle metrics and scale up when either metrics exceeds
     * its target value while scale down if both metrics are under their target
     * value. The default target value is 60 for both metrics.
     * If machine_spec.accelerator_count is
     * 0, the autoscaling will be based on CPU utilization metric only with
     * default target value 60 if not explicitly set.
     * For example, in the case of Online Prediction, if you want to override
     * target CPU utilization to 80, you should set
     * autoscaling_metric_specs.metric_name
     * to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
     * autoscaling_metric_specs.target to `80`.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs>>> autoscalingMetricSpecs() {
        return Optional.ofNullable(this.autoscalingMetricSpecs);
    }

    /**
     * Specification of a single machine.
     * Structure is documented below.
     * 
     */
    @Import(name="machineSpec", required=true)
    private Output<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs> machineSpec;

    /**
     * @return Specification of a single machine.
     * Structure is documented below.
     * 
     */
    public Output<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs> machineSpec() {
        return this.machineSpec;
    }

    /**
     * The maximum number of replicas that may be deployed on when the traffic
     * against it increases. If the requested value is too large, the deployment
     * will error, but if deployment succeeds then the ability to scale to that
     * many replicas is guaranteed (barring service outages). If traffic increases
     * beyond what its replicas at maximum may handle, a portion of the traffic
     * will be dropped. If this value is not provided, will use
     * min_replica_count as the default value.
     * The value of this field impacts the charge against Vertex CPU and GPU
     * quotas. Specifically, you will be charged for (max_replica_count *
     * number of cores in the selected machine type) and (max_replica_count *
     * number of GPUs per replica in the selected machine type).
     * 
     */
    @Import(name="maxReplicaCount")
    private @Nullable Output<Integer> maxReplicaCount;

    /**
     * @return The maximum number of replicas that may be deployed on when the traffic
     * against it increases. If the requested value is too large, the deployment
     * will error, but if deployment succeeds then the ability to scale to that
     * many replicas is guaranteed (barring service outages). If traffic increases
     * beyond what its replicas at maximum may handle, a portion of the traffic
     * will be dropped. If this value is not provided, will use
     * min_replica_count as the default value.
     * The value of this field impacts the charge against Vertex CPU and GPU
     * quotas. Specifically, you will be charged for (max_replica_count *
     * number of cores in the selected machine type) and (max_replica_count *
     * number of GPUs per replica in the selected machine type).
     * 
     */
    public Optional<Output<Integer>> maxReplicaCount() {
        return Optional.ofNullable(this.maxReplicaCount);
    }

    /**
     * The minimum number of machine replicas that will be always deployed on.
     * This value must be greater than or equal to 1.
     * If traffic increases, it may dynamically be deployed onto more replicas,
     * and as traffic decreases, some of these extra replicas may be freed.
     * 
     */
    @Import(name="minReplicaCount", required=true)
    private Output<Integer> minReplicaCount;

    /**
     * @return The minimum number of machine replicas that will be always deployed on.
     * This value must be greater than or equal to 1.
     * If traffic increases, it may dynamically be deployed onto more replicas,
     * and as traffic decreases, some of these extra replicas may be freed.
     * 
     */
    public Output<Integer> minReplicaCount() {
        return this.minReplicaCount;
    }

    /**
     * Number of required available replicas for the deployment to succeed.
     * This field is only needed when partial deployment/mutation is
     * desired. If set, the deploy/mutate operation will succeed once
     * available_replica_count reaches required_replica_count, and the rest of
     * the replicas will be retried. If not set, the default
     * required_replica_count will be min_replica_count.
     * 
     */
    @Import(name="requiredReplicaCount")
    private @Nullable Output<Integer> requiredReplicaCount;

    /**
     * @return Number of required available replicas for the deployment to succeed.
     * This field is only needed when partial deployment/mutation is
     * desired. If set, the deploy/mutate operation will succeed once
     * available_replica_count reaches required_replica_count, and the rest of
     * the replicas will be retried. If not set, the default
     * required_replica_count will be min_replica_count.
     * 
     */
    public Optional<Output<Integer>> requiredReplicaCount() {
        return Optional.ofNullable(this.requiredReplicaCount);
    }

    /**
     * If true, schedule the deployment workload on [spot
     * VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
     * 
     */
    @Import(name="spot")
    private @Nullable Output<Boolean> spot;

    /**
     * @return If true, schedule the deployment workload on [spot
     * VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
     * 
     */
    public Optional<Output<Boolean>> spot() {
        return Optional.ofNullable(this.spot);
    }

    private AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs() {}

    private AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs(AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs $) {
        this.autoscalingMetricSpecs = $.autoscalingMetricSpecs;
        this.machineSpec = $.machineSpec;
        this.maxReplicaCount = $.maxReplicaCount;
        this.minReplicaCount = $.minReplicaCount;
        this.requiredReplicaCount = $.requiredReplicaCount;
        this.spot = $.spot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs $;

        public Builder() {
            $ = new AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs();
        }

        public Builder(AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs defaults) {
            $ = new AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscalingMetricSpecs The metric specifications that overrides a resource
         * utilization metric (CPU utilization, accelerator&#39;s duty cycle, and so on)
         * target value (default to 60 if not set). At most one entry is allowed per
         * metric.
         * If machine_spec.accelerator_count is
         * above 0, the autoscaling will be based on both CPU utilization and
         * accelerator&#39;s duty cycle metrics and scale up when either metrics exceeds
         * its target value while scale down if both metrics are under their target
         * value. The default target value is 60 for both metrics.
         * If machine_spec.accelerator_count is
         * 0, the autoscaling will be based on CPU utilization metric only with
         * default target value 60 if not explicitly set.
         * For example, in the case of Online Prediction, if you want to override
         * target CPU utilization to 80, you should set
         * autoscaling_metric_specs.metric_name
         * to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
         * autoscaling_metric_specs.target to `80`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingMetricSpecs(@Nullable Output<List<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs>> autoscalingMetricSpecs) {
            $.autoscalingMetricSpecs = autoscalingMetricSpecs;
            return this;
        }

        /**
         * @param autoscalingMetricSpecs The metric specifications that overrides a resource
         * utilization metric (CPU utilization, accelerator&#39;s duty cycle, and so on)
         * target value (default to 60 if not set). At most one entry is allowed per
         * metric.
         * If machine_spec.accelerator_count is
         * above 0, the autoscaling will be based on both CPU utilization and
         * accelerator&#39;s duty cycle metrics and scale up when either metrics exceeds
         * its target value while scale down if both metrics are under their target
         * value. The default target value is 60 for both metrics.
         * If machine_spec.accelerator_count is
         * 0, the autoscaling will be based on CPU utilization metric only with
         * default target value 60 if not explicitly set.
         * For example, in the case of Online Prediction, if you want to override
         * target CPU utilization to 80, you should set
         * autoscaling_metric_specs.metric_name
         * to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
         * autoscaling_metric_specs.target to `80`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingMetricSpecs(List<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs> autoscalingMetricSpecs) {
            return autoscalingMetricSpecs(Output.of(autoscalingMetricSpecs));
        }

        /**
         * @param autoscalingMetricSpecs The metric specifications that overrides a resource
         * utilization metric (CPU utilization, accelerator&#39;s duty cycle, and so on)
         * target value (default to 60 if not set). At most one entry is allowed per
         * metric.
         * If machine_spec.accelerator_count is
         * above 0, the autoscaling will be based on both CPU utilization and
         * accelerator&#39;s duty cycle metrics and scale up when either metrics exceeds
         * its target value while scale down if both metrics are under their target
         * value. The default target value is 60 for both metrics.
         * If machine_spec.accelerator_count is
         * 0, the autoscaling will be based on CPU utilization metric only with
         * default target value 60 if not explicitly set.
         * For example, in the case of Online Prediction, if you want to override
         * target CPU utilization to 80, you should set
         * autoscaling_metric_specs.metric_name
         * to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
         * autoscaling_metric_specs.target to `80`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingMetricSpecs(AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs... autoscalingMetricSpecs) {
            return autoscalingMetricSpecs(List.of(autoscalingMetricSpecs));
        }

        /**
         * @param machineSpec Specification of a single machine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder machineSpec(Output<AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs> machineSpec) {
            $.machineSpec = machineSpec;
            return this;
        }

        /**
         * @param machineSpec Specification of a single machine.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder machineSpec(AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs machineSpec) {
            return machineSpec(Output.of(machineSpec));
        }

        /**
         * @param maxReplicaCount The maximum number of replicas that may be deployed on when the traffic
         * against it increases. If the requested value is too large, the deployment
         * will error, but if deployment succeeds then the ability to scale to that
         * many replicas is guaranteed (barring service outages). If traffic increases
         * beyond what its replicas at maximum may handle, a portion of the traffic
         * will be dropped. If this value is not provided, will use
         * min_replica_count as the default value.
         * The value of this field impacts the charge against Vertex CPU and GPU
         * quotas. Specifically, you will be charged for (max_replica_count *
         * number of cores in the selected machine type) and (max_replica_count *
         * number of GPUs per replica in the selected machine type).
         * 
         * @return builder
         * 
         */
        public Builder maxReplicaCount(@Nullable Output<Integer> maxReplicaCount) {
            $.maxReplicaCount = maxReplicaCount;
            return this;
        }

        /**
         * @param maxReplicaCount The maximum number of replicas that may be deployed on when the traffic
         * against it increases. If the requested value is too large, the deployment
         * will error, but if deployment succeeds then the ability to scale to that
         * many replicas is guaranteed (barring service outages). If traffic increases
         * beyond what its replicas at maximum may handle, a portion of the traffic
         * will be dropped. If this value is not provided, will use
         * min_replica_count as the default value.
         * The value of this field impacts the charge against Vertex CPU and GPU
         * quotas. Specifically, you will be charged for (max_replica_count *
         * number of cores in the selected machine type) and (max_replica_count *
         * number of GPUs per replica in the selected machine type).
         * 
         * @return builder
         * 
         */
        public Builder maxReplicaCount(Integer maxReplicaCount) {
            return maxReplicaCount(Output.of(maxReplicaCount));
        }

        /**
         * @param minReplicaCount The minimum number of machine replicas that will be always deployed on.
         * This value must be greater than or equal to 1.
         * If traffic increases, it may dynamically be deployed onto more replicas,
         * and as traffic decreases, some of these extra replicas may be freed.
         * 
         * @return builder
         * 
         */
        public Builder minReplicaCount(Output<Integer> minReplicaCount) {
            $.minReplicaCount = minReplicaCount;
            return this;
        }

        /**
         * @param minReplicaCount The minimum number of machine replicas that will be always deployed on.
         * This value must be greater than or equal to 1.
         * If traffic increases, it may dynamically be deployed onto more replicas,
         * and as traffic decreases, some of these extra replicas may be freed.
         * 
         * @return builder
         * 
         */
        public Builder minReplicaCount(Integer minReplicaCount) {
            return minReplicaCount(Output.of(minReplicaCount));
        }

        /**
         * @param requiredReplicaCount Number of required available replicas for the deployment to succeed.
         * This field is only needed when partial deployment/mutation is
         * desired. If set, the deploy/mutate operation will succeed once
         * available_replica_count reaches required_replica_count, and the rest of
         * the replicas will be retried. If not set, the default
         * required_replica_count will be min_replica_count.
         * 
         * @return builder
         * 
         */
        public Builder requiredReplicaCount(@Nullable Output<Integer> requiredReplicaCount) {
            $.requiredReplicaCount = requiredReplicaCount;
            return this;
        }

        /**
         * @param requiredReplicaCount Number of required available replicas for the deployment to succeed.
         * This field is only needed when partial deployment/mutation is
         * desired. If set, the deploy/mutate operation will succeed once
         * available_replica_count reaches required_replica_count, and the rest of
         * the replicas will be retried. If not set, the default
         * required_replica_count will be min_replica_count.
         * 
         * @return builder
         * 
         */
        public Builder requiredReplicaCount(Integer requiredReplicaCount) {
            return requiredReplicaCount(Output.of(requiredReplicaCount));
        }

        /**
         * @param spot If true, schedule the deployment workload on [spot
         * VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
         * 
         * @return builder
         * 
         */
        public Builder spot(@Nullable Output<Boolean> spot) {
            $.spot = spot;
            return this;
        }

        /**
         * @param spot If true, schedule the deployment workload on [spot
         * VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
         * 
         * @return builder
         * 
         */
        public Builder spot(Boolean spot) {
            return spot(Output.of(spot));
        }

        public AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs build() {
            if ($.machineSpec == null) {
                throw new MissingRequiredPropertyException("AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs", "machineSpec");
            }
            if ($.minReplicaCount == null) {
                throw new MissingRequiredPropertyException("AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs", "minReplicaCount");
            }
            return $;
        }
    }

}
