// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigSignInEmailArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigSignInEmailArgs Empty = new ConfigSignInEmailArgs();

    /**
     * Whether email auth is enabled for the project or not.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether email auth is enabled for the project or not.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Whether a password is required for email auth or not. If true, both an email and
     * password must be provided to sign in. If false, a user may sign in via either
     * email/password or email link.
     * 
     */
    @Import(name="passwordRequired")
    private @Nullable Output<Boolean> passwordRequired;

    /**
     * @return Whether a password is required for email auth or not. If true, both an email and
     * password must be provided to sign in. If false, a user may sign in via either
     * email/password or email link.
     * 
     */
    public Optional<Output<Boolean>> passwordRequired() {
        return Optional.ofNullable(this.passwordRequired);
    }

    private ConfigSignInEmailArgs() {}

    private ConfigSignInEmailArgs(ConfigSignInEmailArgs $) {
        this.enabled = $.enabled;
        this.passwordRequired = $.passwordRequired;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigSignInEmailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigSignInEmailArgs $;

        public Builder() {
            $ = new ConfigSignInEmailArgs();
        }

        public Builder(ConfigSignInEmailArgs defaults) {
            $ = new ConfigSignInEmailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether email auth is enabled for the project or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether email auth is enabled for the project or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param passwordRequired Whether a password is required for email auth or not. If true, both an email and
         * password must be provided to sign in. If false, a user may sign in via either
         * email/password or email link.
         * 
         * @return builder
         * 
         */
        public Builder passwordRequired(@Nullable Output<Boolean> passwordRequired) {
            $.passwordRequired = passwordRequired;
            return this;
        }

        /**
         * @param passwordRequired Whether a password is required for email auth or not. If true, both an email and
         * password must be provided to sign in. If false, a user may sign in via either
         * email/password or email link.
         * 
         * @return builder
         * 
         */
        public Builder passwordRequired(Boolean passwordRequired) {
            return passwordRequired(Output.of(passwordRequired));
        }

        public ConfigSignInEmailArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
