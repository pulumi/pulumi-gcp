// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRegionalSecretVersionAccessPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRegionalSecretVersionAccessPlainArgs Empty = new GetRegionalSecretVersionAccessPlainArgs();

    /**
     * If set to &#39;true&#39;, the secret data is
     * expected to be base64-encoded string.
     * 
     */
    @Import(name="isSecretDataBase64")
    private @Nullable Boolean isSecretDataBase64;

    /**
     * @return If set to &#39;true&#39;, the secret data is
     * expected to be base64-encoded string.
     * 
     */
    public Optional<Boolean> isSecretDataBase64() {
        return Optional.ofNullable(this.isSecretDataBase64);
    }

    /**
     * Location of Secret Manager regional secret resource.
     * It must be provided when the `secret` field provided consists of only the name of the regional secret.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    /**
     * @return Location of Secret Manager regional secret resource.
     * It must be provided when the `secret` field provided consists of only the name of the regional secret.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The project to get the secret version for. If it
     * is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The project to get the secret version for. If it
     * is not provided, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The regional secret to get the secret version for.
     * This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
     * 
     */
    @Import(name="secret", required=true)
    private String secret;

    /**
     * @return The regional secret to get the secret version for.
     * This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
     * 
     */
    public String secret() {
        return this.secret;
    }

    /**
     * The version of the regional secret to get. If it
     * is not provided, the latest version is retrieved.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return The version of the regional secret to get. If it
     * is not provided, the latest version is retrieved.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetRegionalSecretVersionAccessPlainArgs() {}

    private GetRegionalSecretVersionAccessPlainArgs(GetRegionalSecretVersionAccessPlainArgs $) {
        this.isSecretDataBase64 = $.isSecretDataBase64;
        this.location = $.location;
        this.project = $.project;
        this.secret = $.secret;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegionalSecretVersionAccessPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegionalSecretVersionAccessPlainArgs $;

        public Builder() {
            $ = new GetRegionalSecretVersionAccessPlainArgs();
        }

        public Builder(GetRegionalSecretVersionAccessPlainArgs defaults) {
            $ = new GetRegionalSecretVersionAccessPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isSecretDataBase64 If set to &#39;true&#39;, the secret data is
         * expected to be base64-encoded string.
         * 
         * @return builder
         * 
         */
        public Builder isSecretDataBase64(@Nullable Boolean isSecretDataBase64) {
            $.isSecretDataBase64 = isSecretDataBase64;
            return this;
        }

        /**
         * @param location Location of Secret Manager regional secret resource.
         * It must be provided when the `secret` field provided consists of only the name of the regional secret.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param project The project to get the secret version for. If it
         * is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param secret The regional secret to get the secret version for.
         * This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param version The version of the regional secret to get. If it
         * is not provided, the latest version is retrieved.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetRegionalSecretVersionAccessPlainArgs build() {
            if ($.secret == null) {
                throw new MissingRequiredPropertyException("GetRegionalSecretVersionAccessPlainArgs", "secret");
            }
            return $;
        }
    }

}
