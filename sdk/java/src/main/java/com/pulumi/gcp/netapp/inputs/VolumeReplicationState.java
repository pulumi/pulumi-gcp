// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.netapp.inputs.VolumeReplicationDestinationVolumeParametersArgs;
import com.pulumi.gcp.netapp.inputs.VolumeReplicationHybridPeeringDetailArgs;
import com.pulumi.gcp.netapp.inputs.VolumeReplicationTransferStatArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeReplicationState extends com.pulumi.resources.ResourceArgs {

    public static final VolumeReplicationState Empty = new VolumeReplicationState();

    /**
     * Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    @Import(name="deleteDestinationVolume")
    private @Nullable Output<Boolean> deleteDestinationVolume;

    public Optional<Output<Boolean>> deleteDestinationVolume() {
        return Optional.ofNullable(this.deleteDestinationVolume);
    }

    /**
     * An description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    @Import(name="destinationVolume")
    private @Nullable Output<String> destinationVolume;

    /**
     * @return Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    public Optional<Output<String>> destinationVolume() {
        return Optional.ofNullable(this.destinationVolume);
    }

    /**
     * Destination volume parameters.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationVolumeParameters")
    private @Nullable Output<VolumeReplicationDestinationVolumeParametersArgs> destinationVolumeParameters;

    /**
     * @return Destination volume parameters.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VolumeReplicationDestinationVolumeParametersArgs>> destinationVolumeParameters() {
        return Optional.ofNullable(this.destinationVolumeParameters);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     * 
     */
    @Import(name="forceStopping")
    private @Nullable Output<Boolean> forceStopping;

    /**
     * @return Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
     * currently receives an update and stopping the update might be undesirable. Set this parameter to true
     * to stop anyway. All data transferred to the destination will be discarded and content of destination
     * volume will remain at the state of the last successful update. Default is false.
     * 
     */
    public Optional<Output<Boolean>> forceStopping() {
        return Optional.ofNullable(this.forceStopping);
    }

    /**
     * Condition of the relationship. Can be one of the following:
     * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
     * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
     * 
     */
    @Import(name="healthy")
    private @Nullable Output<Boolean> healthy;

    /**
     * @return Condition of the relationship. Can be one of the following:
     * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
     * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
     * 
     */
    public Optional<Output<Boolean>> healthy() {
        return Optional.ofNullable(this.healthy);
    }

    /**
     * HybridPeeringDetails contains details about the hybrid peering.
     * Structure is documented below.
     * 
     */
    @Import(name="hybridPeeringDetails")
    private @Nullable Output<List<VolumeReplicationHybridPeeringDetailArgs>> hybridPeeringDetails;

    /**
     * @return HybridPeeringDetails contains details about the hybrid peering.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VolumeReplicationHybridPeeringDetailArgs>>> hybridPeeringDetails() {
        return Optional.ofNullable(this.hybridPeeringDetails);
    }

    /**
     * Hybrid replication type.
     * 
     */
    @Import(name="hybridReplicationType")
    private @Nullable Output<String> hybridReplicationType;

    /**
     * @return Hybrid replication type.
     * 
     */
    public Optional<Output<String>> hybridReplicationType() {
        return Optional.ofNullable(this.hybridReplicationType);
    }

    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of region for this resource. The resource needs to be created in the region of the destination volume.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Name of region for this resource. The resource needs to be created in the region of the destination volume.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
     * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
     * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
     * currently receives an update. Updated every 5 minutes.
     * 
     */
    @Import(name="mirrorState")
    private @Nullable Output<String> mirrorState;

    /**
     * @return Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
     * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
     * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
     * currently receives an update. Updated every 5 minutes.
     * 
     */
    public Optional<Output<String>> mirrorState() {
        return Optional.ofNullable(this.mirrorState);
    }

    /**
     * The name of the replication. Needs to be unique per location.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the replication. Needs to be unique per location.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     * 
     */
    @Import(name="replicationEnabled")
    private @Nullable Output<Boolean> replicationEnabled;

    /**
     * @return Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
     * and act independently from the source volume.
     * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
     * done to the destination volume with the content of the source volume.
     * 
     */
    public Optional<Output<Boolean>> replicationEnabled() {
        return Optional.ofNullable(this.replicationEnabled);
    }

    /**
     * Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     * 
     */
    @Import(name="replicationSchedule")
    private @Nullable Output<String> replicationSchedule;

    /**
     * @return Specifies the replication interval.
     * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
     * 
     */
    public Optional<Output<String>> replicationSchedule() {
        return Optional.ofNullable(this.replicationSchedule);
    }

    /**
     * Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
     * the source or destination volume. For resume and revert and resume operations it is critical to understand
     * which volume is the source volume, since it will overwrite changes done to the destination volume.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
     * the source or destination volume. For resume and revert and resume operations it is critical to understand
     * which volume is the source volume, since it will overwrite changes done to the destination volume.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    @Import(name="sourceVolume")
    private @Nullable Output<String> sourceVolume;

    /**
     * @return Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
     * 
     */
    public Optional<Output<String>> sourceVolume() {
        return Optional.ofNullable(this.sourceVolume);
    }

    /**
     * Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * State details of the replication resource.
     * 
     */
    @Import(name="stateDetails")
    private @Nullable Output<String> stateDetails;

    /**
     * @return State details of the replication resource.
     * 
     */
    public Optional<Output<String>> stateDetails() {
        return Optional.ofNullable(this.stateDetails);
    }

    /**
     * Replication transfer statistics. All statistics are updated every 5 minutes.
     * Structure is documented below.
     * 
     */
    @Import(name="transferStats")
    private @Nullable Output<List<VolumeReplicationTransferStatArgs>> transferStats;

    /**
     * @return Replication transfer statistics. All statistics are updated every 5 minutes.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<VolumeReplicationTransferStatArgs>>> transferStats() {
        return Optional.ofNullable(this.transferStats);
    }

    /**
     * The name of the existing source volume.
     * 
     */
    @Import(name="volumeName")
    private @Nullable Output<String> volumeName;

    /**
     * @return The name of the existing source volume.
     * 
     */
    public Optional<Output<String>> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    @Import(name="waitForMirror")
    private @Nullable Output<Boolean> waitForMirror;

    public Optional<Output<Boolean>> waitForMirror() {
        return Optional.ofNullable(this.waitForMirror);
    }

    private VolumeReplicationState() {}

    private VolumeReplicationState(VolumeReplicationState $) {
        this.createTime = $.createTime;
        this.deleteDestinationVolume = $.deleteDestinationVolume;
        this.description = $.description;
        this.destinationVolume = $.destinationVolume;
        this.destinationVolumeParameters = $.destinationVolumeParameters;
        this.effectiveLabels = $.effectiveLabels;
        this.forceStopping = $.forceStopping;
        this.healthy = $.healthy;
        this.hybridPeeringDetails = $.hybridPeeringDetails;
        this.hybridReplicationType = $.hybridReplicationType;
        this.labels = $.labels;
        this.location = $.location;
        this.mirrorState = $.mirrorState;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.replicationEnabled = $.replicationEnabled;
        this.replicationSchedule = $.replicationSchedule;
        this.role = $.role;
        this.sourceVolume = $.sourceVolume;
        this.state = $.state;
        this.stateDetails = $.stateDetails;
        this.transferStats = $.transferStats;
        this.volumeName = $.volumeName;
        this.waitForMirror = $.waitForMirror;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeReplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeReplicationState $;

        public Builder() {
            $ = new VolumeReplicationState();
        }

        public Builder(VolumeReplicationState defaults) {
            $ = new VolumeReplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Create time of the active directory. A timestamp in RFC3339 UTC &#34;Zulu&#34; format. Examples: &#34;2023-06-22T09:13:01.617Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        public Builder deleteDestinationVolume(@Nullable Output<Boolean> deleteDestinationVolume) {
            $.deleteDestinationVolume = deleteDestinationVolume;
            return this;
        }

        public Builder deleteDestinationVolume(Boolean deleteDestinationVolume) {
            return deleteDestinationVolume(Output.of(deleteDestinationVolume));
        }

        /**
         * @param description An description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationVolume Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
         * 
         * @return builder
         * 
         */
        public Builder destinationVolume(@Nullable Output<String> destinationVolume) {
            $.destinationVolume = destinationVolume;
            return this;
        }

        /**
         * @param destinationVolume Full resource name of destination volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
         * 
         * @return builder
         * 
         */
        public Builder destinationVolume(String destinationVolume) {
            return destinationVolume(Output.of(destinationVolume));
        }

        /**
         * @param destinationVolumeParameters Destination volume parameters.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationVolumeParameters(@Nullable Output<VolumeReplicationDestinationVolumeParametersArgs> destinationVolumeParameters) {
            $.destinationVolumeParameters = destinationVolumeParameters;
            return this;
        }

        /**
         * @param destinationVolumeParameters Destination volume parameters.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationVolumeParameters(VolumeReplicationDestinationVolumeParametersArgs destinationVolumeParameters) {
            return destinationVolumeParameters(Output.of(destinationVolumeParameters));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param forceStopping Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
         * currently receives an update and stopping the update might be undesirable. Set this parameter to true
         * to stop anyway. All data transferred to the destination will be discarded and content of destination
         * volume will remain at the state of the last successful update. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder forceStopping(@Nullable Output<Boolean> forceStopping) {
            $.forceStopping = forceStopping;
            return this;
        }

        /**
         * @param forceStopping Only replications with mirror_state=MIRRORED can be stopped. A replication in mirror_state=TRANSFERRING
         * currently receives an update and stopping the update might be undesirable. Set this parameter to true
         * to stop anyway. All data transferred to the destination will be discarded and content of destination
         * volume will remain at the state of the last successful update. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder forceStopping(Boolean forceStopping) {
            return forceStopping(Output.of(forceStopping));
        }

        /**
         * @param healthy Condition of the relationship. Can be one of the following:
         * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
         * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
         * 
         * @return builder
         * 
         */
        public Builder healthy(@Nullable Output<Boolean> healthy) {
            $.healthy = healthy;
            return this;
        }

        /**
         * @param healthy Condition of the relationship. Can be one of the following:
         * - true: The replication relationship is healthy. It has not missed the most recent scheduled transfer.
         * - false: The replication relationship is not healthy. It has missed the most recent scheduled transfer.
         * 
         * @return builder
         * 
         */
        public Builder healthy(Boolean healthy) {
            return healthy(Output.of(healthy));
        }

        /**
         * @param hybridPeeringDetails HybridPeeringDetails contains details about the hybrid peering.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hybridPeeringDetails(@Nullable Output<List<VolumeReplicationHybridPeeringDetailArgs>> hybridPeeringDetails) {
            $.hybridPeeringDetails = hybridPeeringDetails;
            return this;
        }

        /**
         * @param hybridPeeringDetails HybridPeeringDetails contains details about the hybrid peering.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hybridPeeringDetails(List<VolumeReplicationHybridPeeringDetailArgs> hybridPeeringDetails) {
            return hybridPeeringDetails(Output.of(hybridPeeringDetails));
        }

        /**
         * @param hybridPeeringDetails HybridPeeringDetails contains details about the hybrid peering.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder hybridPeeringDetails(VolumeReplicationHybridPeeringDetailArgs... hybridPeeringDetails) {
            return hybridPeeringDetails(List.of(hybridPeeringDetails));
        }

        /**
         * @param hybridReplicationType Hybrid replication type.
         * 
         * @return builder
         * 
         */
        public Builder hybridReplicationType(@Nullable Output<String> hybridReplicationType) {
            $.hybridReplicationType = hybridReplicationType;
            return this;
        }

        /**
         * @param hybridReplicationType Hybrid replication type.
         * 
         * @return builder
         * 
         */
        public Builder hybridReplicationType(String hybridReplicationType) {
            return hybridReplicationType(Output.of(hybridReplicationType));
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Name of region for this resource. The resource needs to be created in the region of the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Name of region for this resource. The resource needs to be created in the region of the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mirrorState Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
         * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
         * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
         * currently receives an update. Updated every 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder mirrorState(@Nullable Output<String> mirrorState) {
            $.mirrorState = mirrorState;
            return this;
        }

        /**
         * @param mirrorState Indicates the state of the mirror between source and destination volumes. Depending on the amount of data
         * in your source volume, PREPARING phase can take hours or days. mirrorState = MIRRORED indicates your baseline
         * transfer ended and destination volume became accessible read-only. TRANSFERRING means a MIRRORED volume
         * currently receives an update. Updated every 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder mirrorState(String mirrorState) {
            return mirrorState(Output.of(mirrorState));
        }

        /**
         * @param name The name of the replication. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the replication. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param replicationEnabled Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
         * and act independently from the source volume.
         * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
         * done to the destination volume with the content of the source volume.
         * 
         * @return builder
         * 
         */
        public Builder replicationEnabled(@Nullable Output<Boolean> replicationEnabled) {
            $.replicationEnabled = replicationEnabled;
            return this;
        }

        /**
         * @param replicationEnabled Set to false to stop/break the mirror. Stopping the mirror makes the destination volume read-write
         * and act independently from the source volume.
         * Set to true to enable/resume the mirror. WARNING: Resuming a mirror overwrites any changes
         * done to the destination volume with the content of the source volume.
         * 
         * @return builder
         * 
         */
        public Builder replicationEnabled(Boolean replicationEnabled) {
            return replicationEnabled(Output.of(replicationEnabled));
        }

        /**
         * @param replicationSchedule Specifies the replication interval.
         * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
         * 
         * @return builder
         * 
         */
        public Builder replicationSchedule(@Nullable Output<String> replicationSchedule) {
            $.replicationSchedule = replicationSchedule;
            return this;
        }

        /**
         * @param replicationSchedule Specifies the replication interval.
         * Possible values are: `EVERY_10_MINUTES`, `HOURLY`, `DAILY`.
         * 
         * @return builder
         * 
         */
        public Builder replicationSchedule(String replicationSchedule) {
            return replicationSchedule(Output.of(replicationSchedule));
        }

        /**
         * @param role Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
         * the source or destination volume. For resume and revert and resume operations it is critical to understand
         * which volume is the source volume, since it will overwrite changes done to the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Reverting a replication can swap source and destination volume roles. This field indicates if the `location` hosts
         * the source or destination volume. For resume and revert and resume operations it is critical to understand
         * which volume is the source volume, since it will overwrite changes done to the destination volume.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param sourceVolume Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
         * 
         * @return builder
         * 
         */
        public Builder sourceVolume(@Nullable Output<String> sourceVolume) {
            $.sourceVolume = sourceVolume;
            return this;
        }

        /**
         * @param sourceVolume Full resource name of source volume with format: `projects/{{project}}/locations/{{location}}/volumes/{{volumeId}}`
         * 
         * @return builder
         * 
         */
        public Builder sourceVolume(String sourceVolume) {
            return sourceVolume(Output.of(sourceVolume));
        }

        /**
         * @param state Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Indicates the state of replication resource. State of the mirror itself is indicated in mirrorState.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateDetails State details of the replication resource.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(@Nullable Output<String> stateDetails) {
            $.stateDetails = stateDetails;
            return this;
        }

        /**
         * @param stateDetails State details of the replication resource.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(String stateDetails) {
            return stateDetails(Output.of(stateDetails));
        }

        /**
         * @param transferStats Replication transfer statistics. All statistics are updated every 5 minutes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder transferStats(@Nullable Output<List<VolumeReplicationTransferStatArgs>> transferStats) {
            $.transferStats = transferStats;
            return this;
        }

        /**
         * @param transferStats Replication transfer statistics. All statistics are updated every 5 minutes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder transferStats(List<VolumeReplicationTransferStatArgs> transferStats) {
            return transferStats(Output.of(transferStats));
        }

        /**
         * @param transferStats Replication transfer statistics. All statistics are updated every 5 minutes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder transferStats(VolumeReplicationTransferStatArgs... transferStats) {
            return transferStats(List.of(transferStats));
        }

        /**
         * @param volumeName The name of the existing source volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeName(@Nullable Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName The name of the existing source volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        public Builder waitForMirror(@Nullable Output<Boolean> waitForMirror) {
            $.waitForMirror = waitForMirror;
            return this;
        }

        public Builder waitForMirror(Boolean waitForMirror) {
            return waitForMirror(Output.of(waitForMirror));
        }

        public VolumeReplicationState build() {
            return $;
        }
    }

}
