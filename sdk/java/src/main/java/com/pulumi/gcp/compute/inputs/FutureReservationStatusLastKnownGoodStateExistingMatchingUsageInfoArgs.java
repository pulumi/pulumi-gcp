// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs Empty = new FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs();

    /**
     * Count representing minimum(FR totalCount, matching_reserved_capacity+matching_unreserved_instances).
     * 
     */
    @Import(name="count")
    private @Nullable Output<String> count;

    /**
     * @return Count representing minimum(FR totalCount, matching_reserved_capacity+matching_unreserved_instances).
     * 
     */
    public Optional<Output<String>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Timestamp when the matching usage was calculated.
     * 
     */
    @Import(name="timeStamp")
    private @Nullable Output<String> timeStamp;

    /**
     * @return Timestamp when the matching usage was calculated.
     * 
     */
    public Optional<Output<String>> timeStamp() {
        return Optional.ofNullable(this.timeStamp);
    }

    private FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs() {}

    private FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs(FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs $) {
        this.count = $.count;
        this.timeStamp = $.timeStamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs $;

        public Builder() {
            $ = new FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs();
        }

        public Builder(FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs defaults) {
            $ = new FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Count representing minimum(FR totalCount, matching_reserved_capacity+matching_unreserved_instances).
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<String> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Count representing minimum(FR totalCount, matching_reserved_capacity+matching_unreserved_instances).
         * 
         * @return builder
         * 
         */
        public Builder count(String count) {
            return count(Output.of(count));
        }

        /**
         * @param timeStamp Timestamp when the matching usage was calculated.
         * 
         * @return builder
         * 
         */
        public Builder timeStamp(@Nullable Output<String> timeStamp) {
            $.timeStamp = timeStamp;
            return this;
        }

        /**
         * @param timeStamp Timestamp when the matching usage was calculated.
         * 
         * @return builder
         * 
         */
        public Builder timeStamp(String timeStamp) {
            return timeStamp(Output.of(timeStamp));
        }

        public FutureReservationStatusLastKnownGoodStateExistingMatchingUsageInfoArgs build() {
            return $;
        }
    }

}
