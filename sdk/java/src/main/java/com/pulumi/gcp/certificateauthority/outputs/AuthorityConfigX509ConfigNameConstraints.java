// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AuthorityConfigX509ConfigNameConstraints {
    /**
     * @return Indicates whether or not the name constraints are marked critical.
     * 
     */
    private Boolean critical;
    /**
     * @return Contains excluded DNS names. Any DNS name that can be
     * constructed by simply adding zero or more labels to
     * the left-hand side of the name satisfies the name constraint.
     * For example, `example.com`, `www.example.com`, `www.sub.example.com`
     * would satisfy `example.com` while `example1.com` does not.
     * 
     */
    private @Nullable List<String> excludedDnsNames;
    /**
     * @return Contains the excluded email addresses. The value can be a particular
     * email address, a hostname to indicate all email addresses on that host or
     * a domain with a leading period (e.g. `.example.com`) to indicate
     * all email addresses in that domain.
     * 
     */
    private @Nullable List<String> excludedEmailAddresses;
    /**
     * @return Contains the excluded IP ranges. For IPv4 addresses, the ranges
     * are expressed using CIDR notation as specified in RFC 4632.
     * For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
     * addresses.
     * 
     */
    private @Nullable List<String> excludedIpRanges;
    /**
     * @return Contains the excluded URIs that apply to the host part of the name.
     * The value can be a hostname or a domain with a
     * leading period (like `.example.com`)
     * 
     */
    private @Nullable List<String> excludedUris;
    /**
     * @return Contains permitted DNS names. Any DNS name that can be
     * constructed by simply adding zero or more labels to
     * the left-hand side of the name satisfies the name constraint.
     * For example, `example.com`, `www.example.com`, `www.sub.example.com`
     * would satisfy `example.com` while `example1.com` does not.
     * 
     */
    private @Nullable List<String> permittedDnsNames;
    /**
     * @return Contains the permitted email addresses. The value can be a particular
     * email address, a hostname to indicate all email addresses on that host or
     * a domain with a leading period (e.g. `.example.com`) to indicate
     * all email addresses in that domain.
     * 
     */
    private @Nullable List<String> permittedEmailAddresses;
    /**
     * @return Contains the permitted IP ranges. For IPv4 addresses, the ranges
     * are expressed using CIDR notation as specified in RFC 4632.
     * For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
     * addresses.
     * 
     */
    private @Nullable List<String> permittedIpRanges;
    /**
     * @return Contains the permitted URIs that apply to the host part of the name.
     * The value can be a hostname or a domain with a
     * leading period (like `.example.com`)
     * 
     */
    private @Nullable List<String> permittedUris;

    private AuthorityConfigX509ConfigNameConstraints() {}
    /**
     * @return Indicates whether or not the name constraints are marked critical.
     * 
     */
    public Boolean critical() {
        return this.critical;
    }
    /**
     * @return Contains excluded DNS names. Any DNS name that can be
     * constructed by simply adding zero or more labels to
     * the left-hand side of the name satisfies the name constraint.
     * For example, `example.com`, `www.example.com`, `www.sub.example.com`
     * would satisfy `example.com` while `example1.com` does not.
     * 
     */
    public List<String> excludedDnsNames() {
        return this.excludedDnsNames == null ? List.of() : this.excludedDnsNames;
    }
    /**
     * @return Contains the excluded email addresses. The value can be a particular
     * email address, a hostname to indicate all email addresses on that host or
     * a domain with a leading period (e.g. `.example.com`) to indicate
     * all email addresses in that domain.
     * 
     */
    public List<String> excludedEmailAddresses() {
        return this.excludedEmailAddresses == null ? List.of() : this.excludedEmailAddresses;
    }
    /**
     * @return Contains the excluded IP ranges. For IPv4 addresses, the ranges
     * are expressed using CIDR notation as specified in RFC 4632.
     * For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
     * addresses.
     * 
     */
    public List<String> excludedIpRanges() {
        return this.excludedIpRanges == null ? List.of() : this.excludedIpRanges;
    }
    /**
     * @return Contains the excluded URIs that apply to the host part of the name.
     * The value can be a hostname or a domain with a
     * leading period (like `.example.com`)
     * 
     */
    public List<String> excludedUris() {
        return this.excludedUris == null ? List.of() : this.excludedUris;
    }
    /**
     * @return Contains permitted DNS names. Any DNS name that can be
     * constructed by simply adding zero or more labels to
     * the left-hand side of the name satisfies the name constraint.
     * For example, `example.com`, `www.example.com`, `www.sub.example.com`
     * would satisfy `example.com` while `example1.com` does not.
     * 
     */
    public List<String> permittedDnsNames() {
        return this.permittedDnsNames == null ? List.of() : this.permittedDnsNames;
    }
    /**
     * @return Contains the permitted email addresses. The value can be a particular
     * email address, a hostname to indicate all email addresses on that host or
     * a domain with a leading period (e.g. `.example.com`) to indicate
     * all email addresses in that domain.
     * 
     */
    public List<String> permittedEmailAddresses() {
        return this.permittedEmailAddresses == null ? List.of() : this.permittedEmailAddresses;
    }
    /**
     * @return Contains the permitted IP ranges. For IPv4 addresses, the ranges
     * are expressed using CIDR notation as specified in RFC 4632.
     * For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
     * addresses.
     * 
     */
    public List<String> permittedIpRanges() {
        return this.permittedIpRanges == null ? List.of() : this.permittedIpRanges;
    }
    /**
     * @return Contains the permitted URIs that apply to the host part of the name.
     * The value can be a hostname or a domain with a
     * leading period (like `.example.com`)
     * 
     */
    public List<String> permittedUris() {
        return this.permittedUris == null ? List.of() : this.permittedUris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorityConfigX509ConfigNameConstraints defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean critical;
        private @Nullable List<String> excludedDnsNames;
        private @Nullable List<String> excludedEmailAddresses;
        private @Nullable List<String> excludedIpRanges;
        private @Nullable List<String> excludedUris;
        private @Nullable List<String> permittedDnsNames;
        private @Nullable List<String> permittedEmailAddresses;
        private @Nullable List<String> permittedIpRanges;
        private @Nullable List<String> permittedUris;
        public Builder() {}
        public Builder(AuthorityConfigX509ConfigNameConstraints defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.critical = defaults.critical;
    	      this.excludedDnsNames = defaults.excludedDnsNames;
    	      this.excludedEmailAddresses = defaults.excludedEmailAddresses;
    	      this.excludedIpRanges = defaults.excludedIpRanges;
    	      this.excludedUris = defaults.excludedUris;
    	      this.permittedDnsNames = defaults.permittedDnsNames;
    	      this.permittedEmailAddresses = defaults.permittedEmailAddresses;
    	      this.permittedIpRanges = defaults.permittedIpRanges;
    	      this.permittedUris = defaults.permittedUris;
        }

        @CustomType.Setter
        public Builder critical(Boolean critical) {
            this.critical = Objects.requireNonNull(critical);
            return this;
        }
        @CustomType.Setter
        public Builder excludedDnsNames(@Nullable List<String> excludedDnsNames) {
            this.excludedDnsNames = excludedDnsNames;
            return this;
        }
        public Builder excludedDnsNames(String... excludedDnsNames) {
            return excludedDnsNames(List.of(excludedDnsNames));
        }
        @CustomType.Setter
        public Builder excludedEmailAddresses(@Nullable List<String> excludedEmailAddresses) {
            this.excludedEmailAddresses = excludedEmailAddresses;
            return this;
        }
        public Builder excludedEmailAddresses(String... excludedEmailAddresses) {
            return excludedEmailAddresses(List.of(excludedEmailAddresses));
        }
        @CustomType.Setter
        public Builder excludedIpRanges(@Nullable List<String> excludedIpRanges) {
            this.excludedIpRanges = excludedIpRanges;
            return this;
        }
        public Builder excludedIpRanges(String... excludedIpRanges) {
            return excludedIpRanges(List.of(excludedIpRanges));
        }
        @CustomType.Setter
        public Builder excludedUris(@Nullable List<String> excludedUris) {
            this.excludedUris = excludedUris;
            return this;
        }
        public Builder excludedUris(String... excludedUris) {
            return excludedUris(List.of(excludedUris));
        }
        @CustomType.Setter
        public Builder permittedDnsNames(@Nullable List<String> permittedDnsNames) {
            this.permittedDnsNames = permittedDnsNames;
            return this;
        }
        public Builder permittedDnsNames(String... permittedDnsNames) {
            return permittedDnsNames(List.of(permittedDnsNames));
        }
        @CustomType.Setter
        public Builder permittedEmailAddresses(@Nullable List<String> permittedEmailAddresses) {
            this.permittedEmailAddresses = permittedEmailAddresses;
            return this;
        }
        public Builder permittedEmailAddresses(String... permittedEmailAddresses) {
            return permittedEmailAddresses(List.of(permittedEmailAddresses));
        }
        @CustomType.Setter
        public Builder permittedIpRanges(@Nullable List<String> permittedIpRanges) {
            this.permittedIpRanges = permittedIpRanges;
            return this;
        }
        public Builder permittedIpRanges(String... permittedIpRanges) {
            return permittedIpRanges(List.of(permittedIpRanges));
        }
        @CustomType.Setter
        public Builder permittedUris(@Nullable List<String> permittedUris) {
            this.permittedUris = permittedUris;
            return this;
        }
        public Builder permittedUris(String... permittedUris) {
            return permittedUris(List.of(permittedUris));
        }
        public AuthorityConfigX509ConfigNameConstraints build() {
            final var o = new AuthorityConfigX509ConfigNameConstraints();
            o.critical = critical;
            o.excludedDnsNames = excludedDnsNames;
            o.excludedEmailAddresses = excludedEmailAddresses;
            o.excludedIpRanges = excludedIpRanges;
            o.excludedUris = excludedUris;
            o.permittedDnsNames = permittedDnsNames;
            o.permittedEmailAddresses = permittedEmailAddresses;
            o.permittedIpRanges = permittedIpRanges;
            o.permittedUris = permittedUris;
            return o;
        }
    }
}
