// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networksecurity.ServerTlsPolicyArgs;
import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyState;
import com.pulumi.gcp.networksecurity.outputs.ServerTlsPolicyMtlsPolicy;
import com.pulumi.gcp.networksecurity.outputs.ServerTlsPolicyServerCertificate;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### Network Security Server Tls Policy Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicy;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicyArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyServerCertificateArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyMtlsPolicyArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new ServerTlsPolicy(&#34;default&#34;, ServerTlsPolicyArgs.builder()        
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .description(&#34;my description&#34;)
 *             .allowOpen(&#34;false&#34;)
 *             .serverCertificate(ServerTlsPolicyServerCertificateArgs.builder()
 *                 .certificateProviderInstance(ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs.builder()
 *                     .pluginInstance(&#34;google_cloud_private_spiffe&#34;)
 *                     .build())
 *                 .build())
 *             .mtlsPolicy(ServerTlsPolicyMtlsPolicyArgs.builder()
 *                 .clientValidationCas(                
 *                     ServerTlsPolicyMtlsPolicyClientValidationCaArgs.builder()
 *                         .grpcEndpoint(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs.builder()
 *                             .targetUri(&#34;unix:mypath&#34;)
 *                             .build())
 *                         .build(),
 *                     ServerTlsPolicyMtlsPolicyClientValidationCaArgs.builder()
 *                         .grpcEndpoint(ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs.builder()
 *                             .targetUri(&#34;unix:abc/mypath&#34;)
 *                             .build())
 *                         .build(),
 *                     ServerTlsPolicyMtlsPolicyClientValidationCaArgs.builder()
 *                         .certificateProviderInstance(ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs.builder()
 *                             .pluginInstance(&#34;google_cloud_private_spiffe&#34;)
 *                             .build())
 *                         .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Network Security Server Tls Policy Advanced
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicy;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicyArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyMtlsPolicyArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new ServerTlsPolicy(&#34;default&#34;, ServerTlsPolicyArgs.builder()        
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .description(&#34;my description&#34;)
 *             .location(&#34;global&#34;)
 *             .allowOpen(&#34;false&#34;)
 *             .mtlsPolicy(ServerTlsPolicyMtlsPolicyArgs.builder()
 *                 .clientValidationMode(&#34;ALLOW_INVALID_OR_MISSING_CLIENT_CERT&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Network Security Server Tls Policy Server Cert
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicy;
 * import com.pulumi.gcp.networksecurity.ServerTlsPolicyArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyServerCertificateArgs;
 * import com.pulumi.gcp.networksecurity.inputs.ServerTlsPolicyServerCertificateGrpcEndpointArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new ServerTlsPolicy(&#34;default&#34;, ServerTlsPolicyArgs.builder()        
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .description(&#34;my description&#34;)
 *             .location(&#34;global&#34;)
 *             .allowOpen(&#34;false&#34;)
 *             .serverCertificate(ServerTlsPolicyServerCertificateArgs.builder()
 *                 .grpcEndpoint(ServerTlsPolicyServerCertificateGrpcEndpointArgs.builder()
 *                     .targetUri(&#34;unix:mypath&#34;)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ServerTlsPolicy can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy default projects/{{project}}/locations/{{location}}/serverTlsPolicies/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy")
public class ServerTlsPolicy extends com.pulumi.resources.CustomResource {
    /**
     * This field applies only for Traffic Director policies. It is must be set to false for external HTTPS load balancer policies.
     * Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if allowOpen and mtlsPolicy are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
     * Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.
     * 
     */
    @Export(name="allowOpen", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowOpen;

    /**
     * @return This field applies only for Traffic Director policies. It is must be set to false for external HTTPS load balancer policies.
     * Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if allowOpen and mtlsPolicy are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
     * Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.
     * 
     */
    public Output<Optional<Boolean>> allowOpen() {
        return Codegen.optional(this.allowOpen);
    }
    /**
     * Time the ServerTlsPolicy was created in UTC.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the ServerTlsPolicy was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Set of label tags associated with the ServerTlsPolicy resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the ServerTlsPolicy resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the server tls policy.
     * The default value is `global`.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the server tls policy.
     * The default value is `global`.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * This field is required if the policy is used with external HTTPS load balancers. This field can be empty for Traffic Director.
     * Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If allowOpen and mtlsPolicy are set, server allows both plain text and mTLS connections.
     * Structure is documented below.
     * 
     */
    @Export(name="mtlsPolicy", refs={ServerTlsPolicyMtlsPolicy.class}, tree="[0]")
    private Output</* @Nullable */ ServerTlsPolicyMtlsPolicy> mtlsPolicy;

    /**
     * @return This field is required if the policy is used with external HTTPS load balancers. This field can be empty for Traffic Director.
     * Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If allowOpen and mtlsPolicy are set, server allows both plain text and mTLS connections.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ServerTlsPolicyMtlsPolicy>> mtlsPolicy() {
        return Codegen.optional(this.mtlsPolicy);
    }
    /**
     * Name of the ServerTlsPolicy resource.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the ServerTlsPolicy resource.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.
     * Structure is documented below.
     * 
     */
    @Export(name="serverCertificate", refs={ServerTlsPolicyServerCertificate.class}, tree="[0]")
    private Output</* @Nullable */ ServerTlsPolicyServerCertificate> serverCertificate;

    /**
     * @return Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.
     * Structure is documented below.
     * 
     */
    public Output<Optional<ServerTlsPolicyServerCertificate>> serverCertificate() {
        return Codegen.optional(this.serverCertificate);
    }
    /**
     * Time the ServerTlsPolicy was updated in UTC.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the ServerTlsPolicy was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServerTlsPolicy(String name) {
        this(name, ServerTlsPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServerTlsPolicy(String name, @Nullable ServerTlsPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServerTlsPolicy(String name, @Nullable ServerTlsPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy", name, args == null ? ServerTlsPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServerTlsPolicy(String name, Output<String> id, @Nullable ServerTlsPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networksecurity/serverTlsPolicy:ServerTlsPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServerTlsPolicy get(String name, Output<String> id, @Nullable ServerTlsPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServerTlsPolicy(name, id, state, options);
    }
}
