// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectState Empty = new ProjectState();

    /**
     * The GCP project display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The GCP project display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The number of the google project that firebase is enabled on.
     * 
     */
    @Import(name="projectNumber")
    private @Nullable Output<String> projectNumber;

    /**
     * @return The number of the google project that firebase is enabled on.
     * 
     */
    public Optional<Output<String>> projectNumber() {
        return Optional.ofNullable(this.projectNumber);
    }

    private ProjectState() {}

    private ProjectState(ProjectState $) {
        this.displayName = $.displayName;
        this.project = $.project;
        this.projectNumber = $.projectNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectState $;

        public Builder() {
            $ = new ProjectState();
        }

        public Builder(ProjectState defaults) {
            $ = new ProjectState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The GCP project display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The GCP project display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectNumber The number of the google project that firebase is enabled on.
         * 
         * @return builder
         * 
         */
        public Builder projectNumber(@Nullable Output<String> projectNumber) {
            $.projectNumber = projectNumber;
            return this;
        }

        /**
         * @param projectNumber The number of the google project that firebase is enabled on.
         * 
         * @return builder
         * 
         */
        public Builder projectNumber(String projectNumber) {
            return projectNumber(Output.of(projectNumber));
        }

        public ProjectState build() {
            return $;
        }
    }

}
