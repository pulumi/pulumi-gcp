// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.workbench.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceGceSetupNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceGceSetupNetworkInterfaceArgs Empty = new InstanceGceSetupNetworkInterfaceArgs();

    /**
     * Optional. The name of the VPC that this VM instance is in.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Optional. The name of the VPC that this VM instance is in.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Optional. The type of vNIC to be used on this interface. This
     * may be gVNIC or VirtioNet.
     * Possible values are: `VIRTIO_NET`, `GVNIC`.
     * 
     */
    @Import(name="nicType")
    private @Nullable Output<String> nicType;

    /**
     * @return Optional. The type of vNIC to be used on this interface. This
     * may be gVNIC or VirtioNet.
     * Possible values are: `VIRTIO_NET`, `GVNIC`.
     * 
     */
    public Optional<Output<String>> nicType() {
        return Optional.ofNullable(this.nicType);
    }

    /**
     * Optional. The name of the subnet that this VM instance is in.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return Optional. The name of the subnet that this VM instance is in.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    private InstanceGceSetupNetworkInterfaceArgs() {}

    private InstanceGceSetupNetworkInterfaceArgs(InstanceGceSetupNetworkInterfaceArgs $) {
        this.network = $.network;
        this.nicType = $.nicType;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceGceSetupNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceGceSetupNetworkInterfaceArgs $;

        public Builder() {
            $ = new InstanceGceSetupNetworkInterfaceArgs();
        }

        public Builder(InstanceGceSetupNetworkInterfaceArgs defaults) {
            $ = new InstanceGceSetupNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param network Optional. The name of the VPC that this VM instance is in.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Optional. The name of the VPC that this VM instance is in.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param nicType Optional. The type of vNIC to be used on this interface. This
         * may be gVNIC or VirtioNet.
         * Possible values are: `VIRTIO_NET`, `GVNIC`.
         * 
         * @return builder
         * 
         */
        public Builder nicType(@Nullable Output<String> nicType) {
            $.nicType = nicType;
            return this;
        }

        /**
         * @param nicType Optional. The type of vNIC to be used on this interface. This
         * may be gVNIC or VirtioNet.
         * Possible values are: `VIRTIO_NET`, `GVNIC`.
         * 
         * @return builder
         * 
         */
        public Builder nicType(String nicType) {
            return nicType(Output.of(nicType));
        }

        /**
         * @param subnet Optional. The name of the subnet that this VM instance is in.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet Optional. The name of the subnet that this VM instance is in.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public InstanceGceSetupNetworkInterfaceArgs build() {
            return $;
        }
    }

}
