// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigquery.inputs.ReservationAutoscaleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservationArgs Empty = new ReservationArgs();

    /**
     * The configuration parameters for the auto scaling feature.
     * Structure is documented below.
     * 
     */
    @Import(name="autoscale")
    private @Nullable Output<ReservationAutoscaleArgs> autoscale;

    /**
     * @return The configuration parameters for the auto scaling feature.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ReservationAutoscaleArgs>> autoscale() {
        return Optional.ofNullable(this.autoscale);
    }

    /**
     * Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    @Import(name="concurrency")
    private @Nullable Output<Integer> concurrency;

    /**
     * @return Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    public Optional<Output<Integer>> concurrency() {
        return Optional.ofNullable(this.concurrency);
    }

    /**
     * The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     * 
     */
    @Import(name="edition")
    private @Nullable Output<String> edition;

    /**
     * @return The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     * 
     */
    public Optional<Output<String>> edition() {
        return Optional.ofNullable(this.edition);
    }

    /**
     * If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    @Import(name="ignoreIdleSlots")
    private @Nullable Output<Boolean> ignoreIdleSlots;

    /**
     * @return If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    public Optional<Output<Boolean>> ignoreIdleSlots() {
        return Optional.ofNullable(this.ignoreIdleSlots);
    }

    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
     * (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won&#39;t use
     * more than the specified number of slots, even if there is demand and supply (from idle
     * slots). NOTE: capping a reservation&#39;s idle slot usage is best effort and its usage may
     * exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
     * for the additional added slots), it will never exceed the maxSlots - baseline.
     * This field must be set together with the scalingMode enum value, otherwise the request
     * will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
     * must be unset. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
     * output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
     * will represent the current slots from autoscaler excluding idle slots. For example,
     * if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
     * autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
     * between 0 and 1000.
     * If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
     * usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
     * autoscaler.current_slots will not be higher than 700.
     * If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
     * autoscaler field will be null.
     * If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
     * aligned with the scalingMode enum value.(See details in ScalingMode comments).
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Please note, the maxSlots is for user to manage the part of slots greater than the
     * baseline. Therefore, we don&#39;t allow users to set maxSlots smaller or equal to the
     * baseline as it will not be meaningful. If the field is present and
     * slotCapacity&gt;=maxSlots, requests will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
     * maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
     * feature.
     * 
     */
    @Import(name="maxSlots")
    private @Nullable Output<Integer> maxSlots;

    /**
     * @return The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
     * (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won&#39;t use
     * more than the specified number of slots, even if there is demand and supply (from idle
     * slots). NOTE: capping a reservation&#39;s idle slot usage is best effort and its usage may
     * exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
     * for the additional added slots), it will never exceed the maxSlots - baseline.
     * This field must be set together with the scalingMode enum value, otherwise the request
     * will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
     * must be unset. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
     * output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
     * will represent the current slots from autoscaler excluding idle slots. For example,
     * if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
     * autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
     * between 0 and 1000.
     * If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
     * usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
     * autoscaler.current_slots will not be higher than 700.
     * If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
     * autoscaler field will be null.
     * If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
     * aligned with the scalingMode enum value.(See details in ScalingMode comments).
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Please note, the maxSlots is for user to manage the part of slots greater than the
     * baseline. Therefore, we don&#39;t allow users to set maxSlots smaller or equal to the
     * baseline as it will not be meaningful. If the field is present and
     * slotCapacity&gt;=maxSlots, requests will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
     * maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
     * feature.
     * 
     */
    public Optional<Output<Integer>> maxSlots() {
        return Optional.ofNullable(this.maxSlots);
    }

    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The scaling mode for the reservation. If the field is present but maxSlots is not present,
     * requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Enum values:
     * `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
     * `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
     * not use any idle slots even if there may be some available. The upper limit that autoscaling
     * can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
     * and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
     * set to true. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
     * reservations or from unassigned commitments. If no idle slots are available it will not scale
     * up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
     * it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
     * capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
     * IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
     * reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
     * 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
     * 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
     * scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
     * `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
     * contributed by other reservations or from unassigned commitments first. If no idle slots are
     * available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
     * reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
     * if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
     * slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
     * available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
     * autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
     * 
     */
    @Import(name="scalingMode")
    private @Nullable Output<String> scalingMode;

    /**
     * @return The scaling mode for the reservation. If the field is present but maxSlots is not present,
     * requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Enum values:
     * `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
     * `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
     * not use any idle slots even if there may be some available. The upper limit that autoscaling
     * can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
     * and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
     * set to true. Otherwise the request will be rejected with error code
     * google.rpc.Code.INVALID_ARGUMENT.
     * `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
     * reservations or from unassigned commitments. If no idle slots are available it will not scale
     * up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
     * it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
     * capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
     * IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
     * reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
     * 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
     * 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
     * scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
     * `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
     * contributed by other reservations or from unassigned commitments first. If no idle slots are
     * available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
     * and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
     * reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
     * if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
     * slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
     * available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
     * autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
     * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
     * Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
     * 
     */
    public Optional<Output<String>> scalingMode() {
        return Optional.ofNullable(this.scalingMode);
    }

    /**
     * The current location of the reservation&#39;s secondary replica. This field is only set for
     * reservations using the managed disaster recovery feature. Users can set this in create
     * reservation calls to create a failover reservation or in update reservation calls to convert
     * a non-failover reservation to a failover reservation(or vice versa).
     * 
     */
    @Import(name="secondaryLocation")
    private @Nullable Output<String> secondaryLocation;

    /**
     * @return The current location of the reservation&#39;s secondary replica. This field is only set for
     * reservations using the managed disaster recovery feature. Users can set this in create
     * reservation calls to create a failover reservation or in update reservation calls to convert
     * a non-failover reservation to a failover reservation(or vice versa).
     * 
     */
    public Optional<Output<String>> secondaryLocation() {
        return Optional.ofNullable(this.secondaryLocation);
    }

    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    @Import(name="slotCapacity", required=true)
    private Output<Integer> slotCapacity;

    /**
     * @return Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    public Output<Integer> slotCapacity() {
        return this.slotCapacity;
    }

    private ReservationArgs() {}

    private ReservationArgs(ReservationArgs $) {
        this.autoscale = $.autoscale;
        this.concurrency = $.concurrency;
        this.edition = $.edition;
        this.ignoreIdleSlots = $.ignoreIdleSlots;
        this.location = $.location;
        this.maxSlots = $.maxSlots;
        this.name = $.name;
        this.project = $.project;
        this.scalingMode = $.scalingMode;
        this.secondaryLocation = $.secondaryLocation;
        this.slotCapacity = $.slotCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservationArgs $;

        public Builder() {
            $ = new ReservationArgs();
        }

        public Builder(ReservationArgs defaults) {
            $ = new ReservationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscale The configuration parameters for the auto scaling feature.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscale(@Nullable Output<ReservationAutoscaleArgs> autoscale) {
            $.autoscale = autoscale;
            return this;
        }

        /**
         * @param autoscale The configuration parameters for the auto scaling feature.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscale(ReservationAutoscaleArgs autoscale) {
            return autoscale(Output.of(autoscale));
        }

        /**
         * @param concurrency Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(@Nullable Output<Integer> concurrency) {
            $.concurrency = concurrency;
            return this;
        }

        /**
         * @param concurrency Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(Integer concurrency) {
            return concurrency(Output.of(concurrency));
        }

        /**
         * @param edition The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
         * 
         * @return builder
         * 
         */
        public Builder edition(@Nullable Output<String> edition) {
            $.edition = edition;
            return this;
        }

        /**
         * @param edition The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
         * 
         * @return builder
         * 
         */
        public Builder edition(String edition) {
            return edition(Output.of(edition));
        }

        /**
         * @param ignoreIdleSlots If false, any query using this reservation will use idle slots from other reservations within
         * the same admin project. If true, a query using this reservation will execute with the slot
         * capacity specified above at most.
         * 
         * @return builder
         * 
         */
        public Builder ignoreIdleSlots(@Nullable Output<Boolean> ignoreIdleSlots) {
            $.ignoreIdleSlots = ignoreIdleSlots;
            return this;
        }

        /**
         * @param ignoreIdleSlots If false, any query using this reservation will use idle slots from other reservations within
         * the same admin project. If true, a query using this reservation will execute with the slot
         * capacity specified above at most.
         * 
         * @return builder
         * 
         */
        public Builder ignoreIdleSlots(Boolean ignoreIdleSlots) {
            return ignoreIdleSlots(Output.of(ignoreIdleSlots));
        }

        /**
         * @param location The geographic location where the transfer config should reside.
         * Examples: US, EU, asia-northeast1. The default value is US.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the transfer config should reside.
         * Examples: US, EU, asia-northeast1. The default value is US.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maxSlots The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
         * (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won&#39;t use
         * more than the specified number of slots, even if there is demand and supply (from idle
         * slots). NOTE: capping a reservation&#39;s idle slot usage is best effort and its usage may
         * exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
         * for the additional added slots), it will never exceed the maxSlots - baseline.
         * This field must be set together with the scalingMode enum value, otherwise the request
         * will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
         * must be unset. Otherwise the request will be rejected with error code
         * google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
         * output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
         * will represent the current slots from autoscaler excluding idle slots. For example,
         * if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
         * autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
         * between 0 and 1000.
         * If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
         * usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
         * autoscaler.current_slots will not be higher than 700.
         * If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
         * autoscaler field will be null.
         * If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
         * aligned with the scalingMode enum value.(See details in ScalingMode comments).
         * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * Please note, the maxSlots is for user to manage the part of slots greater than the
         * baseline. Therefore, we don&#39;t allow users to set maxSlots smaller or equal to the
         * baseline as it will not be meaningful. If the field is present and
         * slotCapacity&gt;=maxSlots, requests will be rejected with error code
         * google.rpc.Code.INVALID_ARGUMENT.
         * Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
         * maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
         * feature.
         * 
         * @return builder
         * 
         */
        public Builder maxSlots(@Nullable Output<Integer> maxSlots) {
            $.maxSlots = maxSlots;
            return this;
        }

        /**
         * @param maxSlots The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
         * (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won&#39;t use
         * more than the specified number of slots, even if there is demand and supply (from idle
         * slots). NOTE: capping a reservation&#39;s idle slot usage is best effort and its usage may
         * exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
         * for the additional added slots), it will never exceed the maxSlots - baseline.
         * This field must be set together with the scalingMode enum value, otherwise the request
         * will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
         * must be unset. Otherwise the request will be rejected with error code
         * google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
         * output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
         * will represent the current slots from autoscaler excluding idle slots. For example,
         * if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
         * autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
         * between 0 and 1000.
         * If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
         * usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
         * autoscaler.current_slots will not be higher than 700.
         * If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
         * autoscaler field will be null.
         * If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
         * aligned with the scalingMode enum value.(See details in ScalingMode comments).
         * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * Please note, the maxSlots is for user to manage the part of slots greater than the
         * baseline. Therefore, we don&#39;t allow users to set maxSlots smaller or equal to the
         * baseline as it will not be meaningful. If the field is present and
         * slotCapacity&gt;=maxSlots, requests will be rejected with error code
         * google.rpc.Code.INVALID_ARGUMENT.
         * Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
         * maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
         * feature.
         * 
         * @return builder
         * 
         */
        public Builder maxSlots(Integer maxSlots) {
            return maxSlots(Output.of(maxSlots));
        }

        /**
         * @param name The name of the reservation. This field must only contain alphanumeric characters or dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the reservation. This field must only contain alphanumeric characters or dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scalingMode The scaling mode for the reservation. If the field is present but maxSlots is not present,
         * requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * Enum values:
         * `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
         * `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
         * not use any idle slots even if there may be some available. The upper limit that autoscaling
         * can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
         * and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
         * and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
         * set to true. Otherwise the request will be rejected with error code
         * google.rpc.Code.INVALID_ARGUMENT.
         * `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
         * reservations or from unassigned commitments. If no idle slots are available it will not scale
         * up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
         * it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
         * capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
         * IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
         * reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
         * 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
         * 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
         * scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
         * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
         * `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
         * contributed by other reservations or from unassigned commitments first. If no idle slots are
         * available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
         * and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
         * reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
         * if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
         * slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
         * available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
         * autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
         * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
         * 
         * @return builder
         * 
         */
        public Builder scalingMode(@Nullable Output<String> scalingMode) {
            $.scalingMode = scalingMode;
            return this;
        }

        /**
         * @param scalingMode The scaling mode for the reservation. If the field is present but maxSlots is not present,
         * requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * Enum values:
         * `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.
         * `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
         * not use any idle slots even if there may be some available. The upper limit that autoscaling
         * can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
         * and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
         * and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
         * set to true. Otherwise the request will be rejected with error code
         * google.rpc.Code.INVALID_ARGUMENT.
         * `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
         * reservations or from unassigned commitments. If no idle slots are available it will not scale
         * up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
         * it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
         * capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
         * IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
         * reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
         * 500 idle slots available in other reservations, the reservation will scale up to 700 slots with
         * 200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
         * scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
         * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT
         * `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
         * contributed by other reservations or from unassigned commitments first. If no idle slots are
         * available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
         * and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
         * reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
         * if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
         * slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
         * available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
         * autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
         * Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
         * Possible values are: `SCALING_MODE_UNSPECIFIED`, `AUTOSCALE_ONLY`, `IDLE_SLOTS_ONLY`, `ALL_SLOTS`.
         * 
         * @return builder
         * 
         */
        public Builder scalingMode(String scalingMode) {
            return scalingMode(Output.of(scalingMode));
        }

        /**
         * @param secondaryLocation The current location of the reservation&#39;s secondary replica. This field is only set for
         * reservations using the managed disaster recovery feature. Users can set this in create
         * reservation calls to create a failover reservation or in update reservation calls to convert
         * a non-failover reservation to a failover reservation(or vice versa).
         * 
         * @return builder
         * 
         */
        public Builder secondaryLocation(@Nullable Output<String> secondaryLocation) {
            $.secondaryLocation = secondaryLocation;
            return this;
        }

        /**
         * @param secondaryLocation The current location of the reservation&#39;s secondary replica. This field is only set for
         * reservations using the managed disaster recovery feature. Users can set this in create
         * reservation calls to create a failover reservation or in update reservation calls to convert
         * a non-failover reservation to a failover reservation(or vice versa).
         * 
         * @return builder
         * 
         */
        public Builder secondaryLocation(String secondaryLocation) {
            return secondaryLocation(Output.of(secondaryLocation));
        }

        /**
         * @param slotCapacity Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
         * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
         * 
         * @return builder
         * 
         */
        public Builder slotCapacity(Output<Integer> slotCapacity) {
            $.slotCapacity = slotCapacity;
            return this;
        }

        /**
         * @param slotCapacity Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
         * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
         * 
         * @return builder
         * 
         */
        public Builder slotCapacity(Integer slotCapacity) {
            return slotCapacity(Output.of(slotCapacity));
        }

        public ReservationArgs build() {
            if ($.slotCapacity == null) {
                throw new MissingRequiredPropertyException("ReservationArgs", "slotCapacity");
            }
            return $;
        }
    }

}
