// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservationArgs Empty = new ReservationArgs();

    /**
     * Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    @Import(name="concurrency")
    private @Nullable Output<Integer> concurrency;

    /**
     * @return Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
     * 
     */
    public Optional<Output<Integer>> concurrency() {
        return Optional.ofNullable(this.concurrency);
    }

    /**
     * If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    @Import(name="ignoreIdleSlots")
    private @Nullable Output<Boolean> ignoreIdleSlots;

    /**
     * @return If false, any query using this reservation will use idle slots from other reservations within
     * the same admin project. If true, a query using this reservation will execute with the slot
     * capacity specified above at most.
     * 
     */
    public Optional<Output<Boolean>> ignoreIdleSlots() {
        return Optional.ofNullable(this.ignoreIdleSlots);
    }

    /**
     * The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the transfer config should reside.
     * Examples: US, EU, asia-northeast1. The default value is US.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Applicable only for reservations located within one of the BigQuery multi-regions (US or EU).
     * If set to true, this reservation is placed in the organization&#39;s secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization&#39;s default region.
     * 
     */
    @Import(name="multiRegionAuxiliary")
    private @Nullable Output<Boolean> multiRegionAuxiliary;

    /**
     * @return Applicable only for reservations located within one of the BigQuery multi-regions (US or EU).
     * If set to true, this reservation is placed in the organization&#39;s secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization&#39;s default region.
     * 
     */
    public Optional<Output<Boolean>> multiRegionAuxiliary() {
        return Optional.ofNullable(this.multiRegionAuxiliary);
    }

    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the reservation. This field must only contain alphanumeric characters or dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    @Import(name="slotCapacity", required=true)
    private Output<Integer> slotCapacity;

    /**
     * @return Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
     * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     * 
     */
    public Output<Integer> slotCapacity() {
        return this.slotCapacity;
    }

    private ReservationArgs() {}

    private ReservationArgs(ReservationArgs $) {
        this.concurrency = $.concurrency;
        this.ignoreIdleSlots = $.ignoreIdleSlots;
        this.location = $.location;
        this.multiRegionAuxiliary = $.multiRegionAuxiliary;
        this.name = $.name;
        this.project = $.project;
        this.slotCapacity = $.slotCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservationArgs $;

        public Builder() {
            $ = new ReservationArgs();
        }

        public Builder(ReservationArgs defaults) {
            $ = new ReservationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param concurrency Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(@Nullable Output<Integer> concurrency) {
            $.concurrency = concurrency;
            return this;
        }

        /**
         * @param concurrency Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(Integer concurrency) {
            return concurrency(Output.of(concurrency));
        }

        /**
         * @param ignoreIdleSlots If false, any query using this reservation will use idle slots from other reservations within
         * the same admin project. If true, a query using this reservation will execute with the slot
         * capacity specified above at most.
         * 
         * @return builder
         * 
         */
        public Builder ignoreIdleSlots(@Nullable Output<Boolean> ignoreIdleSlots) {
            $.ignoreIdleSlots = ignoreIdleSlots;
            return this;
        }

        /**
         * @param ignoreIdleSlots If false, any query using this reservation will use idle slots from other reservations within
         * the same admin project. If true, a query using this reservation will execute with the slot
         * capacity specified above at most.
         * 
         * @return builder
         * 
         */
        public Builder ignoreIdleSlots(Boolean ignoreIdleSlots) {
            return ignoreIdleSlots(Output.of(ignoreIdleSlots));
        }

        /**
         * @param location The geographic location where the transfer config should reside.
         * Examples: US, EU, asia-northeast1. The default value is US.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the transfer config should reside.
         * Examples: US, EU, asia-northeast1. The default value is US.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param multiRegionAuxiliary Applicable only for reservations located within one of the BigQuery multi-regions (US or EU).
         * If set to true, this reservation is placed in the organization&#39;s secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization&#39;s default region.
         * 
         * @return builder
         * 
         */
        public Builder multiRegionAuxiliary(@Nullable Output<Boolean> multiRegionAuxiliary) {
            $.multiRegionAuxiliary = multiRegionAuxiliary;
            return this;
        }

        /**
         * @param multiRegionAuxiliary Applicable only for reservations located within one of the BigQuery multi-regions (US or EU).
         * If set to true, this reservation is placed in the organization&#39;s secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization&#39;s default region.
         * 
         * @return builder
         * 
         */
        public Builder multiRegionAuxiliary(Boolean multiRegionAuxiliary) {
            return multiRegionAuxiliary(Output.of(multiRegionAuxiliary));
        }

        /**
         * @param name The name of the reservation. This field must only contain alphanumeric characters or dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the reservation. This field must only contain alphanumeric characters or dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param slotCapacity Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
         * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
         * 
         * @return builder
         * 
         */
        public Builder slotCapacity(Output<Integer> slotCapacity) {
            $.slotCapacity = slotCapacity;
            return this;
        }

        /**
         * @param slotCapacity Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
         * unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
         * 
         * @return builder
         * 
         */
        public Builder slotCapacity(Integer slotCapacity) {
            return slotCapacity(Output.of(slotCapacity));
        }

        public ReservationArgs build() {
            $.slotCapacity = Objects.requireNonNull($.slotCapacity, "expected parameter 'slotCapacity' to be non-null");
            return $;
        }
    }

}
