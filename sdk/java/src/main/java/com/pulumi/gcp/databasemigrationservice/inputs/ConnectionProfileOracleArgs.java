// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.databasemigrationservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileOracleForwardSshConnectivityArgs;
import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileOraclePrivateConnectivityArgs;
import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileOracleSslArgs;
import com.pulumi.gcp.databasemigrationservice.inputs.ConnectionProfileOracleStaticServiceIpConnectivityArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionProfileOracleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionProfileOracleArgs Empty = new ConnectionProfileOracleArgs();

    /**
     * Required. Database service for the Oracle connection.
     * 
     */
    @Import(name="databaseService", required=true)
    private Output<String> databaseService;

    /**
     * @return Required. Database service for the Oracle connection.
     * 
     */
    public Output<String> databaseService() {
        return this.databaseService;
    }

    /**
     * SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    @Import(name="forwardSshConnectivity")
    private @Nullable Output<ConnectionProfileOracleForwardSshConnectivityArgs> forwardSshConnectivity;

    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionProfileOracleForwardSshConnectivityArgs>> forwardSshConnectivity() {
        return Optional.ofNullable(this.forwardSshConnectivity);
    }

    /**
     * Required. The IP or hostname of the source Oracle database.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return Required. The IP or hostname of the source Oracle database.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
     * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
     * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * (Output)
     * Output only. Indicates If this connection profile password is stored.
     * 
     */
    @Import(name="passwordSet")
    private @Nullable Output<Boolean> passwordSet;

    /**
     * @return (Output)
     * Output only. Indicates If this connection profile password is stored.
     * 
     */
    public Optional<Output<Boolean>> passwordSet() {
        return Optional.ofNullable(this.passwordSet);
    }

    /**
     * Required. The network port of the source Oracle database.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return Required. The network port of the source Oracle database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Configuration for using a private network to communicate with the source database
     * Structure is documented below.
     * 
     */
    @Import(name="privateConnectivity")
    private @Nullable Output<ConnectionProfileOraclePrivateConnectivityArgs> privateConnectivity;

    /**
     * @return Configuration for using a private network to communicate with the source database
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionProfileOraclePrivateConnectivityArgs>> privateConnectivity() {
        return Optional.ofNullable(this.privateConnectivity);
    }

    /**
     * SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<ConnectionProfileOracleSslArgs> ssl;

    /**
     * @return SSL configuration for the destination to connect to the source database.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionProfileOracleSslArgs>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * This object has no nested fields.
     * Static IP address connectivity configured on service project.
     * 
     */
    @Import(name="staticServiceIpConnectivity")
    private @Nullable Output<ConnectionProfileOracleStaticServiceIpConnectivityArgs> staticServiceIpConnectivity;

    /**
     * @return This object has no nested fields.
     * Static IP address connectivity configured on service project.
     * 
     */
    public Optional<Output<ConnectionProfileOracleStaticServiceIpConnectivityArgs>> staticServiceIpConnectivity() {
        return Optional.ofNullable(this.staticServiceIpConnectivity);
    }

    /**
     * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ConnectionProfileOracleArgs() {}

    private ConnectionProfileOracleArgs(ConnectionProfileOracleArgs $) {
        this.databaseService = $.databaseService;
        this.forwardSshConnectivity = $.forwardSshConnectivity;
        this.host = $.host;
        this.password = $.password;
        this.passwordSet = $.passwordSet;
        this.port = $.port;
        this.privateConnectivity = $.privateConnectivity;
        this.ssl = $.ssl;
        this.staticServiceIpConnectivity = $.staticServiceIpConnectivity;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionProfileOracleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionProfileOracleArgs $;

        public Builder() {
            $ = new ConnectionProfileOracleArgs();
        }

        public Builder(ConnectionProfileOracleArgs defaults) {
            $ = new ConnectionProfileOracleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseService Required. Database service for the Oracle connection.
         * 
         * @return builder
         * 
         */
        public Builder databaseService(Output<String> databaseService) {
            $.databaseService = databaseService;
            return this;
        }

        /**
         * @param databaseService Required. Database service for the Oracle connection.
         * 
         * @return builder
         * 
         */
        public Builder databaseService(String databaseService) {
            return databaseService(Output.of(databaseService));
        }

        /**
         * @param forwardSshConnectivity SSL configuration for the destination to connect to the source database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardSshConnectivity(@Nullable Output<ConnectionProfileOracleForwardSshConnectivityArgs> forwardSshConnectivity) {
            $.forwardSshConnectivity = forwardSshConnectivity;
            return this;
        }

        /**
         * @param forwardSshConnectivity SSL configuration for the destination to connect to the source database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardSshConnectivity(ConnectionProfileOracleForwardSshConnectivityArgs forwardSshConnectivity) {
            return forwardSshConnectivity(Output.of(forwardSshConnectivity));
        }

        /**
         * @param host Required. The IP or hostname of the source Oracle database.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Required. The IP or hostname of the source Oracle database.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
         * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Required. Input only. The password for the user that Database Migration Service will be using to connect to the database.
         * This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordSet (Output)
         * Output only. Indicates If this connection profile password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSet(@Nullable Output<Boolean> passwordSet) {
            $.passwordSet = passwordSet;
            return this;
        }

        /**
         * @param passwordSet (Output)
         * Output only. Indicates If this connection profile password is stored.
         * 
         * @return builder
         * 
         */
        public Builder passwordSet(Boolean passwordSet) {
            return passwordSet(Output.of(passwordSet));
        }

        /**
         * @param port Required. The network port of the source Oracle database.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Required. The network port of the source Oracle database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateConnectivity Configuration for using a private network to communicate with the source database
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectivity(@Nullable Output<ConnectionProfileOraclePrivateConnectivityArgs> privateConnectivity) {
            $.privateConnectivity = privateConnectivity;
            return this;
        }

        /**
         * @param privateConnectivity Configuration for using a private network to communicate with the source database
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder privateConnectivity(ConnectionProfileOraclePrivateConnectivityArgs privateConnectivity) {
            return privateConnectivity(Output.of(privateConnectivity));
        }

        /**
         * @param ssl SSL configuration for the destination to connect to the source database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<ConnectionProfileOracleSslArgs> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl SSL configuration for the destination to connect to the source database.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder ssl(ConnectionProfileOracleSslArgs ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param staticServiceIpConnectivity This object has no nested fields.
         * Static IP address connectivity configured on service project.
         * 
         * @return builder
         * 
         */
        public Builder staticServiceIpConnectivity(@Nullable Output<ConnectionProfileOracleStaticServiceIpConnectivityArgs> staticServiceIpConnectivity) {
            $.staticServiceIpConnectivity = staticServiceIpConnectivity;
            return this;
        }

        /**
         * @param staticServiceIpConnectivity This object has no nested fields.
         * Static IP address connectivity configured on service project.
         * 
         * @return builder
         * 
         */
        public Builder staticServiceIpConnectivity(ConnectionProfileOracleStaticServiceIpConnectivityArgs staticServiceIpConnectivity) {
            return staticServiceIpConnectivity(Output.of(staticServiceIpConnectivity));
        }

        /**
         * @param username Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ConnectionProfileOracleArgs build() {
            if ($.databaseService == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileOracleArgs", "databaseService");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileOracleArgs", "host");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileOracleArgs", "password");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileOracleArgs", "port");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ConnectionProfileOracleArgs", "username");
            }
            return $;
        }
    }

}
