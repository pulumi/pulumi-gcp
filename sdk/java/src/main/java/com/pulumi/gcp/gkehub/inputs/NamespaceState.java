// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkehub.inputs.NamespaceStateArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceState Empty = new NamespaceState();

    /**
     * Time the Namespace was created in UTC.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time the Namespace was created in UTC.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Time the Namespace was deleted in UTC.
     * 
     */
    @Import(name="deleteTime")
    private @Nullable Output<String> deleteTime;

    /**
     * @return Time the Namespace was deleted in UTC.
     * 
     */
    public Optional<Output<String>> deleteTime() {
        return Optional.ofNullable(this.deleteTime);
    }

    /**
     * Labels for this Namespace.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for this Namespace.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The resource name for the namespace
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name for the namespace
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Namespace-level cluster namespace labels. These labels are applied
     * to the related namespace of the member clusters bound to the parent
     * Scope. Scope-level labels (`namespace_labels` in the Fleet Scope
     * resource) take precedence over Namespace-level labels if they share
     * a key. Keys and values must be Kubernetes-conformant.
     * 
     */
    @Import(name="namespaceLabels")
    private @Nullable Output<Map<String,String>> namespaceLabels;

    /**
     * @return Namespace-level cluster namespace labels. These labels are applied
     * to the related namespace of the member clusters bound to the parent
     * Scope. Scope-level labels (`namespace_labels` in the Fleet Scope
     * resource) take precedence over Namespace-level labels if they share
     * a key. Keys and values must be Kubernetes-conformant.
     * 
     */
    public Optional<Output<Map<String,String>>> namespaceLabels() {
        return Optional.ofNullable(this.namespaceLabels);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The name of the Scope instance.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The name of the Scope instance.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Id of the scope
     * 
     * ***
     * 
     */
    @Import(name="scopeId")
    private @Nullable Output<String> scopeId;

    /**
     * @return Id of the scope
     * 
     * ***
     * 
     */
    public Optional<Output<String>> scopeId() {
        return Optional.ofNullable(this.scopeId);
    }

    /**
     * The client-provided identifier of the namespace.
     * 
     */
    @Import(name="scopeNamespaceId")
    private @Nullable Output<String> scopeNamespaceId;

    /**
     * @return The client-provided identifier of the namespace.
     * 
     */
    public Optional<Output<String>> scopeNamespaceId() {
        return Optional.ofNullable(this.scopeNamespaceId);
    }

    /**
     * State of the namespace resource.
     * Structure is documented below.
     * 
     */
    @Import(name="states")
    private @Nullable Output<List<NamespaceStateArgs>> states;

    /**
     * @return State of the namespace resource.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<NamespaceStateArgs>>> states() {
        return Optional.ofNullable(this.states);
    }

    /**
     * Google-generated UUID for this resource.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Google-generated UUID for this resource.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Time the Namespace was updated in UTC.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time the Namespace was updated in UTC.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private NamespaceState() {}

    private NamespaceState(NamespaceState $) {
        this.createTime = $.createTime;
        this.deleteTime = $.deleteTime;
        this.labels = $.labels;
        this.name = $.name;
        this.namespaceLabels = $.namespaceLabels;
        this.project = $.project;
        this.scope = $.scope;
        this.scopeId = $.scopeId;
        this.scopeNamespaceId = $.scopeNamespaceId;
        this.states = $.states;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceState $;

        public Builder() {
            $ = new NamespaceState();
        }

        public Builder(NamespaceState defaults) {
            $ = new NamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Time the Namespace was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time the Namespace was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deleteTime Time the Namespace was deleted in UTC.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(@Nullable Output<String> deleteTime) {
            $.deleteTime = deleteTime;
            return this;
        }

        /**
         * @param deleteTime Time the Namespace was deleted in UTC.
         * 
         * @return builder
         * 
         */
        public Builder deleteTime(String deleteTime) {
            return deleteTime(Output.of(deleteTime));
        }

        /**
         * @param labels Labels for this Namespace.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for this Namespace.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The resource name for the namespace
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name for the namespace
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceLabels Namespace-level cluster namespace labels. These labels are applied
         * to the related namespace of the member clusters bound to the parent
         * Scope. Scope-level labels (`namespace_labels` in the Fleet Scope
         * resource) take precedence over Namespace-level labels if they share
         * a key. Keys and values must be Kubernetes-conformant.
         * 
         * @return builder
         * 
         */
        public Builder namespaceLabels(@Nullable Output<Map<String,String>> namespaceLabels) {
            $.namespaceLabels = namespaceLabels;
            return this;
        }

        /**
         * @param namespaceLabels Namespace-level cluster namespace labels. These labels are applied
         * to the related namespace of the member clusters bound to the parent
         * Scope. Scope-level labels (`namespace_labels` in the Fleet Scope
         * resource) take precedence over Namespace-level labels if they share
         * a key. Keys and values must be Kubernetes-conformant.
         * 
         * @return builder
         * 
         */
        public Builder namespaceLabels(Map<String,String> namespaceLabels) {
            return namespaceLabels(Output.of(namespaceLabels));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scope The name of the Scope instance.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The name of the Scope instance.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param scopeId Id of the scope
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder scopeId(@Nullable Output<String> scopeId) {
            $.scopeId = scopeId;
            return this;
        }

        /**
         * @param scopeId Id of the scope
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder scopeId(String scopeId) {
            return scopeId(Output.of(scopeId));
        }

        /**
         * @param scopeNamespaceId The client-provided identifier of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder scopeNamespaceId(@Nullable Output<String> scopeNamespaceId) {
            $.scopeNamespaceId = scopeNamespaceId;
            return this;
        }

        /**
         * @param scopeNamespaceId The client-provided identifier of the namespace.
         * 
         * @return builder
         * 
         */
        public Builder scopeNamespaceId(String scopeNamespaceId) {
            return scopeNamespaceId(Output.of(scopeNamespaceId));
        }

        /**
         * @param states State of the namespace resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable Output<List<NamespaceStateArgs>> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states State of the namespace resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder states(List<NamespaceStateArgs> states) {
            return states(Output.of(states));
        }

        /**
         * @param states State of the namespace resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder states(NamespaceStateArgs... states) {
            return states(List.of(states));
        }

        /**
         * @param uid Google-generated UUID for this resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Google-generated UUID for this resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Time the Namespace was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time the Namespace was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public NamespaceState build() {
            return $;
        }
    }

}
