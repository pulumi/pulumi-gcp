// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RepositoryGroupRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryGroupRepositoryArgs Empty = new RepositoryGroupRepositoryArgs();

    /**
     * Required. The Git branch pattern used for indexing in RE2 syntax.
     * See https://github.com/google/re2/wiki/syntax for syntax.
     * 
     * ***
     * 
     */
    @Import(name="branchPattern", required=true)
    private Output<String> branchPattern;

    /**
     * @return Required. The Git branch pattern used for indexing in RE2 syntax.
     * See https://github.com/google/re2/wiki/syntax for syntax.
     * 
     * ***
     * 
     */
    public Output<String> branchPattern() {
        return this.branchPattern;
    }

    /**
     * Required. The DeveloperConnect repository full resource name, relative resource name
     * or resource URL to be indexed.
     * 
     */
    @Import(name="resource", required=true)
    private Output<String> resource;

    /**
     * @return Required. The DeveloperConnect repository full resource name, relative resource name
     * or resource URL to be indexed.
     * 
     */
    public Output<String> resource() {
        return this.resource;
    }

    private RepositoryGroupRepositoryArgs() {}

    private RepositoryGroupRepositoryArgs(RepositoryGroupRepositoryArgs $) {
        this.branchPattern = $.branchPattern;
        this.resource = $.resource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryGroupRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryGroupRepositoryArgs $;

        public Builder() {
            $ = new RepositoryGroupRepositoryArgs();
        }

        public Builder(RepositoryGroupRepositoryArgs defaults) {
            $ = new RepositoryGroupRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchPattern Required. The Git branch pattern used for indexing in RE2 syntax.
         * See https://github.com/google/re2/wiki/syntax for syntax.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder branchPattern(Output<String> branchPattern) {
            $.branchPattern = branchPattern;
            return this;
        }

        /**
         * @param branchPattern Required. The Git branch pattern used for indexing in RE2 syntax.
         * See https://github.com/google/re2/wiki/syntax for syntax.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder branchPattern(String branchPattern) {
            return branchPattern(Output.of(branchPattern));
        }

        /**
         * @param resource Required. The DeveloperConnect repository full resource name, relative resource name
         * or resource URL to be indexed.
         * 
         * @return builder
         * 
         */
        public Builder resource(Output<String> resource) {
            $.resource = resource;
            return this;
        }

        /**
         * @param resource Required. The DeveloperConnect repository full resource name, relative resource name
         * or resource URL to be indexed.
         * 
         * @return builder
         * 
         */
        public Builder resource(String resource) {
            return resource(Output.of(resource));
        }

        public RepositoryGroupRepositoryArgs build() {
            if ($.branchPattern == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupRepositoryArgs", "branchPattern");
            }
            if ($.resource == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupRepositoryArgs", "resource");
            }
            return $;
        }
    }

}
