// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.oracledatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.oracledatabase.outputs.CloudVmClusterPropertiesDiagnosticsDataCollectionOptions;
import com.pulumi.gcp.oracledatabase.outputs.CloudVmClusterPropertiesTimeZone;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CloudVmClusterProperties {
    /**
     * @return OCI Cluster name.
     * 
     */
    private @Nullable String clusterName;
    /**
     * @return (Output)
     * Compartment ID of cluster.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return Number of enabled CPU cores.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    private @Nullable Double dataStorageSizeTb;
    /**
     * @return Local storage per VM
     * 
     */
    private @Nullable Integer dbNodeStorageSizeGb;
    /**
     * @return OCID of database servers.
     * 
     */
    private @Nullable List<String> dbServerOcids;
    /**
     * @return Data collection options for diagnostics.
     * Structure is documented below.
     * 
     */
    private @Nullable CloudVmClusterPropertiesDiagnosticsDataCollectionOptions diagnosticsDataCollectionOptions;
    /**
     * @return The type of redundancy.
     * Possible values:
     * DISK_REDUNDANCY_UNSPECIFIED
     * HIGH
     * NORMAL
     * 
     */
    private @Nullable String diskRedundancy;
    /**
     * @return (Output)
     * DNS listener IP.
     * 
     */
    private @Nullable String dnsListenerIp;
    /**
     * @return (Output)
     * Parent DNS domain where SCAN DNS and hosts names are qualified.
     * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    private @Nullable String domain;
    /**
     * @return Grid Infrastructure Version.
     * 
     */
    private @Nullable String giVersion;
    /**
     * @return (Output)
     * host name without domain.
     * format: &#34;-&#34; with some suffix.
     * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
     * 
     */
    private @Nullable String hostname;
    /**
     * @return Prefix for VM cluster host names.
     * 
     */
    private @Nullable String hostnamePrefix;
    /**
     * @return License type of VM Cluster.
     * Possible values:
     * LICENSE_TYPE_UNSPECIFIED
     * LICENSE_INCLUDED
     * BRING_YOUR_OWN_LICENSE
     * 
     */
    private String licenseType;
    /**
     * @return Use local backup.
     * 
     */
    private @Nullable Boolean localBackupEnabled;
    /**
     * @return Memory allocated in GBs.
     * 
     */
    private @Nullable Integer memorySizeGb;
    /**
     * @return Number of database servers.
     * 
     */
    private @Nullable Integer nodeCount;
    /**
     * @return (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    private @Nullable String ociUrl;
    /**
     * @return (Output)
     * Oracle Cloud Infrastructure ID of VM Cluster.
     * 
     */
    private @Nullable String ocid;
    /**
     * @return OCPU count per VM. Minimum is 0.1.
     * 
     */
    private @Nullable Double ocpuCount;
    /**
     * @return (Output)
     * SCAN DNS name.
     * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    private @Nullable String scanDns;
    /**
     * @return (Output)
     * OCID of scan DNS record.
     * 
     */
    private @Nullable String scanDnsRecordId;
    /**
     * @return (Output)
     * OCIDs of scan IPs.
     * 
     */
    private @Nullable List<String> scanIpIds;
    /**
     * @return (Output)
     * SCAN listener port - TCP
     * 
     */
    private @Nullable Integer scanListenerPortTcp;
    /**
     * @return (Output)
     * SCAN listener port - TLS
     * 
     */
    private @Nullable Integer scanListenerPortTcpSsl;
    /**
     * @return (Output)
     * Shape of VM Cluster.
     * 
     */
    private @Nullable String shape;
    /**
     * @return Use exadata sparse snapshots.
     * 
     */
    private @Nullable Boolean sparseDiskgroupEnabled;
    /**
     * @return SSH public keys to be stored with cluster.
     * 
     */
    private @Nullable List<String> sshPublicKeys;
    /**
     * @return (Output)
     * State of the cluster.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    private @Nullable String state;
    /**
     * @return (Output)
     * The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    private @Nullable Integer storageSizeGb;
    /**
     * @return (Output)
     * Operating system version of the image.
     * 
     */
    private @Nullable String systemVersion;
    /**
     * @return Represents a time zone from the
     * [IANA Time Zone Database](https://www.iana.org/time-zones).
     * Structure is documented below.
     * 
     */
    private @Nullable CloudVmClusterPropertiesTimeZone timeZone;

    private CloudVmClusterProperties() {}
    /**
     * @return OCI Cluster name.
     * 
     */
    public Optional<String> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }
    /**
     * @return (Output)
     * Compartment ID of cluster.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return Number of enabled CPU cores.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The data disk group size to be allocated in TBs.
     * 
     */
    public Optional<Double> dataStorageSizeTb() {
        return Optional.ofNullable(this.dataStorageSizeTb);
    }
    /**
     * @return Local storage per VM
     * 
     */
    public Optional<Integer> dbNodeStorageSizeGb() {
        return Optional.ofNullable(this.dbNodeStorageSizeGb);
    }
    /**
     * @return OCID of database servers.
     * 
     */
    public List<String> dbServerOcids() {
        return this.dbServerOcids == null ? List.of() : this.dbServerOcids;
    }
    /**
     * @return Data collection options for diagnostics.
     * Structure is documented below.
     * 
     */
    public Optional<CloudVmClusterPropertiesDiagnosticsDataCollectionOptions> diagnosticsDataCollectionOptions() {
        return Optional.ofNullable(this.diagnosticsDataCollectionOptions);
    }
    /**
     * @return The type of redundancy.
     * Possible values:
     * DISK_REDUNDANCY_UNSPECIFIED
     * HIGH
     * NORMAL
     * 
     */
    public Optional<String> diskRedundancy() {
        return Optional.ofNullable(this.diskRedundancy);
    }
    /**
     * @return (Output)
     * DNS listener IP.
     * 
     */
    public Optional<String> dnsListenerIp() {
        return Optional.ofNullable(this.dnsListenerIp);
    }
    /**
     * @return (Output)
     * Parent DNS domain where SCAN DNS and hosts names are qualified.
     * ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return Grid Infrastructure Version.
     * 
     */
    public Optional<String> giVersion() {
        return Optional.ofNullable(this.giVersion);
    }
    /**
     * @return (Output)
     * host name without domain.
     * format: &#34;-&#34; with some suffix.
     * ex: sp2-yi0xq where &#34;sp2&#34; is the hostname_prefix.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return Prefix for VM cluster host names.
     * 
     */
    public Optional<String> hostnamePrefix() {
        return Optional.ofNullable(this.hostnamePrefix);
    }
    /**
     * @return License type of VM Cluster.
     * Possible values:
     * LICENSE_TYPE_UNSPECIFIED
     * LICENSE_INCLUDED
     * BRING_YOUR_OWN_LICENSE
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return Use local backup.
     * 
     */
    public Optional<Boolean> localBackupEnabled() {
        return Optional.ofNullable(this.localBackupEnabled);
    }
    /**
     * @return Memory allocated in GBs.
     * 
     */
    public Optional<Integer> memorySizeGb() {
        return Optional.ofNullable(this.memorySizeGb);
    }
    /**
     * @return Number of database servers.
     * 
     */
    public Optional<Integer> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }
    /**
     * @return (Output)
     * Deep link to the OCI console to view this resource.
     * 
     */
    public Optional<String> ociUrl() {
        return Optional.ofNullable(this.ociUrl);
    }
    /**
     * @return (Output)
     * Oracle Cloud Infrastructure ID of VM Cluster.
     * 
     */
    public Optional<String> ocid() {
        return Optional.ofNullable(this.ocid);
    }
    /**
     * @return OCPU count per VM. Minimum is 0.1.
     * 
     */
    public Optional<Double> ocpuCount() {
        return Optional.ofNullable(this.ocpuCount);
    }
    /**
     * @return (Output)
     * SCAN DNS name.
     * ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
     * 
     */
    public Optional<String> scanDns() {
        return Optional.ofNullable(this.scanDns);
    }
    /**
     * @return (Output)
     * OCID of scan DNS record.
     * 
     */
    public Optional<String> scanDnsRecordId() {
        return Optional.ofNullable(this.scanDnsRecordId);
    }
    /**
     * @return (Output)
     * OCIDs of scan IPs.
     * 
     */
    public List<String> scanIpIds() {
        return this.scanIpIds == null ? List.of() : this.scanIpIds;
    }
    /**
     * @return (Output)
     * SCAN listener port - TCP
     * 
     */
    public Optional<Integer> scanListenerPortTcp() {
        return Optional.ofNullable(this.scanListenerPortTcp);
    }
    /**
     * @return (Output)
     * SCAN listener port - TLS
     * 
     */
    public Optional<Integer> scanListenerPortTcpSsl() {
        return Optional.ofNullable(this.scanListenerPortTcpSsl);
    }
    /**
     * @return (Output)
     * Shape of VM Cluster.
     * 
     */
    public Optional<String> shape() {
        return Optional.ofNullable(this.shape);
    }
    /**
     * @return Use exadata sparse snapshots.
     * 
     */
    public Optional<Boolean> sparseDiskgroupEnabled() {
        return Optional.ofNullable(this.sparseDiskgroupEnabled);
    }
    /**
     * @return SSH public keys to be stored with cluster.
     * 
     */
    public List<String> sshPublicKeys() {
        return this.sshPublicKeys == null ? List.of() : this.sshPublicKeys;
    }
    /**
     * @return (Output)
     * State of the cluster.
     * Possible values:
     * STATE_UNSPECIFIED
     * PROVISIONING
     * AVAILABLE
     * UPDATING
     * TERMINATING
     * TERMINATED
     * FAILED
     * MAINTENANCE_IN_PROGRESS
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return (Output)
     * The storage allocation for the disk group, in gigabytes (GB).
     * 
     */
    public Optional<Integer> storageSizeGb() {
        return Optional.ofNullable(this.storageSizeGb);
    }
    /**
     * @return (Output)
     * Operating system version of the image.
     * 
     */
    public Optional<String> systemVersion() {
        return Optional.ofNullable(this.systemVersion);
    }
    /**
     * @return Represents a time zone from the
     * [IANA Time Zone Database](https://www.iana.org/time-zones).
     * Structure is documented below.
     * 
     */
    public Optional<CloudVmClusterPropertiesTimeZone> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudVmClusterProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clusterName;
        private @Nullable String compartmentId;
        private Integer cpuCoreCount;
        private @Nullable Double dataStorageSizeTb;
        private @Nullable Integer dbNodeStorageSizeGb;
        private @Nullable List<String> dbServerOcids;
        private @Nullable CloudVmClusterPropertiesDiagnosticsDataCollectionOptions diagnosticsDataCollectionOptions;
        private @Nullable String diskRedundancy;
        private @Nullable String dnsListenerIp;
        private @Nullable String domain;
        private @Nullable String giVersion;
        private @Nullable String hostname;
        private @Nullable String hostnamePrefix;
        private String licenseType;
        private @Nullable Boolean localBackupEnabled;
        private @Nullable Integer memorySizeGb;
        private @Nullable Integer nodeCount;
        private @Nullable String ociUrl;
        private @Nullable String ocid;
        private @Nullable Double ocpuCount;
        private @Nullable String scanDns;
        private @Nullable String scanDnsRecordId;
        private @Nullable List<String> scanIpIds;
        private @Nullable Integer scanListenerPortTcp;
        private @Nullable Integer scanListenerPortTcpSsl;
        private @Nullable String shape;
        private @Nullable Boolean sparseDiskgroupEnabled;
        private @Nullable List<String> sshPublicKeys;
        private @Nullable String state;
        private @Nullable Integer storageSizeGb;
        private @Nullable String systemVersion;
        private @Nullable CloudVmClusterPropertiesTimeZone timeZone;
        public Builder() {}
        public Builder(CloudVmClusterProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.compartmentId = defaults.compartmentId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.dataStorageSizeTb = defaults.dataStorageSizeTb;
    	      this.dbNodeStorageSizeGb = defaults.dbNodeStorageSizeGb;
    	      this.dbServerOcids = defaults.dbServerOcids;
    	      this.diagnosticsDataCollectionOptions = defaults.diagnosticsDataCollectionOptions;
    	      this.diskRedundancy = defaults.diskRedundancy;
    	      this.dnsListenerIp = defaults.dnsListenerIp;
    	      this.domain = defaults.domain;
    	      this.giVersion = defaults.giVersion;
    	      this.hostname = defaults.hostname;
    	      this.hostnamePrefix = defaults.hostnamePrefix;
    	      this.licenseType = defaults.licenseType;
    	      this.localBackupEnabled = defaults.localBackupEnabled;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.nodeCount = defaults.nodeCount;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.ocpuCount = defaults.ocpuCount;
    	      this.scanDns = defaults.scanDns;
    	      this.scanDnsRecordId = defaults.scanDnsRecordId;
    	      this.scanIpIds = defaults.scanIpIds;
    	      this.scanListenerPortTcp = defaults.scanListenerPortTcp;
    	      this.scanListenerPortTcpSsl = defaults.scanListenerPortTcpSsl;
    	      this.shape = defaults.shape;
    	      this.sparseDiskgroupEnabled = defaults.sparseDiskgroupEnabled;
    	      this.sshPublicKeys = defaults.sshPublicKeys;
    	      this.state = defaults.state;
    	      this.storageSizeGb = defaults.storageSizeGb;
    	      this.systemVersion = defaults.systemVersion;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder clusterName(@Nullable String clusterName) {

            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {

            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("CloudVmClusterProperties", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder dataStorageSizeTb(@Nullable Double dataStorageSizeTb) {

            this.dataStorageSizeTb = dataStorageSizeTb;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeGb(@Nullable Integer dbNodeStorageSizeGb) {

            this.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerOcids(@Nullable List<String> dbServerOcids) {

            this.dbServerOcids = dbServerOcids;
            return this;
        }
        public Builder dbServerOcids(String... dbServerOcids) {
            return dbServerOcids(List.of(dbServerOcids));
        }
        @CustomType.Setter
        public Builder diagnosticsDataCollectionOptions(@Nullable CloudVmClusterPropertiesDiagnosticsDataCollectionOptions diagnosticsDataCollectionOptions) {

            this.diagnosticsDataCollectionOptions = diagnosticsDataCollectionOptions;
            return this;
        }
        @CustomType.Setter
        public Builder diskRedundancy(@Nullable String diskRedundancy) {

            this.diskRedundancy = diskRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder dnsListenerIp(@Nullable String dnsListenerIp) {

            this.dnsListenerIp = dnsListenerIp;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder giVersion(@Nullable String giVersion) {

            this.giVersion = giVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {

            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder hostnamePrefix(@Nullable String hostnamePrefix) {

            this.hostnamePrefix = hostnamePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            if (licenseType == null) {
              throw new MissingRequiredPropertyException("CloudVmClusterProperties", "licenseType");
            }
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder localBackupEnabled(@Nullable Boolean localBackupEnabled) {

            this.localBackupEnabled = localBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGb(@Nullable Integer memorySizeGb) {

            this.memorySizeGb = memorySizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(@Nullable Integer nodeCount) {

            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(@Nullable String ociUrl) {

            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(@Nullable String ocid) {

            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder ocpuCount(@Nullable Double ocpuCount) {

            this.ocpuCount = ocpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder scanDns(@Nullable String scanDns) {

            this.scanDns = scanDns;
            return this;
        }
        @CustomType.Setter
        public Builder scanDnsRecordId(@Nullable String scanDnsRecordId) {

            this.scanDnsRecordId = scanDnsRecordId;
            return this;
        }
        @CustomType.Setter
        public Builder scanIpIds(@Nullable List<String> scanIpIds) {

            this.scanIpIds = scanIpIds;
            return this;
        }
        public Builder scanIpIds(String... scanIpIds) {
            return scanIpIds(List.of(scanIpIds));
        }
        @CustomType.Setter
        public Builder scanListenerPortTcp(@Nullable Integer scanListenerPortTcp) {

            this.scanListenerPortTcp = scanListenerPortTcp;
            return this;
        }
        @CustomType.Setter
        public Builder scanListenerPortTcpSsl(@Nullable Integer scanListenerPortTcpSsl) {

            this.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            return this;
        }
        @CustomType.Setter
        public Builder shape(@Nullable String shape) {

            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder sparseDiskgroupEnabled(@Nullable Boolean sparseDiskgroupEnabled) {

            this.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeys(@Nullable List<String> sshPublicKeys) {

            this.sshPublicKeys = sshPublicKeys;
            return this;
        }
        public Builder sshPublicKeys(String... sshPublicKeys) {
            return sshPublicKeys(List.of(sshPublicKeys));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageSizeGb(@Nullable Integer storageSizeGb) {

            this.storageSizeGb = storageSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder systemVersion(@Nullable String systemVersion) {

            this.systemVersion = systemVersion;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable CloudVmClusterPropertiesTimeZone timeZone) {

            this.timeZone = timeZone;
            return this;
        }
        public CloudVmClusterProperties build() {
            final var _resultValue = new CloudVmClusterProperties();
            _resultValue.clusterName = clusterName;
            _resultValue.compartmentId = compartmentId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.dataStorageSizeTb = dataStorageSizeTb;
            _resultValue.dbNodeStorageSizeGb = dbNodeStorageSizeGb;
            _resultValue.dbServerOcids = dbServerOcids;
            _resultValue.diagnosticsDataCollectionOptions = diagnosticsDataCollectionOptions;
            _resultValue.diskRedundancy = diskRedundancy;
            _resultValue.dnsListenerIp = dnsListenerIp;
            _resultValue.domain = domain;
            _resultValue.giVersion = giVersion;
            _resultValue.hostname = hostname;
            _resultValue.hostnamePrefix = hostnamePrefix;
            _resultValue.licenseType = licenseType;
            _resultValue.localBackupEnabled = localBackupEnabled;
            _resultValue.memorySizeGb = memorySizeGb;
            _resultValue.nodeCount = nodeCount;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.ocpuCount = ocpuCount;
            _resultValue.scanDns = scanDns;
            _resultValue.scanDnsRecordId = scanDnsRecordId;
            _resultValue.scanIpIds = scanIpIds;
            _resultValue.scanListenerPortTcp = scanListenerPortTcp;
            _resultValue.scanListenerPortTcpSsl = scanListenerPortTcpSsl;
            _resultValue.shape = shape;
            _resultValue.sparseDiskgroupEnabled = sparseDiskgroupEnabled;
            _resultValue.sshPublicKeys = sshPublicKeys;
            _resultValue.state = state;
            _resultValue.storageSizeGb = storageSizeGb;
            _resultValue.systemVersion = systemVersion;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
