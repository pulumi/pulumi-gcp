// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.HostingVersionArgs;
import com.pulumi.gcp.firebase.inputs.HostingVersionState;
import com.pulumi.gcp.firebase.outputs.HostingVersionConfig;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A `Version` is a configuration which determine how a site is displayed. Static files are not supported at the moment.
 * 
 * To get more information about Version, see:
 * 
 * * [API documentation](https://firebase.google.com/docs/reference/hosting/rest/v1beta1/sites.versions)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/docs/hosting)
 * 
 * ## Example Usage
 * 
 * ### Firebasehosting Version Redirect
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HostingSite("default", HostingSiteArgs.builder()
 *             .project("my-project-name")
 *             .siteId("site-id")
 *             .build());
 * 
 *         var defaultHostingVersion = new HostingVersion("defaultHostingVersion", HostingVersionArgs.builder()
 *             .siteId(default_.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .redirects(HostingVersionConfigRedirectArgs.builder()
 *                     .glob("/google/**")
 *                     .statusCode(302)
 *                     .location("https://www.google.com")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingRelease = new HostingRelease("defaultHostingRelease", HostingReleaseArgs.builder()
 *             .siteId(default_.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message("Redirect to Google")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebasehosting Version Headers
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HostingSite("default", HostingSiteArgs.builder()
 *             .project("my-project-name")
 *             .siteId("site-id")
 *             .build());
 * 
 *         var defaultHostingVersion = new HostingVersion("defaultHostingVersion", HostingVersionArgs.builder()
 *             .siteId(default_.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .headers(HostingVersionConfigHeaderArgs.builder()
 *                     .glob("/headers/**")
 *                     .headers(Map.of("my-header", "my-value"))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingRelease = new HostingRelease("defaultHostingRelease", HostingReleaseArgs.builder()
 *             .siteId(default_.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message("With custom headers")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebasehosting Version Headers Regex
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HostingSite("default", HostingSiteArgs.builder()
 *             .project("my-project-name")
 *             .siteId("site-id")
 *             .build());
 * 
 *         var defaultHostingVersion = new HostingVersion("defaultHostingVersion", HostingVersionArgs.builder()
 *             .siteId(default_.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .headers(HostingVersionConfigHeaderArgs.builder()
 *                     .regex("^~/headers$")
 *                     .headers(Map.of("my-header", "my-value"))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingRelease = new HostingRelease("defaultHostingRelease", HostingReleaseArgs.builder()
 *             .siteId(default_.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message("With custom headers")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebasehosting Version Path
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HostingSite("default", HostingSiteArgs.builder()
 *             .project("my-project-name")
 *             .siteId("site-id")
 *             .build());
 * 
 *         var defaultHostingVersion = new HostingVersion("defaultHostingVersion", HostingVersionArgs.builder()
 *             .siteId(default_.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .rewrites(HostingVersionConfigRewriteArgs.builder()
 *                     .glob("**")
 *                     .path("/index.html")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingRelease = new HostingRelease("defaultHostingRelease", HostingReleaseArgs.builder()
 *             .siteId(default_.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message("Path Rewrite")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebasehosting Version Cloud Run
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HostingSite("default", HostingSiteArgs.builder()
 *             .project("my-project-name")
 *             .siteId("site-id")
 *             .build());
 * 
 *         var defaultService = new Service("defaultService", ServiceArgs.builder()
 *             .project("my-project-name")
 *             .name("cloud-run-service-via-hosting")
 *             .location("us-central1")
 *             .ingress("INGRESS_TRAFFIC_ALL")
 *             .template(ServiceTemplateArgs.builder()
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image("us-docker.pkg.dev/cloudrun/container/hello")
 *                     .build())
 *                 .build())
 *             .deletionProtection(true)
 *             .build());
 * 
 *         var defaultHostingVersion = new HostingVersion("defaultHostingVersion", HostingVersionArgs.builder()
 *             .siteId(default_.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .rewrites(HostingVersionConfigRewriteArgs.builder()
 *                     .glob("/hello/**")
 *                     .run(HostingVersionConfigRewriteRunArgs.builder()
 *                         .serviceId(defaultService.name())
 *                         .region(defaultService.location())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingRelease = new HostingRelease("defaultHostingRelease", HostingReleaseArgs.builder()
 *             .siteId(default_.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message("Cloud Run Integration")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Firebasehosting Version Cloud Functions
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.Function;
 * import com.pulumi.gcp.cloudfunctionsv2.FunctionArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceStorageSourceArgs;
 * import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionServiceConfigArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HostingSite("default", HostingSiteArgs.builder()
 *             .project("my-project-name")
 *             .siteId("site-id")
 *             .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .project("my-project-name")
 *             .name("site-id-function-source")
 *             .location("US")
 *             .uniformBucketLevelAccess(true)
 *             .build());
 * 
 *         var object = new BucketObject("object", BucketObjectArgs.builder()
 *             .name("function-source.zip")
 *             .bucket(bucket.name())
 *             .source(new FileAsset("function-source.zip"))
 *             .build());
 * 
 *         var function = new Function("function", FunctionArgs.builder()
 *             .project("my-project-name")
 *             .name("cloud-function-via-hosting")
 *             .location("us-central1")
 *             .description("A Cloud Function connected to Firebase Hosing")
 *             .buildConfig(FunctionBuildConfigArgs.builder()
 *                 .runtime("nodejs22")
 *                 .entryPoint("helloHttp")
 *                 .source(FunctionBuildConfigSourceArgs.builder()
 *                     .storageSource(FunctionBuildConfigSourceStorageSourceArgs.builder()
 *                         .bucket(bucket.name())
 *                         .object(object.name())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .serviceConfig(FunctionServiceConfigArgs.builder()
 *                 .maxInstanceCount(1)
 *                 .availableMemory("256M")
 *                 .timeoutSeconds(60)
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingVersion = new HostingVersion("defaultHostingVersion", HostingVersionArgs.builder()
 *             .siteId(default_.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .rewrites(HostingVersionConfigRewriteArgs.builder()
 *                     .glob("/hello/**")
 *                     .function(function.name())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultHostingRelease = new HostingRelease("defaultHostingRelease", HostingReleaseArgs.builder()
 *             .siteId(default_.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message("Cloud Functions Integration")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Version can be imported using any of these accepted formats:
 * 
 * * `sites/{{site_id}}/versions/{{version_id}}`
 * 
 * * `{{site_id}}/{{version_id}}`
 * 
 * When using the `pulumi import` command, Version can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/hostingVersion:HostingVersion")
public class HostingVersion extends com.pulumi.resources.CustomResource {
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     * 
     */
    @Export(name="config", refs={HostingVersionConfig.class}, tree="[0]")
    private Output</* @Nullable */ HostingVersionConfig> config;

    /**
     * @return The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HostingVersionConfig>> config() {
        return Codegen.optional(this.config);
    }
    /**
     * The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Required. The ID of the site in which to create this Version.
     * 
     */
    @Export(name="siteId", refs={String.class}, tree="[0]")
    private Output<String> siteId;

    /**
     * @return Required. The ID of the site in which to create this Version.
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }
    /**
     * The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     * 
     */
    @Export(name="versionId", refs={String.class}, tree="[0]")
    private Output<String> versionId;

    /**
     * @return The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HostingVersion(java.lang.String name) {
        this(name, HostingVersionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HostingVersion(java.lang.String name, HostingVersionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HostingVersion(java.lang.String name, HostingVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/hostingVersion:HostingVersion", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private HostingVersion(java.lang.String name, Output<java.lang.String> id, @Nullable HostingVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/hostingVersion:HostingVersion", name, state, makeResourceOptions(options, id), false);
    }

    private static HostingVersionArgs makeArgs(HostingVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HostingVersionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HostingVersion get(java.lang.String name, Output<java.lang.String> id, @Nullable HostingVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HostingVersion(name, id, state, options);
    }
}
