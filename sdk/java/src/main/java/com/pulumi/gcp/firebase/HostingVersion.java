// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.HostingVersionArgs;
import com.pulumi.gcp.firebase.inputs.HostingVersionState;
import com.pulumi.gcp.firebase.outputs.HostingVersionConfig;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### Firebasehosting Version Redirect
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHostingSite = new HostingSite(&#34;defaultHostingSite&#34;, HostingSiteArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .siteId(&#34;site-id&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHostingVersion = new HostingVersion(&#34;defaultHostingVersion&#34;, HostingVersionArgs.builder()        
 *             .siteId(defaultHostingSite.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .redirects(HostingVersionConfigRedirectArgs.builder()
 *                     .glob(&#34;/google/**&#34;)
 *                     .statusCode(302)
 *                     .location(&#34;https://www.google.com&#34;)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHostingRelease = new HostingRelease(&#34;defaultHostingRelease&#34;, HostingReleaseArgs.builder()        
 *             .siteId(defaultHostingSite.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message(&#34;Redirect to Google&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Firebasehosting Version Cloud Run
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.cloudrunv2.Service;
 * import com.pulumi.gcp.cloudrunv2.ServiceArgs;
 * import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHostingSite = new HostingSite(&#34;defaultHostingSite&#34;, HostingSiteArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .siteId(&#34;site-id&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultService = new Service(&#34;defaultService&#34;, ServiceArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .location(&#34;us-central1&#34;)
 *             .ingress(&#34;INGRESS_TRAFFIC_ALL&#34;)
 *             .template(ServiceTemplateArgs.builder()
 *                 .containers(ServiceTemplateContainerArgs.builder()
 *                     .image(&#34;us-docker.pkg.dev/cloudrun/container/hello&#34;)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHostingVersion = new HostingVersion(&#34;defaultHostingVersion&#34;, HostingVersionArgs.builder()        
 *             .siteId(defaultHostingSite.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .rewrites(HostingVersionConfigRewriteArgs.builder()
 *                     .glob(&#34;/hello/**&#34;)
 *                     .run(HostingVersionConfigRewriteRunArgs.builder()
 *                         .serviceId(defaultService.name())
 *                         .region(defaultService.location())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHostingRelease = new HostingRelease(&#34;defaultHostingRelease&#34;, HostingReleaseArgs.builder()        
 *             .siteId(defaultHostingSite.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message(&#34;Cloud Run Integration&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Firebasehosting Version Cloud Functions
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.HostingSite;
 * import com.pulumi.gcp.firebase.HostingSiteArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.cloudfunctions.Function;
 * import com.pulumi.gcp.cloudfunctions.FunctionArgs;
 * import com.pulumi.gcp.firebase.HostingVersion;
 * import com.pulumi.gcp.firebase.HostingVersionArgs;
 * import com.pulumi.gcp.firebase.inputs.HostingVersionConfigArgs;
 * import com.pulumi.gcp.firebase.HostingRelease;
 * import com.pulumi.gcp.firebase.HostingReleaseArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import com.pulumi.asset.FileAsset;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHostingSite = new HostingSite(&#34;defaultHostingSite&#34;, HostingSiteArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .siteId(&#34;site-id&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var bucket = new Bucket(&#34;bucket&#34;, BucketArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .location(&#34;US&#34;)
 *             .uniformBucketLevelAccess(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var object = new BucketObject(&#34;object&#34;, BucketObjectArgs.builder()        
 *             .bucket(bucket.name())
 *             .source(new FileAsset(&#34;function-source.zip&#34;))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var function = new Function(&#34;function&#34;, FunctionArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .description(&#34;A Cloud Function connected to Firebase Hosing&#34;)
 *             .runtime(&#34;nodejs16&#34;)
 *             .availableMemoryMb(128)
 *             .sourceArchiveBucket(bucket.name())
 *             .sourceArchiveObject(object.name())
 *             .triggerHttp(true)
 *             .entryPoint(&#34;helloHttp&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHostingVersion = new HostingVersion(&#34;defaultHostingVersion&#34;, HostingVersionArgs.builder()        
 *             .siteId(defaultHostingSite.siteId())
 *             .config(HostingVersionConfigArgs.builder()
 *                 .rewrites(HostingVersionConfigRewriteArgs.builder()
 *                     .glob(&#34;/hello/**&#34;)
 *                     .function(function.name())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHostingRelease = new HostingRelease(&#34;defaultHostingRelease&#34;, HostingReleaseArgs.builder()        
 *             .siteId(defaultHostingSite.siteId())
 *             .versionName(defaultHostingVersion.name())
 *             .message(&#34;Cloud Functions Integration&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Version can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/hostingVersion:HostingVersion")
public class HostingVersion extends com.pulumi.resources.CustomResource {
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     * 
     */
    @Export(name="config", refs={HostingVersionConfig.class}, tree="[0]")
    private Output</* @Nullable */ HostingVersionConfig> config;

    /**
     * @return The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     * 
     */
    public Output<Optional<HostingVersionConfig>> config() {
        return Codegen.optional(this.config);
    }
    /**
     * The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Required. The ID of the site in which to create this Version.
     * 
     * ***
     * 
     */
    @Export(name="siteId", refs={String.class}, tree="[0]")
    private Output<String> siteId;

    /**
     * @return Required. The ID of the site in which to create this Version.
     * 
     * ***
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }
    /**
     * The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     * 
     */
    @Export(name="versionId", refs={String.class}, tree="[0]")
    private Output<String> versionId;

    /**
     * @return The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HostingVersion(String name) {
        this(name, HostingVersionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HostingVersion(String name, HostingVersionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HostingVersion(String name, HostingVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/hostingVersion:HostingVersion", name, args == null ? HostingVersionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private HostingVersion(String name, Output<String> id, @Nullable HostingVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/hostingVersion:HostingVersion", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HostingVersion get(String name, Output<String> id, @Nullable HostingVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HostingVersion(name, id, state, options);
    }
}
