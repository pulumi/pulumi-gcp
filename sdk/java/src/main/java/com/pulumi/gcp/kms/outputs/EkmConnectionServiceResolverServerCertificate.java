// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EkmConnectionServiceResolverServerCertificate {
    /**
     * @return (Output)
     * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return (Output)
     * Output only. The certificate is not valid after this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    private @Nullable String notAfterTime;
    /**
     * @return (Output)
     * Output only. The certificate is not valid before this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    private @Nullable String notBeforeTime;
    /**
     * @return (Output)
     * Output only. True if the certificate was parsed successfully.
     * 
     */
    private @Nullable Boolean parsed;
    /**
     * @return Required. The raw certificate bytes in DER format. A base64-encoded string.
     * 
     */
    private String rawDer;
    /**
     * @return (Output)
     * Output only. The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    private @Nullable String serialNumber;
    /**
     * @return (Output)
     * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    private @Nullable String sha256Fingerprint;
    /**
     * @return (Output)
     * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    private @Nullable String subject;
    /**
     * @return (Output)
     * Output only. The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    private @Nullable List<String> subjectAlternativeDnsNames;

    private EkmConnectionServiceResolverServerCertificate() {}
    /**
     * @return (Output)
     * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return (Output)
     * Output only. The certificate is not valid after this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<String> notAfterTime() {
        return Optional.ofNullable(this.notAfterTime);
    }
    /**
     * @return (Output)
     * Output only. The certificate is not valid before this time. Only present if parsed is true.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<String> notBeforeTime() {
        return Optional.ofNullable(this.notBeforeTime);
    }
    /**
     * @return (Output)
     * Output only. True if the certificate was parsed successfully.
     * 
     */
    public Optional<Boolean> parsed() {
        return Optional.ofNullable(this.parsed);
    }
    /**
     * @return Required. The raw certificate bytes in DER format. A base64-encoded string.
     * 
     */
    public String rawDer() {
        return this.rawDer;
    }
    /**
     * @return (Output)
     * Output only. The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    public Optional<String> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }
    /**
     * @return (Output)
     * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    public Optional<String> sha256Fingerprint() {
        return Optional.ofNullable(this.sha256Fingerprint);
    }
    /**
     * @return (Output)
     * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }
    /**
     * @return (Output)
     * Output only. The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    public List<String> subjectAlternativeDnsNames() {
        return this.subjectAlternativeDnsNames == null ? List.of() : this.subjectAlternativeDnsNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EkmConnectionServiceResolverServerCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String issuer;
        private @Nullable String notAfterTime;
        private @Nullable String notBeforeTime;
        private @Nullable Boolean parsed;
        private String rawDer;
        private @Nullable String serialNumber;
        private @Nullable String sha256Fingerprint;
        private @Nullable String subject;
        private @Nullable List<String> subjectAlternativeDnsNames;
        public Builder() {}
        public Builder(EkmConnectionServiceResolverServerCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.issuer = defaults.issuer;
    	      this.notAfterTime = defaults.notAfterTime;
    	      this.notBeforeTime = defaults.notBeforeTime;
    	      this.parsed = defaults.parsed;
    	      this.rawDer = defaults.rawDer;
    	      this.serialNumber = defaults.serialNumber;
    	      this.sha256Fingerprint = defaults.sha256Fingerprint;
    	      this.subject = defaults.subject;
    	      this.subjectAlternativeDnsNames = defaults.subjectAlternativeDnsNames;
        }

        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {

            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder notAfterTime(@Nullable String notAfterTime) {

            this.notAfterTime = notAfterTime;
            return this;
        }
        @CustomType.Setter
        public Builder notBeforeTime(@Nullable String notBeforeTime) {

            this.notBeforeTime = notBeforeTime;
            return this;
        }
        @CustomType.Setter
        public Builder parsed(@Nullable Boolean parsed) {

            this.parsed = parsed;
            return this;
        }
        @CustomType.Setter
        public Builder rawDer(String rawDer) {
            if (rawDer == null) {
              throw new MissingRequiredPropertyException("EkmConnectionServiceResolverServerCertificate", "rawDer");
            }
            this.rawDer = rawDer;
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(@Nullable String serialNumber) {

            this.serialNumber = serialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder sha256Fingerprint(@Nullable String sha256Fingerprint) {

            this.sha256Fingerprint = sha256Fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder subject(@Nullable String subject) {

            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder subjectAlternativeDnsNames(@Nullable List<String> subjectAlternativeDnsNames) {

            this.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
            return this;
        }
        public Builder subjectAlternativeDnsNames(String... subjectAlternativeDnsNames) {
            return subjectAlternativeDnsNames(List.of(subjectAlternativeDnsNames));
        }
        public EkmConnectionServiceResolverServerCertificate build() {
            final var _resultValue = new EkmConnectionServiceResolverServerCertificate();
            _resultValue.issuer = issuer;
            _resultValue.notAfterTime = notAfterTime;
            _resultValue.notBeforeTime = notBeforeTime;
            _resultValue.parsed = parsed;
            _resultValue.rawDer = rawDer;
            _resultValue.serialNumber = serialNumber;
            _resultValue.sha256Fingerprint = sha256Fingerprint;
            _resultValue.subject = subject;
            _resultValue.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
            return _resultValue;
        }
    }
}
