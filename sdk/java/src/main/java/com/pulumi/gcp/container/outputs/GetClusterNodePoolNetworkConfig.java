// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNetworkConfigNetworkPerformanceConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterNodePoolNetworkConfig {
    /**
     * @return We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
     * 
     */
    private List<GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfig> additionalNodeNetworkConfigs;
    /**
     * @return We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
     * 
     */
    private List<GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfig> additionalPodNetworkConfigs;
    /**
     * @return Whether to create a new range for pod IPs in this node pool. Defaults are provided for podRange and podIpv4CidrBlock if they are not specified.
     * 
     */
    private Boolean createPodRange;
    /**
     * @return Whether nodes have internal IP addresses only.
     * 
     */
    private Boolean enablePrivateNodes;
    /**
     * @return Network bandwidth tier configuration.
     * 
     */
    private List<GetClusterNodePoolNetworkConfigNetworkPerformanceConfig> networkPerformanceConfigs;
    /**
     * @return Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited
     * 
     */
    private List<GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfig> podCidrOverprovisionConfigs;
    /**
     * @return The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
     * 
     */
    private String podIpv4CidrBlock;
    /**
     * @return The ID of the secondary range for pod IPs. If createPodRange is true, this ID is used for the new range. If createPodRange is false, uses an existing secondary range with this ID.
     * 
     */
    private String podRange;
    /**
     * @return The subnetwork path for the node pool. Format: projects/{project}/regions/{region}/subnetworks/{subnetwork} . If the cluster is associated with multiple subnetworks, the subnetwork for the node pool is picked based on the IP utilization during node pool creation and is immutable.
     * 
     */
    private String subnetwork;

    private GetClusterNodePoolNetworkConfig() {}
    /**
     * @return We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
     * 
     */
    public List<GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfig> additionalNodeNetworkConfigs() {
        return this.additionalNodeNetworkConfigs;
    }
    /**
     * @return We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
     * 
     */
    public List<GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfig> additionalPodNetworkConfigs() {
        return this.additionalPodNetworkConfigs;
    }
    /**
     * @return Whether to create a new range for pod IPs in this node pool. Defaults are provided for podRange and podIpv4CidrBlock if they are not specified.
     * 
     */
    public Boolean createPodRange() {
        return this.createPodRange;
    }
    /**
     * @return Whether nodes have internal IP addresses only.
     * 
     */
    public Boolean enablePrivateNodes() {
        return this.enablePrivateNodes;
    }
    /**
     * @return Network bandwidth tier configuration.
     * 
     */
    public List<GetClusterNodePoolNetworkConfigNetworkPerformanceConfig> networkPerformanceConfigs() {
        return this.networkPerformanceConfigs;
    }
    /**
     * @return Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited
     * 
     */
    public List<GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfig> podCidrOverprovisionConfigs() {
        return this.podCidrOverprovisionConfigs;
    }
    /**
     * @return The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
     * 
     */
    public String podIpv4CidrBlock() {
        return this.podIpv4CidrBlock;
    }
    /**
     * @return The ID of the secondary range for pod IPs. If createPodRange is true, this ID is used for the new range. If createPodRange is false, uses an existing secondary range with this ID.
     * 
     */
    public String podRange() {
        return this.podRange;
    }
    /**
     * @return The subnetwork path for the node pool. Format: projects/{project}/regions/{region}/subnetworks/{subnetwork} . If the cluster is associated with multiple subnetworks, the subnetwork for the node pool is picked based on the IP utilization during node pool creation and is immutable.
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodePoolNetworkConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfig> additionalNodeNetworkConfigs;
        private List<GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfig> additionalPodNetworkConfigs;
        private Boolean createPodRange;
        private Boolean enablePrivateNodes;
        private List<GetClusterNodePoolNetworkConfigNetworkPerformanceConfig> networkPerformanceConfigs;
        private List<GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfig> podCidrOverprovisionConfigs;
        private String podIpv4CidrBlock;
        private String podRange;
        private String subnetwork;
        public Builder() {}
        public Builder(GetClusterNodePoolNetworkConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalNodeNetworkConfigs = defaults.additionalNodeNetworkConfigs;
    	      this.additionalPodNetworkConfigs = defaults.additionalPodNetworkConfigs;
    	      this.createPodRange = defaults.createPodRange;
    	      this.enablePrivateNodes = defaults.enablePrivateNodes;
    	      this.networkPerformanceConfigs = defaults.networkPerformanceConfigs;
    	      this.podCidrOverprovisionConfigs = defaults.podCidrOverprovisionConfigs;
    	      this.podIpv4CidrBlock = defaults.podIpv4CidrBlock;
    	      this.podRange = defaults.podRange;
    	      this.subnetwork = defaults.subnetwork;
        }

        @CustomType.Setter
        public Builder additionalNodeNetworkConfigs(List<GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfig> additionalNodeNetworkConfigs) {
            if (additionalNodeNetworkConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "additionalNodeNetworkConfigs");
            }
            this.additionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
            return this;
        }
        public Builder additionalNodeNetworkConfigs(GetClusterNodePoolNetworkConfigAdditionalNodeNetworkConfig... additionalNodeNetworkConfigs) {
            return additionalNodeNetworkConfigs(List.of(additionalNodeNetworkConfigs));
        }
        @CustomType.Setter
        public Builder additionalPodNetworkConfigs(List<GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfig> additionalPodNetworkConfigs) {
            if (additionalPodNetworkConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "additionalPodNetworkConfigs");
            }
            this.additionalPodNetworkConfigs = additionalPodNetworkConfigs;
            return this;
        }
        public Builder additionalPodNetworkConfigs(GetClusterNodePoolNetworkConfigAdditionalPodNetworkConfig... additionalPodNetworkConfigs) {
            return additionalPodNetworkConfigs(List.of(additionalPodNetworkConfigs));
        }
        @CustomType.Setter
        public Builder createPodRange(Boolean createPodRange) {
            if (createPodRange == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "createPodRange");
            }
            this.createPodRange = createPodRange;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            if (enablePrivateNodes == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "enablePrivateNodes");
            }
            this.enablePrivateNodes = enablePrivateNodes;
            return this;
        }
        @CustomType.Setter
        public Builder networkPerformanceConfigs(List<GetClusterNodePoolNetworkConfigNetworkPerformanceConfig> networkPerformanceConfigs) {
            if (networkPerformanceConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "networkPerformanceConfigs");
            }
            this.networkPerformanceConfigs = networkPerformanceConfigs;
            return this;
        }
        public Builder networkPerformanceConfigs(GetClusterNodePoolNetworkConfigNetworkPerformanceConfig... networkPerformanceConfigs) {
            return networkPerformanceConfigs(List.of(networkPerformanceConfigs));
        }
        @CustomType.Setter
        public Builder podCidrOverprovisionConfigs(List<GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfig> podCidrOverprovisionConfigs) {
            if (podCidrOverprovisionConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "podCidrOverprovisionConfigs");
            }
            this.podCidrOverprovisionConfigs = podCidrOverprovisionConfigs;
            return this;
        }
        public Builder podCidrOverprovisionConfigs(GetClusterNodePoolNetworkConfigPodCidrOverprovisionConfig... podCidrOverprovisionConfigs) {
            return podCidrOverprovisionConfigs(List.of(podCidrOverprovisionConfigs));
        }
        @CustomType.Setter
        public Builder podIpv4CidrBlock(String podIpv4CidrBlock) {
            if (podIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "podIpv4CidrBlock");
            }
            this.podIpv4CidrBlock = podIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder podRange(String podRange) {
            if (podRange == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "podRange");
            }
            this.podRange = podRange;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolNetworkConfig", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        public GetClusterNodePoolNetworkConfig build() {
            final var _resultValue = new GetClusterNodePoolNetworkConfig();
            _resultValue.additionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
            _resultValue.additionalPodNetworkConfigs = additionalPodNetworkConfigs;
            _resultValue.createPodRange = createPodRange;
            _resultValue.enablePrivateNodes = enablePrivateNodes;
            _resultValue.networkPerformanceConfigs = networkPerformanceConfigs;
            _resultValue.podCidrOverprovisionConfigs = podCidrOverprovisionConfigs;
            _resultValue.podIpv4CidrBlock = podIpv4CidrBlock;
            _resultValue.podRange = podRange;
            _resultValue.subnetwork = subnetwork;
            return _resultValue;
        }
    }
}
