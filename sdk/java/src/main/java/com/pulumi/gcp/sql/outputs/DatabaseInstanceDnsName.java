// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseInstanceDnsName {
    /**
     * @return The connection type of the DNS name. Can be either `PUBLIC`, `PRIVATE_SERVICES_ACCESS`, or `PRIVATE_SERVICE_CONNECT`.
     * 
     */
    private @Nullable String connectionType;
    /**
     * @return The scope that the DNS name applies to.
     * 
     */
    private @Nullable String dnsScope;
    /**
     * @return The name of the instance. If the name is left
     * blank, the provider will randomly generate one when the instance is first
     * created. This is done because after a name is used, it cannot be reused for
     * up to [one week](https://cloud.google.com/sql/docs/delete-instance).
     * 
     */
    private @Nullable String name;

    private DatabaseInstanceDnsName() {}
    /**
     * @return The connection type of the DNS name. Can be either `PUBLIC`, `PRIVATE_SERVICES_ACCESS`, or `PRIVATE_SERVICE_CONNECT`.
     * 
     */
    public Optional<String> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }
    /**
     * @return The scope that the DNS name applies to.
     * 
     */
    public Optional<String> dnsScope() {
        return Optional.ofNullable(this.dnsScope);
    }
    /**
     * @return The name of the instance. If the name is left
     * blank, the provider will randomly generate one when the instance is first
     * created. This is done because after a name is used, it cannot be reused for
     * up to [one week](https://cloud.google.com/sql/docs/delete-instance).
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseInstanceDnsName defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionType;
        private @Nullable String dnsScope;
        private @Nullable String name;
        public Builder() {}
        public Builder(DatabaseInstanceDnsName defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionType = defaults.connectionType;
    	      this.dnsScope = defaults.dnsScope;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder connectionType(@Nullable String connectionType) {

            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder dnsScope(@Nullable String dnsScope) {

            this.dnsScope = dnsScope;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        public DatabaseInstanceDnsName build() {
            final var _resultValue = new DatabaseInstanceDnsName();
            _resultValue.connectionType = connectionType;
            _resultValue.dnsScope = dnsScope;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
