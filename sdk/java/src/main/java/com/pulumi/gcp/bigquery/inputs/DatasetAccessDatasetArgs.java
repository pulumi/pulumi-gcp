// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.DatasetAccessDatasetDatasetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DatasetAccessDatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetAccessDatasetArgs Empty = new DatasetAccessDatasetArgs();

    /**
     * The dataset this entry applies to
     * Structure is documented below.
     * 
     */
    @Import(name="dataset", required=true)
    private Output<DatasetAccessDatasetDatasetArgs> dataset;

    /**
     * @return The dataset this entry applies to
     * Structure is documented below.
     * 
     */
    public Output<DatasetAccessDatasetDatasetArgs> dataset() {
        return this.dataset;
    }

    /**
     * Which resources in the dataset this entry applies to. Currently, only views are supported,
     * but additional target types may be added in the future. Possible values: VIEWS
     * 
     */
    @Import(name="targetTypes", required=true)
    private Output<List<String>> targetTypes;

    /**
     * @return Which resources in the dataset this entry applies to. Currently, only views are supported,
     * but additional target types may be added in the future. Possible values: VIEWS
     * 
     */
    public Output<List<String>> targetTypes() {
        return this.targetTypes;
    }

    private DatasetAccessDatasetArgs() {}

    private DatasetAccessDatasetArgs(DatasetAccessDatasetArgs $) {
        this.dataset = $.dataset;
        this.targetTypes = $.targetTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetAccessDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetAccessDatasetArgs $;

        public Builder() {
            $ = new DatasetAccessDatasetArgs();
        }

        public Builder(DatasetAccessDatasetArgs defaults) {
            $ = new DatasetAccessDatasetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataset The dataset this entry applies to
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataset(Output<DatasetAccessDatasetDatasetArgs> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset The dataset this entry applies to
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataset(DatasetAccessDatasetDatasetArgs dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param targetTypes Which resources in the dataset this entry applies to. Currently, only views are supported,
         * but additional target types may be added in the future. Possible values: VIEWS
         * 
         * @return builder
         * 
         */
        public Builder targetTypes(Output<List<String>> targetTypes) {
            $.targetTypes = targetTypes;
            return this;
        }

        /**
         * @param targetTypes Which resources in the dataset this entry applies to. Currently, only views are supported,
         * but additional target types may be added in the future. Possible values: VIEWS
         * 
         * @return builder
         * 
         */
        public Builder targetTypes(List<String> targetTypes) {
            return targetTypes(Output.of(targetTypes));
        }

        /**
         * @param targetTypes Which resources in the dataset this entry applies to. Currently, only views are supported,
         * but additional target types may be added in the future. Possible values: VIEWS
         * 
         * @return builder
         * 
         */
        public Builder targetTypes(String... targetTypes) {
            return targetTypes(List.of(targetTypes));
        }

        public DatasetAccessDatasetArgs build() {
            $.dataset = Objects.requireNonNull($.dataset, "expected parameter 'dataset' to be non-null");
            $.targetTypes = Objects.requireNonNull($.targetTypes, "expected parameter 'targetTypes' to be non-null");
            return $;
        }
    }

}
