// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apihub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apihub.inputs.PluginInstanceAuthConfigApiKeyConfigApiKeyArgs;
import java.lang.String;
import java.util.Objects;


public final class PluginInstanceAuthConfigApiKeyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluginInstanceAuthConfigApiKeyConfigArgs Empty = new PluginInstanceAuthConfigApiKeyConfigArgs();

    /**
     * Secret provides a reference to entries in Secret Manager.
     * Structure is documented below.
     * 
     */
    @Import(name="apiKey", required=true)
    private Output<PluginInstanceAuthConfigApiKeyConfigApiKeyArgs> apiKey;

    /**
     * @return Secret provides a reference to entries in Secret Manager.
     * Structure is documented below.
     * 
     */
    public Output<PluginInstanceAuthConfigApiKeyConfigApiKeyArgs> apiKey() {
        return this.apiKey;
    }

    /**
     * The location of the API key.
     * The default value is QUERY.
     * Possible values:
     * HTTP_ELEMENT_LOCATION_UNSPECIFIED
     * QUERY
     * HEADER
     * PATH
     * BODY
     * COOKIE
     * 
     */
    @Import(name="httpElementLocation", required=true)
    private Output<String> httpElementLocation;

    /**
     * @return The location of the API key.
     * The default value is QUERY.
     * Possible values:
     * HTTP_ELEMENT_LOCATION_UNSPECIFIED
     * QUERY
     * HEADER
     * PATH
     * BODY
     * COOKIE
     * 
     */
    public Output<String> httpElementLocation() {
        return this.httpElementLocation;
    }

    /**
     * The parameter name of the API key.
     * E.g. If the API request is &#34;https://example.com/act?api_key=&#34;,
     * &#34;api_key&#34; would be the parameter name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The parameter name of the API key.
     * E.g. If the API request is &#34;https://example.com/act?api_key=&#34;,
     * &#34;api_key&#34; would be the parameter name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private PluginInstanceAuthConfigApiKeyConfigArgs() {}

    private PluginInstanceAuthConfigApiKeyConfigArgs(PluginInstanceAuthConfigApiKeyConfigArgs $) {
        this.apiKey = $.apiKey;
        this.httpElementLocation = $.httpElementLocation;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginInstanceAuthConfigApiKeyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginInstanceAuthConfigApiKeyConfigArgs $;

        public Builder() {
            $ = new PluginInstanceAuthConfigApiKeyConfigArgs();
        }

        public Builder(PluginInstanceAuthConfigApiKeyConfigArgs defaults) {
            $ = new PluginInstanceAuthConfigApiKeyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey Secret provides a reference to entries in Secret Manager.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Output<PluginInstanceAuthConfigApiKeyConfigApiKeyArgs> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey Secret provides a reference to entries in Secret Manager.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(PluginInstanceAuthConfigApiKeyConfigApiKeyArgs apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param httpElementLocation The location of the API key.
         * The default value is QUERY.
         * Possible values:
         * HTTP_ELEMENT_LOCATION_UNSPECIFIED
         * QUERY
         * HEADER
         * PATH
         * BODY
         * COOKIE
         * 
         * @return builder
         * 
         */
        public Builder httpElementLocation(Output<String> httpElementLocation) {
            $.httpElementLocation = httpElementLocation;
            return this;
        }

        /**
         * @param httpElementLocation The location of the API key.
         * The default value is QUERY.
         * Possible values:
         * HTTP_ELEMENT_LOCATION_UNSPECIFIED
         * QUERY
         * HEADER
         * PATH
         * BODY
         * COOKIE
         * 
         * @return builder
         * 
         */
        public Builder httpElementLocation(String httpElementLocation) {
            return httpElementLocation(Output.of(httpElementLocation));
        }

        /**
         * @param name The parameter name of the API key.
         * E.g. If the API request is &#34;https://example.com/act?api_key=&#34;,
         * &#34;api_key&#34; would be the parameter name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The parameter name of the API key.
         * E.g. If the API request is &#34;https://example.com/act?api_key=&#34;,
         * &#34;api_key&#34; would be the parameter name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PluginInstanceAuthConfigApiKeyConfigArgs build() {
            if ($.apiKey == null) {
                throw new MissingRequiredPropertyException("PluginInstanceAuthConfigApiKeyConfigArgs", "apiKey");
            }
            if ($.httpElementLocation == null) {
                throw new MissingRequiredPropertyException("PluginInstanceAuthConfigApiKeyConfigArgs", "httpElementLocation");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("PluginInstanceAuthConfigApiKeyConfigArgs", "name");
            }
            return $;
        }
    }

}
