// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceSchemaModifiedCadenceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs Empty = new PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs();

    /**
     * Data changes in Cloud Storage can&#39;t trigger reprofiling. If you set this field, profiles are refreshed at this frequency regardless of whether the underlying buckets have changes. Defaults to never.
     * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
     * 
     */
    @Import(name="refreshFrequency")
    private @Nullable Output<String> refreshFrequency;

    /**
     * @return Data changes in Cloud Storage can&#39;t trigger reprofiling. If you set this field, profiles are refreshed at this frequency regardless of whether the underlying buckets have changes. Defaults to never.
     * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
     * 
     */
    public Optional<Output<String>> refreshFrequency() {
        return Optional.ofNullable(this.refreshFrequency);
    }

    /**
     * Governs when to update data profiles when a schema is modified
     * Structure is documented below.
     * 
     */
    @Import(name="schemaModifiedCadence")
    private @Nullable Output<PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceSchemaModifiedCadenceArgs> schemaModifiedCadence;

    /**
     * @return Governs when to update data profiles when a schema is modified
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceSchemaModifiedCadenceArgs>> schemaModifiedCadence() {
        return Optional.ofNullable(this.schemaModifiedCadence);
    }

    private PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs() {}

    private PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs(PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs $) {
        this.refreshFrequency = $.refreshFrequency;
        this.schemaModifiedCadence = $.schemaModifiedCadence;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs $;

        public Builder() {
            $ = new PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs();
        }

        public Builder(PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs defaults) {
            $ = new PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param refreshFrequency Data changes in Cloud Storage can&#39;t trigger reprofiling. If you set this field, profiles are refreshed at this frequency regardless of whether the underlying buckets have changes. Defaults to never.
         * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder refreshFrequency(@Nullable Output<String> refreshFrequency) {
            $.refreshFrequency = refreshFrequency;
            return this;
        }

        /**
         * @param refreshFrequency Data changes in Cloud Storage can&#39;t trigger reprofiling. If you set this field, profiles are refreshed at this frequency regardless of whether the underlying buckets have changes. Defaults to never.
         * Possible values are: `UPDATE_FREQUENCY_NEVER`, `UPDATE_FREQUENCY_DAILY`, `UPDATE_FREQUENCY_MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder refreshFrequency(String refreshFrequency) {
            return refreshFrequency(Output.of(refreshFrequency));
        }

        /**
         * @param schemaModifiedCadence Governs when to update data profiles when a schema is modified
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schemaModifiedCadence(@Nullable Output<PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceSchemaModifiedCadenceArgs> schemaModifiedCadence) {
            $.schemaModifiedCadence = schemaModifiedCadence;
            return this;
        }

        /**
         * @param schemaModifiedCadence Governs when to update data profiles when a schema is modified
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder schemaModifiedCadence(PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceSchemaModifiedCadenceArgs schemaModifiedCadence) {
            return schemaModifiedCadence(Output.of(schemaModifiedCadence));
        }

        public PreventionDiscoveryConfigTargetCloudSqlTargetGenerationCadenceArgs build() {
            return $;
        }
    }

}
