// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.InstanceGroupManagerStatusAllInstancesConfig;
import com.pulumi.gcp.compute.outputs.InstanceGroupManagerStatusStateful;
import com.pulumi.gcp.compute.outputs.InstanceGroupManagerStatusVersionTarget;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceGroupManagerStatus {
    /**
     * @return )
     * Properties to set on all instances in the group. After setting
     * allInstancesConfig on the group, you must update the group&#39;s instances to
     * apply the configuration.
     * 
     */
    private @Nullable List<InstanceGroupManagerStatusAllInstancesConfig> allInstancesConfigs;
    /**
     * @return A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
     * 
     */
    private @Nullable Boolean isStable;
    /**
     * @return Stateful status of the given Instance Group Manager.
     * 
     */
    private @Nullable List<InstanceGroupManagerStatusStateful> statefuls;
    /**
     * @return A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances&#39; target version are specified by version field on Instance Group Manager.
     * 
     */
    private @Nullable List<InstanceGroupManagerStatusVersionTarget> versionTargets;

    private InstanceGroupManagerStatus() {}
    /**
     * @return )
     * Properties to set on all instances in the group. After setting
     * allInstancesConfig on the group, you must update the group&#39;s instances to
     * apply the configuration.
     * 
     */
    public List<InstanceGroupManagerStatusAllInstancesConfig> allInstancesConfigs() {
        return this.allInstancesConfigs == null ? List.of() : this.allInstancesConfigs;
    }
    /**
     * @return A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
     * 
     */
    public Optional<Boolean> isStable() {
        return Optional.ofNullable(this.isStable);
    }
    /**
     * @return Stateful status of the given Instance Group Manager.
     * 
     */
    public List<InstanceGroupManagerStatusStateful> statefuls() {
        return this.statefuls == null ? List.of() : this.statefuls;
    }
    /**
     * @return A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances&#39; target version are specified by version field on Instance Group Manager.
     * 
     */
    public List<InstanceGroupManagerStatusVersionTarget> versionTargets() {
        return this.versionTargets == null ? List.of() : this.versionTargets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceGroupManagerStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<InstanceGroupManagerStatusAllInstancesConfig> allInstancesConfigs;
        private @Nullable Boolean isStable;
        private @Nullable List<InstanceGroupManagerStatusStateful> statefuls;
        private @Nullable List<InstanceGroupManagerStatusVersionTarget> versionTargets;
        public Builder() {}
        public Builder(InstanceGroupManagerStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allInstancesConfigs = defaults.allInstancesConfigs;
    	      this.isStable = defaults.isStable;
    	      this.statefuls = defaults.statefuls;
    	      this.versionTargets = defaults.versionTargets;
        }

        @CustomType.Setter
        public Builder allInstancesConfigs(@Nullable List<InstanceGroupManagerStatusAllInstancesConfig> allInstancesConfigs) {
            this.allInstancesConfigs = allInstancesConfigs;
            return this;
        }
        public Builder allInstancesConfigs(InstanceGroupManagerStatusAllInstancesConfig... allInstancesConfigs) {
            return allInstancesConfigs(List.of(allInstancesConfigs));
        }
        @CustomType.Setter
        public Builder isStable(@Nullable Boolean isStable) {
            this.isStable = isStable;
            return this;
        }
        @CustomType.Setter
        public Builder statefuls(@Nullable List<InstanceGroupManagerStatusStateful> statefuls) {
            this.statefuls = statefuls;
            return this;
        }
        public Builder statefuls(InstanceGroupManagerStatusStateful... statefuls) {
            return statefuls(List.of(statefuls));
        }
        @CustomType.Setter
        public Builder versionTargets(@Nullable List<InstanceGroupManagerStatusVersionTarget> versionTargets) {
            this.versionTargets = versionTargets;
            return this;
        }
        public Builder versionTargets(InstanceGroupManagerStatusVersionTarget... versionTargets) {
            return versionTargets(List.of(versionTargets));
        }
        public InstanceGroupManagerStatus build() {
            final var o = new InstanceGroupManagerStatus();
            o.allInstancesConfigs = allInstancesConfigs;
            o.isStable = isStable;
            o.statefuls = statefuls;
            o.versionTargets = versionTargets;
            return o;
        }
    }
}
