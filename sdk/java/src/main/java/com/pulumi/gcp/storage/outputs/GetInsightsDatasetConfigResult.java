// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigExcludeCloudStorageBucket;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigExcludeCloudStorageLocation;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigIdentity;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigIncludeCloudStorageBucket;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigIncludeCloudStorageLocation;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigLink;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigSourceFolder;
import com.pulumi.gcp.storage.outputs.GetInsightsDatasetConfigSourceProject;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInsightsDatasetConfigResult {
    private String createTime;
    private String datasetConfigId;
    private String datasetConfigState;
    private String description;
    private List<GetInsightsDatasetConfigExcludeCloudStorageBucket> excludeCloudStorageBuckets;
    private List<GetInsightsDatasetConfigExcludeCloudStorageLocation> excludeCloudStorageLocations;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetInsightsDatasetConfigIdentity> identities;
    private List<GetInsightsDatasetConfigIncludeCloudStorageBucket> includeCloudStorageBuckets;
    private List<GetInsightsDatasetConfigIncludeCloudStorageLocation> includeCloudStorageLocations;
    private Boolean includeNewlyCreatedBuckets;
    private Boolean linkDataset;
    private List<GetInsightsDatasetConfigLink> links;
    private String location;
    private String name;
    private String organizationNumber;
    private Boolean organizationScope;
    private @Nullable String project;
    private Integer retentionPeriodDays;
    private List<GetInsightsDatasetConfigSourceFolder> sourceFolders;
    private List<GetInsightsDatasetConfigSourceProject> sourceProjects;
    private String uid;
    private String updateTime;

    private GetInsightsDatasetConfigResult() {}
    public String createTime() {
        return this.createTime;
    }
    public String datasetConfigId() {
        return this.datasetConfigId;
    }
    public String datasetConfigState() {
        return this.datasetConfigState;
    }
    public String description() {
        return this.description;
    }
    public List<GetInsightsDatasetConfigExcludeCloudStorageBucket> excludeCloudStorageBuckets() {
        return this.excludeCloudStorageBuckets;
    }
    public List<GetInsightsDatasetConfigExcludeCloudStorageLocation> excludeCloudStorageLocations() {
        return this.excludeCloudStorageLocations;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetInsightsDatasetConfigIdentity> identities() {
        return this.identities;
    }
    public List<GetInsightsDatasetConfigIncludeCloudStorageBucket> includeCloudStorageBuckets() {
        return this.includeCloudStorageBuckets;
    }
    public List<GetInsightsDatasetConfigIncludeCloudStorageLocation> includeCloudStorageLocations() {
        return this.includeCloudStorageLocations;
    }
    public Boolean includeNewlyCreatedBuckets() {
        return this.includeNewlyCreatedBuckets;
    }
    public Boolean linkDataset() {
        return this.linkDataset;
    }
    public List<GetInsightsDatasetConfigLink> links() {
        return this.links;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String organizationNumber() {
        return this.organizationNumber;
    }
    public Boolean organizationScope() {
        return this.organizationScope;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Integer retentionPeriodDays() {
        return this.retentionPeriodDays;
    }
    public List<GetInsightsDatasetConfigSourceFolder> sourceFolders() {
        return this.sourceFolders;
    }
    public List<GetInsightsDatasetConfigSourceProject> sourceProjects() {
        return this.sourceProjects;
    }
    public String uid() {
        return this.uid;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInsightsDatasetConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String datasetConfigId;
        private String datasetConfigState;
        private String description;
        private List<GetInsightsDatasetConfigExcludeCloudStorageBucket> excludeCloudStorageBuckets;
        private List<GetInsightsDatasetConfigExcludeCloudStorageLocation> excludeCloudStorageLocations;
        private String id;
        private List<GetInsightsDatasetConfigIdentity> identities;
        private List<GetInsightsDatasetConfigIncludeCloudStorageBucket> includeCloudStorageBuckets;
        private List<GetInsightsDatasetConfigIncludeCloudStorageLocation> includeCloudStorageLocations;
        private Boolean includeNewlyCreatedBuckets;
        private Boolean linkDataset;
        private List<GetInsightsDatasetConfigLink> links;
        private String location;
        private String name;
        private String organizationNumber;
        private Boolean organizationScope;
        private @Nullable String project;
        private Integer retentionPeriodDays;
        private List<GetInsightsDatasetConfigSourceFolder> sourceFolders;
        private List<GetInsightsDatasetConfigSourceProject> sourceProjects;
        private String uid;
        private String updateTime;
        public Builder() {}
        public Builder(GetInsightsDatasetConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.datasetConfigId = defaults.datasetConfigId;
    	      this.datasetConfigState = defaults.datasetConfigState;
    	      this.description = defaults.description;
    	      this.excludeCloudStorageBuckets = defaults.excludeCloudStorageBuckets;
    	      this.excludeCloudStorageLocations = defaults.excludeCloudStorageLocations;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.includeCloudStorageBuckets = defaults.includeCloudStorageBuckets;
    	      this.includeCloudStorageLocations = defaults.includeCloudStorageLocations;
    	      this.includeNewlyCreatedBuckets = defaults.includeNewlyCreatedBuckets;
    	      this.linkDataset = defaults.linkDataset;
    	      this.links = defaults.links;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.organizationNumber = defaults.organizationNumber;
    	      this.organizationScope = defaults.organizationScope;
    	      this.project = defaults.project;
    	      this.retentionPeriodDays = defaults.retentionPeriodDays;
    	      this.sourceFolders = defaults.sourceFolders;
    	      this.sourceProjects = defaults.sourceProjects;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder datasetConfigId(String datasetConfigId) {
            if (datasetConfigId == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "datasetConfigId");
            }
            this.datasetConfigId = datasetConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder datasetConfigState(String datasetConfigState) {
            if (datasetConfigState == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "datasetConfigState");
            }
            this.datasetConfigState = datasetConfigState;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder excludeCloudStorageBuckets(List<GetInsightsDatasetConfigExcludeCloudStorageBucket> excludeCloudStorageBuckets) {
            if (excludeCloudStorageBuckets == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "excludeCloudStorageBuckets");
            }
            this.excludeCloudStorageBuckets = excludeCloudStorageBuckets;
            return this;
        }
        public Builder excludeCloudStorageBuckets(GetInsightsDatasetConfigExcludeCloudStorageBucket... excludeCloudStorageBuckets) {
            return excludeCloudStorageBuckets(List.of(excludeCloudStorageBuckets));
        }
        @CustomType.Setter
        public Builder excludeCloudStorageLocations(List<GetInsightsDatasetConfigExcludeCloudStorageLocation> excludeCloudStorageLocations) {
            if (excludeCloudStorageLocations == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "excludeCloudStorageLocations");
            }
            this.excludeCloudStorageLocations = excludeCloudStorageLocations;
            return this;
        }
        public Builder excludeCloudStorageLocations(GetInsightsDatasetConfigExcludeCloudStorageLocation... excludeCloudStorageLocations) {
            return excludeCloudStorageLocations(List.of(excludeCloudStorageLocations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetInsightsDatasetConfigIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetInsightsDatasetConfigIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder includeCloudStorageBuckets(List<GetInsightsDatasetConfigIncludeCloudStorageBucket> includeCloudStorageBuckets) {
            if (includeCloudStorageBuckets == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "includeCloudStorageBuckets");
            }
            this.includeCloudStorageBuckets = includeCloudStorageBuckets;
            return this;
        }
        public Builder includeCloudStorageBuckets(GetInsightsDatasetConfigIncludeCloudStorageBucket... includeCloudStorageBuckets) {
            return includeCloudStorageBuckets(List.of(includeCloudStorageBuckets));
        }
        @CustomType.Setter
        public Builder includeCloudStorageLocations(List<GetInsightsDatasetConfigIncludeCloudStorageLocation> includeCloudStorageLocations) {
            if (includeCloudStorageLocations == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "includeCloudStorageLocations");
            }
            this.includeCloudStorageLocations = includeCloudStorageLocations;
            return this;
        }
        public Builder includeCloudStorageLocations(GetInsightsDatasetConfigIncludeCloudStorageLocation... includeCloudStorageLocations) {
            return includeCloudStorageLocations(List.of(includeCloudStorageLocations));
        }
        @CustomType.Setter
        public Builder includeNewlyCreatedBuckets(Boolean includeNewlyCreatedBuckets) {
            if (includeNewlyCreatedBuckets == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "includeNewlyCreatedBuckets");
            }
            this.includeNewlyCreatedBuckets = includeNewlyCreatedBuckets;
            return this;
        }
        @CustomType.Setter
        public Builder linkDataset(Boolean linkDataset) {
            if (linkDataset == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "linkDataset");
            }
            this.linkDataset = linkDataset;
            return this;
        }
        @CustomType.Setter
        public Builder links(List<GetInsightsDatasetConfigLink> links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "links");
            }
            this.links = links;
            return this;
        }
        public Builder links(GetInsightsDatasetConfigLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder organizationNumber(String organizationNumber) {
            if (organizationNumber == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "organizationNumber");
            }
            this.organizationNumber = organizationNumber;
            return this;
        }
        @CustomType.Setter
        public Builder organizationScope(Boolean organizationScope) {
            if (organizationScope == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "organizationScope");
            }
            this.organizationScope = organizationScope;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriodDays(Integer retentionPeriodDays) {
            if (retentionPeriodDays == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "retentionPeriodDays");
            }
            this.retentionPeriodDays = retentionPeriodDays;
            return this;
        }
        @CustomType.Setter
        public Builder sourceFolders(List<GetInsightsDatasetConfigSourceFolder> sourceFolders) {
            if (sourceFolders == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "sourceFolders");
            }
            this.sourceFolders = sourceFolders;
            return this;
        }
        public Builder sourceFolders(GetInsightsDatasetConfigSourceFolder... sourceFolders) {
            return sourceFolders(List.of(sourceFolders));
        }
        @CustomType.Setter
        public Builder sourceProjects(List<GetInsightsDatasetConfigSourceProject> sourceProjects) {
            if (sourceProjects == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "sourceProjects");
            }
            this.sourceProjects = sourceProjects;
            return this;
        }
        public Builder sourceProjects(GetInsightsDatasetConfigSourceProject... sourceProjects) {
            return sourceProjects(List.of(sourceProjects));
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetInsightsDatasetConfigResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetInsightsDatasetConfigResult build() {
            final var _resultValue = new GetInsightsDatasetConfigResult();
            _resultValue.createTime = createTime;
            _resultValue.datasetConfigId = datasetConfigId;
            _resultValue.datasetConfigState = datasetConfigState;
            _resultValue.description = description;
            _resultValue.excludeCloudStorageBuckets = excludeCloudStorageBuckets;
            _resultValue.excludeCloudStorageLocations = excludeCloudStorageLocations;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.includeCloudStorageBuckets = includeCloudStorageBuckets;
            _resultValue.includeCloudStorageLocations = includeCloudStorageLocations;
            _resultValue.includeNewlyCreatedBuckets = includeNewlyCreatedBuckets;
            _resultValue.linkDataset = linkDataset;
            _resultValue.links = links;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.organizationNumber = organizationNumber;
            _resultValue.organizationScope = organizationScope;
            _resultValue.project = project;
            _resultValue.retentionPeriodDays = retentionPeriodDays;
            _resultValue.sourceFolders = sourceFolders;
            _resultValue.sourceProjects = sourceProjects;
            _resultValue.uid = uid;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
