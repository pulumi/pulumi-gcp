// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.SubnetworkLogConfigArgs;
import com.pulumi.gcp.compute.inputs.SubnetworkParamsArgs;
import com.pulumi.gcp.compute.inputs.SubnetworkSecondaryIpRangeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetworkState extends com.pulumi.resources.ResourceArgs {

    public static final SubnetworkState Empty = new SubnetworkState();

    /**
     * Typically packets destined to IPs within the subnetwork range that do not match
     * existing resources are dropped and prevented from leaving the VPC.
     * Setting this field to true will allow these packets to match dynamic routes injected
     * via BGP even if their destinations match existing subnet ranges.
     * 
     */
    @Import(name="allowSubnetCidrRoutesOverlap")
    private @Nullable Output<Boolean> allowSubnetCidrRoutesOverlap;

    /**
     * @return Typically packets destined to IPs within the subnetwork range that do not match
     * existing resources are dropped and prevented from leaving the VPC.
     * Setting this field to true will allow these packets to match dynamic routes injected
     * via BGP even if their destinations match existing subnet ranges.
     * 
     */
    public Optional<Output<Boolean>> allowSubnetCidrRoutesOverlap() {
        return Optional.ofNullable(this.allowSubnetCidrRoutesOverlap);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource. This field can be set only at resource
     * creation time.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource. This field can be set only at resource
     * creation time.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The range of external IPv6 addresses that are owned by this subnetwork.
     * 
     */
    @Import(name="externalIpv6Prefix")
    private @Nullable Output<String> externalIpv6Prefix;

    /**
     * @return The range of external IPv6 addresses that are owned by this subnetwork.
     * 
     */
    public Optional<Output<String>> externalIpv6Prefix() {
        return Optional.ofNullable(this.externalIpv6Prefix);
    }

    /**
     * Fingerprint of this resource. This field is used internally during updates of this resource.
     * 
     * @deprecated
     * This field is not useful for users, and has been removed as an output.
     * 
     */
    @Deprecated /* This field is not useful for users, and has been removed as an output. */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. This field is used internally during updates of this resource.
     * 
     * @deprecated
     * This field is not useful for users, and has been removed as an output.
     * 
     */
    @Deprecated /* This field is not useful for users, and has been removed as an output. */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The gateway address for default routes to reach destination addresses
     * outside this subnetwork.
     * 
     */
    @Import(name="gatewayAddress")
    private @Nullable Output<String> gatewayAddress;

    /**
     * @return The gateway address for default routes to reach destination addresses
     * outside this subnetwork.
     * 
     */
    public Optional<Output<String>> gatewayAddress() {
        return Optional.ofNullable(this.gatewayAddress);
    }

    /**
     * The internal IPv6 address range that is assigned to this subnetwork.
     * 
     */
    @Import(name="internalIpv6Prefix")
    private @Nullable Output<String> internalIpv6Prefix;

    /**
     * @return The internal IPv6 address range that is assigned to this subnetwork.
     * 
     */
    public Optional<Output<String>> internalIpv6Prefix() {
        return Optional.ofNullable(this.internalIpv6Prefix);
    }

    /**
     * The range of internal addresses that are owned by this subnetwork.
     * Provide this property when you create the subnetwork. For example,
     * 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
     * non-overlapping within a network. Only IPv4 is supported.
     * Field is optional when `reserved_internal_range` is defined, otherwise required.
     * 
     */
    @Import(name="ipCidrRange")
    private @Nullable Output<String> ipCidrRange;

    /**
     * @return The range of internal addresses that are owned by this subnetwork.
     * Provide this property when you create the subnetwork. For example,
     * 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
     * non-overlapping within a network. Only IPv4 is supported.
     * Field is optional when `reserved_internal_range` is defined, otherwise required.
     * 
     */
    public Optional<Output<String>> ipCidrRange() {
        return Optional.ofNullable(this.ipCidrRange);
    }

    /**
     * Resource reference of a PublicDelegatedPrefix. The PDP must be a sub-PDP
     * in EXTERNAL_IPV6_SUBNETWORK_CREATION mode.
     * Use one of the following formats to specify a sub-PDP when creating an
     * IPv6 NetLB forwarding rule using BYOIP:
     * Full resource URL, as in:
     * * `https://www.googleapis.com/compute/v1/projects/{{projectId}}/regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
     *   Partial URL, as in:
     * * `projects/{{projectId}}/regions/region/publicDelegatedPrefixes/{{sub-pdp-name}}`
     * * `regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
     * 
     */
    @Import(name="ipCollection")
    private @Nullable Output<String> ipCollection;

    /**
     * @return Resource reference of a PublicDelegatedPrefix. The PDP must be a sub-PDP
     * in EXTERNAL_IPV6_SUBNETWORK_CREATION mode.
     * Use one of the following formats to specify a sub-PDP when creating an
     * IPv6 NetLB forwarding rule using BYOIP:
     * Full resource URL, as in:
     * * `https://www.googleapis.com/compute/v1/projects/{{projectId}}/regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
     *   Partial URL, as in:
     * * `projects/{{projectId}}/regions/region/publicDelegatedPrefixes/{{sub-pdp-name}}`
     * * `regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
     * 
     */
    public Optional<Output<String>> ipCollection() {
        return Optional.ofNullable(this.ipCollection);
    }

    /**
     * The access type of IPv6 address this subnet holds. It&#39;s immutable and can only be specified during creation
     * or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
     * cannot enable direct path.
     * Possible values are: `EXTERNAL`, `INTERNAL`.
     * 
     */
    @Import(name="ipv6AccessType")
    private @Nullable Output<String> ipv6AccessType;

    /**
     * @return The access type of IPv6 address this subnet holds. It&#39;s immutable and can only be specified during creation
     * or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
     * cannot enable direct path.
     * Possible values are: `EXTERNAL`, `INTERNAL`.
     * 
     */
    public Optional<Output<String>> ipv6AccessType() {
        return Optional.ofNullable(this.ipv6AccessType);
    }

    /**
     * The range of internal IPv6 addresses that are owned by this subnetwork.
     * 
     */
    @Import(name="ipv6CidrRange")
    private @Nullable Output<String> ipv6CidrRange;

    /**
     * @return The range of internal IPv6 addresses that are owned by this subnetwork.
     * 
     */
    public Optional<Output<String>> ipv6CidrRange() {
        return Optional.ofNullable(this.ipv6CidrRange);
    }

    /**
     * Possible endpoints of this subnetwork. It can be one of the following:
     * * VM_ONLY: The subnetwork can be used for creating instances and IPv6 addresses with VM endpoint type. Such a subnetwork
     *   gets external IPv6 ranges from a public delegated prefix and cannot be used to create NetLb.
     * * VM_AND_FR: The subnetwork can be used for creating both VM instances and Forwarding Rules. It can also be used to reserve
     *   IPv6 addresses with both VM and FR endpoint types. Such a subnetwork gets its IPv6 range from Google IP Pool directly.
     * 
     */
    @Import(name="ipv6GceEndpoint")
    private @Nullable Output<String> ipv6GceEndpoint;

    /**
     * @return Possible endpoints of this subnetwork. It can be one of the following:
     * * VM_ONLY: The subnetwork can be used for creating instances and IPv6 addresses with VM endpoint type. Such a subnetwork
     *   gets external IPv6 ranges from a public delegated prefix and cannot be used to create NetLb.
     * * VM_AND_FR: The subnetwork can be used for creating both VM instances and Forwarding Rules. It can also be used to reserve
     *   IPv6 addresses with both VM and FR endpoint types. Such a subnetwork gets its IPv6 range from Google IP Pool directly.
     * 
     */
    public Optional<Output<String>> ipv6GceEndpoint() {
        return Optional.ofNullable(this.ipv6GceEndpoint);
    }

    /**
     * This field denotes the VPC flow logging options for this subnetwork. If
     * logging is enabled, logs are exported to Cloud Logging. Flow logging
     * isn&#39;t supported if the subnet `purpose` field is set to subnetwork is
     * `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<SubnetworkLogConfigArgs> logConfig;

    /**
     * @return This field denotes the VPC flow logging options for this subnetwork. If
     * logging is enabled, logs are exported to Cloud Logging. Flow logging
     * isn&#39;t supported if the subnet `purpose` field is set to subnetwork is
     * `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SubnetworkLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * The name of the resource, provided by the client when initially
     * creating the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which
     * means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the resource, provided by the client when initially
     * creating the resource. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters
     * long and match the regular expression `a-z?` which
     * means the first character must be a lowercase letter, and all
     * following characters must be a dash, lowercase letter, or digit,
     * except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network this subnet belongs to.
     * Only networks that are in the distributed mode can have subnetworks.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The network this subnet belongs to.
     * Only networks that are in the distributed mode can have subnetworks.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    @Import(name="params")
    private @Nullable Output<SubnetworkParamsArgs> params;

    /**
     * @return Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    public Optional<Output<SubnetworkParamsArgs>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * When enabled, VMs in this subnetwork without external IP addresses can
     * access Google APIs and services by using Private Google Access.
     * 
     */
    @Import(name="privateIpGoogleAccess")
    private @Nullable Output<Boolean> privateIpGoogleAccess;

    /**
     * @return When enabled, VMs in this subnetwork without external IP addresses can
     * access Google APIs and services by using Private Google Access.
     * 
     */
    public Optional<Output<Boolean>> privateIpGoogleAccess() {
        return Optional.ofNullable(this.privateIpGoogleAccess);
    }

    /**
     * The private IPv6 google access type for the VMs in this subnet.
     * 
     */
    @Import(name="privateIpv6GoogleAccess")
    private @Nullable Output<String> privateIpv6GoogleAccess;

    /**
     * @return The private IPv6 google access type for the VMs in this subnet.
     * 
     */
    public Optional<Output<String>> privateIpv6GoogleAccess() {
        return Optional.ofNullable(this.privateIpv6GoogleAccess);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The purpose of the resource. This field can be either `PRIVATE`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT`, `PEER_MIGRATION` or `PRIVATE_NAT`.
     * A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
     * A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
     * A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
     * A subnetwork with purpose set to `PEER_MIGRATION` is a user created subnetwork that is reserved for migrating resources from one peered network to another.
     * A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
     * Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
     * If unspecified, the purpose defaults to `PRIVATE`.
     * 
     */
    @Import(name="purpose")
    private @Nullable Output<String> purpose;

    /**
     * @return The purpose of the resource. This field can be either `PRIVATE`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT`, `PEER_MIGRATION` or `PRIVATE_NAT`.
     * A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
     * A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
     * A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
     * A subnetwork with purpose set to `PEER_MIGRATION` is a user created subnetwork that is reserved for migrating resources from one peered network to another.
     * A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
     * Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
     * If unspecified, the purpose defaults to `PRIVATE`.
     * 
     */
    public Optional<Output<String>> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * The GCP region for this subnetwork.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The GCP region for this subnetwork.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
     * E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
     * 
     */
    @Import(name="reservedInternalRange")
    private @Nullable Output<String> reservedInternalRange;

    /**
     * @return The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
     * E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
     * 
     */
    public Optional<Output<String>> reservedInternalRange() {
        return Optional.ofNullable(this.reservedInternalRange);
    }

    /**
     * The role of subnetwork.
     * Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
     * The value can be set to `ACTIVE` or `BACKUP`.
     * An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
     * A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
     * Possible values are: `ACTIVE`, `BACKUP`.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of subnetwork.
     * Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
     * The value can be set to `ACTIVE` or `BACKUP`.
     * An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
     * A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
     * Possible values are: `ACTIVE`, `BACKUP`.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * An array of configurations for secondary IP ranges for VM instances
     * contained in this subnetwork. The primary IP of such VM must belong
     * to the primary ipCidrRange of the subnetwork. The alias IPs may belong
     * to either primary or secondary ranges.
     * Structure is documented below.
     * 
     */
    @Import(name="secondaryIpRanges")
    private @Nullable Output<List<SubnetworkSecondaryIpRangeArgs>> secondaryIpRanges;

    /**
     * @return An array of configurations for secondary IP ranges for VM instances
     * contained in this subnetwork. The primary IP of such VM must belong
     * to the primary ipCidrRange of the subnetwork. The alias IPs may belong
     * to either primary or secondary ranges.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<SubnetworkSecondaryIpRangeArgs>>> secondaryIpRanges() {
        return Optional.ofNullable(this.secondaryIpRanges);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Controls the removal behavior of secondary_ip_range.
     * When false, removing secondary_ip_range from config will not produce a diff as
     * the provider will default to the API&#39;s value.
     * When true, the provider will treat removing secondary_ip_range as sending an
     * empty list of secondary IP ranges to the API.
     * Defaults to false.
     * 
     */
    @Import(name="sendSecondaryIpRangeIfEmpty")
    private @Nullable Output<Boolean> sendSecondaryIpRangeIfEmpty;

    /**
     * @return Controls the removal behavior of secondary_ip_range.
     * When false, removing secondary_ip_range from config will not produce a diff as
     * the provider will default to the API&#39;s value.
     * When true, the provider will treat removing secondary_ip_range as sending an
     * empty list of secondary IP ranges to the API.
     * Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> sendSecondaryIpRangeIfEmpty() {
        return Optional.ofNullable(this.sendSecondaryIpRangeIfEmpty);
    }

    /**
     * The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
     * If not specified IPV4_ONLY will be used.
     * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
     * 
     */
    @Import(name="stackType")
    private @Nullable Output<String> stackType;

    /**
     * @return The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
     * If not specified IPV4_ONLY will be used.
     * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
     * 
     */
    public Optional<Output<String>> stackType() {
        return Optional.ofNullable(this.stackType);
    }

    /**
     * &#39;The state of the subnetwork, which can be one of the following values:
     * READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose
     * set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained.
     * A subnetwork that is draining cannot be used or modified until it reaches a status of READY&#39;
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return &#39;The state of the subnetwork, which can be one of the following values:
     * READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose
     * set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained.
     * A subnetwork that is draining cannot be used or modified until it reaches a status of READY&#39;
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The unique identifier number for the resource. This identifier is defined by the server.
     * 
     */
    @Import(name="subnetworkId")
    private @Nullable Output<Integer> subnetworkId;

    /**
     * @return The unique identifier number for the resource. This identifier is defined by the server.
     * 
     */
    public Optional<Output<Integer>> subnetworkId() {
        return Optional.ofNullable(this.subnetworkId);
    }

    private SubnetworkState() {}

    private SubnetworkState(SubnetworkState $) {
        this.allowSubnetCidrRoutesOverlap = $.allowSubnetCidrRoutesOverlap;
        this.creationTimestamp = $.creationTimestamp;
        this.description = $.description;
        this.externalIpv6Prefix = $.externalIpv6Prefix;
        this.fingerprint = $.fingerprint;
        this.gatewayAddress = $.gatewayAddress;
        this.internalIpv6Prefix = $.internalIpv6Prefix;
        this.ipCidrRange = $.ipCidrRange;
        this.ipCollection = $.ipCollection;
        this.ipv6AccessType = $.ipv6AccessType;
        this.ipv6CidrRange = $.ipv6CidrRange;
        this.ipv6GceEndpoint = $.ipv6GceEndpoint;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.network = $.network;
        this.params = $.params;
        this.privateIpGoogleAccess = $.privateIpGoogleAccess;
        this.privateIpv6GoogleAccess = $.privateIpv6GoogleAccess;
        this.project = $.project;
        this.purpose = $.purpose;
        this.region = $.region;
        this.reservedInternalRange = $.reservedInternalRange;
        this.role = $.role;
        this.secondaryIpRanges = $.secondaryIpRanges;
        this.selfLink = $.selfLink;
        this.sendSecondaryIpRangeIfEmpty = $.sendSecondaryIpRangeIfEmpty;
        this.stackType = $.stackType;
        this.state = $.state;
        this.subnetworkId = $.subnetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetworkState $;

        public Builder() {
            $ = new SubnetworkState();
        }

        public Builder(SubnetworkState defaults) {
            $ = new SubnetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowSubnetCidrRoutesOverlap Typically packets destined to IPs within the subnetwork range that do not match
         * existing resources are dropped and prevented from leaving the VPC.
         * Setting this field to true will allow these packets to match dynamic routes injected
         * via BGP even if their destinations match existing subnet ranges.
         * 
         * @return builder
         * 
         */
        public Builder allowSubnetCidrRoutesOverlap(@Nullable Output<Boolean> allowSubnetCidrRoutesOverlap) {
            $.allowSubnetCidrRoutesOverlap = allowSubnetCidrRoutesOverlap;
            return this;
        }

        /**
         * @param allowSubnetCidrRoutesOverlap Typically packets destined to IPs within the subnetwork range that do not match
         * existing resources are dropped and prevented from leaving the VPC.
         * Setting this field to true will allow these packets to match dynamic routes injected
         * via BGP even if their destinations match existing subnet ranges.
         * 
         * @return builder
         * 
         */
        public Builder allowSubnetCidrRoutesOverlap(Boolean allowSubnetCidrRoutesOverlap) {
            return allowSubnetCidrRoutesOverlap(Output.of(allowSubnetCidrRoutesOverlap));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource. This field can be set only at resource
         * creation time.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource. This field can be set only at resource
         * creation time.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalIpv6Prefix The range of external IPv6 addresses that are owned by this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder externalIpv6Prefix(@Nullable Output<String> externalIpv6Prefix) {
            $.externalIpv6Prefix = externalIpv6Prefix;
            return this;
        }

        /**
         * @param externalIpv6Prefix The range of external IPv6 addresses that are owned by this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder externalIpv6Prefix(String externalIpv6Prefix) {
            return externalIpv6Prefix(Output.of(externalIpv6Prefix));
        }

        /**
         * @param fingerprint Fingerprint of this resource. This field is used internally during updates of this resource.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is not useful for users, and has been removed as an output.
         * 
         */
        @Deprecated /* This field is not useful for users, and has been removed as an output. */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint Fingerprint of this resource. This field is used internally during updates of this resource.
         * 
         * @return builder
         * 
         * @deprecated
         * This field is not useful for users, and has been removed as an output.
         * 
         */
        @Deprecated /* This field is not useful for users, and has been removed as an output. */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param gatewayAddress The gateway address for default routes to reach destination addresses
         * outside this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder gatewayAddress(@Nullable Output<String> gatewayAddress) {
            $.gatewayAddress = gatewayAddress;
            return this;
        }

        /**
         * @param gatewayAddress The gateway address for default routes to reach destination addresses
         * outside this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder gatewayAddress(String gatewayAddress) {
            return gatewayAddress(Output.of(gatewayAddress));
        }

        /**
         * @param internalIpv6Prefix The internal IPv6 address range that is assigned to this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder internalIpv6Prefix(@Nullable Output<String> internalIpv6Prefix) {
            $.internalIpv6Prefix = internalIpv6Prefix;
            return this;
        }

        /**
         * @param internalIpv6Prefix The internal IPv6 address range that is assigned to this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder internalIpv6Prefix(String internalIpv6Prefix) {
            return internalIpv6Prefix(Output.of(internalIpv6Prefix));
        }

        /**
         * @param ipCidrRange The range of internal addresses that are owned by this subnetwork.
         * Provide this property when you create the subnetwork. For example,
         * 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
         * non-overlapping within a network. Only IPv4 is supported.
         * Field is optional when `reserved_internal_range` is defined, otherwise required.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(@Nullable Output<String> ipCidrRange) {
            $.ipCidrRange = ipCidrRange;
            return this;
        }

        /**
         * @param ipCidrRange The range of internal addresses that are owned by this subnetwork.
         * Provide this property when you create the subnetwork. For example,
         * 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
         * non-overlapping within a network. Only IPv4 is supported.
         * Field is optional when `reserved_internal_range` is defined, otherwise required.
         * 
         * @return builder
         * 
         */
        public Builder ipCidrRange(String ipCidrRange) {
            return ipCidrRange(Output.of(ipCidrRange));
        }

        /**
         * @param ipCollection Resource reference of a PublicDelegatedPrefix. The PDP must be a sub-PDP
         * in EXTERNAL_IPV6_SUBNETWORK_CREATION mode.
         * Use one of the following formats to specify a sub-PDP when creating an
         * IPv6 NetLB forwarding rule using BYOIP:
         * Full resource URL, as in:
         * * `https://www.googleapis.com/compute/v1/projects/{{projectId}}/regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
         *   Partial URL, as in:
         * * `projects/{{projectId}}/regions/region/publicDelegatedPrefixes/{{sub-pdp-name}}`
         * * `regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
         * 
         * @return builder
         * 
         */
        public Builder ipCollection(@Nullable Output<String> ipCollection) {
            $.ipCollection = ipCollection;
            return this;
        }

        /**
         * @param ipCollection Resource reference of a PublicDelegatedPrefix. The PDP must be a sub-PDP
         * in EXTERNAL_IPV6_SUBNETWORK_CREATION mode.
         * Use one of the following formats to specify a sub-PDP when creating an
         * IPv6 NetLB forwarding rule using BYOIP:
         * Full resource URL, as in:
         * * `https://www.googleapis.com/compute/v1/projects/{{projectId}}/regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
         *   Partial URL, as in:
         * * `projects/{{projectId}}/regions/region/publicDelegatedPrefixes/{{sub-pdp-name}}`
         * * `regions/{{region}}/publicDelegatedPrefixes/{{sub-pdp-name}}`
         * 
         * @return builder
         * 
         */
        public Builder ipCollection(String ipCollection) {
            return ipCollection(Output.of(ipCollection));
        }

        /**
         * @param ipv6AccessType The access type of IPv6 address this subnet holds. It&#39;s immutable and can only be specified during creation
         * or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
         * cannot enable direct path.
         * Possible values are: `EXTERNAL`, `INTERNAL`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessType(@Nullable Output<String> ipv6AccessType) {
            $.ipv6AccessType = ipv6AccessType;
            return this;
        }

        /**
         * @param ipv6AccessType The access type of IPv6 address this subnet holds. It&#39;s immutable and can only be specified during creation
         * or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
         * cannot enable direct path.
         * Possible values are: `EXTERNAL`, `INTERNAL`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessType(String ipv6AccessType) {
            return ipv6AccessType(Output.of(ipv6AccessType));
        }

        /**
         * @param ipv6CidrRange The range of internal IPv6 addresses that are owned by this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrRange(@Nullable Output<String> ipv6CidrRange) {
            $.ipv6CidrRange = ipv6CidrRange;
            return this;
        }

        /**
         * @param ipv6CidrRange The range of internal IPv6 addresses that are owned by this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrRange(String ipv6CidrRange) {
            return ipv6CidrRange(Output.of(ipv6CidrRange));
        }

        /**
         * @param ipv6GceEndpoint Possible endpoints of this subnetwork. It can be one of the following:
         * * VM_ONLY: The subnetwork can be used for creating instances and IPv6 addresses with VM endpoint type. Such a subnetwork
         *   gets external IPv6 ranges from a public delegated prefix and cannot be used to create NetLb.
         * * VM_AND_FR: The subnetwork can be used for creating both VM instances and Forwarding Rules. It can also be used to reserve
         *   IPv6 addresses with both VM and FR endpoint types. Such a subnetwork gets its IPv6 range from Google IP Pool directly.
         * 
         * @return builder
         * 
         */
        public Builder ipv6GceEndpoint(@Nullable Output<String> ipv6GceEndpoint) {
            $.ipv6GceEndpoint = ipv6GceEndpoint;
            return this;
        }

        /**
         * @param ipv6GceEndpoint Possible endpoints of this subnetwork. It can be one of the following:
         * * VM_ONLY: The subnetwork can be used for creating instances and IPv6 addresses with VM endpoint type. Such a subnetwork
         *   gets external IPv6 ranges from a public delegated prefix and cannot be used to create NetLb.
         * * VM_AND_FR: The subnetwork can be used for creating both VM instances and Forwarding Rules. It can also be used to reserve
         *   IPv6 addresses with both VM and FR endpoint types. Such a subnetwork gets its IPv6 range from Google IP Pool directly.
         * 
         * @return builder
         * 
         */
        public Builder ipv6GceEndpoint(String ipv6GceEndpoint) {
            return ipv6GceEndpoint(Output.of(ipv6GceEndpoint));
        }

        /**
         * @param logConfig This field denotes the VPC flow logging options for this subnetwork. If
         * logging is enabled, logs are exported to Cloud Logging. Flow logging
         * isn&#39;t supported if the subnet `purpose` field is set to subnetwork is
         * `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<SubnetworkLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig This field denotes the VPC flow logging options for this subnetwork. If
         * logging is enabled, logs are exported to Cloud Logging. Flow logging
         * isn&#39;t supported if the subnet `purpose` field is set to subnetwork is
         * `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(SubnetworkLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param name The name of the resource, provided by the client when initially
         * creating the resource. The name must be 1-63 characters long, and
         * comply with RFC1035. Specifically, the name must be 1-63 characters
         * long and match the regular expression `a-z?` which
         * means the first character must be a lowercase letter, and all
         * following characters must be a dash, lowercase letter, or digit,
         * except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the resource, provided by the client when initially
         * creating the resource. The name must be 1-63 characters long, and
         * comply with RFC1035. Specifically, the name must be 1-63 characters
         * long and match the regular expression `a-z?` which
         * means the first character must be a lowercase letter, and all
         * following characters must be a dash, lowercase letter, or digit,
         * except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The network this subnet belongs to.
         * Only networks that are in the distributed mode can have subnetworks.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network this subnet belongs to.
         * Only networks that are in the distributed mode can have subnetworks.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param params Additional params passed with the request, but not persisted as part of resource payload
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<SubnetworkParamsArgs> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Additional params passed with the request, but not persisted as part of resource payload
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder params(SubnetworkParamsArgs params) {
            return params(Output.of(params));
        }

        /**
         * @param privateIpGoogleAccess When enabled, VMs in this subnetwork without external IP addresses can
         * access Google APIs and services by using Private Google Access.
         * 
         * @return builder
         * 
         */
        public Builder privateIpGoogleAccess(@Nullable Output<Boolean> privateIpGoogleAccess) {
            $.privateIpGoogleAccess = privateIpGoogleAccess;
            return this;
        }

        /**
         * @param privateIpGoogleAccess When enabled, VMs in this subnetwork without external IP addresses can
         * access Google APIs and services by using Private Google Access.
         * 
         * @return builder
         * 
         */
        public Builder privateIpGoogleAccess(Boolean privateIpGoogleAccess) {
            return privateIpGoogleAccess(Output.of(privateIpGoogleAccess));
        }

        /**
         * @param privateIpv6GoogleAccess The private IPv6 google access type for the VMs in this subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIpv6GoogleAccess(@Nullable Output<String> privateIpv6GoogleAccess) {
            $.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            return this;
        }

        /**
         * @param privateIpv6GoogleAccess The private IPv6 google access type for the VMs in this subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            return privateIpv6GoogleAccess(Output.of(privateIpv6GoogleAccess));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param purpose The purpose of the resource. This field can be either `PRIVATE`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT`, `PEER_MIGRATION` or `PRIVATE_NAT`.
         * A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
         * A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
         * A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
         * A subnetwork with purpose set to `PEER_MIGRATION` is a user created subnetwork that is reserved for migrating resources from one peered network to another.
         * A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
         * Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
         * If unspecified, the purpose defaults to `PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder purpose(@Nullable Output<String> purpose) {
            $.purpose = purpose;
            return this;
        }

        /**
         * @param purpose The purpose of the resource. This field can be either `PRIVATE`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT`, `PEER_MIGRATION` or `PRIVATE_NAT`.
         * A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
         * A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
         * A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
         * A subnetwork with purpose set to `PEER_MIGRATION` is a user created subnetwork that is reserved for migrating resources from one peered network to another.
         * A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
         * Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
         * If unspecified, the purpose defaults to `PRIVATE`.
         * 
         * @return builder
         * 
         */
        public Builder purpose(String purpose) {
            return purpose(Output.of(purpose));
        }

        /**
         * @param region The GCP region for this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The GCP region for this subnetwork.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param reservedInternalRange The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
         * E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
         * 
         * @return builder
         * 
         */
        public Builder reservedInternalRange(@Nullable Output<String> reservedInternalRange) {
            $.reservedInternalRange = reservedInternalRange;
            return this;
        }

        /**
         * @param reservedInternalRange The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
         * E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
         * 
         * @return builder
         * 
         */
        public Builder reservedInternalRange(String reservedInternalRange) {
            return reservedInternalRange(Output.of(reservedInternalRange));
        }

        /**
         * @param role The role of subnetwork.
         * Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
         * The value can be set to `ACTIVE` or `BACKUP`.
         * An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
         * A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
         * Possible values are: `ACTIVE`, `BACKUP`.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of subnetwork.
         * Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
         * The value can be set to `ACTIVE` or `BACKUP`.
         * An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
         * A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
         * Possible values are: `ACTIVE`, `BACKUP`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param secondaryIpRanges An array of configurations for secondary IP ranges for VM instances
         * contained in this subnetwork. The primary IP of such VM must belong
         * to the primary ipCidrRange of the subnetwork. The alias IPs may belong
         * to either primary or secondary ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpRanges(@Nullable Output<List<SubnetworkSecondaryIpRangeArgs>> secondaryIpRanges) {
            $.secondaryIpRanges = secondaryIpRanges;
            return this;
        }

        /**
         * @param secondaryIpRanges An array of configurations for secondary IP ranges for VM instances
         * contained in this subnetwork. The primary IP of such VM must belong
         * to the primary ipCidrRange of the subnetwork. The alias IPs may belong
         * to either primary or secondary ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpRanges(List<SubnetworkSecondaryIpRangeArgs> secondaryIpRanges) {
            return secondaryIpRanges(Output.of(secondaryIpRanges));
        }

        /**
         * @param secondaryIpRanges An array of configurations for secondary IP ranges for VM instances
         * contained in this subnetwork. The primary IP of such VM must belong
         * to the primary ipCidrRange of the subnetwork. The alias IPs may belong
         * to either primary or secondary ranges.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder secondaryIpRanges(SubnetworkSecondaryIpRangeArgs... secondaryIpRanges) {
            return secondaryIpRanges(List.of(secondaryIpRanges));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param sendSecondaryIpRangeIfEmpty Controls the removal behavior of secondary_ip_range.
         * When false, removing secondary_ip_range from config will not produce a diff as
         * the provider will default to the API&#39;s value.
         * When true, the provider will treat removing secondary_ip_range as sending an
         * empty list of secondary IP ranges to the API.
         * Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder sendSecondaryIpRangeIfEmpty(@Nullable Output<Boolean> sendSecondaryIpRangeIfEmpty) {
            $.sendSecondaryIpRangeIfEmpty = sendSecondaryIpRangeIfEmpty;
            return this;
        }

        /**
         * @param sendSecondaryIpRangeIfEmpty Controls the removal behavior of secondary_ip_range.
         * When false, removing secondary_ip_range from config will not produce a diff as
         * the provider will default to the API&#39;s value.
         * When true, the provider will treat removing secondary_ip_range as sending an
         * empty list of secondary IP ranges to the API.
         * Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder sendSecondaryIpRangeIfEmpty(Boolean sendSecondaryIpRangeIfEmpty) {
            return sendSecondaryIpRangeIfEmpty(Output.of(sendSecondaryIpRangeIfEmpty));
        }

        /**
         * @param stackType The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
         * If not specified IPV4_ONLY will be used.
         * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder stackType(@Nullable Output<String> stackType) {
            $.stackType = stackType;
            return this;
        }

        /**
         * @param stackType The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
         * If not specified IPV4_ONLY will be used.
         * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder stackType(String stackType) {
            return stackType(Output.of(stackType));
        }

        /**
         * @param state &#39;The state of the subnetwork, which can be one of the following values:
         * READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose
         * set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained.
         * A subnetwork that is draining cannot be used or modified until it reaches a status of READY&#39;
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state &#39;The state of the subnetwork, which can be one of the following values:
         * READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose
         * set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained.
         * A subnetwork that is draining cannot be used or modified until it reaches a status of READY&#39;
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetworkId The unique identifier number for the resource. This identifier is defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkId(@Nullable Output<Integer> subnetworkId) {
            $.subnetworkId = subnetworkId;
            return this;
        }

        /**
         * @param subnetworkId The unique identifier number for the resource. This identifier is defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder subnetworkId(Integer subnetworkId) {
            return subnetworkId(Output.of(subnetworkId));
        }

        public SubnetworkState build() {
            return $;
        }
    }

}
