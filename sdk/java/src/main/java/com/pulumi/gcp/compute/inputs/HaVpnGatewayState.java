// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.HaVpnGatewayVpnInterfaceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HaVpnGatewayState extends com.pulumi.resources.ResourceArgs {

    public static final HaVpnGatewayState Empty = new HaVpnGatewayState();

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * The IP family of the gateway IPs for the HA-VPN gateway interfaces. If not specified, IPV4 will be used.
     * Default value is `IPV4`.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    @Import(name="gatewayIpVersion")
    private @Nullable Output<String> gatewayIpVersion;

    /**
     * @return The IP family of the gateway IPs for the HA-VPN gateway interfaces. If not specified, IPV4 will be used.
     * Default value is `IPV4`.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    public Optional<Output<String>> gatewayIpVersion() {
        return Optional.ofNullable(this.gatewayIpVersion);
    }

    /**
     * A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash
     * of the labels set used for optimistic locking. The fingerprint is initially generated by
     * Compute Engine and changes after every request to modify or update labels.
     * You must always provide an up-to-date fingerprint hash in order to update or change labels,
     * otherwise the request will fail with error 412 conditionNotMet.
     * 
     */
    @Import(name="labelFingerprint")
    private @Nullable Output<String> labelFingerprint;

    /**
     * @return A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash
     * of the labels set used for optimistic locking. The fingerprint is initially generated by
     * Compute Engine and changes after every request to modify or update labels.
     * You must always provide an up-to-date fingerprint hash in order to update or change labels,
     * otherwise the request will fail with error 412 conditionNotMet.
     * 
     */
    public Optional<Output<String>> labelFingerprint() {
        return Optional.ofNullable(this.labelFingerprint);
    }

    /**
     * Labels for this resource. These can only be added or modified by the setLabels method.
     * Each label key/value pair must comply with RFC1035. Label values may be empty.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for this resource. These can only be added or modified by the setLabels method.
     * Each label key/value pair must comply with RFC1035. Label values may be empty.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035.  Specifically, the name must be 1-63 characters long and
     * match the regular expression `a-z?` which means
     * the first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network this VPN gateway is accepting traffic for.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The network this VPN gateway is accepting traffic for.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * The region this gateway should sit in.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region this gateway should sit in.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * The stack type for this VPN gateway to identify the IP protocols that are enabled.
     * If not specified, IPV4_ONLY will be used.
     * Default value is `IPV4_ONLY`.
     * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
     * 
     */
    @Import(name="stackType")
    private @Nullable Output<String> stackType;

    /**
     * @return The stack type for this VPN gateway to identify the IP protocols that are enabled.
     * If not specified, IPV4_ONLY will be used.
     * Default value is `IPV4_ONLY`.
     * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
     * 
     */
    public Optional<Output<String>> stackType() {
        return Optional.ofNullable(this.stackType);
    }

    /**
     * A list of interfaces on this VPN gateway.
     * Structure is documented below.
     * 
     */
    @Import(name="vpnInterfaces")
    private @Nullable Output<List<HaVpnGatewayVpnInterfaceArgs>> vpnInterfaces;

    /**
     * @return A list of interfaces on this VPN gateway.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<HaVpnGatewayVpnInterfaceArgs>>> vpnInterfaces() {
        return Optional.ofNullable(this.vpnInterfaces);
    }

    private HaVpnGatewayState() {}

    private HaVpnGatewayState(HaVpnGatewayState $) {
        this.description = $.description;
        this.effectiveLabels = $.effectiveLabels;
        this.gatewayIpVersion = $.gatewayIpVersion;
        this.labelFingerprint = $.labelFingerprint;
        this.labels = $.labels;
        this.name = $.name;
        this.network = $.network;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.region = $.region;
        this.selfLink = $.selfLink;
        this.stackType = $.stackType;
        this.vpnInterfaces = $.vpnInterfaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HaVpnGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HaVpnGatewayState $;

        public Builder() {
            $ = new HaVpnGatewayState();
        }

        public Builder(HaVpnGatewayState defaults) {
            $ = new HaVpnGatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param gatewayIpVersion The IP family of the gateway IPs for the HA-VPN gateway interfaces. If not specified, IPV4 will be used.
         * Default value is `IPV4`.
         * Possible values are: `IPV4`, `IPV6`.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIpVersion(@Nullable Output<String> gatewayIpVersion) {
            $.gatewayIpVersion = gatewayIpVersion;
            return this;
        }

        /**
         * @param gatewayIpVersion The IP family of the gateway IPs for the HA-VPN gateway interfaces. If not specified, IPV4 will be used.
         * Default value is `IPV4`.
         * Possible values are: `IPV4`, `IPV6`.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIpVersion(String gatewayIpVersion) {
            return gatewayIpVersion(Output.of(gatewayIpVersion));
        }

        /**
         * @param labelFingerprint A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash
         * of the labels set used for optimistic locking. The fingerprint is initially generated by
         * Compute Engine and changes after every request to modify or update labels.
         * You must always provide an up-to-date fingerprint hash in order to update or change labels,
         * otherwise the request will fail with error 412 conditionNotMet.
         * 
         * @return builder
         * 
         */
        public Builder labelFingerprint(@Nullable Output<String> labelFingerprint) {
            $.labelFingerprint = labelFingerprint;
            return this;
        }

        /**
         * @param labelFingerprint A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash
         * of the labels set used for optimistic locking. The fingerprint is initially generated by
         * Compute Engine and changes after every request to modify or update labels.
         * You must always provide an up-to-date fingerprint hash in order to update or change labels,
         * otherwise the request will fail with error 412 conditionNotMet.
         * 
         * @return builder
         * 
         */
        public Builder labelFingerprint(String labelFingerprint) {
            return labelFingerprint(Output.of(labelFingerprint));
        }

        /**
         * @param labels Labels for this resource. These can only be added or modified by the setLabels method.
         * Each label key/value pair must comply with RFC1035. Label values may be empty.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for this resource. These can only be added or modified by the setLabels method.
         * Each label key/value pair must comply with RFC1035. Label values may be empty.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035.  Specifically, the name must be 1-63 characters long and
         * match the regular expression `a-z?` which means
         * the first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035.  Specifically, the name must be 1-63 characters long and
         * match the regular expression `a-z?` which means
         * the first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The network this VPN gateway is accepting traffic for.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network this VPN gateway is accepting traffic for.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param region The region this gateway should sit in.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region this gateway should sit in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param stackType The stack type for this VPN gateway to identify the IP protocols that are enabled.
         * If not specified, IPV4_ONLY will be used.
         * Default value is `IPV4_ONLY`.
         * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder stackType(@Nullable Output<String> stackType) {
            $.stackType = stackType;
            return this;
        }

        /**
         * @param stackType The stack type for this VPN gateway to identify the IP protocols that are enabled.
         * If not specified, IPV4_ONLY will be used.
         * Default value is `IPV4_ONLY`.
         * Possible values are: `IPV4_ONLY`, `IPV4_IPV6`, `IPV6_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder stackType(String stackType) {
            return stackType(Output.of(stackType));
        }

        /**
         * @param vpnInterfaces A list of interfaces on this VPN gateway.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpnInterfaces(@Nullable Output<List<HaVpnGatewayVpnInterfaceArgs>> vpnInterfaces) {
            $.vpnInterfaces = vpnInterfaces;
            return this;
        }

        /**
         * @param vpnInterfaces A list of interfaces on this VPN gateway.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpnInterfaces(List<HaVpnGatewayVpnInterfaceArgs> vpnInterfaces) {
            return vpnInterfaces(Output.of(vpnInterfaces));
        }

        /**
         * @param vpnInterfaces A list of interfaces on this VPN gateway.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpnInterfaces(HaVpnGatewayVpnInterfaceArgs... vpnInterfaces) {
            return vpnInterfaces(List.of(vpnInterfaces));
        }

        public HaVpnGatewayState build() {
            return $;
        }
    }

}
