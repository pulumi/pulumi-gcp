// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlexibleAppVersionHandlerStaticFiles {
    /**
     * @return Whether files should also be uploaded as code data. By default, files declared in static file handlers are
     * uploaded as static data and are only served to end users; they cannot be read by the application. If enabled,
     * uploads are charged against both your code and static data storage resource quotas.
     * 
     */
    private @Nullable Boolean applicationReadable;
    /**
     * @return Time a static file served by this handler should be cached by web proxies and browsers.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example &#34;3.5s&#34;.
     * Default is &#39;0s&#39;
     * 
     */
    private @Nullable String expiration;
    /**
     * @return HTTP headers to use for all responses from these URLs.
     * An object containing a list of &#34;key:value&#34; value pairs.&#34;.
     * 
     */
    private @Nullable Map<String,String> httpHeaders;
    /**
     * @return MIME type used to serve all files served by this handler.
     * Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.
     * 
     */
    private @Nullable String mimeType;
    /**
     * @return Path to the static files matched by the URL pattern, from the application root directory.
     * The path can refer to text matched in groupings in the URL pattern.
     * 
     */
    private @Nullable String path;
    /**
     * @return Whether this handler should match the request if the file referenced by the handler does not exist.
     * 
     */
    private @Nullable Boolean requireMatchingFile;
    /**
     * @return Regular expression that matches the file paths for all files that should be referenced by this handler.
     * 
     */
    private @Nullable String uploadPathRegex;

    private FlexibleAppVersionHandlerStaticFiles() {}
    /**
     * @return Whether files should also be uploaded as code data. By default, files declared in static file handlers are
     * uploaded as static data and are only served to end users; they cannot be read by the application. If enabled,
     * uploads are charged against both your code and static data storage resource quotas.
     * 
     */
    public Optional<Boolean> applicationReadable() {
        return Optional.ofNullable(this.applicationReadable);
    }
    /**
     * @return Time a static file served by this handler should be cached by web proxies and browsers.
     * A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example &#34;3.5s&#34;.
     * Default is &#39;0s&#39;
     * 
     */
    public Optional<String> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return HTTP headers to use for all responses from these URLs.
     * An object containing a list of &#34;key:value&#34; value pairs.&#34;.
     * 
     */
    public Map<String,String> httpHeaders() {
        return this.httpHeaders == null ? Map.of() : this.httpHeaders;
    }
    /**
     * @return MIME type used to serve all files served by this handler.
     * Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.
     * 
     */
    public Optional<String> mimeType() {
        return Optional.ofNullable(this.mimeType);
    }
    /**
     * @return Path to the static files matched by the URL pattern, from the application root directory.
     * The path can refer to text matched in groupings in the URL pattern.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Whether this handler should match the request if the file referenced by the handler does not exist.
     * 
     */
    public Optional<Boolean> requireMatchingFile() {
        return Optional.ofNullable(this.requireMatchingFile);
    }
    /**
     * @return Regular expression that matches the file paths for all files that should be referenced by this handler.
     * 
     */
    public Optional<String> uploadPathRegex() {
        return Optional.ofNullable(this.uploadPathRegex);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleAppVersionHandlerStaticFiles defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean applicationReadable;
        private @Nullable String expiration;
        private @Nullable Map<String,String> httpHeaders;
        private @Nullable String mimeType;
        private @Nullable String path;
        private @Nullable Boolean requireMatchingFile;
        private @Nullable String uploadPathRegex;
        public Builder() {}
        public Builder(FlexibleAppVersionHandlerStaticFiles defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReadable = defaults.applicationReadable;
    	      this.expiration = defaults.expiration;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.mimeType = defaults.mimeType;
    	      this.path = defaults.path;
    	      this.requireMatchingFile = defaults.requireMatchingFile;
    	      this.uploadPathRegex = defaults.uploadPathRegex;
        }

        @CustomType.Setter
        public Builder applicationReadable(@Nullable Boolean applicationReadable) {
            this.applicationReadable = applicationReadable;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(@Nullable String expiration) {
            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeaders(@Nullable Map<String,String> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder mimeType(@Nullable String mimeType) {
            this.mimeType = mimeType;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder requireMatchingFile(@Nullable Boolean requireMatchingFile) {
            this.requireMatchingFile = requireMatchingFile;
            return this;
        }
        @CustomType.Setter
        public Builder uploadPathRegex(@Nullable String uploadPathRegex) {
            this.uploadPathRegex = uploadPathRegex;
            return this;
        }
        public FlexibleAppVersionHandlerStaticFiles build() {
            final var o = new FlexibleAppVersionHandlerStaticFiles();
            o.applicationReadable = applicationReadable;
            o.expiration = expiration;
            o.httpHeaders = httpHeaders;
            o.mimeType = mimeType;
            o.path = path;
            o.requireMatchingFile = requireMatchingFile;
            o.uploadPathRegex = uploadPathRegex;
            return o;
        }
    }
}
